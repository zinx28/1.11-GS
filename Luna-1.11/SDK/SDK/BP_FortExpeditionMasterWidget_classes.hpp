#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FortExpeditionMasterWidget

#include "Basic.hpp"

#include "FrontEndRewards_Definition_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteUI_structs.hpp"
#include "FortniteUI_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_FortExpeditionMasterWidget.BP_FortExpeditionMasterWidget_C
// 0x00D0 (0x0510 - 0x0440)
class UBP_FortExpeditionMasterWidget_C final : public UFortExpeditionMasterWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0440(0x0008)(Transient, DuplicateTransient)
	class UBP_FortExpeditionOverviewWidget_C*     BP_FortExpeditionOverviewWidget;                   // 0x0448(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FDataTableRowHandle                    BackInputAction;                                   // 0x0450(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    BuildExpeditionAction;                             // 0x0460(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    AbandonExpeditionAction;                           // 0x0470(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    CollectExpeditionAction;                           // 0x0480(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    SortInputAction;                                   // 0x0490(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          bRewardsShowing;                                   // 0x04A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A1[0x7];                                      // 0x04A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFrontEndRewards_Widget_C*              RewardsWidget;                                     // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UFortExpeditionItem*>            CompletedExpeditions;                              // 0x04B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FFrontEndRewards_Definition            RewardsDefinition;                                 // 0x04C0(0x0048)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	EFortExpeditionListSort                       ExpeditionListSortType;                            // 0x0508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortExpeditionListSort                       ExpeditionListSortBegin;                           // 0x0509(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortExpeditionListSort                       ExpeditionListSortEnd;                             // 0x050A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_FortExpeditionMasterWidget(int32 EntryPoint);
	void OnActivated();
	void HACK_OnActivate_UpdateMasterWidget();
	void HandleAllCompletedExpeditionsCollected();
	void Destruct();
	void Construct();
	void Handle_Back(bool* Passthrough);
	void Setup_Input_Action_Handlers();
	void Setup_Bindings();
	void Update_Master_Widget();
	void Hide_Input_Action(const struct FDataTableRowHandle& InputActionRow);
	void Show_Input_Action(const struct FDataTableRowHandle& InputActionRow);
	void Present_Reward_UI();
	void HandleBuildExpeditionAction(bool* Passthrough);
	void HandleAbandonExpeditionAction(bool* Passthrough);
	void HandleCollectExpeditionAction(bool* Passthrough);
	void Disable_Input_Action(const struct FDataTableRowHandle& InputActionRow);
	void HandleSortExpeditionListAction(bool* Passthrough);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FortExpeditionMasterWidget_C">();
	}
	static class UBP_FortExpeditionMasterWidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_FortExpeditionMasterWidget_C>();
	}
};
static_assert(alignof(UBP_FortExpeditionMasterWidget_C) == 0x000008, "Wrong alignment on UBP_FortExpeditionMasterWidget_C");
static_assert(sizeof(UBP_FortExpeditionMasterWidget_C) == 0x000510, "Wrong size on UBP_FortExpeditionMasterWidget_C");
static_assert(offsetof(UBP_FortExpeditionMasterWidget_C, UberGraphFrame) == 0x000440, "Member 'UBP_FortExpeditionMasterWidget_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_FortExpeditionMasterWidget_C, BP_FortExpeditionOverviewWidget) == 0x000448, "Member 'UBP_FortExpeditionMasterWidget_C::BP_FortExpeditionOverviewWidget' has a wrong offset!");
static_assert(offsetof(UBP_FortExpeditionMasterWidget_C, BackInputAction) == 0x000450, "Member 'UBP_FortExpeditionMasterWidget_C::BackInputAction' has a wrong offset!");
static_assert(offsetof(UBP_FortExpeditionMasterWidget_C, BuildExpeditionAction) == 0x000460, "Member 'UBP_FortExpeditionMasterWidget_C::BuildExpeditionAction' has a wrong offset!");
static_assert(offsetof(UBP_FortExpeditionMasterWidget_C, AbandonExpeditionAction) == 0x000470, "Member 'UBP_FortExpeditionMasterWidget_C::AbandonExpeditionAction' has a wrong offset!");
static_assert(offsetof(UBP_FortExpeditionMasterWidget_C, CollectExpeditionAction) == 0x000480, "Member 'UBP_FortExpeditionMasterWidget_C::CollectExpeditionAction' has a wrong offset!");
static_assert(offsetof(UBP_FortExpeditionMasterWidget_C, SortInputAction) == 0x000490, "Member 'UBP_FortExpeditionMasterWidget_C::SortInputAction' has a wrong offset!");
static_assert(offsetof(UBP_FortExpeditionMasterWidget_C, bRewardsShowing) == 0x0004A0, "Member 'UBP_FortExpeditionMasterWidget_C::bRewardsShowing' has a wrong offset!");
static_assert(offsetof(UBP_FortExpeditionMasterWidget_C, RewardsWidget) == 0x0004A8, "Member 'UBP_FortExpeditionMasterWidget_C::RewardsWidget' has a wrong offset!");
static_assert(offsetof(UBP_FortExpeditionMasterWidget_C, CompletedExpeditions) == 0x0004B0, "Member 'UBP_FortExpeditionMasterWidget_C::CompletedExpeditions' has a wrong offset!");
static_assert(offsetof(UBP_FortExpeditionMasterWidget_C, RewardsDefinition) == 0x0004C0, "Member 'UBP_FortExpeditionMasterWidget_C::RewardsDefinition' has a wrong offset!");
static_assert(offsetof(UBP_FortExpeditionMasterWidget_C, ExpeditionListSortType) == 0x000508, "Member 'UBP_FortExpeditionMasterWidget_C::ExpeditionListSortType' has a wrong offset!");
static_assert(offsetof(UBP_FortExpeditionMasterWidget_C, ExpeditionListSortBegin) == 0x000509, "Member 'UBP_FortExpeditionMasterWidget_C::ExpeditionListSortBegin' has a wrong offset!");
static_assert(offsetof(UBP_FortExpeditionMasterWidget_C, ExpeditionListSortEnd) == 0x00050A, "Member 'UBP_FortExpeditionMasterWidget_C::ExpeditionListSortEnd' has a wrong offset!");

}

