#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Fragment_Container

#include "Basic.hpp"

#include "B_Fragment_Container_classes.hpp"
#include "B_Fragment_Container_parameters.hpp"


namespace SDK
{

// Function B_Fragment_Container.B_Fragment_Container_C.ExecuteUbergraph_B_Fragment_Container
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Fragment_Container_C::ExecuteUbergraph_B_Fragment_Container(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Fragment_Container_C", "ExecuteUbergraph_B_Fragment_Container");

	Params::B_Fragment_Container_C_ExecuteUbergraph_B_Fragment_Container Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Fragment_Container.B_Fragment_Container_C.AnimationComplete
// (BlueprintCallable, BlueprintEvent)

void AB_Fragment_Container_C::AnimationComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Fragment_Container_C", "AnimationComplete");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Fragment_Container.B_Fragment_Container_C.PlayAnimation
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimSequence*                    AnimToPlay                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Fragment_Container_C::PlayAnimation(class UAnimSequence* AnimToPlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Fragment_Container_C", "PlayAnimation");

	Params::B_Fragment_Container_C_PlayAnimation Parms{};

	Parms.AnimToPlay = AnimToPlay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Fragment_Container.B_Fragment_Container_C.SoftFeedback
// (BlueprintCallable, BlueprintEvent)

void AB_Fragment_Container_C::SoftFeedback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Fragment_Container_C", "SoftFeedback");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Fragment_Container.B_Fragment_Container_C.MultiFeedback
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void AB_Fragment_Container_C::MultiFeedback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Fragment_Container_C", "MultiFeedback");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Fragment_Container.B_Fragment_Container_C.BlueprintOnBeginInteract
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void AB_Fragment_Container_C::BlueprintOnBeginInteract()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Fragment_Container_C", "BlueprintOnBeginInteract");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Fragment_Container.B_Fragment_Container_C.Reset_Activation
// (BlueprintCallable, BlueprintEvent)

void AB_Fragment_Container_C::Reset_Activation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Fragment_Container_C", "Reset_Activation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Fragment_Container.B_Fragment_Container_C.StartHide
// (BlueprintCallable, BlueprintEvent)

void AB_Fragment_Container_C::StartHide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Fragment_Container_C", "StartHide");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Fragment_Container.B_Fragment_Container_C.ShowOnMiniMap
// (BlueprintCallable, BlueprintEvent)

void AB_Fragment_Container_C::ShowOnMiniMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Fragment_Container_C", "ShowOnMiniMap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Fragment_Container.B_Fragment_Container_C.MoveDown
// (BlueprintCallable, BlueprintEvent)

void AB_Fragment_Container_C::MoveDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Fragment_Container_C", "MoveDown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Fragment_Container.B_Fragment_Container_C.PowerDown
// (BlueprintCallable, BlueprintEvent)

void AB_Fragment_Container_C::PowerDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Fragment_Container_C", "PowerDown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Fragment_Container.B_Fragment_Container_C.MoveUp
// (BlueprintCallable, BlueprintEvent)

void AB_Fragment_Container_C::MoveUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Fragment_Container_C", "MoveUp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Fragment_Container.B_Fragment_Container_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Fragment_Container_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Fragment_Container_C", "ReceiveTick");

	Params::B_Fragment_Container_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Fragment_Container.B_Fragment_Container_C.BndEvt__Awaken_Collision_K2Node_ComponentBoundEvent_111_ComponentEndOverlapSignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Fragment_Container_C::BndEvt__Awaken_Collision_K2Node_ComponentBoundEvent_111_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Fragment_Container_C", "BndEvt__Awaken_Collision_K2Node_ComponentBoundEvent_111_ComponentEndOverlapSignature__DelegateSignature");

	Params::B_Fragment_Container_C_BndEvt__Awaken_Collision_K2Node_ComponentBoundEvent_111_ComponentEndOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Fragment_Container.B_Fragment_Container_C.BndEvt__Awaken_Collision_K2Node_ComponentBoundEvent_108_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AB_Fragment_Container_C::BndEvt__Awaken_Collision_K2Node_ComponentBoundEvent_108_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Fragment_Container_C", "BndEvt__Awaken_Collision_K2Node_ComponentBoundEvent_108_ComponentBeginOverlapSignature__DelegateSignature");

	Params::B_Fragment_Container_C_BndEvt__Awaken_Collision_K2Node_ComponentBoundEvent_108_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Fragment_Container.B_Fragment_Container_C.ActivateFX
// (BlueprintCallable, BlueprintEvent)

void AB_Fragment_Container_C::ActivateFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Fragment_Container_C", "ActivateFX");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Fragment_Container.B_Fragment_Container_C.BlueprintOnInteract
// (BlueprintAuthorityOnly, Event, Public, BlueprintEvent)
// Parameters:
// class AFortPawn*                        InteractingPawn                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Fragment_Container_C::BlueprintOnInteract(const class AFortPawn* InteractingPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Fragment_Container_C", "BlueprintOnInteract");

	Params::B_Fragment_Container_C_BlueprintOnInteract Parms{};

	Parms.InteractingPawn = InteractingPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Fragment_Container.B_Fragment_Container_C.OnDeathServer
// (BlueprintAuthorityOnly, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTagContainer            DamageTags                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FVector                          Momentum                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       HitInfo                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// class AController*                      InstigatedBy                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayEffectContextHandle     EffectContext                                          (BlueprintVisible, BlueprintReadOnly, Parm)

void AB_Fragment_Container_C::OnDeathServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Fragment_Container_C", "OnDeathServer");

	Params::B_Fragment_Container_C_OnDeathServer Parms{};

	Parms.Damage = Damage;
	Parms.DamageTags = std::move(DamageTags);
	Parms.Momentum = std::move(Momentum);
	Parms.HitInfo = std::move(HitInfo);
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;
	Parms.EffectContext = std::move(EffectContext);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Fragment_Container.B_Fragment_Container_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AB_Fragment_Container_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Fragment_Container_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Fragment_Container.B_Fragment_Container_C.VerticalMovementTimeline__down__EventFunc
// (BlueprintEvent)

void AB_Fragment_Container_C::VerticalMovementTimeline__down__EventFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Fragment_Container_C", "VerticalMovementTimeline__down__EventFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Fragment_Container.B_Fragment_Container_C.VerticalMovementTimeline__Up__EventFunc
// (BlueprintEvent)

void AB_Fragment_Container_C::VerticalMovementTimeline__Up__EventFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Fragment_Container_C", "VerticalMovementTimeline__Up__EventFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Fragment_Container.B_Fragment_Container_C.VerticalMovementTimeline__UpdateFunc
// (BlueprintEvent)

void AB_Fragment_Container_C::VerticalMovementTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Fragment_Container_C", "VerticalMovementTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Fragment_Container.B_Fragment_Container_C.VerticalMovementTimeline__FinishedFunc
// (BlueprintEvent)

void AB_Fragment_Container_C::VerticalMovementTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Fragment_Container_C", "VerticalMovementTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Fragment_Container.B_Fragment_Container_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AB_Fragment_Container_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Fragment_Container_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Fragment_Container.B_Fragment_Container_C.BlueprintGetInteractionString
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AFortPawn*                        InteractingPawn                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm)

class FText AB_Fragment_Container_C::BlueprintGetInteractionString(class AFortPawn* InteractingPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Fragment_Container_C", "BlueprintGetInteractionString");

	Params::B_Fragment_Container_C_BlueprintGetInteractionString Parms{};

	Parms.InteractingPawn = InteractingPawn;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_Fragment_Container.B_Fragment_Container_C.OnRep_BuffType
// (HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_Fragment_Container_C::OnRep_BuffType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Fragment_Container_C", "OnRep_BuffType");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Fragment_Container.B_Fragment_Container_C.DelayedDestroy
// (Public, BlueprintCallable, BlueprintEvent)

void AB_Fragment_Container_C::DelayedDestroy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Fragment_Container_C", "DelayedDestroy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Fragment_Container.B_Fragment_Container_C.OnRep_IsOpen
// (BlueprintCallable, BlueprintEvent)

void AB_Fragment_Container_C::OnRep_IsOpen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Fragment_Container_C", "OnRep_IsOpen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Fragment_Container.B_Fragment_Container_C.UpdateShouldTick
// (Public, BlueprintCallable, BlueprintEvent)

void AB_Fragment_Container_C::UpdateShouldTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Fragment_Container_C", "UpdateShouldTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Fragment_Container.B_Fragment_Container_C.SetAwake
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewAwake                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AB_Fragment_Container_C::SetAwake(bool NewAwake)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Fragment_Container_C", "SetAwake");

	Params::B_Fragment_Container_C_SetAwake Parms{};

	Parms.NewAwake = NewAwake;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Fragment_Container.B_Fragment_Container_C.SetOutlander
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           NewOutlander                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_Fragment_Container_C::SetOutlander(class AActor* NewOutlander)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Fragment_Container_C", "SetOutlander");

	Params::B_Fragment_Container_C_SetOutlander Parms{};

	Parms.NewOutlander = NewOutlander;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Fragment_Container.B_Fragment_Container_C.OnRep_IsOn
// (HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_Fragment_Container_C::OnRep_IsOn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Fragment_Container_C", "OnRep_IsOn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Fragment_Container.B_Fragment_Container_C.OnRep_IsOrbTaken
// (BlueprintCallable, BlueprintEvent)

void AB_Fragment_Container_C::OnRep_IsOrbTaken()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Fragment_Container_C", "OnRep_IsOrbTaken");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_Fragment_Container.B_Fragment_Container_C.ForceFeedbackInteract
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Soft                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AB_Fragment_Container_C::ForceFeedbackInteract(bool Soft)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Fragment_Container_C", "ForceFeedbackInteract");

	Params::B_Fragment_Container_C_ForceFeedbackInteract Parms{};

	Parms.Soft = Soft;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_Fragment_Container.B_Fragment_Container_C.BlueprintCanInteract
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class AFortPawn*                        InteractingPawn                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool AB_Fragment_Container_C::BlueprintCanInteract(class AFortPawn* InteractingPawn) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Fragment_Container_C", "BlueprintCanInteract");

	Params::B_Fragment_Container_C_BlueprintCanInteract Parms{};

	Parms.InteractingPawn = InteractingPawn;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_Fragment_Container.B_Fragment_Container_C.BlueprintGetFailedInteractionString
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class AFortPawn*                        InteractingPawn                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm)

class FText AB_Fragment_Container_C::BlueprintGetFailedInteractionString(class AFortPawn* InteractingPawn) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Fragment_Container_C", "BlueprintGetFailedInteractionString");

	Params::B_Fragment_Container_C_BlueprintGetFailedInteractionString Parms{};

	Parms.InteractingPawn = InteractingPawn;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_Fragment_Container.B_Fragment_Container_C.IsOutlander
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class AFortPawn*                        Pawn                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_IsOutlander                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AB_Fragment_Container_C::IsOutlander(class AFortPawn* Pawn, bool* Param_IsOutlander) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_Fragment_Container_C", "IsOutlander");

	Params::B_Fragment_Container_C_IsOutlander Parms{};

	Parms.Pawn = Pawn;

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsOutlander != nullptr)
		*Param_IsOutlander = Parms.Param_IsOutlander;
}

}

