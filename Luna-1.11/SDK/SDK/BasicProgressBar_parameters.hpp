#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BasicProgressBar

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BasicProgressBar.BasicProgressBar_C.ExecuteUbergraph_BasicProgressBar
// 0x0010 (0x0010 - 0x0000)
struct BasicProgressBar_C_ExecuteUbergraph_BasicProgressBar final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BasicProgressBar_C_ExecuteUbergraph_BasicProgressBar) == 0x000008, "Wrong alignment on BasicProgressBar_C_ExecuteUbergraph_BasicProgressBar");
static_assert(sizeof(BasicProgressBar_C_ExecuteUbergraph_BasicProgressBar) == 0x000010, "Wrong size on BasicProgressBar_C_ExecuteUbergraph_BasicProgressBar");
static_assert(offsetof(BasicProgressBar_C_ExecuteUbergraph_BasicProgressBar, EntryPoint) == 0x000000, "Member 'BasicProgressBar_C_ExecuteUbergraph_BasicProgressBar::EntryPoint' has a wrong offset!");
static_assert(offsetof(BasicProgressBar_C_ExecuteUbergraph_BasicProgressBar, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000008, "Member 'BasicProgressBar_C_ExecuteUbergraph_BasicProgressBar::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function BasicProgressBar.BasicProgressBar_C.Toggle Timer for Secondary Bar
// 0x0028 (0x0028 - 0x0000)
struct BasicProgressBar_C_Toggle_Timer_for_Secondary_Bar final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimerDuration;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LoopTimer;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0020(0x0008)(NoDestructor)
};
static_assert(alignof(BasicProgressBar_C_Toggle_Timer_for_Secondary_Bar) == 0x000008, "Wrong alignment on BasicProgressBar_C_Toggle_Timer_for_Secondary_Bar");
static_assert(sizeof(BasicProgressBar_C_Toggle_Timer_for_Secondary_Bar) == 0x000028, "Wrong size on BasicProgressBar_C_Toggle_Timer_for_Secondary_Bar");
static_assert(offsetof(BasicProgressBar_C_Toggle_Timer_for_Secondary_Bar, IsEnabled) == 0x000000, "Member 'BasicProgressBar_C_Toggle_Timer_for_Secondary_Bar::IsEnabled' has a wrong offset!");
static_assert(offsetof(BasicProgressBar_C_Toggle_Timer_for_Secondary_Bar, TimerDuration) == 0x000004, "Member 'BasicProgressBar_C_Toggle_Timer_for_Secondary_Bar::TimerDuration' has a wrong offset!");
static_assert(offsetof(BasicProgressBar_C_Toggle_Timer_for_Secondary_Bar, LoopTimer) == 0x000008, "Member 'BasicProgressBar_C_Toggle_Timer_for_Secondary_Bar::LoopTimer' has a wrong offset!");
static_assert(offsetof(BasicProgressBar_C_Toggle_Timer_for_Secondary_Bar, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'BasicProgressBar_C_Toggle_Timer_for_Secondary_Bar::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BasicProgressBar_C_Toggle_Timer_for_Secondary_Bar, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000020, "Member 'BasicProgressBar_C_Toggle_Timer_for_Secondary_Bar::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");

// Function BasicProgressBar.BasicProgressBar_C.UpdateHealthBar
// 0x0008 (0x0008 - 0x0000)
struct BasicProgressBar_C_UpdateHealthBar final
{
public:
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BasicProgressBar_C_UpdateHealthBar) == 0x000004, "Wrong alignment on BasicProgressBar_C_UpdateHealthBar");
static_assert(sizeof(BasicProgressBar_C_UpdateHealthBar) == 0x000008, "Wrong size on BasicProgressBar_C_UpdateHealthBar");
static_assert(offsetof(BasicProgressBar_C_UpdateHealthBar, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000000, "Member 'BasicProgressBar_C_UpdateHealthBar::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BasicProgressBar_C_UpdateHealthBar, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000004, "Member 'BasicProgressBar_C_UpdateHealthBar::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function BasicProgressBar.BasicProgressBar_C.SetPrimaryBarValue
// 0x0004 (0x0004 - 0x0000)
struct BasicProgressBar_C_SetPrimaryBarValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BasicProgressBar_C_SetPrimaryBarValue) == 0x000004, "Wrong alignment on BasicProgressBar_C_SetPrimaryBarValue");
static_assert(sizeof(BasicProgressBar_C_SetPrimaryBarValue) == 0x000004, "Wrong size on BasicProgressBar_C_SetPrimaryBarValue");
static_assert(offsetof(BasicProgressBar_C_SetPrimaryBarValue, Value) == 0x000000, "Member 'BasicProgressBar_C_SetPrimaryBarValue::Value' has a wrong offset!");

// Function BasicProgressBar.BasicProgressBar_C.DecrementPrimaryByPercentage
// 0x0008 (0x0008 - 0x0000)
struct BasicProgressBar_C_DecrementPrimaryByPercentage final
{
public:
	float                                         NewHealthPercentage;                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BasicProgressBar_C_DecrementPrimaryByPercentage) == 0x000004, "Wrong alignment on BasicProgressBar_C_DecrementPrimaryByPercentage");
static_assert(sizeof(BasicProgressBar_C_DecrementPrimaryByPercentage) == 0x000008, "Wrong size on BasicProgressBar_C_DecrementPrimaryByPercentage");
static_assert(offsetof(BasicProgressBar_C_DecrementPrimaryByPercentage, NewHealthPercentage) == 0x000000, "Member 'BasicProgressBar_C_DecrementPrimaryByPercentage::NewHealthPercentage' has a wrong offset!");
static_assert(offsetof(BasicProgressBar_C_DecrementPrimaryByPercentage, CallFunc_Less_FloatFloat_ReturnValue) == 0x000004, "Member 'BasicProgressBar_C_DecrementPrimaryByPercentage::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");

// Function BasicProgressBar.BasicProgressBar_C.SetSecondaryBar
// 0x0004 (0x0004 - 0x0000)
struct BasicProgressBar_C_SetSecondaryBar final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BasicProgressBar_C_SetSecondaryBar) == 0x000004, "Wrong alignment on BasicProgressBar_C_SetSecondaryBar");
static_assert(sizeof(BasicProgressBar_C_SetSecondaryBar) == 0x000004, "Wrong size on BasicProgressBar_C_SetSecondaryBar");
static_assert(offsetof(BasicProgressBar_C_SetSecondaryBar, Value) == 0x000000, "Member 'BasicProgressBar_C_SetSecondaryBar::Value' has a wrong offset!");

}

