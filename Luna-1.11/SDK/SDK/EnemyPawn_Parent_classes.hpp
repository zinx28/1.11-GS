#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EnemyPawn_Parent

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass EnemyPawn_Parent.EnemyPawn_Parent_C
// 0x0400 (0x1EC0 - 0x1AC0)
class AEnemyPawn_Parent_C final : public AFortAIPawn
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x1AC0(0x0008)(Transient, DuplicateTransient)
	class UCapsuleComponent*                      WeaponCapsuleCollision;                            // 0x1AC8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Elemental_Layer_Audio_Loop;                        // 0x1AD0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         FadeMiniBossLightOutTL_Fade_2CE2533F4858E8E5F1A8D39F9CE6D9F4; // 0x1AD8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            FadeMiniBossLightOutTL__Direction_2CE2533F4858E8E5F1A8D39F9CE6D9F4; // 0x1ADC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1ADD[0x3];                                     // 0x1ADD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     FadeMiniBossLightOutTL;                            // 0x1AE0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Enemy_Spawn_Out_TL_ColorFadeOutTrack_999FBE184F147A4FE3025AB553DBFA9C; // 0x1AE8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Enemy_Spawn_Out_TL_FadeInTrack_999FBE184F147A4FE3025AB553DBFA9C; // 0x1AEC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Enemy_Spawn_Out_TL__Direction_999FBE184F147A4FE3025AB553DBFA9C; // 0x1AF0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1AF1[0x7];                                     // 0x1AF1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Enemy_Spawn_Out_TL;                                // 0x1AF8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnemySpawnInTL_MiniBossFadeLight_5C7376B04DFAE1465B97F1BB1B873D88; // 0x1B00(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnemySpawnInTL_ColorFadeOutTrack_5C7376B04DFAE1465B97F1BB1B873D88; // 0x1B04(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnemySpawnInTL_FadeInTrack_5C7376B04DFAE1465B97F1BB1B873D88; // 0x1B08(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            EnemySpawnInTL__Direction_5C7376B04DFAE1465B97F1BB1B873D88; // 0x1B0C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B0D[0x3];                                     // 0x1B0D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     EnemySpawnInTL;                                    // 0x1B10(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Dynamic_Material_Instance_0;                       // 0x1B18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Death_Effects;                                     // 0x1B20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        HQ_Death_Particle_System;                          // 0x1B28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeathFX_SpawnRateScale;                            // 0x1B30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HQ_DeathFX_MaxDistance;                            // 0x1B34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        LQ_Death_Particle_System;                          // 0x1B38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LQ_DeathFX_CylinderHeight;                         // 0x1B40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LQ_DeathFX_CylinderRadius;                         // 0x1B44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LQ_DeathFX_SpawnRateScale;                         // 0x1B48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B4C[0x4];                                     // 0x1B4C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LQ_PS_Socket_Attach;                               // 0x1B50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Death_Socket;                                      // 0x1B58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UsePOCScaleAndMaterials;                           // 0x1B60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          POCShouldOverrideMaterial;                         // 0x1B61(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          POCShouldOverrideMaterialValues;                   // 0x1B62(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B63[0x5];                                     // 0x1B63(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     POCOverrideMaterial;                               // 0x1B68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           POCMaterialHairColor;                              // 0x1B70(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           POCMaterialSkinColor;                              // 0x1B80(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           POCMaterialPantColor;                              // 0x1B90(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           POCMaterialShirtColor;                             // 0x1BA0(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          RandomStream;                                      // 0x1BB0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	float                                         PseudoRandomNetworkedFloat;                        // 0x1BB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseRandomColorVariation;                           // 0x1BBC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1BBD[0x3];                                     // 0x1BBD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinearColor>                   MaleHuskHairColors;                                // 0x1BC0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FLinearColor>                   MaleHuskSkinColors;                                // 0x1BD0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FLinearColor>                   MaleHuskPantColors;                                // 0x1BE0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FLinearColor>                   MaleHuskShirtColors;                               // 0x1BF0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UCurveFloat*                            HieghtDistributionCurve;                           // 0x1C00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RandomizeMeshScale;                                // 0x1C08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C09[0x7];                                     // 0x1C09(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnParticlesTransform;                           // 0x1C10(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               Dynamic_Material_Instance_1;                       // 0x1C40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        SpawnParticles;                                    // 0x1C48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CharacterElementalParticles;                       // 0x1C50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowHeadshot;                                     // 0x1C58(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C59[0x7];                                     // 0x1C59(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TC_RangedWeapon;                                   // 0x1C60(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UParticleSystemComponent*               HeadshotParticleSystemComp;                        // 0x1C80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Additive_Hit_React_Montage;                        // 0x1C88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Death_Normal_Sound;                                // 0x1C90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Elemental_Audio_Layer_Sound;                       // 0x1C98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SpecialEventHalloweenPumpkinHead;                  // 0x1CA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SpecialEventHalloweenPumpkinHeadApplied;           // 0x1CA1(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_1CA2[0x6];                                     // 0x1CA2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TC_NPCCharacterTypeHuskBasic;                      // 0x1CA8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_SpecialEventHalloweenPumpkinHead;               // 0x1CC8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         PumpkinHeadPercentage;                             // 0x1CE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CEC[0x4];                                     // 0x1CEC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 GE_SpecialEvent_Halloween_PumpkinHead;             // 0x1CF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Pumpkin_Head_Mesh;                                 // 0x1CF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Pumpkin_Eyeglow_Mesh;                              // 0x1D00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               PumpkinHeadRotation;                               // 0x1D08(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                PumpkinHeadScale;                                  // 0x1D14(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PumpkinHeadOffset;                                 // 0x1D20(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D2C[0x4];                                     // 0x1D2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               PumpkinEyesFX;                                     // 0x1D30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Headshot_FX_Socket;                                // 0x1D38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Material_Alteration_0;                             // 0x1D40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Material_Alteration_1;                             // 0x1D48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               SleepParticleSystemComp;                           // 0x1D50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Husk_Sleeping_Sound;                               // 0x1D58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        HuskSleepSound;                                    // 0x1D60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               WakeUpParticleSystemComp;                          // 0x1D68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AwokenMaxDistance;                                 // 0x1D70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D74[0x4];                                     // 0x1D74(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 AwokenSkeletalMesh;                                // 0x1D78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               AwokenSkelMeshMID;                                 // 0x1D80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AwokenFadeInTime;                                  // 0x1D88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AwokenFadeOutTime;                                 // 0x1D8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AwokenDuration;                                    // 0x1D90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sleeping;                                          // 0x1D94(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HasGlowColorsAssigned;                             // 0x1D95(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SpawnInTimelineCompletedSuccessfully;              // 0x1D96(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D97[0x1];                                     // 0x1D97(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CharacterSpawnInSafetyCheckHandle;                 // 0x1D98(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	class UMaterialInstanceDynamic*               Base_MID_0;                                        // 0x1DA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Previous_MID_0;                                    // 0x1DA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        CharacterElementalParticlesTemplate;               // 0x1DB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FrozenHuskMeshScale;                               // 0x1DB8(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SpawnFrozenHuskMesh;                               // 0x1DC4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1DC5[0x3];                                     // 0x1DC5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        CharacterAmbientParticlesTemplate;                 // 0x1DC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CharacterAmbientParticles;                         // 0x1DD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FString, class UMaterialInterface*> MaterialModifierMap;                               // 0x1DD8(0x0050)(Edit, BlueprintVisible, ZeroConstructor)
	TMap<class FString, class UMaterialInterface*> MaterialModifierMapDefaults;                       // 0x1E28(0x0050)(Edit, BlueprintVisible, ZeroConstructor)
	class USkeletalMeshComponent*                 DuplicateCharacterMesh;                            // 0x1E78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DuplicateCharacterMID;                             // 0x1E80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BoneRefPosePosition;                               // 0x1E88(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MiniBossSizeScale;                                 // 0x1E94(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   MiniBossLight;                                     // 0x1EA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               MinibossPSComponent;                               // 0x1EA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MiniBossLightIntensity;                            // 0x1EB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CharacterParticlesMaxDrawDistance;                 // 0x1EB4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_EnemyPawn_Parent(int32 EntryPoint);
	void OnCheatUpdateSpecialEventGE(bool bShouldUseSpecialEventGE);
	void RestorePreviousMaterialDelay(float Delay_Amount);
	void RestorePreviousMaterialDelayCompleted();
	void OnEndSleepEffects();
	void OnBeginSleepEffects();
	void AdditiveHitReactDelay();
	void OnDamagePlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void PawnUniqueIDSet();
	void OnStartedEncounterSpawn();
	void OnFinishedEncounterSpawn();
	void DebugEnemySpawnIn();
	void DespawnEnemy(const struct FVector& RiftLocationWS);
	void PostSpawnIn();
	void SpawnInSafetyCheck();
	void FadeMiniBossLightOut();
	void BeginDeathFX();
	void OnDeathPlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void ReceiveBeginPlay();
	void EnemySpawnInTL__Spawn__EventFunc();
	void EnemySpawnInTL__UpdateFunc();
	void EnemySpawnInTL__FinishedFunc();
	void Enemy_Spawn_Out_TL__UpdateFunc();
	void Enemy_Spawn_Out_TL__FinishedFunc();
	void FadeMiniBossLightOutTL__UpdateFunc();
	void FadeMiniBossLightOutTL__FinishedFunc();
	void UserConstructionScript();
	void EnemyDeathVisuals(bool* HQ);
	void StopDeathFX();
	void PickColorFromAnArrayOfColors(TArray<struct FLinearColor>& ArrayOfColors, struct FLinearColor* Color);
	void SetVectorParameterOnAllCharacterMIDs(class FName Parameter_Name, const struct FLinearColor& Linear_Color);
	void SetScalarParameterOnAllCharacterMIDs(class FName Parameter_Name, float Scalar_Value);
	void SetActiveParticlesOnCharacterMesh(bool Active, bool Reset);
	void PlayAdditiveHitReacts(const struct FVector& Hit_Direction, class UAnimMontage* Anim_Montage);
	void OverrideMaterialAndCopyParametersOnCharacterMesh(class UMaterialInterface* New_Material_To_Apply);
	void DestroyAwokenSkeletalMesh();
	void OverridePhysicalMaterialOnCharacterMesh(class UPhysicalMaterial* Physical_Material_Override);
	void SpawnParticleSystemOnCharacterMesh(class UParticleSystem* ParticleSystemTemplate, class UParticleSystemComponent* ParticleSystemComponentReferenceVar, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TArray<struct FParticleSysParam>& InstanceParameters, bool AutoActivate, bool AutoDestroy, bool AbsoluteLocation, bool AbsoluteRotation, bool AbsoluteScale, class UParticleSystemComponent** PSComponentReference);
	void SetCharacterFresnelGlowColors(const struct FLinearColor& Inner_Color, const struct FLinearColor& Outer_Color);
	void SetCharacterEyeColors(const struct FLinearColor& Eye_Color_Inner, const struct FLinearColor& Eye_Color_Outer);
	void CharacterSpawnInSafetyCheck();
	void RestorePreviousMaterialOnCharacterMesh(float Delay_in_Seconds);
	void SpawnMeshAttachedToCharacter(class UStaticMesh* Static_Mesh, class FName Socket_Name, const struct FTransform& Relative_Transform, bool Absolute_Location, bool Absolute_Rotation, bool Absolute_Scale, class UStaticMeshComponent** Static_Mesh_Component_Reference);
	void SpecialEventHalloweenPumpkinHeadHusk(bool ApplyPumpkinHeadMesh, bool DebugApplicationOrRemoval_);
	void OnRep_SpecialEventHalloweenPumpkinHeadApplied();
	void OverrideMaterialFromMapByMeshTag();
	void OverwriteKeysInMaterialMap(class UMaterialInterface* Fire, class UMaterialInterface* Ice, class UMaterialInterface* Lightning, class UMaterialInterface* Default);
	void RestoreMaterialMapToDefaults();
	void CreateDuplicateCharacterMesh(class UMaterialInterface* Material_to_Apply);
	void SetDuplicateCharacterMeshHiddenInGame(bool Hidden);
	void SetParticlesOnCharacterMeshHiddenInGame(bool Hidden);
	void TransformHitLocationWorldSpaceToPreskinnedLocalSpace(struct FVector* PreskinnedLS);
	void SetVectorParameterOnAllCharacterMIDsByMap(const TMap<class FName, struct FLinearColor>& Map);
	void SetScalarParameterOnAllCharacterMIDsByMap(const TMap<class FName, float>& Map);
	void SpawnMinibossLight();
	void SetMinibossLightHiddenInGame(bool Hidden);
	void Orphaned(bool* IsOrphaned, class AFortPawn** AttachedPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"EnemyPawn_Parent_C">();
	}
	static class AEnemyPawn_Parent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AEnemyPawn_Parent_C>();
	}
};
static_assert(alignof(AEnemyPawn_Parent_C) == 0x000010, "Wrong alignment on AEnemyPawn_Parent_C");
static_assert(sizeof(AEnemyPawn_Parent_C) == 0x001EC0, "Wrong size on AEnemyPawn_Parent_C");
static_assert(offsetof(AEnemyPawn_Parent_C, UberGraphFrame) == 0x001AC0, "Member 'AEnemyPawn_Parent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, WeaponCapsuleCollision) == 0x001AC8, "Member 'AEnemyPawn_Parent_C::WeaponCapsuleCollision' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Elemental_Layer_Audio_Loop) == 0x001AD0, "Member 'AEnemyPawn_Parent_C::Elemental_Layer_Audio_Loop' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, FadeMiniBossLightOutTL_Fade_2CE2533F4858E8E5F1A8D39F9CE6D9F4) == 0x001AD8, "Member 'AEnemyPawn_Parent_C::FadeMiniBossLightOutTL_Fade_2CE2533F4858E8E5F1A8D39F9CE6D9F4' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, FadeMiniBossLightOutTL__Direction_2CE2533F4858E8E5F1A8D39F9CE6D9F4) == 0x001ADC, "Member 'AEnemyPawn_Parent_C::FadeMiniBossLightOutTL__Direction_2CE2533F4858E8E5F1A8D39F9CE6D9F4' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, FadeMiniBossLightOutTL) == 0x001AE0, "Member 'AEnemyPawn_Parent_C::FadeMiniBossLightOutTL' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Enemy_Spawn_Out_TL_ColorFadeOutTrack_999FBE184F147A4FE3025AB553DBFA9C) == 0x001AE8, "Member 'AEnemyPawn_Parent_C::Enemy_Spawn_Out_TL_ColorFadeOutTrack_999FBE184F147A4FE3025AB553DBFA9C' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Enemy_Spawn_Out_TL_FadeInTrack_999FBE184F147A4FE3025AB553DBFA9C) == 0x001AEC, "Member 'AEnemyPawn_Parent_C::Enemy_Spawn_Out_TL_FadeInTrack_999FBE184F147A4FE3025AB553DBFA9C' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Enemy_Spawn_Out_TL__Direction_999FBE184F147A4FE3025AB553DBFA9C) == 0x001AF0, "Member 'AEnemyPawn_Parent_C::Enemy_Spawn_Out_TL__Direction_999FBE184F147A4FE3025AB553DBFA9C' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Enemy_Spawn_Out_TL) == 0x001AF8, "Member 'AEnemyPawn_Parent_C::Enemy_Spawn_Out_TL' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, EnemySpawnInTL_MiniBossFadeLight_5C7376B04DFAE1465B97F1BB1B873D88) == 0x001B00, "Member 'AEnemyPawn_Parent_C::EnemySpawnInTL_MiniBossFadeLight_5C7376B04DFAE1465B97F1BB1B873D88' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, EnemySpawnInTL_ColorFadeOutTrack_5C7376B04DFAE1465B97F1BB1B873D88) == 0x001B04, "Member 'AEnemyPawn_Parent_C::EnemySpawnInTL_ColorFadeOutTrack_5C7376B04DFAE1465B97F1BB1B873D88' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, EnemySpawnInTL_FadeInTrack_5C7376B04DFAE1465B97F1BB1B873D88) == 0x001B08, "Member 'AEnemyPawn_Parent_C::EnemySpawnInTL_FadeInTrack_5C7376B04DFAE1465B97F1BB1B873D88' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, EnemySpawnInTL__Direction_5C7376B04DFAE1465B97F1BB1B873D88) == 0x001B0C, "Member 'AEnemyPawn_Parent_C::EnemySpawnInTL__Direction_5C7376B04DFAE1465B97F1BB1B873D88' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, EnemySpawnInTL) == 0x001B10, "Member 'AEnemyPawn_Parent_C::EnemySpawnInTL' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Dynamic_Material_Instance_0) == 0x001B18, "Member 'AEnemyPawn_Parent_C::Dynamic_Material_Instance_0' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Death_Effects) == 0x001B20, "Member 'AEnemyPawn_Parent_C::Death_Effects' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, HQ_Death_Particle_System) == 0x001B28, "Member 'AEnemyPawn_Parent_C::HQ_Death_Particle_System' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, DeathFX_SpawnRateScale) == 0x001B30, "Member 'AEnemyPawn_Parent_C::DeathFX_SpawnRateScale' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, HQ_DeathFX_MaxDistance) == 0x001B34, "Member 'AEnemyPawn_Parent_C::HQ_DeathFX_MaxDistance' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, LQ_Death_Particle_System) == 0x001B38, "Member 'AEnemyPawn_Parent_C::LQ_Death_Particle_System' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, LQ_DeathFX_CylinderHeight) == 0x001B40, "Member 'AEnemyPawn_Parent_C::LQ_DeathFX_CylinderHeight' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, LQ_DeathFX_CylinderRadius) == 0x001B44, "Member 'AEnemyPawn_Parent_C::LQ_DeathFX_CylinderRadius' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, LQ_DeathFX_SpawnRateScale) == 0x001B48, "Member 'AEnemyPawn_Parent_C::LQ_DeathFX_SpawnRateScale' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, LQ_PS_Socket_Attach) == 0x001B50, "Member 'AEnemyPawn_Parent_C::LQ_PS_Socket_Attach' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Death_Socket) == 0x001B58, "Member 'AEnemyPawn_Parent_C::Death_Socket' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, UsePOCScaleAndMaterials) == 0x001B60, "Member 'AEnemyPawn_Parent_C::UsePOCScaleAndMaterials' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, POCShouldOverrideMaterial) == 0x001B61, "Member 'AEnemyPawn_Parent_C::POCShouldOverrideMaterial' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, POCShouldOverrideMaterialValues) == 0x001B62, "Member 'AEnemyPawn_Parent_C::POCShouldOverrideMaterialValues' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, POCOverrideMaterial) == 0x001B68, "Member 'AEnemyPawn_Parent_C::POCOverrideMaterial' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, POCMaterialHairColor) == 0x001B70, "Member 'AEnemyPawn_Parent_C::POCMaterialHairColor' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, POCMaterialSkinColor) == 0x001B80, "Member 'AEnemyPawn_Parent_C::POCMaterialSkinColor' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, POCMaterialPantColor) == 0x001B90, "Member 'AEnemyPawn_Parent_C::POCMaterialPantColor' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, POCMaterialShirtColor) == 0x001BA0, "Member 'AEnemyPawn_Parent_C::POCMaterialShirtColor' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, RandomStream) == 0x001BB0, "Member 'AEnemyPawn_Parent_C::RandomStream' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, PseudoRandomNetworkedFloat) == 0x001BB8, "Member 'AEnemyPawn_Parent_C::PseudoRandomNetworkedFloat' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, UseRandomColorVariation) == 0x001BBC, "Member 'AEnemyPawn_Parent_C::UseRandomColorVariation' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, MaleHuskHairColors) == 0x001BC0, "Member 'AEnemyPawn_Parent_C::MaleHuskHairColors' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, MaleHuskSkinColors) == 0x001BD0, "Member 'AEnemyPawn_Parent_C::MaleHuskSkinColors' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, MaleHuskPantColors) == 0x001BE0, "Member 'AEnemyPawn_Parent_C::MaleHuskPantColors' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, MaleHuskShirtColors) == 0x001BF0, "Member 'AEnemyPawn_Parent_C::MaleHuskShirtColors' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, HieghtDistributionCurve) == 0x001C00, "Member 'AEnemyPawn_Parent_C::HieghtDistributionCurve' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, RandomizeMeshScale) == 0x001C08, "Member 'AEnemyPawn_Parent_C::RandomizeMeshScale' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, SpawnParticlesTransform) == 0x001C10, "Member 'AEnemyPawn_Parent_C::SpawnParticlesTransform' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Dynamic_Material_Instance_1) == 0x001C40, "Member 'AEnemyPawn_Parent_C::Dynamic_Material_Instance_1' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, SpawnParticles) == 0x001C48, "Member 'AEnemyPawn_Parent_C::SpawnParticles' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, CharacterElementalParticles) == 0x001C50, "Member 'AEnemyPawn_Parent_C::CharacterElementalParticles' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, AllowHeadshot) == 0x001C58, "Member 'AEnemyPawn_Parent_C::AllowHeadshot' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, TC_RangedWeapon) == 0x001C60, "Member 'AEnemyPawn_Parent_C::TC_RangedWeapon' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, HeadshotParticleSystemComp) == 0x001C80, "Member 'AEnemyPawn_Parent_C::HeadshotParticleSystemComp' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Additive_Hit_React_Montage) == 0x001C88, "Member 'AEnemyPawn_Parent_C::Additive_Hit_React_Montage' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Death_Normal_Sound) == 0x001C90, "Member 'AEnemyPawn_Parent_C::Death_Normal_Sound' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Elemental_Audio_Layer_Sound) == 0x001C98, "Member 'AEnemyPawn_Parent_C::Elemental_Audio_Layer_Sound' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, SpecialEventHalloweenPumpkinHead) == 0x001CA0, "Member 'AEnemyPawn_Parent_C::SpecialEventHalloweenPumpkinHead' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, SpecialEventHalloweenPumpkinHeadApplied) == 0x001CA1, "Member 'AEnemyPawn_Parent_C::SpecialEventHalloweenPumpkinHeadApplied' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, TC_NPCCharacterTypeHuskBasic) == 0x001CA8, "Member 'AEnemyPawn_Parent_C::TC_NPCCharacterTypeHuskBasic' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, TC_SpecialEventHalloweenPumpkinHead) == 0x001CC8, "Member 'AEnemyPawn_Parent_C::TC_SpecialEventHalloweenPumpkinHead' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, PumpkinHeadPercentage) == 0x001CE8, "Member 'AEnemyPawn_Parent_C::PumpkinHeadPercentage' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, GE_SpecialEvent_Halloween_PumpkinHead) == 0x001CF0, "Member 'AEnemyPawn_Parent_C::GE_SpecialEvent_Halloween_PumpkinHead' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Pumpkin_Head_Mesh) == 0x001CF8, "Member 'AEnemyPawn_Parent_C::Pumpkin_Head_Mesh' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Pumpkin_Eyeglow_Mesh) == 0x001D00, "Member 'AEnemyPawn_Parent_C::Pumpkin_Eyeglow_Mesh' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, PumpkinHeadRotation) == 0x001D08, "Member 'AEnemyPawn_Parent_C::PumpkinHeadRotation' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, PumpkinHeadScale) == 0x001D14, "Member 'AEnemyPawn_Parent_C::PumpkinHeadScale' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, PumpkinHeadOffset) == 0x001D20, "Member 'AEnemyPawn_Parent_C::PumpkinHeadOffset' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, PumpkinEyesFX) == 0x001D30, "Member 'AEnemyPawn_Parent_C::PumpkinEyesFX' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Headshot_FX_Socket) == 0x001D38, "Member 'AEnemyPawn_Parent_C::Headshot_FX_Socket' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Material_Alteration_0) == 0x001D40, "Member 'AEnemyPawn_Parent_C::Material_Alteration_0' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Material_Alteration_1) == 0x001D48, "Member 'AEnemyPawn_Parent_C::Material_Alteration_1' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, SleepParticleSystemComp) == 0x001D50, "Member 'AEnemyPawn_Parent_C::SleepParticleSystemComp' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Husk_Sleeping_Sound) == 0x001D58, "Member 'AEnemyPawn_Parent_C::Husk_Sleeping_Sound' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, HuskSleepSound) == 0x001D60, "Member 'AEnemyPawn_Parent_C::HuskSleepSound' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, WakeUpParticleSystemComp) == 0x001D68, "Member 'AEnemyPawn_Parent_C::WakeUpParticleSystemComp' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, AwokenMaxDistance) == 0x001D70, "Member 'AEnemyPawn_Parent_C::AwokenMaxDistance' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, AwokenSkeletalMesh) == 0x001D78, "Member 'AEnemyPawn_Parent_C::AwokenSkeletalMesh' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, AwokenSkelMeshMID) == 0x001D80, "Member 'AEnemyPawn_Parent_C::AwokenSkelMeshMID' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, AwokenFadeInTime) == 0x001D88, "Member 'AEnemyPawn_Parent_C::AwokenFadeInTime' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, AwokenFadeOutTime) == 0x001D8C, "Member 'AEnemyPawn_Parent_C::AwokenFadeOutTime' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, AwokenDuration) == 0x001D90, "Member 'AEnemyPawn_Parent_C::AwokenDuration' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Sleeping) == 0x001D94, "Member 'AEnemyPawn_Parent_C::Sleeping' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, HasGlowColorsAssigned) == 0x001D95, "Member 'AEnemyPawn_Parent_C::HasGlowColorsAssigned' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, SpawnInTimelineCompletedSuccessfully) == 0x001D96, "Member 'AEnemyPawn_Parent_C::SpawnInTimelineCompletedSuccessfully' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, CharacterSpawnInSafetyCheckHandle) == 0x001D98, "Member 'AEnemyPawn_Parent_C::CharacterSpawnInSafetyCheckHandle' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Base_MID_0) == 0x001DA0, "Member 'AEnemyPawn_Parent_C::Base_MID_0' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Previous_MID_0) == 0x001DA8, "Member 'AEnemyPawn_Parent_C::Previous_MID_0' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, CharacterElementalParticlesTemplate) == 0x001DB0, "Member 'AEnemyPawn_Parent_C::CharacterElementalParticlesTemplate' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, FrozenHuskMeshScale) == 0x001DB8, "Member 'AEnemyPawn_Parent_C::FrozenHuskMeshScale' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, SpawnFrozenHuskMesh) == 0x001DC4, "Member 'AEnemyPawn_Parent_C::SpawnFrozenHuskMesh' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, CharacterAmbientParticlesTemplate) == 0x001DC8, "Member 'AEnemyPawn_Parent_C::CharacterAmbientParticlesTemplate' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, CharacterAmbientParticles) == 0x001DD0, "Member 'AEnemyPawn_Parent_C::CharacterAmbientParticles' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, MaterialModifierMap) == 0x001DD8, "Member 'AEnemyPawn_Parent_C::MaterialModifierMap' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, MaterialModifierMapDefaults) == 0x001E28, "Member 'AEnemyPawn_Parent_C::MaterialModifierMapDefaults' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, DuplicateCharacterMesh) == 0x001E78, "Member 'AEnemyPawn_Parent_C::DuplicateCharacterMesh' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, DuplicateCharacterMID) == 0x001E80, "Member 'AEnemyPawn_Parent_C::DuplicateCharacterMID' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, BoneRefPosePosition) == 0x001E88, "Member 'AEnemyPawn_Parent_C::BoneRefPosePosition' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, MiniBossSizeScale) == 0x001E94, "Member 'AEnemyPawn_Parent_C::MiniBossSizeScale' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, MiniBossLight) == 0x001EA0, "Member 'AEnemyPawn_Parent_C::MiniBossLight' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, MinibossPSComponent) == 0x001EA8, "Member 'AEnemyPawn_Parent_C::MinibossPSComponent' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, MiniBossLightIntensity) == 0x001EB0, "Member 'AEnemyPawn_Parent_C::MiniBossLightIntensity' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, CharacterParticlesMaxDrawDistance) == 0x001EB4, "Member 'AEnemyPawn_Parent_C::CharacterParticlesMaxDrawDistance' has a wrong offset!");

}

