#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FortniteGame

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "Party_structs.hpp"
#include "AIModule_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "OnlineSubsystemUtils_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "McpProfileSys_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function FortniteGame.FortItemDefinition.CustomizePreviewMesh
// 0x0008 (0x0008 - 0x0000)
struct FortItemDefinition_CustomizePreviewMesh final
{
public:
	class UMeshComponent*                         Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDefinition_CustomizePreviewMesh) == 0x000008, "Wrong alignment on FortItemDefinition_CustomizePreviewMesh");
static_assert(sizeof(FortItemDefinition_CustomizePreviewMesh) == 0x000008, "Wrong size on FortItemDefinition_CustomizePreviewMesh");
static_assert(offsetof(FortItemDefinition_CustomizePreviewMesh, Mesh) == 0x000000, "Member 'FortItemDefinition_CustomizePreviewMesh::Mesh' has a wrong offset!");

// Function FortniteGame.FortItemDefinition.CustomizePreviewPrefab
// 0x0008 (0x0008 - 0x0000)
struct FortItemDefinition_CustomizePreviewPrefab final
{
public:
	class AActor*                                 PrefabInstance;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDefinition_CustomizePreviewPrefab) == 0x000008, "Wrong alignment on FortItemDefinition_CustomizePreviewPrefab");
static_assert(sizeof(FortItemDefinition_CustomizePreviewPrefab) == 0x000008, "Wrong size on FortItemDefinition_CustomizePreviewPrefab");
static_assert(offsetof(FortItemDefinition_CustomizePreviewPrefab, PrefabInstance) == 0x000000, "Member 'FortItemDefinition_CustomizePreviewPrefab::PrefabInstance' has a wrong offset!");

// Function FortniteGame.FortItemDefinition.CreateTemporaryInstanceFromExistingItemBP
// 0x0018 (0x0018 - 0x0000)
struct FortItemDefinition_CreateTemporaryInstanceFromExistingItemBP final
{
public:
	class UFortItem*                              ExistingItem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItem*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDefinition_CreateTemporaryInstanceFromExistingItemBP) == 0x000008, "Wrong alignment on FortItemDefinition_CreateTemporaryInstanceFromExistingItemBP");
static_assert(sizeof(FortItemDefinition_CreateTemporaryInstanceFromExistingItemBP) == 0x000018, "Wrong size on FortItemDefinition_CreateTemporaryInstanceFromExistingItemBP");
static_assert(offsetof(FortItemDefinition_CreateTemporaryInstanceFromExistingItemBP, ExistingItem) == 0x000000, "Member 'FortItemDefinition_CreateTemporaryInstanceFromExistingItemBP::ExistingItem' has a wrong offset!");
static_assert(offsetof(FortItemDefinition_CreateTemporaryInstanceFromExistingItemBP, Count) == 0x000008, "Member 'FortItemDefinition_CreateTemporaryInstanceFromExistingItemBP::Count' has a wrong offset!");
static_assert(offsetof(FortItemDefinition_CreateTemporaryInstanceFromExistingItemBP, Level) == 0x00000C, "Member 'FortItemDefinition_CreateTemporaryInstanceFromExistingItemBP::Level' has a wrong offset!");
static_assert(offsetof(FortItemDefinition_CreateTemporaryInstanceFromExistingItemBP, ReturnValue) == 0x000010, "Member 'FortItemDefinition_CreateTemporaryInstanceFromExistingItemBP::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItemDefinition.CreateTemporaryItemInstanceBP
// 0x0010 (0x0010 - 0x0000)
struct FortItemDefinition_CreateTemporaryItemInstanceBP final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItem*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDefinition_CreateTemporaryItemInstanceBP) == 0x000008, "Wrong alignment on FortItemDefinition_CreateTemporaryItemInstanceBP");
static_assert(sizeof(FortItemDefinition_CreateTemporaryItemInstanceBP) == 0x000010, "Wrong size on FortItemDefinition_CreateTemporaryItemInstanceBP");
static_assert(offsetof(FortItemDefinition_CreateTemporaryItemInstanceBP, Count) == 0x000000, "Member 'FortItemDefinition_CreateTemporaryItemInstanceBP::Count' has a wrong offset!");
static_assert(offsetof(FortItemDefinition_CreateTemporaryItemInstanceBP, Level) == 0x000004, "Member 'FortItemDefinition_CreateTemporaryItemInstanceBP::Level' has a wrong offset!");
static_assert(offsetof(FortItemDefinition_CreateTemporaryItemInstanceBP, ReturnValue) == 0x000008, "Member 'FortItemDefinition_CreateTemporaryItemInstanceBP::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItemDefinition.GetDescription
// 0x0010 (0x0010 - 0x0000)
struct FortItemDefinition_GetDescription final
{
public:
	TArray<class FText>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDefinition_GetDescription) == 0x000008, "Wrong alignment on FortItemDefinition_GetDescription");
static_assert(sizeof(FortItemDefinition_GetDescription) == 0x000010, "Wrong size on FortItemDefinition_GetDescription");
static_assert(offsetof(FortItemDefinition_GetDescription, ReturnValue) == 0x000000, "Member 'FortItemDefinition_GetDescription::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItemDefinition.GetDisplayName
// 0x0020 (0x0020 - 0x0000)
struct FortItemDefinition_GetDisplayName final
{
public:
	bool                                          bBaseName;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDefinition_GetDisplayName) == 0x000008, "Wrong alignment on FortItemDefinition_GetDisplayName");
static_assert(sizeof(FortItemDefinition_GetDisplayName) == 0x000020, "Wrong size on FortItemDefinition_GetDisplayName");
static_assert(offsetof(FortItemDefinition_GetDisplayName, bBaseName) == 0x000000, "Member 'FortItemDefinition_GetDisplayName::bBaseName' has a wrong offset!");
static_assert(offsetof(FortItemDefinition_GetDisplayName, ReturnValue) == 0x000008, "Member 'FortItemDefinition_GetDisplayName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItemDefinition.GetDisplayStats
// 0x0008 (0x0008 - 0x0000)
struct FortItemDefinition_GetDisplayStats final
{
public:
	class UFortTooltipDisplayStatsList*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDefinition_GetDisplayStats) == 0x000008, "Wrong alignment on FortItemDefinition_GetDisplayStats");
static_assert(sizeof(FortItemDefinition_GetDisplayStats) == 0x000008, "Wrong size on FortItemDefinition_GetDisplayStats");
static_assert(offsetof(FortItemDefinition_GetDisplayStats, ReturnValue) == 0x000000, "Member 'FortItemDefinition_GetDisplayStats::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItemDefinition.GetLargePreviewImage
// 0x0028 (0x0028 - 0x0000)
struct FortItemDefinition_GetLargePreviewImage final
{
public:
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDefinition_GetLargePreviewImage) == 0x000008, "Wrong alignment on FortItemDefinition_GetLargePreviewImage");
static_assert(sizeof(FortItemDefinition_GetLargePreviewImage) == 0x000028, "Wrong size on FortItemDefinition_GetLargePreviewImage");
static_assert(offsetof(FortItemDefinition_GetLargePreviewImage, ReturnValue) == 0x000000, "Member 'FortItemDefinition_GetLargePreviewImage::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItemDefinition.GetPersistentName
// 0x0010 (0x0010 - 0x0000)
struct FortItemDefinition_GetPersistentName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDefinition_GetPersistentName) == 0x000008, "Wrong alignment on FortItemDefinition_GetPersistentName");
static_assert(sizeof(FortItemDefinition_GetPersistentName) == 0x000010, "Wrong size on FortItemDefinition_GetPersistentName");
static_assert(offsetof(FortItemDefinition_GetPersistentName, ReturnValue) == 0x000000, "Member 'FortItemDefinition_GetPersistentName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItemDefinition.GetPreviewAssets
// 0x0010 (0x0010 - 0x0000)
struct FortItemDefinition_GetPreviewAssets final
{
public:
	TArray<TSoftObjectPtr<class UObject>>         Assets;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDefinition_GetPreviewAssets) == 0x000008, "Wrong alignment on FortItemDefinition_GetPreviewAssets");
static_assert(sizeof(FortItemDefinition_GetPreviewAssets) == 0x000010, "Wrong size on FortItemDefinition_GetPreviewAssets");
static_assert(offsetof(FortItemDefinition_GetPreviewAssets, Assets) == 0x000000, "Member 'FortItemDefinition_GetPreviewAssets::Assets' has a wrong offset!");

// Function FortniteGame.FortItemDefinition.GetPreviewMeshOffset
// 0x0030 (0x0030 - 0x0000)
struct FortItemDefinition_GetPreviewMeshOffset final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDefinition_GetPreviewMeshOffset) == 0x000010, "Wrong alignment on FortItemDefinition_GetPreviewMeshOffset");
static_assert(sizeof(FortItemDefinition_GetPreviewMeshOffset) == 0x000030, "Wrong size on FortItemDefinition_GetPreviewMeshOffset");
static_assert(offsetof(FortItemDefinition_GetPreviewMeshOffset, ReturnValue) == 0x000000, "Member 'FortItemDefinition_GetPreviewMeshOffset::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItemDefinition.GetPreviewPrefabAsset
// 0x0030 (0x0030 - 0x0000)
struct FortItemDefinition_GetPreviewPrefabAsset final
{
public:
	TSoftClassPtr<class UClass>                   Asset;                                             // 0x0000(0x0028)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemDefinition_GetPreviewPrefabAsset) == 0x000008, "Wrong alignment on FortItemDefinition_GetPreviewPrefabAsset");
static_assert(sizeof(FortItemDefinition_GetPreviewPrefabAsset) == 0x000030, "Wrong size on FortItemDefinition_GetPreviewPrefabAsset");
static_assert(offsetof(FortItemDefinition_GetPreviewPrefabAsset, Asset) == 0x000000, "Member 'FortItemDefinition_GetPreviewPrefabAsset::Asset' has a wrong offset!");
static_assert(offsetof(FortItemDefinition_GetPreviewPrefabAsset, ReturnValue) == 0x000028, "Member 'FortItemDefinition_GetPreviewPrefabAsset::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItemDefinition.GetPreviewSkeletalMeshAsset
// 0x0030 (0x0030 - 0x0000)
struct FortItemDefinition_GetPreviewSkeletalMeshAsset final
{
public:
	TSoftObjectPtr<class USkeletalMesh>           Asset;                                             // 0x0000(0x0028)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemDefinition_GetPreviewSkeletalMeshAsset) == 0x000008, "Wrong alignment on FortItemDefinition_GetPreviewSkeletalMeshAsset");
static_assert(sizeof(FortItemDefinition_GetPreviewSkeletalMeshAsset) == 0x000030, "Wrong size on FortItemDefinition_GetPreviewSkeletalMeshAsset");
static_assert(offsetof(FortItemDefinition_GetPreviewSkeletalMeshAsset, Asset) == 0x000000, "Member 'FortItemDefinition_GetPreviewSkeletalMeshAsset::Asset' has a wrong offset!");
static_assert(offsetof(FortItemDefinition_GetPreviewSkeletalMeshAsset, ReturnValue) == 0x000028, "Member 'FortItemDefinition_GetPreviewSkeletalMeshAsset::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItemDefinition.GetPreviewStaticMeshAsset
// 0x0030 (0x0030 - 0x0000)
struct FortItemDefinition_GetPreviewStaticMeshAsset final
{
public:
	TSoftObjectPtr<class UStaticMesh>             Asset;                                             // 0x0000(0x0028)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemDefinition_GetPreviewStaticMeshAsset) == 0x000008, "Wrong alignment on FortItemDefinition_GetPreviewStaticMeshAsset");
static_assert(sizeof(FortItemDefinition_GetPreviewStaticMeshAsset) == 0x000030, "Wrong size on FortItemDefinition_GetPreviewStaticMeshAsset");
static_assert(offsetof(FortItemDefinition_GetPreviewStaticMeshAsset, Asset) == 0x000000, "Member 'FortItemDefinition_GetPreviewStaticMeshAsset::Asset' has a wrong offset!");
static_assert(offsetof(FortItemDefinition_GetPreviewStaticMeshAsset, ReturnValue) == 0x000028, "Member 'FortItemDefinition_GetPreviewStaticMeshAsset::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItemDefinition.GetRarity
// 0x0001 (0x0001 - 0x0000)
struct FortItemDefinition_GetRarity final
{
public:
	EFortRarity                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDefinition_GetRarity) == 0x000001, "Wrong alignment on FortItemDefinition_GetRarity");
static_assert(sizeof(FortItemDefinition_GetRarity) == 0x000001, "Wrong size on FortItemDefinition_GetRarity");
static_assert(offsetof(FortItemDefinition_GetRarity, ReturnValue) == 0x000000, "Member 'FortItemDefinition_GetRarity::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItemDefinition.GetShortDescription
// 0x0018 (0x0018 - 0x0000)
struct FortItemDefinition_GetShortDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDefinition_GetShortDescription) == 0x000008, "Wrong alignment on FortItemDefinition_GetShortDescription");
static_assert(sizeof(FortItemDefinition_GetShortDescription) == 0x000018, "Wrong size on FortItemDefinition_GetShortDescription");
static_assert(offsetof(FortItemDefinition_GetShortDescription, ReturnValue) == 0x000000, "Member 'FortItemDefinition_GetShortDescription::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItemDefinition.GetSingleLineDescription
// 0x0018 (0x0018 - 0x0000)
struct FortItemDefinition_GetSingleLineDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDefinition_GetSingleLineDescription) == 0x000008, "Wrong alignment on FortItemDefinition_GetSingleLineDescription");
static_assert(sizeof(FortItemDefinition_GetSingleLineDescription) == 0x000018, "Wrong size on FortItemDefinition_GetSingleLineDescription");
static_assert(offsetof(FortItemDefinition_GetSingleLineDescription, ReturnValue) == 0x000000, "Member 'FortItemDefinition_GetSingleLineDescription::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItemDefinition.GetSmallPreviewImage
// 0x0028 (0x0028 - 0x0000)
struct FortItemDefinition_GetSmallPreviewImage final
{
public:
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDefinition_GetSmallPreviewImage) == 0x000008, "Wrong alignment on FortItemDefinition_GetSmallPreviewImage");
static_assert(sizeof(FortItemDefinition_GetSmallPreviewImage) == 0x000028, "Wrong size on FortItemDefinition_GetSmallPreviewImage");
static_assert(offsetof(FortItemDefinition_GetSmallPreviewImage, ReturnValue) == 0x000000, "Member 'FortItemDefinition_GetSmallPreviewImage::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItemDefinition.GetSmallPreviewImageBrush
// 0x0078 (0x0078 - 0x0000)
struct FortItemDefinition_GetSmallPreviewImageBrush final
{
public:
	struct FSlateBrush                            ReturnValue;                                       // 0x0000(0x0078)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDefinition_GetSmallPreviewImageBrush) == 0x000008, "Wrong alignment on FortItemDefinition_GetSmallPreviewImageBrush");
static_assert(sizeof(FortItemDefinition_GetSmallPreviewImageBrush) == 0x000078, "Wrong size on FortItemDefinition_GetSmallPreviewImageBrush");
static_assert(offsetof(FortItemDefinition_GetSmallPreviewImageBrush, ReturnValue) == 0x000000, "Member 'FortItemDefinition_GetSmallPreviewImageBrush::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItemDefinition.GetTooltip
// 0x0008 (0x0008 - 0x0000)
struct FortItemDefinition_GetTooltip final
{
public:
	TSubclassOf<class UFortTooltip>               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDefinition_GetTooltip) == 0x000008, "Wrong alignment on FortItemDefinition_GetTooltip");
static_assert(sizeof(FortItemDefinition_GetTooltip) == 0x000008, "Wrong size on FortItemDefinition_GetTooltip");
static_assert(offsetof(FortItemDefinition_GetTooltip, ReturnValue) == 0x000000, "Member 'FortItemDefinition_GetTooltip::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItemDefinition.IsInventorySizeLimited
// 0x0001 (0x0001 - 0x0000)
struct FortItemDefinition_IsInventorySizeLimited final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDefinition_IsInventorySizeLimited) == 0x000001, "Wrong alignment on FortItemDefinition_IsInventorySizeLimited");
static_assert(sizeof(FortItemDefinition_IsInventorySizeLimited) == 0x000001, "Wrong size on FortItemDefinition_IsInventorySizeLimited");
static_assert(offsetof(FortItemDefinition_IsInventorySizeLimited, ReturnValue) == 0x000000, "Member 'FortItemDefinition_IsInventorySizeLimited::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItemDefinition.ShouldShowPreviewOnCurrentHero
// 0x0001 (0x0001 - 0x0000)
struct FortItemDefinition_ShouldShowPreviewOnCurrentHero final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDefinition_ShouldShowPreviewOnCurrentHero) == 0x000001, "Wrong alignment on FortItemDefinition_ShouldShowPreviewOnCurrentHero");
static_assert(sizeof(FortItemDefinition_ShouldShowPreviewOnCurrentHero) == 0x000001, "Wrong size on FortItemDefinition_ShouldShowPreviewOnCurrentHero");
static_assert(offsetof(FortItemDefinition_ShouldShowPreviewOnCurrentHero, ReturnValue) == 0x000000, "Member 'FortItemDefinition_ShouldShowPreviewOnCurrentHero::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetEvolveRestrictionReasonText
// 0x0020 (0x0020 - 0x0000)
struct FortItem_GetEvolveRestrictionReasonText final
{
public:
	EItemEvolutionRestrictionReason               Reason;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetEvolveRestrictionReasonText) == 0x000008, "Wrong alignment on FortItem_GetEvolveRestrictionReasonText");
static_assert(sizeof(FortItem_GetEvolveRestrictionReasonText) == 0x000020, "Wrong size on FortItem_GetEvolveRestrictionReasonText");
static_assert(offsetof(FortItem_GetEvolveRestrictionReasonText, Reason) == 0x000000, "Member 'FortItem_GetEvolveRestrictionReasonText::Reason' has a wrong offset!");
static_assert(offsetof(FortItem_GetEvolveRestrictionReasonText, ReturnValue) == 0x000008, "Member 'FortItem_GetEvolveRestrictionReasonText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetUpgradeRestrictionReasonText
// 0x0020 (0x0020 - 0x0000)
struct FortItem_GetUpgradeRestrictionReasonText final
{
public:
	EItemUpgradeRestrictionReason                 Reason;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetUpgradeRestrictionReasonText) == 0x000008, "Wrong alignment on FortItem_GetUpgradeRestrictionReasonText");
static_assert(sizeof(FortItem_GetUpgradeRestrictionReasonText) == 0x000020, "Wrong size on FortItem_GetUpgradeRestrictionReasonText");
static_assert(offsetof(FortItem_GetUpgradeRestrictionReasonText, Reason) == 0x000000, "Member 'FortItem_GetUpgradeRestrictionReasonText::Reason' has a wrong offset!");
static_assert(offsetof(FortItem_GetUpgradeRestrictionReasonText, ReturnValue) == 0x000008, "Member 'FortItem_GetUpgradeRestrictionReasonText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.SetOwningControllerForTemporaryItem
// 0x0008 (0x0008 - 0x0000)
struct FortItem_SetOwningControllerForTemporaryItem final
{
public:
	class AFortPlayerController*                  InController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_SetOwningControllerForTemporaryItem) == 0x000008, "Wrong alignment on FortItem_SetOwningControllerForTemporaryItem");
static_assert(sizeof(FortItem_SetOwningControllerForTemporaryItem) == 0x000008, "Wrong size on FortItem_SetOwningControllerForTemporaryItem");
static_assert(offsetof(FortItem_SetOwningControllerForTemporaryItem, InController) == 0x000000, "Member 'FortItem_SetOwningControllerForTemporaryItem::InController' has a wrong offset!");

// Function FortniteGame.FortItem.CanBeDropped
// 0x0001 (0x0001 - 0x0000)
struct FortItem_CanBeDropped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_CanBeDropped) == 0x000001, "Wrong alignment on FortItem_CanBeDropped");
static_assert(sizeof(FortItem_CanBeDropped) == 0x000001, "Wrong size on FortItem_CanBeDropped");
static_assert(offsetof(FortItem_CanBeDropped, ReturnValue) == 0x000000, "Member 'FortItem_CanBeDropped::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.CanBeUnslotted
// 0x0001 (0x0001 - 0x0000)
struct FortItem_CanBeUnslotted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_CanBeUnslotted) == 0x000001, "Wrong alignment on FortItem_CanBeUnslotted");
static_assert(sizeof(FortItem_CanBeUnslotted) == 0x000001, "Wrong size on FortItem_CanBeUnslotted");
static_assert(offsetof(FortItem_CanBeUnslotted, ReturnValue) == 0x000000, "Member 'FortItem_CanBeUnslotted::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.CanBeUpgraded
// 0x0018 (0x0018 - 0x0000)
struct FortItem_CanBeUpgraded final
{
public:
	TArray<EItemUpgradeRestrictionReason>         OutRestrictionReasons;                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItem_CanBeUpgraded) == 0x000008, "Wrong alignment on FortItem_CanBeUpgraded");
static_assert(sizeof(FortItem_CanBeUpgraded) == 0x000018, "Wrong size on FortItem_CanBeUpgraded");
static_assert(offsetof(FortItem_CanBeUpgraded, OutRestrictionReasons) == 0x000000, "Member 'FortItem_CanBeUpgraded::OutRestrictionReasons' has a wrong offset!");
static_assert(offsetof(FortItem_CanBeUpgraded, ReturnValue) == 0x000010, "Member 'FortItem_CanBeUpgraded::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.CanEvolve
// 0x0018 (0x0018 - 0x0000)
struct FortItem_CanEvolve final
{
public:
	TArray<EItemEvolutionRestrictionReason>       OutRestrictionReasons;                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItem_CanEvolve) == 0x000008, "Wrong alignment on FortItem_CanEvolve");
static_assert(sizeof(FortItem_CanEvolve) == 0x000018, "Wrong size on FortItem_CanEvolve");
static_assert(offsetof(FortItem_CanEvolve, OutRestrictionReasons) == 0x000000, "Member 'FortItem_CanEvolve::OutRestrictionReasons' has a wrong offset!");
static_assert(offsetof(FortItem_CanEvolve, ReturnValue) == 0x000010, "Member 'FortItem_CanEvolve::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.CanUpgradeItemRarity
// 0x0018 (0x0018 - 0x0000)
struct FortItem_CanUpgradeItemRarity final
{
public:
	TArray<EItemEvolutionRestrictionReason>       OutRestrictionReasons;                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItem_CanUpgradeItemRarity) == 0x000008, "Wrong alignment on FortItem_CanUpgradeItemRarity");
static_assert(sizeof(FortItem_CanUpgradeItemRarity) == 0x000018, "Wrong size on FortItem_CanUpgradeItemRarity");
static_assert(offsetof(FortItem_CanUpgradeItemRarity, OutRestrictionReasons) == 0x000000, "Member 'FortItem_CanUpgradeItemRarity::OutRestrictionReasons' has a wrong offset!");
static_assert(offsetof(FortItem_CanUpgradeItemRarity, ReturnValue) == 0x000010, "Member 'FortItem_CanUpgradeItemRarity::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.DoesMatchSearchString
// 0x0018 (0x0018 - 0x0000)
struct FortItem_DoesMatchSearchString final
{
public:
	class FString                                 SearchString;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItem_DoesMatchSearchString) == 0x000008, "Wrong alignment on FortItem_DoesMatchSearchString");
static_assert(sizeof(FortItem_DoesMatchSearchString) == 0x000018, "Wrong size on FortItem_DoesMatchSearchString");
static_assert(offsetof(FortItem_DoesMatchSearchString, SearchString) == 0x000000, "Member 'FortItem_DoesMatchSearchString::SearchString' has a wrong offset!");
static_assert(offsetof(FortItem_DoesMatchSearchString, ReturnValue) == 0x000010, "Member 'FortItem_DoesMatchSearchString::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetActiveAlterations
// 0x0018 (0x0018 - 0x0000)
struct FortItem_GetActiveAlterations final
{
public:
	int32                                         PretendLevel;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortAlterationItemDefinition*>  ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetActiveAlterations) == 0x000008, "Wrong alignment on FortItem_GetActiveAlterations");
static_assert(sizeof(FortItem_GetActiveAlterations) == 0x000018, "Wrong size on FortItem_GetActiveAlterations");
static_assert(offsetof(FortItem_GetActiveAlterations, PretendLevel) == 0x000000, "Member 'FortItem_GetActiveAlterations::PretendLevel' has a wrong offset!");
static_assert(offsetof(FortItem_GetActiveAlterations, ReturnValue) == 0x000008, "Member 'FortItem_GetActiveAlterations::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetAlterationSlots
// 0x0010 (0x0010 - 0x0000)
struct FortItem_GetAlterationSlots final
{
public:
	TArray<struct FFortAlterationSlotStatus>      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetAlterationSlots) == 0x000008, "Wrong alignment on FortItem_GetAlterationSlots");
static_assert(sizeof(FortItem_GetAlterationSlots) == 0x000010, "Wrong size on FortItem_GetAlterationSlots");
static_assert(offsetof(FortItem_GetAlterationSlots, ReturnValue) == 0x000000, "Member 'FortItem_GetAlterationSlots::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetCoolDownTimeRemaining
// 0x0010 (0x0010 - 0x0000)
struct FortItem_GetCoolDownTimeRemaining final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CooldownDuration;                                  // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetCoolDownTimeRemaining) == 0x000008, "Wrong alignment on FortItem_GetCoolDownTimeRemaining");
static_assert(sizeof(FortItem_GetCoolDownTimeRemaining) == 0x000010, "Wrong size on FortItem_GetCoolDownTimeRemaining");
static_assert(offsetof(FortItem_GetCoolDownTimeRemaining, FortPC) == 0x000000, "Member 'FortItem_GetCoolDownTimeRemaining::FortPC' has a wrong offset!");
static_assert(offsetof(FortItem_GetCoolDownTimeRemaining, CooldownDuration) == 0x000008, "Member 'FortItem_GetCoolDownTimeRemaining::CooldownDuration' has a wrong offset!");
static_assert(offsetof(FortItem_GetCoolDownTimeRemaining, ReturnValue) == 0x00000C, "Member 'FortItem_GetCoolDownTimeRemaining::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetDescription
// 0x0018 (0x0018 - 0x0000)
struct FortItem_GetDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetDescription) == 0x000008, "Wrong alignment on FortItem_GetDescription");
static_assert(sizeof(FortItem_GetDescription) == 0x000018, "Wrong size on FortItem_GetDescription");
static_assert(offsetof(FortItem_GetDescription, ReturnValue) == 0x000000, "Member 'FortItem_GetDescription::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetDisplayName
// 0x0018 (0x0018 - 0x0000)
struct FortItem_GetDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetDisplayName) == 0x000008, "Wrong alignment on FortItem_GetDisplayName");
static_assert(sizeof(FortItem_GetDisplayName) == 0x000018, "Wrong size on FortItem_GetDisplayName");
static_assert(offsetof(FortItem_GetDisplayName, ReturnValue) == 0x000000, "Member 'FortItem_GetDisplayName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetDurability
// 0x0004 (0x0004 - 0x0000)
struct FortItem_GetDurability final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetDurability) == 0x000004, "Wrong alignment on FortItem_GetDurability");
static_assert(sizeof(FortItem_GetDurability) == 0x000004, "Wrong size on FortItem_GetDurability");
static_assert(offsetof(FortItem_GetDurability, ReturnValue) == 0x000000, "Member 'FortItem_GetDurability::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetFilterCategory
// 0x0001 (0x0001 - 0x0000)
struct FortItem_GetFilterCategory final
{
public:
	EFortInventoryFilter                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetFilterCategory) == 0x000001, "Wrong alignment on FortItem_GetFilterCategory");
static_assert(sizeof(FortItem_GetFilterCategory) == 0x000001, "Wrong size on FortItem_GetFilterCategory");
static_assert(offsetof(FortItem_GetFilterCategory, ReturnValue) == 0x000000, "Member 'FortItem_GetFilterCategory::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetItemDefinitionBP
// 0x0008 (0x0008 - 0x0000)
struct FortItem_GetItemDefinitionBP final
{
public:
	class UFortItemDefinition*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetItemDefinitionBP) == 0x000008, "Wrong alignment on FortItem_GetItemDefinitionBP");
static_assert(sizeof(FortItem_GetItemDefinitionBP) == 0x000008, "Wrong size on FortItem_GetItemDefinitionBP");
static_assert(offsetof(FortItem_GetItemDefinitionBP, ReturnValue) == 0x000000, "Member 'FortItem_GetItemDefinitionBP::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetItemGuid
// 0x0010 (0x0010 - 0x0000)
struct FortItem_GetItemGuid final
{
public:
	struct FGuid                                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetItemGuid) == 0x000004, "Wrong alignment on FortItem_GetItemGuid");
static_assert(sizeof(FortItem_GetItemGuid) == 0x000010, "Wrong size on FortItem_GetItemGuid");
static_assert(offsetof(FortItem_GetItemGuid, ReturnValue) == 0x000000, "Member 'FortItem_GetItemGuid::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetLargePreviewImage
// 0x0028 (0x0028 - 0x0000)
struct FortItem_GetLargePreviewImage final
{
public:
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetLargePreviewImage) == 0x000008, "Wrong alignment on FortItem_GetLargePreviewImage");
static_assert(sizeof(FortItem_GetLargePreviewImage) == 0x000028, "Wrong size on FortItem_GetLargePreviewImage");
static_assert(offsetof(FortItem_GetLargePreviewImage, ReturnValue) == 0x000000, "Member 'FortItem_GetLargePreviewImage::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetLevel
// 0x0004 (0x0004 - 0x0000)
struct FortItem_GetLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetLevel) == 0x000004, "Wrong alignment on FortItem_GetLevel");
static_assert(sizeof(FortItem_GetLevel) == 0x000004, "Wrong size on FortItem_GetLevel");
static_assert(offsetof(FortItem_GetLevel, ReturnValue) == 0x000000, "Member 'FortItem_GetLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetLevelRelativeCostForRarityUpgrade
// 0x0004 (0x0004 - 0x0000)
struct FortItem_GetLevelRelativeCostForRarityUpgrade final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetLevelRelativeCostForRarityUpgrade) == 0x000004, "Wrong alignment on FortItem_GetLevelRelativeCostForRarityUpgrade");
static_assert(sizeof(FortItem_GetLevelRelativeCostForRarityUpgrade) == 0x000004, "Wrong size on FortItem_GetLevelRelativeCostForRarityUpgrade");
static_assert(offsetof(FortItem_GetLevelRelativeCostForRarityUpgrade, ReturnValue) == 0x000000, "Member 'FortItem_GetLevelRelativeCostForRarityUpgrade::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetLoadedAmmo
// 0x0004 (0x0004 - 0x0000)
struct FortItem_GetLoadedAmmo final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetLoadedAmmo) == 0x000004, "Wrong alignment on FortItem_GetLoadedAmmo");
static_assert(sizeof(FortItem_GetLoadedAmmo) == 0x000004, "Wrong size on FortItem_GetLoadedAmmo");
static_assert(offsetof(FortItem_GetLoadedAmmo, ReturnValue) == 0x000000, "Member 'FortItem_GetLoadedAmmo::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetMaxLevel
// 0x0004 (0x0004 - 0x0000)
struct FortItem_GetMaxLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetMaxLevel) == 0x000004, "Wrong alignment on FortItem_GetMaxLevel");
static_assert(sizeof(FortItem_GetMaxLevel) == 0x000004, "Wrong size on FortItem_GetMaxLevel");
static_assert(offsetof(FortItem_GetMaxLevel, ReturnValue) == 0x000000, "Member 'FortItem_GetMaxLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetMaxTier
// 0x0001 (0x0001 - 0x0000)
struct FortItem_GetMaxTier final
{
public:
	EFortItemTier                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetMaxTier) == 0x000001, "Wrong alignment on FortItem_GetMaxTier");
static_assert(sizeof(FortItem_GetMaxTier) == 0x000001, "Wrong size on FortItem_GetMaxTier");
static_assert(offsetof(FortItem_GetMaxTier, ReturnValue) == 0x000000, "Member 'FortItem_GetMaxTier::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetNormalizedDurability
// 0x0004 (0x0004 - 0x0000)
struct FortItem_GetNormalizedDurability final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetNormalizedDurability) == 0x000004, "Wrong alignment on FortItem_GetNormalizedDurability");
static_assert(sizeof(FortItem_GetNormalizedDurability) == 0x000004, "Wrong size on FortItem_GetNormalizedDurability");
static_assert(offsetof(FortItem_GetNormalizedDurability, ReturnValue) == 0x000000, "Member 'FortItem_GetNormalizedDurability::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetNumInStack
// 0x0004 (0x0004 - 0x0000)
struct FortItem_GetNumInStack final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetNumInStack) == 0x000004, "Wrong alignment on FortItem_GetNumInStack");
static_assert(sizeof(FortItem_GetNumInStack) == 0x000004, "Wrong size on FortItem_GetNumInStack");
static_assert(offsetof(FortItem_GetNumInStack, ReturnValue) == 0x000000, "Member 'FortItem_GetNumInStack::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetOwningController
// 0x0008 (0x0008 - 0x0000)
struct FortItem_GetOwningController final
{
public:
	class AFortPlayerController*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetOwningController) == 0x000008, "Wrong alignment on FortItem_GetOwningController");
static_assert(sizeof(FortItem_GetOwningController) == 0x000008, "Wrong size on FortItem_GetOwningController");
static_assert(offsetof(FortItem_GetOwningController, ReturnValue) == 0x000000, "Member 'FortItem_GetOwningController::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetPreviewAssets
// 0x0010 (0x0010 - 0x0000)
struct FortItem_GetPreviewAssets final
{
public:
	TArray<TSoftObjectPtr<class UObject>>         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetPreviewAssets) == 0x000008, "Wrong alignment on FortItem_GetPreviewAssets");
static_assert(sizeof(FortItem_GetPreviewAssets) == 0x000010, "Wrong size on FortItem_GetPreviewAssets");
static_assert(offsetof(FortItem_GetPreviewAssets, ReturnValue) == 0x000000, "Member 'FortItem_GetPreviewAssets::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetPrimaryCategory
// 0x0020 (0x0020 - 0x0000)
struct FortItem_GetPrimaryCategory final
{
public:
	class FText                                   ItemCategoryText;                                  // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItem_GetPrimaryCategory) == 0x000008, "Wrong alignment on FortItem_GetPrimaryCategory");
static_assert(sizeof(FortItem_GetPrimaryCategory) == 0x000020, "Wrong size on FortItem_GetPrimaryCategory");
static_assert(offsetof(FortItem_GetPrimaryCategory, ItemCategoryText) == 0x000000, "Member 'FortItem_GetPrimaryCategory::ItemCategoryText' has a wrong offset!");
static_assert(offsetof(FortItem_GetPrimaryCategory, ReturnValue) == 0x000018, "Member 'FortItem_GetPrimaryCategory::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetRarity
// 0x0001 (0x0001 - 0x0000)
struct FortItem_GetRarity final
{
public:
	EFortRarity                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetRarity) == 0x000001, "Wrong alignment on FortItem_GetRarity");
static_assert(sizeof(FortItem_GetRarity) == 0x000001, "Wrong size on FortItem_GetRarity");
static_assert(offsetof(FortItem_GetRarity, ReturnValue) == 0x000000, "Member 'FortItem_GetRarity::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetRarityColor
// 0x0010 (0x0010 - 0x0000)
struct FortItem_GetRarityColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetRarityColor) == 0x000004, "Wrong alignment on FortItem_GetRarityColor");
static_assert(sizeof(FortItem_GetRarityColor) == 0x000010, "Wrong size on FortItem_GetRarityColor");
static_assert(offsetof(FortItem_GetRarityColor, ReturnValue) == 0x000000, "Member 'FortItem_GetRarityColor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetRaritySecondaryColor
// 0x0010 (0x0010 - 0x0000)
struct FortItem_GetRaritySecondaryColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetRaritySecondaryColor) == 0x000004, "Wrong alignment on FortItem_GetRaritySecondaryColor");
static_assert(sizeof(FortItem_GetRaritySecondaryColor) == 0x000010, "Wrong size on FortItem_GetRaritySecondaryColor");
static_assert(offsetof(FortItem_GetRaritySecondaryColor, ReturnValue) == 0x000000, "Member 'FortItem_GetRaritySecondaryColor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetRating
// 0x0004 (0x0004 - 0x0000)
struct FortItem_GetRating final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetRating) == 0x000004, "Wrong alignment on FortItem_GetRating");
static_assert(sizeof(FortItem_GetRating) == 0x000004, "Wrong size on FortItem_GetRating");
static_assert(offsetof(FortItem_GetRating, ReturnValue) == 0x000000, "Member 'FortItem_GetRating::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetRecycleValue
// 0x0004 (0x0004 - 0x0000)
struct FortItem_GetRecycleValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetRecycleValue) == 0x000004, "Wrong alignment on FortItem_GetRecycleValue");
static_assert(sizeof(FortItem_GetRecycleValue) == 0x000004, "Wrong size on FortItem_GetRecycleValue");
static_assert(offsetof(FortItem_GetRecycleValue, ReturnValue) == 0x000000, "Member 'FortItem_GetRecycleValue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetRemainingAmmo
// 0x0004 (0x0004 - 0x0000)
struct FortItem_GetRemainingAmmo final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetRemainingAmmo) == 0x000004, "Wrong alignment on FortItem_GetRemainingAmmo");
static_assert(sizeof(FortItem_GetRemainingAmmo) == 0x000004, "Wrong size on FortItem_GetRemainingAmmo");
static_assert(offsetof(FortItem_GetRemainingAmmo, ReturnValue) == 0x000000, "Member 'FortItem_GetRemainingAmmo::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetSchematicCraftingResultBP
// 0x0008 (0x0008 - 0x0000)
struct FortItem_GetSchematicCraftingResultBP final
{
public:
	class UFortItemDefinition*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetSchematicCraftingResultBP) == 0x000008, "Wrong alignment on FortItem_GetSchematicCraftingResultBP");
static_assert(sizeof(FortItem_GetSchematicCraftingResultBP) == 0x000008, "Wrong size on FortItem_GetSchematicCraftingResultBP");
static_assert(offsetof(FortItem_GetSchematicCraftingResultBP, ReturnValue) == 0x000000, "Member 'FortItem_GetSchematicCraftingResultBP::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetSchematicCraftingResultOrCraftedWeaponBP
// 0x0008 (0x0008 - 0x0000)
struct FortItem_GetSchematicCraftingResultOrCraftedWeaponBP final
{
public:
	class UFortWeaponItemDefinition*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetSchematicCraftingResultOrCraftedWeaponBP) == 0x000008, "Wrong alignment on FortItem_GetSchematicCraftingResultOrCraftedWeaponBP");
static_assert(sizeof(FortItem_GetSchematicCraftingResultOrCraftedWeaponBP) == 0x000008, "Wrong size on FortItem_GetSchematicCraftingResultOrCraftedWeaponBP");
static_assert(offsetof(FortItem_GetSchematicCraftingResultOrCraftedWeaponBP, ReturnValue) == 0x000000, "Member 'FortItem_GetSchematicCraftingResultOrCraftedWeaponBP::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetSchematicResultType
// 0x0001 (0x0001 - 0x0000)
struct FortItem_GetSchematicResultType final
{
public:
	EFortItemType                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetSchematicResultType) == 0x000001, "Wrong alignment on FortItem_GetSchematicResultType");
static_assert(sizeof(FortItem_GetSchematicResultType) == 0x000001, "Wrong size on FortItem_GetSchematicResultType");
static_assert(offsetof(FortItem_GetSchematicResultType, ReturnValue) == 0x000000, "Member 'FortItem_GetSchematicResultType::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetSearchTags
// 0x0018 (0x0018 - 0x0000)
struct FortItem_GetSearchTags final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetSearchTags) == 0x000008, "Wrong alignment on FortItem_GetSearchTags");
static_assert(sizeof(FortItem_GetSearchTags) == 0x000018, "Wrong size on FortItem_GetSearchTags");
static_assert(offsetof(FortItem_GetSearchTags, ReturnValue) == 0x000000, "Member 'FortItem_GetSearchTags::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetSecondaryCategory
// 0x0098 (0x0098 - 0x0000)
struct FortItem_GetSecondaryCategory final
{
public:
	class FText                                   ItemCategoryText;                                  // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ItemCategoryBrush;                                 // 0x0018(0x0078)(Parm, OutParm, NativeAccessSpecifierPublic)
	EFortBrushSize                                BrushSize;                                         // 0x0090(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0091(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItem_GetSecondaryCategory) == 0x000008, "Wrong alignment on FortItem_GetSecondaryCategory");
static_assert(sizeof(FortItem_GetSecondaryCategory) == 0x000098, "Wrong size on FortItem_GetSecondaryCategory");
static_assert(offsetof(FortItem_GetSecondaryCategory, ItemCategoryText) == 0x000000, "Member 'FortItem_GetSecondaryCategory::ItemCategoryText' has a wrong offset!");
static_assert(offsetof(FortItem_GetSecondaryCategory, ItemCategoryBrush) == 0x000018, "Member 'FortItem_GetSecondaryCategory::ItemCategoryBrush' has a wrong offset!");
static_assert(offsetof(FortItem_GetSecondaryCategory, BrushSize) == 0x000090, "Member 'FortItem_GetSecondaryCategory::BrushSize' has a wrong offset!");
static_assert(offsetof(FortItem_GetSecondaryCategory, ReturnValue) == 0x000091, "Member 'FortItem_GetSecondaryCategory::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetSmallPreviewImage
// 0x0028 (0x0028 - 0x0000)
struct FortItem_GetSmallPreviewImage final
{
public:
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetSmallPreviewImage) == 0x000008, "Wrong alignment on FortItem_GetSmallPreviewImage");
static_assert(sizeof(FortItem_GetSmallPreviewImage) == 0x000028, "Wrong size on FortItem_GetSmallPreviewImage");
static_assert(offsetof(FortItem_GetSmallPreviewImage, ReturnValue) == 0x000000, "Member 'FortItem_GetSmallPreviewImage::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetTertiaryCategory
// 0x0098 (0x0098 - 0x0000)
struct FortItem_GetTertiaryCategory final
{
public:
	class FText                                   ItemCategoryText;                                  // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ItemCategoryBrush;                                 // 0x0018(0x0078)(Parm, OutParm, NativeAccessSpecifierPublic)
	EFortBrushSize                                BrushSize;                                         // 0x0090(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0091(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItem_GetTertiaryCategory) == 0x000008, "Wrong alignment on FortItem_GetTertiaryCategory");
static_assert(sizeof(FortItem_GetTertiaryCategory) == 0x000098, "Wrong size on FortItem_GetTertiaryCategory");
static_assert(offsetof(FortItem_GetTertiaryCategory, ItemCategoryText) == 0x000000, "Member 'FortItem_GetTertiaryCategory::ItemCategoryText' has a wrong offset!");
static_assert(offsetof(FortItem_GetTertiaryCategory, ItemCategoryBrush) == 0x000018, "Member 'FortItem_GetTertiaryCategory::ItemCategoryBrush' has a wrong offset!");
static_assert(offsetof(FortItem_GetTertiaryCategory, BrushSize) == 0x000090, "Member 'FortItem_GetTertiaryCategory::BrushSize' has a wrong offset!");
static_assert(offsetof(FortItem_GetTertiaryCategory, ReturnValue) == 0x000091, "Member 'FortItem_GetTertiaryCategory::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetTier
// 0x0001 (0x0001 - 0x0000)
struct FortItem_GetTier final
{
public:
	EFortItemTier                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetTier) == 0x000001, "Wrong alignment on FortItem_GetTier");
static_assert(sizeof(FortItem_GetTier) == 0x000001, "Wrong size on FortItem_GetTier");
static_assert(offsetof(FortItem_GetTier, ReturnValue) == 0x000000, "Member 'FortItem_GetTier::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetType
// 0x0001 (0x0001 - 0x0000)
struct FortItem_GetType final
{
public:
	EFortItemType                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetType) == 0x000001, "Wrong alignment on FortItem_GetType");
static_assert(sizeof(FortItem_GetType) == 0x000001, "Wrong size on FortItem_GetType");
static_assert(offsetof(FortItem_GetType, ReturnValue) == 0x000000, "Member 'FortItem_GetType::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetUpgradeCost
// 0x0004 (0x0004 - 0x0000)
struct FortItem_GetUpgradeCost final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetUpgradeCost) == 0x000004, "Wrong alignment on FortItem_GetUpgradeCost");
static_assert(sizeof(FortItem_GetUpgradeCost) == 0x000004, "Wrong size on FortItem_GetUpgradeCost");
static_assert(offsetof(FortItem_GetUpgradeCost, ReturnValue) == 0x000000, "Member 'FortItem_GetUpgradeCost::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetUpgradeResourceItemDefinition
// 0x0008 (0x0008 - 0x0000)
struct FortItem_GetUpgradeResourceItemDefinition final
{
public:
	class UFortPersistentResourceItemDefinition*  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetUpgradeResourceItemDefinition) == 0x000008, "Wrong alignment on FortItem_GetUpgradeResourceItemDefinition");
static_assert(sizeof(FortItem_GetUpgradeResourceItemDefinition) == 0x000008, "Wrong size on FortItem_GetUpgradeResourceItemDefinition");
static_assert(offsetof(FortItem_GetUpgradeResourceItemDefinition, ReturnValue) == 0x000000, "Member 'FortItem_GetUpgradeResourceItemDefinition::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.HasDurability
// 0x0001 (0x0001 - 0x0000)
struct FortItem_HasDurability final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_HasDurability) == 0x000001, "Wrong alignment on FortItem_HasDurability");
static_assert(sizeof(FortItem_HasDurability) == 0x000001, "Wrong size on FortItem_HasDurability");
static_assert(offsetof(FortItem_HasDurability, ReturnValue) == 0x000000, "Member 'FortItem_HasDurability::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.HasEvolutions
// 0x0001 (0x0001 - 0x0000)
struct FortItem_HasEvolutions final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_HasEvolutions) == 0x000001, "Wrong alignment on FortItem_HasEvolutions");
static_assert(sizeof(FortItem_HasEvolutions) == 0x000001, "Wrong size on FortItem_HasEvolutions");
static_assert(offsetof(FortItem_HasEvolutions, ReturnValue) == 0x000000, "Member 'FortItem_HasEvolutions::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.HasRarityUpgrade
// 0x0001 (0x0001 - 0x0000)
struct FortItem_HasRarityUpgrade final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_HasRarityUpgrade) == 0x000001, "Wrong alignment on FortItem_HasRarityUpgrade");
static_assert(sizeof(FortItem_HasRarityUpgrade) == 0x000001, "Wrong size on FortItem_HasRarityUpgrade");
static_assert(offsetof(FortItem_HasRarityUpgrade, ReturnValue) == 0x000000, "Member 'FortItem_HasRarityUpgrade::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.IsActivatable
// 0x0030 (0x0030 - 0x0000)
struct FortItem_IsActivatable final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  FailureReason;                                     // 0x0008(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItem_IsActivatable) == 0x000008, "Wrong alignment on FortItem_IsActivatable");
static_assert(sizeof(FortItem_IsActivatable) == 0x000030, "Wrong size on FortItem_IsActivatable");
static_assert(offsetof(FortItem_IsActivatable, FortPC) == 0x000000, "Member 'FortItem_IsActivatable::FortPC' has a wrong offset!");
static_assert(offsetof(FortItem_IsActivatable, FailureReason) == 0x000008, "Member 'FortItem_IsActivatable::FailureReason' has a wrong offset!");
static_assert(offsetof(FortItem_IsActivatable, ReturnValue) == 0x000028, "Member 'FortItem_IsActivatable::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.IsEquipable
// 0x0010 (0x0010 - 0x0000)
struct FortItem_IsEquipable final
{
public:
	const class AFortPlayerController*            EquippingPC;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItem_IsEquipable) == 0x000008, "Wrong alignment on FortItem_IsEquipable");
static_assert(sizeof(FortItem_IsEquipable) == 0x000010, "Wrong size on FortItem_IsEquipable");
static_assert(offsetof(FortItem_IsEquipable, EquippingPC) == 0x000000, "Member 'FortItem_IsEquipable::EquippingPC' has a wrong offset!");
static_assert(offsetof(FortItem_IsEquipable, ReturnValue) == 0x000008, "Member 'FortItem_IsEquipable::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.IsEquipped
// 0x0001 (0x0001 - 0x0000)
struct FortItem_IsEquipped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_IsEquipped) == 0x000001, "Wrong alignment on FortItem_IsEquipped");
static_assert(sizeof(FortItem_IsEquipped) == 0x000001, "Wrong size on FortItem_IsEquipped");
static_assert(offsetof(FortItem_IsEquipped, ReturnValue) == 0x000000, "Member 'FortItem_IsEquipped::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.IsInStorageVault
// 0x0001 (0x0001 - 0x0000)
struct FortItem_IsInStorageVault final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_IsInStorageVault) == 0x000001, "Wrong alignment on FortItem_IsInStorageVault");
static_assert(sizeof(FortItem_IsInStorageVault) == 0x000001, "Wrong size on FortItem_IsInStorageVault");
static_assert(offsetof(FortItem_IsInStorageVault, ReturnValue) == 0x000000, "Member 'FortItem_IsInStorageVault::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.IsInventoryOverflowItem
// 0x0001 (0x0001 - 0x0000)
struct FortItem_IsInventoryOverflowItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_IsInventoryOverflowItem) == 0x000001, "Wrong alignment on FortItem_IsInventoryOverflowItem");
static_assert(sizeof(FortItem_IsInventoryOverflowItem) == 0x000001, "Wrong size on FortItem_IsInventoryOverflowItem");
static_assert(offsetof(FortItem_IsInventoryOverflowItem, ReturnValue) == 0x000000, "Member 'FortItem_IsInventoryOverflowItem::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.IsSchematic
// 0x0001 (0x0001 - 0x0000)
struct FortItem_IsSchematic final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_IsSchematic) == 0x000001, "Wrong alignment on FortItem_IsSchematic");
static_assert(sizeof(FortItem_IsSchematic) == 0x000001, "Wrong size on FortItem_IsSchematic");
static_assert(offsetof(FortItem_IsSchematic, ReturnValue) == 0x000000, "Member 'FortItem_IsSchematic::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.IsSchematicOrCraftedWeapon
// 0x0001 (0x0001 - 0x0000)
struct FortItem_IsSchematicOrCraftedWeapon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_IsSchematicOrCraftedWeapon) == 0x000001, "Wrong alignment on FortItem_IsSchematicOrCraftedWeapon");
static_assert(sizeof(FortItem_IsSchematicOrCraftedWeapon) == 0x000001, "Wrong size on FortItem_IsSchematicOrCraftedWeapon");
static_assert(offsetof(FortItem_IsSchematicOrCraftedWeapon, ReturnValue) == 0x000000, "Member 'FortItem_IsSchematicOrCraftedWeapon::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.IsSlotted
// 0x0001 (0x0001 - 0x0000)
struct FortItem_IsSlotted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_IsSlotted) == 0x000001, "Wrong alignment on FortItem_IsSlotted");
static_assert(sizeof(FortItem_IsSlotted) == 0x000001, "Wrong size on FortItem_IsSlotted");
static_assert(offsetof(FortItem_IsSlotted, ReturnValue) == 0x000000, "Member 'FortItem_IsSlotted::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.IsTemporaryItem
// 0x0001 (0x0001 - 0x0000)
struct FortItem_IsTemporaryItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_IsTemporaryItem) == 0x000001, "Wrong alignment on FortItem_IsTemporaryItem");
static_assert(sizeof(FortItem_IsTemporaryItem) == 0x000001, "Wrong size on FortItem_IsTemporaryItem");
static_assert(offsetof(FortItem_IsTemporaryItem, ReturnValue) == 0x000000, "Member 'FortItem_IsTemporaryItem::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.TryGetCategory
// 0x0300 (0x0300 - 0x0000)
struct FortItem_TryGetCategory final
{
public:
	EFortItemCategoryOrdinal                      Ordinal;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   OutCategoryDisplayName;                            // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          OutHasIcon;                                        // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortMultiSizeBrush                    OutCategoryIconBrush;                              // 0x0028(0x02D0)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x02F8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F9[0x7];                                      // 0x02F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItem_TryGetCategory) == 0x000008, "Wrong alignment on FortItem_TryGetCategory");
static_assert(sizeof(FortItem_TryGetCategory) == 0x000300, "Wrong size on FortItem_TryGetCategory");
static_assert(offsetof(FortItem_TryGetCategory, Ordinal) == 0x000000, "Member 'FortItem_TryGetCategory::Ordinal' has a wrong offset!");
static_assert(offsetof(FortItem_TryGetCategory, OutCategoryDisplayName) == 0x000008, "Member 'FortItem_TryGetCategory::OutCategoryDisplayName' has a wrong offset!");
static_assert(offsetof(FortItem_TryGetCategory, OutHasIcon) == 0x000020, "Member 'FortItem_TryGetCategory::OutHasIcon' has a wrong offset!");
static_assert(offsetof(FortItem_TryGetCategory, OutCategoryIconBrush) == 0x000028, "Member 'FortItem_TryGetCategory::OutCategoryIconBrush' has a wrong offset!");
static_assert(offsetof(FortItem_TryGetCategory, ReturnValue) == 0x0002F8, "Member 'FortItem_TryGetCategory::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.AssignGroupToHotspot
// 0x0018 (0x0018 - 0x0000)
struct AIHotSpot_AssignGroupToHotspot final
{
public:
	TArray<class AAIController*>                  GroupOfAI;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_AssignGroupToHotspot) == 0x000008, "Wrong alignment on AIHotSpot_AssignGroupToHotspot");
static_assert(sizeof(AIHotSpot_AssignGroupToHotspot) == 0x000018, "Wrong size on AIHotSpot_AssignGroupToHotspot");
static_assert(offsetof(AIHotSpot_AssignGroupToHotspot, GroupOfAI) == 0x000000, "Member 'AIHotSpot_AssignGroupToHotspot::GroupOfAI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_AssignGroupToHotspot, ReturnValue) == 0x000010, "Member 'AIHotSpot_AssignGroupToHotspot::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.AssignToHotspot
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_AssignToHotspot final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_AssignToHotspot) == 0x000008, "Wrong alignment on AIHotSpot_AssignToHotspot");
static_assert(sizeof(AIHotSpot_AssignToHotspot) == 0x000010, "Wrong size on AIHotSpot_AssignToHotspot");
static_assert(offsetof(AIHotSpot_AssignToHotspot, AI) == 0x000000, "Member 'AIHotSpot_AssignToHotspot::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_AssignToHotspot, ReturnValue) == 0x000008, "Member 'AIHotSpot_AssignToHotspot::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.AssignToSlotByIndex
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_AssignToSlotByIndex final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_AssignToSlotByIndex) == 0x000008, "Wrong alignment on AIHotSpot_AssignToSlotByIndex");
static_assert(sizeof(AIHotSpot_AssignToSlotByIndex) == 0x000010, "Wrong size on AIHotSpot_AssignToSlotByIndex");
static_assert(offsetof(AIHotSpot_AssignToSlotByIndex, AI) == 0x000000, "Member 'AIHotSpot_AssignToSlotByIndex::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_AssignToSlotByIndex, Param_Index) == 0x000008, "Member 'AIHotSpot_AssignToSlotByIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(AIHotSpot_AssignToSlotByIndex, ReturnValue) == 0x00000C, "Member 'AIHotSpot_AssignToSlotByIndex::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.OccupySlotByIndex
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpot_OccupySlotByIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_OccupySlotByIndex) == 0x000004, "Wrong alignment on AIHotSpot_OccupySlotByIndex");
static_assert(sizeof(AIHotSpot_OccupySlotByIndex) == 0x000008, "Wrong size on AIHotSpot_OccupySlotByIndex");
static_assert(offsetof(AIHotSpot_OccupySlotByIndex, Param_Index) == 0x000000, "Member 'AIHotSpot_OccupySlotByIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OccupySlotByIndex, ReturnValue) == 0x000004, "Member 'AIHotSpot_OccupySlotByIndex::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.OnAssignedClaimedBehavior
// 0x0018 (0x0018 - 0x0000)
struct AIHotSpot_OnAssignedClaimedBehavior final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserId;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasOnWaitingList;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_OnAssignedClaimedBehavior) == 0x000008, "Wrong alignment on AIHotSpot_OnAssignedClaimedBehavior");
static_assert(sizeof(AIHotSpot_OnAssignedClaimedBehavior) == 0x000018, "Wrong size on AIHotSpot_OnAssignedClaimedBehavior");
static_assert(offsetof(AIHotSpot_OnAssignedClaimedBehavior, AI) == 0x000000, "Member 'AIHotSpot_OnAssignedClaimedBehavior::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnAssignedClaimedBehavior, Param_Index) == 0x000008, "Member 'AIHotSpot_OnAssignedClaimedBehavior::Param_Index' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnAssignedClaimedBehavior, UserId) == 0x00000C, "Member 'AIHotSpot_OnAssignedClaimedBehavior::UserId' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnAssignedClaimedBehavior, bWasOnWaitingList) == 0x000010, "Member 'AIHotSpot_OnAssignedClaimedBehavior::bWasOnWaitingList' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnAssignedClaimedBehavior, ReturnValue) == 0x000011, "Member 'AIHotSpot_OnAssignedClaimedBehavior::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.OnAssignedOccupiedBehavior
// 0x0018 (0x0018 - 0x0000)
struct AIHotSpot_OnAssignedOccupiedBehavior final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserId;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_OnAssignedOccupiedBehavior) == 0x000008, "Wrong alignment on AIHotSpot_OnAssignedOccupiedBehavior");
static_assert(sizeof(AIHotSpot_OnAssignedOccupiedBehavior) == 0x000018, "Wrong size on AIHotSpot_OnAssignedOccupiedBehavior");
static_assert(offsetof(AIHotSpot_OnAssignedOccupiedBehavior, AI) == 0x000000, "Member 'AIHotSpot_OnAssignedOccupiedBehavior::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnAssignedOccupiedBehavior, Param_Index) == 0x000008, "Member 'AIHotSpot_OnAssignedOccupiedBehavior::Param_Index' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnAssignedOccupiedBehavior, UserId) == 0x00000C, "Member 'AIHotSpot_OnAssignedOccupiedBehavior::UserId' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnAssignedOccupiedBehavior, ReturnValue) == 0x000010, "Member 'AIHotSpot_OnAssignedOccupiedBehavior::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.OnAssignedSlotlessBehavior
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_OnAssignedSlotlessBehavior final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_OnAssignedSlotlessBehavior) == 0x000008, "Wrong alignment on AIHotSpot_OnAssignedSlotlessBehavior");
static_assert(sizeof(AIHotSpot_OnAssignedSlotlessBehavior) == 0x000010, "Wrong size on AIHotSpot_OnAssignedSlotlessBehavior");
static_assert(offsetof(AIHotSpot_OnAssignedSlotlessBehavior, AI) == 0x000000, "Member 'AIHotSpot_OnAssignedSlotlessBehavior::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnAssignedSlotlessBehavior, ReturnValue) == 0x000008, "Member 'AIHotSpot_OnAssignedSlotlessBehavior::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.OnMoveToSlotFinished
// 0x0018 (0x0018 - 0x0000)
struct AIHotSpot_OnMoveToSlotFinished final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserId;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResult;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_OnMoveToSlotFinished) == 0x000008, "Wrong alignment on AIHotSpot_OnMoveToSlotFinished");
static_assert(sizeof(AIHotSpot_OnMoveToSlotFinished) == 0x000018, "Wrong size on AIHotSpot_OnMoveToSlotFinished");
static_assert(offsetof(AIHotSpot_OnMoveToSlotFinished, AI) == 0x000000, "Member 'AIHotSpot_OnMoveToSlotFinished::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnMoveToSlotFinished, Param_Index) == 0x000008, "Member 'AIHotSpot_OnMoveToSlotFinished::Param_Index' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnMoveToSlotFinished, UserId) == 0x00000C, "Member 'AIHotSpot_OnMoveToSlotFinished::UserId' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnMoveToSlotFinished, bResult) == 0x000010, "Member 'AIHotSpot_OnMoveToSlotFinished::bResult' has a wrong offset!");

// Function FortniteGame.AIHotSpot.OnRemovedBehavior
// 0x0018 (0x0018 - 0x0000)
struct AIHotSpot_OnRemovedBehavior final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserId;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIHotSpotSlot                                PrevState;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasOnWaitingList;                                 // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_OnRemovedBehavior) == 0x000008, "Wrong alignment on AIHotSpot_OnRemovedBehavior");
static_assert(sizeof(AIHotSpot_OnRemovedBehavior) == 0x000018, "Wrong size on AIHotSpot_OnRemovedBehavior");
static_assert(offsetof(AIHotSpot_OnRemovedBehavior, AI) == 0x000000, "Member 'AIHotSpot_OnRemovedBehavior::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnRemovedBehavior, Param_Index) == 0x000008, "Member 'AIHotSpot_OnRemovedBehavior::Param_Index' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnRemovedBehavior, UserId) == 0x00000C, "Member 'AIHotSpot_OnRemovedBehavior::UserId' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnRemovedBehavior, PrevState) == 0x000010, "Member 'AIHotSpot_OnRemovedBehavior::PrevState' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnRemovedBehavior, bWasOnWaitingList) == 0x000011, "Member 'AIHotSpot_OnRemovedBehavior::bWasOnWaitingList' has a wrong offset!");

// Function FortniteGame.AIHotSpot.OnRemovedSlotlessBehavior
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_OnRemovedSlotlessBehavior final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsClamingSlot;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_OnRemovedSlotlessBehavior) == 0x000008, "Wrong alignment on AIHotSpot_OnRemovedSlotlessBehavior");
static_assert(sizeof(AIHotSpot_OnRemovedSlotlessBehavior) == 0x000010, "Wrong size on AIHotSpot_OnRemovedSlotlessBehavior");
static_assert(offsetof(AIHotSpot_OnRemovedSlotlessBehavior, AI) == 0x000000, "Member 'AIHotSpot_OnRemovedSlotlessBehavior::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnRemovedSlotlessBehavior, bIsClamingSlot) == 0x000008, "Member 'AIHotSpot_OnRemovedSlotlessBehavior::bIsClamingSlot' has a wrong offset!");

// Function FortniteGame.AIHotSpot.OnSlotBlocked
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_OnSlotBlocked final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserId;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_OnSlotBlocked) == 0x000008, "Wrong alignment on AIHotSpot_OnSlotBlocked");
static_assert(sizeof(AIHotSpot_OnSlotBlocked) == 0x000010, "Wrong size on AIHotSpot_OnSlotBlocked");
static_assert(offsetof(AIHotSpot_OnSlotBlocked, AI) == 0x000000, "Member 'AIHotSpot_OnSlotBlocked::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnSlotBlocked, Param_Index) == 0x000008, "Member 'AIHotSpot_OnSlotBlocked::Param_Index' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnSlotBlocked, UserId) == 0x00000C, "Member 'AIHotSpot_OnSlotBlocked::UserId' has a wrong offset!");

// Function FortniteGame.AIHotSpot.OnSlotClaimed
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_OnSlotClaimed final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserId;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_OnSlotClaimed) == 0x000008, "Wrong alignment on AIHotSpot_OnSlotClaimed");
static_assert(sizeof(AIHotSpot_OnSlotClaimed) == 0x000010, "Wrong size on AIHotSpot_OnSlotClaimed");
static_assert(offsetof(AIHotSpot_OnSlotClaimed, AI) == 0x000000, "Member 'AIHotSpot_OnSlotClaimed::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnSlotClaimed, Param_Index) == 0x000008, "Member 'AIHotSpot_OnSlotClaimed::Param_Index' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnSlotClaimed, UserId) == 0x00000C, "Member 'AIHotSpot_OnSlotClaimed::UserId' has a wrong offset!");

// Function FortniteGame.AIHotSpot.OnSlotDisabled
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpot_OnSlotDisabled final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserId;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_OnSlotDisabled) == 0x000004, "Wrong alignment on AIHotSpot_OnSlotDisabled");
static_assert(sizeof(AIHotSpot_OnSlotDisabled) == 0x000008, "Wrong size on AIHotSpot_OnSlotDisabled");
static_assert(offsetof(AIHotSpot_OnSlotDisabled, Param_Index) == 0x000000, "Member 'AIHotSpot_OnSlotDisabled::Param_Index' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnSlotDisabled, UserId) == 0x000004, "Member 'AIHotSpot_OnSlotDisabled::UserId' has a wrong offset!");

// Function FortniteGame.AIHotSpot.OnSlotEnabled
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpot_OnSlotEnabled final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserId;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_OnSlotEnabled) == 0x000004, "Wrong alignment on AIHotSpot_OnSlotEnabled");
static_assert(sizeof(AIHotSpot_OnSlotEnabled) == 0x000008, "Wrong size on AIHotSpot_OnSlotEnabled");
static_assert(offsetof(AIHotSpot_OnSlotEnabled, Param_Index) == 0x000000, "Member 'AIHotSpot_OnSlotEnabled::Param_Index' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnSlotEnabled, UserId) == 0x000004, "Member 'AIHotSpot_OnSlotEnabled::UserId' has a wrong offset!");

// Function FortniteGame.AIHotSpot.OnSlotFreed
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_OnSlotFreed final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserId;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_OnSlotFreed) == 0x000008, "Wrong alignment on AIHotSpot_OnSlotFreed");
static_assert(sizeof(AIHotSpot_OnSlotFreed) == 0x000010, "Wrong size on AIHotSpot_OnSlotFreed");
static_assert(offsetof(AIHotSpot_OnSlotFreed, AI) == 0x000000, "Member 'AIHotSpot_OnSlotFreed::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnSlotFreed, Param_Index) == 0x000008, "Member 'AIHotSpot_OnSlotFreed::Param_Index' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnSlotFreed, UserId) == 0x00000C, "Member 'AIHotSpot_OnSlotFreed::UserId' has a wrong offset!");

// Function FortniteGame.AIHotSpot.OnSlotOccupied
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_OnSlotOccupied final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserId;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_OnSlotOccupied) == 0x000008, "Wrong alignment on AIHotSpot_OnSlotOccupied");
static_assert(sizeof(AIHotSpot_OnSlotOccupied) == 0x000010, "Wrong size on AIHotSpot_OnSlotOccupied");
static_assert(offsetof(AIHotSpot_OnSlotOccupied, AI) == 0x000000, "Member 'AIHotSpot_OnSlotOccupied::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnSlotOccupied, Param_Index) == 0x000008, "Member 'AIHotSpot_OnSlotOccupied::Param_Index' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnSlotOccupied, UserId) == 0x00000C, "Member 'AIHotSpot_OnSlotOccupied::UserId' has a wrong offset!");

// Function FortniteGame.AIHotSpot.RemoveFromHotspot
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_RemoveFromHotspot final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAssignFromWaitingList;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_RemoveFromHotspot) == 0x000008, "Wrong alignment on AIHotSpot_RemoveFromHotspot");
static_assert(sizeof(AIHotSpot_RemoveFromHotspot) == 0x000010, "Wrong size on AIHotSpot_RemoveFromHotspot");
static_assert(offsetof(AIHotSpot_RemoveFromHotspot, AI) == 0x000000, "Member 'AIHotSpot_RemoveFromHotspot::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_RemoveFromHotspot, bAssignFromWaitingList) == 0x000008, "Member 'AIHotSpot_RemoveFromHotspot::bAssignFromWaitingList' has a wrong offset!");
static_assert(offsetof(AIHotSpot_RemoveFromHotspot, ReturnValue) == 0x000009, "Member 'AIHotSpot_RemoveFromHotspot::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.RemoveGroupFromHotspot
// 0x0018 (0x0018 - 0x0000)
struct AIHotSpot_RemoveGroupFromHotspot final
{
public:
	TArray<class AAIController*>                  GroupOfAI;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_RemoveGroupFromHotspot) == 0x000008, "Wrong alignment on AIHotSpot_RemoveGroupFromHotspot");
static_assert(sizeof(AIHotSpot_RemoveGroupFromHotspot) == 0x000018, "Wrong size on AIHotSpot_RemoveGroupFromHotspot");
static_assert(offsetof(AIHotSpot_RemoveGroupFromHotspot, GroupOfAI) == 0x000000, "Member 'AIHotSpot_RemoveGroupFromHotspot::GroupOfAI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_RemoveGroupFromHotspot, ReturnValue) == 0x000010, "Member 'AIHotSpot_RemoveGroupFromHotspot::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct AIHotSpot_SetEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_SetEnabled) == 0x000001, "Wrong alignment on AIHotSpot_SetEnabled");
static_assert(sizeof(AIHotSpot_SetEnabled) == 0x000001, "Wrong size on AIHotSpot_SetEnabled");
static_assert(offsetof(AIHotSpot_SetEnabled, bEnabled) == 0x000000, "Member 'AIHotSpot_SetEnabled::bEnabled' has a wrong offset!");

// Function FortniteGame.AIHotSpot.CanUseSlotByIndex
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_CanUseSlotByIndex final
{
public:
	const class AAIController*                    AI;                                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_CanUseSlotByIndex) == 0x000008, "Wrong alignment on AIHotSpot_CanUseSlotByIndex");
static_assert(sizeof(AIHotSpot_CanUseSlotByIndex) == 0x000010, "Wrong size on AIHotSpot_CanUseSlotByIndex");
static_assert(offsetof(AIHotSpot_CanUseSlotByIndex, AI) == 0x000000, "Member 'AIHotSpot_CanUseSlotByIndex::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_CanUseSlotByIndex, Param_Index) == 0x000008, "Member 'AIHotSpot_CanUseSlotByIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(AIHotSpot_CanUseSlotByIndex, ReturnValue) == 0x00000C, "Member 'AIHotSpot_CanUseSlotByIndex::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.FindBestSlotIndex
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_FindBestSlotIndex final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_FindBestSlotIndex) == 0x000008, "Wrong alignment on AIHotSpot_FindBestSlotIndex");
static_assert(sizeof(AIHotSpot_FindBestSlotIndex) == 0x000010, "Wrong size on AIHotSpot_FindBestSlotIndex");
static_assert(offsetof(AIHotSpot_FindBestSlotIndex, AI) == 0x000000, "Member 'AIHotSpot_FindBestSlotIndex::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_FindBestSlotIndex, ReturnValue) == 0x000008, "Member 'AIHotSpot_FindBestSlotIndex::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.FindBestSlotIndices
// 0x0020 (0x0020 - 0x0000)
struct AIHotSpot_FindBestSlotIndices final
{
public:
	TArray<class AAIController*>                  AI;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_FindBestSlotIndices) == 0x000008, "Wrong alignment on AIHotSpot_FindBestSlotIndices");
static_assert(sizeof(AIHotSpot_FindBestSlotIndices) == 0x000020, "Wrong size on AIHotSpot_FindBestSlotIndices");
static_assert(offsetof(AIHotSpot_FindBestSlotIndices, AI) == 0x000000, "Member 'AIHotSpot_FindBestSlotIndices::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_FindBestSlotIndices, ReturnValue) == 0x000010, "Member 'AIHotSpot_FindBestSlotIndices::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.GetAssignedAI
// 0x0018 (0x0018 - 0x0000)
struct AIHotSpot_GetAssignedAI final
{
public:
	EAIHotSpotAssignmentFilter                    Filter;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AAIController*>                  ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_GetAssignedAI) == 0x000008, "Wrong alignment on AIHotSpot_GetAssignedAI");
static_assert(sizeof(AIHotSpot_GetAssignedAI) == 0x000018, "Wrong size on AIHotSpot_GetAssignedAI");
static_assert(offsetof(AIHotSpot_GetAssignedAI, Filter) == 0x000000, "Member 'AIHotSpot_GetAssignedAI::Filter' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetAssignedAI, ReturnValue) == 0x000008, "Member 'AIHotSpot_GetAssignedAI::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.GetAssignedAICount
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpot_GetAssignedAICount final
{
public:
	EAIHotSpotAssignmentFilter                    Filter;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_GetAssignedAICount) == 0x000004, "Wrong alignment on AIHotSpot_GetAssignedAICount");
static_assert(sizeof(AIHotSpot_GetAssignedAICount) == 0x000008, "Wrong size on AIHotSpot_GetAssignedAICount");
static_assert(offsetof(AIHotSpot_GetAssignedAICount, Filter) == 0x000000, "Member 'AIHotSpot_GetAssignedAICount::Filter' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetAssignedAICount, ReturnValue) == 0x000004, "Member 'AIHotSpot_GetAssignedAICount::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.GetSlotByIndex
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_GetSlotByIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAIHotSpotSlot*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_GetSlotByIndex) == 0x000008, "Wrong alignment on AIHotSpot_GetSlotByIndex");
static_assert(sizeof(AIHotSpot_GetSlotByIndex) == 0x000010, "Wrong size on AIHotSpot_GetSlotByIndex");
static_assert(offsetof(AIHotSpot_GetSlotByIndex, Param_Index) == 0x000000, "Member 'AIHotSpot_GetSlotByIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetSlotByIndex, ReturnValue) == 0x000008, "Member 'AIHotSpot_GetSlotByIndex::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.GetSlotByOwner
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_GetSlotByOwner final
{
public:
	const class AAIController*                    AIOwner;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAIHotSpotSlot*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_GetSlotByOwner) == 0x000008, "Wrong alignment on AIHotSpot_GetSlotByOwner");
static_assert(sizeof(AIHotSpot_GetSlotByOwner) == 0x000010, "Wrong size on AIHotSpot_GetSlotByOwner");
static_assert(offsetof(AIHotSpot_GetSlotByOwner, AIOwner) == 0x000000, "Member 'AIHotSpot_GetSlotByOwner::AIOwner' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetSlotByOwner, ReturnValue) == 0x000008, "Member 'AIHotSpot_GetSlotByOwner::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.GetSlotCount
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpot_GetSlotCount final
{
public:
	EAIHotSpotSlotFilter                          Filter;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_GetSlotCount) == 0x000004, "Wrong alignment on AIHotSpot_GetSlotCount");
static_assert(sizeof(AIHotSpot_GetSlotCount) == 0x000008, "Wrong size on AIHotSpot_GetSlotCount");
static_assert(offsetof(AIHotSpot_GetSlotCount, Filter) == 0x000000, "Member 'AIHotSpot_GetSlotCount::Filter' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetSlotCount, ReturnValue) == 0x000004, "Member 'AIHotSpot_GetSlotCount::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.GetSlotIndexByOwner
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_GetSlotIndexByOwner final
{
public:
	const class AAIController*                    AIOwner;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_GetSlotIndexByOwner) == 0x000008, "Wrong alignment on AIHotSpot_GetSlotIndexByOwner");
static_assert(sizeof(AIHotSpot_GetSlotIndexByOwner) == 0x000010, "Wrong size on AIHotSpot_GetSlotIndexByOwner");
static_assert(offsetof(AIHotSpot_GetSlotIndexByOwner, AIOwner) == 0x000000, "Member 'AIHotSpot_GetSlotIndexByOwner::AIOwner' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetSlotIndexByOwner, ReturnValue) == 0x000008, "Member 'AIHotSpot_GetSlotIndexByOwner::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.GetSlotLocationByIndex
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_GetSlotLocationByIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_GetSlotLocationByIndex) == 0x000004, "Wrong alignment on AIHotSpot_GetSlotLocationByIndex");
static_assert(sizeof(AIHotSpot_GetSlotLocationByIndex) == 0x000010, "Wrong size on AIHotSpot_GetSlotLocationByIndex");
static_assert(offsetof(AIHotSpot_GetSlotLocationByIndex, Param_Index) == 0x000000, "Member 'AIHotSpot_GetSlotLocationByIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetSlotLocationByIndex, ReturnValue) == 0x000004, "Member 'AIHotSpot_GetSlotLocationByIndex::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.GetSlotOwnerByIndex
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_GetSlotOwnerByIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_GetSlotOwnerByIndex) == 0x000008, "Wrong alignment on AIHotSpot_GetSlotOwnerByIndex");
static_assert(sizeof(AIHotSpot_GetSlotOwnerByIndex) == 0x000010, "Wrong size on AIHotSpot_GetSlotOwnerByIndex");
static_assert(offsetof(AIHotSpot_GetSlotOwnerByIndex, Param_Index) == 0x000000, "Member 'AIHotSpot_GetSlotOwnerByIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetSlotOwnerByIndex, ReturnValue) == 0x000008, "Member 'AIHotSpot_GetSlotOwnerByIndex::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.GetSlotRotationByIndex
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_GetSlotRotationByIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_GetSlotRotationByIndex) == 0x000004, "Wrong alignment on AIHotSpot_GetSlotRotationByIndex");
static_assert(sizeof(AIHotSpot_GetSlotRotationByIndex) == 0x000010, "Wrong size on AIHotSpot_GetSlotRotationByIndex");
static_assert(offsetof(AIHotSpot_GetSlotRotationByIndex, Param_Index) == 0x000000, "Member 'AIHotSpot_GetSlotRotationByIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetSlotRotationByIndex, ReturnValue) == 0x000004, "Member 'AIHotSpot_GetSlotRotationByIndex::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.GetSlotStateByIndex
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpot_GetSlotStateByIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIHotSpotSlot                                ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_GetSlotStateByIndex) == 0x000004, "Wrong alignment on AIHotSpot_GetSlotStateByIndex");
static_assert(sizeof(AIHotSpot_GetSlotStateByIndex) == 0x000008, "Wrong size on AIHotSpot_GetSlotStateByIndex");
static_assert(offsetof(AIHotSpot_GetSlotStateByIndex, Param_Index) == 0x000000, "Member 'AIHotSpot_GetSlotStateByIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetSlotStateByIndex, ReturnValue) == 0x000004, "Member 'AIHotSpot_GetSlotStateByIndex::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.GetSlotStateByOwner
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_GetSlotStateByOwner final
{
public:
	const class AAIController*                    AIOwner;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIHotSpotSlot                                ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_GetSlotStateByOwner) == 0x000008, "Wrong alignment on AIHotSpot_GetSlotStateByOwner");
static_assert(sizeof(AIHotSpot_GetSlotStateByOwner) == 0x000010, "Wrong size on AIHotSpot_GetSlotStateByOwner");
static_assert(offsetof(AIHotSpot_GetSlotStateByOwner, AIOwner) == 0x000000, "Member 'AIHotSpot_GetSlotStateByOwner::AIOwner' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetSlotStateByOwner, ReturnValue) == 0x000008, "Member 'AIHotSpot_GetSlotStateByOwner::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.GetSlotUserIdByIndex
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpot_GetSlotUserIdByIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_GetSlotUserIdByIndex) == 0x000004, "Wrong alignment on AIHotSpot_GetSlotUserIdByIndex");
static_assert(sizeof(AIHotSpot_GetSlotUserIdByIndex) == 0x000008, "Wrong size on AIHotSpot_GetSlotUserIdByIndex");
static_assert(offsetof(AIHotSpot_GetSlotUserIdByIndex, Param_Index) == 0x000000, "Member 'AIHotSpot_GetSlotUserIdByIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetSlotUserIdByIndex, ReturnValue) == 0x000004, "Member 'AIHotSpot_GetSlotUserIdByIndex::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.HasAssignedAI
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_HasAssignedAI final
{
public:
	const class AAIController*                    AI;                                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIHotSpotAssignmentFilter                    Filter;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_HasAssignedAI) == 0x000008, "Wrong alignment on AIHotSpot_HasAssignedAI");
static_assert(sizeof(AIHotSpot_HasAssignedAI) == 0x000010, "Wrong size on AIHotSpot_HasAssignedAI");
static_assert(offsetof(AIHotSpot_HasAssignedAI, AI) == 0x000000, "Member 'AIHotSpot_HasAssignedAI::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_HasAssignedAI, Filter) == 0x000008, "Member 'AIHotSpot_HasAssignedAI::Filter' has a wrong offset!");
static_assert(offsetof(AIHotSpot_HasAssignedAI, ReturnValue) == 0x000009, "Member 'AIHotSpot_HasAssignedAI::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.HasEnabledSlots
// 0x0001 (0x0001 - 0x0000)
struct AIHotSpot_HasEnabledSlots final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_HasEnabledSlots) == 0x000001, "Wrong alignment on AIHotSpot_HasEnabledSlots");
static_assert(sizeof(AIHotSpot_HasEnabledSlots) == 0x000001, "Wrong size on AIHotSpot_HasEnabledSlots");
static_assert(offsetof(AIHotSpot_HasEnabledSlots, ReturnValue) == 0x000000, "Member 'AIHotSpot_HasEnabledSlots::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.IsAIAllowed
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_IsAIAllowed final
{
public:
	const class AAIController*                    AI;                                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_IsAIAllowed) == 0x000008, "Wrong alignment on AIHotSpot_IsAIAllowed");
static_assert(sizeof(AIHotSpot_IsAIAllowed) == 0x000010, "Wrong size on AIHotSpot_IsAIAllowed");
static_assert(offsetof(AIHotSpot_IsAIAllowed, AI) == 0x000000, "Member 'AIHotSpot_IsAIAllowed::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_IsAIAllowed, ReturnValue) == 0x000008, "Member 'AIHotSpot_IsAIAllowed::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct AIHotSpot_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_IsEnabled) == 0x000001, "Wrong alignment on AIHotSpot_IsEnabled");
static_assert(sizeof(AIHotSpot_IsEnabled) == 0x000001, "Wrong size on AIHotSpot_IsEnabled");
static_assert(offsetof(AIHotSpot_IsEnabled, ReturnValue) == 0x000000, "Member 'AIHotSpot_IsEnabled::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.IsSlotlessAssignmentAllowed
// 0x0001 (0x0001 - 0x0000)
struct AIHotSpot_IsSlotlessAssignmentAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_IsSlotlessAssignmentAllowed) == 0x000001, "Wrong alignment on AIHotSpot_IsSlotlessAssignmentAllowed");
static_assert(sizeof(AIHotSpot_IsSlotlessAssignmentAllowed) == 0x000001, "Wrong size on AIHotSpot_IsSlotlessAssignmentAllowed");
static_assert(offsetof(AIHotSpot_IsSlotlessAssignmentAllowed, ReturnValue) == 0x000000, "Member 'AIHotSpot_IsSlotlessAssignmentAllowed::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ActivateSlot
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerController_ActivateSlot final
{
public:
	EFortQuickBars                                InQuickBar;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Slot;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActivateDelay;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdatePreviousFocusedSlot;                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_ActivateSlot) == 0x000004, "Wrong alignment on FortPlayerController_ActivateSlot");
static_assert(sizeof(FortPlayerController_ActivateSlot) == 0x000010, "Wrong size on FortPlayerController_ActivateSlot");
static_assert(offsetof(FortPlayerController_ActivateSlot, InQuickBar) == 0x000000, "Member 'FortPlayerController_ActivateSlot::InQuickBar' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ActivateSlot, Slot) == 0x000004, "Member 'FortPlayerController_ActivateSlot::Slot' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ActivateSlot, ActivateDelay) == 0x000008, "Member 'FortPlayerController_ActivateSlot::ActivateDelay' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ActivateSlot, bUpdatePreviousFocusedSlot) == 0x00000C, "Member 'FortPlayerController_ActivateSlot::bUpdatePreviousFocusedSlot' has a wrong offset!");

// Function FortniteGame.FortPlayerController.AddItemToQuickBars
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerController_AddItemToQuickBars final
{
public:
	class UFortItemDefinition*                    ItemDefinition;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortQuickBars                                QuickBarType;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotIndex;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_AddItemToQuickBars) == 0x000008, "Wrong alignment on FortPlayerController_AddItemToQuickBars");
static_assert(sizeof(FortPlayerController_AddItemToQuickBars) == 0x000010, "Wrong size on FortPlayerController_AddItemToQuickBars");
static_assert(offsetof(FortPlayerController_AddItemToQuickBars, ItemDefinition) == 0x000000, "Member 'FortPlayerController_AddItemToQuickBars::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FortPlayerController_AddItemToQuickBars, QuickBarType) == 0x000008, "Member 'FortPlayerController_AddItemToQuickBars::QuickBarType' has a wrong offset!");
static_assert(offsetof(FortPlayerController_AddItemToQuickBars, SlotIndex) == 0x00000C, "Member 'FortPlayerController_AddItemToQuickBars::SlotIndex' has a wrong offset!");

// Function FortniteGame.FortPlayerController.Cheat
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerController_Cheat final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_Cheat) == 0x000008, "Wrong alignment on FortPlayerController_Cheat");
static_assert(sizeof(FortPlayerController_Cheat) == 0x000010, "Wrong size on FortPlayerController_Cheat");
static_assert(offsetof(FortPlayerController_Cheat, Msg) == 0x000000, "Member 'FortPlayerController_Cheat::Msg' has a wrong offset!");

// Function FortniteGame.FortPlayerController.CheatAll
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerController_CheatAll final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_CheatAll) == 0x000008, "Wrong alignment on FortPlayerController_CheatAll");
static_assert(sizeof(FortPlayerController_CheatAll) == 0x000010, "Wrong size on FortPlayerController_CheatAll");
static_assert(offsetof(FortPlayerController_CheatAll, Msg) == 0x000000, "Member 'FortPlayerController_CheatAll::Msg' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientAddHeroSpecialization
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_ClientAddHeroSpecialization final
{
public:
	const class UFortHeroSpecialization*          NewSpecialization;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ClientAddHeroSpecialization) == 0x000008, "Wrong alignment on FortPlayerController_ClientAddHeroSpecialization");
static_assert(sizeof(FortPlayerController_ClientAddHeroSpecialization) == 0x000008, "Wrong size on FortPlayerController_ClientAddHeroSpecialization");
static_assert(offsetof(FortPlayerController_ClientAddHeroSpecialization, NewSpecialization) == 0x000000, "Member 'FortPlayerController_ClientAddHeroSpecialization::NewSpecialization' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientAddScoreNumber
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerController_ClientAddScoreNumber final
{
public:
	int32                                         Score;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStatCategory                                 ScoreCategory;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize                    ScoreLocation;                                     // 0x0008(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bDisplayScoreOnPlayer;                             // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_ClientAddScoreNumber) == 0x000004, "Wrong alignment on FortPlayerController_ClientAddScoreNumber");
static_assert(sizeof(FortPlayerController_ClientAddScoreNumber) == 0x000018, "Wrong size on FortPlayerController_ClientAddScoreNumber");
static_assert(offsetof(FortPlayerController_ClientAddScoreNumber, Score) == 0x000000, "Member 'FortPlayerController_ClientAddScoreNumber::Score' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ClientAddScoreNumber, ScoreCategory) == 0x000004, "Member 'FortPlayerController_ClientAddScoreNumber::ScoreCategory' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ClientAddScoreNumber, ScoreLocation) == 0x000008, "Member 'FortPlayerController_ClientAddScoreNumber::ScoreLocation' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ClientAddScoreNumber, bDisplayScoreOnPlayer) == 0x000014, "Member 'FortPlayerController_ClientAddScoreNumber::bDisplayScoreOnPlayer' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientCreateOrJoinChatRoom
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerController_ClientCreateOrJoinChatRoom final
{
public:
	class FString                                 ChatRoomId;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ClientCreateOrJoinChatRoom) == 0x000008, "Wrong alignment on FortPlayerController_ClientCreateOrJoinChatRoom");
static_assert(sizeof(FortPlayerController_ClientCreateOrJoinChatRoom) == 0x000010, "Wrong size on FortPlayerController_ClientCreateOrJoinChatRoom");
static_assert(offsetof(FortPlayerController_ClientCreateOrJoinChatRoom, ChatRoomId) == 0x000000, "Member 'FortPlayerController_ClientCreateOrJoinChatRoom::ChatRoomId' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientDrawAttentionToUI
// 0x0030 (0x0030 - 0x0000)
struct FortPlayerController_ClientDrawAttentionToUI final
{
public:
	struct FGuid                                  MissionGuid;                                       // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ObjectiveHandle;                                   // 0x0010(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ClientDrawAttentionToUI) == 0x000008, "Wrong alignment on FortPlayerController_ClientDrawAttentionToUI");
static_assert(sizeof(FortPlayerController_ClientDrawAttentionToUI) == 0x000030, "Wrong size on FortPlayerController_ClientDrawAttentionToUI");
static_assert(offsetof(FortPlayerController_ClientDrawAttentionToUI, MissionGuid) == 0x000000, "Member 'FortPlayerController_ClientDrawAttentionToUI::MissionGuid' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ClientDrawAttentionToUI, ObjectiveHandle) == 0x000010, "Member 'FortPlayerController_ClientDrawAttentionToUI::ObjectiveHandle' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientExecuteInventoryItem
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerController_ClientExecuteInventoryItem final
{
public:
	struct FGuid                                  ItemGuid;                                          // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceExecute;                                     // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_ClientExecuteInventoryItem) == 0x000004, "Wrong alignment on FortPlayerController_ClientExecuteInventoryItem");
static_assert(sizeof(FortPlayerController_ClientExecuteInventoryItem) == 0x000018, "Wrong size on FortPlayerController_ClientExecuteInventoryItem");
static_assert(offsetof(FortPlayerController_ClientExecuteInventoryItem, ItemGuid) == 0x000000, "Member 'FortPlayerController_ClientExecuteInventoryItem::ItemGuid' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ClientExecuteInventoryItem, Delay) == 0x000010, "Member 'FortPlayerController_ClientExecuteInventoryItem::Delay' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ClientExecuteInventoryItem, bForceExecute) == 0x000014, "Member 'FortPlayerController_ClientExecuteInventoryItem::bForceExecute' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientGivePlayerLocalAccountItem
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerController_ClientGivePlayerLocalAccountItem final
{
public:
	class UFortAccountItemDefinition*             ItemDefinition;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_ClientGivePlayerLocalAccountItem) == 0x000008, "Wrong alignment on FortPlayerController_ClientGivePlayerLocalAccountItem");
static_assert(sizeof(FortPlayerController_ClientGivePlayerLocalAccountItem) == 0x000010, "Wrong size on FortPlayerController_ClientGivePlayerLocalAccountItem");
static_assert(offsetof(FortPlayerController_ClientGivePlayerLocalAccountItem, ItemDefinition) == 0x000000, "Member 'FortPlayerController_ClientGivePlayerLocalAccountItem::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ClientGivePlayerLocalAccountItem, Count) == 0x000008, "Member 'FortPlayerController_ClientGivePlayerLocalAccountItem::Count' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientJoinConsoleSession
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerController_ClientJoinConsoleSession final
{
public:
	class FString                                 ConsoleSession;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ClientJoinConsoleSession) == 0x000008, "Wrong alignment on FortPlayerController_ClientJoinConsoleSession");
static_assert(sizeof(FortPlayerController_ClientJoinConsoleSession) == 0x000010, "Wrong size on FortPlayerController_ClientJoinConsoleSession");
static_assert(offsetof(FortPlayerController_ClientJoinConsoleSession, ConsoleSession) == 0x000000, "Member 'FortPlayerController_ClientJoinConsoleSession::ConsoleSession' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientOpenChoiceUI
// 0x0030 (0x0030 - 0x0000)
struct FortPlayerController_ClientOpenChoiceUI final
{
public:
	struct FChoiceData                            ChoiceItems;                                       // 0x0000(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ClientOpenChoiceUI) == 0x000008, "Wrong alignment on FortPlayerController_ClientOpenChoiceUI");
static_assert(sizeof(FortPlayerController_ClientOpenChoiceUI) == 0x000030, "Wrong size on FortPlayerController_ClientOpenChoiceUI");
static_assert(offsetof(FortPlayerController_ClientOpenChoiceUI, ChoiceItems) == 0x000000, "Member 'FortPlayerController_ClientOpenChoiceUI::ChoiceItems' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientPingMinimap
// 0x001C (0x001C - 0x0000)
struct FortPlayerController_ClientPingMinimap final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PingColor;                                         // 0x000C(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ClientPingMinimap) == 0x000004, "Wrong alignment on FortPlayerController_ClientPingMinimap");
static_assert(sizeof(FortPlayerController_ClientPingMinimap) == 0x00001C, "Wrong size on FortPlayerController_ClientPingMinimap");
static_assert(offsetof(FortPlayerController_ClientPingMinimap, WorldLocation) == 0x000000, "Member 'FortPlayerController_ClientPingMinimap::WorldLocation' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ClientPingMinimap, PingColor) == 0x00000C, "Member 'FortPlayerController_ClientPingMinimap::PingColor' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientReadyCheckComplete
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerController_ClientReadyCheckComplete final
{
public:
	bool                                          bPassed;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ClientReadyCheckComplete) == 0x000001, "Wrong alignment on FortPlayerController_ClientReadyCheckComplete");
static_assert(sizeof(FortPlayerController_ClientReadyCheckComplete) == 0x000001, "Wrong size on FortPlayerController_ClientReadyCheckComplete");
static_assert(offsetof(FortPlayerController_ClientReadyCheckComplete, bPassed) == 0x000000, "Member 'FortPlayerController_ClientReadyCheckComplete::bPassed' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientReceivedAttributeSources
// 0x0038 (0x0038 - 0x0000)
struct FortPlayerController_ClientReceivedAttributeSources final
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAbilitySystemComponent*            AbilitySystemComponent;                            // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAttributeModifierInfo>         Sources;                                           // 0x0028(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ClientReceivedAttributeSources) == 0x000008, "Wrong alignment on FortPlayerController_ClientReceivedAttributeSources");
static_assert(sizeof(FortPlayerController_ClientReceivedAttributeSources) == 0x000038, "Wrong size on FortPlayerController_ClientReceivedAttributeSources");
static_assert(offsetof(FortPlayerController_ClientReceivedAttributeSources, Attribute) == 0x000000, "Member 'FortPlayerController_ClientReceivedAttributeSources::Attribute' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ClientReceivedAttributeSources, AbilitySystemComponent) == 0x000020, "Member 'FortPlayerController_ClientReceivedAttributeSources::AbilitySystemComponent' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ClientReceivedAttributeSources, Sources) == 0x000028, "Member 'FortPlayerController_ClientReceivedAttributeSources::Sources' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientReceivePresetTeamChat
// 0x0040 (0x0040 - 0x0000)
struct FortPlayerController_ClientReceivePresetTeamChat final
{
public:
	class FText                                   ChatText;                                          // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       SenderID;                                          // 0x0018(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ClientReceivePresetTeamChat) == 0x000008, "Wrong alignment on FortPlayerController_ClientReceivePresetTeamChat");
static_assert(sizeof(FortPlayerController_ClientReceivePresetTeamChat) == 0x000040, "Wrong size on FortPlayerController_ClientReceivePresetTeamChat");
static_assert(offsetof(FortPlayerController_ClientReceivePresetTeamChat, ChatText) == 0x000000, "Member 'FortPlayerController_ClientReceivePresetTeamChat::ChatText' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ClientReceivePresetTeamChat, SenderID) == 0x000018, "Member 'FortPlayerController_ClientReceivePresetTeamChat::SenderID' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientReportDamagedResourceBuilding
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerController_ClientReportDamagedResourceBuilding final
{
public:
	class ABuildingSMActor*                       BuildingSMActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortResourceType                             PotentialResourceType;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PotentialResourceCount;                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDestroyed;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bJustHitWeakspot;                                  // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_ClientReportDamagedResourceBuilding) == 0x000008, "Wrong alignment on FortPlayerController_ClientReportDamagedResourceBuilding");
static_assert(sizeof(FortPlayerController_ClientReportDamagedResourceBuilding) == 0x000018, "Wrong size on FortPlayerController_ClientReportDamagedResourceBuilding");
static_assert(offsetof(FortPlayerController_ClientReportDamagedResourceBuilding, BuildingSMActor) == 0x000000, "Member 'FortPlayerController_ClientReportDamagedResourceBuilding::BuildingSMActor' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ClientReportDamagedResourceBuilding, PotentialResourceType) == 0x000008, "Member 'FortPlayerController_ClientReportDamagedResourceBuilding::PotentialResourceType' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ClientReportDamagedResourceBuilding, PotentialResourceCount) == 0x00000C, "Member 'FortPlayerController_ClientReportDamagedResourceBuilding::PotentialResourceCount' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ClientReportDamagedResourceBuilding, bDestroyed) == 0x000010, "Member 'FortPlayerController_ClientReportDamagedResourceBuilding::bDestroyed' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ClientReportDamagedResourceBuilding, bJustHitWeakspot) == 0x000011, "Member 'FortPlayerController_ClientReportDamagedResourceBuilding::bJustHitWeakspot' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientRequestReadyCheck
// 0x0048 (0x0048 - 0x0000)
struct FortPlayerController_ClientRequestReadyCheck final
{
public:
	class FText                                   QueryText;                                         // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   YesText;                                           // 0x0018(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   NoText;                                            // 0x0030(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ClientRequestReadyCheck) == 0x000008, "Wrong alignment on FortPlayerController_ClientRequestReadyCheck");
static_assert(sizeof(FortPlayerController_ClientRequestReadyCheck) == 0x000048, "Wrong size on FortPlayerController_ClientRequestReadyCheck");
static_assert(offsetof(FortPlayerController_ClientRequestReadyCheck, QueryText) == 0x000000, "Member 'FortPlayerController_ClientRequestReadyCheck::QueryText' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ClientRequestReadyCheck, YesText) == 0x000018, "Member 'FortPlayerController_ClientRequestReadyCheck::YesText' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ClientRequestReadyCheck, NoText) == 0x000030, "Member 'FortPlayerController_ClientRequestReadyCheck::NoText' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientSendConfirmationMessage
// 0x0020 (0x0020 - 0x0000)
struct FortPlayerController_ClientSendConfirmationMessage final
{
public:
	class FText                                   ConfirmationMessage;                               // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bClientQuitAfterMessage;                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_ClientSendConfirmationMessage) == 0x000008, "Wrong alignment on FortPlayerController_ClientSendConfirmationMessage");
static_assert(sizeof(FortPlayerController_ClientSendConfirmationMessage) == 0x000020, "Wrong size on FortPlayerController_ClientSendConfirmationMessage");
static_assert(offsetof(FortPlayerController_ClientSendConfirmationMessage, ConfirmationMessage) == 0x000000, "Member 'FortPlayerController_ClientSendConfirmationMessage::ConfirmationMessage' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ClientSendConfirmationMessage, bClientQuitAfterMessage) == 0x000018, "Member 'FortPlayerController_ClientSendConfirmationMessage::bClientQuitAfterMessage' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientSendMessage
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerController_ClientSendMessage final
{
public:
	class FText                                   MESSAGE;                                           // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ClientSendMessage) == 0x000008, "Wrong alignment on FortPlayerController_ClientSendMessage");
static_assert(sizeof(FortPlayerController_ClientSendMessage) == 0x000018, "Wrong size on FortPlayerController_ClientSendMessage");
static_assert(offsetof(FortPlayerController_ClientSendMessage, MESSAGE) == 0x000000, "Member 'FortPlayerController_ClientSendMessage::MESSAGE' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientSetActionMappingEnabled
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerController_ClientSetActionMappingEnabled final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_ClientSetActionMappingEnabled) == 0x000004, "Wrong alignment on FortPlayerController_ClientSetActionMappingEnabled");
static_assert(sizeof(FortPlayerController_ClientSetActionMappingEnabled) == 0x000010, "Wrong size on FortPlayerController_ClientSetActionMappingEnabled");
static_assert(offsetof(FortPlayerController_ClientSetActionMappingEnabled, ActionName) == 0x000000, "Member 'FortPlayerController_ClientSetActionMappingEnabled::ActionName' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ClientSetActionMappingEnabled, bEnabled) == 0x000008, "Member 'FortPlayerController_ClientSetActionMappingEnabled::bEnabled' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientSetInviteFlags
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerController_ClientSetInviteFlags final
{
public:
	struct FJoinabilitySettings                   Settings;                                          // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ClientSetInviteFlags) == 0x000008, "Wrong alignment on FortPlayerController_ClientSetInviteFlags");
static_assert(sizeof(FortPlayerController_ClientSetInviteFlags) == 0x000018, "Wrong size on FortPlayerController_ClientSetInviteFlags");
static_assert(offsetof(FortPlayerController_ClientSetInviteFlags, Settings) == 0x000000, "Member 'FortPlayerController_ClientSetInviteFlags::Settings' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientSetSpectatorCamera
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerController_ClientSetSpectatorCamera final
{
public:
	struct FVector                                CameraLocation;                                    // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CameraRotation;                                    // 0x000C(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ClientSetSpectatorCamera) == 0x000004, "Wrong alignment on FortPlayerController_ClientSetSpectatorCamera");
static_assert(sizeof(FortPlayerController_ClientSetSpectatorCamera) == 0x000018, "Wrong size on FortPlayerController_ClientSetSpectatorCamera");
static_assert(offsetof(FortPlayerController_ClientSetSpectatorCamera, CameraLocation) == 0x000000, "Member 'FortPlayerController_ClientSetSpectatorCamera::CameraLocation' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ClientSetSpectatorCamera, CameraRotation) == 0x00000C, "Member 'FortPlayerController_ClientSetSpectatorCamera::CameraRotation' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientStayWithParty
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerController_ClientStayWithParty final
{
public:
	bool                                          bStayWithParty;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ClientStayWithParty) == 0x000001, "Wrong alignment on FortPlayerController_ClientStayWithParty");
static_assert(sizeof(FortPlayerController_ClientStayWithParty) == 0x000001, "Wrong size on FortPlayerController_ClientStayWithParty");
static_assert(offsetof(FortPlayerController_ClientStayWithParty, bStayWithParty) == 0x000000, "Member 'FortPlayerController_ClientStayWithParty::bStayWithParty' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientStopUIFeedbackEvent
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_ClientStopUIFeedbackEvent final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ClientStopUIFeedbackEvent) == 0x000004, "Wrong alignment on FortPlayerController_ClientStopUIFeedbackEvent");
static_assert(sizeof(FortPlayerController_ClientStopUIFeedbackEvent) == 0x000008, "Wrong size on FortPlayerController_ClientStopUIFeedbackEvent");
static_assert(offsetof(FortPlayerController_ClientStopUIFeedbackEvent, EventName) == 0x000000, "Member 'FortPlayerController_ClientStopUIFeedbackEvent::EventName' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientTriggerUIFeedbackEvent
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_ClientTriggerUIFeedbackEvent final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ClientTriggerUIFeedbackEvent) == 0x000004, "Wrong alignment on FortPlayerController_ClientTriggerUIFeedbackEvent");
static_assert(sizeof(FortPlayerController_ClientTriggerUIFeedbackEvent) == 0x000008, "Wrong size on FortPlayerController_ClientTriggerUIFeedbackEvent");
static_assert(offsetof(FortPlayerController_ClientTriggerUIFeedbackEvent, EventName) == 0x000000, "Member 'FortPlayerController_ClientTriggerUIFeedbackEvent::EventName' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientUpdateRichPresence
// 0x0002 (0x0002 - 0x0000)
struct FortPlayerController_ClientUpdateRichPresence final
{
public:
	ERichPresenceStateChange                      RichPresenceChange;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImportant;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ClientUpdateRichPresence) == 0x000001, "Wrong alignment on FortPlayerController_ClientUpdateRichPresence");
static_assert(sizeof(FortPlayerController_ClientUpdateRichPresence) == 0x000002, "Wrong size on FortPlayerController_ClientUpdateRichPresence");
static_assert(offsetof(FortPlayerController_ClientUpdateRichPresence, RichPresenceChange) == 0x000000, "Member 'FortPlayerController_ClientUpdateRichPresence::RichPresenceChange' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ClientUpdateRichPresence, bImportant) == 0x000001, "Member 'FortPlayerController_ClientUpdateRichPresence::bImportant' has a wrong offset!");

// Function FortniteGame.FortPlayerController.DeployDefender
// 0x0028 (0x0028 - 0x0000)
struct FortPlayerController_DeployDefender final
{
public:
	class ABuildingTrapDefender*                  DefenderTrap;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortDefenderItem*                DefenderItem;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DefenderSquadId;                                   // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortItem*                        WeaponItem;                                        // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmmoQuantity;                                      // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_DeployDefender) == 0x000008, "Wrong alignment on FortPlayerController_DeployDefender");
static_assert(sizeof(FortPlayerController_DeployDefender) == 0x000028, "Wrong size on FortPlayerController_DeployDefender");
static_assert(offsetof(FortPlayerController_DeployDefender, DefenderTrap) == 0x000000, "Member 'FortPlayerController_DeployDefender::DefenderTrap' has a wrong offset!");
static_assert(offsetof(FortPlayerController_DeployDefender, DefenderItem) == 0x000008, "Member 'FortPlayerController_DeployDefender::DefenderItem' has a wrong offset!");
static_assert(offsetof(FortPlayerController_DeployDefender, DefenderSquadId) == 0x000010, "Member 'FortPlayerController_DeployDefender::DefenderSquadId' has a wrong offset!");
static_assert(offsetof(FortPlayerController_DeployDefender, WeaponItem) == 0x000018, "Member 'FortPlayerController_DeployDefender::WeaponItem' has a wrong offset!");
static_assert(offsetof(FortPlayerController_DeployDefender, AmmoQuantity) == 0x000020, "Member 'FortPlayerController_DeployDefender::AmmoQuantity' has a wrong offset!");

// Function FortniteGame.FortPlayerController.Emote
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_Emote final
{
public:
	class FName                                   AssetName;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_Emote) == 0x000004, "Wrong alignment on FortPlayerController_Emote");
static_assert(sizeof(FortPlayerController_Emote) == 0x000008, "Wrong size on FortPlayerController_Emote");
static_assert(offsetof(FortPlayerController_Emote, AssetName) == 0x000000, "Member 'FortPlayerController_Emote::AssetName' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ForceUpdateQuickbar
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerController_ForceUpdateQuickbar final
{
public:
	EFortQuickBars                                QuickbarToRefresh;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ForceUpdateQuickbar) == 0x000001, "Wrong alignment on FortPlayerController_ForceUpdateQuickbar");
static_assert(sizeof(FortPlayerController_ForceUpdateQuickbar) == 0x000001, "Wrong size on FortPlayerController_ForceUpdateQuickbar");
static_assert(offsetof(FortPlayerController_ForceUpdateQuickbar, QuickbarToRefresh) == 0x000000, "Member 'FortPlayerController_ForceUpdateQuickbar::QuickbarToRefresh' has a wrong offset!");

// Function FortniteGame.FortPlayerController.FortClientPlaySound
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerController_FortClientPlaySound final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_FortClientPlaySound) == 0x000008, "Wrong alignment on FortPlayerController_FortClientPlaySound");
static_assert(sizeof(FortPlayerController_FortClientPlaySound) == 0x000010, "Wrong size on FortPlayerController_FortClientPlaySound");
static_assert(offsetof(FortPlayerController_FortClientPlaySound, Sound) == 0x000000, "Member 'FortPlayerController_FortClientPlaySound::Sound' has a wrong offset!");
static_assert(offsetof(FortPlayerController_FortClientPlaySound, VolumeMultiplier) == 0x000008, "Member 'FortPlayerController_FortClientPlaySound::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(FortPlayerController_FortClientPlaySound, PitchMultiplier) == 0x00000C, "Member 'FortPlayerController_FortClientPlaySound::PitchMultiplier' has a wrong offset!");

// Function FortniteGame.FortPlayerController.FortClientPlaySoundAtLocation
// 0x0020 (0x0020 - 0x0000)
struct FortPlayerController_FortClientPlaySoundAtLocation final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_FortClientPlaySoundAtLocation) == 0x000008, "Wrong alignment on FortPlayerController_FortClientPlaySoundAtLocation");
static_assert(sizeof(FortPlayerController_FortClientPlaySoundAtLocation) == 0x000020, "Wrong size on FortPlayerController_FortClientPlaySoundAtLocation");
static_assert(offsetof(FortPlayerController_FortClientPlaySoundAtLocation, Sound) == 0x000000, "Member 'FortPlayerController_FortClientPlaySoundAtLocation::Sound' has a wrong offset!");
static_assert(offsetof(FortPlayerController_FortClientPlaySoundAtLocation, Location) == 0x000008, "Member 'FortPlayerController_FortClientPlaySoundAtLocation::Location' has a wrong offset!");
static_assert(offsetof(FortPlayerController_FortClientPlaySoundAtLocation, VolumeMultiplier) == 0x000014, "Member 'FortPlayerController_FortClientPlaySoundAtLocation::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(FortPlayerController_FortClientPlaySoundAtLocation, PitchMultiplier) == 0x000018, "Member 'FortPlayerController_FortClientPlaySoundAtLocation::PitchMultiplier' has a wrong offset!");

// Function FortniteGame.FortPlayerController.GetAIDirectorDataManager
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_GetAIDirectorDataManager final
{
public:
	class AFortAIDirectorDataManager*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_GetAIDirectorDataManager) == 0x000008, "Wrong alignment on FortPlayerController_GetAIDirectorDataManager");
static_assert(sizeof(FortPlayerController_GetAIDirectorDataManager) == 0x000008, "Wrong size on FortPlayerController_GetAIDirectorDataManager");
static_assert(offsetof(FortPlayerController_GetAIDirectorDataManager, ReturnValue) == 0x000000, "Member 'FortPlayerController_GetAIDirectorDataManager::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerController.GetAtNameHomeBaseScreen
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerController_GetAtNameHomeBaseScreen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_GetAtNameHomeBaseScreen) == 0x000001, "Wrong alignment on FortPlayerController_GetAtNameHomeBaseScreen");
static_assert(sizeof(FortPlayerController_GetAtNameHomeBaseScreen) == 0x000001, "Wrong size on FortPlayerController_GetAtNameHomeBaseScreen");
static_assert(offsetof(FortPlayerController_GetAtNameHomeBaseScreen, ReturnValue) == 0x000000, "Member 'FortPlayerController_GetAtNameHomeBaseScreen::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerController.GivePlayerAmmo
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerController_GivePlayerAmmo final
{
public:
	int32                                         AmmoCount;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_GivePlayerAmmo) == 0x000004, "Wrong alignment on FortPlayerController_GivePlayerAmmo");
static_assert(sizeof(FortPlayerController_GivePlayerAmmo) == 0x000004, "Wrong size on FortPlayerController_GivePlayerAmmo");
static_assert(offsetof(FortPlayerController_GivePlayerAmmo, AmmoCount) == 0x000000, "Member 'FortPlayerController_GivePlayerAmmo::AmmoCount' has a wrong offset!");

// Function FortniteGame.FortPlayerController.LocalOnBlueprintEdit
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_LocalOnBlueprintEdit final
{
public:
	class ABuildingSMActor*                       EditedActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_LocalOnBlueprintEdit) == 0x000008, "Wrong alignment on FortPlayerController_LocalOnBlueprintEdit");
static_assert(sizeof(FortPlayerController_LocalOnBlueprintEdit) == 0x000008, "Wrong size on FortPlayerController_LocalOnBlueprintEdit");
static_assert(offsetof(FortPlayerController_LocalOnBlueprintEdit, EditedActor) == 0x000000, "Member 'FortPlayerController_LocalOnBlueprintEdit::EditedActor' has a wrong offset!");

// Function FortniteGame.FortPlayerController.LocalOnUiChoiceCompleted
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_LocalOnUiChoiceCompleted final
{
public:
	int32                                         ChosenItem;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MenuIdentifier;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_LocalOnUiChoiceCompleted) == 0x000004, "Wrong alignment on FortPlayerController_LocalOnUiChoiceCompleted");
static_assert(sizeof(FortPlayerController_LocalOnUiChoiceCompleted) == 0x000008, "Wrong size on FortPlayerController_LocalOnUiChoiceCompleted");
static_assert(offsetof(FortPlayerController_LocalOnUiChoiceCompleted, ChosenItem) == 0x000000, "Member 'FortPlayerController_LocalOnUiChoiceCompleted::ChosenItem' has a wrong offset!");
static_assert(offsetof(FortPlayerController_LocalOnUiChoiceCompleted, MenuIdentifier) == 0x000004, "Member 'FortPlayerController_LocalOnUiChoiceCompleted::MenuIdentifier' has a wrong offset!");

// Function FortniteGame.FortPlayerController.LocalPlayForceFeedback
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerController_LocalPlayForceFeedback final
{
public:
	class UForceFeedbackEffect*                   ForceFeedbackEffect;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Tag;                                               // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_LocalPlayForceFeedback) == 0x000008, "Wrong alignment on FortPlayerController_LocalPlayForceFeedback");
static_assert(sizeof(FortPlayerController_LocalPlayForceFeedback) == 0x000018, "Wrong size on FortPlayerController_LocalPlayForceFeedback");
static_assert(offsetof(FortPlayerController_LocalPlayForceFeedback, ForceFeedbackEffect) == 0x000000, "Member 'FortPlayerController_LocalPlayForceFeedback::ForceFeedbackEffect' has a wrong offset!");
static_assert(offsetof(FortPlayerController_LocalPlayForceFeedback, bLooping) == 0x000008, "Member 'FortPlayerController_LocalPlayForceFeedback::bLooping' has a wrong offset!");
static_assert(offsetof(FortPlayerController_LocalPlayForceFeedback, Tag) == 0x000010, "Member 'FortPlayerController_LocalPlayForceFeedback::Tag' has a wrong offset!");

// Function FortniteGame.FortPlayerController.LocalStopForceFeedback
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerController_LocalStopForceFeedback final
{
public:
	class UForceFeedbackEffect*                   ForceFeedbackEffect;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_LocalStopForceFeedback) == 0x000008, "Wrong alignment on FortPlayerController_LocalStopForceFeedback");
static_assert(sizeof(FortPlayerController_LocalStopForceFeedback) == 0x000010, "Wrong size on FortPlayerController_LocalStopForceFeedback");
static_assert(offsetof(FortPlayerController_LocalStopForceFeedback, ForceFeedbackEffect) == 0x000000, "Member 'FortPlayerController_LocalStopForceFeedback::ForceFeedbackEffect' has a wrong offset!");
static_assert(offsetof(FortPlayerController_LocalStopForceFeedback, Tag) == 0x000008, "Member 'FortPlayerController_LocalStopForceFeedback::Tag' has a wrong offset!");

// Function FortniteGame.FortPlayerController.OnDisplayHitMarker
// 0x0028 (0x0028 - 0x0000)
struct FortPlayerController_OnDisplayHitMarker final
{
public:
	struct FGameplayTagContainer                  HitTags;                                           // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EFortDamageZone                               Zone;                                              // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_OnDisplayHitMarker) == 0x000008, "Wrong alignment on FortPlayerController_OnDisplayHitMarker");
static_assert(sizeof(FortPlayerController_OnDisplayHitMarker) == 0x000028, "Wrong size on FortPlayerController_OnDisplayHitMarker");
static_assert(offsetof(FortPlayerController_OnDisplayHitMarker, HitTags) == 0x000000, "Member 'FortPlayerController_OnDisplayHitMarker::HitTags' has a wrong offset!");
static_assert(offsetof(FortPlayerController_OnDisplayHitMarker, Zone) == 0x000020, "Member 'FortPlayerController_OnDisplayHitMarker::Zone' has a wrong offset!");

// Function FortniteGame.FortPlayerController.OpenChoiceUI
// 0x0030 (0x0030 - 0x0000)
struct FortPlayerController_OpenChoiceUI final
{
public:
	struct FChoiceData                            ChoiceData;                                        // 0x0000(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_OpenChoiceUI) == 0x000008, "Wrong alignment on FortPlayerController_OpenChoiceUI");
static_assert(sizeof(FortPlayerController_OpenChoiceUI) == 0x000030, "Wrong size on FortPlayerController_OpenChoiceUI");
static_assert(offsetof(FortPlayerController_OpenChoiceUI, ChoiceData) == 0x000000, "Member 'FortPlayerController_OpenChoiceUI::ChoiceData' has a wrong offset!");

// Function FortniteGame.FortPlayerController.PlayEmoteItem
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_PlayEmoteItem final
{
public:
	const class UFortMontageItemDefinitionBase*   EmoteAsset;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_PlayEmoteItem) == 0x000008, "Wrong alignment on FortPlayerController_PlayEmoteItem");
static_assert(sizeof(FortPlayerController_PlayEmoteItem) == 0x000008, "Wrong size on FortPlayerController_PlayEmoteItem");
static_assert(offsetof(FortPlayerController_PlayEmoteItem, EmoteAsset) == 0x000000, "Member 'FortPlayerController_PlayEmoteItem::EmoteAsset' has a wrong offset!");

// Function FortniteGame.FortPlayerController.PlaySpatialSound
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerController_PlaySpatialSound final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_PlaySpatialSound) == 0x000008, "Wrong alignment on FortPlayerController_PlaySpatialSound");
static_assert(sizeof(FortPlayerController_PlaySpatialSound) == 0x000018, "Wrong size on FortPlayerController_PlaySpatialSound");
static_assert(offsetof(FortPlayerController_PlaySpatialSound, Sound) == 0x000000, "Member 'FortPlayerController_PlaySpatialSound::Sound' has a wrong offset!");
static_assert(offsetof(FortPlayerController_PlaySpatialSound, Location) == 0x000008, "Member 'FortPlayerController_PlaySpatialSound::Location' has a wrong offset!");

// Function FortniteGame.FortPlayerController.PostHeroStatCollectionBookProgressMade
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerController_PostHeroStatCollectionBookProgressMade final
{
public:
	int32                                         LevelReached;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_PostHeroStatCollectionBookProgressMade) == 0x000004, "Wrong alignment on FortPlayerController_PostHeroStatCollectionBookProgressMade");
static_assert(sizeof(FortPlayerController_PostHeroStatCollectionBookProgressMade) == 0x000004, "Wrong size on FortPlayerController_PostHeroStatCollectionBookProgressMade");
static_assert(offsetof(FortPlayerController_PostHeroStatCollectionBookProgressMade, LevelReached) == 0x000000, "Member 'FortPlayerController_PostHeroStatCollectionBookProgressMade::LevelReached' has a wrong offset!");

// Function FortniteGame.FortPlayerController.PostHeroStatMissionCompleted
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerController_PostHeroStatMissionCompleted final
{
public:
	int32                                         DifficultyRating;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_PostHeroStatMissionCompleted) == 0x000004, "Wrong alignment on FortPlayerController_PostHeroStatMissionCompleted");
static_assert(sizeof(FortPlayerController_PostHeroStatMissionCompleted) == 0x000004, "Wrong size on FortPlayerController_PostHeroStatMissionCompleted");
static_assert(offsetof(FortPlayerController_PostHeroStatMissionCompleted, DifficultyRating) == 0x000000, "Member 'FortPlayerController_PostHeroStatMissionCompleted::DifficultyRating' has a wrong offset!");

// Function FortniteGame.FortPlayerController.PostHeroStatSkillPointsEarned
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerController_PostHeroStatSkillPointsEarned final
{
public:
	int32                                         NumSkillPoints;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_PostHeroStatSkillPointsEarned) == 0x000004, "Wrong alignment on FortPlayerController_PostHeroStatSkillPointsEarned");
static_assert(sizeof(FortPlayerController_PostHeroStatSkillPointsEarned) == 0x000004, "Wrong size on FortPlayerController_PostHeroStatSkillPointsEarned");
static_assert(offsetof(FortPlayerController_PostHeroStatSkillPointsEarned, NumSkillPoints) == 0x000000, "Member 'FortPlayerController_PostHeroStatSkillPointsEarned::NumSkillPoints' has a wrong offset!");

// Function FortniteGame.FortPlayerController.RemoveItemFromQuickBars
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_RemoveItemFromQuickBars final
{
public:
	class UFortItemDefinition*                    ItemDefinition;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_RemoveItemFromQuickBars) == 0x000008, "Wrong alignment on FortPlayerController_RemoveItemFromQuickBars");
static_assert(sizeof(FortPlayerController_RemoveItemFromQuickBars) == 0x000008, "Wrong size on FortPlayerController_RemoveItemFromQuickBars");
static_assert(offsetof(FortPlayerController_RemoveItemFromQuickBars, ItemDefinition) == 0x000000, "Member 'FortPlayerController_RemoveItemFromQuickBars::ItemDefinition' has a wrong offset!");

// Function FortniteGame.FortPlayerController.SendMessage
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerController_SendMessage final
{
public:
	class FText                                   MESSAGE;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_SendMessage) == 0x000008, "Wrong alignment on FortPlayerController_SendMessage");
static_assert(sizeof(FortPlayerController_SendMessage) == 0x000018, "Wrong size on FortPlayerController_SendMessage");
static_assert(offsetof(FortPlayerController_SendMessage, MESSAGE) == 0x000000, "Member 'FortPlayerController_SendMessage::MESSAGE' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerAnnouncementStoppedOnClient
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerController_ServerAnnouncementStoppedOnClient final
{
public:
	struct FGuid                                  AnnouncementId;                                    // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerAnnouncementStoppedOnClient) == 0x000004, "Wrong alignment on FortPlayerController_ServerAnnouncementStoppedOnClient");
static_assert(sizeof(FortPlayerController_ServerAnnouncementStoppedOnClient) == 0x000010, "Wrong size on FortPlayerController_ServerAnnouncementStoppedOnClient");
static_assert(offsetof(FortPlayerController_ServerAnnouncementStoppedOnClient, AnnouncementId) == 0x000000, "Member 'FortPlayerController_ServerAnnouncementStoppedOnClient::AnnouncementId' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerAttemptInteract
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerController_ServerAttemptInteract final
{
public:
	class AActor*                                 ReceivingActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    InteractComponent;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETInteractionType                             InteractType;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_ServerAttemptInteract) == 0x000008, "Wrong alignment on FortPlayerController_ServerAttemptInteract");
static_assert(sizeof(FortPlayerController_ServerAttemptInteract) == 0x000018, "Wrong size on FortPlayerController_ServerAttemptInteract");
static_assert(offsetof(FortPlayerController_ServerAttemptInteract, ReceivingActor) == 0x000000, "Member 'FortPlayerController_ServerAttemptInteract::ReceivingActor' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerAttemptInteract, InteractComponent) == 0x000008, "Member 'FortPlayerController_ServerAttemptInteract::InteractComponent' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerAttemptInteract, InteractType) == 0x000010, "Member 'FortPlayerController_ServerAttemptInteract::InteractType' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerAttemptPinSchematic
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerController_ServerAttemptPinSchematic final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSave;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_ServerAttemptPinSchematic) == 0x000008, "Wrong alignment on FortPlayerController_ServerAttemptPinSchematic");
static_assert(sizeof(FortPlayerController_ServerAttemptPinSchematic) == 0x000018, "Wrong size on FortPlayerController_ServerAttemptPinSchematic");
static_assert(offsetof(FortPlayerController_ServerAttemptPinSchematic, ItemId) == 0x000000, "Member 'FortPlayerController_ServerAttemptPinSchematic::ItemId' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerAttemptPinSchematic, bSave) == 0x000010, "Member 'FortPlayerController_ServerAttemptPinSchematic::bSave' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerAttemptUnpinSchematic
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerController_ServerAttemptUnpinSchematic final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSave;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_ServerAttemptUnpinSchematic) == 0x000008, "Wrong alignment on FortPlayerController_ServerAttemptUnpinSchematic");
static_assert(sizeof(FortPlayerController_ServerAttemptUnpinSchematic) == 0x000018, "Wrong size on FortPlayerController_ServerAttemptUnpinSchematic");
static_assert(offsetof(FortPlayerController_ServerAttemptUnpinSchematic, ItemId) == 0x000000, "Member 'FortPlayerController_ServerAttemptUnpinSchematic::ItemId' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerAttemptUnpinSchematic, bSave) == 0x000010, "Member 'FortPlayerController_ServerAttemptUnpinSchematic::bSave' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerBeginEditingBuildingActor
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_ServerBeginEditingBuildingActor final
{
public:
	class ABuildingSMActor*                       BuildingActorToEdit;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerBeginEditingBuildingActor) == 0x000008, "Wrong alignment on FortPlayerController_ServerBeginEditingBuildingActor");
static_assert(sizeof(FortPlayerController_ServerBeginEditingBuildingActor) == 0x000008, "Wrong size on FortPlayerController_ServerBeginEditingBuildingActor");
static_assert(offsetof(FortPlayerController_ServerBeginEditingBuildingActor, BuildingActorToEdit) == 0x000000, "Member 'FortPlayerController_ServerBeginEditingBuildingActor::BuildingActorToEdit' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerBroadcastUIFeedbackEvent
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_ServerBroadcastUIFeedbackEvent final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerBroadcastUIFeedbackEvent) == 0x000004, "Wrong alignment on FortPlayerController_ServerBroadcastUIFeedbackEvent");
static_assert(sizeof(FortPlayerController_ServerBroadcastUIFeedbackEvent) == 0x000008, "Wrong size on FortPlayerController_ServerBroadcastUIFeedbackEvent");
static_assert(offsetof(FortPlayerController_ServerBroadcastUIFeedbackEvent, EventName) == 0x000000, "Member 'FortPlayerController_ServerBroadcastUIFeedbackEvent::EventName' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerCheat
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerController_ServerCheat final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerCheat) == 0x000008, "Wrong alignment on FortPlayerController_ServerCheat");
static_assert(sizeof(FortPlayerController_ServerCheat) == 0x000010, "Wrong size on FortPlayerController_ServerCheat");
static_assert(offsetof(FortPlayerController_ServerCheat, Msg) == 0x000000, "Member 'FortPlayerController_ServerCheat::Msg' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerCheatAll
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerController_ServerCheatAll final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerCheatAll) == 0x000008, "Wrong alignment on FortPlayerController_ServerCheatAll");
static_assert(sizeof(FortPlayerController_ServerCheatAll) == 0x000010, "Wrong size on FortPlayerController_ServerCheatAll");
static_assert(offsetof(FortPlayerController_ServerCheatAll, Msg) == 0x000000, "Member 'FortPlayerController_ServerCheatAll::Msg' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerClientPawnLoaded
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerController_ServerClientPawnLoaded final
{
public:
	bool                                          bIsPawnLoaded;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerClientPawnLoaded) == 0x000001, "Wrong alignment on FortPlayerController_ServerClientPawnLoaded");
static_assert(sizeof(FortPlayerController_ServerClientPawnLoaded) == 0x000001, "Wrong size on FortPlayerController_ServerClientPawnLoaded");
static_assert(offsetof(FortPlayerController_ServerClientPawnLoaded, bIsPawnLoaded) == 0x000000, "Member 'FortPlayerController_ServerClientPawnLoaded::bIsPawnLoaded' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerCraftSchematic
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerController_ServerCraftSchematic final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PostCraftSlot;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsQuickCrafted;                                   // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_ServerCraftSchematic) == 0x000008, "Wrong alignment on FortPlayerController_ServerCraftSchematic");
static_assert(sizeof(FortPlayerController_ServerCraftSchematic) == 0x000018, "Wrong size on FortPlayerController_ServerCraftSchematic");
static_assert(offsetof(FortPlayerController_ServerCraftSchematic, ItemId) == 0x000000, "Member 'FortPlayerController_ServerCraftSchematic::ItemId' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerCraftSchematic, PostCraftSlot) == 0x000010, "Member 'FortPlayerController_ServerCraftSchematic::PostCraftSlot' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerCraftSchematic, bIsQuickCrafted) == 0x000014, "Member 'FortPlayerController_ServerCraftSchematic::bIsQuickCrafted' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerCreateBuildingActor
// 0x0030 (0x0030 - 0x0000)
struct FortPlayerController_ServerCreateBuildingActor final
{
public:
	struct FBuildingClassData                     BuildingClassData;                                 // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  BuildLoc;                                          // 0x0010(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               BuildRot;                                          // 0x001C(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bMirrored;                                         // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_ServerCreateBuildingActor) == 0x000008, "Wrong alignment on FortPlayerController_ServerCreateBuildingActor");
static_assert(sizeof(FortPlayerController_ServerCreateBuildingActor) == 0x000030, "Wrong size on FortPlayerController_ServerCreateBuildingActor");
static_assert(offsetof(FortPlayerController_ServerCreateBuildingActor, BuildingClassData) == 0x000000, "Member 'FortPlayerController_ServerCreateBuildingActor::BuildingClassData' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerCreateBuildingActor, BuildLoc) == 0x000010, "Member 'FortPlayerController_ServerCreateBuildingActor::BuildLoc' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerCreateBuildingActor, BuildRot) == 0x00001C, "Member 'FortPlayerController_ServerCreateBuildingActor::BuildRot' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerCreateBuildingActor, bMirrored) == 0x000028, "Member 'FortPlayerController_ServerCreateBuildingActor::bMirrored' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerDeployDefender
// 0x0038 (0x0038 - 0x0000)
struct FortPlayerController_ServerDeployDefender final
{
public:
	class ABuildingTrapDefender*                  DefenderTrap;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SelectedItemInstanceId;                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DefenderSquadId;                                   // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  WeaponToGiveGuid;                                  // 0x0020(0x0010)(ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmmoQuantity;                                      // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_ServerDeployDefender) == 0x000008, "Wrong alignment on FortPlayerController_ServerDeployDefender");
static_assert(sizeof(FortPlayerController_ServerDeployDefender) == 0x000038, "Wrong size on FortPlayerController_ServerDeployDefender");
static_assert(offsetof(FortPlayerController_ServerDeployDefender, DefenderTrap) == 0x000000, "Member 'FortPlayerController_ServerDeployDefender::DefenderTrap' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerDeployDefender, SelectedItemInstanceId) == 0x000008, "Member 'FortPlayerController_ServerDeployDefender::SelectedItemInstanceId' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerDeployDefender, DefenderSquadId) == 0x000018, "Member 'FortPlayerController_ServerDeployDefender::DefenderSquadId' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerDeployDefender, WeaponToGiveGuid) == 0x000020, "Member 'FortPlayerController_ServerDeployDefender::WeaponToGiveGuid' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerDeployDefender, AmmoQuantity) == 0x000030, "Member 'FortPlayerController_ServerDeployDefender::AmmoQuantity' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerDisassembleInventoryItems
// 0x0020 (0x0020 - 0x0000)
struct FortPlayerController_ServerDisassembleInventoryItems final
{
public:
	TArray<struct FGuid>                          ItemGuids;                                         // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 ItemCounts;                                        // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerDisassembleInventoryItems) == 0x000008, "Wrong alignment on FortPlayerController_ServerDisassembleInventoryItems");
static_assert(sizeof(FortPlayerController_ServerDisassembleInventoryItems) == 0x000020, "Wrong size on FortPlayerController_ServerDisassembleInventoryItems");
static_assert(offsetof(FortPlayerController_ServerDisassembleInventoryItems, ItemGuids) == 0x000000, "Member 'FortPlayerController_ServerDisassembleInventoryItems::ItemGuids' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerDisassembleInventoryItems, ItemCounts) == 0x000010, "Member 'FortPlayerController_ServerDisassembleInventoryItems::ItemCounts' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerEditBuildingActor
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerController_ServerEditBuildingActor final
{
public:
	class ABuildingSMActor*                       BuildingActorToEdit;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ABuildingSMActor>           NewBuildingClass;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RotationIterations;                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMirrored;                                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_ServerEditBuildingActor) == 0x000008, "Wrong alignment on FortPlayerController_ServerEditBuildingActor");
static_assert(sizeof(FortPlayerController_ServerEditBuildingActor) == 0x000018, "Wrong size on FortPlayerController_ServerEditBuildingActor");
static_assert(offsetof(FortPlayerController_ServerEditBuildingActor, BuildingActorToEdit) == 0x000000, "Member 'FortPlayerController_ServerEditBuildingActor::BuildingActorToEdit' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerEditBuildingActor, NewBuildingClass) == 0x000008, "Member 'FortPlayerController_ServerEditBuildingActor::NewBuildingClass' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerEditBuildingActor, RotationIterations) == 0x000010, "Member 'FortPlayerController_ServerEditBuildingActor::RotationIterations' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerEditBuildingActor, bMirrored) == 0x000014, "Member 'FortPlayerController_ServerEditBuildingActor::bMirrored' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerEmote
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_ServerEmote final
{
public:
	class FName                                   AssetName;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerEmote) == 0x000004, "Wrong alignment on FortPlayerController_ServerEmote");
static_assert(sizeof(FortPlayerController_ServerEmote) == 0x000008, "Wrong size on FortPlayerController_ServerEmote");
static_assert(offsetof(FortPlayerController_ServerEmote, AssetName) == 0x000000, "Member 'FortPlayerController_ServerEmote::AssetName' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerEndEditingBuildingActor
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_ServerEndEditingBuildingActor final
{
public:
	class ABuildingSMActor*                       BuildingActorToStopEditing;                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerEndEditingBuildingActor) == 0x000008, "Wrong alignment on FortPlayerController_ServerEndEditingBuildingActor");
static_assert(sizeof(FortPlayerController_ServerEndEditingBuildingActor) == 0x000008, "Wrong size on FortPlayerController_ServerEndEditingBuildingActor");
static_assert(offsetof(FortPlayerController_ServerEndEditingBuildingActor, BuildingActorToStopEditing) == 0x000000, "Member 'FortPlayerController_ServerEndEditingBuildingActor::BuildingActorToStopEditing' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerExecuteInventoryItem
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerController_ServerExecuteInventoryItem final
{
public:
	struct FGuid                                  ItemGuid;                                          // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerExecuteInventoryItem) == 0x000004, "Wrong alignment on FortPlayerController_ServerExecuteInventoryItem");
static_assert(sizeof(FortPlayerController_ServerExecuteInventoryItem) == 0x000010, "Wrong size on FortPlayerController_ServerExecuteInventoryItem");
static_assert(offsetof(FortPlayerController_ServerExecuteInventoryItem, ItemGuid) == 0x000000, "Member 'FortPlayerController_ServerExecuteInventoryItem::ItemGuid' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerExecutePresetTeamChat
// 0x0040 (0x0040 - 0x0000)
struct FortPlayerController_ServerExecutePresetTeamChat final
{
public:
	class FText                                   ChatText;                                          // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       SenderID;                                          // 0x0018(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerExecutePresetTeamChat) == 0x000008, "Wrong alignment on FortPlayerController_ServerExecutePresetTeamChat");
static_assert(sizeof(FortPlayerController_ServerExecutePresetTeamChat) == 0x000040, "Wrong size on FortPlayerController_ServerExecutePresetTeamChat");
static_assert(offsetof(FortPlayerController_ServerExecutePresetTeamChat, ChatText) == 0x000000, "Member 'FortPlayerController_ServerExecutePresetTeamChat::ChatText' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerExecutePresetTeamChat, SenderID) == 0x000018, "Member 'FortPlayerController_ServerExecutePresetTeamChat::SenderID' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerGiftInventoryItemToOtherPlayer
// 0x0040 (0x0040 - 0x0000)
struct FortPlayerController_ServerGiftInventoryItemToOtherPlayer final
{
public:
	struct FGuid                                  ItemGuid;                                          // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       PlayerID;                                          // 0x0010(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_ServerGiftInventoryItemToOtherPlayer) == 0x000008, "Wrong alignment on FortPlayerController_ServerGiftInventoryItemToOtherPlayer");
static_assert(sizeof(FortPlayerController_ServerGiftInventoryItemToOtherPlayer) == 0x000040, "Wrong size on FortPlayerController_ServerGiftInventoryItemToOtherPlayer");
static_assert(offsetof(FortPlayerController_ServerGiftInventoryItemToOtherPlayer, ItemGuid) == 0x000000, "Member 'FortPlayerController_ServerGiftInventoryItemToOtherPlayer::ItemGuid' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerGiftInventoryItemToOtherPlayer, PlayerID) == 0x000010, "Member 'FortPlayerController_ServerGiftInventoryItemToOtherPlayer::PlayerID' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerGiftInventoryItemToOtherPlayer, Quantity) == 0x000038, "Member 'FortPlayerController_ServerGiftInventoryItemToOtherPlayer::Quantity' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerHandleMissionEvent_StartLeavingZone
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_ServerHandleMissionEvent_StartLeavingZone final
{
public:
	class AFortPlayerPawn*                        PlayerRequestingLeaving;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerHandleMissionEvent_StartLeavingZone) == 0x000008, "Wrong alignment on FortPlayerController_ServerHandleMissionEvent_StartLeavingZone");
static_assert(sizeof(FortPlayerController_ServerHandleMissionEvent_StartLeavingZone) == 0x000008, "Wrong size on FortPlayerController_ServerHandleMissionEvent_StartLeavingZone");
static_assert(offsetof(FortPlayerController_ServerHandleMissionEvent_StartLeavingZone, PlayerRequestingLeaving) == 0x000000, "Member 'FortPlayerController_ServerHandleMissionEvent_StartLeavingZone::PlayerRequestingLeaving' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerHandleMissionEvent_ToggledCursorMode
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerController_ServerHandleMissionEvent_ToggledCursorMode final
{
public:
	class AFortPlayerController*                  PlayerThatToggledCursorMode;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpened;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_ServerHandleMissionEvent_ToggledCursorMode) == 0x000008, "Wrong alignment on FortPlayerController_ServerHandleMissionEvent_ToggledCursorMode");
static_assert(sizeof(FortPlayerController_ServerHandleMissionEvent_ToggledCursorMode) == 0x000010, "Wrong size on FortPlayerController_ServerHandleMissionEvent_ToggledCursorMode");
static_assert(offsetof(FortPlayerController_ServerHandleMissionEvent_ToggledCursorMode, PlayerThatToggledCursorMode) == 0x000000, "Member 'FortPlayerController_ServerHandleMissionEvent_ToggledCursorMode::PlayerThatToggledCursorMode' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerHandleMissionEvent_ToggledCursorMode, bOpened) == 0x000008, "Member 'FortPlayerController_ServerHandleMissionEvent_ToggledCursorMode::bOpened' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerHandleMissionEvent_ToggledEditMode
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerController_ServerHandleMissionEvent_ToggledEditMode final
{
public:
	class AFortPlayerController*                  PlayerThatToggledEditMode;                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABuildingSMActor*                       EditableActor;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpened;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_ServerHandleMissionEvent_ToggledEditMode) == 0x000008, "Wrong alignment on FortPlayerController_ServerHandleMissionEvent_ToggledEditMode");
static_assert(sizeof(FortPlayerController_ServerHandleMissionEvent_ToggledEditMode) == 0x000018, "Wrong size on FortPlayerController_ServerHandleMissionEvent_ToggledEditMode");
static_assert(offsetof(FortPlayerController_ServerHandleMissionEvent_ToggledEditMode, PlayerThatToggledEditMode) == 0x000000, "Member 'FortPlayerController_ServerHandleMissionEvent_ToggledEditMode::PlayerThatToggledEditMode' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerHandleMissionEvent_ToggledEditMode, EditableActor) == 0x000008, "Member 'FortPlayerController_ServerHandleMissionEvent_ToggledEditMode::EditableActor' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerHandleMissionEvent_ToggledEditMode, bOpened) == 0x000010, "Member 'FortPlayerController_ServerHandleMissionEvent_ToggledEditMode::bOpened' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerItemWillBeDestroyed
// 0x0014 (0x0014 - 0x0000)
struct FortPlayerController_ServerItemWillBeDestroyed final
{
public:
	struct FGuid                                  DestroyedItemGuid;                                 // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerItemWillBeDestroyed) == 0x000004, "Wrong alignment on FortPlayerController_ServerItemWillBeDestroyed");
static_assert(sizeof(FortPlayerController_ServerItemWillBeDestroyed) == 0x000014, "Wrong size on FortPlayerController_ServerItemWillBeDestroyed");
static_assert(offsetof(FortPlayerController_ServerItemWillBeDestroyed, DestroyedItemGuid) == 0x000000, "Member 'FortPlayerController_ServerItemWillBeDestroyed::DestroyedItemGuid' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerItemWillBeDestroyed, Count) == 0x000010, "Member 'FortPlayerController_ServerItemWillBeDestroyed::Count' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerKickPlayer
// 0x0040 (0x0040 - 0x0000)
struct FortPlayerController_ServerKickPlayer final
{
public:
	struct FUniqueNetIdRepl                       PlayerToKick;                                      // 0x0000(0x0028)(ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Reason;                                            // 0x0028(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerKickPlayer) == 0x000008, "Wrong alignment on FortPlayerController_ServerKickPlayer");
static_assert(sizeof(FortPlayerController_ServerKickPlayer) == 0x000040, "Wrong size on FortPlayerController_ServerKickPlayer");
static_assert(offsetof(FortPlayerController_ServerKickPlayer, PlayerToKick) == 0x000000, "Member 'FortPlayerController_ServerKickPlayer::PlayerToKick' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerKickPlayer, Reason) == 0x000028, "Member 'FortPlayerController_ServerKickPlayer::Reason' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerModDurability
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerController_ServerModDurability final
{
public:
	struct FGuid                                  ItemGuid;                                          // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurabilityMod;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceSet;                                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_ServerModDurability) == 0x000004, "Wrong alignment on FortPlayerController_ServerModDurability");
static_assert(sizeof(FortPlayerController_ServerModDurability) == 0x000018, "Wrong size on FortPlayerController_ServerModDurability");
static_assert(offsetof(FortPlayerController_ServerModDurability, ItemGuid) == 0x000000, "Member 'FortPlayerController_ServerModDurability::ItemGuid' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerModDurability, DurabilityMod) == 0x000010, "Member 'FortPlayerController_ServerModDurability::DurabilityMod' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerModDurability, bForceSet) == 0x000014, "Member 'FortPlayerController_ServerModDurability::bForceSet' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerModifyStat
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerController_ServerModifyStat final
{
public:
	class FName                                   StatName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStatMod                                      ModType;                                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceStatSave;                                    // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_ServerModifyStat) == 0x000004, "Wrong alignment on FortPlayerController_ServerModifyStat");
static_assert(sizeof(FortPlayerController_ServerModifyStat) == 0x000010, "Wrong size on FortPlayerController_ServerModifyStat");
static_assert(offsetof(FortPlayerController_ServerModifyStat, StatName) == 0x000000, "Member 'FortPlayerController_ServerModifyStat::StatName' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerModifyStat, Amount) == 0x000008, "Member 'FortPlayerController_ServerModifyStat::Amount' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerModifyStat, ModType) == 0x00000C, "Member 'FortPlayerController_ServerModifyStat::ModType' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerModifyStat, bForceStatSave) == 0x00000D, "Member 'FortPlayerController_ServerModifyStat::bForceStatSave' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerPingMinimap
// 0x0020 (0x0020 - 0x0000)
struct FortPlayerController_ServerPingMinimap final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PingColor;                                         // 0x000C(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortTeam                                     RequiredTeam;                                      // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_ServerPingMinimap) == 0x000004, "Wrong alignment on FortPlayerController_ServerPingMinimap");
static_assert(sizeof(FortPlayerController_ServerPingMinimap) == 0x000020, "Wrong size on FortPlayerController_ServerPingMinimap");
static_assert(offsetof(FortPlayerController_ServerPingMinimap, WorldLocation) == 0x000000, "Member 'FortPlayerController_ServerPingMinimap::WorldLocation' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerPingMinimap, PingColor) == 0x00000C, "Member 'FortPlayerController_ServerPingMinimap::PingColor' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerPingMinimap, RequiredTeam) == 0x00001C, "Member 'FortPlayerController_ServerPingMinimap::RequiredTeam' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerPlayEmoteItem
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_ServerPlayEmoteItem final
{
public:
	const class UFortMontageItemDefinitionBase*   EmoteAsset;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerPlayEmoteItem) == 0x000008, "Wrong alignment on FortPlayerController_ServerPlayEmoteItem");
static_assert(sizeof(FortPlayerController_ServerPlayEmoteItem) == 0x000008, "Wrong size on FortPlayerController_ServerPlayEmoteItem");
static_assert(offsetof(FortPlayerController_ServerPlayEmoteItem, EmoteAsset) == 0x000000, "Member 'FortPlayerController_ServerPlayEmoteItem::EmoteAsset' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerReleaseInventoryItemKey
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_ServerReleaseInventoryItemKey final
{
public:
	EFortQuickBars                                InQuickBar;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Slot;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerReleaseInventoryItemKey) == 0x000004, "Wrong alignment on FortPlayerController_ServerReleaseInventoryItemKey");
static_assert(sizeof(FortPlayerController_ServerReleaseInventoryItemKey) == 0x000008, "Wrong size on FortPlayerController_ServerReleaseInventoryItemKey");
static_assert(offsetof(FortPlayerController_ServerReleaseInventoryItemKey, InQuickBar) == 0x000000, "Member 'FortPlayerController_ServerReleaseInventoryItemKey::InQuickBar' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerReleaseInventoryItemKey, Slot) == 0x000004, "Member 'FortPlayerController_ServerReleaseInventoryItemKey::Slot' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerRemoveDefender
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_ServerRemoveDefender final
{
public:
	class ABuildingTrapDefender*                  DefenderTrap;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerRemoveDefender) == 0x000008, "Wrong alignment on FortPlayerController_ServerRemoveDefender");
static_assert(sizeof(FortPlayerController_ServerRemoveDefender) == 0x000008, "Wrong size on FortPlayerController_ServerRemoveDefender");
static_assert(offsetof(FortPlayerController_ServerRemoveDefender, DefenderTrap) == 0x000000, "Member 'FortPlayerController_ServerRemoveDefender::DefenderTrap' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerRemoveInventoryItem
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerController_ServerRemoveInventoryItem final
{
public:
	struct FGuid                                  ItemGuid;                                          // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceRemoveFromQuickBars;                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_ServerRemoveInventoryItem) == 0x000004, "Wrong alignment on FortPlayerController_ServerRemoveInventoryItem");
static_assert(sizeof(FortPlayerController_ServerRemoveInventoryItem) == 0x000018, "Wrong size on FortPlayerController_ServerRemoveInventoryItem");
static_assert(offsetof(FortPlayerController_ServerRemoveInventoryItem, ItemGuid) == 0x000000, "Member 'FortPlayerController_ServerRemoveInventoryItem::ItemGuid' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerRemoveInventoryItem, Count) == 0x000010, "Member 'FortPlayerController_ServerRemoveInventoryItem::Count' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerRemoveInventoryItem, bForceRemoveFromQuickBars) == 0x000014, "Member 'FortPlayerController_ServerRemoveInventoryItem::bForceRemoveFromQuickBars' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerRemoveInventoryStateValue
// 0x0014 (0x0014 - 0x0000)
struct FortPlayerController_ServerRemoveInventoryStateValue final
{
public:
	struct FGuid                                  ItemGuid;                                          // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemEntryState                           StateValueType;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_ServerRemoveInventoryStateValue) == 0x000004, "Wrong alignment on FortPlayerController_ServerRemoveInventoryStateValue");
static_assert(sizeof(FortPlayerController_ServerRemoveInventoryStateValue) == 0x000014, "Wrong size on FortPlayerController_ServerRemoveInventoryStateValue");
static_assert(offsetof(FortPlayerController_ServerRemoveInventoryStateValue, ItemGuid) == 0x000000, "Member 'FortPlayerController_ServerRemoveInventoryStateValue::ItemGuid' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerRemoveInventoryStateValue, StateValueType) == 0x000010, "Member 'FortPlayerController_ServerRemoveInventoryStateValue::StateValueType' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerRepairBuildingActor
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_ServerRepairBuildingActor final
{
public:
	class ABuildingSMActor*                       BuildingActorToRepair;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerRepairBuildingActor) == 0x000008, "Wrong alignment on FortPlayerController_ServerRepairBuildingActor");
static_assert(sizeof(FortPlayerController_ServerRepairBuildingActor) == 0x000008, "Wrong size on FortPlayerController_ServerRepairBuildingActor");
static_assert(offsetof(FortPlayerController_ServerRepairBuildingActor, BuildingActorToRepair) == 0x000000, "Member 'FortPlayerController_ServerRepairBuildingActor::BuildingActorToRepair' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerReplyToReadyCheck
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerController_ServerReplyToReadyCheck final
{
public:
	bool                                          bReady;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerReplyToReadyCheck) == 0x000001, "Wrong alignment on FortPlayerController_ServerReplyToReadyCheck");
static_assert(sizeof(FortPlayerController_ServerReplyToReadyCheck) == 0x000001, "Wrong size on FortPlayerController_ServerReplyToReadyCheck");
static_assert(offsetof(FortPlayerController_ServerReplyToReadyCheck, bReady) == 0x000000, "Member 'FortPlayerController_ServerReplyToReadyCheck::bReady' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerReportClientFPS
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_ServerReportClientFPS final
{
public:
	float                                         ClientAvgFPS;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ClientAvgFrameScore;                               // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ClientMaxFrameScore;                               // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_ServerReportClientFPS) == 0x000004, "Wrong alignment on FortPlayerController_ServerReportClientFPS");
static_assert(sizeof(FortPlayerController_ServerReportClientFPS) == 0x000008, "Wrong size on FortPlayerController_ServerReportClientFPS");
static_assert(offsetof(FortPlayerController_ServerReportClientFPS, ClientAvgFPS) == 0x000000, "Member 'FortPlayerController_ServerReportClientFPS::ClientAvgFPS' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerReportClientFPS, ClientAvgFrameScore) == 0x000004, "Member 'FortPlayerController_ServerReportClientFPS::ClientAvgFrameScore' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerReportClientFPS, ClientMaxFrameScore) == 0x000005, "Member 'FortPlayerController_ServerReportClientFPS::ClientMaxFrameScore' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerRequestAttributeSources
// 0x0028 (0x0028 - 0x0000)
struct FortPlayerController_ServerRequestAttributeSources final
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAbilitySystemComponent*            AbilitySystemComponent;                            // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerRequestAttributeSources) == 0x000008, "Wrong alignment on FortPlayerController_ServerRequestAttributeSources");
static_assert(sizeof(FortPlayerController_ServerRequestAttributeSources) == 0x000028, "Wrong size on FortPlayerController_ServerRequestAttributeSources");
static_assert(offsetof(FortPlayerController_ServerRequestAttributeSources, Attribute) == 0x000000, "Member 'FortPlayerController_ServerRequestAttributeSources::Attribute' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerRequestAttributeSources, AbilitySystemComponent) == 0x000020, "Member 'FortPlayerController_ServerRequestAttributeSources::AbilitySystemComponent' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerRequestGameplayAction
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerController_ServerRequestGameplayAction final
{
public:
	EFortRequestedGameplayAction                  RequestedAction;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerRequestGameplayAction) == 0x000001, "Wrong alignment on FortPlayerController_ServerRequestGameplayAction");
static_assert(sizeof(FortPlayerController_ServerRequestGameplayAction) == 0x000001, "Wrong size on FortPlayerController_ServerRequestGameplayAction");
static_assert(offsetof(FortPlayerController_ServerRequestGameplayAction, RequestedAction) == 0x000000, "Member 'FortPlayerController_ServerRequestGameplayAction::RequestedAction' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerSendClientProgressUpdate
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerController_ServerSendClientProgressUpdate final
{
public:
	int32                                         ClientProgressState;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint64>                                ClientProgressUpdate;                              // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerSendClientProgressUpdate) == 0x000008, "Wrong alignment on FortPlayerController_ServerSendClientProgressUpdate");
static_assert(sizeof(FortPlayerController_ServerSendClientProgressUpdate) == 0x000018, "Wrong size on FortPlayerController_ServerSendClientProgressUpdate");
static_assert(offsetof(FortPlayerController_ServerSendClientProgressUpdate, ClientProgressState) == 0x000000, "Member 'FortPlayerController_ServerSendClientProgressUpdate::ClientProgressState' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerSendClientProgressUpdate, ClientProgressUpdate) == 0x000008, "Member 'FortPlayerController_ServerSendClientProgressUpdate::ClientProgressUpdate' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerSendProfilerData
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerController_ServerSendProfilerData final
{
public:
	TArray<uint8>                                 Payload;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerSendProfilerData) == 0x000008, "Wrong alignment on FortPlayerController_ServerSendProfilerData");
static_assert(sizeof(FortPlayerController_ServerSendProfilerData) == 0x000010, "Wrong size on FortPlayerController_ServerSendProfilerData");
static_assert(offsetof(FortPlayerController_ServerSendProfilerData, Payload) == 0x000000, "Member 'FortPlayerController_ServerSendProfilerData::Payload' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerSetAutoEquipBetterItems
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerController_ServerSetAutoEquipBetterItems final
{
public:
	bool                                          bAutoEquip;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerSetAutoEquipBetterItems) == 0x000001, "Wrong alignment on FortPlayerController_ServerSetAutoEquipBetterItems");
static_assert(sizeof(FortPlayerController_ServerSetAutoEquipBetterItems) == 0x000001, "Wrong size on FortPlayerController_ServerSetAutoEquipBetterItems");
static_assert(offsetof(FortPlayerController_ServerSetAutoEquipBetterItems, bAutoEquip) == 0x000000, "Member 'FortPlayerController_ServerSetAutoEquipBetterItems::bAutoEquip' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerSetClientHasFinishedLoading
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerController_ServerSetClientHasFinishedLoading final
{
public:
	bool                                          bInHasFinishedLoading;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerSetClientHasFinishedLoading) == 0x000001, "Wrong alignment on FortPlayerController_ServerSetClientHasFinishedLoading");
static_assert(sizeof(FortPlayerController_ServerSetClientHasFinishedLoading) == 0x000001, "Wrong size on FortPlayerController_ServerSetClientHasFinishedLoading");
static_assert(offsetof(FortPlayerController_ServerSetClientHasFinishedLoading, bInHasFinishedLoading) == 0x000000, "Member 'FortPlayerController_ServerSetClientHasFinishedLoading::bInHasFinishedLoading' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerSetHero
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerController_ServerSetHero final
{
public:
	class FString                                 NewHeroID;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerSetHero) == 0x000008, "Wrong alignment on FortPlayerController_ServerSetHero");
static_assert(sizeof(FortPlayerController_ServerSetHero) == 0x000010, "Wrong size on FortPlayerController_ServerSetHero");
static_assert(offsetof(FortPlayerController_ServerSetHero, NewHeroID) == 0x000000, "Member 'FortPlayerController_ServerSetHero::NewHeroID' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerSetInventoryStateValue
// 0x0028 (0x0028 - 0x0000)
struct FortPlayerController_ServerSetInventoryStateValue final
{
public:
	struct FGuid                                  ItemGuid;                                          // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemEntryStateValue               StateValue;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerSetInventoryStateValue) == 0x000008, "Wrong alignment on FortPlayerController_ServerSetInventoryStateValue");
static_assert(sizeof(FortPlayerController_ServerSetInventoryStateValue) == 0x000028, "Wrong size on FortPlayerController_ServerSetInventoryStateValue");
static_assert(offsetof(FortPlayerController_ServerSetInventoryStateValue, ItemGuid) == 0x000000, "Member 'FortPlayerController_ServerSetInventoryStateValue::ItemGuid' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerSetInventoryStateValue, StateValue) == 0x000010, "Member 'FortPlayerController_ServerSetInventoryStateValue::StateValue' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerSetMarkText
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerController_ServerSetMarkText final
{
public:
	class AFortMarkActor*                         MarkActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MarkText;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerSetMarkText) == 0x000008, "Wrong alignment on FortPlayerController_ServerSetMarkText");
static_assert(sizeof(FortPlayerController_ServerSetMarkText) == 0x000018, "Wrong size on FortPlayerController_ServerSetMarkText");
static_assert(offsetof(FortPlayerController_ServerSetMarkText, MarkActor) == 0x000000, "Member 'FortPlayerController_ServerSetMarkText::MarkActor' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerSetMarkText, MarkText) == 0x000008, "Member 'FortPlayerController_ServerSetMarkText::MarkText' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerSetPartyOwner
// 0x0028 (0x0028 - 0x0000)
struct FortPlayerController_ServerSetPartyOwner final
{
public:
	struct FUniqueNetIdRepl                       PartyOwnerUniqueId;                                // 0x0000(0x0028)(ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerSetPartyOwner) == 0x000008, "Wrong alignment on FortPlayerController_ServerSetPartyOwner");
static_assert(sizeof(FortPlayerController_ServerSetPartyOwner) == 0x000028, "Wrong size on FortPlayerController_ServerSetPartyOwner");
static_assert(offsetof(FortPlayerController_ServerSetPartyOwner, PartyOwnerUniqueId) == 0x000000, "Member 'FortPlayerController_ServerSetPartyOwner::PartyOwnerUniqueId' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerSetReadyToContinue
// 0x0003 (0x0003 - 0x0000)
struct FortPlayerController_ServerSetReadyToContinue final
{
public:
	bool                                          bReady;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortGameplayState                            RequestedState;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTryStartTimer;                                    // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerSetReadyToContinue) == 0x000001, "Wrong alignment on FortPlayerController_ServerSetReadyToContinue");
static_assert(sizeof(FortPlayerController_ServerSetReadyToContinue) == 0x000003, "Wrong size on FortPlayerController_ServerSetReadyToContinue");
static_assert(offsetof(FortPlayerController_ServerSetReadyToContinue, bReady) == 0x000000, "Member 'FortPlayerController_ServerSetReadyToContinue::bReady' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerSetReadyToContinue, RequestedState) == 0x000001, "Member 'FortPlayerController_ServerSetReadyToContinue::RequestedState' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerSetReadyToContinue, bTryStartTimer) == 0x000002, "Member 'FortPlayerController_ServerSetReadyToContinue::bTryStartTimer' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerSetupWeakSpotsOnBuildingActor
// 0x0030 (0x0030 - 0x0000)
struct FortPlayerController_ServerSetupWeakSpotsOnBuildingActor final
{
public:
	class ABuildingSMActor*                       BuildingActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortCrackEffectData                   CrackData;                                         // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerSetupWeakSpotsOnBuildingActor) == 0x000008, "Wrong alignment on FortPlayerController_ServerSetupWeakSpotsOnBuildingActor");
static_assert(sizeof(FortPlayerController_ServerSetupWeakSpotsOnBuildingActor) == 0x000030, "Wrong size on FortPlayerController_ServerSetupWeakSpotsOnBuildingActor");
static_assert(offsetof(FortPlayerController_ServerSetupWeakSpotsOnBuildingActor, BuildingActor) == 0x000000, "Member 'FortPlayerController_ServerSetupWeakSpotsOnBuildingActor::BuildingActor' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerSetupWeakSpotsOnBuildingActor, CrackData) == 0x000008, "Member 'FortPlayerController_ServerSetupWeakSpotsOnBuildingActor::CrackData' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerSpawnInventoryDrop
// 0x0014 (0x0014 - 0x0000)
struct FortPlayerController_ServerSpawnInventoryDrop final
{
public:
	struct FGuid                                  ItemGuid;                                          // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerSpawnInventoryDrop) == 0x000004, "Wrong alignment on FortPlayerController_ServerSpawnInventoryDrop");
static_assert(sizeof(FortPlayerController_ServerSpawnInventoryDrop) == 0x000014, "Wrong size on FortPlayerController_ServerSpawnInventoryDrop");
static_assert(offsetof(FortPlayerController_ServerSpawnInventoryDrop, ItemGuid) == 0x000000, "Member 'FortPlayerController_ServerSpawnInventoryDrop::ItemGuid' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerSpawnInventoryDrop, Count) == 0x000010, "Member 'FortPlayerController_ServerSpawnInventoryDrop::Count' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerSpawnMark
// 0x0030 (0x0030 - 0x0000)
struct FortPlayerController_ServerSpawnMark final
{
public:
	class AActor*                                 ActorToAttachTo;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AttachOffset;                                      // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   PreapprovedText;                                   // 0x0018(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerSpawnMark) == 0x000008, "Wrong alignment on FortPlayerController_ServerSpawnMark");
static_assert(sizeof(FortPlayerController_ServerSpawnMark) == 0x000030, "Wrong size on FortPlayerController_ServerSpawnMark");
static_assert(offsetof(FortPlayerController_ServerSpawnMark, ActorToAttachTo) == 0x000000, "Member 'FortPlayerController_ServerSpawnMark::ActorToAttachTo' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerSpawnMark, AttachOffset) == 0x000008, "Member 'FortPlayerController_ServerSpawnMark::AttachOffset' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerSpawnMark, PreapprovedText) == 0x000018, "Member 'FortPlayerController_ServerSpawnMark::PreapprovedText' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerSpotActor
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_ServerSpotActor final
{
public:
	class AActor*                                 NewlySpottedActor;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerSpotActor) == 0x000008, "Wrong alignment on FortPlayerController_ServerSpotActor");
static_assert(sizeof(FortPlayerController_ServerSpotActor) == 0x000008, "Wrong size on FortPlayerController_ServerSpotActor");
static_assert(offsetof(FortPlayerController_ServerSpotActor, NewlySpottedActor) == 0x000000, "Member 'FortPlayerController_ServerSpotActor::NewlySpottedActor' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerTeamChatRoomReady
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerController_ServerTeamChatRoomReady final
{
public:
	class FString                                 ChatRoomId;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerTeamChatRoomReady) == 0x000008, "Wrong alignment on FortPlayerController_ServerTeamChatRoomReady");
static_assert(sizeof(FortPlayerController_ServerTeamChatRoomReady) == 0x000010, "Wrong size on FortPlayerController_ServerTeamChatRoomReady");
static_assert(offsetof(FortPlayerController_ServerTeamChatRoomReady, ChatRoomId) == 0x000000, "Member 'FortPlayerController_ServerTeamChatRoomReady::ChatRoomId' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerTeleportToReticle
// 0x000C (0x000C - 0x0000)
struct FortPlayerController_ServerTeleportToReticle final
{
public:
	struct FVector                                TeleportLocation;                                  // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerTeleportToReticle) == 0x000004, "Wrong alignment on FortPlayerController_ServerTeleportToReticle");
static_assert(sizeof(FortPlayerController_ServerTeleportToReticle) == 0x00000C, "Wrong size on FortPlayerController_ServerTeleportToReticle");
static_assert(offsetof(FortPlayerController_ServerTeleportToReticle, TeleportLocation) == 0x000000, "Member 'FortPlayerController_ServerTeleportToReticle::TeleportLocation' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerTriggerCombatEvent
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_ServerTriggerCombatEvent final
{
public:
	EFortCombatEvents                             TriggeredEvent;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HeatMultiplier;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerTriggerCombatEvent) == 0x000004, "Wrong alignment on FortPlayerController_ServerTriggerCombatEvent");
static_assert(sizeof(FortPlayerController_ServerTriggerCombatEvent) == 0x000008, "Wrong size on FortPlayerController_ServerTriggerCombatEvent");
static_assert(offsetof(FortPlayerController_ServerTriggerCombatEvent, TriggeredEvent) == 0x000000, "Member 'FortPlayerController_ServerTriggerCombatEvent::TriggeredEvent' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerTriggerCombatEvent, HeatMultiplier) == 0x000004, "Member 'FortPlayerController_ServerTriggerCombatEvent::HeatMultiplier' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerTriggerCombatEventBatch
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerController_ServerTriggerCombatEventBatch final
{
public:
	TArray<struct FFortCombatManagerEvent>        Payload;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerTriggerCombatEventBatch) == 0x000008, "Wrong alignment on FortPlayerController_ServerTriggerCombatEventBatch");
static_assert(sizeof(FortPlayerController_ServerTriggerCombatEventBatch) == 0x000010, "Wrong size on FortPlayerController_ServerTriggerCombatEventBatch");
static_assert(offsetof(FortPlayerController_ServerTriggerCombatEventBatch, Payload) == 0x000000, "Member 'FortPlayerController_ServerTriggerCombatEventBatch::Payload' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerTriggerGenericObjectiveEvent
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_ServerTriggerGenericObjectiveEvent final
{
public:
	class AFortObjectiveBase*                     Objective;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerTriggerGenericObjectiveEvent) == 0x000008, "Wrong alignment on FortPlayerController_ServerTriggerGenericObjectiveEvent");
static_assert(sizeof(FortPlayerController_ServerTriggerGenericObjectiveEvent) == 0x000008, "Wrong size on FortPlayerController_ServerTriggerGenericObjectiveEvent");
static_assert(offsetof(FortPlayerController_ServerTriggerGenericObjectiveEvent, Objective) == 0x000000, "Member 'FortPlayerController_ServerTriggerGenericObjectiveEvent::Objective' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerUIChoiceCompleted
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_ServerUIChoiceCompleted final
{
public:
	int32                                         ChosenItem;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MenuIdentifier;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerUIChoiceCompleted) == 0x000004, "Wrong alignment on FortPlayerController_ServerUIChoiceCompleted");
static_assert(sizeof(FortPlayerController_ServerUIChoiceCompleted) == 0x000008, "Wrong size on FortPlayerController_ServerUIChoiceCompleted");
static_assert(offsetof(FortPlayerController_ServerUIChoiceCompleted, ChosenItem) == 0x000000, "Member 'FortPlayerController_ServerUIChoiceCompleted::ChosenItem' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerUIChoiceCompleted, MenuIdentifier) == 0x000004, "Member 'FortPlayerController_ServerUIChoiceCompleted::MenuIdentifier' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerUpgradeBuildingActor
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerController_ServerUpgradeBuildingActor final
{
public:
	class ABuildingActor*                         BuildingActorToUpgrade;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewUpgradeLevel;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_ServerUpgradeBuildingActor) == 0x000008, "Wrong alignment on FortPlayerController_ServerUpgradeBuildingActor");
static_assert(sizeof(FortPlayerController_ServerUpgradeBuildingActor) == 0x000010, "Wrong size on FortPlayerController_ServerUpgradeBuildingActor");
static_assert(offsetof(FortPlayerController_ServerUpgradeBuildingActor, BuildingActorToUpgrade) == 0x000000, "Member 'FortPlayerController_ServerUpgradeBuildingActor::BuildingActorToUpgrade' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerUpgradeBuildingActor, NewUpgradeLevel) == 0x000008, "Member 'FortPlayerController_ServerUpgradeBuildingActor::NewUpgradeLevel' has a wrong offset!");

// Function FortniteGame.FortPlayerController.SetAtNameHomeBaseScreen
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerController_SetAtNameHomeBaseScreen final
{
public:
	bool                                          AtScreen;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_SetAtNameHomeBaseScreen) == 0x000001, "Wrong alignment on FortPlayerController_SetAtNameHomeBaseScreen");
static_assert(sizeof(FortPlayerController_SetAtNameHomeBaseScreen) == 0x000001, "Wrong size on FortPlayerController_SetAtNameHomeBaseScreen");
static_assert(offsetof(FortPlayerController_SetAtNameHomeBaseScreen, AtScreen) == 0x000000, "Member 'FortPlayerController_SetAtNameHomeBaseScreen::AtScreen' has a wrong offset!");

// Function FortniteGame.FortPlayerController.SetCinematicModeWithWeapon
// 0x0006 (0x0006 - 0x0000)
struct FortPlayerController_SetCinematicModeWithWeapon final
{
public:
	bool                                          bInCinematicMode;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHidePlayer;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideWeapon;                                       // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectsHUD;                                       // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectsMovement;                                  // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectsTurning;                                   // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_SetCinematicModeWithWeapon) == 0x000001, "Wrong alignment on FortPlayerController_SetCinematicModeWithWeapon");
static_assert(sizeof(FortPlayerController_SetCinematicModeWithWeapon) == 0x000006, "Wrong size on FortPlayerController_SetCinematicModeWithWeapon");
static_assert(offsetof(FortPlayerController_SetCinematicModeWithWeapon, bInCinematicMode) == 0x000000, "Member 'FortPlayerController_SetCinematicModeWithWeapon::bInCinematicMode' has a wrong offset!");
static_assert(offsetof(FortPlayerController_SetCinematicModeWithWeapon, bHidePlayer) == 0x000001, "Member 'FortPlayerController_SetCinematicModeWithWeapon::bHidePlayer' has a wrong offset!");
static_assert(offsetof(FortPlayerController_SetCinematicModeWithWeapon, bHideWeapon) == 0x000002, "Member 'FortPlayerController_SetCinematicModeWithWeapon::bHideWeapon' has a wrong offset!");
static_assert(offsetof(FortPlayerController_SetCinematicModeWithWeapon, bAffectsHUD) == 0x000003, "Member 'FortPlayerController_SetCinematicModeWithWeapon::bAffectsHUD' has a wrong offset!");
static_assert(offsetof(FortPlayerController_SetCinematicModeWithWeapon, bAffectsMovement) == 0x000004, "Member 'FortPlayerController_SetCinematicModeWithWeapon::bAffectsMovement' has a wrong offset!");
static_assert(offsetof(FortPlayerController_SetCinematicModeWithWeapon, bAffectsTurning) == 0x000005, "Member 'FortPlayerController_SetCinematicModeWithWeapon::bAffectsTurning' has a wrong offset!");

// Function FortniteGame.FortPlayerController.SetCinematicOverrideClass
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_SetCinematicOverrideClass final
{
public:
	TSubclassOf<class UFortCinematicCamera>       OverrideCameraClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_SetCinematicOverrideClass) == 0x000008, "Wrong alignment on FortPlayerController_SetCinematicOverrideClass");
static_assert(sizeof(FortPlayerController_SetCinematicOverrideClass) == 0x000008, "Wrong size on FortPlayerController_SetCinematicOverrideClass");
static_assert(offsetof(FortPlayerController_SetCinematicOverrideClass, OverrideCameraClass) == 0x000000, "Member 'FortPlayerController_SetCinematicOverrideClass::OverrideCameraClass' has a wrong offset!");

// Function FortniteGame.FortPlayerController.SetFirstPersonCamera
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerController_SetFirstPersonCamera final
{
public:
	bool                                          bNewUseFirstPersonCamera;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_SetFirstPersonCamera) == 0x000001, "Wrong alignment on FortPlayerController_SetFirstPersonCamera");
static_assert(sizeof(FortPlayerController_SetFirstPersonCamera) == 0x000001, "Wrong size on FortPlayerController_SetFirstPersonCamera");
static_assert(offsetof(FortPlayerController_SetFirstPersonCamera, bNewUseFirstPersonCamera) == 0x000000, "Member 'FortPlayerController_SetFirstPersonCamera::bNewUseFirstPersonCamera' has a wrong offset!");

// Function FortniteGame.FortPlayerController.SetInputPitchScale
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerController_SetInputPitchScale final
{
public:
	float                                         InInputPitchScale;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_SetInputPitchScale) == 0x000004, "Wrong alignment on FortPlayerController_SetInputPitchScale");
static_assert(sizeof(FortPlayerController_SetInputPitchScale) == 0x000004, "Wrong size on FortPlayerController_SetInputPitchScale");
static_assert(offsetof(FortPlayerController_SetInputPitchScale, InInputPitchScale) == 0x000000, "Member 'FortPlayerController_SetInputPitchScale::InInputPitchScale' has a wrong offset!");

// Function FortniteGame.FortPlayerController.SetInputYawScale
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerController_SetInputYawScale final
{
public:
	float                                         InInputYawScale;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_SetInputYawScale) == 0x000004, "Wrong alignment on FortPlayerController_SetInputYawScale");
static_assert(sizeof(FortPlayerController_SetInputYawScale) == 0x000004, "Wrong size on FortPlayerController_SetInputYawScale");
static_assert(offsetof(FortPlayerController_SetInputYawScale, InInputYawScale) == 0x000000, "Member 'FortPlayerController_SetInputYawScale::InInputYawScale' has a wrong offset!");

// Function FortniteGame.FortPlayerController.SetRotatePawnToCamera
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerController_SetRotatePawnToCamera final
{
public:
	bool                                          bNewRotatePawnToCamera;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_SetRotatePawnToCamera) == 0x000001, "Wrong alignment on FortPlayerController_SetRotatePawnToCamera");
static_assert(sizeof(FortPlayerController_SetRotatePawnToCamera) == 0x000001, "Wrong size on FortPlayerController_SetRotatePawnToCamera");
static_assert(offsetof(FortPlayerController_SetRotatePawnToCamera, bNewRotatePawnToCamera) == 0x000000, "Member 'FortPlayerController_SetRotatePawnToCamera::bNewRotatePawnToCamera' has a wrong offset!");

// Function FortniteGame.FortPlayerController.StartReadyCheck
// 0x0050 (0x0050 - 0x0000)
struct FortPlayerController_StartReadyCheck final
{
public:
	class FText                                   QueryText;                                         // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   YesText;                                           // 0x0018(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   NoText;                                            // 0x0030(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         PercentageToPass;                                  // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x004C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_StartReadyCheck) == 0x000008, "Wrong alignment on FortPlayerController_StartReadyCheck");
static_assert(sizeof(FortPlayerController_StartReadyCheck) == 0x000050, "Wrong size on FortPlayerController_StartReadyCheck");
static_assert(offsetof(FortPlayerController_StartReadyCheck, QueryText) == 0x000000, "Member 'FortPlayerController_StartReadyCheck::QueryText' has a wrong offset!");
static_assert(offsetof(FortPlayerController_StartReadyCheck, YesText) == 0x000018, "Member 'FortPlayerController_StartReadyCheck::YesText' has a wrong offset!");
static_assert(offsetof(FortPlayerController_StartReadyCheck, NoText) == 0x000030, "Member 'FortPlayerController_StartReadyCheck::NoText' has a wrong offset!");
static_assert(offsetof(FortPlayerController_StartReadyCheck, PercentageToPass) == 0x000048, "Member 'FortPlayerController_StartReadyCheck::PercentageToPass' has a wrong offset!");
static_assert(offsetof(FortPlayerController_StartReadyCheck, ReturnValue) == 0x00004C, "Member 'FortPlayerController_StartReadyCheck::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerController.SuppressEventNotifications
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerController_SuppressEventNotifications final
{
public:
	bool                                          bSuppress;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_SuppressEventNotifications) == 0x000001, "Wrong alignment on FortPlayerController_SuppressEventNotifications");
static_assert(sizeof(FortPlayerController_SuppressEventNotifications) == 0x000001, "Wrong size on FortPlayerController_SuppressEventNotifications");
static_assert(offsetof(FortPlayerController_SuppressEventNotifications, bSuppress) == 0x000000, "Member 'FortPlayerController_SuppressEventNotifications::bSuppress' has a wrong offset!");

// Function FortniteGame.FortPlayerController.SwapQuickBarFocus
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerController_SwapQuickBarFocus final
{
public:
	EFortQuickBars                                InQuickBar;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_SwapQuickBarFocus) == 0x000001, "Wrong alignment on FortPlayerController_SwapQuickBarFocus");
static_assert(sizeof(FortPlayerController_SwapQuickBarFocus) == 0x000001, "Wrong size on FortPlayerController_SwapQuickBarFocus");
static_assert(offsetof(FortPlayerController_SwapQuickBarFocus, InQuickBar) == 0x000000, "Member 'FortPlayerController_SwapQuickBarFocus::InQuickBar' has a wrong offset!");

// Function FortniteGame.FortPlayerController.GetAccountItem
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerController_GetAccountItem final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAccountItem*                       ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_GetAccountItem) == 0x000008, "Wrong alignment on FortPlayerController_GetAccountItem");
static_assert(sizeof(FortPlayerController_GetAccountItem) == 0x000018, "Wrong size on FortPlayerController_GetAccountItem");
static_assert(offsetof(FortPlayerController_GetAccountItem, ID) == 0x000000, "Member 'FortPlayerController_GetAccountItem::ID' has a wrong offset!");
static_assert(offsetof(FortPlayerController_GetAccountItem, ReturnValue) == 0x000010, "Member 'FortPlayerController_GetAccountItem::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerController.GetAccountLevel
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerController_GetAccountLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_GetAccountLevel) == 0x000004, "Wrong alignment on FortPlayerController_GetAccountLevel");
static_assert(sizeof(FortPlayerController_GetAccountLevel) == 0x000004, "Wrong size on FortPlayerController_GetAccountLevel");
static_assert(offsetof(FortPlayerController_GetAccountLevel, ReturnValue) == 0x000000, "Member 'FortPlayerController_GetAccountLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerController.GetAccountLevelProgression
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerController_GetAccountLevelProgression final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_GetAccountLevelProgression) == 0x000004, "Wrong alignment on FortPlayerController_GetAccountLevelProgression");
static_assert(sizeof(FortPlayerController_GetAccountLevelProgression) == 0x000004, "Wrong size on FortPlayerController_GetAccountLevelProgression");
static_assert(offsetof(FortPlayerController_GetAccountLevelProgression, ReturnValue) == 0x000000, "Member 'FortPlayerController_GetAccountLevelProgression::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerController.GetActorUnderReticle
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_GetActorUnderReticle final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_GetActorUnderReticle) == 0x000008, "Wrong alignment on FortPlayerController_GetActorUnderReticle");
static_assert(sizeof(FortPlayerController_GetActorUnderReticle) == 0x000008, "Wrong size on FortPlayerController_GetActorUnderReticle");
static_assert(offsetof(FortPlayerController_GetActorUnderReticle, ReturnValue) == 0x000000, "Member 'FortPlayerController_GetActorUnderReticle::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerController.GetCollectionBookManager
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_GetCollectionBookManager final
{
public:
	class UFortCollectionBookManager*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_GetCollectionBookManager) == 0x000008, "Wrong alignment on FortPlayerController_GetCollectionBookManager");
static_assert(sizeof(FortPlayerController_GetCollectionBookManager) == 0x000008, "Wrong size on FortPlayerController_GetCollectionBookManager");
static_assert(offsetof(FortPlayerController_GetCollectionBookManager, ReturnValue) == 0x000000, "Member 'FortPlayerController_GetCollectionBookManager::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerController.GetGameAccountId
// 0x0028 (0x0028 - 0x0000)
struct FortPlayerController_GetGameAccountId final
{
public:
	struct FUniqueNetIdRepl                       ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_GetGameAccountId) == 0x000008, "Wrong alignment on FortPlayerController_GetGameAccountId");
static_assert(sizeof(FortPlayerController_GetGameAccountId) == 0x000028, "Wrong size on FortPlayerController_GetGameAccountId");
static_assert(offsetof(FortPlayerController_GetGameAccountId, ReturnValue) == 0x000000, "Member 'FortPlayerController_GetGameAccountId::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerController.GetPlayerPawn
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_GetPlayerPawn final
{
public:
	class AFortPlayerPawn*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_GetPlayerPawn) == 0x000008, "Wrong alignment on FortPlayerController_GetPlayerPawn");
static_assert(sizeof(FortPlayerController_GetPlayerPawn) == 0x000008, "Wrong size on FortPlayerController_GetPlayerPawn");
static_assert(offsetof(FortPlayerController_GetPlayerPawn, ReturnValue) == 0x000000, "Member 'FortPlayerController_GetPlayerPawn::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerController.GetQuestManager
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerController_GetQuestManager final
{
public:
	ESubGame                                      SubGame;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortQuestManager*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_GetQuestManager) == 0x000008, "Wrong alignment on FortPlayerController_GetQuestManager");
static_assert(sizeof(FortPlayerController_GetQuestManager) == 0x000010, "Wrong size on FortPlayerController_GetQuestManager");
static_assert(offsetof(FortPlayerController_GetQuestManager, SubGame) == 0x000000, "Member 'FortPlayerController_GetQuestManager::SubGame' has a wrong offset!");
static_assert(offsetof(FortPlayerController_GetQuestManager, ReturnValue) == 0x000008, "Member 'FortPlayerController_GetQuestManager::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerController.GetRegisteredPlayerInfo
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_GetRegisteredPlayerInfo final
{
public:
	class UFortRegisteredPlayerInfo*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_GetRegisteredPlayerInfo) == 0x000008, "Wrong alignment on FortPlayerController_GetRegisteredPlayerInfo");
static_assert(sizeof(FortPlayerController_GetRegisteredPlayerInfo) == 0x000008, "Wrong size on FortPlayerController_GetRegisteredPlayerInfo");
static_assert(offsetof(FortPlayerController_GetRegisteredPlayerInfo, ReturnValue) == 0x000000, "Member 'FortPlayerController_GetRegisteredPlayerInfo::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerController.GetRotatePawnToCamera
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerController_GetRotatePawnToCamera final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_GetRotatePawnToCamera) == 0x000001, "Wrong alignment on FortPlayerController_GetRotatePawnToCamera");
static_assert(sizeof(FortPlayerController_GetRotatePawnToCamera) == 0x000001, "Wrong size on FortPlayerController_GetRotatePawnToCamera");
static_assert(offsetof(FortPlayerController_GetRotatePawnToCamera, ReturnValue) == 0x000000, "Member 'FortPlayerController_GetRotatePawnToCamera::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerController.IsActionInputIgnored
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerController_IsActionInputIgnored final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_IsActionInputIgnored) == 0x000001, "Wrong alignment on FortPlayerController_IsActionInputIgnored");
static_assert(sizeof(FortPlayerController_IsActionInputIgnored) == 0x000001, "Wrong size on FortPlayerController_IsActionInputIgnored");
static_assert(offsetof(FortPlayerController_IsActionInputIgnored, ReturnValue) == 0x000000, "Member 'FortPlayerController_IsActionInputIgnored::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerController.IsClientBot
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerController_IsClientBot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_IsClientBot) == 0x000001, "Wrong alignment on FortPlayerController_IsClientBot");
static_assert(sizeof(FortPlayerController_IsClientBot) == 0x000001, "Wrong size on FortPlayerController_IsClientBot");
static_assert(offsetof(FortPlayerController_IsClientBot, ReturnValue) == 0x000000, "Member 'FortPlayerController_IsClientBot::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerController.IsClientTimingOut
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerController_IsClientTimingOut final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_IsClientTimingOut) == 0x000001, "Wrong alignment on FortPlayerController_IsClientTimingOut");
static_assert(sizeof(FortPlayerController_IsClientTimingOut) == 0x000001, "Wrong size on FortPlayerController_IsClientTimingOut");
static_assert(offsetof(FortPlayerController_IsClientTimingOut, ReturnValue) == 0x000000, "Member 'FortPlayerController_IsClientTimingOut::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerController.IsInBuildMode
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerController_IsInBuildMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_IsInBuildMode) == 0x000001, "Wrong alignment on FortPlayerController_IsInBuildMode");
static_assert(sizeof(FortPlayerController_IsInBuildMode) == 0x000001, "Wrong size on FortPlayerController_IsInBuildMode");
static_assert(offsetof(FortPlayerController_IsInBuildMode, ReturnValue) == 0x000000, "Member 'FortPlayerController_IsInBuildMode::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerController.IsNearActiveEncounters
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerController_IsNearActiveEncounters final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_IsNearActiveEncounters) == 0x000001, "Wrong alignment on FortPlayerController_IsNearActiveEncounters");
static_assert(sizeof(FortPlayerController_IsNearActiveEncounters) == 0x000001, "Wrong size on FortPlayerController_IsNearActiveEncounters");
static_assert(offsetof(FortPlayerController_IsNearActiveEncounters, ReturnValue) == 0x000000, "Member 'FortPlayerController_IsNearActiveEncounters::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerController.IsPlayingEmote
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerController_IsPlayingEmote final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_IsPlayingEmote) == 0x000001, "Wrong alignment on FortPlayerController_IsPlayingEmote");
static_assert(sizeof(FortPlayerController_IsPlayingEmote) == 0x000001, "Wrong size on FortPlayerController_IsPlayingEmote");
static_assert(offsetof(FortPlayerController_IsPlayingEmote, ReturnValue) == 0x000000, "Member 'FortPlayerController_IsPlayingEmote::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerController.IsRequirementsMet
// 0x0050 (0x0050 - 0x0000)
struct FortPlayerController_IsRequirementsMet final
{
public:
	struct FFortRequirementsInfo                  InRequirements;                                    // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_IsRequirementsMet) == 0x000008, "Wrong alignment on FortPlayerController_IsRequirementsMet");
static_assert(sizeof(FortPlayerController_IsRequirementsMet) == 0x000050, "Wrong size on FortPlayerController_IsRequirementsMet");
static_assert(offsetof(FortPlayerController_IsRequirementsMet, InRequirements) == 0x000000, "Member 'FortPlayerController_IsRequirementsMet::InRequirements' has a wrong offset!");
static_assert(offsetof(FortPlayerController_IsRequirementsMet, ReturnValue) == 0x000048, "Member 'FortPlayerController_IsRequirementsMet::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerController.IsUsingFirstPersonCamera
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerController_IsUsingFirstPersonCamera final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_IsUsingFirstPersonCamera) == 0x000001, "Wrong alignment on FortPlayerController_IsUsingFirstPersonCamera");
static_assert(sizeof(FortPlayerController_IsUsingFirstPersonCamera) == 0x000001, "Wrong size on FortPlayerController_IsUsingFirstPersonCamera");
static_assert(offsetof(FortPlayerController_IsUsingFirstPersonCamera, ReturnValue) == 0x000000, "Member 'FortPlayerController_IsUsingFirstPersonCamera::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerController.IsUsingGamepad
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerController_IsUsingGamepad final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_IsUsingGamepad) == 0x000001, "Wrong alignment on FortPlayerController_IsUsingGamepad");
static_assert(sizeof(FortPlayerController_IsUsingGamepad) == 0x000001, "Wrong size on FortPlayerController_IsUsingGamepad");
static_assert(offsetof(FortPlayerController_IsUsingGamepad, ReturnValue) == 0x000000, "Member 'FortPlayerController_IsUsingGamepad::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerController.K2_FindExistingItemForDefinition
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerController_K2_FindExistingItemForDefinition final
{
public:
	const class UFortItemDefinition*              ItemDefinition;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInStorageVault;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItem*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_K2_FindExistingItemForDefinition) == 0x000008, "Wrong alignment on FortPlayerController_K2_FindExistingItemForDefinition");
static_assert(sizeof(FortPlayerController_K2_FindExistingItemForDefinition) == 0x000018, "Wrong size on FortPlayerController_K2_FindExistingItemForDefinition");
static_assert(offsetof(FortPlayerController_K2_FindExistingItemForDefinition, ItemDefinition) == 0x000000, "Member 'FortPlayerController_K2_FindExistingItemForDefinition::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FortPlayerController_K2_FindExistingItemForDefinition, bInStorageVault) == 0x000008, "Member 'FortPlayerController_K2_FindExistingItemForDefinition::bInStorageVault' has a wrong offset!");
static_assert(offsetof(FortPlayerController_K2_FindExistingItemForDefinition, ReturnValue) == 0x000010, "Member 'FortPlayerController_K2_FindExistingItemForDefinition::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerGameplay.ResetHUDElementVisibilityToSettings
// 0x0020 (0x0020 - 0x0000)
struct FortPlayerControllerGameplay_ResetHUDElementVisibilityToSettings final
{
public:
	struct FGameplayTagContainer                  HUDElementTags;                                    // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerGameplay_ResetHUDElementVisibilityToSettings) == 0x000008, "Wrong alignment on FortPlayerControllerGameplay_ResetHUDElementVisibilityToSettings");
static_assert(sizeof(FortPlayerControllerGameplay_ResetHUDElementVisibilityToSettings) == 0x000020, "Wrong size on FortPlayerControllerGameplay_ResetHUDElementVisibilityToSettings");
static_assert(offsetof(FortPlayerControllerGameplay_ResetHUDElementVisibilityToSettings, HUDElementTags) == 0x000000, "Member 'FortPlayerControllerGameplay_ResetHUDElementVisibilityToSettings::HUDElementTags' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerGameplay.SetHUDElementVisibility
// 0x0028 (0x0028 - 0x0000)
struct FortPlayerControllerGameplay_SetHUDElementVisibility final
{
public:
	struct FGameplayTagContainer                  HUDElementTags;                                    // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bHideElements;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerControllerGameplay_SetHUDElementVisibility) == 0x000008, "Wrong alignment on FortPlayerControllerGameplay_SetHUDElementVisibility");
static_assert(sizeof(FortPlayerControllerGameplay_SetHUDElementVisibility) == 0x000028, "Wrong size on FortPlayerControllerGameplay_SetHUDElementVisibility");
static_assert(offsetof(FortPlayerControllerGameplay_SetHUDElementVisibility, HUDElementTags) == 0x000000, "Member 'FortPlayerControllerGameplay_SetHUDElementVisibility::HUDElementTags' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerGameplay_SetHUDElementVisibility, bHideElements) == 0x000020, "Member 'FortPlayerControllerGameplay_SetHUDElementVisibility::bHideElements' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerGameplay.AreHUDElementsVisible
// 0x0028 (0x0028 - 0x0000)
struct FortPlayerControllerGameplay_AreHUDElementsVisible final
{
public:
	struct FGameplayTagContainer                  HUDElementTags;                                    // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerControllerGameplay_AreHUDElementsVisible) == 0x000008, "Wrong alignment on FortPlayerControllerGameplay_AreHUDElementsVisible");
static_assert(sizeof(FortPlayerControllerGameplay_AreHUDElementsVisible) == 0x000028, "Wrong size on FortPlayerControllerGameplay_AreHUDElementsVisible");
static_assert(offsetof(FortPlayerControllerGameplay_AreHUDElementsVisible, HUDElementTags) == 0x000000, "Member 'FortPlayerControllerGameplay_AreHUDElementsVisible::HUDElementTags' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerGameplay_AreHUDElementsVisible, ReturnValue) == 0x000020, "Member 'FortPlayerControllerGameplay_AreHUDElementsVisible::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerZone.ClientOnPawnDied
// 0x0050 (0x0050 - 0x0000)
struct FortPlayerControllerZone_ClientOnPawnDied final
{
public:
	struct FFortPlayerDeathReport                 DeathReport;                                       // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerZone_ClientOnPawnDied) == 0x000008, "Wrong alignment on FortPlayerControllerZone_ClientOnPawnDied");
static_assert(sizeof(FortPlayerControllerZone_ClientOnPawnDied) == 0x000050, "Wrong size on FortPlayerControllerZone_ClientOnPawnDied");
static_assert(offsetof(FortPlayerControllerZone_ClientOnPawnDied, DeathReport) == 0x000000, "Member 'FortPlayerControllerZone_ClientOnPawnDied::DeathReport' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerZone.ClientOnPawnRevived
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerControllerZone_ClientOnPawnRevived final
{
public:
	class AController*                            EventInstigator;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerZone_ClientOnPawnRevived) == 0x000008, "Wrong alignment on FortPlayerControllerZone_ClientOnPawnRevived");
static_assert(sizeof(FortPlayerControllerZone_ClientOnPawnRevived) == 0x000008, "Wrong size on FortPlayerControllerZone_ClientOnPawnRevived");
static_assert(offsetof(FortPlayerControllerZone_ClientOnPawnRevived, EventInstigator) == 0x000000, "Member 'FortPlayerControllerZone_ClientOnPawnRevived::EventInstigator' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerZone.ClientOnZoneEndScoreReports
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerControllerZone_ClientOnZoneEndScoreReports final
{
public:
	TArray<struct FFortPlayerScoreReport>         ScoreReports;                                      // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerZone_ClientOnZoneEndScoreReports) == 0x000008, "Wrong alignment on FortPlayerControllerZone_ClientOnZoneEndScoreReports");
static_assert(sizeof(FortPlayerControllerZone_ClientOnZoneEndScoreReports) == 0x000010, "Wrong size on FortPlayerControllerZone_ClientOnZoneEndScoreReports");
static_assert(offsetof(FortPlayerControllerZone_ClientOnZoneEndScoreReports, ScoreReports) == 0x000000, "Member 'FortPlayerControllerZone_ClientOnZoneEndScoreReports::ScoreReports' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerZone.ClientSendPartyJoinInfoToPlayer
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerControllerZone_ClientSendPartyJoinInfoToPlayer final
{
public:
	class FString                                 JoinInfoStr;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerZone_ClientSendPartyJoinInfoToPlayer) == 0x000008, "Wrong alignment on FortPlayerControllerZone_ClientSendPartyJoinInfoToPlayer");
static_assert(sizeof(FortPlayerControllerZone_ClientSendPartyJoinInfoToPlayer) == 0x000010, "Wrong size on FortPlayerControllerZone_ClientSendPartyJoinInfoToPlayer");
static_assert(offsetof(FortPlayerControllerZone_ClientSendPartyJoinInfoToPlayer, JoinInfoStr) == 0x000000, "Member 'FortPlayerControllerZone_ClientSendPartyJoinInfoToPlayer::JoinInfoStr' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerZone.ServerSendLoadoutConfig
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerControllerZone_ServerSendLoadoutConfig final
{
public:
	int32                                         LoadoutSeed;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Loadout;                                           // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerZone_ServerSendLoadoutConfig) == 0x000008, "Wrong alignment on FortPlayerControllerZone_ServerSendLoadoutConfig");
static_assert(sizeof(FortPlayerControllerZone_ServerSendLoadoutConfig) == 0x000018, "Wrong size on FortPlayerControllerZone_ServerSendLoadoutConfig");
static_assert(offsetof(FortPlayerControllerZone_ServerSendLoadoutConfig, LoadoutSeed) == 0x000000, "Member 'FortPlayerControllerZone_ServerSendLoadoutConfig::LoadoutSeed' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerZone_ServerSendLoadoutConfig, Loadout) == 0x000008, "Member 'FortPlayerControllerZone_ServerSendLoadoutConfig::Loadout' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerZone.ServerSendPartyJoinInfoToPlayer
// 0x0038 (0x0038 - 0x0000)
struct FortPlayerControllerZone_ServerSendPartyJoinInfoToPlayer final
{
public:
	struct FUniqueNetIdRepl                       RecipientId;                                       // 0x0000(0x0028)(ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 JoinInfoStr;                                       // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerZone_ServerSendPartyJoinInfoToPlayer) == 0x000008, "Wrong alignment on FortPlayerControllerZone_ServerSendPartyJoinInfoToPlayer");
static_assert(sizeof(FortPlayerControllerZone_ServerSendPartyJoinInfoToPlayer) == 0x000038, "Wrong size on FortPlayerControllerZone_ServerSendPartyJoinInfoToPlayer");
static_assert(offsetof(FortPlayerControllerZone_ServerSendPartyJoinInfoToPlayer, RecipientId) == 0x000000, "Member 'FortPlayerControllerZone_ServerSendPartyJoinInfoToPlayer::RecipientId' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerZone_ServerSendPartyJoinInfoToPlayer, JoinInfoStr) == 0x000028, "Member 'FortPlayerControllerZone_ServerSendPartyJoinInfoToPlayer::JoinInfoStr' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerZone.ServerSubmitGameplayVote
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerControllerZone_ServerSubmitGameplayVote final
{
public:
	int32                                         VoteDecision;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerZone_ServerSubmitGameplayVote) == 0x000004, "Wrong alignment on FortPlayerControllerZone_ServerSubmitGameplayVote");
static_assert(sizeof(FortPlayerControllerZone_ServerSubmitGameplayVote) == 0x000004, "Wrong size on FortPlayerControllerZone_ServerSubmitGameplayVote");
static_assert(offsetof(FortPlayerControllerZone_ServerSubmitGameplayVote, VoteDecision) == 0x000000, "Member 'FortPlayerControllerZone_ServerSubmitGameplayVote::VoteDecision' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerManor.ClientOpenManorPortalUnlockMenu
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerControllerManor_ClientOpenManorPortalUnlockMenu final
{
public:
	class AManorPortal*                           ManorPortal;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerManor_ClientOpenManorPortalUnlockMenu) == 0x000008, "Wrong alignment on FortPlayerControllerManor_ClientOpenManorPortalUnlockMenu");
static_assert(sizeof(FortPlayerControllerManor_ClientOpenManorPortalUnlockMenu) == 0x000008, "Wrong size on FortPlayerControllerManor_ClientOpenManorPortalUnlockMenu");
static_assert(offsetof(FortPlayerControllerManor_ClientOpenManorPortalUnlockMenu, ManorPortal) == 0x000000, "Member 'FortPlayerControllerManor_ClientOpenManorPortalUnlockMenu::ManorPortal' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerManor.ServerOnUnlockPortalComplete
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerControllerManor_ServerOnUnlockPortalComplete final
{
public:
	class AManorPortal*                           ManorPortal;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerManor_ServerOnUnlockPortalComplete) == 0x000008, "Wrong alignment on FortPlayerControllerManor_ServerOnUnlockPortalComplete");
static_assert(sizeof(FortPlayerControllerManor_ServerOnUnlockPortalComplete) == 0x000008, "Wrong size on FortPlayerControllerManor_ServerOnUnlockPortalComplete");
static_assert(offsetof(FortPlayerControllerManor_ServerOnUnlockPortalComplete, ManorPortal) == 0x000000, "Member 'FortPlayerControllerManor_ServerOnUnlockPortalComplete::ManorPortal' has a wrong offset!");

// Function FortniteGame.BuildingEditModeSupport.OnSuccessfulMatchInteractParamUpdate
// 0x0004 (0x0004 - 0x0000)
struct BuildingEditModeSupport_OnSuccessfulMatchInteractParamUpdate final
{
public:
	float                                         NewInteractParamVal;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingEditModeSupport_OnSuccessfulMatchInteractParamUpdate) == 0x000004, "Wrong alignment on BuildingEditModeSupport_OnSuccessfulMatchInteractParamUpdate");
static_assert(sizeof(BuildingEditModeSupport_OnSuccessfulMatchInteractParamUpdate) == 0x000004, "Wrong size on BuildingEditModeSupport_OnSuccessfulMatchInteractParamUpdate");
static_assert(offsetof(BuildingEditModeSupport_OnSuccessfulMatchInteractParamUpdate, NewInteractParamVal) == 0x000000, "Member 'BuildingEditModeSupport_OnSuccessfulMatchInteractParamUpdate::NewInteractParamVal' has a wrong offset!");

// Function FortniteGame.AIHotSpotSlot.OnStateChanged
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpotSlot_OnStateChanged final
{
public:
	class AAIController*                          SlotOwner;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIHotSpotSlot                                NewState;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpotSlot_OnStateChanged) == 0x000008, "Wrong alignment on AIHotSpotSlot_OnStateChanged");
static_assert(sizeof(AIHotSpotSlot_OnStateChanged) == 0x000010, "Wrong size on AIHotSpotSlot_OnStateChanged");
static_assert(offsetof(AIHotSpotSlot_OnStateChanged, SlotOwner) == 0x000000, "Member 'AIHotSpotSlot_OnStateChanged::SlotOwner' has a wrong offset!");
static_assert(offsetof(AIHotSpotSlot_OnStateChanged, NewState) == 0x000008, "Member 'AIHotSpotSlot_OnStateChanged::NewState' has a wrong offset!");

// Function FortniteGame.AIHotSpotSlot.SetSlotEnabled
// 0x0001 (0x0001 - 0x0000)
struct AIHotSpotSlot_SetSlotEnabled final
{
public:
	bool                                          bNewEnabled;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_SetSlotEnabled) == 0x000001, "Wrong alignment on AIHotSpotSlot_SetSlotEnabled");
static_assert(sizeof(AIHotSpotSlot_SetSlotEnabled) == 0x000001, "Wrong size on AIHotSpotSlot_SetSlotEnabled");
static_assert(offsetof(AIHotSpotSlot_SetSlotEnabled, bNewEnabled) == 0x000000, "Member 'AIHotSpotSlot_SetSlotEnabled::bNewEnabled' has a wrong offset!");

// Function FortniteGame.AIHotSpotSlot.SetSlotOwnerAndState
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpotSlot_SetSlotOwnerAndState final
{
public:
	class AAIController*                          NewOwner;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIHotSpotSlot                                NewState;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpotSlot_SetSlotOwnerAndState) == 0x000008, "Wrong alignment on AIHotSpotSlot_SetSlotOwnerAndState");
static_assert(sizeof(AIHotSpotSlot_SetSlotOwnerAndState) == 0x000010, "Wrong size on AIHotSpotSlot_SetSlotOwnerAndState");
static_assert(offsetof(AIHotSpotSlot_SetSlotOwnerAndState, NewOwner) == 0x000000, "Member 'AIHotSpotSlot_SetSlotOwnerAndState::NewOwner' has a wrong offset!");
static_assert(offsetof(AIHotSpotSlot_SetSlotOwnerAndState, NewState) == 0x000008, "Member 'AIHotSpotSlot_SetSlotOwnerAndState::NewState' has a wrong offset!");

// Function FortniteGame.AIHotSpotSlot.SetSlotState
// 0x0001 (0x0001 - 0x0000)
struct AIHotSpotSlot_SetSlotState final
{
public:
	EAIHotSpotSlot                                NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_SetSlotState) == 0x000001, "Wrong alignment on AIHotSpotSlot_SetSlotState");
static_assert(sizeof(AIHotSpotSlot_SetSlotState) == 0x000001, "Wrong size on AIHotSpotSlot_SetSlotState");
static_assert(offsetof(AIHotSpotSlot_SetSlotState, NewState) == 0x000000, "Member 'AIHotSpotSlot_SetSlotState::NewState' has a wrong offset!");

// Function FortniteGame.AIHotSpotSlot.GetHotSpot
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpotSlot_GetHotSpot final
{
public:
	class AAIHotSpot*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_GetHotSpot) == 0x000008, "Wrong alignment on AIHotSpotSlot_GetHotSpot");
static_assert(sizeof(AIHotSpotSlot_GetHotSpot) == 0x000008, "Wrong size on AIHotSpotSlot_GetHotSpot");
static_assert(offsetof(AIHotSpotSlot_GetHotSpot, ReturnValue) == 0x000000, "Member 'AIHotSpotSlot_GetHotSpot::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpotSlot.GetSlotBounds
// 0x001C (0x001C - 0x0000)
struct AIHotSpotSlot_GetSlotBounds final
{
public:
	struct FBox                                   ReturnValue;                                       // 0x0000(0x001C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_GetSlotBounds) == 0x000004, "Wrong alignment on AIHotSpotSlot_GetSlotBounds");
static_assert(sizeof(AIHotSpotSlot_GetSlotBounds) == 0x00001C, "Wrong size on AIHotSpotSlot_GetSlotBounds");
static_assert(offsetof(AIHotSpotSlot_GetSlotBounds, ReturnValue) == 0x000000, "Member 'AIHotSpotSlot_GetSlotBounds::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpotSlot.GetSlotHeight
// 0x0004 (0x0004 - 0x0000)
struct AIHotSpotSlot_GetSlotHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_GetSlotHeight) == 0x000004, "Wrong alignment on AIHotSpotSlot_GetSlotHeight");
static_assert(sizeof(AIHotSpotSlot_GetSlotHeight) == 0x000004, "Wrong size on AIHotSpotSlot_GetSlotHeight");
static_assert(offsetof(AIHotSpotSlot_GetSlotHeight, ReturnValue) == 0x000000, "Member 'AIHotSpotSlot_GetSlotHeight::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpotSlot.GetSlotIndex
// 0x0004 (0x0004 - 0x0000)
struct AIHotSpotSlot_GetSlotIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_GetSlotIndex) == 0x000004, "Wrong alignment on AIHotSpotSlot_GetSlotIndex");
static_assert(sizeof(AIHotSpotSlot_GetSlotIndex) == 0x000004, "Wrong size on AIHotSpotSlot_GetSlotIndex");
static_assert(offsetof(AIHotSpotSlot_GetSlotIndex, ReturnValue) == 0x000000, "Member 'AIHotSpotSlot_GetSlotIndex::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpotSlot.GetSlotLocation
// 0x000C (0x000C - 0x0000)
struct AIHotSpotSlot_GetSlotLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_GetSlotLocation) == 0x000004, "Wrong alignment on AIHotSpotSlot_GetSlotLocation");
static_assert(sizeof(AIHotSpotSlot_GetSlotLocation) == 0x00000C, "Wrong size on AIHotSpotSlot_GetSlotLocation");
static_assert(offsetof(AIHotSpotSlot_GetSlotLocation, ReturnValue) == 0x000000, "Member 'AIHotSpotSlot_GetSlotLocation::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpotSlot.GetSlotOwner
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpotSlot_GetSlotOwner final
{
public:
	class AAIController*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_GetSlotOwner) == 0x000008, "Wrong alignment on AIHotSpotSlot_GetSlotOwner");
static_assert(sizeof(AIHotSpotSlot_GetSlotOwner) == 0x000008, "Wrong size on AIHotSpotSlot_GetSlotOwner");
static_assert(offsetof(AIHotSpotSlot_GetSlotOwner, ReturnValue) == 0x000000, "Member 'AIHotSpotSlot_GetSlotOwner::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpotSlot.GetSlotRadius
// 0x0004 (0x0004 - 0x0000)
struct AIHotSpotSlot_GetSlotRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_GetSlotRadius) == 0x000004, "Wrong alignment on AIHotSpotSlot_GetSlotRadius");
static_assert(sizeof(AIHotSpotSlot_GetSlotRadius) == 0x000004, "Wrong size on AIHotSpotSlot_GetSlotRadius");
static_assert(offsetof(AIHotSpotSlot_GetSlotRadius, ReturnValue) == 0x000000, "Member 'AIHotSpotSlot_GetSlotRadius::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpotSlot.GetSlotRotation
// 0x000C (0x000C - 0x0000)
struct AIHotSpotSlot_GetSlotRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_GetSlotRotation) == 0x000004, "Wrong alignment on AIHotSpotSlot_GetSlotRotation");
static_assert(sizeof(AIHotSpotSlot_GetSlotRotation) == 0x00000C, "Wrong size on AIHotSpotSlot_GetSlotRotation");
static_assert(offsetof(AIHotSpotSlot_GetSlotRotation, ReturnValue) == 0x000000, "Member 'AIHotSpotSlot_GetSlotRotation::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpotSlot.GetSlotState
// 0x0001 (0x0001 - 0x0000)
struct AIHotSpotSlot_GetSlotState final
{
public:
	EAIHotSpotSlot                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_GetSlotState) == 0x000001, "Wrong alignment on AIHotSpotSlot_GetSlotState");
static_assert(sizeof(AIHotSpotSlot_GetSlotState) == 0x000001, "Wrong size on AIHotSpotSlot_GetSlotState");
static_assert(offsetof(AIHotSpotSlot_GetSlotState, ReturnValue) == 0x000000, "Member 'AIHotSpotSlot_GetSlotState::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpotSlot.GetSlotUserId
// 0x0004 (0x0004 - 0x0000)
struct AIHotSpotSlot_GetSlotUserId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_GetSlotUserId) == 0x000004, "Wrong alignment on AIHotSpotSlot_GetSlotUserId");
static_assert(sizeof(AIHotSpotSlot_GetSlotUserId) == 0x000004, "Wrong size on AIHotSpotSlot_GetSlotUserId");
static_assert(offsetof(AIHotSpotSlot_GetSlotUserId, ReturnValue) == 0x000000, "Member 'AIHotSpotSlot_GetSlotUserId::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpotSlot.HasUserId
// 0x0001 (0x0001 - 0x0000)
struct AIHotSpotSlot_HasUserId final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_HasUserId) == 0x000001, "Wrong alignment on AIHotSpotSlot_HasUserId");
static_assert(sizeof(AIHotSpotSlot_HasUserId) == 0x000001, "Wrong size on AIHotSpotSlot_HasUserId");
static_assert(offsetof(AIHotSpotSlot_HasUserId, ReturnValue) == 0x000000, "Member 'AIHotSpotSlot_HasUserId::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpotSlot.IsAIAllowed
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpotSlot_IsAIAllowed final
{
public:
	const class AAIController*                    AI;                                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpotSlot_IsAIAllowed) == 0x000008, "Wrong alignment on AIHotSpotSlot_IsAIAllowed");
static_assert(sizeof(AIHotSpotSlot_IsAIAllowed) == 0x000010, "Wrong size on AIHotSpotSlot_IsAIAllowed");
static_assert(offsetof(AIHotSpotSlot_IsAIAllowed, AI) == 0x000000, "Member 'AIHotSpotSlot_IsAIAllowed::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpotSlot_IsAIAllowed, ReturnValue) == 0x000008, "Member 'AIHotSpotSlot_IsAIAllowed::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpotSlot.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct AIHotSpotSlot_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_IsEnabled) == 0x000001, "Wrong alignment on AIHotSpotSlot_IsEnabled");
static_assert(sizeof(AIHotSpotSlot_IsEnabled) == 0x000001, "Wrong size on AIHotSpotSlot_IsEnabled");
static_assert(offsetof(AIHotSpotSlot_IsEnabled, ReturnValue) == 0x000000, "Member 'AIHotSpotSlot_IsEnabled::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTooltip.SetLocalizationFloat
// 0x0018 (0x0018 - 0x0000)
struct FortTooltip_SetLocalizationFloat final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTooltip_SetLocalizationFloat) == 0x000008, "Wrong alignment on FortTooltip_SetLocalizationFloat");
static_assert(sizeof(FortTooltip_SetLocalizationFloat) == 0x000018, "Wrong size on FortTooltip_SetLocalizationFloat");
static_assert(offsetof(FortTooltip_SetLocalizationFloat, Param_Name) == 0x000000, "Member 'FortTooltip_SetLocalizationFloat::Param_Name' has a wrong offset!");
static_assert(offsetof(FortTooltip_SetLocalizationFloat, Value) == 0x000010, "Member 'FortTooltip_SetLocalizationFloat::Value' has a wrong offset!");

// Function FortniteGame.FortTooltip.SetLocalizationInt
// 0x0018 (0x0018 - 0x0000)
struct FortTooltip_SetLocalizationInt final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTooltip_SetLocalizationInt) == 0x000008, "Wrong alignment on FortTooltip_SetLocalizationInt");
static_assert(sizeof(FortTooltip_SetLocalizationInt) == 0x000018, "Wrong size on FortTooltip_SetLocalizationInt");
static_assert(offsetof(FortTooltip_SetLocalizationInt, Param_Name) == 0x000000, "Member 'FortTooltip_SetLocalizationInt::Param_Name' has a wrong offset!");
static_assert(offsetof(FortTooltip_SetLocalizationInt, Value) == 0x000010, "Member 'FortTooltip_SetLocalizationInt::Value' has a wrong offset!");

// Function FortniteGame.FortTooltip.SetLocalizationText
// 0x0028 (0x0028 - 0x0000)
struct FortTooltip_SetLocalizationText final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Value;                                             // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTooltip_SetLocalizationText) == 0x000008, "Wrong alignment on FortTooltip_SetLocalizationText");
static_assert(sizeof(FortTooltip_SetLocalizationText) == 0x000028, "Wrong size on FortTooltip_SetLocalizationText");
static_assert(offsetof(FortTooltip_SetLocalizationText, Param_Name) == 0x000000, "Member 'FortTooltip_SetLocalizationText::Param_Name' has a wrong offset!");
static_assert(offsetof(FortTooltip_SetLocalizationText, Value) == 0x000010, "Member 'FortTooltip_SetLocalizationText::Value' has a wrong offset!");

// Function FortniteGame.FortTooltip.BP_GetNumericValue
// 0x0028 (0x0028 - 0x0000)
struct FortTooltip_BP_GetNumericValue final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVal;                                            // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTooltip_BP_GetNumericValue) == 0x000008, "Wrong alignment on FortTooltip_BP_GetNumericValue");
static_assert(sizeof(FortTooltip_BP_GetNumericValue) == 0x000028, "Wrong size on FortTooltip_BP_GetNumericValue");
static_assert(offsetof(FortTooltip_BP_GetNumericValue, ObjectToDescribe) == 0x000000, "Member 'FortTooltip_BP_GetNumericValue::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortTooltip_BP_GetNumericValue, Tag) == 0x000008, "Member 'FortTooltip_BP_GetNumericValue::Tag' has a wrong offset!");
static_assert(offsetof(FortTooltip_BP_GetNumericValue, Context) == 0x000010, "Member 'FortTooltip_BP_GetNumericValue::Context' has a wrong offset!");
static_assert(offsetof(FortTooltip_BP_GetNumericValue, Token) == 0x000018, "Member 'FortTooltip_BP_GetNumericValue::Token' has a wrong offset!");
static_assert(offsetof(FortTooltip_BP_GetNumericValue, OutVal) == 0x000020, "Member 'FortTooltip_BP_GetNumericValue::OutVal' has a wrong offset!");
static_assert(offsetof(FortTooltip_BP_GetNumericValue, ReturnValue) == 0x000024, "Member 'FortTooltip_BP_GetNumericValue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTooltip.BP_GetTextForToken
// 0x0040 (0x0040 - 0x0000)
struct FortTooltip_BP_GetTextForToken final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTooltip_BP_GetTextForToken) == 0x000008, "Wrong alignment on FortTooltip_BP_GetTextForToken");
static_assert(sizeof(FortTooltip_BP_GetTextForToken) == 0x000040, "Wrong size on FortTooltip_BP_GetTextForToken");
static_assert(offsetof(FortTooltip_BP_GetTextForToken, ObjectToDescribe) == 0x000000, "Member 'FortTooltip_BP_GetTextForToken::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortTooltip_BP_GetTextForToken, Tag) == 0x000008, "Member 'FortTooltip_BP_GetTextForToken::Tag' has a wrong offset!");
static_assert(offsetof(FortTooltip_BP_GetTextForToken, Context) == 0x000010, "Member 'FortTooltip_BP_GetTextForToken::Context' has a wrong offset!");
static_assert(offsetof(FortTooltip_BP_GetTextForToken, Token) == 0x000018, "Member 'FortTooltip_BP_GetTextForToken::Token' has a wrong offset!");
static_assert(offsetof(FortTooltip_BP_GetTextForToken, OutText) == 0x000020, "Member 'FortTooltip_BP_GetTextForToken::OutText' has a wrong offset!");
static_assert(offsetof(FortTooltip_BP_GetTextForToken, ReturnValue) == 0x000038, "Member 'FortTooltip_BP_GetTextForToken::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTooltip.BP_GetTokenizedDescriptionText
// 0x0030 (0x0030 - 0x0000)
struct FortTooltip_BP_GetTokenizedDescriptionText final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           OutDescription;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTooltip_BP_GetTokenizedDescriptionText) == 0x000008, "Wrong alignment on FortTooltip_BP_GetTokenizedDescriptionText");
static_assert(sizeof(FortTooltip_BP_GetTokenizedDescriptionText) == 0x000030, "Wrong size on FortTooltip_BP_GetTokenizedDescriptionText");
static_assert(offsetof(FortTooltip_BP_GetTokenizedDescriptionText, ObjectToDescribe) == 0x000000, "Member 'FortTooltip_BP_GetTokenizedDescriptionText::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortTooltip_BP_GetTokenizedDescriptionText, Tag) == 0x000008, "Member 'FortTooltip_BP_GetTokenizedDescriptionText::Tag' has a wrong offset!");
static_assert(offsetof(FortTooltip_BP_GetTokenizedDescriptionText, Context) == 0x000010, "Member 'FortTooltip_BP_GetTokenizedDescriptionText::Context' has a wrong offset!");
static_assert(offsetof(FortTooltip_BP_GetTokenizedDescriptionText, OutDescription) == 0x000018, "Member 'FortTooltip_BP_GetTokenizedDescriptionText::OutDescription' has a wrong offset!");
static_assert(offsetof(FortTooltip_BP_GetTokenizedDescriptionText, ReturnValue) == 0x000028, "Member 'FortTooltip_BP_GetTokenizedDescriptionText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTooltip.BP_GetValueData
// 0x0090 (0x0090 - 0x0000)
struct FortTooltip_BP_GetValueData final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0010(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortTooltipValueData                  OutData;                                           // 0x0018(0x0070)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTooltip_BP_GetValueData) == 0x000008, "Wrong alignment on FortTooltip_BP_GetValueData");
static_assert(sizeof(FortTooltip_BP_GetValueData) == 0x000090, "Wrong size on FortTooltip_BP_GetValueData");
static_assert(offsetof(FortTooltip_BP_GetValueData, ObjectToDescribe) == 0x000000, "Member 'FortTooltip_BP_GetValueData::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortTooltip_BP_GetValueData, Context) == 0x000008, "Member 'FortTooltip_BP_GetValueData::Context' has a wrong offset!");
static_assert(offsetof(FortTooltip_BP_GetValueData, Token) == 0x000010, "Member 'FortTooltip_BP_GetValueData::Token' has a wrong offset!");
static_assert(offsetof(FortTooltip_BP_GetValueData, OutData) == 0x000018, "Member 'FortTooltip_BP_GetValueData::OutData' has a wrong offset!");
static_assert(offsetof(FortTooltip_BP_GetValueData, ReturnValue) == 0x000088, "Member 'FortTooltip_BP_GetValueData::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTooltip.GetNumericValue
// 0x0028 (0x0028 - 0x0000)
struct FortTooltip_GetNumericValue final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVal;                                            // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTooltip_GetNumericValue) == 0x000008, "Wrong alignment on FortTooltip_GetNumericValue");
static_assert(sizeof(FortTooltip_GetNumericValue) == 0x000028, "Wrong size on FortTooltip_GetNumericValue");
static_assert(offsetof(FortTooltip_GetNumericValue, ObjectToDescribe) == 0x000000, "Member 'FortTooltip_GetNumericValue::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetNumericValue, Tag) == 0x000008, "Member 'FortTooltip_GetNumericValue::Tag' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetNumericValue, Context) == 0x000010, "Member 'FortTooltip_GetNumericValue::Context' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetNumericValue, Token) == 0x000018, "Member 'FortTooltip_GetNumericValue::Token' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetNumericValue, OutVal) == 0x000020, "Member 'FortTooltip_GetNumericValue::OutVal' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetNumericValue, ReturnValue) == 0x000024, "Member 'FortTooltip_GetNumericValue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTooltip.GetTextForToken
// 0x0040 (0x0040 - 0x0000)
struct FortTooltip_GetTextForToken final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTooltip_GetTextForToken) == 0x000008, "Wrong alignment on FortTooltip_GetTextForToken");
static_assert(sizeof(FortTooltip_GetTextForToken) == 0x000040, "Wrong size on FortTooltip_GetTextForToken");
static_assert(offsetof(FortTooltip_GetTextForToken, ObjectToDescribe) == 0x000000, "Member 'FortTooltip_GetTextForToken::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetTextForToken, Tag) == 0x000008, "Member 'FortTooltip_GetTextForToken::Tag' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetTextForToken, Context) == 0x000010, "Member 'FortTooltip_GetTextForToken::Context' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetTextForToken, Token) == 0x000018, "Member 'FortTooltip_GetTextForToken::Token' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetTextForToken, OutText) == 0x000020, "Member 'FortTooltip_GetTextForToken::OutText' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetTextForToken, ReturnValue) == 0x000038, "Member 'FortTooltip_GetTextForToken::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTooltip.GetTokenizedDescriptionText
// 0x0030 (0x0030 - 0x0000)
struct FortTooltip_GetTokenizedDescriptionText final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           OutDescription;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTooltip_GetTokenizedDescriptionText) == 0x000008, "Wrong alignment on FortTooltip_GetTokenizedDescriptionText");
static_assert(sizeof(FortTooltip_GetTokenizedDescriptionText) == 0x000030, "Wrong size on FortTooltip_GetTokenizedDescriptionText");
static_assert(offsetof(FortTooltip_GetTokenizedDescriptionText, ObjectToDescribe) == 0x000000, "Member 'FortTooltip_GetTokenizedDescriptionText::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetTokenizedDescriptionText, Tag) == 0x000008, "Member 'FortTooltip_GetTokenizedDescriptionText::Tag' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetTokenizedDescriptionText, Context) == 0x000010, "Member 'FortTooltip_GetTokenizedDescriptionText::Context' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetTokenizedDescriptionText, OutDescription) == 0x000018, "Member 'FortTooltip_GetTokenizedDescriptionText::OutDescription' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetTokenizedDescriptionText, ReturnValue) == 0x000028, "Member 'FortTooltip_GetTokenizedDescriptionText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTooltip.GetValueData
// 0x0090 (0x0090 - 0x0000)
struct FortTooltip_GetValueData final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0010(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortTooltipValueData                  OutData;                                           // 0x0018(0x0070)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTooltip_GetValueData) == 0x000008, "Wrong alignment on FortTooltip_GetValueData");
static_assert(sizeof(FortTooltip_GetValueData) == 0x000090, "Wrong size on FortTooltip_GetValueData");
static_assert(offsetof(FortTooltip_GetValueData, ObjectToDescribe) == 0x000000, "Member 'FortTooltip_GetValueData::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetValueData, Context) == 0x000008, "Member 'FortTooltip_GetValueData::Context' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetValueData, Token) == 0x000010, "Member 'FortTooltip_GetValueData::Token' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetValueData, OutData) == 0x000018, "Member 'FortTooltip_GetValueData::OutData' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetValueData, ReturnValue) == 0x000088, "Member 'FortTooltip_GetValueData::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItemDefinitionTooltip.GetTextForToken
// 0x0040 (0x0040 - 0x0000)
struct FortItemDefinitionTooltip_GetTextForToken final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemDefinitionTooltip_GetTextForToken) == 0x000008, "Wrong alignment on FortItemDefinitionTooltip_GetTextForToken");
static_assert(sizeof(FortItemDefinitionTooltip_GetTextForToken) == 0x000040, "Wrong size on FortItemDefinitionTooltip_GetTextForToken");
static_assert(offsetof(FortItemDefinitionTooltip_GetTextForToken, ObjectToDescribe) == 0x000000, "Member 'FortItemDefinitionTooltip_GetTextForToken::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortItemDefinitionTooltip_GetTextForToken, Tag) == 0x000008, "Member 'FortItemDefinitionTooltip_GetTextForToken::Tag' has a wrong offset!");
static_assert(offsetof(FortItemDefinitionTooltip_GetTextForToken, Context) == 0x000010, "Member 'FortItemDefinitionTooltip_GetTextForToken::Context' has a wrong offset!");
static_assert(offsetof(FortItemDefinitionTooltip_GetTextForToken, Token) == 0x000018, "Member 'FortItemDefinitionTooltip_GetTextForToken::Token' has a wrong offset!");
static_assert(offsetof(FortItemDefinitionTooltip_GetTextForToken, OutText) == 0x000020, "Member 'FortItemDefinitionTooltip_GetTextForToken::OutText' has a wrong offset!");
static_assert(offsetof(FortItemDefinitionTooltip_GetTextForToken, ReturnValue) == 0x000038, "Member 'FortItemDefinitionTooltip_GetTextForToken::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItemDefinitionTooltip.GetTokenizedDescriptionText
// 0x0030 (0x0030 - 0x0000)
struct FortItemDefinitionTooltip_GetTokenizedDescriptionText final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           OutDescription;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemDefinitionTooltip_GetTokenizedDescriptionText) == 0x000008, "Wrong alignment on FortItemDefinitionTooltip_GetTokenizedDescriptionText");
static_assert(sizeof(FortItemDefinitionTooltip_GetTokenizedDescriptionText) == 0x000030, "Wrong size on FortItemDefinitionTooltip_GetTokenizedDescriptionText");
static_assert(offsetof(FortItemDefinitionTooltip_GetTokenizedDescriptionText, ObjectToDescribe) == 0x000000, "Member 'FortItemDefinitionTooltip_GetTokenizedDescriptionText::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortItemDefinitionTooltip_GetTokenizedDescriptionText, Tag) == 0x000008, "Member 'FortItemDefinitionTooltip_GetTokenizedDescriptionText::Tag' has a wrong offset!");
static_assert(offsetof(FortItemDefinitionTooltip_GetTokenizedDescriptionText, Context) == 0x000010, "Member 'FortItemDefinitionTooltip_GetTokenizedDescriptionText::Context' has a wrong offset!");
static_assert(offsetof(FortItemDefinitionTooltip_GetTokenizedDescriptionText, OutDescription) == 0x000018, "Member 'FortItemDefinitionTooltip_GetTokenizedDescriptionText::OutDescription' has a wrong offset!");
static_assert(offsetof(FortItemDefinitionTooltip_GetTokenizedDescriptionText, ReturnValue) == 0x000028, "Member 'FortItemDefinitionTooltip_GetTokenizedDescriptionText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWorldItemDefinitionTooltip.GetTextForToken
// 0x0040 (0x0040 - 0x0000)
struct FortWorldItemDefinitionTooltip_GetTextForToken final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortWorldItemDefinitionTooltip_GetTextForToken) == 0x000008, "Wrong alignment on FortWorldItemDefinitionTooltip_GetTextForToken");
static_assert(sizeof(FortWorldItemDefinitionTooltip_GetTextForToken) == 0x000040, "Wrong size on FortWorldItemDefinitionTooltip_GetTextForToken");
static_assert(offsetof(FortWorldItemDefinitionTooltip_GetTextForToken, ObjectToDescribe) == 0x000000, "Member 'FortWorldItemDefinitionTooltip_GetTextForToken::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortWorldItemDefinitionTooltip_GetTextForToken, Tag) == 0x000008, "Member 'FortWorldItemDefinitionTooltip_GetTextForToken::Tag' has a wrong offset!");
static_assert(offsetof(FortWorldItemDefinitionTooltip_GetTextForToken, Context) == 0x000010, "Member 'FortWorldItemDefinitionTooltip_GetTextForToken::Context' has a wrong offset!");
static_assert(offsetof(FortWorldItemDefinitionTooltip_GetTextForToken, Token) == 0x000018, "Member 'FortWorldItemDefinitionTooltip_GetTextForToken::Token' has a wrong offset!");
static_assert(offsetof(FortWorldItemDefinitionTooltip_GetTextForToken, OutText) == 0x000020, "Member 'FortWorldItemDefinitionTooltip_GetTextForToken::OutText' has a wrong offset!");
static_assert(offsetof(FortWorldItemDefinitionTooltip_GetTextForToken, ReturnValue) == 0x000038, "Member 'FortWorldItemDefinitionTooltip_GetTextForToken::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWorldItemDefinitionTooltip.GetTokenizedDescriptionText
// 0x0030 (0x0030 - 0x0000)
struct FortWorldItemDefinitionTooltip_GetTokenizedDescriptionText final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           OutDescription;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortWorldItemDefinitionTooltip_GetTokenizedDescriptionText) == 0x000008, "Wrong alignment on FortWorldItemDefinitionTooltip_GetTokenizedDescriptionText");
static_assert(sizeof(FortWorldItemDefinitionTooltip_GetTokenizedDescriptionText) == 0x000030, "Wrong size on FortWorldItemDefinitionTooltip_GetTokenizedDescriptionText");
static_assert(offsetof(FortWorldItemDefinitionTooltip_GetTokenizedDescriptionText, ObjectToDescribe) == 0x000000, "Member 'FortWorldItemDefinitionTooltip_GetTokenizedDescriptionText::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortWorldItemDefinitionTooltip_GetTokenizedDescriptionText, Tag) == 0x000008, "Member 'FortWorldItemDefinitionTooltip_GetTokenizedDescriptionText::Tag' has a wrong offset!");
static_assert(offsetof(FortWorldItemDefinitionTooltip_GetTokenizedDescriptionText, Context) == 0x000010, "Member 'FortWorldItemDefinitionTooltip_GetTokenizedDescriptionText::Context' has a wrong offset!");
static_assert(offsetof(FortWorldItemDefinitionTooltip_GetTokenizedDescriptionText, OutDescription) == 0x000018, "Member 'FortWorldItemDefinitionTooltip_GetTokenizedDescriptionText::OutDescription' has a wrong offset!");
static_assert(offsetof(FortWorldItemDefinitionTooltip_GetTokenizedDescriptionText, ReturnValue) == 0x000028, "Member 'FortWorldItemDefinitionTooltip_GetTokenizedDescriptionText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortConsumableItemDefinitionTooltip.GetTextForToken
// 0x0040 (0x0040 - 0x0000)
struct FortConsumableItemDefinitionTooltip_GetTextForToken final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortConsumableItemDefinitionTooltip_GetTextForToken) == 0x000008, "Wrong alignment on FortConsumableItemDefinitionTooltip_GetTextForToken");
static_assert(sizeof(FortConsumableItemDefinitionTooltip_GetTextForToken) == 0x000040, "Wrong size on FortConsumableItemDefinitionTooltip_GetTextForToken");
static_assert(offsetof(FortConsumableItemDefinitionTooltip_GetTextForToken, ObjectToDescribe) == 0x000000, "Member 'FortConsumableItemDefinitionTooltip_GetTextForToken::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortConsumableItemDefinitionTooltip_GetTextForToken, Tag) == 0x000008, "Member 'FortConsumableItemDefinitionTooltip_GetTextForToken::Tag' has a wrong offset!");
static_assert(offsetof(FortConsumableItemDefinitionTooltip_GetTextForToken, Context) == 0x000010, "Member 'FortConsumableItemDefinitionTooltip_GetTextForToken::Context' has a wrong offset!");
static_assert(offsetof(FortConsumableItemDefinitionTooltip_GetTextForToken, Token) == 0x000018, "Member 'FortConsumableItemDefinitionTooltip_GetTextForToken::Token' has a wrong offset!");
static_assert(offsetof(FortConsumableItemDefinitionTooltip_GetTextForToken, OutText) == 0x000020, "Member 'FortConsumableItemDefinitionTooltip_GetTextForToken::OutText' has a wrong offset!");
static_assert(offsetof(FortConsumableItemDefinitionTooltip_GetTextForToken, ReturnValue) == 0x000038, "Member 'FortConsumableItemDefinitionTooltip_GetTextForToken::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortConsumableItemDefinitionTooltip.GetTokenizedDescriptionText
// 0x0030 (0x0030 - 0x0000)
struct FortConsumableItemDefinitionTooltip_GetTokenizedDescriptionText final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           OutDescription;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortConsumableItemDefinitionTooltip_GetTokenizedDescriptionText) == 0x000008, "Wrong alignment on FortConsumableItemDefinitionTooltip_GetTokenizedDescriptionText");
static_assert(sizeof(FortConsumableItemDefinitionTooltip_GetTokenizedDescriptionText) == 0x000030, "Wrong size on FortConsumableItemDefinitionTooltip_GetTokenizedDescriptionText");
static_assert(offsetof(FortConsumableItemDefinitionTooltip_GetTokenizedDescriptionText, ObjectToDescribe) == 0x000000, "Member 'FortConsumableItemDefinitionTooltip_GetTokenizedDescriptionText::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortConsumableItemDefinitionTooltip_GetTokenizedDescriptionText, Tag) == 0x000008, "Member 'FortConsumableItemDefinitionTooltip_GetTokenizedDescriptionText::Tag' has a wrong offset!");
static_assert(offsetof(FortConsumableItemDefinitionTooltip_GetTokenizedDescriptionText, Context) == 0x000010, "Member 'FortConsumableItemDefinitionTooltip_GetTokenizedDescriptionText::Context' has a wrong offset!");
static_assert(offsetof(FortConsumableItemDefinitionTooltip_GetTokenizedDescriptionText, OutDescription) == 0x000018, "Member 'FortConsumableItemDefinitionTooltip_GetTokenizedDescriptionText::OutDescription' has a wrong offset!");
static_assert(offsetof(FortConsumableItemDefinitionTooltip_GetTokenizedDescriptionText, ReturnValue) == 0x000028, "Member 'FortConsumableItemDefinitionTooltip_GetTokenizedDescriptionText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortUIZone.ToggleTargetInfoLock
// 0x0001 (0x0001 - 0x0000)
struct FortUIZone_ToggleTargetInfoLock final
{
public:
	bool                                          bTraceComplex;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIZone_ToggleTargetInfoLock) == 0x000001, "Wrong alignment on FortUIZone_ToggleTargetInfoLock");
static_assert(sizeof(FortUIZone_ToggleTargetInfoLock) == 0x000001, "Wrong size on FortUIZone_ToggleTargetInfoLock");
static_assert(offsetof(FortUIZone_ToggleTargetInfoLock, bTraceComplex) == 0x000000, "Member 'FortUIZone_ToggleTargetInfoLock::bTraceComplex' has a wrong offset!");

// Function FortniteGame.FortTeamActorInterface.GetTeam
// 0x0001 (0x0001 - 0x0000)
struct FortTeamActorInterface_GetTeam final
{
public:
	EFortTeam                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTeamActorInterface_GetTeam) == 0x000001, "Wrong alignment on FortTeamActorInterface_GetTeam");
static_assert(sizeof(FortTeamActorInterface_GetTeam) == 0x000001, "Wrong size on FortTeamActorInterface_GetTeam");
static_assert(offsetof(FortTeamActorInterface_GetTeam, ReturnValue) == 0x000000, "Member 'FortTeamActorInterface_GetTeam::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWorldItemDefinition.CanBeDisassembled
// 0x0001 (0x0001 - 0x0000)
struct FortWorldItemDefinition_CanBeDisassembled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWorldItemDefinition_CanBeDisassembled) == 0x000001, "Wrong alignment on FortWorldItemDefinition_CanBeDisassembled");
static_assert(sizeof(FortWorldItemDefinition_CanBeDisassembled) == 0x000001, "Wrong size on FortWorldItemDefinition_CanBeDisassembled");
static_assert(offsetof(FortWorldItemDefinition_CanBeDisassembled, ReturnValue) == 0x000000, "Member 'FortWorldItemDefinition_CanBeDisassembled::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWorldItemDefinition.GetAmmoWorldItemDefinition_BP
// 0x0008 (0x0008 - 0x0000)
struct FortWorldItemDefinition_GetAmmoWorldItemDefinition_BP final
{
public:
	class UFortWorldItemDefinition*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWorldItemDefinition_GetAmmoWorldItemDefinition_BP) == 0x000008, "Wrong alignment on FortWorldItemDefinition_GetAmmoWorldItemDefinition_BP");
static_assert(sizeof(FortWorldItemDefinition_GetAmmoWorldItemDefinition_BP) == 0x000008, "Wrong size on FortWorldItemDefinition_GetAmmoWorldItemDefinition_BP");
static_assert(offsetof(FortWorldItemDefinition_GetAmmoWorldItemDefinition_BP, ReturnValue) == 0x000000, "Member 'FortWorldItemDefinition_GetAmmoWorldItemDefinition_BP::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWorldItemDefinition.GetDPSAtLevel
// 0x0008 (0x0008 - 0x0000)
struct FortWorldItemDefinition_GetDPSAtLevel final
{
public:
	int32                                         ItemLevel;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWorldItemDefinition_GetDPSAtLevel) == 0x000004, "Wrong alignment on FortWorldItemDefinition_GetDPSAtLevel");
static_assert(sizeof(FortWorldItemDefinition_GetDPSAtLevel) == 0x000008, "Wrong size on FortWorldItemDefinition_GetDPSAtLevel");
static_assert(offsetof(FortWorldItemDefinition_GetDPSAtLevel, ItemLevel) == 0x000000, "Member 'FortWorldItemDefinition_GetDPSAtLevel::ItemLevel' has a wrong offset!");
static_assert(offsetof(FortWorldItemDefinition_GetDPSAtLevel, ReturnValue) == 0x000004, "Member 'FortWorldItemDefinition_GetDPSAtLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWorldItemDefinition.GetFabricationValue
// 0x0008 (0x0008 - 0x0000)
struct FortWorldItemDefinition_GetFabricationValue final
{
public:
	bool                                          bUseDisintegrationOverride;                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWorldItemDefinition_GetFabricationValue) == 0x000004, "Wrong alignment on FortWorldItemDefinition_GetFabricationValue");
static_assert(sizeof(FortWorldItemDefinition_GetFabricationValue) == 0x000008, "Wrong size on FortWorldItemDefinition_GetFabricationValue");
static_assert(offsetof(FortWorldItemDefinition_GetFabricationValue, bUseDisintegrationOverride) == 0x000000, "Member 'FortWorldItemDefinition_GetFabricationValue::bUseDisintegrationOverride' has a wrong offset!");
static_assert(offsetof(FortWorldItemDefinition_GetFabricationValue, ReturnValue) == 0x000004, "Member 'FortWorldItemDefinition_GetFabricationValue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWorldItemDefinition.GetMaxDurability
// 0x0008 (0x0008 - 0x0000)
struct FortWorldItemDefinition_GetMaxDurability final
{
public:
	int32                                         ItemLevel;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWorldItemDefinition_GetMaxDurability) == 0x000004, "Wrong alignment on FortWorldItemDefinition_GetMaxDurability");
static_assert(sizeof(FortWorldItemDefinition_GetMaxDurability) == 0x000008, "Wrong size on FortWorldItemDefinition_GetMaxDurability");
static_assert(offsetof(FortWorldItemDefinition_GetMaxDurability, ItemLevel) == 0x000000, "Member 'FortWorldItemDefinition_GetMaxDurability::ItemLevel' has a wrong offset!");
static_assert(offsetof(FortWorldItemDefinition_GetMaxDurability, ReturnValue) == 0x000004, "Member 'FortWorldItemDefinition_GetMaxDurability::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponItemDefinition.GetDisplayTierAsText
// 0x0020 (0x0020 - 0x0000)
struct FortWeaponItemDefinition_GetDisplayTierAsText final
{
public:
	EFortDisplayTier                              Param_DisplayTier;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponItemDefinition_GetDisplayTierAsText) == 0x000008, "Wrong alignment on FortWeaponItemDefinition_GetDisplayTierAsText");
static_assert(sizeof(FortWeaponItemDefinition_GetDisplayTierAsText) == 0x000020, "Wrong size on FortWeaponItemDefinition_GetDisplayTierAsText");
static_assert(offsetof(FortWeaponItemDefinition_GetDisplayTierAsText, Param_DisplayTier) == 0x000000, "Member 'FortWeaponItemDefinition_GetDisplayTierAsText::Param_DisplayTier' has a wrong offset!");
static_assert(offsetof(FortWeaponItemDefinition_GetDisplayTierAsText, ReturnValue) == 0x000008, "Member 'FortWeaponItemDefinition_GetDisplayTierAsText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponItemDefinition.GetAnalyticTags
// 0x0020 (0x0020 - 0x0000)
struct FortWeaponItemDefinition_GetAnalyticTags final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponItemDefinition_GetAnalyticTags) == 0x000008, "Wrong alignment on FortWeaponItemDefinition_GetAnalyticTags");
static_assert(sizeof(FortWeaponItemDefinition_GetAnalyticTags) == 0x000020, "Wrong size on FortWeaponItemDefinition_GetAnalyticTags");
static_assert(offsetof(FortWeaponItemDefinition_GetAnalyticTags, ReturnValue) == 0x000000, "Member 'FortWeaponItemDefinition_GetAnalyticTags::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponItemDefinition.GetBaseAlteration
// 0x0008 (0x0008 - 0x0000)
struct FortWeaponItemDefinition_GetBaseAlteration final
{
public:
	class UFortAlterationItemDefinition*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponItemDefinition_GetBaseAlteration) == 0x000008, "Wrong alignment on FortWeaponItemDefinition_GetBaseAlteration");
static_assert(sizeof(FortWeaponItemDefinition_GetBaseAlteration) == 0x000008, "Wrong size on FortWeaponItemDefinition_GetBaseAlteration");
static_assert(offsetof(FortWeaponItemDefinition_GetBaseAlteration, ReturnValue) == 0x000000, "Member 'FortWeaponItemDefinition_GetBaseAlteration::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponItemDefinition.GetBaseCosmeticAlteration
// 0x0008 (0x0008 - 0x0000)
struct FortWeaponItemDefinition_GetBaseCosmeticAlteration final
{
public:
	class UFortAlterationItemDefinition*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponItemDefinition_GetBaseCosmeticAlteration) == 0x000008, "Wrong alignment on FortWeaponItemDefinition_GetBaseCosmeticAlteration");
static_assert(sizeof(FortWeaponItemDefinition_GetBaseCosmeticAlteration) == 0x000008, "Wrong size on FortWeaponItemDefinition_GetBaseCosmeticAlteration");
static_assert(offsetof(FortWeaponItemDefinition_GetBaseCosmeticAlteration, ReturnValue) == 0x000000, "Member 'FortWeaponItemDefinition_GetBaseCosmeticAlteration::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponItemDefinition.GetDegradedPercentage
// 0x0004 (0x0004 - 0x0000)
struct FortWeaponItemDefinition_GetDegradedPercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponItemDefinition_GetDegradedPercentage) == 0x000004, "Wrong alignment on FortWeaponItemDefinition_GetDegradedPercentage");
static_assert(sizeof(FortWeaponItemDefinition_GetDegradedPercentage) == 0x000004, "Wrong size on FortWeaponItemDefinition_GetDegradedPercentage");
static_assert(offsetof(FortWeaponItemDefinition_GetDegradedPercentage, ReturnValue) == 0x000000, "Member 'FortWeaponItemDefinition_GetDegradedPercentage::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponItemDefinition.GetDisplayTier
// 0x0001 (0x0001 - 0x0000)
struct FortWeaponItemDefinition_GetDisplayTier final
{
public:
	EFortDisplayTier                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponItemDefinition_GetDisplayTier) == 0x000001, "Wrong alignment on FortWeaponItemDefinition_GetDisplayTier");
static_assert(sizeof(FortWeaponItemDefinition_GetDisplayTier) == 0x000001, "Wrong size on FortWeaponItemDefinition_GetDisplayTier");
static_assert(offsetof(FortWeaponItemDefinition_GetDisplayTier, ReturnValue) == 0x000000, "Member 'FortWeaponItemDefinition_GetDisplayTier::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponItemDefinition.GetEquippedAbilities
// 0x0010 (0x0010 - 0x0000)
struct FortWeaponItemDefinition_GetEquippedAbilities final
{
public:
	TArray<TSubclassOf<class UFortGameplayAbility>> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponItemDefinition_GetEquippedAbilities) == 0x000008, "Wrong alignment on FortWeaponItemDefinition_GetEquippedAbilities");
static_assert(sizeof(FortWeaponItemDefinition_GetEquippedAbilities) == 0x000010, "Wrong size on FortWeaponItemDefinition_GetEquippedAbilities");
static_assert(offsetof(FortWeaponItemDefinition_GetEquippedAbilities, ReturnValue) == 0x000000, "Member 'FortWeaponItemDefinition_GetEquippedAbilities::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponItemDefinition.GetHitNotifyDuration
// 0x0004 (0x0004 - 0x0000)
struct FortWeaponItemDefinition_GetHitNotifyDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponItemDefinition_GetHitNotifyDuration) == 0x000004, "Wrong alignment on FortWeaponItemDefinition_GetHitNotifyDuration");
static_assert(sizeof(FortWeaponItemDefinition_GetHitNotifyDuration) == 0x000004, "Wrong size on FortWeaponItemDefinition_GetHitNotifyDuration");
static_assert(offsetof(FortWeaponItemDefinition_GetHitNotifyDuration, ReturnValue) == 0x000000, "Member 'FortWeaponItemDefinition_GetHitNotifyDuration::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponItemDefinition.GetHitNotifyImage
// 0x0008 (0x0008 - 0x0000)
struct FortWeaponItemDefinition_GetHitNotifyImage final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponItemDefinition_GetHitNotifyImage) == 0x000008, "Wrong alignment on FortWeaponItemDefinition_GetHitNotifyImage");
static_assert(sizeof(FortWeaponItemDefinition_GetHitNotifyImage) == 0x000008, "Wrong size on FortWeaponItemDefinition_GetHitNotifyImage");
static_assert(offsetof(FortWeaponItemDefinition_GetHitNotifyImage, ReturnValue) == 0x000000, "Member 'FortWeaponItemDefinition_GetHitNotifyImage::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponItemDefinition.GetHitNotifyOpacityCurve
// 0x0008 (0x0008 - 0x0000)
struct FortWeaponItemDefinition_GetHitNotifyOpacityCurve final
{
public:
	class UCurveFloat*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponItemDefinition_GetHitNotifyOpacityCurve) == 0x000008, "Wrong alignment on FortWeaponItemDefinition_GetHitNotifyOpacityCurve");
static_assert(sizeof(FortWeaponItemDefinition_GetHitNotifyOpacityCurve) == 0x000008, "Wrong size on FortWeaponItemDefinition_GetHitNotifyOpacityCurve");
static_assert(offsetof(FortWeaponItemDefinition_GetHitNotifyOpacityCurve, ReturnValue) == 0x000000, "Member 'FortWeaponItemDefinition_GetHitNotifyOpacityCurve::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponItemDefinition.GetLowAmmoPercentage
// 0x0004 (0x0004 - 0x0000)
struct FortWeaponItemDefinition_GetLowAmmoPercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponItemDefinition_GetLowAmmoPercentage) == 0x000004, "Wrong alignment on FortWeaponItemDefinition_GetLowAmmoPercentage");
static_assert(sizeof(FortWeaponItemDefinition_GetLowAmmoPercentage) == 0x000004, "Wrong size on FortWeaponItemDefinition_GetLowAmmoPercentage");
static_assert(offsetof(FortWeaponItemDefinition_GetLowAmmoPercentage, ReturnValue) == 0x000000, "Member 'FortWeaponItemDefinition_GetLowAmmoPercentage::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponItemDefinition.GetMuzzleBlockedImage
// 0x0008 (0x0008 - 0x0000)
struct FortWeaponItemDefinition_GetMuzzleBlockedImage final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponItemDefinition_GetMuzzleBlockedImage) == 0x000008, "Wrong alignment on FortWeaponItemDefinition_GetMuzzleBlockedImage");
static_assert(sizeof(FortWeaponItemDefinition_GetMuzzleBlockedImage) == 0x000008, "Wrong size on FortWeaponItemDefinition_GetMuzzleBlockedImage");
static_assert(offsetof(FortWeaponItemDefinition_GetMuzzleBlockedImage, ReturnValue) == 0x000000, "Member 'FortWeaponItemDefinition_GetMuzzleBlockedImage::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponItemDefinition.GetPrimaryFireAbility
// 0x0008 (0x0008 - 0x0000)
struct FortWeaponItemDefinition_GetPrimaryFireAbility final
{
public:
	TSubclassOf<class UFortGameplayAbility>       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponItemDefinition_GetPrimaryFireAbility) == 0x000008, "Wrong alignment on FortWeaponItemDefinition_GetPrimaryFireAbility");
static_assert(sizeof(FortWeaponItemDefinition_GetPrimaryFireAbility) == 0x000008, "Wrong size on FortWeaponItemDefinition_GetPrimaryFireAbility");
static_assert(offsetof(FortWeaponItemDefinition_GetPrimaryFireAbility, ReturnValue) == 0x000000, "Member 'FortWeaponItemDefinition_GetPrimaryFireAbility::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponItemDefinition.GetReloadAbility
// 0x0008 (0x0008 - 0x0000)
struct FortWeaponItemDefinition_GetReloadAbility final
{
public:
	TSubclassOf<class UFortGameplayAbility>       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponItemDefinition_GetReloadAbility) == 0x000008, "Wrong alignment on FortWeaponItemDefinition_GetReloadAbility");
static_assert(sizeof(FortWeaponItemDefinition_GetReloadAbility) == 0x000008, "Wrong size on FortWeaponItemDefinition_GetReloadAbility");
static_assert(offsetof(FortWeaponItemDefinition_GetReloadAbility, ReturnValue) == 0x000000, "Member 'FortWeaponItemDefinition_GetReloadAbility::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponItemDefinition.GetReticleCenterImage
// 0x0008 (0x0008 - 0x0000)
struct FortWeaponItemDefinition_GetReticleCenterImage final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponItemDefinition_GetReticleCenterImage) == 0x000008, "Wrong alignment on FortWeaponItemDefinition_GetReticleCenterImage");
static_assert(sizeof(FortWeaponItemDefinition_GetReticleCenterImage) == 0x000008, "Wrong size on FortWeaponItemDefinition_GetReticleCenterImage");
static_assert(offsetof(FortWeaponItemDefinition_GetReticleCenterImage, ReturnValue) == 0x000000, "Member 'FortWeaponItemDefinition_GetReticleCenterImage::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponItemDefinition.GetReticleCenterImageOffset
// 0x0008 (0x0008 - 0x0000)
struct FortWeaponItemDefinition_GetReticleCenterImageOffset final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponItemDefinition_GetReticleCenterImageOffset) == 0x000004, "Wrong alignment on FortWeaponItemDefinition_GetReticleCenterImageOffset");
static_assert(sizeof(FortWeaponItemDefinition_GetReticleCenterImageOffset) == 0x000008, "Wrong size on FortWeaponItemDefinition_GetReticleCenterImageOffset");
static_assert(offsetof(FortWeaponItemDefinition_GetReticleCenterImageOffset, ReturnValue) == 0x000000, "Member 'FortWeaponItemDefinition_GetReticleCenterImageOffset::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponItemDefinition.GetReticleCornerAngles
// 0x0010 (0x0010 - 0x0000)
struct FortWeaponItemDefinition_GetReticleCornerAngles final
{
public:
	TArray<float>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponItemDefinition_GetReticleCornerAngles) == 0x000008, "Wrong alignment on FortWeaponItemDefinition_GetReticleCornerAngles");
static_assert(sizeof(FortWeaponItemDefinition_GetReticleCornerAngles) == 0x000010, "Wrong size on FortWeaponItemDefinition_GetReticleCornerAngles");
static_assert(offsetof(FortWeaponItemDefinition_GetReticleCornerAngles, ReturnValue) == 0x000000, "Member 'FortWeaponItemDefinition_GetReticleCornerAngles::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponItemDefinition.GetReticleImage
// 0x0008 (0x0008 - 0x0000)
struct FortWeaponItemDefinition_GetReticleImage final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponItemDefinition_GetReticleImage) == 0x000008, "Wrong alignment on FortWeaponItemDefinition_GetReticleImage");
static_assert(sizeof(FortWeaponItemDefinition_GetReticleImage) == 0x000008, "Wrong size on FortWeaponItemDefinition_GetReticleImage");
static_assert(offsetof(FortWeaponItemDefinition_GetReticleImage, ReturnValue) == 0x000000, "Member 'FortWeaponItemDefinition_GetReticleImage::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponItemDefinition.GetSecondaryFireAbility
// 0x0008 (0x0008 - 0x0000)
struct FortWeaponItemDefinition_GetSecondaryFireAbility final
{
public:
	TSubclassOf<class UFortGameplayAbility>       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponItemDefinition_GetSecondaryFireAbility) == 0x000008, "Wrong alignment on FortWeaponItemDefinition_GetSecondaryFireAbility");
static_assert(sizeof(FortWeaponItemDefinition_GetSecondaryFireAbility) == 0x000008, "Wrong size on FortWeaponItemDefinition_GetSecondaryFireAbility");
static_assert(offsetof(FortWeaponItemDefinition_GetSecondaryFireAbility, ReturnValue) == 0x000000, "Member 'FortWeaponItemDefinition_GetSecondaryFireAbility::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponItemDefinition.GetShortDisplayName
// 0x0018 (0x0018 - 0x0000)
struct FortWeaponItemDefinition_GetShortDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponItemDefinition_GetShortDisplayName) == 0x000008, "Wrong alignment on FortWeaponItemDefinition_GetShortDisplayName");
static_assert(sizeof(FortWeaponItemDefinition_GetShortDisplayName) == 0x000018, "Wrong size on FortWeaponItemDefinition_GetShortDisplayName");
static_assert(offsetof(FortWeaponItemDefinition_GetShortDisplayName, ReturnValue) == 0x000000, "Member 'FortWeaponItemDefinition_GetShortDisplayName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponItemDefinition.GetTriggerType
// 0x0001 (0x0001 - 0x0000)
struct FortWeaponItemDefinition_GetTriggerType final
{
public:
	EFortWeaponTriggerType                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponItemDefinition_GetTriggerType) == 0x000001, "Wrong alignment on FortWeaponItemDefinition_GetTriggerType");
static_assert(sizeof(FortWeaponItemDefinition_GetTriggerType) == 0x000001, "Wrong size on FortWeaponItemDefinition_GetTriggerType");
static_assert(offsetof(FortWeaponItemDefinition_GetTriggerType, ReturnValue) == 0x000000, "Member 'FortWeaponItemDefinition_GetTriggerType::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponItemDefinition.GetWeaponActorClass
// 0x0008 (0x0008 - 0x0000)
struct FortWeaponItemDefinition_GetWeaponActorClass final
{
public:
	TSubclassOf<class AFortWeapon>                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponItemDefinition_GetWeaponActorClass) == 0x000008, "Wrong alignment on FortWeaponItemDefinition_GetWeaponActorClass");
static_assert(sizeof(FortWeaponItemDefinition_GetWeaponActorClass) == 0x000008, "Wrong size on FortWeaponItemDefinition_GetWeaponActorClass");
static_assert(offsetof(FortWeaponItemDefinition_GetWeaponActorClass, ReturnValue) == 0x000000, "Member 'FortWeaponItemDefinition_GetWeaponActorClass::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponItemDefinition.GetWeaponMeshOverride
// 0x0008 (0x0008 - 0x0000)
struct FortWeaponItemDefinition_GetWeaponMeshOverride final
{
public:
	class USkeletalMesh*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponItemDefinition_GetWeaponMeshOverride) == 0x000008, "Wrong alignment on FortWeaponItemDefinition_GetWeaponMeshOverride");
static_assert(sizeof(FortWeaponItemDefinition_GetWeaponMeshOverride) == 0x000008, "Wrong size on FortWeaponItemDefinition_GetWeaponMeshOverride");
static_assert(offsetof(FortWeaponItemDefinition_GetWeaponMeshOverride, ReturnValue) == 0x000000, "Member 'FortWeaponItemDefinition_GetWeaponMeshOverride::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponItemDefinition.GetWeaponStatHandle
// 0x0010 (0x0010 - 0x0000)
struct FortWeaponItemDefinition_GetWeaponStatHandle final
{
public:
	struct FDataTableRowHandle                    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponItemDefinition_GetWeaponStatHandle) == 0x000008, "Wrong alignment on FortWeaponItemDefinition_GetWeaponStatHandle");
static_assert(sizeof(FortWeaponItemDefinition_GetWeaponStatHandle) == 0x000010, "Wrong size on FortWeaponItemDefinition_GetWeaponStatHandle");
static_assert(offsetof(FortWeaponItemDefinition_GetWeaponStatHandle, ReturnValue) == 0x000000, "Member 'FortWeaponItemDefinition_GetWeaponStatHandle::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponItemDefinition.ShouldAllowTargetingDuringReload
// 0x0001 (0x0001 - 0x0000)
struct FortWeaponItemDefinition_ShouldAllowTargetingDuringReload final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponItemDefinition_ShouldAllowTargetingDuringReload) == 0x000001, "Wrong alignment on FortWeaponItemDefinition_ShouldAllowTargetingDuringReload");
static_assert(sizeof(FortWeaponItemDefinition_ShouldAllowTargetingDuringReload) == 0x000001, "Wrong size on FortWeaponItemDefinition_ShouldAllowTargetingDuringReload");
static_assert(offsetof(FortWeaponItemDefinition_ShouldAllowTargetingDuringReload, ReturnValue) == 0x000000, "Member 'FortWeaponItemDefinition_ShouldAllowTargetingDuringReload::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponItemDefinition.TargetingPreventsReload
// 0x0001 (0x0001 - 0x0000)
struct FortWeaponItemDefinition_TargetingPreventsReload final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponItemDefinition_TargetingPreventsReload) == 0x000001, "Wrong alignment on FortWeaponItemDefinition_TargetingPreventsReload");
static_assert(sizeof(FortWeaponItemDefinition_TargetingPreventsReload) == 0x000001, "Wrong size on FortWeaponItemDefinition_TargetingPreventsReload");
static_assert(offsetof(FortWeaponItemDefinition_TargetingPreventsReload, ReturnValue) == 0x000000, "Member 'FortWeaponItemDefinition_TargetingPreventsReload::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDecoItemDefinition.GetBlueprintClass
// 0x0008 (0x0008 - 0x0000)
struct FortDecoItemDefinition_GetBlueprintClass final
{
public:
	TSubclassOf<class ABuildingActor>             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoItemDefinition_GetBlueprintClass) == 0x000008, "Wrong alignment on FortDecoItemDefinition_GetBlueprintClass");
static_assert(sizeof(FortDecoItemDefinition_GetBlueprintClass) == 0x000008, "Wrong size on FortDecoItemDefinition_GetBlueprintClass");
static_assert(offsetof(FortDecoItemDefinition_GetBlueprintClass, ReturnValue) == 0x000000, "Member 'FortDecoItemDefinition_GetBlueprintClass::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDecoItemDefinition.GetGridSnapSizeOverride
// 0x0004 (0x0004 - 0x0000)
struct FortDecoItemDefinition_GetGridSnapSizeOverride final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoItemDefinition_GetGridSnapSizeOverride) == 0x000004, "Wrong alignment on FortDecoItemDefinition_GetGridSnapSizeOverride");
static_assert(sizeof(FortDecoItemDefinition_GetGridSnapSizeOverride) == 0x000004, "Wrong size on FortDecoItemDefinition_GetGridSnapSizeOverride");
static_assert(offsetof(FortDecoItemDefinition_GetGridSnapSizeOverride, ReturnValue) == 0x000000, "Member 'FortDecoItemDefinition_GetGridSnapSizeOverride::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDecoItemDefinition.GetMaxPlacementDistance
// 0x0004 (0x0004 - 0x0000)
struct FortDecoItemDefinition_GetMaxPlacementDistance final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoItemDefinition_GetMaxPlacementDistance) == 0x000004, "Wrong alignment on FortDecoItemDefinition_GetMaxPlacementDistance");
static_assert(sizeof(FortDecoItemDefinition_GetMaxPlacementDistance) == 0x000004, "Wrong size on FortDecoItemDefinition_GetMaxPlacementDistance");
static_assert(offsetof(FortDecoItemDefinition_GetMaxPlacementDistance, ReturnValue) == 0x000000, "Member 'FortDecoItemDefinition_GetMaxPlacementDistance::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDecoItemDefinition.GetPlacementPreviewClass
// 0x0008 (0x0008 - 0x0000)
struct FortDecoItemDefinition_GetPlacementPreviewClass final
{
public:
	TSubclassOf<class AFortDecoPreview>           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoItemDefinition_GetPlacementPreviewClass) == 0x000008, "Wrong alignment on FortDecoItemDefinition_GetPlacementPreviewClass");
static_assert(sizeof(FortDecoItemDefinition_GetPlacementPreviewClass) == 0x000008, "Wrong size on FortDecoItemDefinition_GetPlacementPreviewClass");
static_assert(offsetof(FortDecoItemDefinition_GetPlacementPreviewClass, ReturnValue) == 0x000000, "Member 'FortDecoItemDefinition_GetPlacementPreviewClass::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDecoItemDefinition.GetPlacementTypeOverride
// 0x0001 (0x0001 - 0x0000)
struct FortDecoItemDefinition_GetPlacementTypeOverride final
{
public:
	EPlacementType                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoItemDefinition_GetPlacementTypeOverride) == 0x000001, "Wrong alignment on FortDecoItemDefinition_GetPlacementTypeOverride");
static_assert(sizeof(FortDecoItemDefinition_GetPlacementTypeOverride) == 0x000001, "Wrong size on FortDecoItemDefinition_GetPlacementTypeOverride");
static_assert(offsetof(FortDecoItemDefinition_GetPlacementTypeOverride, ReturnValue) == 0x000000, "Member 'FortDecoItemDefinition_GetPlacementTypeOverride::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDecoItemDefinition.GetRotationAngleIncrement
// 0x0004 (0x0004 - 0x0000)
struct FortDecoItemDefinition_GetRotationAngleIncrement final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoItemDefinition_GetRotationAngleIncrement) == 0x000004, "Wrong alignment on FortDecoItemDefinition_GetRotationAngleIncrement");
static_assert(sizeof(FortDecoItemDefinition_GetRotationAngleIncrement) == 0x000004, "Wrong size on FortDecoItemDefinition_GetRotationAngleIncrement");
static_assert(offsetof(FortDecoItemDefinition_GetRotationAngleIncrement, ReturnValue) == 0x000000, "Member 'FortDecoItemDefinition_GetRotationAngleIncrement::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDecoItemDefinition.RequiresPermissionToEditWorld
// 0x0001 (0x0001 - 0x0000)
struct FortDecoItemDefinition_RequiresPermissionToEditWorld final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoItemDefinition_RequiresPermissionToEditWorld) == 0x000001, "Wrong alignment on FortDecoItemDefinition_RequiresPermissionToEditWorld");
static_assert(sizeof(FortDecoItemDefinition_RequiresPermissionToEditWorld) == 0x000001, "Wrong size on FortDecoItemDefinition_RequiresPermissionToEditWorld");
static_assert(offsetof(FortDecoItemDefinition_RequiresPermissionToEditWorld, ReturnValue) == 0x000000, "Member 'FortDecoItemDefinition_RequiresPermissionToEditWorld::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDecoItemDefinition.RequiresPlayerPlaceableAttachmentActors
// 0x0001 (0x0001 - 0x0000)
struct FortDecoItemDefinition_RequiresPlayerPlaceableAttachmentActors final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoItemDefinition_RequiresPlayerPlaceableAttachmentActors) == 0x000001, "Wrong alignment on FortDecoItemDefinition_RequiresPlayerPlaceableAttachmentActors");
static_assert(sizeof(FortDecoItemDefinition_RequiresPlayerPlaceableAttachmentActors) == 0x000001, "Wrong size on FortDecoItemDefinition_RequiresPlayerPlaceableAttachmentActors");
static_assert(offsetof(FortDecoItemDefinition_RequiresPlayerPlaceableAttachmentActors, ReturnValue) == 0x000000, "Member 'FortDecoItemDefinition_RequiresPlayerPlaceableAttachmentActors::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDecoItemDefinition.ShouldAllowAnyFloorPlacement
// 0x0001 (0x0001 - 0x0000)
struct FortDecoItemDefinition_ShouldAllowAnyFloorPlacement final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoItemDefinition_ShouldAllowAnyFloorPlacement) == 0x000001, "Wrong alignment on FortDecoItemDefinition_ShouldAllowAnyFloorPlacement");
static_assert(sizeof(FortDecoItemDefinition_ShouldAllowAnyFloorPlacement) == 0x000001, "Wrong size on FortDecoItemDefinition_ShouldAllowAnyFloorPlacement");
static_assert(offsetof(FortDecoItemDefinition_ShouldAllowAnyFloorPlacement, ReturnValue) == 0x000000, "Member 'FortDecoItemDefinition_ShouldAllowAnyFloorPlacement::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDecoItemDefinition.ShouldAllowPlacementOnBuildings
// 0x0001 (0x0001 - 0x0000)
struct FortDecoItemDefinition_ShouldAllowPlacementOnBuildings final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoItemDefinition_ShouldAllowPlacementOnBuildings) == 0x000001, "Wrong alignment on FortDecoItemDefinition_ShouldAllowPlacementOnBuildings");
static_assert(sizeof(FortDecoItemDefinition_ShouldAllowPlacementOnBuildings) == 0x000001, "Wrong size on FortDecoItemDefinition_ShouldAllowPlacementOnBuildings");
static_assert(offsetof(FortDecoItemDefinition_ShouldAllowPlacementOnBuildings, ReturnValue) == 0x000000, "Member 'FortDecoItemDefinition_ShouldAllowPlacementOnBuildings::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDecoItemDefinition.ShouldAllowPlacementOnWorldGeometry
// 0x0001 (0x0001 - 0x0000)
struct FortDecoItemDefinition_ShouldAllowPlacementOnWorldGeometry final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoItemDefinition_ShouldAllowPlacementOnWorldGeometry) == 0x000001, "Wrong alignment on FortDecoItemDefinition_ShouldAllowPlacementOnWorldGeometry");
static_assert(sizeof(FortDecoItemDefinition_ShouldAllowPlacementOnWorldGeometry) == 0x000001, "Wrong size on FortDecoItemDefinition_ShouldAllowPlacementOnWorldGeometry");
static_assert(offsetof(FortDecoItemDefinition_ShouldAllowPlacementOnWorldGeometry, ReturnValue) == 0x000000, "Member 'FortDecoItemDefinition_ShouldAllowPlacementOnWorldGeometry::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDecoItemDefinition.ShouldAllowStairsWhenAttachingToFloors
// 0x0001 (0x0001 - 0x0000)
struct FortDecoItemDefinition_ShouldAllowStairsWhenAttachingToFloors final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoItemDefinition_ShouldAllowStairsWhenAttachingToFloors) == 0x000001, "Wrong alignment on FortDecoItemDefinition_ShouldAllowStairsWhenAttachingToFloors");
static_assert(sizeof(FortDecoItemDefinition_ShouldAllowStairsWhenAttachingToFloors) == 0x000001, "Wrong size on FortDecoItemDefinition_ShouldAllowStairsWhenAttachingToFloors");
static_assert(offsetof(FortDecoItemDefinition_ShouldAllowStairsWhenAttachingToFloors, ReturnValue) == 0x000000, "Member 'FortDecoItemDefinition_ShouldAllowStairsWhenAttachingToFloors::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDecoItemDefinition.ShouldAttachWhenPlacing
// 0x0001 (0x0001 - 0x0000)
struct FortDecoItemDefinition_ShouldAttachWhenPlacing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoItemDefinition_ShouldAttachWhenPlacing) == 0x000001, "Wrong alignment on FortDecoItemDefinition_ShouldAttachWhenPlacing");
static_assert(sizeof(FortDecoItemDefinition_ShouldAttachWhenPlacing) == 0x000001, "Wrong size on FortDecoItemDefinition_ShouldAttachWhenPlacing");
static_assert(offsetof(FortDecoItemDefinition_ShouldAttachWhenPlacing, ReturnValue) == 0x000000, "Member 'FortDecoItemDefinition_ShouldAttachWhenPlacing::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDecoItemDefinition.ShouldCancelAbilityOnUnequip
// 0x0001 (0x0001 - 0x0000)
struct FortDecoItemDefinition_ShouldCancelAbilityOnUnequip final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoItemDefinition_ShouldCancelAbilityOnUnequip) == 0x000001, "Wrong alignment on FortDecoItemDefinition_ShouldCancelAbilityOnUnequip");
static_assert(sizeof(FortDecoItemDefinition_ShouldCancelAbilityOnUnequip) == 0x000001, "Wrong size on FortDecoItemDefinition_ShouldCancelAbilityOnUnequip");
static_assert(offsetof(FortDecoItemDefinition_ShouldCancelAbilityOnUnequip, ReturnValue) == 0x000000, "Member 'FortDecoItemDefinition_ShouldCancelAbilityOnUnequip::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDecoItemDefinition.ShouldCancelToolWhenPlaced
// 0x0001 (0x0001 - 0x0000)
struct FortDecoItemDefinition_ShouldCancelToolWhenPlaced final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoItemDefinition_ShouldCancelToolWhenPlaced) == 0x000001, "Wrong alignment on FortDecoItemDefinition_ShouldCancelToolWhenPlaced");
static_assert(sizeof(FortDecoItemDefinition_ShouldCancelToolWhenPlaced) == 0x000001, "Wrong size on FortDecoItemDefinition_ShouldCancelToolWhenPlaced");
static_assert(offsetof(FortDecoItemDefinition_ShouldCancelToolWhenPlaced, ReturnValue) == 0x000000, "Member 'FortDecoItemDefinition_ShouldCancelToolWhenPlaced::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDecoItemDefinition.ShouldConsumeWhenPlaced
// 0x0001 (0x0001 - 0x0000)
struct FortDecoItemDefinition_ShouldConsumeWhenPlaced final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoItemDefinition_ShouldConsumeWhenPlaced) == 0x000001, "Wrong alignment on FortDecoItemDefinition_ShouldConsumeWhenPlaced");
static_assert(sizeof(FortDecoItemDefinition_ShouldConsumeWhenPlaced) == 0x000001, "Wrong size on FortDecoItemDefinition_ShouldConsumeWhenPlaced");
static_assert(offsetof(FortDecoItemDefinition_ShouldConsumeWhenPlaced, ReturnValue) == 0x000000, "Member 'FortDecoItemDefinition_ShouldConsumeWhenPlaced::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDecoItemDefinition.ShouldDestroySmallObjectsWhenPlaced
// 0x0001 (0x0001 - 0x0000)
struct FortDecoItemDefinition_ShouldDestroySmallObjectsWhenPlaced final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoItemDefinition_ShouldDestroySmallObjectsWhenPlaced) == 0x000001, "Wrong alignment on FortDecoItemDefinition_ShouldDestroySmallObjectsWhenPlaced");
static_assert(sizeof(FortDecoItemDefinition_ShouldDestroySmallObjectsWhenPlaced) == 0x000001, "Wrong size on FortDecoItemDefinition_ShouldDestroySmallObjectsWhenPlaced");
static_assert(offsetof(FortDecoItemDefinition_ShouldDestroySmallObjectsWhenPlaced, ReturnValue) == 0x000000, "Member 'FortDecoItemDefinition_ShouldDestroySmallObjectsWhenPlaced::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDecoItemDefinition.ShouldDisableLocationLerpWhilePlacing
// 0x0001 (0x0001 - 0x0000)
struct FortDecoItemDefinition_ShouldDisableLocationLerpWhilePlacing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoItemDefinition_ShouldDisableLocationLerpWhilePlacing) == 0x000001, "Wrong alignment on FortDecoItemDefinition_ShouldDisableLocationLerpWhilePlacing");
static_assert(sizeof(FortDecoItemDefinition_ShouldDisableLocationLerpWhilePlacing) == 0x000001, "Wrong size on FortDecoItemDefinition_ShouldDisableLocationLerpWhilePlacing");
static_assert(offsetof(FortDecoItemDefinition_ShouldDisableLocationLerpWhilePlacing, ReturnValue) == 0x000000, "Member 'FortDecoItemDefinition_ShouldDisableLocationLerpWhilePlacing::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDecoItemDefinition.ShouldDisableRotationLerpWhilePlacing
// 0x0001 (0x0001 - 0x0000)
struct FortDecoItemDefinition_ShouldDisableRotationLerpWhilePlacing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoItemDefinition_ShouldDisableRotationLerpWhilePlacing) == 0x000001, "Wrong alignment on FortDecoItemDefinition_ShouldDisableRotationLerpWhilePlacing");
static_assert(sizeof(FortDecoItemDefinition_ShouldDisableRotationLerpWhilePlacing) == 0x000001, "Wrong size on FortDecoItemDefinition_ShouldDisableRotationLerpWhilePlacing");
static_assert(offsetof(FortDecoItemDefinition_ShouldDisableRotationLerpWhilePlacing, ReturnValue) == 0x000000, "Member 'FortDecoItemDefinition_ShouldDisableRotationLerpWhilePlacing::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDecoItemDefinition.ShouldDisableScaleLerpWhilePlacing
// 0x0001 (0x0001 - 0x0000)
struct FortDecoItemDefinition_ShouldDisableScaleLerpWhilePlacing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoItemDefinition_ShouldDisableScaleLerpWhilePlacing) == 0x000001, "Wrong alignment on FortDecoItemDefinition_ShouldDisableScaleLerpWhilePlacing");
static_assert(sizeof(FortDecoItemDefinition_ShouldDisableScaleLerpWhilePlacing) == 0x000001, "Wrong size on FortDecoItemDefinition_ShouldDisableScaleLerpWhilePlacing");
static_assert(offsetof(FortDecoItemDefinition_ShouldDisableScaleLerpWhilePlacing, ReturnValue) == 0x000000, "Member 'FortDecoItemDefinition_ShouldDisableScaleLerpWhilePlacing::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDecoItemDefinition.ShouldForceIgnoreBuildingOverlaps
// 0x0001 (0x0001 - 0x0000)
struct FortDecoItemDefinition_ShouldForceIgnoreBuildingOverlaps final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoItemDefinition_ShouldForceIgnoreBuildingOverlaps) == 0x000001, "Wrong alignment on FortDecoItemDefinition_ShouldForceIgnoreBuildingOverlaps");
static_assert(sizeof(FortDecoItemDefinition_ShouldForceIgnoreBuildingOverlaps) == 0x000001, "Wrong size on FortDecoItemDefinition_ShouldForceIgnoreBuildingOverlaps");
static_assert(offsetof(FortDecoItemDefinition_ShouldForceIgnoreBuildingOverlaps, ReturnValue) == 0x000000, "Member 'FortDecoItemDefinition_ShouldForceIgnoreBuildingOverlaps::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDecoItemDefinition.ShouldForceIgnoreOverlapTest
// 0x0001 (0x0001 - 0x0000)
struct FortDecoItemDefinition_ShouldForceIgnoreOverlapTest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoItemDefinition_ShouldForceIgnoreOverlapTest) == 0x000001, "Wrong alignment on FortDecoItemDefinition_ShouldForceIgnoreOverlapTest");
static_assert(sizeof(FortDecoItemDefinition_ShouldForceIgnoreOverlapTest) == 0x000001, "Wrong size on FortDecoItemDefinition_ShouldForceIgnoreOverlapTest");
static_assert(offsetof(FortDecoItemDefinition_ShouldForceIgnoreOverlapTest, ReturnValue) == 0x000000, "Member 'FortDecoItemDefinition_ShouldForceIgnoreOverlapTest::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDecoItemDefinition.ShouldIgnoreCollisionWithCriticalActors
// 0x0001 (0x0001 - 0x0000)
struct FortDecoItemDefinition_ShouldIgnoreCollisionWithCriticalActors final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoItemDefinition_ShouldIgnoreCollisionWithCriticalActors) == 0x000001, "Wrong alignment on FortDecoItemDefinition_ShouldIgnoreCollisionWithCriticalActors");
static_assert(sizeof(FortDecoItemDefinition_ShouldIgnoreCollisionWithCriticalActors) == 0x000001, "Wrong size on FortDecoItemDefinition_ShouldIgnoreCollisionWithCriticalActors");
static_assert(offsetof(FortDecoItemDefinition_ShouldIgnoreCollisionWithCriticalActors, ReturnValue) == 0x000000, "Member 'FortDecoItemDefinition_ShouldIgnoreCollisionWithCriticalActors::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDecoItemDefinition.ShouldSnapYawToHorizontalAxes
// 0x0001 (0x0001 - 0x0000)
struct FortDecoItemDefinition_ShouldSnapYawToHorizontalAxes final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoItemDefinition_ShouldSnapYawToHorizontalAxes) == 0x000001, "Wrong alignment on FortDecoItemDefinition_ShouldSnapYawToHorizontalAxes");
static_assert(sizeof(FortDecoItemDefinition_ShouldSnapYawToHorizontalAxes) == 0x000001, "Wrong size on FortDecoItemDefinition_ShouldSnapYawToHorizontalAxes");
static_assert(offsetof(FortDecoItemDefinition_ShouldSnapYawToHorizontalAxes, ReturnValue) == 0x000000, "Member 'FortDecoItemDefinition_ShouldSnapYawToHorizontalAxes::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDecoItemDefinition.ShouldUseRelativeCameraRotation
// 0x0001 (0x0001 - 0x0000)
struct FortDecoItemDefinition_ShouldUseRelativeCameraRotation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoItemDefinition_ShouldUseRelativeCameraRotation) == 0x000001, "Wrong alignment on FortDecoItemDefinition_ShouldUseRelativeCameraRotation");
static_assert(sizeof(FortDecoItemDefinition_ShouldUseRelativeCameraRotation) == 0x000001, "Wrong size on FortDecoItemDefinition_ShouldUseRelativeCameraRotation");
static_assert(offsetof(FortDecoItemDefinition_ShouldUseRelativeCameraRotation, ReturnValue) == 0x000000, "Member 'FortDecoItemDefinition_ShouldUseRelativeCameraRotation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItemTooltip.GetNumericValue
// 0x0028 (0x0028 - 0x0000)
struct FortItemTooltip_GetNumericValue final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVal;                                            // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemTooltip_GetNumericValue) == 0x000008, "Wrong alignment on FortItemTooltip_GetNumericValue");
static_assert(sizeof(FortItemTooltip_GetNumericValue) == 0x000028, "Wrong size on FortItemTooltip_GetNumericValue");
static_assert(offsetof(FortItemTooltip_GetNumericValue, ObjectToDescribe) == 0x000000, "Member 'FortItemTooltip_GetNumericValue::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortItemTooltip_GetNumericValue, Tag) == 0x000008, "Member 'FortItemTooltip_GetNumericValue::Tag' has a wrong offset!");
static_assert(offsetof(FortItemTooltip_GetNumericValue, Context) == 0x000010, "Member 'FortItemTooltip_GetNumericValue::Context' has a wrong offset!");
static_assert(offsetof(FortItemTooltip_GetNumericValue, Token) == 0x000018, "Member 'FortItemTooltip_GetNumericValue::Token' has a wrong offset!");
static_assert(offsetof(FortItemTooltip_GetNumericValue, OutVal) == 0x000020, "Member 'FortItemTooltip_GetNumericValue::OutVal' has a wrong offset!");
static_assert(offsetof(FortItemTooltip_GetNumericValue, ReturnValue) == 0x000024, "Member 'FortItemTooltip_GetNumericValue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItemTooltip.GetTextForToken
// 0x0040 (0x0040 - 0x0000)
struct FortItemTooltip_GetTextForToken final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemTooltip_GetTextForToken) == 0x000008, "Wrong alignment on FortItemTooltip_GetTextForToken");
static_assert(sizeof(FortItemTooltip_GetTextForToken) == 0x000040, "Wrong size on FortItemTooltip_GetTextForToken");
static_assert(offsetof(FortItemTooltip_GetTextForToken, ObjectToDescribe) == 0x000000, "Member 'FortItemTooltip_GetTextForToken::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortItemTooltip_GetTextForToken, Tag) == 0x000008, "Member 'FortItemTooltip_GetTextForToken::Tag' has a wrong offset!");
static_assert(offsetof(FortItemTooltip_GetTextForToken, Context) == 0x000010, "Member 'FortItemTooltip_GetTextForToken::Context' has a wrong offset!");
static_assert(offsetof(FortItemTooltip_GetTextForToken, Token) == 0x000018, "Member 'FortItemTooltip_GetTextForToken::Token' has a wrong offset!");
static_assert(offsetof(FortItemTooltip_GetTextForToken, OutText) == 0x000020, "Member 'FortItemTooltip_GetTextForToken::OutText' has a wrong offset!");
static_assert(offsetof(FortItemTooltip_GetTextForToken, ReturnValue) == 0x000038, "Member 'FortItemTooltip_GetTextForToken::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItemTooltip.GetTokenizedDescriptionText
// 0x0030 (0x0030 - 0x0000)
struct FortItemTooltip_GetTokenizedDescriptionText final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           OutDescription;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemTooltip_GetTokenizedDescriptionText) == 0x000008, "Wrong alignment on FortItemTooltip_GetTokenizedDescriptionText");
static_assert(sizeof(FortItemTooltip_GetTokenizedDescriptionText) == 0x000030, "Wrong size on FortItemTooltip_GetTokenizedDescriptionText");
static_assert(offsetof(FortItemTooltip_GetTokenizedDescriptionText, ObjectToDescribe) == 0x000000, "Member 'FortItemTooltip_GetTokenizedDescriptionText::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortItemTooltip_GetTokenizedDescriptionText, Tag) == 0x000008, "Member 'FortItemTooltip_GetTokenizedDescriptionText::Tag' has a wrong offset!");
static_assert(offsetof(FortItemTooltip_GetTokenizedDescriptionText, Context) == 0x000010, "Member 'FortItemTooltip_GetTokenizedDescriptionText::Context' has a wrong offset!");
static_assert(offsetof(FortItemTooltip_GetTokenizedDescriptionText, OutDescription) == 0x000018, "Member 'FortItemTooltip_GetTokenizedDescriptionText::OutDescription' has a wrong offset!");
static_assert(offsetof(FortItemTooltip_GetTokenizedDescriptionText, ReturnValue) == 0x000028, "Member 'FortItemTooltip_GetTokenizedDescriptionText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAccountItemTooltip.GetNumericValue
// 0x0028 (0x0028 - 0x0000)
struct FortAccountItemTooltip_GetNumericValue final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVal;                                            // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAccountItemTooltip_GetNumericValue) == 0x000008, "Wrong alignment on FortAccountItemTooltip_GetNumericValue");
static_assert(sizeof(FortAccountItemTooltip_GetNumericValue) == 0x000028, "Wrong size on FortAccountItemTooltip_GetNumericValue");
static_assert(offsetof(FortAccountItemTooltip_GetNumericValue, ObjectToDescribe) == 0x000000, "Member 'FortAccountItemTooltip_GetNumericValue::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortAccountItemTooltip_GetNumericValue, Tag) == 0x000008, "Member 'FortAccountItemTooltip_GetNumericValue::Tag' has a wrong offset!");
static_assert(offsetof(FortAccountItemTooltip_GetNumericValue, Context) == 0x000010, "Member 'FortAccountItemTooltip_GetNumericValue::Context' has a wrong offset!");
static_assert(offsetof(FortAccountItemTooltip_GetNumericValue, Token) == 0x000018, "Member 'FortAccountItemTooltip_GetNumericValue::Token' has a wrong offset!");
static_assert(offsetof(FortAccountItemTooltip_GetNumericValue, OutVal) == 0x000020, "Member 'FortAccountItemTooltip_GetNumericValue::OutVal' has a wrong offset!");
static_assert(offsetof(FortAccountItemTooltip_GetNumericValue, ReturnValue) == 0x000024, "Member 'FortAccountItemTooltip_GetNumericValue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAccountItemTooltip.GetTextForToken
// 0x0040 (0x0040 - 0x0000)
struct FortAccountItemTooltip_GetTextForToken final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAccountItemTooltip_GetTextForToken) == 0x000008, "Wrong alignment on FortAccountItemTooltip_GetTextForToken");
static_assert(sizeof(FortAccountItemTooltip_GetTextForToken) == 0x000040, "Wrong size on FortAccountItemTooltip_GetTextForToken");
static_assert(offsetof(FortAccountItemTooltip_GetTextForToken, ObjectToDescribe) == 0x000000, "Member 'FortAccountItemTooltip_GetTextForToken::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortAccountItemTooltip_GetTextForToken, Tag) == 0x000008, "Member 'FortAccountItemTooltip_GetTextForToken::Tag' has a wrong offset!");
static_assert(offsetof(FortAccountItemTooltip_GetTextForToken, Context) == 0x000010, "Member 'FortAccountItemTooltip_GetTextForToken::Context' has a wrong offset!");
static_assert(offsetof(FortAccountItemTooltip_GetTextForToken, Token) == 0x000018, "Member 'FortAccountItemTooltip_GetTextForToken::Token' has a wrong offset!");
static_assert(offsetof(FortAccountItemTooltip_GetTextForToken, OutText) == 0x000020, "Member 'FortAccountItemTooltip_GetTextForToken::OutText' has a wrong offset!");
static_assert(offsetof(FortAccountItemTooltip_GetTextForToken, ReturnValue) == 0x000038, "Member 'FortAccountItemTooltip_GetTextForToken::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAccountItemTooltip.GetTokenizedDescriptionText
// 0x0030 (0x0030 - 0x0000)
struct FortAccountItemTooltip_GetTokenizedDescriptionText final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           OutDescription;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAccountItemTooltip_GetTokenizedDescriptionText) == 0x000008, "Wrong alignment on FortAccountItemTooltip_GetTokenizedDescriptionText");
static_assert(sizeof(FortAccountItemTooltip_GetTokenizedDescriptionText) == 0x000030, "Wrong size on FortAccountItemTooltip_GetTokenizedDescriptionText");
static_assert(offsetof(FortAccountItemTooltip_GetTokenizedDescriptionText, ObjectToDescribe) == 0x000000, "Member 'FortAccountItemTooltip_GetTokenizedDescriptionText::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortAccountItemTooltip_GetTokenizedDescriptionText, Tag) == 0x000008, "Member 'FortAccountItemTooltip_GetTokenizedDescriptionText::Tag' has a wrong offset!");
static_assert(offsetof(FortAccountItemTooltip_GetTokenizedDescriptionText, Context) == 0x000010, "Member 'FortAccountItemTooltip_GetTokenizedDescriptionText::Context' has a wrong offset!");
static_assert(offsetof(FortAccountItemTooltip_GetTokenizedDescriptionText, OutDescription) == 0x000018, "Member 'FortAccountItemTooltip_GetTokenizedDescriptionText::OutDescription' has a wrong offset!");
static_assert(offsetof(FortAccountItemTooltip_GetTokenizedDescriptionText, ReturnValue) == 0x000028, "Member 'FortAccountItemTooltip_GetTokenizedDescriptionText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCharacterTooltip.GetNumericValue
// 0x0028 (0x0028 - 0x0000)
struct FortCharacterTooltip_GetNumericValue final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVal;                                            // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCharacterTooltip_GetNumericValue) == 0x000008, "Wrong alignment on FortCharacterTooltip_GetNumericValue");
static_assert(sizeof(FortCharacterTooltip_GetNumericValue) == 0x000028, "Wrong size on FortCharacterTooltip_GetNumericValue");
static_assert(offsetof(FortCharacterTooltip_GetNumericValue, ObjectToDescribe) == 0x000000, "Member 'FortCharacterTooltip_GetNumericValue::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortCharacterTooltip_GetNumericValue, Tag) == 0x000008, "Member 'FortCharacterTooltip_GetNumericValue::Tag' has a wrong offset!");
static_assert(offsetof(FortCharacterTooltip_GetNumericValue, Context) == 0x000010, "Member 'FortCharacterTooltip_GetNumericValue::Context' has a wrong offset!");
static_assert(offsetof(FortCharacterTooltip_GetNumericValue, Token) == 0x000018, "Member 'FortCharacterTooltip_GetNumericValue::Token' has a wrong offset!");
static_assert(offsetof(FortCharacterTooltip_GetNumericValue, OutVal) == 0x000020, "Member 'FortCharacterTooltip_GetNumericValue::OutVal' has a wrong offset!");
static_assert(offsetof(FortCharacterTooltip_GetNumericValue, ReturnValue) == 0x000024, "Member 'FortCharacterTooltip_GetNumericValue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCharacterTooltip.GetTextForToken
// 0x0040 (0x0040 - 0x0000)
struct FortCharacterTooltip_GetTextForToken final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCharacterTooltip_GetTextForToken) == 0x000008, "Wrong alignment on FortCharacterTooltip_GetTextForToken");
static_assert(sizeof(FortCharacterTooltip_GetTextForToken) == 0x000040, "Wrong size on FortCharacterTooltip_GetTextForToken");
static_assert(offsetof(FortCharacterTooltip_GetTextForToken, ObjectToDescribe) == 0x000000, "Member 'FortCharacterTooltip_GetTextForToken::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortCharacterTooltip_GetTextForToken, Tag) == 0x000008, "Member 'FortCharacterTooltip_GetTextForToken::Tag' has a wrong offset!");
static_assert(offsetof(FortCharacterTooltip_GetTextForToken, Context) == 0x000010, "Member 'FortCharacterTooltip_GetTextForToken::Context' has a wrong offset!");
static_assert(offsetof(FortCharacterTooltip_GetTextForToken, Token) == 0x000018, "Member 'FortCharacterTooltip_GetTextForToken::Token' has a wrong offset!");
static_assert(offsetof(FortCharacterTooltip_GetTextForToken, OutText) == 0x000020, "Member 'FortCharacterTooltip_GetTextForToken::OutText' has a wrong offset!");
static_assert(offsetof(FortCharacterTooltip_GetTextForToken, ReturnValue) == 0x000038, "Member 'FortCharacterTooltip_GetTextForToken::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCharacterTooltip.GetTokenizedDescriptionText
// 0x0030 (0x0030 - 0x0000)
struct FortCharacterTooltip_GetTokenizedDescriptionText final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           OutDescription;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCharacterTooltip_GetTokenizedDescriptionText) == 0x000008, "Wrong alignment on FortCharacterTooltip_GetTokenizedDescriptionText");
static_assert(sizeof(FortCharacterTooltip_GetTokenizedDescriptionText) == 0x000030, "Wrong size on FortCharacterTooltip_GetTokenizedDescriptionText");
static_assert(offsetof(FortCharacterTooltip_GetTokenizedDescriptionText, ObjectToDescribe) == 0x000000, "Member 'FortCharacterTooltip_GetTokenizedDescriptionText::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortCharacterTooltip_GetTokenizedDescriptionText, Tag) == 0x000008, "Member 'FortCharacterTooltip_GetTokenizedDescriptionText::Tag' has a wrong offset!");
static_assert(offsetof(FortCharacterTooltip_GetTokenizedDescriptionText, Context) == 0x000010, "Member 'FortCharacterTooltip_GetTokenizedDescriptionText::Context' has a wrong offset!");
static_assert(offsetof(FortCharacterTooltip_GetTokenizedDescriptionText, OutDescription) == 0x000018, "Member 'FortCharacterTooltip_GetTokenizedDescriptionText::OutDescription' has a wrong offset!");
static_assert(offsetof(FortCharacterTooltip_GetTokenizedDescriptionText, ReturnValue) == 0x000028, "Member 'FortCharacterTooltip_GetTokenizedDescriptionText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCharacterTooltip.GetValueData
// 0x0090 (0x0090 - 0x0000)
struct FortCharacterTooltip_GetValueData final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0010(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortTooltipValueData                  OutData;                                           // 0x0018(0x0070)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCharacterTooltip_GetValueData) == 0x000008, "Wrong alignment on FortCharacterTooltip_GetValueData");
static_assert(sizeof(FortCharacterTooltip_GetValueData) == 0x000090, "Wrong size on FortCharacterTooltip_GetValueData");
static_assert(offsetof(FortCharacterTooltip_GetValueData, ObjectToDescribe) == 0x000000, "Member 'FortCharacterTooltip_GetValueData::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortCharacterTooltip_GetValueData, Context) == 0x000008, "Member 'FortCharacterTooltip_GetValueData::Context' has a wrong offset!");
static_assert(offsetof(FortCharacterTooltip_GetValueData, Token) == 0x000010, "Member 'FortCharacterTooltip_GetValueData::Token' has a wrong offset!");
static_assert(offsetof(FortCharacterTooltip_GetValueData, OutData) == 0x000018, "Member 'FortCharacterTooltip_GetValueData::OutData' has a wrong offset!");
static_assert(offsetof(FortCharacterTooltip_GetValueData, ReturnValue) == 0x000088, "Member 'FortCharacterTooltip_GetValueData::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpotSlotGenerator.AddSlot
// 0x0030 (0x0030 - 0x0000)
struct AIHotSpotSlotGenerator_AddSlot final
{
public:
	struct FVector                                RelativeLocation;                                  // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x000C(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UAIHotSpotSlot>             CustomSlotClass;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAIHotSpotSlot*                         ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlotGenerator_AddSlot) == 0x000008, "Wrong alignment on AIHotSpotSlotGenerator_AddSlot");
static_assert(sizeof(AIHotSpotSlotGenerator_AddSlot) == 0x000030, "Wrong size on AIHotSpotSlotGenerator_AddSlot");
static_assert(offsetof(AIHotSpotSlotGenerator_AddSlot, RelativeLocation) == 0x000000, "Member 'AIHotSpotSlotGenerator_AddSlot::RelativeLocation' has a wrong offset!");
static_assert(offsetof(AIHotSpotSlotGenerator_AddSlot, RelativeRotation) == 0x00000C, "Member 'AIHotSpotSlotGenerator_AddSlot::RelativeRotation' has a wrong offset!");
static_assert(offsetof(AIHotSpotSlotGenerator_AddSlot, CustomSlotClass) == 0x000018, "Member 'AIHotSpotSlotGenerator_AddSlot::CustomSlotClass' has a wrong offset!");
static_assert(offsetof(AIHotSpotSlotGenerator_AddSlot, bEnabled) == 0x000020, "Member 'AIHotSpotSlotGenerator_AddSlot::bEnabled' has a wrong offset!");
static_assert(offsetof(AIHotSpotSlotGenerator_AddSlot, ReturnValue) == 0x000028, "Member 'AIHotSpotSlotGenerator_AddSlot::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpotSlotGenerator.GetHotSpot
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpotSlotGenerator_GetHotSpot final
{
public:
	class AAIHotSpot*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlotGenerator_GetHotSpot) == 0x000008, "Wrong alignment on AIHotSpotSlotGenerator_GetHotSpot");
static_assert(sizeof(AIHotSpotSlotGenerator_GetHotSpot) == 0x000008, "Wrong size on AIHotSpotSlotGenerator_GetHotSpot");
static_assert(offsetof(AIHotSpotSlotGenerator_GetHotSpot, ReturnValue) == 0x000000, "Member 'AIHotSpotSlotGenerator_GetHotSpot::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostContext.DepositPOSTResource
// 0x0010 (0x0010 - 0x0000)
struct FortOutpostContext_DepositPOSTResource final
{
public:
	const class UFortItemDefinition*              ResourceItem;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortOutpostContext_DepositPOSTResource) == 0x000008, "Wrong alignment on FortOutpostContext_DepositPOSTResource");
static_assert(sizeof(FortOutpostContext_DepositPOSTResource) == 0x000010, "Wrong size on FortOutpostContext_DepositPOSTResource");
static_assert(offsetof(FortOutpostContext_DepositPOSTResource, ResourceItem) == 0x000000, "Member 'FortOutpostContext_DepositPOSTResource::ResourceItem' has a wrong offset!");
static_assert(offsetof(FortOutpostContext_DepositPOSTResource, Count) == 0x000008, "Member 'FortOutpostContext_DepositPOSTResource::Count' has a wrong offset!");

// Function FortniteGame.FortOutpostContext.UpgradeBuilding
// 0x0001 (0x0001 - 0x0000)
struct FortOutpostContext_UpgradeBuilding final
{
public:
	EOutpostBuildings                             OutpostBuilding;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostContext_UpgradeBuilding) == 0x000001, "Wrong alignment on FortOutpostContext_UpgradeBuilding");
static_assert(sizeof(FortOutpostContext_UpgradeBuilding) == 0x000001, "Wrong size on FortOutpostContext_UpgradeBuilding");
static_assert(offsetof(FortOutpostContext_UpgradeBuilding, OutpostBuilding) == 0x000000, "Member 'FortOutpostContext_UpgradeBuilding::OutpostBuilding' has a wrong offset!");

// Function FortniteGame.FortOutpostContext.UpgradeBuildingByDefinition
// 0x0008 (0x0008 - 0x0000)
struct FortOutpostContext_UpgradeBuildingByDefinition final
{
public:
	class UFortOutpostItemDefinition*             BuildingToUpgrade;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostContext_UpgradeBuildingByDefinition) == 0x000008, "Wrong alignment on FortOutpostContext_UpgradeBuildingByDefinition");
static_assert(sizeof(FortOutpostContext_UpgradeBuildingByDefinition) == 0x000008, "Wrong size on FortOutpostContext_UpgradeBuildingByDefinition");
static_assert(offsetof(FortOutpostContext_UpgradeBuildingByDefinition, BuildingToUpgrade) == 0x000000, "Member 'FortOutpostContext_UpgradeBuildingByDefinition::BuildingToUpgrade' has a wrong offset!");

// Function FortniteGame.FortOutpostContext.CanUpgradeBuilding
// 0x0003 (0x0003 - 0x0000)
struct FortOutpostContext_CanUpgradeBuilding final
{
public:
	EOutpostBuildings                             OutpostBuilding;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLog;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostContext_CanUpgradeBuilding) == 0x000001, "Wrong alignment on FortOutpostContext_CanUpgradeBuilding");
static_assert(sizeof(FortOutpostContext_CanUpgradeBuilding) == 0x000003, "Wrong size on FortOutpostContext_CanUpgradeBuilding");
static_assert(offsetof(FortOutpostContext_CanUpgradeBuilding, OutpostBuilding) == 0x000000, "Member 'FortOutpostContext_CanUpgradeBuilding::OutpostBuilding' has a wrong offset!");
static_assert(offsetof(FortOutpostContext_CanUpgradeBuilding, bLog) == 0x000001, "Member 'FortOutpostContext_CanUpgradeBuilding::bLog' has a wrong offset!");
static_assert(offsetof(FortOutpostContext_CanUpgradeBuilding, ReturnValue) == 0x000002, "Member 'FortOutpostContext_CanUpgradeBuilding::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostContext.CanUpgradeBuildingFromDefinition
// 0x0010 (0x0010 - 0x0000)
struct FortOutpostContext_CanUpgradeBuildingFromDefinition final
{
public:
	class UFortOutpostItemDefinition*             OutpostBuilding;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLog;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortOutpostContext_CanUpgradeBuildingFromDefinition) == 0x000008, "Wrong alignment on FortOutpostContext_CanUpgradeBuildingFromDefinition");
static_assert(sizeof(FortOutpostContext_CanUpgradeBuildingFromDefinition) == 0x000010, "Wrong size on FortOutpostContext_CanUpgradeBuildingFromDefinition");
static_assert(offsetof(FortOutpostContext_CanUpgradeBuildingFromDefinition, OutpostBuilding) == 0x000000, "Member 'FortOutpostContext_CanUpgradeBuildingFromDefinition::OutpostBuilding' has a wrong offset!");
static_assert(offsetof(FortOutpostContext_CanUpgradeBuildingFromDefinition, bLog) == 0x000008, "Member 'FortOutpostContext_CanUpgradeBuildingFromDefinition::bLog' has a wrong offset!");
static_assert(offsetof(FortOutpostContext_CanUpgradeBuildingFromDefinition, ReturnValue) == 0x000009, "Member 'FortOutpostContext_CanUpgradeBuildingFromDefinition::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostContext.CanUpgradePOST
// 0x0001 (0x0001 - 0x0000)
struct FortOutpostContext_CanUpgradePOST final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostContext_CanUpgradePOST) == 0x000001, "Wrong alignment on FortOutpostContext_CanUpgradePOST");
static_assert(sizeof(FortOutpostContext_CanUpgradePOST) == 0x000001, "Wrong size on FortOutpostContext_CanUpgradePOST");
static_assert(offsetof(FortOutpostContext_CanUpgradePOST, ReturnValue) == 0x000000, "Member 'FortOutpostContext_CanUpgradePOST::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostContext.GetBuildingLevel
// 0x0008 (0x0008 - 0x0000)
struct FortOutpostContext_GetBuildingLevel final
{
public:
	EOutpostBuildings                             OutpostBuilding;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostContext_GetBuildingLevel) == 0x000004, "Wrong alignment on FortOutpostContext_GetBuildingLevel");
static_assert(sizeof(FortOutpostContext_GetBuildingLevel) == 0x000008, "Wrong size on FortOutpostContext_GetBuildingLevel");
static_assert(offsetof(FortOutpostContext_GetBuildingLevel, OutpostBuilding) == 0x000000, "Member 'FortOutpostContext_GetBuildingLevel::OutpostBuilding' has a wrong offset!");
static_assert(offsetof(FortOutpostContext_GetBuildingLevel, ReturnValue) == 0x000004, "Member 'FortOutpostContext_GetBuildingLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostContext.GetBuildingLevelFromDefinition
// 0x0010 (0x0010 - 0x0000)
struct FortOutpostContext_GetBuildingLevelFromDefinition final
{
public:
	class UFortOutpostItemDefinition*             OutpostBuilding;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortOutpostContext_GetBuildingLevelFromDefinition) == 0x000008, "Wrong alignment on FortOutpostContext_GetBuildingLevelFromDefinition");
static_assert(sizeof(FortOutpostContext_GetBuildingLevelFromDefinition) == 0x000010, "Wrong size on FortOutpostContext_GetBuildingLevelFromDefinition");
static_assert(offsetof(FortOutpostContext_GetBuildingLevelFromDefinition, OutpostBuilding) == 0x000000, "Member 'FortOutpostContext_GetBuildingLevelFromDefinition::OutpostBuilding' has a wrong offset!");
static_assert(offsetof(FortOutpostContext_GetBuildingLevelFromDefinition, ReturnValue) == 0x000008, "Member 'FortOutpostContext_GetBuildingLevelFromDefinition::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostContext.GetBuildingMaxLevel
// 0x0008 (0x0008 - 0x0000)
struct FortOutpostContext_GetBuildingMaxLevel final
{
public:
	EOutpostBuildings                             OutpostBuilding;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostContext_GetBuildingMaxLevel) == 0x000004, "Wrong alignment on FortOutpostContext_GetBuildingMaxLevel");
static_assert(sizeof(FortOutpostContext_GetBuildingMaxLevel) == 0x000008, "Wrong size on FortOutpostContext_GetBuildingMaxLevel");
static_assert(offsetof(FortOutpostContext_GetBuildingMaxLevel, OutpostBuilding) == 0x000000, "Member 'FortOutpostContext_GetBuildingMaxLevel::OutpostBuilding' has a wrong offset!");
static_assert(offsetof(FortOutpostContext_GetBuildingMaxLevel, ReturnValue) == 0x000004, "Member 'FortOutpostContext_GetBuildingMaxLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostContext.GetBuildingMaxLevelFromDefinition
// 0x0010 (0x0010 - 0x0000)
struct FortOutpostContext_GetBuildingMaxLevelFromDefinition final
{
public:
	class UFortOutpostItemDefinition*             OutpostBuilding;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortOutpostContext_GetBuildingMaxLevelFromDefinition) == 0x000008, "Wrong alignment on FortOutpostContext_GetBuildingMaxLevelFromDefinition");
static_assert(sizeof(FortOutpostContext_GetBuildingMaxLevelFromDefinition) == 0x000010, "Wrong size on FortOutpostContext_GetBuildingMaxLevelFromDefinition");
static_assert(offsetof(FortOutpostContext_GetBuildingMaxLevelFromDefinition, OutpostBuilding) == 0x000000, "Member 'FortOutpostContext_GetBuildingMaxLevelFromDefinition::OutpostBuilding' has a wrong offset!");
static_assert(offsetof(FortOutpostContext_GetBuildingMaxLevelFromDefinition, ReturnValue) == 0x000008, "Member 'FortOutpostContext_GetBuildingMaxLevelFromDefinition::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostContext.GetBuildingUpgradeCost
// 0x0028 (0x0028 - 0x0000)
struct FortOutpostContext_GetBuildingUpgradeCost final
{
public:
	EOutpostBuildings                             OutpostBuilding;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortItemQuantityPair>          OutWorldItems;                                     // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortItemQuantityPair>          OutAccountItems;                                   // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostContext_GetBuildingUpgradeCost) == 0x000008, "Wrong alignment on FortOutpostContext_GetBuildingUpgradeCost");
static_assert(sizeof(FortOutpostContext_GetBuildingUpgradeCost) == 0x000028, "Wrong size on FortOutpostContext_GetBuildingUpgradeCost");
static_assert(offsetof(FortOutpostContext_GetBuildingUpgradeCost, OutpostBuilding) == 0x000000, "Member 'FortOutpostContext_GetBuildingUpgradeCost::OutpostBuilding' has a wrong offset!");
static_assert(offsetof(FortOutpostContext_GetBuildingUpgradeCost, OutWorldItems) == 0x000008, "Member 'FortOutpostContext_GetBuildingUpgradeCost::OutWorldItems' has a wrong offset!");
static_assert(offsetof(FortOutpostContext_GetBuildingUpgradeCost, OutAccountItems) == 0x000018, "Member 'FortOutpostContext_GetBuildingUpgradeCost::OutAccountItems' has a wrong offset!");

// Function FortniteGame.FortOutpostContext.GetBuildingUpgradeCostFromDefinition
// 0x0028 (0x0028 - 0x0000)
struct FortOutpostContext_GetBuildingUpgradeCostFromDefinition final
{
public:
	class UFortOutpostItemDefinition*             OutpostBuilding;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortItemQuantityPair>          OutWorldItems;                                     // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortItemQuantityPair>          OutAccountItems;                                   // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostContext_GetBuildingUpgradeCostFromDefinition) == 0x000008, "Wrong alignment on FortOutpostContext_GetBuildingUpgradeCostFromDefinition");
static_assert(sizeof(FortOutpostContext_GetBuildingUpgradeCostFromDefinition) == 0x000028, "Wrong size on FortOutpostContext_GetBuildingUpgradeCostFromDefinition");
static_assert(offsetof(FortOutpostContext_GetBuildingUpgradeCostFromDefinition, OutpostBuilding) == 0x000000, "Member 'FortOutpostContext_GetBuildingUpgradeCostFromDefinition::OutpostBuilding' has a wrong offset!");
static_assert(offsetof(FortOutpostContext_GetBuildingUpgradeCostFromDefinition, OutWorldItems) == 0x000008, "Member 'FortOutpostContext_GetBuildingUpgradeCostFromDefinition::OutWorldItems' has a wrong offset!");
static_assert(offsetof(FortOutpostContext_GetBuildingUpgradeCostFromDefinition, OutAccountItems) == 0x000018, "Member 'FortOutpostContext_GetBuildingUpgradeCostFromDefinition::OutAccountItems' has a wrong offset!");

// Function FortniteGame.FortOutpostContext.GetHarvestingToolForLevel
// 0x0010 (0x0010 - 0x0000)
struct FortOutpostContext_GetHarvestingToolForLevel final
{
public:
	int32                                         InHarvestingOptimizerLevel;                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortWorldItemDefinition*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostContext_GetHarvestingToolForLevel) == 0x000008, "Wrong alignment on FortOutpostContext_GetHarvestingToolForLevel");
static_assert(sizeof(FortOutpostContext_GetHarvestingToolForLevel) == 0x000010, "Wrong size on FortOutpostContext_GetHarvestingToolForLevel");
static_assert(offsetof(FortOutpostContext_GetHarvestingToolForLevel, InHarvestingOptimizerLevel) == 0x000000, "Member 'FortOutpostContext_GetHarvestingToolForLevel::InHarvestingOptimizerLevel' has a wrong offset!");
static_assert(offsetof(FortOutpostContext_GetHarvestingToolForLevel, ReturnValue) == 0x000008, "Member 'FortOutpostContext_GetHarvestingToolForLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostContext.GetNextPOSTLevelRequirements
// 0x0010 (0x0010 - 0x0000)
struct FortOutpostContext_GetNextPOSTLevelRequirements final
{
public:
	TArray<class UOutpostPOSTRequirementData*>    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostContext_GetNextPOSTLevelRequirements) == 0x000008, "Wrong alignment on FortOutpostContext_GetNextPOSTLevelRequirements");
static_assert(sizeof(FortOutpostContext_GetNextPOSTLevelRequirements) == 0x000010, "Wrong size on FortOutpostContext_GetNextPOSTLevelRequirements");
static_assert(offsetof(FortOutpostContext_GetNextPOSTLevelRequirements, ReturnValue) == 0x000000, "Member 'FortOutpostContext_GetNextPOSTLevelRequirements::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostContext.GetOutpostCoreLevel
// 0x0004 (0x0004 - 0x0000)
struct FortOutpostContext_GetOutpostCoreLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostContext_GetOutpostCoreLevel) == 0x000004, "Wrong alignment on FortOutpostContext_GetOutpostCoreLevel");
static_assert(sizeof(FortOutpostContext_GetOutpostCoreLevel) == 0x000004, "Wrong size on FortOutpostContext_GetOutpostCoreLevel");
static_assert(offsetof(FortOutpostContext_GetOutpostCoreLevel, ReturnValue) == 0x000000, "Member 'FortOutpostContext_GetOutpostCoreLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostContext.GetPOSTBuildingHealthMod
// 0x0008 (0x0008 - 0x0000)
struct FortOutpostContext_GetPOSTBuildingHealthMod final
{
public:
	int32                                         POSTLevel;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostContext_GetPOSTBuildingHealthMod) == 0x000004, "Wrong alignment on FortOutpostContext_GetPOSTBuildingHealthMod");
static_assert(sizeof(FortOutpostContext_GetPOSTBuildingHealthMod) == 0x000008, "Wrong size on FortOutpostContext_GetPOSTBuildingHealthMod");
static_assert(offsetof(FortOutpostContext_GetPOSTBuildingHealthMod, POSTLevel) == 0x000000, "Member 'FortOutpostContext_GetPOSTBuildingHealthMod::POSTLevel' has a wrong offset!");
static_assert(offsetof(FortOutpostContext_GetPOSTBuildingHealthMod, ReturnValue) == 0x000004, "Member 'FortOutpostContext_GetPOSTBuildingHealthMod::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAccountItemDefinition.GetRecyclingRefunds
// 0x0010 (0x0010 - 0x0000)
struct FortAccountItemDefinition_GetRecyclingRefunds final
{
public:
	TArray<struct FFortItemQuantityPair>          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAccountItemDefinition_GetRecyclingRefunds) == 0x000008, "Wrong alignment on FortAccountItemDefinition_GetRecyclingRefunds");
static_assert(sizeof(FortAccountItemDefinition_GetRecyclingRefunds) == 0x000010, "Wrong size on FortAccountItemDefinition_GetRecyclingRefunds");
static_assert(offsetof(FortAccountItemDefinition_GetRecyclingRefunds, ReturnValue) == 0x000000, "Member 'FortAccountItemDefinition_GetRecyclingRefunds::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItemDefinition.AllowsTileMatching
// 0x0001 (0x0001 - 0x0000)
struct FortQuestItemDefinition_AllowsTileMatching final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItemDefinition_AllowsTileMatching) == 0x000001, "Wrong alignment on FortQuestItemDefinition_AllowsTileMatching");
static_assert(sizeof(FortQuestItemDefinition_AllowsTileMatching) == 0x000001, "Wrong size on FortQuestItemDefinition_AllowsTileMatching");
static_assert(offsetof(FortQuestItemDefinition_AllowsTileMatching, ReturnValue) == 0x000000, "Member 'FortQuestItemDefinition_AllowsTileMatching::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItemDefinition.ExpandsStormShield
// 0x0001 (0x0001 - 0x0000)
struct FortQuestItemDefinition_ExpandsStormShield final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItemDefinition_ExpandsStormShield) == 0x000001, "Wrong alignment on FortQuestItemDefinition_ExpandsStormShield");
static_assert(sizeof(FortQuestItemDefinition_ExpandsStormShield) == 0x000001, "Wrong size on FortQuestItemDefinition_ExpandsStormShield");
static_assert(offsetof(FortQuestItemDefinition_ExpandsStormShield, ReturnValue) == 0x000000, "Member 'FortQuestItemDefinition_ExpandsStormShield::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItemDefinition.GetCategory
// 0x0010 (0x0010 - 0x0000)
struct FortQuestItemDefinition_GetCategory final
{
public:
	struct FDataTableRowHandle                    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItemDefinition_GetCategory) == 0x000008, "Wrong alignment on FortQuestItemDefinition_GetCategory");
static_assert(sizeof(FortQuestItemDefinition_GetCategory) == 0x000010, "Wrong size on FortQuestItemDefinition_GetCategory");
static_assert(offsetof(FortQuestItemDefinition_GetCategory, ReturnValue) == 0x000000, "Member 'FortQuestItemDefinition_GetCategory::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItemDefinition.GetClaimConversation
// 0x0008 (0x0008 - 0x0000)
struct FortQuestItemDefinition_GetClaimConversation final
{
public:
	class UFortConversation*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItemDefinition_GetClaimConversation) == 0x000008, "Wrong alignment on FortQuestItemDefinition_GetClaimConversation");
static_assert(sizeof(FortQuestItemDefinition_GetClaimConversation) == 0x000008, "Wrong size on FortQuestItemDefinition_GetClaimConversation");
static_assert(offsetof(FortQuestItemDefinition_GetClaimConversation, ReturnValue) == 0x000000, "Member 'FortQuestItemDefinition_GetClaimConversation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItemDefinition.GetCompletionText
// 0x0018 (0x0018 - 0x0000)
struct FortQuestItemDefinition_GetCompletionText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItemDefinition_GetCompletionText) == 0x000008, "Wrong alignment on FortQuestItemDefinition_GetCompletionText");
static_assert(sizeof(FortQuestItemDefinition_GetCompletionText) == 0x000018, "Wrong size on FortQuestItemDefinition_GetCompletionText");
static_assert(offsetof(FortQuestItemDefinition_GetCompletionText, ReturnValue) == 0x000000, "Member 'FortQuestItemDefinition_GetCompletionText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItemDefinition.GetHiddenRewards_BP
// 0x0010 (0x0010 - 0x0000)
struct FortQuestItemDefinition_GetHiddenRewards_BP final
{
public:
	TArray<struct FFortHiddenRewardQuantityPair>  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItemDefinition_GetHiddenRewards_BP) == 0x000008, "Wrong alignment on FortQuestItemDefinition_GetHiddenRewards_BP");
static_assert(sizeof(FortQuestItemDefinition_GetHiddenRewards_BP) == 0x000010, "Wrong size on FortQuestItemDefinition_GetHiddenRewards_BP");
static_assert(offsetof(FortQuestItemDefinition_GetHiddenRewards_BP, ReturnValue) == 0x000000, "Member 'FortQuestItemDefinition_GetHiddenRewards_BP::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItemDefinition.GetIntroConversation
// 0x0008 (0x0008 - 0x0000)
struct FortQuestItemDefinition_GetIntroConversation final
{
public:
	class UFortConversation*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItemDefinition_GetIntroConversation) == 0x000008, "Wrong alignment on FortQuestItemDefinition_GetIntroConversation");
static_assert(sizeof(FortQuestItemDefinition_GetIntroConversation) == 0x000008, "Wrong size on FortQuestItemDefinition_GetIntroConversation");
static_assert(offsetof(FortQuestItemDefinition_GetIntroConversation, ReturnValue) == 0x000000, "Member 'FortQuestItemDefinition_GetIntroConversation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItemDefinition.GetObjectives_BP
// 0x0010 (0x0010 - 0x0000)
struct FortQuestItemDefinition_GetObjectives_BP final
{
public:
	TArray<struct FFortMcpQuestObjectiveInfo>     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItemDefinition_GetObjectives_BP) == 0x000008, "Wrong alignment on FortQuestItemDefinition_GetObjectives_BP");
static_assert(sizeof(FortQuestItemDefinition_GetObjectives_BP) == 0x000010, "Wrong size on FortQuestItemDefinition_GetObjectives_BP");
static_assert(offsetof(FortQuestItemDefinition_GetObjectives_BP, ReturnValue) == 0x000000, "Member 'FortQuestItemDefinition_GetObjectives_BP::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItemDefinition.GetPrerequisiteObjective
// 0x0010 (0x0010 - 0x0000)
struct FortQuestItemDefinition_GetPrerequisiteObjective final
{
public:
	struct FDataTableRowHandle                    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItemDefinition_GetPrerequisiteObjective) == 0x000008, "Wrong alignment on FortQuestItemDefinition_GetPrerequisiteObjective");
static_assert(sizeof(FortQuestItemDefinition_GetPrerequisiteObjective) == 0x000010, "Wrong size on FortQuestItemDefinition_GetPrerequisiteObjective");
static_assert(offsetof(FortQuestItemDefinition_GetPrerequisiteObjective, ReturnValue) == 0x000000, "Member 'FortQuestItemDefinition_GetPrerequisiteObjective::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItemDefinition.GetPrerequisiteQuest
// 0x0008 (0x0008 - 0x0000)
struct FortQuestItemDefinition_GetPrerequisiteQuest final
{
public:
	class UFortQuestItemDefinition*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItemDefinition_GetPrerequisiteQuest) == 0x000008, "Wrong alignment on FortQuestItemDefinition_GetPrerequisiteQuest");
static_assert(sizeof(FortQuestItemDefinition_GetPrerequisiteQuest) == 0x000008, "Wrong size on FortQuestItemDefinition_GetPrerequisiteQuest");
static_assert(offsetof(FortQuestItemDefinition_GetPrerequisiteQuest, ReturnValue) == 0x000000, "Member 'FortQuestItemDefinition_GetPrerequisiteQuest::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItemDefinition.GetQuestType
// 0x0001 (0x0001 - 0x0000)
struct FortQuestItemDefinition_GetQuestType final
{
public:
	EFortQuestType                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItemDefinition_GetQuestType) == 0x000001, "Wrong alignment on FortQuestItemDefinition_GetQuestType");
static_assert(sizeof(FortQuestItemDefinition_GetQuestType) == 0x000001, "Wrong size on FortQuestItemDefinition_GetQuestType");
static_assert(offsetof(FortQuestItemDefinition_GetQuestType, ReturnValue) == 0x000000, "Member 'FortQuestItemDefinition_GetQuestType::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItemDefinition.GetRewardDescription
// 0x0018 (0x0018 - 0x0000)
struct FortQuestItemDefinition_GetRewardDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItemDefinition_GetRewardDescription) == 0x000008, "Wrong alignment on FortQuestItemDefinition_GetRewardDescription");
static_assert(sizeof(FortQuestItemDefinition_GetRewardDescription) == 0x000018, "Wrong size on FortQuestItemDefinition_GetRewardDescription");
static_assert(offsetof(FortQuestItemDefinition_GetRewardDescription, ReturnValue) == 0x000000, "Member 'FortQuestItemDefinition_GetRewardDescription::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItemDefinition.GetRewardHeaderText
// 0x0018 (0x0018 - 0x0000)
struct FortQuestItemDefinition_GetRewardHeaderText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItemDefinition_GetRewardHeaderText) == 0x000008, "Wrong alignment on FortQuestItemDefinition_GetRewardHeaderText");
static_assert(sizeof(FortQuestItemDefinition_GetRewardHeaderText) == 0x000018, "Wrong size on FortQuestItemDefinition_GetRewardHeaderText");
static_assert(offsetof(FortQuestItemDefinition_GetRewardHeaderText, ReturnValue) == 0x000000, "Member 'FortQuestItemDefinition_GetRewardHeaderText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItemDefinition.GetRewardInfo_BP
// 0x0030 (0x0030 - 0x0000)
struct FortQuestItemDefinition_GetRewardInfo_BP final
{
public:
	struct FFortRewardInfo                        ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItemDefinition_GetRewardInfo_BP) == 0x000008, "Wrong alignment on FortQuestItemDefinition_GetRewardInfo_BP");
static_assert(sizeof(FortQuestItemDefinition_GetRewardInfo_BP) == 0x000030, "Wrong size on FortQuestItemDefinition_GetRewardInfo_BP");
static_assert(offsetof(FortQuestItemDefinition_GetRewardInfo_BP, ReturnValue) == 0x000000, "Member 'FortQuestItemDefinition_GetRewardInfo_BP::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItemDefinition.GetRewards_BP
// 0x0010 (0x0010 - 0x0000)
struct FortQuestItemDefinition_GetRewards_BP final
{
public:
	TArray<struct FFortItemQuantityPair>          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItemDefinition_GetRewards_BP) == 0x000008, "Wrong alignment on FortQuestItemDefinition_GetRewards_BP");
static_assert(sizeof(FortQuestItemDefinition_GetRewards_BP) == 0x000010, "Wrong size on FortQuestItemDefinition_GetRewards_BP");
static_assert(offsetof(FortQuestItemDefinition_GetRewards_BP, ReturnValue) == 0x000000, "Member 'FortQuestItemDefinition_GetRewards_BP::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItemDefinition.GetRewardType
// 0x0001 (0x0001 - 0x0000)
struct FortQuestItemDefinition_GetRewardType final
{
public:
	EFortQuestRewardType                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItemDefinition_GetRewardType) == 0x000001, "Wrong alignment on FortQuestItemDefinition_GetRewardType");
static_assert(sizeof(FortQuestItemDefinition_GetRewardType) == 0x000001, "Wrong size on FortQuestItemDefinition_GetRewardType");
static_assert(offsetof(FortQuestItemDefinition_GetRewardType, ReturnValue) == 0x000000, "Member 'FortQuestItemDefinition_GetRewardType::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItemDefinition.GetSelectableRewards_BP
// 0x0010 (0x0010 - 0x0000)
struct FortQuestItemDefinition_GetSelectableRewards_BP final
{
public:
	TArray<struct FFortMcpQuestRewardInfo>        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItemDefinition_GetSelectableRewards_BP) == 0x000008, "Wrong alignment on FortQuestItemDefinition_GetSelectableRewards_BP");
static_assert(sizeof(FortQuestItemDefinition_GetSelectableRewards_BP) == 0x000010, "Wrong size on FortQuestItemDefinition_GetSelectableRewards_BP");
static_assert(offsetof(FortQuestItemDefinition_GetSelectableRewards_BP, ReturnValue) == 0x000000, "Member 'FortQuestItemDefinition_GetSelectableRewards_BP::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItemDefinition.GetSelectRewardsConversation
// 0x0008 (0x0008 - 0x0000)
struct FortQuestItemDefinition_GetSelectRewardsConversation final
{
public:
	class UFortConversation*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItemDefinition_GetSelectRewardsConversation) == 0x000008, "Wrong alignment on FortQuestItemDefinition_GetSelectRewardsConversation");
static_assert(sizeof(FortQuestItemDefinition_GetSelectRewardsConversation) == 0x000008, "Wrong size on FortQuestItemDefinition_GetSelectRewardsConversation");
static_assert(offsetof(FortQuestItemDefinition_GetSelectRewardsConversation, ReturnValue) == 0x000000, "Member 'FortQuestItemDefinition_GetSelectRewardsConversation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItemDefinition.GetWeight
// 0x0004 (0x0004 - 0x0000)
struct FortQuestItemDefinition_GetWeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItemDefinition_GetWeight) == 0x000004, "Wrong alignment on FortQuestItemDefinition_GetWeight");
static_assert(sizeof(FortQuestItemDefinition_GetWeight) == 0x000004, "Wrong size on FortQuestItemDefinition_GetWeight");
static_assert(offsetof(FortQuestItemDefinition_GetWeight, ReturnValue) == 0x000000, "Member 'FortQuestItemDefinition_GetWeight::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItemDefinition.IsDeprecated
// 0x0001 (0x0001 - 0x0000)
struct FortQuestItemDefinition_IsDeprecated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItemDefinition_IsDeprecated) == 0x000001, "Wrong alignment on FortQuestItemDefinition_IsDeprecated");
static_assert(sizeof(FortQuestItemDefinition_IsDeprecated) == 0x000001, "Wrong size on FortQuestItemDefinition_IsDeprecated");
static_assert(offsetof(FortQuestItemDefinition_IsDeprecated, ReturnValue) == 0x000000, "Member 'FortQuestItemDefinition_IsDeprecated::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItemDefinition.IsHidden
// 0x0001 (0x0001 - 0x0000)
struct FortQuestItemDefinition_IsHidden final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItemDefinition_IsHidden) == 0x000001, "Wrong alignment on FortQuestItemDefinition_IsHidden");
static_assert(sizeof(FortQuestItemDefinition_IsHidden) == 0x000001, "Wrong size on FortQuestItemDefinition_IsHidden");
static_assert(offsetof(FortQuestItemDefinition_IsHidden, ReturnValue) == 0x000000, "Member 'FortQuestItemDefinition_IsHidden::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItemDefinition.ShouldAutoLaunch
// 0x0001 (0x0001 - 0x0000)
struct FortQuestItemDefinition_ShouldAutoLaunch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItemDefinition_ShouldAutoLaunch) == 0x000001, "Wrong alignment on FortQuestItemDefinition_ShouldAutoLaunch");
static_assert(sizeof(FortQuestItemDefinition_ShouldAutoLaunch) == 0x000001, "Wrong size on FortQuestItemDefinition_ShouldAutoLaunch");
static_assert(offsetof(FortQuestItemDefinition_ShouldAutoLaunch, ReturnValue) == 0x000000, "Member 'FortQuestItemDefinition_ShouldAutoLaunch::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCheatManager.AreContextMenusEnabled
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_AreContextMenusEnabled final
{
public:
	const class APlayerController*                PC;                                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCheatManager_AreContextMenusEnabled) == 0x000008, "Wrong alignment on FortCheatManager_AreContextMenusEnabled");
static_assert(sizeof(FortCheatManager_AreContextMenusEnabled) == 0x000010, "Wrong size on FortCheatManager_AreContextMenusEnabled");
static_assert(offsetof(FortCheatManager_AreContextMenusEnabled, PC) == 0x000000, "Member 'FortCheatManager_AreContextMenusEnabled::PC' has a wrong offset!");
static_assert(offsetof(FortCheatManager_AreContextMenusEnabled, ReturnValue) == 0x000008, "Member 'FortCheatManager_AreContextMenusEnabled::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCheatManager.AddAllScores
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_AddAllScores final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_AddAllScores) == 0x000004, "Wrong alignment on FortCheatManager_AddAllScores");
static_assert(sizeof(FortCheatManager_AddAllScores) == 0x000004, "Wrong size on FortCheatManager_AddAllScores");
static_assert(offsetof(FortCheatManager_AddAllScores, Amount) == 0x000000, "Member 'FortCheatManager_AddAllScores::Amount' has a wrong offset!");

// Function FortniteGame.FortCheatManager.AddBuildingScore
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_AddBuildingScore final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_AddBuildingScore) == 0x000004, "Wrong alignment on FortCheatManager_AddBuildingScore");
static_assert(sizeof(FortCheatManager_AddBuildingScore) == 0x000004, "Wrong size on FortCheatManager_AddBuildingScore");
static_assert(offsetof(FortCheatManager_AddBuildingScore, Amount) == 0x000000, "Member 'FortCheatManager_AddBuildingScore::Amount' has a wrong offset!");

// Function FortniteGame.FortCheatManager.AddCombatScore
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_AddCombatScore final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_AddCombatScore) == 0x000004, "Wrong alignment on FortCheatManager_AddCombatScore");
static_assert(sizeof(FortCheatManager_AddCombatScore) == 0x000004, "Wrong size on FortCheatManager_AddCombatScore");
static_assert(offsetof(FortCheatManager_AddCombatScore, Amount) == 0x000000, "Member 'FortCheatManager_AddCombatScore::Amount' has a wrong offset!");

// Function FortniteGame.FortCheatManager.AddDebugSpawnAIGroupTag
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_AddDebugSpawnAIGroupTag final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_AddDebugSpawnAIGroupTag) == 0x000004, "Wrong alignment on FortCheatManager_AddDebugSpawnAIGroupTag");
static_assert(sizeof(FortCheatManager_AddDebugSpawnAIGroupTag) == 0x000008, "Wrong size on FortCheatManager_AddDebugSpawnAIGroupTag");
static_assert(offsetof(FortCheatManager_AddDebugSpawnAIGroupTag, Tag) == 0x000000, "Member 'FortCheatManager_AddDebugSpawnAIGroupTag::Tag' has a wrong offset!");

// Function FortniteGame.FortCheatManager.AddUtilityScore
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_AddUtilityScore final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_AddUtilityScore) == 0x000004, "Wrong alignment on FortCheatManager_AddUtilityScore");
static_assert(sizeof(FortCheatManager_AddUtilityScore) == 0x000004, "Wrong size on FortCheatManager_AddUtilityScore");
static_assert(offsetof(FortCheatManager_AddUtilityScore, Amount) == 0x000000, "Member 'FortCheatManager_AddUtilityScore::Amount' has a wrong offset!");

// Function FortniteGame.FortCheatManager.ApplyGameplayModifier
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_ApplyGameplayModifier final
{
public:
	class FString                                 ModifierName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_ApplyGameplayModifier) == 0x000008, "Wrong alignment on FortCheatManager_ApplyGameplayModifier");
static_assert(sizeof(FortCheatManager_ApplyGameplayModifier) == 0x000010, "Wrong size on FortCheatManager_ApplyGameplayModifier");
static_assert(offsetof(FortCheatManager_ApplyGameplayModifier, ModifierName) == 0x000000, "Member 'FortCheatManager_ApplyGameplayModifier::ModifierName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.ApplyWeaponAlteration
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_ApplyWeaponAlteration final
{
public:
	class FString                                 AlterationName;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_ApplyWeaponAlteration) == 0x000008, "Wrong alignment on FortCheatManager_ApplyWeaponAlteration");
static_assert(sizeof(FortCheatManager_ApplyWeaponAlteration) == 0x000010, "Wrong size on FortCheatManager_ApplyWeaponAlteration");
static_assert(offsetof(FortCheatManager_ApplyWeaponAlteration, AlterationName) == 0x000000, "Member 'FortCheatManager_ApplyWeaponAlteration::AlterationName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.BackpackSetSize
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_BackpackSetSize final
{
public:
	int32                                         Size;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_BackpackSetSize) == 0x000004, "Wrong alignment on FortCheatManager_BackpackSetSize");
static_assert(sizeof(FortCheatManager_BackpackSetSize) == 0x000004, "Wrong size on FortCheatManager_BackpackSetSize");
static_assert(offsetof(FortCheatManager_BackpackSetSize, Size) == 0x000000, "Member 'FortCheatManager_BackpackSetSize::Size' has a wrong offset!");

// Function FortniteGame.FortCheatManager.BotProtectBuilding
// 0x0020 (0x0020 - 0x0000)
struct FortCheatManager_BotProtectBuilding final
{
public:
	class FString                                 ClassName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosX;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosY;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosZ;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCheatManager_BotProtectBuilding) == 0x000008, "Wrong alignment on FortCheatManager_BotProtectBuilding");
static_assert(sizeof(FortCheatManager_BotProtectBuilding) == 0x000020, "Wrong size on FortCheatManager_BotProtectBuilding");
static_assert(offsetof(FortCheatManager_BotProtectBuilding, ClassName) == 0x000000, "Member 'FortCheatManager_BotProtectBuilding::ClassName' has a wrong offset!");
static_assert(offsetof(FortCheatManager_BotProtectBuilding, PosX) == 0x000010, "Member 'FortCheatManager_BotProtectBuilding::PosX' has a wrong offset!");
static_assert(offsetof(FortCheatManager_BotProtectBuilding, PosY) == 0x000014, "Member 'FortCheatManager_BotProtectBuilding::PosY' has a wrong offset!");
static_assert(offsetof(FortCheatManager_BotProtectBuilding, PosZ) == 0x000018, "Member 'FortCheatManager_BotProtectBuilding::PosZ' has a wrong offset!");

// Function FortniteGame.FortCheatManager.BuildWith
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_BuildWith final
{
public:
	class FString                                 ResourceTypeAndOrLevel;                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_BuildWith) == 0x000008, "Wrong alignment on FortCheatManager_BuildWith");
static_assert(sizeof(FortCheatManager_BuildWith) == 0x000010, "Wrong size on FortCheatManager_BuildWith");
static_assert(offsetof(FortCheatManager_BuildWith, ResourceTypeAndOrLevel) == 0x000000, "Member 'FortCheatManager_BuildWith::ResourceTypeAndOrLevel' has a wrong offset!");

// Function FortniteGame.FortCheatManager.ConstructTileWorld
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_ConstructTileWorld final
{
public:
	int32                                         MaxTiles;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         X;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_ConstructTileWorld) == 0x000004, "Wrong alignment on FortCheatManager_ConstructTileWorld");
static_assert(sizeof(FortCheatManager_ConstructTileWorld) == 0x00000C, "Wrong size on FortCheatManager_ConstructTileWorld");
static_assert(offsetof(FortCheatManager_ConstructTileWorld, MaxTiles) == 0x000000, "Member 'FortCheatManager_ConstructTileWorld::MaxTiles' has a wrong offset!");
static_assert(offsetof(FortCheatManager_ConstructTileWorld, X) == 0x000004, "Member 'FortCheatManager_ConstructTileWorld::X' has a wrong offset!");
static_assert(offsetof(FortCheatManager_ConstructTileWorld, Y) == 0x000008, "Member 'FortCheatManager_ConstructTileWorld::Y' has a wrong offset!");

// Function FortniteGame.FortCheatManager.DebugAttribute
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_DebugAttribute final
{
public:
	class FString                                 Attribute;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_DebugAttribute) == 0x000008, "Wrong alignment on FortCheatManager_DebugAttribute");
static_assert(sizeof(FortCheatManager_DebugAttribute) == 0x000010, "Wrong size on FortCheatManager_DebugAttribute");
static_assert(offsetof(FortCheatManager_DebugAttribute, Attribute) == 0x000000, "Member 'FortCheatManager_DebugAttribute::Attribute' has a wrong offset!");

// Function FortniteGame.FortCheatManager.DebugLoadingScreen
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_DebugLoadingScreen final
{
public:
	class FString                                 MissionGen;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_DebugLoadingScreen) == 0x000008, "Wrong alignment on FortCheatManager_DebugLoadingScreen");
static_assert(sizeof(FortCheatManager_DebugLoadingScreen) == 0x000010, "Wrong size on FortCheatManager_DebugLoadingScreen");
static_assert(offsetof(FortCheatManager_DebugLoadingScreen, MissionGen) == 0x000000, "Member 'FortCheatManager_DebugLoadingScreen::MissionGen' has a wrong offset!");

// Function FortniteGame.FortCheatManager.DebugUseDedicatedServer
// 0x0001 (0x0001 - 0x0000)
struct FortCheatManager_DebugUseDedicatedServer final
{
public:
	bool                                          bUse;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_DebugUseDedicatedServer) == 0x000001, "Wrong alignment on FortCheatManager_DebugUseDedicatedServer");
static_assert(sizeof(FortCheatManager_DebugUseDedicatedServer) == 0x000001, "Wrong size on FortCheatManager_DebugUseDedicatedServer");
static_assert(offsetof(FortCheatManager_DebugUseDedicatedServer, bUse) == 0x000000, "Member 'FortCheatManager_DebugUseDedicatedServer::bUse' has a wrong offset!");

// Function FortniteGame.FortCheatManager.DumpActorsWithAssetTags
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_DumpActorsWithAssetTags final
{
public:
	class FString                                 TagList;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_DumpActorsWithAssetTags) == 0x000008, "Wrong alignment on FortCheatManager_DumpActorsWithAssetTags");
static_assert(sizeof(FortCheatManager_DumpActorsWithAssetTags) == 0x000010, "Wrong size on FortCheatManager_DumpActorsWithAssetTags");
static_assert(offsetof(FortCheatManager_DumpActorsWithAssetTags, TagList) == 0x000000, "Member 'FortCheatManager_DumpActorsWithAssetTags::TagList' has a wrong offset!");

// Function FortniteGame.FortCheatManager.DumpGameStats
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_DumpGameStats final
{
public:
	class FString                                 FilterName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_DumpGameStats) == 0x000008, "Wrong alignment on FortCheatManager_DumpGameStats");
static_assert(sizeof(FortCheatManager_DumpGameStats) == 0x000010, "Wrong size on FortCheatManager_DumpGameStats");
static_assert(offsetof(FortCheatManager_DumpGameStats, FilterName) == 0x000000, "Member 'FortCheatManager_DumpGameStats::FilterName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.EnableFixedTimeStep
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_EnableFixedTimeStep final
{
public:
	int32                                         AsIfItWasFPS;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_EnableFixedTimeStep) == 0x000004, "Wrong alignment on FortCheatManager_EnableFixedTimeStep");
static_assert(sizeof(FortCheatManager_EnableFixedTimeStep) == 0x000004, "Wrong size on FortCheatManager_EnableFixedTimeStep");
static_assert(offsetof(FortCheatManager_EnableFixedTimeStep, AsIfItWasFPS) == 0x000000, "Member 'FortCheatManager_EnableFixedTimeStep::AsIfItWasFPS' has a wrong offset!");

// Function FortniteGame.FortCheatManager.EnableNewCustomizationPanel
// 0x0001 (0x0001 - 0x0000)
struct FortCheatManager_EnableNewCustomizationPanel final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_EnableNewCustomizationPanel) == 0x000001, "Wrong alignment on FortCheatManager_EnableNewCustomizationPanel");
static_assert(sizeof(FortCheatManager_EnableNewCustomizationPanel) == 0x000001, "Wrong size on FortCheatManager_EnableNewCustomizationPanel");
static_assert(offsetof(FortCheatManager_EnableNewCustomizationPanel, bEnable) == 0x000000, "Member 'FortCheatManager_EnableNewCustomizationPanel::bEnable' has a wrong offset!");

// Function FortniteGame.FortCheatManager.EnableSubtitles
// 0x0001 (0x0001 - 0x0000)
struct FortCheatManager_EnableSubtitles final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_EnableSubtitles) == 0x000001, "Wrong alignment on FortCheatManager_EnableSubtitles");
static_assert(sizeof(FortCheatManager_EnableSubtitles) == 0x000001, "Wrong size on FortCheatManager_EnableSubtitles");
static_assert(offsetof(FortCheatManager_EnableSubtitles, bEnable) == 0x000000, "Member 'FortCheatManager_EnableSubtitles::bEnable' has a wrong offset!");

// Function FortniteGame.FortCheatManager.EncounterSetDifficultyLevel
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_EncounterSetDifficultyLevel final
{
public:
	float                                         NewDifficulty;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_EncounterSetDifficultyLevel) == 0x000004, "Wrong alignment on FortCheatManager_EncounterSetDifficultyLevel");
static_assert(sizeof(FortCheatManager_EncounterSetDifficultyLevel) == 0x000004, "Wrong size on FortCheatManager_EncounterSetDifficultyLevel");
static_assert(offsetof(FortCheatManager_EncounterSetDifficultyLevel, NewDifficulty) == 0x000000, "Member 'FortCheatManager_EncounterSetDifficultyLevel::NewDifficulty' has a wrong offset!");

// Function FortniteGame.FortCheatManager.ExecuteNewMissionGeneration
// 0x0018 (0x0018 - 0x0000)
struct FortCheatManager_ExecuteNewMissionGeneration final
{
public:
	float                                         DifficultyLevel;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GeneratorName;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_ExecuteNewMissionGeneration) == 0x000008, "Wrong alignment on FortCheatManager_ExecuteNewMissionGeneration");
static_assert(sizeof(FortCheatManager_ExecuteNewMissionGeneration) == 0x000018, "Wrong size on FortCheatManager_ExecuteNewMissionGeneration");
static_assert(offsetof(FortCheatManager_ExecuteNewMissionGeneration, DifficultyLevel) == 0x000000, "Member 'FortCheatManager_ExecuteNewMissionGeneration::DifficultyLevel' has a wrong offset!");
static_assert(offsetof(FortCheatManager_ExecuteNewMissionGeneration, GeneratorName) == 0x000008, "Member 'FortCheatManager_ExecuteNewMissionGeneration::GeneratorName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.ForceAILODs
// 0x0001 (0x0001 - 0x0000)
struct FortCheatManager_ForceAILODs final
{
public:
	EFortAILODLevel                               InForcedAILODValue;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_ForceAILODs) == 0x000001, "Wrong alignment on FortCheatManager_ForceAILODs");
static_assert(sizeof(FortCheatManager_ForceAILODs) == 0x000001, "Wrong size on FortCheatManager_ForceAILODs");
static_assert(offsetof(FortCheatManager_ForceAILODs, InForcedAILODValue) == 0x000000, "Member 'FortCheatManager_ForceAILODs::InForcedAILODValue' has a wrong offset!");

// Function FortniteGame.FortCheatManager.ForceHeroType
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_ForceHeroType final
{
public:
	class FString                                 HeroPersistentName;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_ForceHeroType) == 0x000008, "Wrong alignment on FortCheatManager_ForceHeroType");
static_assert(sizeof(FortCheatManager_ForceHeroType) == 0x000010, "Wrong size on FortCheatManager_ForceHeroType");
static_assert(offsetof(FortCheatManager_ForceHeroType, HeroPersistentName) == 0x000000, "Member 'FortCheatManager_ForceHeroType::HeroPersistentName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.ForceSaveMissionStateAndWorld
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_ForceSaveMissionStateAndWorld final
{
public:
	class FString                                 SaveFileName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_ForceSaveMissionStateAndWorld) == 0x000008, "Wrong alignment on FortCheatManager_ForceSaveMissionStateAndWorld");
static_assert(sizeof(FortCheatManager_ForceSaveMissionStateAndWorld) == 0x000010, "Wrong size on FortCheatManager_ForceSaveMissionStateAndWorld");
static_assert(offsetof(FortCheatManager_ForceSaveMissionStateAndWorld, SaveFileName) == 0x000000, "Member 'FortCheatManager_ForceSaveMissionStateAndWorld::SaveFileName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.ForceServerShutdown
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_ForceServerShutdown final
{
public:
	int32                                         ExitCode;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_ForceServerShutdown) == 0x000004, "Wrong alignment on FortCheatManager_ForceServerShutdown");
static_assert(sizeof(FortCheatManager_ForceServerShutdown) == 0x000004, "Wrong size on FortCheatManager_ForceServerShutdown");
static_assert(offsetof(FortCheatManager_ForceServerShutdown, ExitCode) == 0x000000, "Member 'FortCheatManager_ForceServerShutdown::ExitCode' has a wrong offset!");

// Function FortniteGame.FortCheatManager.ForceSetHeroRemoteCharacter
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_ForceSetHeroRemoteCharacter final
{
public:
	int32                                         PartyMemberIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCheatManager_ForceSetHeroRemoteCharacter) == 0x000004, "Wrong alignment on FortCheatManager_ForceSetHeroRemoteCharacter");
static_assert(sizeof(FortCheatManager_ForceSetHeroRemoteCharacter) == 0x000008, "Wrong size on FortCheatManager_ForceSetHeroRemoteCharacter");
static_assert(offsetof(FortCheatManager_ForceSetHeroRemoteCharacter, PartyMemberIndex) == 0x000000, "Member 'FortCheatManager_ForceSetHeroRemoteCharacter::PartyMemberIndex' has a wrong offset!");
static_assert(offsetof(FortCheatManager_ForceSetHeroRemoteCharacter, bEnabled) == 0x000004, "Member 'FortCheatManager_ForceSetHeroRemoteCharacter::bEnabled' has a wrong offset!");

// Function FortniteGame.FortCheatManager.ForceUnlockHordeTiers
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_ForceUnlockHordeTiers final
{
public:
	int32                                         MaxTierNumber;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_ForceUnlockHordeTiers) == 0x000004, "Wrong alignment on FortCheatManager_ForceUnlockHordeTiers");
static_assert(sizeof(FortCheatManager_ForceUnlockHordeTiers) == 0x000004, "Wrong size on FortCheatManager_ForceUnlockHordeTiers");
static_assert(offsetof(FortCheatManager_ForceUnlockHordeTiers, MaxTierNumber) == 0x000000, "Member 'FortCheatManager_ForceUnlockHordeTiers::MaxTierNumber' has a wrong offset!");

// Function FortniteGame.FortCheatManager.FortniteForceCharLOD
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_FortniteForceCharLOD final
{
public:
	int32                                         LOD;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_FortniteForceCharLOD) == 0x000004, "Wrong alignment on FortCheatManager_FortniteForceCharLOD");
static_assert(sizeof(FortCheatManager_FortniteForceCharLOD) == 0x000004, "Wrong size on FortCheatManager_FortniteForceCharLOD");
static_assert(offsetof(FortCheatManager_FortniteForceCharLOD, LOD) == 0x000000, "Member 'FortCheatManager_FortniteForceCharLOD::LOD' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GeneratePolysInPathingRange
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_GeneratePolysInPathingRange final
{
public:
	float                                         MaxDistance;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDistance;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GeneratePolysInPathingRange) == 0x000004, "Wrong alignment on FortCheatManager_GeneratePolysInPathingRange");
static_assert(sizeof(FortCheatManager_GeneratePolysInPathingRange) == 0x000008, "Wrong size on FortCheatManager_GeneratePolysInPathingRange");
static_assert(offsetof(FortCheatManager_GeneratePolysInPathingRange, MaxDistance) == 0x000000, "Member 'FortCheatManager_GeneratePolysInPathingRange::MaxDistance' has a wrong offset!");
static_assert(offsetof(FortCheatManager_GeneratePolysInPathingRange, MinDistance) == 0x000004, "Member 'FortCheatManager_GeneratePolysInPathingRange::MinDistance' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GetGameStat
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_GetGameStat final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GetGameStat) == 0x000008, "Wrong alignment on FortCheatManager_GetGameStat");
static_assert(sizeof(FortCheatManager_GetGameStat) == 0x000010, "Wrong size on FortCheatManager_GetGameStat");
static_assert(offsetof(FortCheatManager_GetGameStat, StatName) == 0x000000, "Member 'FortCheatManager_GetGameStat::StatName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GetReplStat
// 0x0001 (0x0001 - 0x0000)
struct FortCheatManager_GetReplStat final
{
public:
	EFortReplicatedStat                           Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GetReplStat) == 0x000001, "Wrong alignment on FortCheatManager_GetReplStat");
static_assert(sizeof(FortCheatManager_GetReplStat) == 0x000001, "Wrong size on FortCheatManager_GetReplStat");
static_assert(offsetof(FortCheatManager_GetReplStat, Stat) == 0x000000, "Member 'FortCheatManager_GetReplStat::Stat' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GiveAllConsumables
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_GiveAllConsumables final
{
public:
	int32                                         NumItems;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GiveAllConsumables) == 0x000004, "Wrong alignment on FortCheatManager_GiveAllConsumables");
static_assert(sizeof(FortCheatManager_GiveAllConsumables) == 0x000004, "Wrong size on FortCheatManager_GiveAllConsumables");
static_assert(offsetof(FortCheatManager_GiveAllConsumables, NumItems) == 0x000000, "Member 'FortCheatManager_GiveAllConsumables::NumItems' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GiveAllIngredients
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_GiveAllIngredients final
{
public:
	int32                                         NumIngredients;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GiveAllIngredients) == 0x000004, "Wrong alignment on FortCheatManager_GiveAllIngredients");
static_assert(sizeof(FortCheatManager_GiveAllIngredients) == 0x000004, "Wrong size on FortCheatManager_GiveAllIngredients");
static_assert(offsetof(FortCheatManager_GiveAllIngredients, NumIngredients) == 0x000000, "Member 'FortCheatManager_GiveAllIngredients::NumIngredients' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GiveAllTraps
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_GiveAllTraps final
{
public:
	int32                                         NumItems;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GiveAllTraps) == 0x000004, "Wrong alignment on FortCheatManager_GiveAllTraps");
static_assert(sizeof(FortCheatManager_GiveAllTraps) == 0x000004, "Wrong size on FortCheatManager_GiveAllTraps");
static_assert(offsetof(FortCheatManager_GiveAllTraps, NumItems) == 0x000000, "Member 'FortCheatManager_GiveAllTraps::NumItems' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GiveAmmo
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_GiveAmmo final
{
public:
	class FString                                 AmmoNameAndAmmount;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GiveAmmo) == 0x000008, "Wrong alignment on FortCheatManager_GiveAmmo");
static_assert(sizeof(FortCheatManager_GiveAmmo) == 0x000010, "Wrong size on FortCheatManager_GiveAmmo");
static_assert(offsetof(FortCheatManager_GiveAmmo, AmmoNameAndAmmount) == 0x000000, "Member 'FortCheatManager_GiveAmmo::AmmoNameAndAmmount' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GiveBluGlo
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_GiveBluGlo final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GiveBluGlo) == 0x000004, "Wrong alignment on FortCheatManager_GiveBluGlo");
static_assert(sizeof(FortCheatManager_GiveBluGlo) == 0x000004, "Wrong size on FortCheatManager_GiveBluGlo");
static_assert(offsetof(FortCheatManager_GiveBluGlo, Amount) == 0x000000, "Member 'FortCheatManager_GiveBluGlo::Amount' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GiveConsumable
// 0x0018 (0x0018 - 0x0000)
struct FortCheatManager_GiveConsumable final
{
public:
	class FString                                 ConsumableName;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequestedLevel;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GiveConsumable) == 0x000008, "Wrong alignment on FortCheatManager_GiveConsumable");
static_assert(sizeof(FortCheatManager_GiveConsumable) == 0x000018, "Wrong size on FortCheatManager_GiveConsumable");
static_assert(offsetof(FortCheatManager_GiveConsumable, ConsumableName) == 0x000000, "Member 'FortCheatManager_GiveConsumable::ConsumableName' has a wrong offset!");
static_assert(offsetof(FortCheatManager_GiveConsumable, RequestedLevel) == 0x000010, "Member 'FortCheatManager_GiveConsumable::RequestedLevel' has a wrong offset!");
static_assert(offsetof(FortCheatManager_GiveConsumable, Count) == 0x000014, "Member 'FortCheatManager_GiveConsumable::Count' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GiveDeployablePlotAllIngredients
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_GiveDeployablePlotAllIngredients final
{
public:
	int32                                         NumIngredients;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GiveDeployablePlotAllIngredients) == 0x000004, "Wrong alignment on FortCheatManager_GiveDeployablePlotAllIngredients");
static_assert(sizeof(FortCheatManager_GiveDeployablePlotAllIngredients) == 0x000004, "Wrong size on FortCheatManager_GiveDeployablePlotAllIngredients");
static_assert(offsetof(FortCheatManager_GiveDeployablePlotAllIngredients, NumIngredients) == 0x000000, "Member 'FortCheatManager_GiveDeployablePlotAllIngredients::NumIngredients' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GiveGadget
// 0x0018 (0x0018 - 0x0000)
struct FortCheatManager_GiveGadget final
{
public:
	class FString                                 GadgetName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemLevel;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCheatManager_GiveGadget) == 0x000008, "Wrong alignment on FortCheatManager_GiveGadget");
static_assert(sizeof(FortCheatManager_GiveGadget) == 0x000018, "Wrong size on FortCheatManager_GiveGadget");
static_assert(offsetof(FortCheatManager_GiveGadget, GadgetName) == 0x000000, "Member 'FortCheatManager_GiveGadget::GadgetName' has a wrong offset!");
static_assert(offsetof(FortCheatManager_GiveGadget, ItemLevel) == 0x000010, "Member 'FortCheatManager_GiveGadget::ItemLevel' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GiveGadgets
// 0x0018 (0x0018 - 0x0000)
struct FortCheatManager_GiveGadgets final
{
public:
	class FString                                 GadgetName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemLevel;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GiveGadgets) == 0x000008, "Wrong alignment on FortCheatManager_GiveGadgets");
static_assert(sizeof(FortCheatManager_GiveGadgets) == 0x000018, "Wrong size on FortCheatManager_GiveGadgets");
static_assert(offsetof(FortCheatManager_GiveGadgets, GadgetName) == 0x000000, "Member 'FortCheatManager_GiveGadgets::GadgetName' has a wrong offset!");
static_assert(offsetof(FortCheatManager_GiveGadgets, Quantity) == 0x000010, "Member 'FortCheatManager_GiveGadgets::Quantity' has a wrong offset!");
static_assert(offsetof(FortCheatManager_GiveGadgets, ItemLevel) == 0x000014, "Member 'FortCheatManager_GiveGadgets::ItemLevel' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GiveHeroSpecialization
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_GiveHeroSpecialization final
{
public:
	class FString                                 SpecializationName;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GiveHeroSpecialization) == 0x000008, "Wrong alignment on FortCheatManager_GiveHeroSpecialization");
static_assert(sizeof(FortCheatManager_GiveHeroSpecialization) == 0x000010, "Wrong size on FortCheatManager_GiveHeroSpecialization");
static_assert(offsetof(FortCheatManager_GiveHeroSpecialization, SpecializationName) == 0x000000, "Member 'FortCheatManager_GiveHeroSpecialization::SpecializationName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GiveMetal
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_GiveMetal final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GiveMetal) == 0x000004, "Wrong alignment on FortCheatManager_GiveMetal");
static_assert(sizeof(FortCheatManager_GiveMetal) == 0x000004, "Wrong size on FortCheatManager_GiveMetal");
static_assert(offsetof(FortCheatManager_GiveMetal, Amount) == 0x000000, "Member 'FortCheatManager_GiveMetal::Amount' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GiveResources
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_GiveResources final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GiveResources) == 0x000004, "Wrong alignment on FortCheatManager_GiveResources");
static_assert(sizeof(FortCheatManager_GiveResources) == 0x000004, "Wrong size on FortCheatManager_GiveResources");
static_assert(offsetof(FortCheatManager_GiveResources, Amount) == 0x000000, "Member 'FortCheatManager_GiveResources::Amount' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GiveSBA
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_GiveSBA final
{
public:
	class FString                                 StrategicBuildingName;                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GiveSBA) == 0x000008, "Wrong alignment on FortCheatManager_GiveSBA");
static_assert(sizeof(FortCheatManager_GiveSBA) == 0x000010, "Wrong size on FortCheatManager_GiveSBA");
static_assert(offsetof(FortCheatManager_GiveSBA, StrategicBuildingName) == 0x000000, "Member 'FortCheatManager_GiveSBA::StrategicBuildingName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GiveSpecificItem
// 0x0018 (0x0018 - 0x0000)
struct FortCheatManager_GiveSpecificItem final
{
public:
	class FString                                 ItemPath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemAmount;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemLevel;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GiveSpecificItem) == 0x000008, "Wrong alignment on FortCheatManager_GiveSpecificItem");
static_assert(sizeof(FortCheatManager_GiveSpecificItem) == 0x000018, "Wrong size on FortCheatManager_GiveSpecificItem");
static_assert(offsetof(FortCheatManager_GiveSpecificItem, ItemPath) == 0x000000, "Member 'FortCheatManager_GiveSpecificItem::ItemPath' has a wrong offset!");
static_assert(offsetof(FortCheatManager_GiveSpecificItem, ItemAmount) == 0x000010, "Member 'FortCheatManager_GiveSpecificItem::ItemAmount' has a wrong offset!");
static_assert(offsetof(FortCheatManager_GiveSpecificItem, ItemLevel) == 0x000014, "Member 'FortCheatManager_GiveSpecificItem::ItemLevel' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GiveStone
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_GiveStone final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GiveStone) == 0x000004, "Wrong alignment on FortCheatManager_GiveStone");
static_assert(sizeof(FortCheatManager_GiveStone) == 0x000004, "Wrong size on FortCheatManager_GiveStone");
static_assert(offsetof(FortCheatManager_GiveStone, Amount) == 0x000000, "Member 'FortCheatManager_GiveStone::Amount' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GiveTrap
// 0x0018 (0x0018 - 0x0000)
struct FortCheatManager_GiveTrap final
{
public:
	class FString                                 TrapName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequestedLevel;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumTrapsToGive;                                    // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GiveTrap) == 0x000008, "Wrong alignment on FortCheatManager_GiveTrap");
static_assert(sizeof(FortCheatManager_GiveTrap) == 0x000018, "Wrong size on FortCheatManager_GiveTrap");
static_assert(offsetof(FortCheatManager_GiveTrap, TrapName) == 0x000000, "Member 'FortCheatManager_GiveTrap::TrapName' has a wrong offset!");
static_assert(offsetof(FortCheatManager_GiveTrap, RequestedLevel) == 0x000010, "Member 'FortCheatManager_GiveTrap::RequestedLevel' has a wrong offset!");
static_assert(offsetof(FortCheatManager_GiveTrap, NumTrapsToGive) == 0x000014, "Member 'FortCheatManager_GiveTrap::NumTrapsToGive' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GiveUsefulThings
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_GiveUsefulThings final
{
public:
	int32                                         NumOfUsefulThings;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GiveUsefulThings) == 0x000004, "Wrong alignment on FortCheatManager_GiveUsefulThings");
static_assert(sizeof(FortCheatManager_GiveUsefulThings) == 0x000004, "Wrong size on FortCheatManager_GiveUsefulThings");
static_assert(offsetof(FortCheatManager_GiveUsefulThings, NumOfUsefulThings) == 0x000000, "Member 'FortCheatManager_GiveUsefulThings::NumOfUsefulThings' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GiveWeapon
// 0x0018 (0x0018 - 0x0000)
struct FortCheatManager_GiveWeapon final
{
public:
	class FString                                 WeaponName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequestedLevel;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GiveWeapon) == 0x000008, "Wrong alignment on FortCheatManager_GiveWeapon");
static_assert(sizeof(FortCheatManager_GiveWeapon) == 0x000018, "Wrong size on FortCheatManager_GiveWeapon");
static_assert(offsetof(FortCheatManager_GiveWeapon, WeaponName) == 0x000000, "Member 'FortCheatManager_GiveWeapon::WeaponName' has a wrong offset!");
static_assert(offsetof(FortCheatManager_GiveWeapon, RequestedLevel) == 0x000010, "Member 'FortCheatManager_GiveWeapon::RequestedLevel' has a wrong offset!");
static_assert(offsetof(FortCheatManager_GiveWeapon, Count) == 0x000014, "Member 'FortCheatManager_GiveWeapon::Count' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GiveWeapons
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_GiveWeapons final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GiveWeapons) == 0x000004, "Wrong alignment on FortCheatManager_GiveWeapons");
static_assert(sizeof(FortCheatManager_GiveWeapons) == 0x000008, "Wrong size on FortCheatManager_GiveWeapons");
static_assert(offsetof(FortCheatManager_GiveWeapons, Tag) == 0x000000, "Member 'FortCheatManager_GiveWeapons::Tag' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GiveWood
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_GiveWood final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GiveWood) == 0x000004, "Wrong alignment on FortCheatManager_GiveWood");
static_assert(sizeof(FortCheatManager_GiveWood) == 0x000004, "Wrong size on FortCheatManager_GiveWood");
static_assert(offsetof(FortCheatManager_GiveWood, Amount) == 0x000000, "Member 'FortCheatManager_GiveWood::Amount' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GrantHeroSupportAbility
// 0x0018 (0x0018 - 0x0000)
struct FortCheatManager_GrantHeroSupportAbility final
{
public:
	class FString                                 SupportHeroName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCheatManager_GrantHeroSupportAbility) == 0x000008, "Wrong alignment on FortCheatManager_GrantHeroSupportAbility");
static_assert(sizeof(FortCheatManager_GrantHeroSupportAbility) == 0x000018, "Wrong size on FortCheatManager_GrantHeroSupportAbility");
static_assert(offsetof(FortCheatManager_GrantHeroSupportAbility, SupportHeroName) == 0x000000, "Member 'FortCheatManager_GrantHeroSupportAbility::SupportHeroName' has a wrong offset!");
static_assert(offsetof(FortCheatManager_GrantHeroSupportAbility, Level) == 0x000010, "Member 'FortCheatManager_GrantHeroSupportAbility::Level' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GrantHeroTacticalAbility
// 0x0018 (0x0018 - 0x0000)
struct FortCheatManager_GrantHeroTacticalAbility final
{
public:
	class FString                                 SupportHeroName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCheatManager_GrantHeroTacticalAbility) == 0x000008, "Wrong alignment on FortCheatManager_GrantHeroTacticalAbility");
static_assert(sizeof(FortCheatManager_GrantHeroTacticalAbility) == 0x000018, "Wrong size on FortCheatManager_GrantHeroTacticalAbility");
static_assert(offsetof(FortCheatManager_GrantHeroTacticalAbility, SupportHeroName) == 0x000000, "Member 'FortCheatManager_GrantHeroTacticalAbility::SupportHeroName' has a wrong offset!");
static_assert(offsetof(FortCheatManager_GrantHeroTacticalAbility, Level) == 0x000010, "Member 'FortCheatManager_GrantHeroTacticalAbility::Level' has a wrong offset!");

// Function FortniteGame.FortCheatManager.HideHUDElement
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_HideHUDElement final
{
public:
	struct FGameplayTag                           HUDElementTag;                                     // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_HideHUDElement) == 0x000008, "Wrong alignment on FortCheatManager_HideHUDElement");
static_assert(sizeof(FortCheatManager_HideHUDElement) == 0x000008, "Wrong size on FortCheatManager_HideHUDElement");
static_assert(offsetof(FortCheatManager_HideHUDElement, HUDElementTag) == 0x000000, "Member 'FortCheatManager_HideHUDElement::HUDElementTag' has a wrong offset!");

// Function FortniteGame.FortCheatManager.KillPawns
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_KillPawns final
{
public:
	TSubclassOf<class AFortPawn>                  AClass;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_KillPawns) == 0x000008, "Wrong alignment on FortCheatManager_KillPawns");
static_assert(sizeof(FortCheatManager_KillPawns) == 0x000008, "Wrong size on FortCheatManager_KillPawns");
static_assert(offsetof(FortCheatManager_KillPawns, AClass) == 0x000000, "Member 'FortCheatManager_KillPawns::AClass' has a wrong offset!");

// Function FortniteGame.FortCheatManager.LiveStreamingSelectedViewers
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_LiveStreamingSelectedViewers final
{
public:
	TArray<class FString>                         Names;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_LiveStreamingSelectedViewers) == 0x000008, "Wrong alignment on FortCheatManager_LiveStreamingSelectedViewers");
static_assert(sizeof(FortCheatManager_LiveStreamingSelectedViewers) == 0x000010, "Wrong size on FortCheatManager_LiveStreamingSelectedViewers");
static_assert(offsetof(FortCheatManager_LiveStreamingSelectedViewers, Names) == 0x000000, "Member 'FortCheatManager_LiveStreamingSelectedViewers::Names' has a wrong offset!");

// Function FortniteGame.FortCheatManager.LoadMission
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_LoadMission final
{
public:
	class FString                                 MissionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_LoadMission) == 0x000008, "Wrong alignment on FortCheatManager_LoadMission");
static_assert(sizeof(FortCheatManager_LoadMission) == 0x000010, "Wrong size on FortCheatManager_LoadMission");
static_assert(offsetof(FortCheatManager_LoadMission, MissionName) == 0x000000, "Member 'FortCheatManager_LoadMission::MissionName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.LoadMissionGenerator
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_LoadMissionGenerator final
{
public:
	class FString                                 GeneratorName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_LoadMissionGenerator) == 0x000008, "Wrong alignment on FortCheatManager_LoadMissionGenerator");
static_assert(sizeof(FortCheatManager_LoadMissionGenerator) == 0x000010, "Wrong size on FortCheatManager_LoadMissionGenerator");
static_assert(offsetof(FortCheatManager_LoadMissionGenerator, GeneratorName) == 0x000000, "Member 'FortCheatManager_LoadMissionGenerator::GeneratorName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.MakeGods
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_MakeGods final
{
public:
	TSubclassOf<class AFortPawn>                  AClass;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_MakeGods) == 0x000008, "Wrong alignment on FortCheatManager_MakeGods");
static_assert(sizeof(FortCheatManager_MakeGods) == 0x000008, "Wrong size on FortCheatManager_MakeGods");
static_assert(offsetof(FortCheatManager_MakeGods, AClass) == 0x000000, "Member 'FortCheatManager_MakeGods::AClass' has a wrong offset!");

// Function FortniteGame.FortCheatManager.McpApplyAlteration
// 0x0020 (0x0020 - 0x0000)
struct FortCheatManager_McpApplyAlteration final
{
public:
	class FString                                 Schematic;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Alteration;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_McpApplyAlteration) == 0x000008, "Wrong alignment on FortCheatManager_McpApplyAlteration");
static_assert(sizeof(FortCheatManager_McpApplyAlteration) == 0x000020, "Wrong size on FortCheatManager_McpApplyAlteration");
static_assert(offsetof(FortCheatManager_McpApplyAlteration, Schematic) == 0x000000, "Member 'FortCheatManager_McpApplyAlteration::Schematic' has a wrong offset!");
static_assert(offsetof(FortCheatManager_McpApplyAlteration, Alteration) == 0x000010, "Member 'FortCheatManager_McpApplyAlteration::Alteration' has a wrong offset!");

// Function FortniteGame.FortCheatManager.McpApplyStash
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_McpApplyStash final
{
public:
	class FString                                 StashName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_McpApplyStash) == 0x000008, "Wrong alignment on FortCheatManager_McpApplyStash");
static_assert(sizeof(FortCheatManager_McpApplyStash) == 0x000010, "Wrong size on FortCheatManager_McpApplyStash");
static_assert(offsetof(FortCheatManager_McpApplyStash, StashName) == 0x000000, "Member 'FortCheatManager_McpApplyStash::StashName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.McpClaimAllResourceCollectors
// 0x0001 (0x0001 - 0x0000)
struct FortCheatManager_McpClaimAllResourceCollectors final
{
public:
	bool                                          bDebugPrint;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_McpClaimAllResourceCollectors) == 0x000001, "Wrong alignment on FortCheatManager_McpClaimAllResourceCollectors");
static_assert(sizeof(FortCheatManager_McpClaimAllResourceCollectors) == 0x000001, "Wrong size on FortCheatManager_McpClaimAllResourceCollectors");
static_assert(offsetof(FortCheatManager_McpClaimAllResourceCollectors, bDebugPrint) == 0x000000, "Member 'FortCheatManager_McpClaimAllResourceCollectors::bDebugPrint' has a wrong offset!");

// Function FortniteGame.FortCheatManager.McpCompleteCurrentPrimaryMission
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_McpCompleteCurrentPrimaryMission final
{
public:
	int32                                         NumMissionPoints;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_McpCompleteCurrentPrimaryMission) == 0x000004, "Wrong alignment on FortCheatManager_McpCompleteCurrentPrimaryMission");
static_assert(sizeof(FortCheatManager_McpCompleteCurrentPrimaryMission) == 0x000004, "Wrong size on FortCheatManager_McpCompleteCurrentPrimaryMission");
static_assert(offsetof(FortCheatManager_McpCompleteCurrentPrimaryMission, NumMissionPoints) == 0x000000, "Member 'FortCheatManager_McpCompleteCurrentPrimaryMission::NumMissionPoints' has a wrong offset!");

// Function FortniteGame.FortCheatManager.McpConvertItem
// 0x0018 (0x0018 - 0x0000)
struct FortCheatManager_McpConvertItem final
{
public:
	class FString                                 ItemToConvert;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConversionIdx;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCheatManager_McpConvertItem) == 0x000008, "Wrong alignment on FortCheatManager_McpConvertItem");
static_assert(sizeof(FortCheatManager_McpConvertItem) == 0x000018, "Wrong size on FortCheatManager_McpConvertItem");
static_assert(offsetof(FortCheatManager_McpConvertItem, ItemToConvert) == 0x000000, "Member 'FortCheatManager_McpConvertItem::ItemToConvert' has a wrong offset!");
static_assert(offsetof(FortCheatManager_McpConvertItem, ConversionIdx) == 0x000010, "Member 'FortCheatManager_McpConvertItem::ConversionIdx' has a wrong offset!");

// Function FortniteGame.FortCheatManager.McpEarnScore
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_McpEarnScore final
{
public:
	int32                                         ScoreAmount;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_McpEarnScore) == 0x000004, "Wrong alignment on FortCheatManager_McpEarnScore");
static_assert(sizeof(FortCheatManager_McpEarnScore) == 0x000004, "Wrong size on FortCheatManager_McpEarnScore");
static_assert(offsetof(FortCheatManager_McpEarnScore, ScoreAmount) == 0x000000, "Member 'FortCheatManager_McpEarnScore::ScoreAmount' has a wrong offset!");

// Function FortniteGame.FortCheatManager.McpEquipCharCosmetic
// 0x0028 (0x0028 - 0x0000)
struct FortCheatManager_McpEquipCharCosmetic final
{
public:
	class FString                                 CharacterId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CosmeticId;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CosmeticType;                                      // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCheatManager_McpEquipCharCosmetic) == 0x000008, "Wrong alignment on FortCheatManager_McpEquipCharCosmetic");
static_assert(sizeof(FortCheatManager_McpEquipCharCosmetic) == 0x000028, "Wrong size on FortCheatManager_McpEquipCharCosmetic");
static_assert(offsetof(FortCheatManager_McpEquipCharCosmetic, CharacterId) == 0x000000, "Member 'FortCheatManager_McpEquipCharCosmetic::CharacterId' has a wrong offset!");
static_assert(offsetof(FortCheatManager_McpEquipCharCosmetic, CosmeticId) == 0x000010, "Member 'FortCheatManager_McpEquipCharCosmetic::CosmeticId' has a wrong offset!");
static_assert(offsetof(FortCheatManager_McpEquipCharCosmetic, CosmeticType) == 0x000020, "Member 'FortCheatManager_McpEquipCharCosmetic::CosmeticType' has a wrong offset!");

// Function FortniteGame.FortCheatManager.McpForceHttpFailRate
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_McpForceHttpFailRate final
{
public:
	float                                         Factor;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_McpForceHttpFailRate) == 0x000004, "Wrong alignment on FortCheatManager_McpForceHttpFailRate");
static_assert(sizeof(FortCheatManager_McpForceHttpFailRate) == 0x000004, "Wrong size on FortCheatManager_McpForceHttpFailRate");
static_assert(offsetof(FortCheatManager_McpForceHttpFailRate, Factor) == 0x000000, "Member 'FortCheatManager_McpForceHttpFailRate::Factor' has a wrong offset!");

// Function FortniteGame.FortCheatManager.McpIssueCodeToken
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_McpIssueCodeToken final
{
public:
	class FString                                 TokenId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_McpIssueCodeToken) == 0x000008, "Wrong alignment on FortCheatManager_McpIssueCodeToken");
static_assert(sizeof(FortCheatManager_McpIssueCodeToken) == 0x000010, "Wrong size on FortCheatManager_McpIssueCodeToken");
static_assert(offsetof(FortCheatManager_McpIssueCodeToken, TokenId) == 0x000000, "Member 'FortCheatManager_McpIssueCodeToken::TokenId' has a wrong offset!");

// Function FortniteGame.FortCheatManager.McpJoinFromPartyInviteToken
// 0x0018 (0x0018 - 0x0000)
struct FortCheatManager_McpJoinFromPartyInviteToken final
{
public:
	class FString                                 Token;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFromInvite;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCheatManager_McpJoinFromPartyInviteToken) == 0x000008, "Wrong alignment on FortCheatManager_McpJoinFromPartyInviteToken");
static_assert(sizeof(FortCheatManager_McpJoinFromPartyInviteToken) == 0x000018, "Wrong size on FortCheatManager_McpJoinFromPartyInviteToken");
static_assert(offsetof(FortCheatManager_McpJoinFromPartyInviteToken, Token) == 0x000000, "Member 'FortCheatManager_McpJoinFromPartyInviteToken::Token' has a wrong offset!");
static_assert(offsetof(FortCheatManager_McpJoinFromPartyInviteToken, bIsFromInvite) == 0x000010, "Member 'FortCheatManager_McpJoinFromPartyInviteToken::bIsFromInvite' has a wrong offset!");

// Function FortniteGame.FortCheatManager.McpOpenCardPack
// 0x0018 (0x0018 - 0x0000)
struct FortCheatManager_McpOpenCardPack final
{
public:
	class FString                                 CardPackItemId;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectionIdx;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCheatManager_McpOpenCardPack) == 0x000008, "Wrong alignment on FortCheatManager_McpOpenCardPack");
static_assert(sizeof(FortCheatManager_McpOpenCardPack) == 0x000018, "Wrong size on FortCheatManager_McpOpenCardPack");
static_assert(offsetof(FortCheatManager_McpOpenCardPack, CardPackItemId) == 0x000000, "Member 'FortCheatManager_McpOpenCardPack::CardPackItemId' has a wrong offset!");
static_assert(offsetof(FortCheatManager_McpOpenCardPack, SelectionIdx) == 0x000010, "Member 'FortCheatManager_McpOpenCardPack::SelectionIdx' has a wrong offset!");

// Function FortniteGame.FortCheatManager.McpPrintFriendInviteToken
// 0x0018 (0x0018 - 0x0000)
struct FortCheatManager_McpPrintFriendInviteToken final
{
public:
	class FString                                 FriendName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyPrintIfJoinable;                               // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCheatManager_McpPrintFriendInviteToken) == 0x000008, "Wrong alignment on FortCheatManager_McpPrintFriendInviteToken");
static_assert(sizeof(FortCheatManager_McpPrintFriendInviteToken) == 0x000018, "Wrong size on FortCheatManager_McpPrintFriendInviteToken");
static_assert(offsetof(FortCheatManager_McpPrintFriendInviteToken, FriendName) == 0x000000, "Member 'FortCheatManager_McpPrintFriendInviteToken::FriendName' has a wrong offset!");
static_assert(offsetof(FortCheatManager_McpPrintFriendInviteToken, OnlyPrintIfJoinable) == 0x000010, "Member 'FortCheatManager_McpPrintFriendInviteToken::OnlyPrintIfJoinable' has a wrong offset!");

// Function FortniteGame.FortCheatManager.McpPrintPartyInviteToken
// 0x0001 (0x0001 - 0x0000)
struct FortCheatManager_McpPrintPartyInviteToken final
{
public:
	bool                                          OnlyPrintIfJoinable;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_McpPrintPartyInviteToken) == 0x000001, "Wrong alignment on FortCheatManager_McpPrintPartyInviteToken");
static_assert(sizeof(FortCheatManager_McpPrintPartyInviteToken) == 0x000001, "Wrong size on FortCheatManager_McpPrintPartyInviteToken");
static_assert(offsetof(FortCheatManager_McpPrintPartyInviteToken, OnlyPrintIfJoinable) == 0x000000, "Member 'FortCheatManager_McpPrintPartyInviteToken::OnlyPrintIfJoinable' has a wrong offset!");

// Function FortniteGame.FortCheatManager.McpRecycleItem
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_McpRecycleItem final
{
public:
	class FString                                 ItemToRecycle;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_McpRecycleItem) == 0x000008, "Wrong alignment on FortCheatManager_McpRecycleItem");
static_assert(sizeof(FortCheatManager_McpRecycleItem) == 0x000010, "Wrong size on FortCheatManager_McpRecycleItem");
static_assert(offsetof(FortCheatManager_McpRecycleItem, ItemToRecycle) == 0x000000, "Member 'FortCheatManager_McpRecycleItem::ItemToRecycle' has a wrong offset!");

// Function FortniteGame.FortCheatManager.McpSlotItem
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_McpSlotItem final
{
public:
	class FString                                 ItemToSlot;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_McpSlotItem) == 0x000008, "Wrong alignment on FortCheatManager_McpSlotItem");
static_assert(sizeof(FortCheatManager_McpSlotItem) == 0x000010, "Wrong size on FortCheatManager_McpSlotItem");
static_assert(offsetof(FortCheatManager_McpSlotItem, ItemToSlot) == 0x000000, "Member 'FortCheatManager_McpSlotItem::ItemToSlot' has a wrong offset!");

// Function FortniteGame.FortCheatManager.McpStorageTransfer
// 0x0020 (0x0020 - 0x0000)
struct FortCheatManager_McpStorageTransfer final
{
public:
	TArray<class FString>                         ItemIdsToMoveToOutpost;                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         ItemIdsToMoveToTheater;                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_McpStorageTransfer) == 0x000008, "Wrong alignment on FortCheatManager_McpStorageTransfer");
static_assert(sizeof(FortCheatManager_McpStorageTransfer) == 0x000020, "Wrong size on FortCheatManager_McpStorageTransfer");
static_assert(offsetof(FortCheatManager_McpStorageTransfer, ItemIdsToMoveToOutpost) == 0x000000, "Member 'FortCheatManager_McpStorageTransfer::ItemIdsToMoveToOutpost' has a wrong offset!");
static_assert(offsetof(FortCheatManager_McpStorageTransfer, ItemIdsToMoveToTheater) == 0x000010, "Member 'FortCheatManager_McpStorageTransfer::ItemIdsToMoveToTheater' has a wrong offset!");

// Function FortniteGame.FortCheatManager.McpTestFriendCodes_OnQueryUnredeemedFriendCodes
// 0x0018 (0x0018 - 0x0000)
struct FortCheatManager_McpTestFriendCodes_OnQueryUnredeemedFriendCodes final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFriendCode>                    FriendCodes;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_McpTestFriendCodes_OnQueryUnredeemedFriendCodes) == 0x000008, "Wrong alignment on FortCheatManager_McpTestFriendCodes_OnQueryUnredeemedFriendCodes");
static_assert(sizeof(FortCheatManager_McpTestFriendCodes_OnQueryUnredeemedFriendCodes) == 0x000018, "Wrong size on FortCheatManager_McpTestFriendCodes_OnQueryUnredeemedFriendCodes");
static_assert(offsetof(FortCheatManager_McpTestFriendCodes_OnQueryUnredeemedFriendCodes, bSuccess) == 0x000000, "Member 'FortCheatManager_McpTestFriendCodes_OnQueryUnredeemedFriendCodes::bSuccess' has a wrong offset!");
static_assert(offsetof(FortCheatManager_McpTestFriendCodes_OnQueryUnredeemedFriendCodes, FriendCodes) == 0x000008, "Member 'FortCheatManager_McpTestFriendCodes_OnQueryUnredeemedFriendCodes::FriendCodes' has a wrong offset!");

// Function FortniteGame.FortCheatManager.McpUpgradeItem
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_McpUpgradeItem final
{
public:
	class FString                                 ItemToUpgrade;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_McpUpgradeItem) == 0x000008, "Wrong alignment on FortCheatManager_McpUpgradeItem");
static_assert(sizeof(FortCheatManager_McpUpgradeItem) == 0x000010, "Wrong size on FortCheatManager_McpUpgradeItem");
static_assert(offsetof(FortCheatManager_McpUpgradeItem, ItemToUpgrade) == 0x000000, "Member 'FortCheatManager_McpUpgradeItem::ItemToUpgrade' has a wrong offset!");

// Function FortniteGame.FortCheatManager.MissionForceFailure
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_MissionForceFailure final
{
public:
	class FString                                 MissionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_MissionForceFailure) == 0x000008, "Wrong alignment on FortCheatManager_MissionForceFailure");
static_assert(sizeof(FortCheatManager_MissionForceFailure) == 0x000010, "Wrong size on FortCheatManager_MissionForceFailure");
static_assert(offsetof(FortCheatManager_MissionForceFailure, MissionName) == 0x000000, "Member 'FortCheatManager_MissionForceFailure::MissionName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.MissionForcePrimarySuccess
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_MissionForcePrimarySuccess final
{
public:
	float                                         FractionCompleted;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_MissionForcePrimarySuccess) == 0x000004, "Wrong alignment on FortCheatManager_MissionForcePrimarySuccess");
static_assert(sizeof(FortCheatManager_MissionForcePrimarySuccess) == 0x000004, "Wrong size on FortCheatManager_MissionForcePrimarySuccess");
static_assert(offsetof(FortCheatManager_MissionForcePrimarySuccess, FractionCompleted) == 0x000000, "Member 'FortCheatManager_MissionForcePrimarySuccess::FractionCompleted' has a wrong offset!");

// Function FortniteGame.FortCheatManager.MissionForceSuccess
// 0x0018 (0x0018 - 0x0000)
struct FortCheatManager_MissionForceSuccess final
{
public:
	class FString                                 MissionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FractionCompleted;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCheatManager_MissionForceSuccess) == 0x000008, "Wrong alignment on FortCheatManager_MissionForceSuccess");
static_assert(sizeof(FortCheatManager_MissionForceSuccess) == 0x000018, "Wrong size on FortCheatManager_MissionForceSuccess");
static_assert(offsetof(FortCheatManager_MissionForceSuccess, MissionName) == 0x000000, "Member 'FortCheatManager_MissionForceSuccess::MissionName' has a wrong offset!");
static_assert(offsetof(FortCheatManager_MissionForceSuccess, FractionCompleted) == 0x000010, "Member 'FortCheatManager_MissionForceSuccess::FractionCompleted' has a wrong offset!");

// Function FortniteGame.FortCheatManager.MMS
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_MMS final
{
public:
	class FString                                 Command;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_MMS) == 0x000008, "Wrong alignment on FortCheatManager_MMS");
static_assert(sizeof(FortCheatManager_MMS) == 0x000010, "Wrong size on FortCheatManager_MMS");
static_assert(offsetof(FortCheatManager_MMS, Command) == 0x000000, "Member 'FortCheatManager_MMS::Command' has a wrong offset!");

// Function FortniteGame.FortCheatManager.ModItemDurability
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_ModItemDurability final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_ModItemDurability) == 0x000004, "Wrong alignment on FortCheatManager_ModItemDurability");
static_assert(sizeof(FortCheatManager_ModItemDurability) == 0x000004, "Wrong size on FortCheatManager_ModItemDurability");
static_assert(offsetof(FortCheatManager_ModItemDurability, InValue) == 0x000000, "Member 'FortCheatManager_ModItemDurability::InValue' has a wrong offset!");

// Function FortniteGame.FortCheatManager.Pain
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_Pain final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_Pain) == 0x000004, "Wrong alignment on FortCheatManager_Pain");
static_assert(sizeof(FortCheatManager_Pain) == 0x000004, "Wrong size on FortCheatManager_Pain");
static_assert(offsetof(FortCheatManager_Pain, Amount) == 0x000000, "Member 'FortCheatManager_Pain::Amount' has a wrong offset!");

// Function FortniteGame.FortCheatManager.PerfMemStatMonitor
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_PerfMemStatMonitor final
{
public:
	class FString                                 ToggleState;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_PerfMemStatMonitor) == 0x000008, "Wrong alignment on FortCheatManager_PerfMemStatMonitor");
static_assert(sizeof(FortCheatManager_PerfMemStatMonitor) == 0x000010, "Wrong size on FortCheatManager_PerfMemStatMonitor");
static_assert(offsetof(FortCheatManager_PerfMemStatMonitor, ToggleState) == 0x000000, "Member 'FortCheatManager_PerfMemStatMonitor::ToggleState' has a wrong offset!");

// Function FortniteGame.FortCheatManager.RedoHuskSpecialEventModifiers
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_RedoHuskSpecialEventModifiers final
{
public:
	float                                         TargetRate;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_RedoHuskSpecialEventModifiers) == 0x000004, "Wrong alignment on FortCheatManager_RedoHuskSpecialEventModifiers");
static_assert(sizeof(FortCheatManager_RedoHuskSpecialEventModifiers) == 0x000004, "Wrong size on FortCheatManager_RedoHuskSpecialEventModifiers");
static_assert(offsetof(FortCheatManager_RedoHuskSpecialEventModifiers, TargetRate) == 0x000000, "Member 'FortCheatManager_RedoHuskSpecialEventModifiers::TargetRate' has a wrong offset!");

// Function FortniteGame.FortCheatManager.RegenerateZoneMissionsWithDifficultyLevel
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_RegenerateZoneMissionsWithDifficultyLevel final
{
public:
	float                                         DifficultyLevelOverride;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_RegenerateZoneMissionsWithDifficultyLevel) == 0x000004, "Wrong alignment on FortCheatManager_RegenerateZoneMissionsWithDifficultyLevel");
static_assert(sizeof(FortCheatManager_RegenerateZoneMissionsWithDifficultyLevel) == 0x000004, "Wrong size on FortCheatManager_RegenerateZoneMissionsWithDifficultyLevel");
static_assert(offsetof(FortCheatManager_RegenerateZoneMissionsWithDifficultyLevel, DifficultyLevelOverride) == 0x000000, "Member 'FortCheatManager_RegenerateZoneMissionsWithDifficultyLevel::DifficultyLevelOverride' has a wrong offset!");

// Function FortniteGame.FortCheatManager.RemoveDebugSpawnAIGroupTag
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_RemoveDebugSpawnAIGroupTag final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_RemoveDebugSpawnAIGroupTag) == 0x000004, "Wrong alignment on FortCheatManager_RemoveDebugSpawnAIGroupTag");
static_assert(sizeof(FortCheatManager_RemoveDebugSpawnAIGroupTag) == 0x000008, "Wrong size on FortCheatManager_RemoveDebugSpawnAIGroupTag");
static_assert(offsetof(FortCheatManager_RemoveDebugSpawnAIGroupTag, Tag) == 0x000000, "Member 'FortCheatManager_RemoveDebugSpawnAIGroupTag::Tag' has a wrong offset!");

// Function FortniteGame.FortCheatManager.RemoveGameplayModifier
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_RemoveGameplayModifier final
{
public:
	class FString                                 ModifierName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_RemoveGameplayModifier) == 0x000008, "Wrong alignment on FortCheatManager_RemoveGameplayModifier");
static_assert(sizeof(FortCheatManager_RemoveGameplayModifier) == 0x000010, "Wrong size on FortCheatManager_RemoveGameplayModifier");
static_assert(offsetof(FortCheatManager_RemoveGameplayModifier, ModifierName) == 0x000000, "Member 'FortCheatManager_RemoveGameplayModifier::ModifierName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.ReplayLastPerfTest
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_ReplayLastPerfTest final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_ReplayLastPerfTest) == 0x000008, "Wrong alignment on FortCheatManager_ReplayLastPerfTest");
static_assert(sizeof(FortCheatManager_ReplayLastPerfTest) == 0x000010, "Wrong size on FortCheatManager_ReplayLastPerfTest");
static_assert(offsetof(FortCheatManager_ReplayLastPerfTest, Params_0) == 0x000000, "Member 'FortCheatManager_ReplayLastPerfTest::Params_0' has a wrong offset!");

// Function FortniteGame.FortCheatManager.RunMonteCarlo
// 0x0020 (0x0020 - 0x0000)
struct FortCheatManager_RunMonteCarlo final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TileGroup;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumIterations;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCheatManager_RunMonteCarlo) == 0x000008, "Wrong alignment on FortCheatManager_RunMonteCarlo");
static_assert(sizeof(FortCheatManager_RunMonteCarlo) == 0x000020, "Wrong size on FortCheatManager_RunMonteCarlo");
static_assert(offsetof(FortCheatManager_RunMonteCarlo, X) == 0x000000, "Member 'FortCheatManager_RunMonteCarlo::X' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RunMonteCarlo, Y) == 0x000004, "Member 'FortCheatManager_RunMonteCarlo::Y' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RunMonteCarlo, TileGroup) == 0x000008, "Member 'FortCheatManager_RunMonteCarlo::TileGroup' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RunMonteCarlo, NumIterations) == 0x000018, "Member 'FortCheatManager_RunMonteCarlo::NumIterations' has a wrong offset!");

// Function FortniteGame.FortCheatManager.RunPerfMemCheatScript
// 0x0001 (0x0001 - 0x0000)
struct FortCheatManager_RunPerfMemCheatScript final
{
public:
	bool                                          bStartStatFiles;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_RunPerfMemCheatScript) == 0x000001, "Wrong alignment on FortCheatManager_RunPerfMemCheatScript");
static_assert(sizeof(FortCheatManager_RunPerfMemCheatScript) == 0x000001, "Wrong size on FortCheatManager_RunPerfMemCheatScript");
static_assert(offsetof(FortCheatManager_RunPerfMemCheatScript, bStartStatFiles) == 0x000000, "Member 'FortCheatManager_RunPerfMemCheatScript::bStartStatFiles' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SendMissionEvent
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_SendMissionEvent final
{
public:
	class FString                                 MissionEventName;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SendMissionEvent) == 0x000008, "Wrong alignment on FortCheatManager_SendMissionEvent");
static_assert(sizeof(FortCheatManager_SendMissionEvent) == 0x000010, "Wrong size on FortCheatManager_SendMissionEvent");
static_assert(offsetof(FortCheatManager_SendMissionEvent, MissionEventName) == 0x000000, "Member 'FortCheatManager_SendMissionEvent::MissionEventName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SendQuestEvent
// 0x0020 (0x0020 - 0x0000)
struct FortCheatManager_SendQuestEvent final
{
public:
	class FName                                   Type;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetTag;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SourceTag;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ContextTag;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SendQuestEvent) == 0x000004, "Wrong alignment on FortCheatManager_SendQuestEvent");
static_assert(sizeof(FortCheatManager_SendQuestEvent) == 0x000020, "Wrong size on FortCheatManager_SendQuestEvent");
static_assert(offsetof(FortCheatManager_SendQuestEvent, Type) == 0x000000, "Member 'FortCheatManager_SendQuestEvent::Type' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SendQuestEvent, TargetTag) == 0x000008, "Member 'FortCheatManager_SendQuestEvent::TargetTag' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SendQuestEvent, SourceTag) == 0x000010, "Member 'FortCheatManager_SendQuestEvent::SourceTag' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SendQuestEvent, ContextTag) == 0x000018, "Member 'FortCheatManager_SendQuestEvent::ContextTag' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SendTwitchToastNotification
// 0x0020 (0x0020 - 0x0000)
struct FortCheatManager_SendTwitchToastNotification final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SendTwitchToastNotification) == 0x000008, "Wrong alignment on FortCheatManager_SendTwitchToastNotification");
static_assert(sizeof(FortCheatManager_SendTwitchToastNotification) == 0x000020, "Wrong size on FortCheatManager_SendTwitchToastNotification");
static_assert(offsetof(FortCheatManager_SendTwitchToastNotification, Title) == 0x000000, "Member 'FortCheatManager_SendTwitchToastNotification::Title' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SendTwitchToastNotification, Description) == 0x000010, "Member 'FortCheatManager_SendTwitchToastNotification::Description' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetActionMappingEnabled
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_SetActionMappingEnabled final
{
public:
	class FName                                   Action;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCheatManager_SetActionMappingEnabled) == 0x000004, "Wrong alignment on FortCheatManager_SetActionMappingEnabled");
static_assert(sizeof(FortCheatManager_SetActionMappingEnabled) == 0x000010, "Wrong size on FortCheatManager_SetActionMappingEnabled");
static_assert(offsetof(FortCheatManager_SetActionMappingEnabled, Action) == 0x000000, "Member 'FortCheatManager_SetActionMappingEnabled::Action' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SetActionMappingEnabled, bEnabled) == 0x000008, "Member 'FortCheatManager_SetActionMappingEnabled::bEnabled' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetAimMode
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetAimMode final
{
public:
	uint32                                        Mode;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetAimMode) == 0x000004, "Wrong alignment on FortCheatManager_SetAimMode");
static_assert(sizeof(FortCheatManager_SetAimMode) == 0x000004, "Wrong size on FortCheatManager_SetAimMode");
static_assert(offsetof(FortCheatManager_SetAimMode, Mode) == 0x000000, "Member 'FortCheatManager_SetAimMode::Mode' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetAthenaHero
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_SetAthenaHero final
{
public:
	class FString                                 NewHeroName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetAthenaHero) == 0x000008, "Wrong alignment on FortCheatManager_SetAthenaHero");
static_assert(sizeof(FortCheatManager_SetAthenaHero) == 0x000010, "Wrong size on FortCheatManager_SetAthenaHero");
static_assert(offsetof(FortCheatManager_SetAthenaHero, NewHeroName) == 0x000000, "Member 'FortCheatManager_SetAthenaHero::NewHeroName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetCameraDistanceMultiplier
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_SetCameraDistanceMultiplier final
{
public:
	float                                         XMultiplier;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YMultiplier;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZMultiplier;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetCameraDistanceMultiplier) == 0x000004, "Wrong alignment on FortCheatManager_SetCameraDistanceMultiplier");
static_assert(sizeof(FortCheatManager_SetCameraDistanceMultiplier) == 0x00000C, "Wrong size on FortCheatManager_SetCameraDistanceMultiplier");
static_assert(offsetof(FortCheatManager_SetCameraDistanceMultiplier, XMultiplier) == 0x000000, "Member 'FortCheatManager_SetCameraDistanceMultiplier::XMultiplier' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SetCameraDistanceMultiplier, YMultiplier) == 0x000004, "Member 'FortCheatManager_SetCameraDistanceMultiplier::YMultiplier' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SetCameraDistanceMultiplier, ZMultiplier) == 0x000008, "Member 'FortCheatManager_SetCameraDistanceMultiplier::ZMultiplier' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetCameraFOVMultiplier
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetCameraFOVMultiplier final
{
public:
	float                                         Multiplier;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetCameraFOVMultiplier) == 0x000004, "Wrong alignment on FortCheatManager_SetCameraFOVMultiplier");
static_assert(sizeof(FortCheatManager_SetCameraFOVMultiplier) == 0x000004, "Wrong size on FortCheatManager_SetCameraFOVMultiplier");
static_assert(offsetof(FortCheatManager_SetCameraFOVMultiplier, Multiplier) == 0x000000, "Member 'FortCheatManager_SetCameraFOVMultiplier::Multiplier' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetCameraPrototype
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_SetCameraPrototype final
{
public:
	class FName                                   ProtoName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetCameraPrototype) == 0x000004, "Wrong alignment on FortCheatManager_SetCameraPrototype");
static_assert(sizeof(FortCheatManager_SetCameraPrototype) == 0x000008, "Wrong size on FortCheatManager_SetCameraPrototype");
static_assert(offsetof(FortCheatManager_SetCameraPrototype, ProtoName) == 0x000000, "Member 'FortCheatManager_SetCameraPrototype::ProtoName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetCapturePercentage
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetCapturePercentage final
{
public:
	float                                         NewCapturePercentage;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetCapturePercentage) == 0x000004, "Wrong alignment on FortCheatManager_SetCapturePercentage");
static_assert(sizeof(FortCheatManager_SetCapturePercentage) == 0x000004, "Wrong size on FortCheatManager_SetCapturePercentage");
static_assert(offsetof(FortCheatManager_SetCapturePercentage, NewCapturePercentage) == 0x000000, "Member 'FortCheatManager_SetCapturePercentage::NewCapturePercentage' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetCloudAltitude
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetCloudAltitude final
{
public:
	float                                         CloudAltitude;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetCloudAltitude) == 0x000004, "Wrong alignment on FortCheatManager_SetCloudAltitude");
static_assert(sizeof(FortCheatManager_SetCloudAltitude) == 0x000004, "Wrong size on FortCheatManager_SetCloudAltitude");
static_assert(offsetof(FortCheatManager_SetCloudAltitude, CloudAltitude) == 0x000000, "Member 'FortCheatManager_SetCloudAltitude::CloudAltitude' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetCombatGraphHistoryLength
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetCombatGraphHistoryLength final
{
public:
	int32                                         Seconds;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetCombatGraphHistoryLength) == 0x000004, "Wrong alignment on FortCheatManager_SetCombatGraphHistoryLength");
static_assert(sizeof(FortCheatManager_SetCombatGraphHistoryLength) == 0x000004, "Wrong size on FortCheatManager_SetCombatGraphHistoryLength");
static_assert(offsetof(FortCheatManager_SetCombatGraphHistoryLength, Seconds) == 0x000000, "Member 'FortCheatManager_SetCombatGraphHistoryLength::Seconds' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetCullValues
// 0x0018 (0x0018 - 0x0000)
struct FortCheatManager_SetCullValues final
{
public:
	float                                         DefaultCullObjectSize;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultCullDistance;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinCullObjectSize;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinCullDistance;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxCullObjectSize;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxCullDistance;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetCullValues) == 0x000004, "Wrong alignment on FortCheatManager_SetCullValues");
static_assert(sizeof(FortCheatManager_SetCullValues) == 0x000018, "Wrong size on FortCheatManager_SetCullValues");
static_assert(offsetof(FortCheatManager_SetCullValues, DefaultCullObjectSize) == 0x000000, "Member 'FortCheatManager_SetCullValues::DefaultCullObjectSize' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SetCullValues, DefaultCullDistance) == 0x000004, "Member 'FortCheatManager_SetCullValues::DefaultCullDistance' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SetCullValues, MinCullObjectSize) == 0x000008, "Member 'FortCheatManager_SetCullValues::MinCullObjectSize' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SetCullValues, MinCullDistance) == 0x00000C, "Member 'FortCheatManager_SetCullValues::MinCullDistance' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SetCullValues, MaxCullObjectSize) == 0x000010, "Member 'FortCheatManager_SetCullValues::MaxCullObjectSize' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SetCullValues, MaxCullDistance) == 0x000014, "Member 'FortCheatManager_SetCullValues::MaxCullDistance' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetCurrentEncounterToDebug
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetCurrentEncounterToDebug final
{
public:
	int32                                         EncounterIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetCurrentEncounterToDebug) == 0x000004, "Wrong alignment on FortCheatManager_SetCurrentEncounterToDebug");
static_assert(sizeof(FortCheatManager_SetCurrentEncounterToDebug) == 0x000004, "Wrong size on FortCheatManager_SetCurrentEncounterToDebug");
static_assert(offsetof(FortCheatManager_SetCurrentEncounterToDebug, EncounterIndex) == 0x000000, "Member 'FortCheatManager_SetCurrentEncounterToDebug::EncounterIndex' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetEncounterDirections
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_SetEncounterDirections final
{
public:
	TArray<EFortEncounterDirection>               Directions;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetEncounterDirections) == 0x000008, "Wrong alignment on FortCheatManager_SetEncounterDirections");
static_assert(sizeof(FortCheatManager_SetEncounterDirections) == 0x000010, "Wrong size on FortCheatManager_SetEncounterDirections");
static_assert(offsetof(FortCheatManager_SetEncounterDirections, Directions) == 0x000000, "Member 'FortCheatManager_SetEncounterDirections::Directions' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetEncounterGraphsHistoryLength
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetEncounterGraphsHistoryLength final
{
public:
	int32                                         Seconds;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetEncounterGraphsHistoryLength) == 0x000004, "Wrong alignment on FortCheatManager_SetEncounterGraphsHistoryLength");
static_assert(sizeof(FortCheatManager_SetEncounterGraphsHistoryLength) == 0x000004, "Wrong size on FortCheatManager_SetEncounterGraphsHistoryLength");
static_assert(offsetof(FortCheatManager_SetEncounterGraphsHistoryLength, Seconds) == 0x000000, "Member 'FortCheatManager_SetEncounterGraphsHistoryLength::Seconds' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetEncounterSimulatedNumberOfPlayers
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetEncounterSimulatedNumberOfPlayers final
{
public:
	int32                                         NumPlayers;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetEncounterSimulatedNumberOfPlayers) == 0x000004, "Wrong alignment on FortCheatManager_SetEncounterSimulatedNumberOfPlayers");
static_assert(sizeof(FortCheatManager_SetEncounterSimulatedNumberOfPlayers) == 0x000004, "Wrong size on FortCheatManager_SetEncounterSimulatedNumberOfPlayers");
static_assert(offsetof(FortCheatManager_SetEncounterSimulatedNumberOfPlayers, NumPlayers) == 0x000000, "Member 'FortCheatManager_SetEncounterSimulatedNumberOfPlayers::NumPlayers' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetEncounterSpawnPointsCap
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetEncounterSpawnPointsCap final
{
public:
	int32                                         SpawnPointsCap;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetEncounterSpawnPointsCap) == 0x000004, "Wrong alignment on FortCheatManager_SetEncounterSpawnPointsCap");
static_assert(sizeof(FortCheatManager_SetEncounterSpawnPointsCap) == 0x000004, "Wrong size on FortCheatManager_SetEncounterSpawnPointsCap");
static_assert(offsetof(FortCheatManager_SetEncounterSpawnPointsCap, SpawnPointsCap) == 0x000000, "Member 'FortCheatManager_SetEncounterSpawnPointsCap::SpawnPointsCap' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetEncounterSpawnPointsCurve
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_SetEncounterSpawnPointsCurve final
{
public:
	class FString                                 CurveName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetEncounterSpawnPointsCurve) == 0x000008, "Wrong alignment on FortCheatManager_SetEncounterSpawnPointsCurve");
static_assert(sizeof(FortCheatManager_SetEncounterSpawnPointsCurve) == 0x000010, "Wrong size on FortCheatManager_SetEncounterSpawnPointsCurve");
static_assert(offsetof(FortCheatManager_SetEncounterSpawnPointsCurve, CurveName) == 0x000000, "Member 'FortCheatManager_SetEncounterSpawnPointsCurve::CurveName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetEncounterTopUtilityPercentages
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_SetEncounterTopUtilityPercentages final
{
public:
	class FString                                 UtilitiesAndPercentages;                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetEncounterTopUtilityPercentages) == 0x000008, "Wrong alignment on FortCheatManager_SetEncounterTopUtilityPercentages");
static_assert(sizeof(FortCheatManager_SetEncounterTopUtilityPercentages) == 0x000010, "Wrong size on FortCheatManager_SetEncounterTopUtilityPercentages");
static_assert(offsetof(FortCheatManager_SetEncounterTopUtilityPercentages, UtilitiesAndPercentages) == 0x000000, "Member 'FortCheatManager_SetEncounterTopUtilityPercentages::UtilitiesAndPercentages' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetGameDifficultyOverride
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetGameDifficultyOverride final
{
public:
	float                                         GameDifficultyOverrideValue;                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetGameDifficultyOverride) == 0x000004, "Wrong alignment on FortCheatManager_SetGameDifficultyOverride");
static_assert(sizeof(FortCheatManager_SetGameDifficultyOverride) == 0x000004, "Wrong size on FortCheatManager_SetGameDifficultyOverride");
static_assert(offsetof(FortCheatManager_SetGameDifficultyOverride, GameDifficultyOverrideValue) == 0x000000, "Member 'FortCheatManager_SetGameDifficultyOverride::GameDifficultyOverrideValue' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetGameStat
// 0x0018 (0x0018 - 0x0000)
struct FortCheatManager_SetGameStat final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCheatManager_SetGameStat) == 0x000008, "Wrong alignment on FortCheatManager_SetGameStat");
static_assert(sizeof(FortCheatManager_SetGameStat) == 0x000018, "Wrong size on FortCheatManager_SetGameStat");
static_assert(offsetof(FortCheatManager_SetGameStat, StatName) == 0x000000, "Member 'FortCheatManager_SetGameStat::StatName' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SetGameStat, Amount) == 0x000010, "Member 'FortCheatManager_SetGameStat::Amount' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetGlobalWind
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_SetGlobalWind final
{
public:
	float                                         Magnitude;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeadingDegrees;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetGlobalWind) == 0x000004, "Wrong alignment on FortCheatManager_SetGlobalWind");
static_assert(sizeof(FortCheatManager_SetGlobalWind) == 0x000008, "Wrong size on FortCheatManager_SetGlobalWind");
static_assert(offsetof(FortCheatManager_SetGlobalWind, Magnitude) == 0x000000, "Member 'FortCheatManager_SetGlobalWind::Magnitude' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SetGlobalWind, HeadingDegrees) == 0x000004, "Member 'FortCheatManager_SetGlobalWind::HeadingDegrees' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetHealthPercent
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetHealthPercent final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetHealthPercent) == 0x000004, "Wrong alignment on FortCheatManager_SetHealthPercent");
static_assert(sizeof(FortCheatManager_SetHealthPercent) == 0x000004, "Wrong size on FortCheatManager_SetHealthPercent");
static_assert(offsetof(FortCheatManager_SetHealthPercent, Percent) == 0x000000, "Member 'FortCheatManager_SetHealthPercent::Percent' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetHeroClass
// 0x0018 (0x0018 - 0x0000)
struct FortCheatManager_SetHeroClass final
{
public:
	class FString                                 NewHeroName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCheatManager_SetHeroClass) == 0x000008, "Wrong alignment on FortCheatManager_SetHeroClass");
static_assert(sizeof(FortCheatManager_SetHeroClass) == 0x000018, "Wrong size on FortCheatManager_SetHeroClass");
static_assert(offsetof(FortCheatManager_SetHeroClass, NewHeroName) == 0x000000, "Member 'FortCheatManager_SetHeroClass::NewHeroName' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SetHeroClass, Level) == 0x000010, "Member 'FortCheatManager_SetHeroClass::Level' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetHeroLevel
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetHeroLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetHeroLevel) == 0x000004, "Wrong alignment on FortCheatManager_SetHeroLevel");
static_assert(sizeof(FortCheatManager_SetHeroLevel) == 0x000004, "Wrong size on FortCheatManager_SetHeroLevel");
static_assert(offsetof(FortCheatManager_SetHeroLevel, Level) == 0x000000, "Member 'FortCheatManager_SetHeroLevel::Level' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetHordePlotExpansionSize
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_SetHordePlotExpansionSize final
{
public:
	int32                                         XSize;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         YSize;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ZSize;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetHordePlotExpansionSize) == 0x000004, "Wrong alignment on FortCheatManager_SetHordePlotExpansionSize");
static_assert(sizeof(FortCheatManager_SetHordePlotExpansionSize) == 0x00000C, "Wrong size on FortCheatManager_SetHordePlotExpansionSize");
static_assert(offsetof(FortCheatManager_SetHordePlotExpansionSize, XSize) == 0x000000, "Member 'FortCheatManager_SetHordePlotExpansionSize::XSize' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SetHordePlotExpansionSize, YSize) == 0x000004, "Member 'FortCheatManager_SetHordePlotExpansionSize::YSize' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SetHordePlotExpansionSize, ZSize) == 0x000008, "Member 'FortCheatManager_SetHordePlotExpansionSize::ZSize' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetInputPresetName
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_SetInputPresetName final
{
public:
	class FString                                 PresetName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetInputPresetName) == 0x000008, "Wrong alignment on FortCheatManager_SetInputPresetName");
static_assert(sizeof(FortCheatManager_SetInputPresetName) == 0x000010, "Wrong size on FortCheatManager_SetInputPresetName");
static_assert(offsetof(FortCheatManager_SetInputPresetName, PresetName) == 0x000000, "Member 'FortCheatManager_SetInputPresetName::PresetName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetInteractExtent
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetInteractExtent final
{
public:
	float                                         Extent;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetInteractExtent) == 0x000004, "Wrong alignment on FortCheatManager_SetInteractExtent");
static_assert(sizeof(FortCheatManager_SetInteractExtent) == 0x000004, "Wrong size on FortCheatManager_SetInteractExtent");
static_assert(offsetof(FortCheatManager_SetInteractExtent, Extent) == 0x000000, "Member 'FortCheatManager_SetInteractExtent::Extent' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetInteractionDistances
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_SetInteractionDistances final
{
public:
	float                                         InteractionDistance;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InteractionHighlightDistance;                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetInteractionDistances) == 0x000004, "Wrong alignment on FortCheatManager_SetInteractionDistances");
static_assert(sizeof(FortCheatManager_SetInteractionDistances) == 0x000008, "Wrong size on FortCheatManager_SetInteractionDistances");
static_assert(offsetof(FortCheatManager_SetInteractionDistances, InteractionDistance) == 0x000000, "Member 'FortCheatManager_SetInteractionDistances::InteractionDistance' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SetInteractionDistances, InteractionHighlightDistance) == 0x000004, "Member 'FortCheatManager_SetInteractionDistances::InteractionHighlightDistance' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetJumpStaminaCost
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_SetJumpStaminaCost final
{
public:
	class FName                                   ModeName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetJumpStaminaCost) == 0x000004, "Wrong alignment on FortCheatManager_SetJumpStaminaCost");
static_assert(sizeof(FortCheatManager_SetJumpStaminaCost) == 0x000008, "Wrong size on FortCheatManager_SetJumpStaminaCost");
static_assert(offsetof(FortCheatManager_SetJumpStaminaCost, ModeName) == 0x000000, "Member 'FortCheatManager_SetJumpStaminaCost::ModeName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetMaxClouds
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetMaxClouds final
{
public:
	int32                                         MaxClouds;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetMaxClouds) == 0x000004, "Wrong alignment on FortCheatManager_SetMaxClouds");
static_assert(sizeof(FortCheatManager_SetMaxClouds) == 0x000004, "Wrong size on FortCheatManager_SetMaxClouds");
static_assert(offsetof(FortCheatManager_SetMaxClouds, MaxClouds) == 0x000000, "Member 'FortCheatManager_SetMaxClouds::MaxClouds' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetPvPRoundTime
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_SetPvPRoundTime final
{
public:
	int32                                         NumSeconds;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CriticalThreshold;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetPvPRoundTime) == 0x000004, "Wrong alignment on FortCheatManager_SetPvPRoundTime");
static_assert(sizeof(FortCheatManager_SetPvPRoundTime) == 0x000008, "Wrong size on FortCheatManager_SetPvPRoundTime");
static_assert(offsetof(FortCheatManager_SetPvPRoundTime, NumSeconds) == 0x000000, "Member 'FortCheatManager_SetPvPRoundTime::NumSeconds' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SetPvPRoundTime, CriticalThreshold) == 0x000004, "Member 'FortCheatManager_SetPvPRoundTime::CriticalThreshold' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetPvPStalemateTime
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetPvPStalemateTime final
{
public:
	int32                                         NumSeconds;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetPvPStalemateTime) == 0x000004, "Wrong alignment on FortCheatManager_SetPvPStalemateTime");
static_assert(sizeof(FortCheatManager_SetPvPStalemateTime) == 0x000004, "Wrong size on FortCheatManager_SetPvPStalemateTime");
static_assert(offsetof(FortCheatManager_SetPvPStalemateTime, NumSeconds) == 0x000000, "Member 'FortCheatManager_SetPvPStalemateTime::NumSeconds' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetReplStat
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_SetReplStat final
{
public:
	EFortReplicatedStat                           Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Amount;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetReplStat) == 0x000004, "Wrong alignment on FortCheatManager_SetReplStat");
static_assert(sizeof(FortCheatManager_SetReplStat) == 0x000008, "Wrong size on FortCheatManager_SetReplStat");
static_assert(offsetof(FortCheatManager_SetReplStat, Stat) == 0x000000, "Member 'FortCheatManager_SetReplStat::Stat' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SetReplStat, Amount) == 0x000004, "Member 'FortCheatManager_SetReplStat::Amount' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetRespawnTimerOverride
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetRespawnTimerOverride final
{
public:
	float                                         TimeUntilRespawn;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetRespawnTimerOverride) == 0x000004, "Wrong alignment on FortCheatManager_SetRespawnTimerOverride");
static_assert(sizeof(FortCheatManager_SetRespawnTimerOverride) == 0x000004, "Wrong size on FortCheatManager_SetRespawnTimerOverride");
static_assert(offsetof(FortCheatManager_SetRespawnTimerOverride, TimeUntilRespawn) == 0x000000, "Member 'FortCheatManager_SetRespawnTimerOverride::TimeUntilRespawn' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetSafeZoneRadius
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetSafeZoneRadius final
{
public:
	float                                         NewRadius;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetSafeZoneRadius) == 0x000004, "Wrong alignment on FortCheatManager_SetSafeZoneRadius");
static_assert(sizeof(FortCheatManager_SetSafeZoneRadius) == 0x000004, "Wrong size on FortCheatManager_SetSafeZoneRadius");
static_assert(offsetof(FortCheatManager_SetSafeZoneRadius, NewRadius) == 0x000000, "Member 'FortCheatManager_SetSafeZoneRadius::NewRadius' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetWindPixelDebugExtent
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetWindPixelDebugExtent final
{
public:
	float                                         ExtentInUnrealUnits;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetWindPixelDebugExtent) == 0x000004, "Wrong alignment on FortCheatManager_SetWindPixelDebugExtent");
static_assert(sizeof(FortCheatManager_SetWindPixelDebugExtent) == 0x000004, "Wrong size on FortCheatManager_SetWindPixelDebugExtent");
static_assert(offsetof(FortCheatManager_SetWindPixelDebugExtent, ExtentInUnrealUnits) == 0x000000, "Member 'FortCheatManager_SetWindPixelDebugExtent::ExtentInUnrealUnits' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetWorldDaysElapsed
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetWorldDaysElapsed final
{
public:
	float                                         Days;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetWorldDaysElapsed) == 0x000004, "Wrong alignment on FortCheatManager_SetWorldDaysElapsed");
static_assert(sizeof(FortCheatManager_SetWorldDaysElapsed) == 0x000004, "Wrong size on FortCheatManager_SetWorldDaysElapsed");
static_assert(offsetof(FortCheatManager_SetWorldDaysElapsed, Days) == 0x000000, "Member 'FortCheatManager_SetWorldDaysElapsed::Days' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetWorldLevel
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetWorldLevel final
{
public:
	float                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetWorldLevel) == 0x000004, "Wrong alignment on FortCheatManager_SetWorldLevel");
static_assert(sizeof(FortCheatManager_SetWorldLevel) == 0x000004, "Wrong size on FortCheatManager_SetWorldLevel");
static_assert(offsetof(FortCheatManager_SetWorldLevel, Level) == 0x000000, "Member 'FortCheatManager_SetWorldLevel::Level' has a wrong offset!");

// Function FortniteGame.FortCheatManager.ShowHUDElement
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_ShowHUDElement final
{
public:
	struct FGameplayTag                           HUDElementTag;                                     // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_ShowHUDElement) == 0x000008, "Wrong alignment on FortCheatManager_ShowHUDElement");
static_assert(sizeof(FortCheatManager_ShowHUDElement) == 0x000008, "Wrong size on FortCheatManager_ShowHUDElement");
static_assert(offsetof(FortCheatManager_ShowHUDElement, HUDElementTag) == 0x000000, "Member 'FortCheatManager_ShowHUDElement::HUDElementTag' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SimulateLoot
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_SimulateLoot final
{
public:
	class FName                                   TierGroup;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LootTier;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LootLevel;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SimulateLoot) == 0x000004, "Wrong alignment on FortCheatManager_SimulateLoot");
static_assert(sizeof(FortCheatManager_SimulateLoot) == 0x000010, "Wrong size on FortCheatManager_SimulateLoot");
static_assert(offsetof(FortCheatManager_SimulateLoot, TierGroup) == 0x000000, "Member 'FortCheatManager_SimulateLoot::TierGroup' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SimulateLoot, LootTier) == 0x000008, "Member 'FortCheatManager_SimulateLoot::LootTier' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SimulateLoot, LootLevel) == 0x00000C, "Member 'FortCheatManager_SimulateLoot::LootLevel' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SpawnAIGroup
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_SpawnAIGroup final
{
public:
	class FString                                 SpawnGroupName;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SpawnAIGroup) == 0x000008, "Wrong alignment on FortCheatManager_SpawnAIGroup");
static_assert(sizeof(FortCheatManager_SpawnAIGroup) == 0x000010, "Wrong size on FortCheatManager_SpawnAIGroup");
static_assert(offsetof(FortCheatManager_SpawnAIGroup, SpawnGroupName) == 0x000000, "Member 'FortCheatManager_SpawnAIGroup::SpawnGroupName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SpawnAIGroupFromExternalSpawner
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_SpawnAIGroupFromExternalSpawner final
{
public:
	class FString                                 SpawnGroupName;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SpawnAIGroupFromExternalSpawner) == 0x000008, "Wrong alignment on FortCheatManager_SpawnAIGroupFromExternalSpawner");
static_assert(sizeof(FortCheatManager_SpawnAIGroupFromExternalSpawner) == 0x000010, "Wrong size on FortCheatManager_SpawnAIGroupFromExternalSpawner");
static_assert(offsetof(FortCheatManager_SpawnAIGroupFromExternalSpawner, SpawnGroupName) == 0x000000, "Member 'FortCheatManager_SpawnAIGroupFromExternalSpawner::SpawnGroupName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SpawnAIGroupWithUpgrade
// 0x0020 (0x0020 - 0x0000)
struct FortCheatManager_SpawnAIGroupWithUpgrade final
{
public:
	class FString                                 SpawnGroupName;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UpgradeName;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SpawnAIGroupWithUpgrade) == 0x000008, "Wrong alignment on FortCheatManager_SpawnAIGroupWithUpgrade");
static_assert(sizeof(FortCheatManager_SpawnAIGroupWithUpgrade) == 0x000020, "Wrong size on FortCheatManager_SpawnAIGroupWithUpgrade");
static_assert(offsetof(FortCheatManager_SpawnAIGroupWithUpgrade, SpawnGroupName) == 0x000000, "Member 'FortCheatManager_SpawnAIGroupWithUpgrade::SpawnGroupName' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SpawnAIGroupWithUpgrade, UpgradeName) == 0x000010, "Member 'FortCheatManager_SpawnAIGroupWithUpgrade::UpgradeName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SpawnContainer
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_SpawnContainer final
{
public:
	class FString                                 ContainerClassName;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SpawnContainer) == 0x000008, "Wrong alignment on FortCheatManager_SpawnContainer");
static_assert(sizeof(FortCheatManager_SpawnContainer) == 0x000010, "Wrong size on FortCheatManager_SpawnContainer");
static_assert(offsetof(FortCheatManager_SpawnContainer, ContainerClassName) == 0x000000, "Member 'FortCheatManager_SpawnContainer::ContainerClassName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SpawnPawn
// 0x0018 (0x0018 - 0x0000)
struct FortCheatManager_SpawnPawn final
{
public:
	class FString                                 PawnType;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPawn*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SpawnPawn) == 0x000008, "Wrong alignment on FortCheatManager_SpawnPawn");
static_assert(sizeof(FortCheatManager_SpawnPawn) == 0x000018, "Wrong size on FortCheatManager_SpawnPawn");
static_assert(offsetof(FortCheatManager_SpawnPawn, PawnType) == 0x000000, "Member 'FortCheatManager_SpawnPawn::PawnType' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SpawnPawn, ReturnValue) == 0x000010, "Member 'FortCheatManager_SpawnPawn::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCheatManager.StartLiveStreamingWindow
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_StartLiveStreamingWindow final
{
public:
	float                                         Seconds;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_StartLiveStreamingWindow) == 0x000004, "Wrong alignment on FortCheatManager_StartLiveStreamingWindow");
static_assert(sizeof(FortCheatManager_StartLiveStreamingWindow) == 0x000004, "Wrong size on FortCheatManager_StartLiveStreamingWindow");
static_assert(offsetof(FortCheatManager_StartLiveStreamingWindow, Seconds) == 0x000000, "Member 'FortCheatManager_StartLiveStreamingWindow::Seconds' has a wrong offset!");

// Function FortniteGame.FortCheatManager.TeleportToActor
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_TeleportToActor final
{
public:
	class FString                                 ClassOrInstanceName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_TeleportToActor) == 0x000008, "Wrong alignment on FortCheatManager_TeleportToActor");
static_assert(sizeof(FortCheatManager_TeleportToActor) == 0x000010, "Wrong size on FortCheatManager_TeleportToActor");
static_assert(offsetof(FortCheatManager_TeleportToActor, ClassOrInstanceName) == 0x000000, "Member 'FortCheatManager_TeleportToActor::ClassOrInstanceName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.TeleportToLocation
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_TeleportToLocation final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_TeleportToLocation) == 0x000004, "Wrong alignment on FortCheatManager_TeleportToLocation");
static_assert(sizeof(FortCheatManager_TeleportToLocation) == 0x00000C, "Wrong size on FortCheatManager_TeleportToLocation");
static_assert(offsetof(FortCheatManager_TeleportToLocation, X) == 0x000000, "Member 'FortCheatManager_TeleportToLocation::X' has a wrong offset!");
static_assert(offsetof(FortCheatManager_TeleportToLocation, Y) == 0x000004, "Member 'FortCheatManager_TeleportToLocation::Y' has a wrong offset!");
static_assert(offsetof(FortCheatManager_TeleportToLocation, Z) == 0x000008, "Member 'FortCheatManager_TeleportToLocation::Z' has a wrong offset!");

// Function FortniteGame.FortCheatManager.TestBanhammer
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_TestBanhammer final
{
public:
	class FString                                 InUserId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_TestBanhammer) == 0x000008, "Wrong alignment on FortCheatManager_TestBanhammer");
static_assert(sizeof(FortCheatManager_TestBanhammer) == 0x000010, "Wrong size on FortCheatManager_TestBanhammer");
static_assert(offsetof(FortCheatManager_TestBanhammer, InUserId) == 0x000000, "Member 'FortCheatManager_TestBanhammer::InUserId' has a wrong offset!");

// Function FortniteGame.FortCheatManager.TestChangePartyPrivacy
// 0x0003 (0x0003 - 0x0000)
struct FortCheatManager_TestChangePartyPrivacy final
{
public:
	bool                                          bPrivate;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeaderFriendsOnly;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeaderInvitesOnly;                                // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_TestChangePartyPrivacy) == 0x000001, "Wrong alignment on FortCheatManager_TestChangePartyPrivacy");
static_assert(sizeof(FortCheatManager_TestChangePartyPrivacy) == 0x000003, "Wrong size on FortCheatManager_TestChangePartyPrivacy");
static_assert(offsetof(FortCheatManager_TestChangePartyPrivacy, bPrivate) == 0x000000, "Member 'FortCheatManager_TestChangePartyPrivacy::bPrivate' has a wrong offset!");
static_assert(offsetof(FortCheatManager_TestChangePartyPrivacy, bLeaderFriendsOnly) == 0x000001, "Member 'FortCheatManager_TestChangePartyPrivacy::bLeaderFriendsOnly' has a wrong offset!");
static_assert(offsetof(FortCheatManager_TestChangePartyPrivacy, bLeaderInvitesOnly) == 0x000002, "Member 'FortCheatManager_TestChangePartyPrivacy::bLeaderInvitesOnly' has a wrong offset!");

// Function FortniteGame.FortCheatManager.TestChangePartySize
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_TestChangePartySize final
{
public:
	int32                                         NewSize;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_TestChangePartySize) == 0x000004, "Wrong alignment on FortCheatManager_TestChangePartySize");
static_assert(sizeof(FortCheatManager_TestChangePartySize) == 0x000004, "Wrong size on FortCheatManager_TestChangePartySize");
static_assert(offsetof(FortCheatManager_TestChangePartySize, NewSize) == 0x000000, "Member 'FortCheatManager_TestChangePartySize::NewSize' has a wrong offset!");

// Function FortniteGame.FortCheatManager.TestEncryptAPI
// 0x0020 (0x0020 - 0x0000)
struct FortCheatManager_TestEncryptAPI final
{
public:
	class FString                                 InUserId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InSessionId;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_TestEncryptAPI) == 0x000008, "Wrong alignment on FortCheatManager_TestEncryptAPI");
static_assert(sizeof(FortCheatManager_TestEncryptAPI) == 0x000020, "Wrong size on FortCheatManager_TestEncryptAPI");
static_assert(offsetof(FortCheatManager_TestEncryptAPI, InUserId) == 0x000000, "Member 'FortCheatManager_TestEncryptAPI::InUserId' has a wrong offset!");
static_assert(offsetof(FortCheatManager_TestEncryptAPI, InSessionId) == 0x000010, "Member 'FortCheatManager_TestEncryptAPI::InSessionId' has a wrong offset!");

// Function FortniteGame.FortCheatManager.TestKnockback
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_TestKnockback final
{
public:
	float                                         KnockbackMagnitude;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KnockbackZAngle;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_TestKnockback) == 0x000004, "Wrong alignment on FortCheatManager_TestKnockback");
static_assert(sizeof(FortCheatManager_TestKnockback) == 0x000008, "Wrong size on FortCheatManager_TestKnockback");
static_assert(offsetof(FortCheatManager_TestKnockback, KnockbackMagnitude) == 0x000000, "Member 'FortCheatManager_TestKnockback::KnockbackMagnitude' has a wrong offset!");
static_assert(offsetof(FortCheatManager_TestKnockback, KnockbackZAngle) == 0x000004, "Member 'FortCheatManager_TestKnockback::KnockbackZAngle' has a wrong offset!");

// Function FortniteGame.FortCheatManager.TestSafeZoneLocations
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_TestSafeZoneLocations final
{
public:
	int32                                         NumPasses;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PhaseToDraw;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_TestSafeZoneLocations) == 0x000004, "Wrong alignment on FortCheatManager_TestSafeZoneLocations");
static_assert(sizeof(FortCheatManager_TestSafeZoneLocations) == 0x000008, "Wrong size on FortCheatManager_TestSafeZoneLocations");
static_assert(offsetof(FortCheatManager_TestSafeZoneLocations, NumPasses) == 0x000000, "Member 'FortCheatManager_TestSafeZoneLocations::NumPasses' has a wrong offset!");
static_assert(offsetof(FortCheatManager_TestSafeZoneLocations, PhaseToDraw) == 0x000004, "Member 'FortCheatManager_TestSafeZoneLocations::PhaseToDraw' has a wrong offset!");

// Function FortniteGame.FortCheatManager.TestSetOutpostDefenseActive
// 0x0001 (0x0001 - 0x0000)
struct FortCheatManager_TestSetOutpostDefenseActive final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_TestSetOutpostDefenseActive) == 0x000001, "Wrong alignment on FortCheatManager_TestSetOutpostDefenseActive");
static_assert(sizeof(FortCheatManager_TestSetOutpostDefenseActive) == 0x000001, "Wrong size on FortCheatManager_TestSetOutpostDefenseActive");
static_assert(offsetof(FortCheatManager_TestSetOutpostDefenseActive, bActive) == 0x000000, "Member 'FortCheatManager_TestSetOutpostDefenseActive::bActive' has a wrong offset!");

// Function FortniteGame.FortCheatManager.TestStun
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_TestStun final
{
public:
	float                                         StunStime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_TestStun) == 0x000004, "Wrong alignment on FortCheatManager_TestStun");
static_assert(sizeof(FortCheatManager_TestStun) == 0x000004, "Wrong size on FortCheatManager_TestStun");
static_assert(offsetof(FortCheatManager_TestStun, StunStime) == 0x000000, "Member 'FortCheatManager_TestStun::StunStime' has a wrong offset!");

// Function FortniteGame.FortCheatManager.TestUpgradeOutpostItem
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_TestUpgradeOutpostItem final
{
public:
	class FString                                 ItemTemplateId;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_TestUpgradeOutpostItem) == 0x000008, "Wrong alignment on FortCheatManager_TestUpgradeOutpostItem");
static_assert(sizeof(FortCheatManager_TestUpgradeOutpostItem) == 0x000010, "Wrong size on FortCheatManager_TestUpgradeOutpostItem");
static_assert(offsetof(FortCheatManager_TestUpgradeOutpostItem, ItemTemplateId) == 0x000000, "Member 'FortCheatManager_TestUpgradeOutpostItem::ItemTemplateId' has a wrong offset!");

// Function FortniteGame.FortCheatManager.ToggleDrawTargetSelectionDebugByClass
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_ToggleDrawTargetSelectionDebugByClass final
{
public:
	TSubclassOf<class AActor>                     TargetSelectionDebugSourceClass;                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_ToggleDrawTargetSelectionDebugByClass) == 0x000008, "Wrong alignment on FortCheatManager_ToggleDrawTargetSelectionDebugByClass");
static_assert(sizeof(FortCheatManager_ToggleDrawTargetSelectionDebugByClass) == 0x000008, "Wrong size on FortCheatManager_ToggleDrawTargetSelectionDebugByClass");
static_assert(offsetof(FortCheatManager_ToggleDrawTargetSelectionDebugByClass, TargetSelectionDebugSourceClass) == 0x000000, "Member 'FortCheatManager_ToggleDrawTargetSelectionDebugByClass::TargetSelectionDebugSourceClass' has a wrong offset!");

// Function FortniteGame.FortCheatManager.ToggleWindDebugDisplay
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_ToggleWindDebugDisplay final
{
public:
	float                                         NewRefreshRate;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_ToggleWindDebugDisplay) == 0x000004, "Wrong alignment on FortCheatManager_ToggleWindDebugDisplay");
static_assert(sizeof(FortCheatManager_ToggleWindDebugDisplay) == 0x000004, "Wrong size on FortCheatManager_ToggleWindDebugDisplay");
static_assert(offsetof(FortCheatManager_ToggleWindDebugDisplay, NewRefreshRate) == 0x000000, "Member 'FortCheatManager_ToggleWindDebugDisplay::NewRefreshRate' has a wrong offset!");

// Function FortniteGame.FortCheatManager.TutorialAddHidden
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_TutorialAddHidden final
{
public:
	class FName                                   Hidden;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_TutorialAddHidden) == 0x000004, "Wrong alignment on FortCheatManager_TutorialAddHidden");
static_assert(sizeof(FortCheatManager_TutorialAddHidden) == 0x000008, "Wrong size on FortCheatManager_TutorialAddHidden");
static_assert(offsetof(FortCheatManager_TutorialAddHidden, Hidden) == 0x000000, "Member 'FortCheatManager_TutorialAddHidden::Hidden' has a wrong offset!");

// Function FortniteGame.FortCheatManager.TutorialAddHighlight
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_TutorialAddHighlight final
{
public:
	class FName                                   Highlight;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_TutorialAddHighlight) == 0x000004, "Wrong alignment on FortCheatManager_TutorialAddHighlight");
static_assert(sizeof(FortCheatManager_TutorialAddHighlight) == 0x000008, "Wrong size on FortCheatManager_TutorialAddHighlight");
static_assert(offsetof(FortCheatManager_TutorialAddHighlight, Highlight) == 0x000000, "Member 'FortCheatManager_TutorialAddHighlight::Highlight' has a wrong offset!");

// Function FortniteGame.FortCheatManager.TutorialRemoveHidden
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_TutorialRemoveHidden final
{
public:
	class FName                                   Hidden;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_TutorialRemoveHidden) == 0x000004, "Wrong alignment on FortCheatManager_TutorialRemoveHidden");
static_assert(sizeof(FortCheatManager_TutorialRemoveHidden) == 0x000008, "Wrong size on FortCheatManager_TutorialRemoveHidden");
static_assert(offsetof(FortCheatManager_TutorialRemoveHidden, Hidden) == 0x000000, "Member 'FortCheatManager_TutorialRemoveHidden::Hidden' has a wrong offset!");

// Function FortniteGame.FortCheatManager.TutorialRemoveHighlight
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_TutorialRemoveHighlight final
{
public:
	class FName                                   Highlight;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_TutorialRemoveHighlight) == 0x000004, "Wrong alignment on FortCheatManager_TutorialRemoveHighlight");
static_assert(sizeof(FortCheatManager_TutorialRemoveHighlight) == 0x000008, "Wrong size on FortCheatManager_TutorialRemoveHighlight");
static_assert(offsetof(FortCheatManager_TutorialRemoveHighlight, Highlight) == 0x000000, "Member 'FortCheatManager_TutorialRemoveHighlight::Highlight' has a wrong offset!");

// Function FortniteGame.FortCheatManager.UnlockAllDefenders
// 0x0001 (0x0001 - 0x0000)
struct FortCheatManager_UnlockAllDefenders final
{
public:
	bool                                          InUnlockAllDefenders;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_UnlockAllDefenders) == 0x000001, "Wrong alignment on FortCheatManager_UnlockAllDefenders");
static_assert(sizeof(FortCheatManager_UnlockAllDefenders) == 0x000001, "Wrong size on FortCheatManager_UnlockAllDefenders");
static_assert(offsetof(FortCheatManager_UnlockAllDefenders, InUnlockAllDefenders) == 0x000000, "Member 'FortCheatManager_UnlockAllDefenders::InUnlockAllDefenders' has a wrong offset!");

// Function FortniteGame.FortIndicator.OnParentActorEndPlay
// 0x0010 (0x0010 - 0x0000)
struct FortIndicator_OnParentActorEndPlay final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortIndicator_OnParentActorEndPlay) == 0x000008, "Wrong alignment on FortIndicator_OnParentActorEndPlay");
static_assert(sizeof(FortIndicator_OnParentActorEndPlay) == 0x000010, "Wrong size on FortIndicator_OnParentActorEndPlay");
static_assert(offsetof(FortIndicator_OnParentActorEndPlay, Actor) == 0x000000, "Member 'FortIndicator_OnParentActorEndPlay::Actor' has a wrong offset!");
static_assert(offsetof(FortIndicator_OnParentActorEndPlay, EndPlayReason) == 0x000008, "Member 'FortIndicator_OnParentActorEndPlay::EndPlayReason' has a wrong offset!");

// Function FortniteGame.FortTeamInfo.OnSpottedActorDied
// 0x0050 (0x0050 - 0x0000)
struct FortTeamInfo_OnSpottedActorDied final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0030(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Momentum;                                          // 0x0040(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTeamInfo_OnSpottedActorDied) == 0x000008, "Wrong alignment on FortTeamInfo_OnSpottedActorDied");
static_assert(sizeof(FortTeamInfo_OnSpottedActorDied) == 0x000050, "Wrong size on FortTeamInfo_OnSpottedActorDied");
static_assert(offsetof(FortTeamInfo_OnSpottedActorDied, DamagedActor) == 0x000000, "Member 'FortTeamInfo_OnSpottedActorDied::DamagedActor' has a wrong offset!");
static_assert(offsetof(FortTeamInfo_OnSpottedActorDied, Damage) == 0x000008, "Member 'FortTeamInfo_OnSpottedActorDied::Damage' has a wrong offset!");
static_assert(offsetof(FortTeamInfo_OnSpottedActorDied, InstigatedBy) == 0x000010, "Member 'FortTeamInfo_OnSpottedActorDied::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortTeamInfo_OnSpottedActorDied, DamageCauser) == 0x000018, "Member 'FortTeamInfo_OnSpottedActorDied::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortTeamInfo_OnSpottedActorDied, HitLocation) == 0x000020, "Member 'FortTeamInfo_OnSpottedActorDied::HitLocation' has a wrong offset!");
static_assert(offsetof(FortTeamInfo_OnSpottedActorDied, FHitComponent) == 0x000030, "Member 'FortTeamInfo_OnSpottedActorDied::FHitComponent' has a wrong offset!");
static_assert(offsetof(FortTeamInfo_OnSpottedActorDied, BoneName) == 0x000038, "Member 'FortTeamInfo_OnSpottedActorDied::BoneName' has a wrong offset!");
static_assert(offsetof(FortTeamInfo_OnSpottedActorDied, Momentum) == 0x000040, "Member 'FortTeamInfo_OnSpottedActorDied::Momentum' has a wrong offset!");

// Function FortniteGame.FortTeamInfo.GetTeamExperience
// 0x0004 (0x0004 - 0x0000)
struct FortTeamInfo_GetTeamExperience final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTeamInfo_GetTeamExperience) == 0x000004, "Wrong alignment on FortTeamInfo_GetTeamExperience");
static_assert(sizeof(FortTeamInfo_GetTeamExperience) == 0x000004, "Wrong size on FortTeamInfo_GetTeamExperience");
static_assert(offsetof(FortTeamInfo_GetTeamExperience, ReturnValue) == 0x000000, "Member 'FortTeamInfo_GetTeamExperience::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTeamInfo.GetTeamLevel
// 0x0004 (0x0004 - 0x0000)
struct FortTeamInfo_GetTeamLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTeamInfo_GetTeamLevel) == 0x000004, "Wrong alignment on FortTeamInfo_GetTeamLevel");
static_assert(sizeof(FortTeamInfo_GetTeamLevel) == 0x000004, "Wrong size on FortTeamInfo_GetTeamLevel");
static_assert(offsetof(FortTeamInfo_GetTeamLevel, ReturnValue) == 0x000000, "Member 'FortTeamInfo_GetTeamLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.AthenaBattleBusItemDefinition.GetBusPrefabClass
// 0x0008 (0x0008 - 0x0000)
struct AthenaBattleBusItemDefinition_GetBusPrefabClass final
{
public:
	TSubclassOf<class ABattleBusCosmeticInstanceBase> ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBattleBusItemDefinition_GetBusPrefabClass) == 0x000008, "Wrong alignment on AthenaBattleBusItemDefinition_GetBusPrefabClass");
static_assert(sizeof(AthenaBattleBusItemDefinition_GetBusPrefabClass) == 0x000008, "Wrong size on AthenaBattleBusItemDefinition_GetBusPrefabClass");
static_assert(offsetof(AthenaBattleBusItemDefinition_GetBusPrefabClass, ReturnValue) == 0x000000, "Member 'AthenaBattleBusItemDefinition_GetBusPrefabClass::ReturnValue' has a wrong offset!");

// Function FortniteGame.AthenaBattleBusItemDefinition.GetFlightLoopingMusic
// 0x0008 (0x0008 - 0x0000)
struct AthenaBattleBusItemDefinition_GetFlightLoopingMusic final
{
public:
	class USoundBase*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBattleBusItemDefinition_GetFlightLoopingMusic) == 0x000008, "Wrong alignment on AthenaBattleBusItemDefinition_GetFlightLoopingMusic");
static_assert(sizeof(AthenaBattleBusItemDefinition_GetFlightLoopingMusic) == 0x000008, "Wrong size on AthenaBattleBusItemDefinition_GetFlightLoopingMusic");
static_assert(offsetof(AthenaBattleBusItemDefinition_GetFlightLoopingMusic, ReturnValue) == 0x000000, "Member 'AthenaBattleBusItemDefinition_GetFlightLoopingMusic::ReturnValue' has a wrong offset!");

// Function FortniteGame.AthenaBattleBusItemDefinition.GetFlightLoopingSound
// 0x0008 (0x0008 - 0x0000)
struct AthenaBattleBusItemDefinition_GetFlightLoopingSound final
{
public:
	class USoundBase*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBattleBusItemDefinition_GetFlightLoopingSound) == 0x000008, "Wrong alignment on AthenaBattleBusItemDefinition_GetFlightLoopingSound");
static_assert(sizeof(AthenaBattleBusItemDefinition_GetFlightLoopingSound) == 0x000008, "Wrong size on AthenaBattleBusItemDefinition_GetFlightLoopingSound");
static_assert(offsetof(AthenaBattleBusItemDefinition_GetFlightLoopingSound, ReturnValue) == 0x000000, "Member 'AthenaBattleBusItemDefinition_GetFlightLoopingSound::ReturnValue' has a wrong offset!");

// Function FortniteGame.AthenaBattleBusItemDefinition.GetIgnitionSound
// 0x0008 (0x0008 - 0x0000)
struct AthenaBattleBusItemDefinition_GetIgnitionSound final
{
public:
	class USoundBase*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBattleBusItemDefinition_GetIgnitionSound) == 0x000008, "Wrong alignment on AthenaBattleBusItemDefinition_GetIgnitionSound");
static_assert(sizeof(AthenaBattleBusItemDefinition_GetIgnitionSound) == 0x000008, "Wrong size on AthenaBattleBusItemDefinition_GetIgnitionSound");
static_assert(offsetof(AthenaBattleBusItemDefinition_GetIgnitionSound, ReturnValue) == 0x000000, "Member 'AthenaBattleBusItemDefinition_GetIgnitionSound::ReturnValue' has a wrong offset!");

// Function FortniteGame.AthenaBattleBusItemDefinition.GetLobbyLoopingMusic
// 0x0008 (0x0008 - 0x0000)
struct AthenaBattleBusItemDefinition_GetLobbyLoopingMusic final
{
public:
	class USoundBase*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBattleBusItemDefinition_GetLobbyLoopingMusic) == 0x000008, "Wrong alignment on AthenaBattleBusItemDefinition_GetLobbyLoopingMusic");
static_assert(sizeof(AthenaBattleBusItemDefinition_GetLobbyLoopingMusic) == 0x000008, "Wrong size on AthenaBattleBusItemDefinition_GetLobbyLoopingMusic");
static_assert(offsetof(AthenaBattleBusItemDefinition_GetLobbyLoopingMusic, ReturnValue) == 0x000000, "Member 'AthenaBattleBusItemDefinition_GetLobbyLoopingMusic::ReturnValue' has a wrong offset!");

// Function FortniteGame.AthenaBattleBusItemDefinition.GetLobbyLoopingSound
// 0x0008 (0x0008 - 0x0000)
struct AthenaBattleBusItemDefinition_GetLobbyLoopingSound final
{
public:
	class USoundBase*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaBattleBusItemDefinition_GetLobbyLoopingSound) == 0x000008, "Wrong alignment on AthenaBattleBusItemDefinition_GetLobbyLoopingSound");
static_assert(sizeof(AthenaBattleBusItemDefinition_GetLobbyLoopingSound) == 0x000008, "Wrong size on AthenaBattleBusItemDefinition_GetLobbyLoopingSound");
static_assert(offsetof(AthenaBattleBusItemDefinition_GetLobbyLoopingSound, ReturnValue) == 0x000000, "Member 'AthenaBattleBusItemDefinition_GetLobbyLoopingSound::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTeamInfoPvPBaseDestruction.GetTeamFOBCores
// 0x0010 (0x0010 - 0x0000)
struct FortTeamInfoPvPBaseDestruction_GetTeamFOBCores final
{
public:
	TArray<class ABuildingFOBCoreActor*>          OutFOBCores;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTeamInfoPvPBaseDestruction_GetTeamFOBCores) == 0x000008, "Wrong alignment on FortTeamInfoPvPBaseDestruction_GetTeamFOBCores");
static_assert(sizeof(FortTeamInfoPvPBaseDestruction_GetTeamFOBCores) == 0x000010, "Wrong size on FortTeamInfoPvPBaseDestruction_GetTeamFOBCores");
static_assert(offsetof(FortTeamInfoPvPBaseDestruction_GetTeamFOBCores, OutFOBCores) == 0x000000, "Member 'FortTeamInfoPvPBaseDestruction_GetTeamFOBCores::OutFOBCores' has a wrong offset!");

// Function FortniteGame.FortTeamInfoPvPBaseDestruction.GetTeamFOBCoresAndSpawnTags
// 0x0020 (0x0020 - 0x0000)
struct FortTeamInfoPvPBaseDestruction_GetTeamFOBCoresAndSpawnTags final
{
public:
	TArray<class ABuildingFOBCoreActor*>          OutFOBCores;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGameplayTagContainer>          OutFOBSpawnTags;                                   // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTeamInfoPvPBaseDestruction_GetTeamFOBCoresAndSpawnTags) == 0x000008, "Wrong alignment on FortTeamInfoPvPBaseDestruction_GetTeamFOBCoresAndSpawnTags");
static_assert(sizeof(FortTeamInfoPvPBaseDestruction_GetTeamFOBCoresAndSpawnTags) == 0x000020, "Wrong size on FortTeamInfoPvPBaseDestruction_GetTeamFOBCoresAndSpawnTags");
static_assert(offsetof(FortTeamInfoPvPBaseDestruction_GetTeamFOBCoresAndSpawnTags, OutFOBCores) == 0x000000, "Member 'FortTeamInfoPvPBaseDestruction_GetTeamFOBCoresAndSpawnTags::OutFOBCores' has a wrong offset!");
static_assert(offsetof(FortTeamInfoPvPBaseDestruction_GetTeamFOBCoresAndSpawnTags, OutFOBSpawnTags) == 0x000010, "Member 'FortTeamInfoPvPBaseDestruction_GetTeamFOBCoresAndSpawnTags::OutFOBSpawnTags' has a wrong offset!");

// Function FortniteGame.FortTeamInfoPvPBaseDestruction.GetStrategicBuildingActor
// 0x0010 (0x0010 - 0x0000)
struct FortTeamInfoPvPBaseDestruction_GetStrategicBuildingActor final
{
public:
	struct FTeamStrategicBuildingHandle           Handle;                                            // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AStrategicBuildingActor*                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTeamInfoPvPBaseDestruction_GetStrategicBuildingActor) == 0x000008, "Wrong alignment on FortTeamInfoPvPBaseDestruction_GetStrategicBuildingActor");
static_assert(sizeof(FortTeamInfoPvPBaseDestruction_GetStrategicBuildingActor) == 0x000010, "Wrong size on FortTeamInfoPvPBaseDestruction_GetStrategicBuildingActor");
static_assert(offsetof(FortTeamInfoPvPBaseDestruction_GetStrategicBuildingActor, Handle) == 0x000000, "Member 'FortTeamInfoPvPBaseDestruction_GetStrategicBuildingActor::Handle' has a wrong offset!");
static_assert(offsetof(FortTeamInfoPvPBaseDestruction_GetStrategicBuildingActor, ReturnValue) == 0x000008, "Member 'FortTeamInfoPvPBaseDestruction_GetStrategicBuildingActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTeamInfoPvPBaseDestruction.GetTeamCornerstone
// 0x0008 (0x0008 - 0x0000)
struct FortTeamInfoPvPBaseDestruction_GetTeamCornerstone final
{
public:
	class AFortPvPBaseCornerstone*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTeamInfoPvPBaseDestruction_GetTeamCornerstone) == 0x000008, "Wrong alignment on FortTeamInfoPvPBaseDestruction_GetTeamCornerstone");
static_assert(sizeof(FortTeamInfoPvPBaseDestruction_GetTeamCornerstone) == 0x000008, "Wrong size on FortTeamInfoPvPBaseDestruction_GetTeamCornerstone");
static_assert(offsetof(FortTeamInfoPvPBaseDestruction_GetTeamCornerstone, ReturnValue) == 0x000000, "Member 'FortTeamInfoPvPBaseDestruction_GetTeamCornerstone::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestCategory.HasUnseenQuests
// 0x0001 (0x0001 - 0x0000)
struct FortQuestCategory_HasUnseenQuests final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestCategory_HasUnseenQuests) == 0x000001, "Wrong alignment on FortQuestCategory_HasUnseenQuests");
static_assert(sizeof(FortQuestCategory_HasUnseenQuests) == 0x000001, "Wrong size on FortQuestCategory_HasUnseenQuests");
static_assert(offsetof(FortQuestCategory_HasUnseenQuests, ReturnValue) == 0x000000, "Member 'FortQuestCategory_HasUnseenQuests::ReturnValue' has a wrong offset!");

// Function FortniteGame.AthenaEmojiItemDefinition.ConfigureParticleSystem
// 0x0008 (0x0008 - 0x0000)
struct AthenaEmojiItemDefinition_ConfigureParticleSystem final
{
public:
	class UParticleSystemComponent*               ParticleSystem;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEmojiItemDefinition_ConfigureParticleSystem) == 0x000008, "Wrong alignment on AthenaEmojiItemDefinition_ConfigureParticleSystem");
static_assert(sizeof(AthenaEmojiItemDefinition_ConfigureParticleSystem) == 0x000008, "Wrong size on AthenaEmojiItemDefinition_ConfigureParticleSystem");
static_assert(offsetof(AthenaEmojiItemDefinition_ConfigureParticleSystem, ParticleSystem) == 0x000000, "Member 'AthenaEmojiItemDefinition_ConfigureParticleSystem::ParticleSystem' has a wrong offset!");

// Function FortniteGame.AthenaEmojiItemDefinition.GetMaterialInstance
// 0x0008 (0x0008 - 0x0000)
struct AthenaEmojiItemDefinition_GetMaterialInstance final
{
public:
	class UMaterialInstance*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaEmojiItemDefinition_GetMaterialInstance) == 0x000008, "Wrong alignment on AthenaEmojiItemDefinition_GetMaterialInstance");
static_assert(sizeof(AthenaEmojiItemDefinition_GetMaterialInstance) == 0x000008, "Wrong size on AthenaEmojiItemDefinition_GetMaterialInstance");
static_assert(offsetof(AthenaEmojiItemDefinition_GetMaterialInstance, ReturnValue) == 0x000000, "Member 'AthenaEmojiItemDefinition_GetMaterialInstance::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortClientAnnouncement.GetPriority
// 0x0004 (0x0004 - 0x0000)
struct FortClientAnnouncement_GetPriority final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortClientAnnouncement_GetPriority) == 0x000004, "Wrong alignment on FortClientAnnouncement_GetPriority");
static_assert(sizeof(FortClientAnnouncement_GetPriority) == 0x000004, "Wrong size on FortClientAnnouncement_GetPriority");
static_assert(offsetof(FortClientAnnouncement_GetPriority, ReturnValue) == 0x000000, "Member 'FortClientAnnouncement_GetPriority::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestObjectiveInfo.GetOwningQuest
// 0x0008 (0x0008 - 0x0000)
struct FortQuestObjectiveInfo_GetOwningQuest final
{
public:
	class UFortQuestItem*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestObjectiveInfo_GetOwningQuest) == 0x000008, "Wrong alignment on FortQuestObjectiveInfo_GetOwningQuest");
static_assert(sizeof(FortQuestObjectiveInfo_GetOwningQuest) == 0x000008, "Wrong size on FortQuestObjectiveInfo_GetOwningQuest");
static_assert(offsetof(FortQuestObjectiveInfo_GetOwningQuest, ReturnValue) == 0x000000, "Member 'FortQuestObjectiveInfo_GetOwningQuest::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestObjectiveInfo.HasCompleted
// 0x0001 (0x0001 - 0x0000)
struct FortQuestObjectiveInfo_HasCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestObjectiveInfo_HasCompleted) == 0x000001, "Wrong alignment on FortQuestObjectiveInfo_HasCompleted");
static_assert(sizeof(FortQuestObjectiveInfo_HasCompleted) == 0x000001, "Wrong size on FortQuestObjectiveInfo_HasCompleted");
static_assert(offsetof(FortQuestObjectiveInfo_HasCompleted, ReturnValue) == 0x000000, "Member 'FortQuestObjectiveInfo_HasCompleted::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestObjectiveInfo.IsActive
// 0x0001 (0x0001 - 0x0000)
struct FortQuestObjectiveInfo_IsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestObjectiveInfo_IsActive) == 0x000001, "Wrong alignment on FortQuestObjectiveInfo_IsActive");
static_assert(sizeof(FortQuestObjectiveInfo_IsActive) == 0x000001, "Wrong size on FortQuestObjectiveInfo_IsActive");
static_assert(offsetof(FortQuestObjectiveInfo_IsActive, ReturnValue) == 0x000000, "Member 'FortQuestObjectiveInfo_IsActive::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestObjectiveInfo.IsInProgress
// 0x0001 (0x0001 - 0x0000)
struct FortQuestObjectiveInfo_IsInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestObjectiveInfo_IsInProgress) == 0x000001, "Wrong alignment on FortQuestObjectiveInfo_IsInProgress");
static_assert(sizeof(FortQuestObjectiveInfo_IsInProgress) == 0x000001, "Wrong size on FortQuestObjectiveInfo_IsInProgress");
static_assert(offsetof(FortQuestObjectiveInfo_IsInProgress, ReturnValue) == 0x000000, "Member 'FortQuestObjectiveInfo_IsInProgress::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestObjectiveInfo.IsVisibleToUser
// 0x0001 (0x0001 - 0x0000)
struct FortQuestObjectiveInfo_IsVisibleToUser final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestObjectiveInfo_IsVisibleToUser) == 0x000001, "Wrong alignment on FortQuestObjectiveInfo_IsVisibleToUser");
static_assert(sizeof(FortQuestObjectiveInfo_IsVisibleToUser) == 0x000001, "Wrong size on FortQuestObjectiveInfo_IsVisibleToUser");
static_assert(offsetof(FortQuestObjectiveInfo_IsVisibleToUser, ReturnValue) == 0x000000, "Member 'FortQuestObjectiveInfo_IsVisibleToUser::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAccountItem.HasBeenSeenLocally
// 0x0001 (0x0001 - 0x0000)
struct FortAccountItem_HasBeenSeenLocally final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAccountItem_HasBeenSeenLocally) == 0x000001, "Wrong alignment on FortAccountItem_HasBeenSeenLocally");
static_assert(sizeof(FortAccountItem_HasBeenSeenLocally) == 0x000001, "Wrong size on FortAccountItem_HasBeenSeenLocally");
static_assert(offsetof(FortAccountItem_HasBeenSeenLocally, ReturnValue) == 0x000000, "Member 'FortAccountItem_HasBeenSeenLocally::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAccountItem.IsFavorite
// 0x0001 (0x0001 - 0x0000)
struct FortAccountItem_IsFavorite final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAccountItem_IsFavorite) == 0x000001, "Wrong alignment on FortAccountItem_IsFavorite");
static_assert(sizeof(FortAccountItem_IsFavorite) == 0x000001, "Wrong size on FortAccountItem_IsFavorite");
static_assert(offsetof(FortAccountItem_IsFavorite, ReturnValue) == 0x000000, "Member 'FortAccountItem_IsFavorite::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingActor.AddEditorOnlyInstanceGameplayTags
// 0x0020 (0x0020 - 0x0000)
struct BuildingActor_AddEditorOnlyInstanceGameplayTags final
{
public:
	struct FGameplayTagContainer                  NewTags;                                           // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_AddEditorOnlyInstanceGameplayTags) == 0x000008, "Wrong alignment on BuildingActor_AddEditorOnlyInstanceGameplayTags");
static_assert(sizeof(BuildingActor_AddEditorOnlyInstanceGameplayTags) == 0x000020, "Wrong size on BuildingActor_AddEditorOnlyInstanceGameplayTags");
static_assert(offsetof(BuildingActor_AddEditorOnlyInstanceGameplayTags, NewTags) == 0x000000, "Member 'BuildingActor_AddEditorOnlyInstanceGameplayTags::NewTags' has a wrong offset!");

// Function FortniteGame.BuildingActor.BlueprintOnInteract
// 0x0008 (0x0008 - 0x0000)
struct BuildingActor_BlueprintOnInteract final
{
public:
	const class AFortPawn*                        InteractingPawn;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_BlueprintOnInteract) == 0x000008, "Wrong alignment on BuildingActor_BlueprintOnInteract");
static_assert(sizeof(BuildingActor_BlueprintOnInteract) == 0x000008, "Wrong size on BuildingActor_BlueprintOnInteract");
static_assert(offsetof(BuildingActor_BlueprintOnInteract, InteractingPawn) == 0x000000, "Member 'BuildingActor_BlueprintOnInteract::InteractingPawn' has a wrong offset!");

// Function FortniteGame.BuildingActor.BlueprintOnLocalInteract
// 0x0010 (0x0010 - 0x0000)
struct BuildingActor_BlueprintOnLocalInteract final
{
public:
	class AFortPlayerPawn*                        InteractingPawn;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingActor_BlueprintOnLocalInteract) == 0x000008, "Wrong alignment on BuildingActor_BlueprintOnLocalInteract");
static_assert(sizeof(BuildingActor_BlueprintOnLocalInteract) == 0x000010, "Wrong size on BuildingActor_BlueprintOnLocalInteract");
static_assert(offsetof(BuildingActor_BlueprintOnLocalInteract, InteractingPawn) == 0x000000, "Member 'BuildingActor_BlueprintOnLocalInteract::InteractingPawn' has a wrong offset!");
static_assert(offsetof(BuildingActor_BlueprintOnLocalInteract, ReturnValue) == 0x000008, "Member 'BuildingActor_BlueprintOnLocalInteract::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingActor.ForceBuildingHealth
// 0x0004 (0x0004 - 0x0000)
struct BuildingActor_ForceBuildingHealth final
{
public:
	float                                         NewHealth;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_ForceBuildingHealth) == 0x000004, "Wrong alignment on BuildingActor_ForceBuildingHealth");
static_assert(sizeof(BuildingActor_ForceBuildingHealth) == 0x000004, "Wrong size on BuildingActor_ForceBuildingHealth");
static_assert(offsetof(BuildingActor_ForceBuildingHealth, NewHealth) == 0x000000, "Member 'BuildingActor_ForceBuildingHealth::NewHealth' has a wrong offset!");

// Function FortniteGame.BuildingActor.GameplayCue_Damage
// 0x00C0 (0x00C0 - 0x0000)
struct BuildingActor_GameplayCue_Damage final
{
public:
	EGameplayCueEvent                             EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00B8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_GameplayCue_Damage) == 0x000008, "Wrong alignment on BuildingActor_GameplayCue_Damage");
static_assert(sizeof(BuildingActor_GameplayCue_Damage) == 0x0000C0, "Wrong size on BuildingActor_GameplayCue_Damage");
static_assert(offsetof(BuildingActor_GameplayCue_Damage, EventType) == 0x000000, "Member 'BuildingActor_GameplayCue_Damage::EventType' has a wrong offset!");
static_assert(offsetof(BuildingActor_GameplayCue_Damage, Parameters) == 0x000008, "Member 'BuildingActor_GameplayCue_Damage::Parameters' has a wrong offset!");

// Function FortniteGame.BuildingActor.GameplayCue_Healing
// 0x00C0 (0x00C0 - 0x0000)
struct BuildingActor_GameplayCue_Healing final
{
public:
	EGameplayCueEvent                             EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00B8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_GameplayCue_Healing) == 0x000008, "Wrong alignment on BuildingActor_GameplayCue_Healing");
static_assert(sizeof(BuildingActor_GameplayCue_Healing) == 0x0000C0, "Wrong size on BuildingActor_GameplayCue_Healing");
static_assert(offsetof(BuildingActor_GameplayCue_Healing, EventType) == 0x000000, "Member 'BuildingActor_GameplayCue_Healing::EventType' has a wrong offset!");
static_assert(offsetof(BuildingActor_GameplayCue_Healing, Parameters) == 0x000008, "Member 'BuildingActor_GameplayCue_Healing::Parameters' has a wrong offset!");

// Function FortniteGame.BuildingActor.GameplayCue_InstantDeath
// 0x00C0 (0x00C0 - 0x0000)
struct BuildingActor_GameplayCue_InstantDeath final
{
public:
	EGameplayCueEvent                             EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00B8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_GameplayCue_InstantDeath) == 0x000008, "Wrong alignment on BuildingActor_GameplayCue_InstantDeath");
static_assert(sizeof(BuildingActor_GameplayCue_InstantDeath) == 0x0000C0, "Wrong size on BuildingActor_GameplayCue_InstantDeath");
static_assert(offsetof(BuildingActor_GameplayCue_InstantDeath, EventType) == 0x000000, "Member 'BuildingActor_GameplayCue_InstantDeath::EventType' has a wrong offset!");
static_assert(offsetof(BuildingActor_GameplayCue_InstantDeath, Parameters) == 0x000008, "Member 'BuildingActor_GameplayCue_InstantDeath::Parameters' has a wrong offset!");

// Function FortniteGame.BuildingActor.InitializeKismetSpawnedBuildingActor
// 0x0010 (0x0010 - 0x0000)
struct BuildingActor_InitializeKismetSpawnedBuildingActor final
{
public:
	class ABuildingActor*                         BuildingOwner;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  SpawningController;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_InitializeKismetSpawnedBuildingActor) == 0x000008, "Wrong alignment on BuildingActor_InitializeKismetSpawnedBuildingActor");
static_assert(sizeof(BuildingActor_InitializeKismetSpawnedBuildingActor) == 0x000010, "Wrong size on BuildingActor_InitializeKismetSpawnedBuildingActor");
static_assert(offsetof(BuildingActor_InitializeKismetSpawnedBuildingActor, BuildingOwner) == 0x000000, "Member 'BuildingActor_InitializeKismetSpawnedBuildingActor::BuildingOwner' has a wrong offset!");
static_assert(offsetof(BuildingActor_InitializeKismetSpawnedBuildingActor, SpawningController) == 0x000008, "Member 'BuildingActor_InitializeKismetSpawnedBuildingActor::SpawningController' has a wrong offset!");

// Function FortniteGame.BuildingActor.OnBuildingActorInitialized
// 0x0002 (0x0002 - 0x0000)
struct BuildingActor_OnBuildingActorInitialized final
{
public:
	EFortBuildingInitializationReason             InitializationReason;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuildingPersistentState                  BuildingPersistentState;                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_OnBuildingActorInitialized) == 0x000001, "Wrong alignment on BuildingActor_OnBuildingActorInitialized");
static_assert(sizeof(BuildingActor_OnBuildingActorInitialized) == 0x000002, "Wrong size on BuildingActor_OnBuildingActorInitialized");
static_assert(offsetof(BuildingActor_OnBuildingActorInitialized, InitializationReason) == 0x000000, "Member 'BuildingActor_OnBuildingActorInitialized::InitializationReason' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnBuildingActorInitialized, BuildingPersistentState) == 0x000001, "Member 'BuildingActor_OnBuildingActorInitialized::BuildingPersistentState' has a wrong offset!");

// Function FortniteGame.BuildingActor.OnDamagePlayEffects
// 0x00E0 (0x00E0 - 0x0000)
struct BuildingActor_OnDamagePlayEffects final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  DamageTags;                                        // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Momentum;                                          // 0x0028(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitInfo;                                           // 0x0038(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AFortPawn*                              InstigatedBy;                                      // 0x00B8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x00C0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x00C8(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_OnDamagePlayEffects) == 0x000008, "Wrong alignment on BuildingActor_OnDamagePlayEffects");
static_assert(sizeof(BuildingActor_OnDamagePlayEffects) == 0x0000E0, "Wrong size on BuildingActor_OnDamagePlayEffects");
static_assert(offsetof(BuildingActor_OnDamagePlayEffects, Damage) == 0x000000, "Member 'BuildingActor_OnDamagePlayEffects::Damage' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDamagePlayEffects, DamageTags) == 0x000008, "Member 'BuildingActor_OnDamagePlayEffects::DamageTags' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDamagePlayEffects, Momentum) == 0x000028, "Member 'BuildingActor_OnDamagePlayEffects::Momentum' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDamagePlayEffects, HitInfo) == 0x000038, "Member 'BuildingActor_OnDamagePlayEffects::HitInfo' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDamagePlayEffects, InstigatedBy) == 0x0000B8, "Member 'BuildingActor_OnDamagePlayEffects::InstigatedBy' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDamagePlayEffects, DamageCauser) == 0x0000C0, "Member 'BuildingActor_OnDamagePlayEffects::DamageCauser' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDamagePlayEffects, EffectContext) == 0x0000C8, "Member 'BuildingActor_OnDamagePlayEffects::EffectContext' has a wrong offset!");

// Function FortniteGame.BuildingActor.OnDamageServer
// 0x00E0 (0x00E0 - 0x0000)
struct BuildingActor_OnDamageServer final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  DamageTags;                                        // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Momentum;                                          // 0x0028(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitInfo;                                           // 0x0038(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AController*                            InstigatedBy;                                      // 0x00B8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x00C0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x00C8(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_OnDamageServer) == 0x000008, "Wrong alignment on BuildingActor_OnDamageServer");
static_assert(sizeof(BuildingActor_OnDamageServer) == 0x0000E0, "Wrong size on BuildingActor_OnDamageServer");
static_assert(offsetof(BuildingActor_OnDamageServer, Damage) == 0x000000, "Member 'BuildingActor_OnDamageServer::Damage' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDamageServer, DamageTags) == 0x000008, "Member 'BuildingActor_OnDamageServer::DamageTags' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDamageServer, Momentum) == 0x000028, "Member 'BuildingActor_OnDamageServer::Momentum' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDamageServer, HitInfo) == 0x000038, "Member 'BuildingActor_OnDamageServer::HitInfo' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDamageServer, InstigatedBy) == 0x0000B8, "Member 'BuildingActor_OnDamageServer::InstigatedBy' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDamageServer, DamageCauser) == 0x0000C0, "Member 'BuildingActor_OnDamageServer::DamageCauser' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDamageServer, EffectContext) == 0x0000C8, "Member 'BuildingActor_OnDamageServer::EffectContext' has a wrong offset!");

// Function FortniteGame.BuildingActor.OnDayPhaseChanged
// 0x0003 (0x0003 - 0x0000)
struct BuildingActor_OnDayPhaseChanged final
{
public:
	EFortDayPhase                                 CurrentDayPhase;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDayPhase                                 PreviousDayPhase;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAtCreation;                                       // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_OnDayPhaseChanged) == 0x000001, "Wrong alignment on BuildingActor_OnDayPhaseChanged");
static_assert(sizeof(BuildingActor_OnDayPhaseChanged) == 0x000003, "Wrong size on BuildingActor_OnDayPhaseChanged");
static_assert(offsetof(BuildingActor_OnDayPhaseChanged, CurrentDayPhase) == 0x000000, "Member 'BuildingActor_OnDayPhaseChanged::CurrentDayPhase' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDayPhaseChanged, PreviousDayPhase) == 0x000001, "Member 'BuildingActor_OnDayPhaseChanged::PreviousDayPhase' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDayPhaseChanged, bAtCreation) == 0x000002, "Member 'BuildingActor_OnDayPhaseChanged::bAtCreation' has a wrong offset!");

// Function FortniteGame.BuildingActor.OnDeathPlayEffects
// 0x00E0 (0x00E0 - 0x0000)
struct BuildingActor_OnDeathPlayEffects final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  DamageTags;                                        // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Momentum;                                          // 0x0028(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitInfo;                                           // 0x0038(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AFortPawn*                              InstigatedBy;                                      // 0x00B8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x00C0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x00C8(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_OnDeathPlayEffects) == 0x000008, "Wrong alignment on BuildingActor_OnDeathPlayEffects");
static_assert(sizeof(BuildingActor_OnDeathPlayEffects) == 0x0000E0, "Wrong size on BuildingActor_OnDeathPlayEffects");
static_assert(offsetof(BuildingActor_OnDeathPlayEffects, Damage) == 0x000000, "Member 'BuildingActor_OnDeathPlayEffects::Damage' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDeathPlayEffects, DamageTags) == 0x000008, "Member 'BuildingActor_OnDeathPlayEffects::DamageTags' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDeathPlayEffects, Momentum) == 0x000028, "Member 'BuildingActor_OnDeathPlayEffects::Momentum' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDeathPlayEffects, HitInfo) == 0x000038, "Member 'BuildingActor_OnDeathPlayEffects::HitInfo' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDeathPlayEffects, InstigatedBy) == 0x0000B8, "Member 'BuildingActor_OnDeathPlayEffects::InstigatedBy' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDeathPlayEffects, DamageCauser) == 0x0000C0, "Member 'BuildingActor_OnDeathPlayEffects::DamageCauser' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDeathPlayEffects, EffectContext) == 0x0000C8, "Member 'BuildingActor_OnDeathPlayEffects::EffectContext' has a wrong offset!");

// Function FortniteGame.BuildingActor.OnDeathServer
// 0x00E0 (0x00E0 - 0x0000)
struct BuildingActor_OnDeathServer final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  DamageTags;                                        // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Momentum;                                          // 0x0028(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitInfo;                                           // 0x0038(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AController*                            InstigatedBy;                                      // 0x00B8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x00C0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x00C8(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_OnDeathServer) == 0x000008, "Wrong alignment on BuildingActor_OnDeathServer");
static_assert(sizeof(BuildingActor_OnDeathServer) == 0x0000E0, "Wrong size on BuildingActor_OnDeathServer");
static_assert(offsetof(BuildingActor_OnDeathServer, Damage) == 0x000000, "Member 'BuildingActor_OnDeathServer::Damage' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDeathServer, DamageTags) == 0x000008, "Member 'BuildingActor_OnDeathServer::DamageTags' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDeathServer, Momentum) == 0x000028, "Member 'BuildingActor_OnDeathServer::Momentum' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDeathServer, HitInfo) == 0x000038, "Member 'BuildingActor_OnDeathServer::HitInfo' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDeathServer, InstigatedBy) == 0x0000B8, "Member 'BuildingActor_OnDeathServer::InstigatedBy' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDeathServer, DamageCauser) == 0x0000C0, "Member 'BuildingActor_OnDeathServer::DamageCauser' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDeathServer, EffectContext) == 0x0000C8, "Member 'BuildingActor_OnDeathServer::EffectContext' has a wrong offset!");

// Function FortniteGame.BuildingActor.RemoveEditorOnlyInstanceGameplayTags
// 0x0020 (0x0020 - 0x0000)
struct BuildingActor_RemoveEditorOnlyInstanceGameplayTags final
{
public:
	struct FGameplayTagContainer                  TagsToRemove;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_RemoveEditorOnlyInstanceGameplayTags) == 0x000008, "Wrong alignment on BuildingActor_RemoveEditorOnlyInstanceGameplayTags");
static_assert(sizeof(BuildingActor_RemoveEditorOnlyInstanceGameplayTags) == 0x000020, "Wrong size on BuildingActor_RemoveEditorOnlyInstanceGameplayTags");
static_assert(offsetof(BuildingActor_RemoveEditorOnlyInstanceGameplayTags, TagsToRemove) == 0x000000, "Member 'BuildingActor_RemoveEditorOnlyInstanceGameplayTags::TagsToRemove' has a wrong offset!");

// Function FortniteGame.BuildingActor.SetCanExportNavigationObstacle
// 0x0001 (0x0001 - 0x0000)
struct BuildingActor_SetCanExportNavigationObstacle final
{
public:
	bool                                          InCanExportNavigationObstacle;                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_SetCanExportNavigationObstacle) == 0x000001, "Wrong alignment on BuildingActor_SetCanExportNavigationObstacle");
static_assert(sizeof(BuildingActor_SetCanExportNavigationObstacle) == 0x000001, "Wrong size on BuildingActor_SetCanExportNavigationObstacle");
static_assert(offsetof(BuildingActor_SetCanExportNavigationObstacle, InCanExportNavigationObstacle) == 0x000000, "Member 'BuildingActor_SetCanExportNavigationObstacle::InCanExportNavigationObstacle' has a wrong offset!");

// Function FortniteGame.BuildingActor.SetCustomState
// 0x0010 (0x0010 - 0x0000)
struct BuildingActor_SetCustomState final
{
public:
	class FString                                 NewState;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_SetCustomState) == 0x000008, "Wrong alignment on BuildingActor_SetCustomState");
static_assert(sizeof(BuildingActor_SetCustomState) == 0x000010, "Wrong size on BuildingActor_SetCustomState");
static_assert(offsetof(BuildingActor_SetCustomState, NewState) == 0x000000, "Member 'BuildingActor_SetCustomState::NewState' has a wrong offset!");

// Function FortniteGame.BuildingActor.SetNavigationModifier
// 0x0001 (0x0001 - 0x0000)
struct BuildingActor_SetNavigationModifier final
{
public:
	bool                                          bEnableModifier;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_SetNavigationModifier) == 0x000001, "Wrong alignment on BuildingActor_SetNavigationModifier");
static_assert(sizeof(BuildingActor_SetNavigationModifier) == 0x000001, "Wrong size on BuildingActor_SetNavigationModifier");
static_assert(offsetof(BuildingActor_SetNavigationModifier, bEnableModifier) == 0x000000, "Member 'BuildingActor_SetNavigationModifier::bEnableModifier' has a wrong offset!");

// Function FortniteGame.BuildingActor.ShouldDie
// 0x0020 (0x0020 - 0x0000)
struct BuildingActor_ShouldDie final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            EventInstigator;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingActor_ShouldDie) == 0x000008, "Wrong alignment on BuildingActor_ShouldDie");
static_assert(sizeof(BuildingActor_ShouldDie) == 0x000020, "Wrong size on BuildingActor_ShouldDie");
static_assert(offsetof(BuildingActor_ShouldDie, Damage) == 0x000000, "Member 'BuildingActor_ShouldDie::Damage' has a wrong offset!");
static_assert(offsetof(BuildingActor_ShouldDie, EventInstigator) == 0x000008, "Member 'BuildingActor_ShouldDie::EventInstigator' has a wrong offset!");
static_assert(offsetof(BuildingActor_ShouldDie, DamageCauser) == 0x000010, "Member 'BuildingActor_ShouldDie::DamageCauser' has a wrong offset!");
static_assert(offsetof(BuildingActor_ShouldDie, ReturnValue) == 0x000018, "Member 'BuildingActor_ShouldDie::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingActor.BlueprintCanInteract
// 0x0010 (0x0010 - 0x0000)
struct BuildingActor_BlueprintCanInteract final
{
public:
	const class AFortPawn*                        InteractingPawn;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingActor_BlueprintCanInteract) == 0x000008, "Wrong alignment on BuildingActor_BlueprintCanInteract");
static_assert(sizeof(BuildingActor_BlueprintCanInteract) == 0x000010, "Wrong size on BuildingActor_BlueprintCanInteract");
static_assert(offsetof(BuildingActor_BlueprintCanInteract, InteractingPawn) == 0x000000, "Member 'BuildingActor_BlueprintCanInteract::InteractingPawn' has a wrong offset!");
static_assert(offsetof(BuildingActor_BlueprintCanInteract, ReturnValue) == 0x000008, "Member 'BuildingActor_BlueprintCanInteract::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingActor.BlueprintGetFailedInteractionString
// 0x0020 (0x0020 - 0x0000)
struct BuildingActor_BlueprintGetFailedInteractionString final
{
public:
	const class AFortPawn*                        InteractingPawn;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_BlueprintGetFailedInteractionString) == 0x000008, "Wrong alignment on BuildingActor_BlueprintGetFailedInteractionString");
static_assert(sizeof(BuildingActor_BlueprintGetFailedInteractionString) == 0x000020, "Wrong size on BuildingActor_BlueprintGetFailedInteractionString");
static_assert(offsetof(BuildingActor_BlueprintGetFailedInteractionString, InteractingPawn) == 0x000000, "Member 'BuildingActor_BlueprintGetFailedInteractionString::InteractingPawn' has a wrong offset!");
static_assert(offsetof(BuildingActor_BlueprintGetFailedInteractionString, ReturnValue) == 0x000008, "Member 'BuildingActor_BlueprintGetFailedInteractionString::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingActor.BlueprintGetInteractionString
// 0x0020 (0x0020 - 0x0000)
struct BuildingActor_BlueprintGetInteractionString final
{
public:
	const class AFortPawn*                        InteractingPawn;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_BlueprintGetInteractionString) == 0x000008, "Wrong alignment on BuildingActor_BlueprintGetInteractionString");
static_assert(sizeof(BuildingActor_BlueprintGetInteractionString) == 0x000020, "Wrong size on BuildingActor_BlueprintGetInteractionString");
static_assert(offsetof(BuildingActor_BlueprintGetInteractionString, InteractingPawn) == 0x000000, "Member 'BuildingActor_BlueprintGetInteractionString::InteractingPawn' has a wrong offset!");
static_assert(offsetof(BuildingActor_BlueprintGetInteractionString, ReturnValue) == 0x000008, "Member 'BuildingActor_BlueprintGetInteractionString::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingActor.GetCentroid
// 0x000C (0x000C - 0x0000)
struct BuildingActor_GetCentroid final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_GetCentroid) == 0x000004, "Wrong alignment on BuildingActor_GetCentroid");
static_assert(sizeof(BuildingActor_GetCentroid) == 0x00000C, "Wrong size on BuildingActor_GetCentroid");
static_assert(offsetof(BuildingActor_GetCentroid, ReturnValue) == 0x000000, "Member 'BuildingActor_GetCentroid::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingActor.GetCurrentBuildingLevel
// 0x0004 (0x0004 - 0x0000)
struct BuildingActor_GetCurrentBuildingLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_GetCurrentBuildingLevel) == 0x000004, "Wrong alignment on BuildingActor_GetCurrentBuildingLevel");
static_assert(sizeof(BuildingActor_GetCurrentBuildingLevel) == 0x000004, "Wrong size on BuildingActor_GetCurrentBuildingLevel");
static_assert(offsetof(BuildingActor_GetCurrentBuildingLevel, ReturnValue) == 0x000000, "Member 'BuildingActor_GetCurrentBuildingLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingActor.GetCustomState
// 0x0010 (0x0010 - 0x0000)
struct BuildingActor_GetCustomState final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_GetCustomState) == 0x000008, "Wrong alignment on BuildingActor_GetCustomState");
static_assert(sizeof(BuildingActor_GetCustomState) == 0x000010, "Wrong size on BuildingActor_GetCustomState");
static_assert(offsetof(BuildingActor_GetCustomState, ReturnValue) == 0x000000, "Member 'BuildingActor_GetCustomState::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingActor.GetEditorTestTags
// 0x0020 (0x0020 - 0x0000)
struct BuildingActor_GetEditorTestTags final
{
public:
	struct FGameplayTagContainer                  TagContainer;                                      // 0x0000(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_GetEditorTestTags) == 0x000008, "Wrong alignment on BuildingActor_GetEditorTestTags");
static_assert(sizeof(BuildingActor_GetEditorTestTags) == 0x000020, "Wrong size on BuildingActor_GetEditorTestTags");
static_assert(offsetof(BuildingActor_GetEditorTestTags, TagContainer) == 0x000000, "Member 'BuildingActor_GetEditorTestTags::TagContainer' has a wrong offset!");

// Function FortniteGame.BuildingActor.GetHealth
// 0x0004 (0x0004 - 0x0000)
struct BuildingActor_GetHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_GetHealth) == 0x000004, "Wrong alignment on BuildingActor_GetHealth");
static_assert(sizeof(BuildingActor_GetHealth) == 0x000004, "Wrong size on BuildingActor_GetHealth");
static_assert(offsetof(BuildingActor_GetHealth, ReturnValue) == 0x000000, "Member 'BuildingActor_GetHealth::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingActor.GetHealthPercent
// 0x0004 (0x0004 - 0x0000)
struct BuildingActor_GetHealthPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_GetHealthPercent) == 0x000004, "Wrong alignment on BuildingActor_GetHealthPercent");
static_assert(sizeof(BuildingActor_GetHealthPercent) == 0x000004, "Wrong size on BuildingActor_GetHealthPercent");
static_assert(offsetof(BuildingActor_GetHealthPercent, ReturnValue) == 0x000000, "Member 'BuildingActor_GetHealthPercent::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingActor.GetMaxHealth
// 0x0004 (0x0004 - 0x0000)
struct BuildingActor_GetMaxHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_GetMaxHealth) == 0x000004, "Wrong alignment on BuildingActor_GetMaxHealth");
static_assert(sizeof(BuildingActor_GetMaxHealth) == 0x000004, "Wrong size on BuildingActor_GetMaxHealth");
static_assert(offsetof(BuildingActor_GetMaxHealth, ReturnValue) == 0x000000, "Member 'BuildingActor_GetMaxHealth::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingActor.GetMissingHealth
// 0x0004 (0x0004 - 0x0000)
struct BuildingActor_GetMissingHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_GetMissingHealth) == 0x000004, "Wrong alignment on BuildingActor_GetMissingHealth");
static_assert(sizeof(BuildingActor_GetMissingHealth) == 0x000004, "Wrong size on BuildingActor_GetMissingHealth");
static_assert(offsetof(BuildingActor_GetMissingHealth, ReturnValue) == 0x000000, "Member 'BuildingActor_GetMissingHealth::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingActor.GetOwningController
// 0x0008 (0x0008 - 0x0000)
struct BuildingActor_GetOwningController final
{
public:
	class AController*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_GetOwningController) == 0x000008, "Wrong alignment on BuildingActor_GetOwningController");
static_assert(sizeof(BuildingActor_GetOwningController) == 0x000008, "Wrong size on BuildingActor_GetOwningController");
static_assert(offsetof(BuildingActor_GetOwningController, ReturnValue) == 0x000000, "Member 'BuildingActor_GetOwningController::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingActor.GetOwningPlayerState
// 0x0008 (0x0008 - 0x0000)
struct BuildingActor_GetOwningPlayerState final
{
public:
	class AFortPlayerState*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_GetOwningPlayerState) == 0x000008, "Wrong alignment on BuildingActor_GetOwningPlayerState");
static_assert(sizeof(BuildingActor_GetOwningPlayerState) == 0x000008, "Wrong size on BuildingActor_GetOwningPlayerState");
static_assert(offsetof(BuildingActor_GetOwningPlayerState, ReturnValue) == 0x000000, "Member 'BuildingActor_GetOwningPlayerState::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingActor.HasHealthLeft
// 0x0001 (0x0001 - 0x0000)
struct BuildingActor_HasHealthLeft final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_HasHealthLeft) == 0x000001, "Wrong alignment on BuildingActor_HasHealthLeft");
static_assert(sizeof(BuildingActor_HasHealthLeft) == 0x000001, "Wrong size on BuildingActor_HasHealthLeft");
static_assert(offsetof(BuildingActor_HasHealthLeft, ReturnValue) == 0x000000, "Member 'BuildingActor_HasHealthLeft::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingActor.IsAcceptablePositionForPlacement
// 0x0048 (0x0048 - 0x0000)
struct BuildingActor_IsAcceptablePositionForPlacement final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRotation;                                        // 0x000C(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AFortDecoTool*                          DecoTool;                                          // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCDO;                                            // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   OutFailureReason;                                  // 0x0028(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingActor_IsAcceptablePositionForPlacement) == 0x000008, "Wrong alignment on BuildingActor_IsAcceptablePositionForPlacement");
static_assert(sizeof(BuildingActor_IsAcceptablePositionForPlacement) == 0x000048, "Wrong size on BuildingActor_IsAcceptablePositionForPlacement");
static_assert(offsetof(BuildingActor_IsAcceptablePositionForPlacement, InLocation) == 0x000000, "Member 'BuildingActor_IsAcceptablePositionForPlacement::InLocation' has a wrong offset!");
static_assert(offsetof(BuildingActor_IsAcceptablePositionForPlacement, InRotation) == 0x00000C, "Member 'BuildingActor_IsAcceptablePositionForPlacement::InRotation' has a wrong offset!");
static_assert(offsetof(BuildingActor_IsAcceptablePositionForPlacement, DecoTool) == 0x000018, "Member 'BuildingActor_IsAcceptablePositionForPlacement::DecoTool' has a wrong offset!");
static_assert(offsetof(BuildingActor_IsAcceptablePositionForPlacement, bIsCDO) == 0x000020, "Member 'BuildingActor_IsAcceptablePositionForPlacement::bIsCDO' has a wrong offset!");
static_assert(offsetof(BuildingActor_IsAcceptablePositionForPlacement, OutFailureReason) == 0x000028, "Member 'BuildingActor_IsAcceptablePositionForPlacement::OutFailureReason' has a wrong offset!");
static_assert(offsetof(BuildingActor_IsAcceptablePositionForPlacement, ReturnValue) == 0x000040, "Member 'BuildingActor_IsAcceptablePositionForPlacement::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingActor.IsDamaged
// 0x0001 (0x0001 - 0x0000)
struct BuildingActor_IsDamaged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_IsDamaged) == 0x000001, "Wrong alignment on BuildingActor_IsDamaged");
static_assert(sizeof(BuildingActor_IsDamaged) == 0x000001, "Wrong size on BuildingActor_IsDamaged");
static_assert(offsetof(BuildingActor_IsDamaged, ReturnValue) == 0x000000, "Member 'BuildingActor_IsDamaged::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingActor.IsPlayerBuilt
// 0x0001 (0x0001 - 0x0000)
struct BuildingActor_IsPlayerBuilt final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_IsPlayerBuilt) == 0x000001, "Wrong alignment on BuildingActor_IsPlayerBuilt");
static_assert(sizeof(BuildingActor_IsPlayerBuilt) == 0x000001, "Wrong size on BuildingActor_IsPlayerBuilt");
static_assert(offsetof(BuildingActor_IsPlayerBuilt, ReturnValue) == 0x000000, "Member 'BuildingActor_IsPlayerBuilt::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingActor.UseDefaultHealthBar
// 0x0001 (0x0001 - 0x0000)
struct BuildingActor_UseDefaultHealthBar final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_UseDefaultHealthBar) == 0x000001, "Wrong alignment on BuildingActor_UseDefaultHealthBar");
static_assert(sizeof(BuildingActor_UseDefaultHealthBar) == 0x000001, "Wrong size on BuildingActor_UseDefaultHealthBar");
static_assert(offsetof(BuildingActor_UseDefaultHealthBar, ReturnValue) == 0x000000, "Member 'BuildingActor_UseDefaultHealthBar::ReturnValue' has a wrong offset!");

// Function FortniteGame.AthenaPlayerMatchReport.GetLootRewards
// 0x0010 (0x0010 - 0x0000)
struct AthenaPlayerMatchReport_GetLootRewards final
{
public:
	TArray<struct FAthenaMatchLootReward>         LootRewards;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaPlayerMatchReport_GetLootRewards) == 0x000008, "Wrong alignment on AthenaPlayerMatchReport_GetLootRewards");
static_assert(sizeof(AthenaPlayerMatchReport_GetLootRewards) == 0x000010, "Wrong size on AthenaPlayerMatchReport_GetLootRewards");
static_assert(offsetof(AthenaPlayerMatchReport_GetLootRewards, LootRewards) == 0x000000, "Member 'AthenaPlayerMatchReport_GetLootRewards::LootRewards' has a wrong offset!");

// Function FortniteGame.AthenaPlayerMatchReport.GetXpRewards
// 0x0010 (0x0010 - 0x0000)
struct AthenaPlayerMatchReport_GetXpRewards final
{
public:
	TArray<struct FAthenaMatchXpReward>           XpRewards;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaPlayerMatchReport_GetXpRewards) == 0x000008, "Wrong alignment on AthenaPlayerMatchReport_GetXpRewards");
static_assert(sizeof(AthenaPlayerMatchReport_GetXpRewards) == 0x000010, "Wrong size on AthenaPlayerMatchReport_GetXpRewards");
static_assert(offsetof(AthenaPlayerMatchReport_GetXpRewards, XpRewards) == 0x000000, "Member 'AthenaPlayerMatchReport_GetXpRewards::XpRewards' has a wrong offset!");

// Function FortniteGame.AthenaPlayerMatchReport.GetTotalBookXpEarned
// 0x0004 (0x0004 - 0x0000)
struct AthenaPlayerMatchReport_GetTotalBookXpEarned final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaPlayerMatchReport_GetTotalBookXpEarned) == 0x000004, "Wrong alignment on AthenaPlayerMatchReport_GetTotalBookXpEarned");
static_assert(sizeof(AthenaPlayerMatchReport_GetTotalBookXpEarned) == 0x000004, "Wrong size on AthenaPlayerMatchReport_GetTotalBookXpEarned");
static_assert(offsetof(AthenaPlayerMatchReport_GetTotalBookXpEarned, ReturnValue) == 0x000000, "Member 'AthenaPlayerMatchReport_GetTotalBookXpEarned::ReturnValue' has a wrong offset!");

// Function FortniteGame.AthenaPlayerMatchReport.GetTotalScoreEarned
// 0x0004 (0x0004 - 0x0000)
struct AthenaPlayerMatchReport_GetTotalScoreEarned final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaPlayerMatchReport_GetTotalScoreEarned) == 0x000004, "Wrong alignment on AthenaPlayerMatchReport_GetTotalScoreEarned");
static_assert(sizeof(AthenaPlayerMatchReport_GetTotalScoreEarned) == 0x000004, "Wrong size on AthenaPlayerMatchReport_GetTotalScoreEarned");
static_assert(offsetof(AthenaPlayerMatchReport_GetTotalScoreEarned, ReturnValue) == 0x000000, "Member 'AthenaPlayerMatchReport_GetTotalScoreEarned::ReturnValue' has a wrong offset!");

// Function FortniteGame.AthenaPlayerMatchReport.GetTotalSeasonalXpEarned
// 0x0004 (0x0004 - 0x0000)
struct AthenaPlayerMatchReport_GetTotalSeasonalXpEarned final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AthenaPlayerMatchReport_GetTotalSeasonalXpEarned) == 0x000004, "Wrong alignment on AthenaPlayerMatchReport_GetTotalSeasonalXpEarned");
static_assert(sizeof(AthenaPlayerMatchReport_GetTotalSeasonalXpEarned) == 0x000004, "Wrong size on AthenaPlayerMatchReport_GetTotalSeasonalXpEarned");
static_assert(offsetof(AthenaPlayerMatchReport_GetTotalSeasonalXpEarned, ReturnValue) == 0x000000, "Member 'AthenaPlayerMatchReport_GetTotalSeasonalXpEarned::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCollectionBookPage.GetPageState
// 0x0001 (0x0001 - 0x0000)
struct FortCollectionBookPage_GetPageState final
{
public:
	EFortCollectionBookState                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookPage_GetPageState) == 0x000001, "Wrong alignment on FortCollectionBookPage_GetPageState");
static_assert(sizeof(FortCollectionBookPage_GetPageState) == 0x000001, "Wrong size on FortCollectionBookPage_GetPageState");
static_assert(offsetof(FortCollectionBookPage_GetPageState, ReturnValue) == 0x000000, "Member 'FortCollectionBookPage_GetPageState::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCollectionBookPage.GetSectionState
// 0x0010 (0x0010 - 0x0000)
struct FortCollectionBookPage_GetSectionState final
{
public:
	class FName                                   SectionId;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCollectionBookState                      ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCollectionBookPage_GetSectionState) == 0x000004, "Wrong alignment on FortCollectionBookPage_GetSectionState");
static_assert(sizeof(FortCollectionBookPage_GetSectionState) == 0x000010, "Wrong size on FortCollectionBookPage_GetSectionState");
static_assert(offsetof(FortCollectionBookPage_GetSectionState, SectionId) == 0x000000, "Member 'FortCollectionBookPage_GetSectionState::SectionId' has a wrong offset!");
static_assert(offsetof(FortCollectionBookPage_GetSectionState, ReturnValue) == 0x000008, "Member 'FortCollectionBookPage_GetSectionState::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPickup.GetDisplayName
// 0x0018 (0x0018 - 0x0000)
struct FortPickup_GetDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPickup_GetDisplayName) == 0x000008, "Wrong alignment on FortPickup_GetDisplayName");
static_assert(sizeof(FortPickup_GetDisplayName) == 0x000018, "Wrong size on FortPickup_GetDisplayName");
static_assert(offsetof(FortPickup_GetDisplayName, ReturnValue) == 0x000000, "Member 'FortPickup_GetDisplayName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPickup.GetInteractErrorText
// 0x0020 (0x0020 - 0x0000)
struct FortPickup_GetInteractErrorText final
{
public:
	class FText                                   InteractErrorText;                                 // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPickup_GetInteractErrorText) == 0x000008, "Wrong alignment on FortPickup_GetInteractErrorText");
static_assert(sizeof(FortPickup_GetInteractErrorText) == 0x000020, "Wrong size on FortPickup_GetInteractErrorText");
static_assert(offsetof(FortPickup_GetInteractErrorText, InteractErrorText) == 0x000000, "Member 'FortPickup_GetInteractErrorText::InteractErrorText' has a wrong offset!");
static_assert(offsetof(FortPickup_GetInteractErrorText, ReturnValue) == 0x000018, "Member 'FortPickup_GetInteractErrorText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPickup.GetInteractText
// 0x0020 (0x0020 - 0x0000)
struct FortPickup_GetInteractText final
{
public:
	class FText                                   InteractText;                                      // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPickup_GetInteractText) == 0x000008, "Wrong alignment on FortPickup_GetInteractText");
static_assert(sizeof(FortPickup_GetInteractText) == 0x000020, "Wrong size on FortPickup_GetInteractText");
static_assert(offsetof(FortPickup_GetInteractText, InteractText) == 0x000000, "Member 'FortPickup_GetInteractText::InteractText' has a wrong offset!");
static_assert(offsetof(FortPickup_GetInteractText, ReturnValue) == 0x000018, "Member 'FortPickup_GetInteractText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPickup.TossPickup
// 0x0020 (0x0020 - 0x0000)
struct FortPickup_TossPickup final
{
public:
	struct FVector                                FinalLocation;                                     // 0x0000(0x000C)(ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPawn*                              ItemOwner;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OverrideMaxStackCount;                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bToss;                                             // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPickup_TossPickup) == 0x000008, "Wrong alignment on FortPickup_TossPickup");
static_assert(sizeof(FortPickup_TossPickup) == 0x000020, "Wrong size on FortPickup_TossPickup");
static_assert(offsetof(FortPickup_TossPickup, FinalLocation) == 0x000000, "Member 'FortPickup_TossPickup::FinalLocation' has a wrong offset!");
static_assert(offsetof(FortPickup_TossPickup, ItemOwner) == 0x000010, "Member 'FortPickup_TossPickup::ItemOwner' has a wrong offset!");
static_assert(offsetof(FortPickup_TossPickup, OverrideMaxStackCount) == 0x000018, "Member 'FortPickup_TossPickup::OverrideMaxStackCount' has a wrong offset!");
static_assert(offsetof(FortPickup_TossPickup, bToss) == 0x00001C, "Member 'FortPickup_TossPickup::bToss' has a wrong offset!");

// Function FortniteGame.FortPickup.PickedUp
// 0x0001 (0x0001 - 0x0000)
struct FortPickup_PickedUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPickup_PickedUp) == 0x000001, "Wrong alignment on FortPickup_PickedUp");
static_assert(sizeof(FortPickup_PickedUp) == 0x000001, "Wrong size on FortPickup_PickedUp");
static_assert(offsetof(FortPickup_PickedUp, ReturnValue) == 0x000000, "Member 'FortPickup_PickedUp::ReturnValue' has a wrong offset!");

// Function FortniteGame.AutomationPerfMonitorManager.GetPerfMonitorInstance
// 0x0008 (0x0008 - 0x0000)
struct AutomationPerfMonitorManager_GetPerfMonitorInstance final
{
public:
	class UAutomationPerfMonitorManager*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomationPerfMonitorManager_GetPerfMonitorInstance) == 0x000008, "Wrong alignment on AutomationPerfMonitorManager_GetPerfMonitorInstance");
static_assert(sizeof(AutomationPerfMonitorManager_GetPerfMonitorInstance) == 0x000008, "Wrong size on AutomationPerfMonitorManager_GetPerfMonitorInstance");
static_assert(offsetof(AutomationPerfMonitorManager_GetPerfMonitorInstance, ReturnValue) == 0x000000, "Member 'AutomationPerfMonitorManager_GetPerfMonitorInstance::ReturnValue' has a wrong offset!");

// Function FortniteGame.AutomationPerfMonitorManager.GetStatAverage
// 0x0018 (0x0018 - 0x0000)
struct AutomationPerfMonitorManager_GetStatAverage final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AutomationPerfMonitorManager_GetStatAverage) == 0x000008, "Wrong alignment on AutomationPerfMonitorManager_GetStatAverage");
static_assert(sizeof(AutomationPerfMonitorManager_GetStatAverage) == 0x000018, "Wrong size on AutomationPerfMonitorManager_GetStatAverage");
static_assert(offsetof(AutomationPerfMonitorManager_GetStatAverage, StatName) == 0x000000, "Member 'AutomationPerfMonitorManager_GetStatAverage::StatName' has a wrong offset!");
static_assert(offsetof(AutomationPerfMonitorManager_GetStatAverage, ReturnValue) == 0x000010, "Member 'AutomationPerfMonitorManager_GetStatAverage::ReturnValue' has a wrong offset!");

// Function FortniteGame.AutomationPerfMonitorManager.IsRecordingFTestPerf
// 0x0001 (0x0001 - 0x0000)
struct AutomationPerfMonitorManager_IsRecordingFTestPerf final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomationPerfMonitorManager_IsRecordingFTestPerf) == 0x000001, "Wrong alignment on AutomationPerfMonitorManager_IsRecordingFTestPerf");
static_assert(sizeof(AutomationPerfMonitorManager_IsRecordingFTestPerf) == 0x000001, "Wrong size on AutomationPerfMonitorManager_IsRecordingFTestPerf");
static_assert(offsetof(AutomationPerfMonitorManager_IsRecordingFTestPerf, ReturnValue) == 0x000000, "Member 'AutomationPerfMonitorManager_IsRecordingFTestPerf::ReturnValue' has a wrong offset!");

// Function FortniteGame.AutomationPerfMonitorManager.StartRecordingFTestPerf
// 0x0010 (0x0010 - 0x0000)
struct AutomationPerfMonitorManager_StartRecordingFTestPerf final
{
public:
	TArray<class FString>                         StatsToRecord;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomationPerfMonitorManager_StartRecordingFTestPerf) == 0x000008, "Wrong alignment on AutomationPerfMonitorManager_StartRecordingFTestPerf");
static_assert(sizeof(AutomationPerfMonitorManager_StartRecordingFTestPerf) == 0x000010, "Wrong size on AutomationPerfMonitorManager_StartRecordingFTestPerf");
static_assert(offsetof(AutomationPerfMonitorManager_StartRecordingFTestPerf, StatsToRecord) == 0x000000, "Member 'AutomationPerfMonitorManager_StartRecordingFTestPerf::StatsToRecord' has a wrong offset!");

// Function FortniteGame.FortAnimInstance.AnimNotify_LeftFootStep
// 0x0008 (0x0008 - 0x0000)
struct FortAnimInstance_AnimNotify_LeftFootStep final
{
public:
	const class UAnimNotify*                      Notify;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAnimInstance_AnimNotify_LeftFootStep) == 0x000008, "Wrong alignment on FortAnimInstance_AnimNotify_LeftFootStep");
static_assert(sizeof(FortAnimInstance_AnimNotify_LeftFootStep) == 0x000008, "Wrong size on FortAnimInstance_AnimNotify_LeftFootStep");
static_assert(offsetof(FortAnimInstance_AnimNotify_LeftFootStep, Notify) == 0x000000, "Member 'FortAnimInstance_AnimNotify_LeftFootStep::Notify' has a wrong offset!");

// Function FortniteGame.FortAnimInstance.AnimNotify_RightFootStep
// 0x0008 (0x0008 - 0x0000)
struct FortAnimInstance_AnimNotify_RightFootStep final
{
public:
	const class UAnimNotify*                      Notify;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAnimInstance_AnimNotify_RightFootStep) == 0x000008, "Wrong alignment on FortAnimInstance_AnimNotify_RightFootStep");
static_assert(sizeof(FortAnimInstance_AnimNotify_RightFootStep) == 0x000008, "Wrong size on FortAnimInstance_AnimNotify_RightFootStep");
static_assert(offsetof(FortAnimInstance_AnimNotify_RightFootStep, Notify) == 0x000000, "Member 'FortAnimInstance_AnimNotify_RightFootStep::Notify' has a wrong offset!");

// Function FortniteGame.FortAnimInstance.TryGetFortAIPawn
// 0x0008 (0x0008 - 0x0000)
struct FortAnimInstance_TryGetFortAIPawn final
{
public:
	class AFortAIPawn*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAnimInstance_TryGetFortAIPawn) == 0x000008, "Wrong alignment on FortAnimInstance_TryGetFortAIPawn");
static_assert(sizeof(FortAnimInstance_TryGetFortAIPawn) == 0x000008, "Wrong size on FortAnimInstance_TryGetFortAIPawn");
static_assert(offsetof(FortAnimInstance_TryGetFortAIPawn, ReturnValue) == 0x000000, "Member 'FortAnimInstance_TryGetFortAIPawn::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAnimInstance.TryGetFortPawn
// 0x0008 (0x0008 - 0x0000)
struct FortAnimInstance_TryGetFortPawn final
{
public:
	class AFortPawn*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAnimInstance_TryGetFortPawn) == 0x000008, "Wrong alignment on FortAnimInstance_TryGetFortPawn");
static_assert(sizeof(FortAnimInstance_TryGetFortPawn) == 0x000008, "Wrong size on FortAnimInstance_TryGetFortPawn");
static_assert(offsetof(FortAnimInstance_TryGetFortPawn, ReturnValue) == 0x000000, "Member 'FortAnimInstance_TryGetFortPawn::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerAnimInstance.AnimNotify_PlayFireFX
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerAnimInstance_AnimNotify_PlayFireFX final
{
public:
	const class UAnimNotify*                      Notify;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAnimInstance_AnimNotify_PlayFireFX) == 0x000008, "Wrong alignment on FortPlayerAnimInstance_AnimNotify_PlayFireFX");
static_assert(sizeof(FortPlayerAnimInstance_AnimNotify_PlayFireFX) == 0x000008, "Wrong size on FortPlayerAnimInstance_AnimNotify_PlayFireFX");
static_assert(offsetof(FortPlayerAnimInstance_AnimNotify_PlayFireFX, Notify) == 0x000000, "Member 'FortPlayerAnimInstance_AnimNotify_PlayFireFX::Notify' has a wrong offset!");

// Function FortniteGame.FortPlayerAnimInstance.AnimNotify_PlaySecondaryFireFX
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerAnimInstance_AnimNotify_PlaySecondaryFireFX final
{
public:
	const class UAnimNotify*                      Notify;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAnimInstance_AnimNotify_PlaySecondaryFireFX) == 0x000008, "Wrong alignment on FortPlayerAnimInstance_AnimNotify_PlaySecondaryFireFX");
static_assert(sizeof(FortPlayerAnimInstance_AnimNotify_PlaySecondaryFireFX) == 0x000008, "Wrong size on FortPlayerAnimInstance_AnimNotify_PlaySecondaryFireFX");
static_assert(offsetof(FortPlayerAnimInstance_AnimNotify_PlaySecondaryFireFX, Notify) == 0x000000, "Member 'FortPlayerAnimInstance_AnimNotify_PlaySecondaryFireFX::Notify' has a wrong offset!");

// Function FortniteGame.FortPlayerAnimInstance.AnimNotify_StopFireFX
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerAnimInstance_AnimNotify_StopFireFX final
{
public:
	const class UAnimNotify*                      Notify;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAnimInstance_AnimNotify_StopFireFX) == 0x000008, "Wrong alignment on FortPlayerAnimInstance_AnimNotify_StopFireFX");
static_assert(sizeof(FortPlayerAnimInstance_AnimNotify_StopFireFX) == 0x000008, "Wrong size on FortPlayerAnimInstance_AnimNotify_StopFireFX");
static_assert(offsetof(FortPlayerAnimInstance_AnimNotify_StopFireFX, Notify) == 0x000000, "Member 'FortPlayerAnimInstance_AnimNotify_StopFireFX::Notify' has a wrong offset!");

// Function FortniteGame.FortPlayerAnimInstance.OnPlayMontageFromGameplayTagQuery
// 0x0050 (0x0050 - 0x0000)
struct FortPlayerAnimInstance_OnPlayMontageFromGameplayTagQuery final
{
public:
	struct FGameplayTagQuery                      MatchingQuery;                                     // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UAnimMontage*                           MontagePlaying;                                    // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAnimInstance_OnPlayMontageFromGameplayTagQuery) == 0x000008, "Wrong alignment on FortPlayerAnimInstance_OnPlayMontageFromGameplayTagQuery");
static_assert(sizeof(FortPlayerAnimInstance_OnPlayMontageFromGameplayTagQuery) == 0x000050, "Wrong size on FortPlayerAnimInstance_OnPlayMontageFromGameplayTagQuery");
static_assert(offsetof(FortPlayerAnimInstance_OnPlayMontageFromGameplayTagQuery, MatchingQuery) == 0x000000, "Member 'FortPlayerAnimInstance_OnPlayMontageFromGameplayTagQuery::MatchingQuery' has a wrong offset!");
static_assert(offsetof(FortPlayerAnimInstance_OnPlayMontageFromGameplayTagQuery, MontagePlaying) == 0x000048, "Member 'FortPlayerAnimInstance_OnPlayMontageFromGameplayTagQuery::MontagePlaying' has a wrong offset!");

// Function FortniteGame.FortPlayerAnimInstance.GetCardinalDirectionFromAngle
// 0x000C (0x000C - 0x0000)
struct FortPlayerAnimInstance_GetCardinalDirectionFromAngle final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeadZoneAngle;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCardinalDirection                        ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerAnimInstance_GetCardinalDirectionFromAngle) == 0x000004, "Wrong alignment on FortPlayerAnimInstance_GetCardinalDirectionFromAngle");
static_assert(sizeof(FortPlayerAnimInstance_GetCardinalDirectionFromAngle) == 0x00000C, "Wrong size on FortPlayerAnimInstance_GetCardinalDirectionFromAngle");
static_assert(offsetof(FortPlayerAnimInstance_GetCardinalDirectionFromAngle, Angle) == 0x000000, "Member 'FortPlayerAnimInstance_GetCardinalDirectionFromAngle::Angle' has a wrong offset!");
static_assert(offsetof(FortPlayerAnimInstance_GetCardinalDirectionFromAngle, DeadZoneAngle) == 0x000004, "Member 'FortPlayerAnimInstance_GetCardinalDirectionFromAngle::DeadZoneAngle' has a wrong offset!");
static_assert(offsetof(FortPlayerAnimInstance_GetCardinalDirectionFromAngle, ReturnValue) == 0x000008, "Member 'FortPlayerAnimInstance_GetCardinalDirectionFromAngle::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerAnimInstance.GetRelativeAngle
// 0x000C (0x000C - 0x0000)
struct FortPlayerAnimInstance_GetRelativeAngle final
{
public:
	float                                         MovementAngle;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCardinalDirection                        Direction;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMirrorBackside;                                   // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAnimInstance_GetRelativeAngle) == 0x000004, "Wrong alignment on FortPlayerAnimInstance_GetRelativeAngle");
static_assert(sizeof(FortPlayerAnimInstance_GetRelativeAngle) == 0x00000C, "Wrong size on FortPlayerAnimInstance_GetRelativeAngle");
static_assert(offsetof(FortPlayerAnimInstance_GetRelativeAngle, MovementAngle) == 0x000000, "Member 'FortPlayerAnimInstance_GetRelativeAngle::MovementAngle' has a wrong offset!");
static_assert(offsetof(FortPlayerAnimInstance_GetRelativeAngle, Direction) == 0x000004, "Member 'FortPlayerAnimInstance_GetRelativeAngle::Direction' has a wrong offset!");
static_assert(offsetof(FortPlayerAnimInstance_GetRelativeAngle, bMirrorBackside) == 0x000005, "Member 'FortPlayerAnimInstance_GetRelativeAngle::bMirrorBackside' has a wrong offset!");
static_assert(offsetof(FortPlayerAnimInstance_GetRelativeAngle, ReturnValue) == 0x000008, "Member 'FortPlayerAnimInstance_GetRelativeAngle::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.AttachBuildingActorToMe
// 0x0010 (0x0010 - 0x0000)
struct BuildingSMActor_AttachBuildingActorToMe final
{
public:
	class ABuildingSMActor*                       ActorToAttach;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceAttachment;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingSMActor_AttachBuildingActorToMe) == 0x000008, "Wrong alignment on BuildingSMActor_AttachBuildingActorToMe");
static_assert(sizeof(BuildingSMActor_AttachBuildingActorToMe) == 0x000010, "Wrong size on BuildingSMActor_AttachBuildingActorToMe");
static_assert(offsetof(BuildingSMActor_AttachBuildingActorToMe, ActorToAttach) == 0x000000, "Member 'BuildingSMActor_AttachBuildingActorToMe::ActorToAttach' has a wrong offset!");
static_assert(offsetof(BuildingSMActor_AttachBuildingActorToMe, bForceAttachment) == 0x000008, "Member 'BuildingSMActor_AttachBuildingActorToMe::bForceAttachment' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.DetachBuildingActorFromMe
// 0x0010 (0x0010 - 0x0000)
struct BuildingSMActor_DetachBuildingActorFromMe final
{
public:
	class ABuildingSMActor*                       ActorToAttach;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBeingDestroyed;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingSMActor_DetachBuildingActorFromMe) == 0x000008, "Wrong alignment on BuildingSMActor_DetachBuildingActorFromMe");
static_assert(sizeof(BuildingSMActor_DetachBuildingActorFromMe) == 0x000010, "Wrong size on BuildingSMActor_DetachBuildingActorFromMe");
static_assert(offsetof(BuildingSMActor_DetachBuildingActorFromMe, ActorToAttach) == 0x000000, "Member 'BuildingSMActor_DetachBuildingActorFromMe::ActorToAttach' has a wrong offset!");
static_assert(offsetof(BuildingSMActor_DetachBuildingActorFromMe, bBeingDestroyed) == 0x000008, "Member 'BuildingSMActor_DetachBuildingActorFromMe::bBeingDestroyed' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.EditorOnlyRemoveInstanceMaterialScalarParameter
// 0x0008 (0x0008 - 0x0000)
struct BuildingSMActor_EditorOnlyRemoveInstanceMaterialScalarParameter final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSMActor_EditorOnlyRemoveInstanceMaterialScalarParameter) == 0x000004, "Wrong alignment on BuildingSMActor_EditorOnlyRemoveInstanceMaterialScalarParameter");
static_assert(sizeof(BuildingSMActor_EditorOnlyRemoveInstanceMaterialScalarParameter) == 0x000008, "Wrong size on BuildingSMActor_EditorOnlyRemoveInstanceMaterialScalarParameter");
static_assert(offsetof(BuildingSMActor_EditorOnlyRemoveInstanceMaterialScalarParameter, ParamName) == 0x000000, "Member 'BuildingSMActor_EditorOnlyRemoveInstanceMaterialScalarParameter::ParamName' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.EditorOnlyRemoveInstanceMaterialTextureParameter
// 0x0008 (0x0008 - 0x0000)
struct BuildingSMActor_EditorOnlyRemoveInstanceMaterialTextureParameter final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSMActor_EditorOnlyRemoveInstanceMaterialTextureParameter) == 0x000004, "Wrong alignment on BuildingSMActor_EditorOnlyRemoveInstanceMaterialTextureParameter");
static_assert(sizeof(BuildingSMActor_EditorOnlyRemoveInstanceMaterialTextureParameter) == 0x000008, "Wrong size on BuildingSMActor_EditorOnlyRemoveInstanceMaterialTextureParameter");
static_assert(offsetof(BuildingSMActor_EditorOnlyRemoveInstanceMaterialTextureParameter, ParamName) == 0x000000, "Member 'BuildingSMActor_EditorOnlyRemoveInstanceMaterialTextureParameter::ParamName' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.EditorOnlyRemoveInstanceMaterialVectorParameter
// 0x0008 (0x0008 - 0x0000)
struct BuildingSMActor_EditorOnlyRemoveInstanceMaterialVectorParameter final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSMActor_EditorOnlyRemoveInstanceMaterialVectorParameter) == 0x000004, "Wrong alignment on BuildingSMActor_EditorOnlyRemoveInstanceMaterialVectorParameter");
static_assert(sizeof(BuildingSMActor_EditorOnlyRemoveInstanceMaterialVectorParameter) == 0x000008, "Wrong size on BuildingSMActor_EditorOnlyRemoveInstanceMaterialVectorParameter");
static_assert(offsetof(BuildingSMActor_EditorOnlyRemoveInstanceMaterialVectorParameter, ParamName) == 0x000000, "Member 'BuildingSMActor_EditorOnlyRemoveInstanceMaterialVectorParameter::ParamName' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.EditorOnlySetInstanceMaterialScalarParameter
// 0x0010 (0x0010 - 0x0000)
struct BuildingSMActor_EditorOnlySetInstanceMaterialScalarParameter final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingSMActor_EditorOnlySetInstanceMaterialScalarParameter) == 0x000004, "Wrong alignment on BuildingSMActor_EditorOnlySetInstanceMaterialScalarParameter");
static_assert(sizeof(BuildingSMActor_EditorOnlySetInstanceMaterialScalarParameter) == 0x000010, "Wrong size on BuildingSMActor_EditorOnlySetInstanceMaterialScalarParameter");
static_assert(offsetof(BuildingSMActor_EditorOnlySetInstanceMaterialScalarParameter, ParamName) == 0x000000, "Member 'BuildingSMActor_EditorOnlySetInstanceMaterialScalarParameter::ParamName' has a wrong offset!");
static_assert(offsetof(BuildingSMActor_EditorOnlySetInstanceMaterialScalarParameter, Value) == 0x000008, "Member 'BuildingSMActor_EditorOnlySetInstanceMaterialScalarParameter::Value' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.EditorOnlySetInstanceMaterialTextureParameter
// 0x0010 (0x0010 - 0x0000)
struct BuildingSMActor_EditorOnlySetInstanceMaterialTextureParameter final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               Value;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSMActor_EditorOnlySetInstanceMaterialTextureParameter) == 0x000008, "Wrong alignment on BuildingSMActor_EditorOnlySetInstanceMaterialTextureParameter");
static_assert(sizeof(BuildingSMActor_EditorOnlySetInstanceMaterialTextureParameter) == 0x000010, "Wrong size on BuildingSMActor_EditorOnlySetInstanceMaterialTextureParameter");
static_assert(offsetof(BuildingSMActor_EditorOnlySetInstanceMaterialTextureParameter, ParamName) == 0x000000, "Member 'BuildingSMActor_EditorOnlySetInstanceMaterialTextureParameter::ParamName' has a wrong offset!");
static_assert(offsetof(BuildingSMActor_EditorOnlySetInstanceMaterialTextureParameter, Value) == 0x000008, "Member 'BuildingSMActor_EditorOnlySetInstanceMaterialTextureParameter::Value' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.EditorOnlySetInstanceMaterialVectorParameter
// 0x0018 (0x0018 - 0x0000)
struct BuildingSMActor_EditorOnlySetInstanceMaterialVectorParameter final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Value;                                             // 0x0008(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSMActor_EditorOnlySetInstanceMaterialVectorParameter) == 0x000004, "Wrong alignment on BuildingSMActor_EditorOnlySetInstanceMaterialVectorParameter");
static_assert(sizeof(BuildingSMActor_EditorOnlySetInstanceMaterialVectorParameter) == 0x000018, "Wrong size on BuildingSMActor_EditorOnlySetInstanceMaterialVectorParameter");
static_assert(offsetof(BuildingSMActor_EditorOnlySetInstanceMaterialVectorParameter, ParamName) == 0x000000, "Member 'BuildingSMActor_EditorOnlySetInstanceMaterialVectorParameter::ParamName' has a wrong offset!");
static_assert(offsetof(BuildingSMActor_EditorOnlySetInstanceMaterialVectorParameter, Value) == 0x000008, "Member 'BuildingSMActor_EditorOnlySetInstanceMaterialVectorParameter::Value' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.GameplayCue_Abilities_Activation_Generic_BannerWallBuff1
// 0x00C0 (0x00C0 - 0x0000)
struct BuildingSMActor_GameplayCue_Abilities_Activation_Generic_BannerWallBuff1 final
{
public:
	EGameplayCueEvent                             EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00B8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSMActor_GameplayCue_Abilities_Activation_Generic_BannerWallBuff1) == 0x000008, "Wrong alignment on BuildingSMActor_GameplayCue_Abilities_Activation_Generic_BannerWallBuff1");
static_assert(sizeof(BuildingSMActor_GameplayCue_Abilities_Activation_Generic_BannerWallBuff1) == 0x0000C0, "Wrong size on BuildingSMActor_GameplayCue_Abilities_Activation_Generic_BannerWallBuff1");
static_assert(offsetof(BuildingSMActor_GameplayCue_Abilities_Activation_Generic_BannerWallBuff1, EventType) == 0x000000, "Member 'BuildingSMActor_GameplayCue_Abilities_Activation_Generic_BannerWallBuff1::EventType' has a wrong offset!");
static_assert(offsetof(BuildingSMActor_GameplayCue_Abilities_Activation_Generic_BannerWallBuff1, Parameters) == 0x000008, "Member 'BuildingSMActor_GameplayCue_Abilities_Activation_Generic_BannerWallBuff1::Parameters' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.GameplayCue_Abilities_Activation_Generic_BannerWallBuff2
// 0x00C0 (0x00C0 - 0x0000)
struct BuildingSMActor_GameplayCue_Abilities_Activation_Generic_BannerWallBuff2 final
{
public:
	EGameplayCueEvent                             EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00B8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSMActor_GameplayCue_Abilities_Activation_Generic_BannerWallBuff2) == 0x000008, "Wrong alignment on BuildingSMActor_GameplayCue_Abilities_Activation_Generic_BannerWallBuff2");
static_assert(sizeof(BuildingSMActor_GameplayCue_Abilities_Activation_Generic_BannerWallBuff2) == 0x0000C0, "Wrong size on BuildingSMActor_GameplayCue_Abilities_Activation_Generic_BannerWallBuff2");
static_assert(offsetof(BuildingSMActor_GameplayCue_Abilities_Activation_Generic_BannerWallBuff2, EventType) == 0x000000, "Member 'BuildingSMActor_GameplayCue_Abilities_Activation_Generic_BannerWallBuff2::EventType' has a wrong offset!");
static_assert(offsetof(BuildingSMActor_GameplayCue_Abilities_Activation_Generic_BannerWallBuff2, Parameters) == 0x000008, "Member 'BuildingSMActor_GameplayCue_Abilities_Activation_Generic_BannerWallBuff2::Parameters' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.GetAnimatingMID
// 0x0010 (0x0010 - 0x0000)
struct BuildingSMActor_GetAnimatingMID final
{
public:
	int32                                         ElementIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSMActor_GetAnimatingMID) == 0x000008, "Wrong alignment on BuildingSMActor_GetAnimatingMID");
static_assert(sizeof(BuildingSMActor_GetAnimatingMID) == 0x000010, "Wrong size on BuildingSMActor_GetAnimatingMID");
static_assert(offsetof(BuildingSMActor_GetAnimatingMID, ElementIndex) == 0x000000, "Member 'BuildingSMActor_GetAnimatingMID::ElementIndex' has a wrong offset!");
static_assert(offsetof(BuildingSMActor_GetAnimatingMID, ReturnValue) == 0x000008, "Member 'BuildingSMActor_GetAnimatingMID::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.GetAttachedBuildingActors
// 0x0010 (0x0010 - 0x0000)
struct BuildingSMActor_GetAttachedBuildingActors final
{
public:
	TArray<class ABuildingSMActor*>               ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSMActor_GetAttachedBuildingActors) == 0x000008, "Wrong alignment on BuildingSMActor_GetAttachedBuildingActors");
static_assert(sizeof(BuildingSMActor_GetAttachedBuildingActors) == 0x000010, "Wrong size on BuildingSMActor_GetAttachedBuildingActors");
static_assert(offsetof(BuildingSMActor_GetAttachedBuildingActors, ReturnValue) == 0x000000, "Member 'BuildingSMActor_GetAttachedBuildingActors::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.GetIntenseWindMaterialsForPreview
// 0x0018 (0x0018 - 0x0000)
struct BuildingSMActor_GetIntenseWindMaterialsForPreview final
{
public:
	TArray<class UMaterialInterface*>             Materials;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingSMActor_GetIntenseWindMaterialsForPreview) == 0x000008, "Wrong alignment on BuildingSMActor_GetIntenseWindMaterialsForPreview");
static_assert(sizeof(BuildingSMActor_GetIntenseWindMaterialsForPreview) == 0x000018, "Wrong size on BuildingSMActor_GetIntenseWindMaterialsForPreview");
static_assert(offsetof(BuildingSMActor_GetIntenseWindMaterialsForPreview, Materials) == 0x000000, "Member 'BuildingSMActor_GetIntenseWindMaterialsForPreview::Materials' has a wrong offset!");
static_assert(offsetof(BuildingSMActor_GetIntenseWindMaterialsForPreview, ReturnValue) == 0x000010, "Member 'BuildingSMActor_GetIntenseWindMaterialsForPreview::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.GetReplacementDestructionReason
// 0x0001 (0x0001 - 0x0000)
struct BuildingSMActor_GetReplacementDestructionReason final
{
public:
	EBuildingReplacementType                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSMActor_GetReplacementDestructionReason) == 0x000001, "Wrong alignment on BuildingSMActor_GetReplacementDestructionReason");
static_assert(sizeof(BuildingSMActor_GetReplacementDestructionReason) == 0x000001, "Wrong size on BuildingSMActor_GetReplacementDestructionReason");
static_assert(offsetof(BuildingSMActor_GetReplacementDestructionReason, ReturnValue) == 0x000000, "Member 'BuildingSMActor_GetReplacementDestructionReason::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.MulticastRequestBuildingAnimation
// 0x0001 (0x0001 - 0x0000)
struct BuildingSMActor_MulticastRequestBuildingAnimation final
{
public:
	EBuildingAnim                                 RequestedAnimation;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSMActor_MulticastRequestBuildingAnimation) == 0x000001, "Wrong alignment on BuildingSMActor_MulticastRequestBuildingAnimation");
static_assert(sizeof(BuildingSMActor_MulticastRequestBuildingAnimation) == 0x000001, "Wrong size on BuildingSMActor_MulticastRequestBuildingAnimation");
static_assert(offsetof(BuildingSMActor_MulticastRequestBuildingAnimation, RequestedAnimation) == 0x000000, "Member 'BuildingSMActor_MulticastRequestBuildingAnimation::RequestedAnimation' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.OnAttachToBuilding
// 0x0008 (0x0008 - 0x0000)
struct BuildingSMActor_OnAttachToBuilding final
{
public:
	class ABuildingSMActor*                       AttachedToBuilding;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSMActor_OnAttachToBuilding) == 0x000008, "Wrong alignment on BuildingSMActor_OnAttachToBuilding");
static_assert(sizeof(BuildingSMActor_OnAttachToBuilding) == 0x000008, "Wrong size on BuildingSMActor_OnAttachToBuilding");
static_assert(offsetof(BuildingSMActor_OnAttachToBuilding, AttachedToBuilding) == 0x000000, "Member 'BuildingSMActor_OnAttachToBuilding::AttachedToBuilding' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.OnBounceAnimationUpdate
// 0x0030 (0x0030 - 0x0000)
struct BuildingSMActor_OnBounceAnimationUpdate final
{
public:
	struct FFortBounceData                        Data;                                              // 0x0000(0x0030)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSMActor_OnBounceAnimationUpdate) == 0x000004, "Wrong alignment on BuildingSMActor_OnBounceAnimationUpdate");
static_assert(sizeof(BuildingSMActor_OnBounceAnimationUpdate) == 0x000030, "Wrong size on BuildingSMActor_OnBounceAnimationUpdate");
static_assert(offsetof(BuildingSMActor_OnBounceAnimationUpdate, Data) == 0x000000, "Member 'BuildingSMActor_OnBounceAnimationUpdate::Data' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.OnDetachFromBuilding
// 0x0010 (0x0010 - 0x0000)
struct BuildingSMActor_OnDetachFromBuilding final
{
public:
	class ABuildingSMActor*                       AttachedToBuilding;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBeingDestroyed;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingSMActor_OnDetachFromBuilding) == 0x000008, "Wrong alignment on BuildingSMActor_OnDetachFromBuilding");
static_assert(sizeof(BuildingSMActor_OnDetachFromBuilding) == 0x000010, "Wrong size on BuildingSMActor_OnDetachFromBuilding");
static_assert(offsetof(BuildingSMActor_OnDetachFromBuilding, AttachedToBuilding) == 0x000000, "Member 'BuildingSMActor_OnDetachFromBuilding::AttachedToBuilding' has a wrong offset!");
static_assert(offsetof(BuildingSMActor_OnDetachFromBuilding, bBeingDestroyed) == 0x000008, "Member 'BuildingSMActor_OnDetachFromBuilding::bBeingDestroyed' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.OnRep_ResourceType
// 0x0001 (0x0001 - 0x0000)
struct BuildingSMActor_OnRep_ResourceType final
{
public:
	EFortResourceType                             OldType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSMActor_OnRep_ResourceType) == 0x000001, "Wrong alignment on BuildingSMActor_OnRep_ResourceType");
static_assert(sizeof(BuildingSMActor_OnRep_ResourceType) == 0x000001, "Wrong size on BuildingSMActor_OnRep_ResourceType");
static_assert(offsetof(BuildingSMActor_OnRep_ResourceType, OldType) == 0x000000, "Member 'BuildingSMActor_OnRep_ResourceType::OldType' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.RepairBuilding
// 0x0010 (0x0010 - 0x0000)
struct BuildingSMActor_RepairBuilding final
{
public:
	class AFortPlayerController*                  RepairingController;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResourcesSpent;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingSMActor_RepairBuilding) == 0x000008, "Wrong alignment on BuildingSMActor_RepairBuilding");
static_assert(sizeof(BuildingSMActor_RepairBuilding) == 0x000010, "Wrong size on BuildingSMActor_RepairBuilding");
static_assert(offsetof(BuildingSMActor_RepairBuilding, RepairingController) == 0x000000, "Member 'BuildingSMActor_RepairBuilding::RepairingController' has a wrong offset!");
static_assert(offsetof(BuildingSMActor_RepairBuilding, ResourcesSpent) == 0x000008, "Member 'BuildingSMActor_RepairBuilding::ResourcesSpent' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.SetMirrored
// 0x0001 (0x0001 - 0x0000)
struct BuildingSMActor_SetMirrored final
{
public:
	bool                                          bIsMirrored;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSMActor_SetMirrored) == 0x000001, "Wrong alignment on BuildingSMActor_SetMirrored");
static_assert(sizeof(BuildingSMActor_SetMirrored) == 0x000001, "Wrong size on BuildingSMActor_SetMirrored");
static_assert(offsetof(BuildingSMActor_SetMirrored, bIsMirrored) == 0x000000, "Member 'BuildingSMActor_SetMirrored::bIsMirrored' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.UpdateDynamicShrinkAndDestroyEffect
// 0x0004 (0x0004 - 0x0000)
struct BuildingSMActor_UpdateDynamicShrinkAndDestroyEffect final
{
public:
	float                                         CurveValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSMActor_UpdateDynamicShrinkAndDestroyEffect) == 0x000004, "Wrong alignment on BuildingSMActor_UpdateDynamicShrinkAndDestroyEffect");
static_assert(sizeof(BuildingSMActor_UpdateDynamicShrinkAndDestroyEffect) == 0x000004, "Wrong size on BuildingSMActor_UpdateDynamicShrinkAndDestroyEffect");
static_assert(offsetof(BuildingSMActor_UpdateDynamicShrinkAndDestroyEffect, CurveValue) == 0x000000, "Member 'BuildingSMActor_UpdateDynamicShrinkAndDestroyEffect::CurveValue' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.UpdateLODOverrideEffect
// 0x0004 (0x0004 - 0x0000)
struct BuildingSMActor_UpdateLODOverrideEffect final
{
public:
	float                                         CurveValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSMActor_UpdateLODOverrideEffect) == 0x000004, "Wrong alignment on BuildingSMActor_UpdateLODOverrideEffect");
static_assert(sizeof(BuildingSMActor_UpdateLODOverrideEffect) == 0x000004, "Wrong size on BuildingSMActor_UpdateLODOverrideEffect");
static_assert(offsetof(BuildingSMActor_UpdateLODOverrideEffect, CurveValue) == 0x000000, "Member 'BuildingSMActor_UpdateLODOverrideEffect::CurveValue' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.UpdateRepairMaterialAnim
// 0x0004 (0x0004 - 0x0000)
struct BuildingSMActor_UpdateRepairMaterialAnim final
{
public:
	float                                         CurveValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSMActor_UpdateRepairMaterialAnim) == 0x000004, "Wrong alignment on BuildingSMActor_UpdateRepairMaterialAnim");
static_assert(sizeof(BuildingSMActor_UpdateRepairMaterialAnim) == 0x000004, "Wrong size on BuildingSMActor_UpdateRepairMaterialAnim");
static_assert(offsetof(BuildingSMActor_UpdateRepairMaterialAnim, CurveValue) == 0x000000, "Member 'BuildingSMActor_UpdateRepairMaterialAnim::CurveValue' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.GetBuildingMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct BuildingSMActor_GetBuildingMeshComponent final
{
public:
	class UStaticMeshComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSMActor_GetBuildingMeshComponent) == 0x000008, "Wrong alignment on BuildingSMActor_GetBuildingMeshComponent");
static_assert(sizeof(BuildingSMActor_GetBuildingMeshComponent) == 0x000008, "Wrong size on BuildingSMActor_GetBuildingMeshComponent");
static_assert(offsetof(BuildingSMActor_GetBuildingMeshComponent, ReturnValue) == 0x000000, "Member 'BuildingSMActor_GetBuildingMeshComponent::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.GetLogicalBuildingIndex
// 0x0004 (0x0004 - 0x0000)
struct BuildingSMActor_GetLogicalBuildingIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSMActor_GetLogicalBuildingIndex) == 0x000004, "Wrong alignment on BuildingSMActor_GetLogicalBuildingIndex");
static_assert(sizeof(BuildingSMActor_GetLogicalBuildingIndex) == 0x000004, "Wrong size on BuildingSMActor_GetLogicalBuildingIndex");
static_assert(offsetof(BuildingSMActor_GetLogicalBuildingIndex, ReturnValue) == 0x000000, "Member 'BuildingSMActor_GetLogicalBuildingIndex::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.GetWindPannerSpeedCurveForPreview
// 0x0008 (0x0008 - 0x0000)
struct BuildingSMActor_GetWindPannerSpeedCurveForPreview final
{
public:
	class UCurveLinearColor*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSMActor_GetWindPannerSpeedCurveForPreview) == 0x000008, "Wrong alignment on BuildingSMActor_GetWindPannerSpeedCurveForPreview");
static_assert(sizeof(BuildingSMActor_GetWindPannerSpeedCurveForPreview) == 0x000008, "Wrong size on BuildingSMActor_GetWindPannerSpeedCurveForPreview");
static_assert(offsetof(BuildingSMActor_GetWindPannerSpeedCurveForPreview, ReturnValue) == 0x000000, "Member 'BuildingSMActor_GetWindPannerSpeedCurveForPreview::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.GetWindSpeedCurveForPreview
// 0x0008 (0x0008 - 0x0000)
struct BuildingSMActor_GetWindSpeedCurveForPreview final
{
public:
	class UCurveLinearColor*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSMActor_GetWindSpeedCurveForPreview) == 0x000008, "Wrong alignment on BuildingSMActor_GetWindSpeedCurveForPreview");
static_assert(sizeof(BuildingSMActor_GetWindSpeedCurveForPreview) == 0x000008, "Wrong size on BuildingSMActor_GetWindSpeedCurveForPreview");
static_assert(offsetof(BuildingSMActor_GetWindSpeedCurveForPreview, ReturnValue) == 0x000000, "Member 'BuildingSMActor_GetWindSpeedCurveForPreview::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.HasDestructionLoot
// 0x0001 (0x0001 - 0x0000)
struct BuildingSMActor_HasDestructionLoot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSMActor_HasDestructionLoot) == 0x000001, "Wrong alignment on BuildingSMActor_HasDestructionLoot");
static_assert(sizeof(BuildingSMActor_HasDestructionLoot) == 0x000001, "Wrong size on BuildingSMActor_HasDestructionLoot");
static_assert(offsetof(BuildingSMActor_HasDestructionLoot, ReturnValue) == 0x000000, "Member 'BuildingSMActor_HasDestructionLoot::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.IsStructurallySupported
// 0x0001 (0x0001 - 0x0000)
struct BuildingSMActor_IsStructurallySupported final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSMActor_IsStructurallySupported) == 0x000001, "Wrong alignment on BuildingSMActor_IsStructurallySupported");
static_assert(sizeof(BuildingSMActor_IsStructurallySupported) == 0x000001, "Wrong size on BuildingSMActor_IsStructurallySupported");
static_assert(offsetof(BuildingSMActor_IsStructurallySupported, ReturnValue) == 0x000000, "Member 'BuildingSMActor_IsStructurallySupported::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.IsSupportedByWorld
// 0x0001 (0x0001 - 0x0000)
struct BuildingSMActor_IsSupportedByWorld final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSMActor_IsSupportedByWorld) == 0x000001, "Wrong alignment on BuildingSMActor_IsSupportedByWorld");
static_assert(sizeof(BuildingSMActor_IsSupportedByWorld) == 0x000001, "Wrong size on BuildingSMActor_IsSupportedByWorld");
static_assert(offsetof(BuildingSMActor_IsSupportedByWorld, ReturnValue) == 0x000000, "Member 'BuildingSMActor_IsSupportedByWorld::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.WillRegisterWithStructuralGrid
// 0x0001 (0x0001 - 0x0000)
struct BuildingSMActor_WillRegisterWithStructuralGrid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSMActor_WillRegisterWithStructuralGrid) == 0x000001, "Wrong alignment on BuildingSMActor_WillRegisterWithStructuralGrid");
static_assert(sizeof(BuildingSMActor_WillRegisterWithStructuralGrid) == 0x000001, "Wrong size on BuildingSMActor_WillRegisterWithStructuralGrid");
static_assert(offsetof(BuildingSMActor_WillRegisterWithStructuralGrid, ReturnValue) == 0x000000, "Member 'BuildingSMActor_WillRegisterWithStructuralGrid::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingGameplayActor.DisableAbilityDeliveryInfo
// 0x0008 (0x0008 - 0x0000)
struct BuildingGameplayActor_DisableAbilityDeliveryInfo final
{
public:
	struct FGameplayTag                           BucketTag;                                         // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingGameplayActor_DisableAbilityDeliveryInfo) == 0x000008, "Wrong alignment on BuildingGameplayActor_DisableAbilityDeliveryInfo");
static_assert(sizeof(BuildingGameplayActor_DisableAbilityDeliveryInfo) == 0x000008, "Wrong size on BuildingGameplayActor_DisableAbilityDeliveryInfo");
static_assert(offsetof(BuildingGameplayActor_DisableAbilityDeliveryInfo, BucketTag) == 0x000000, "Member 'BuildingGameplayActor_DisableAbilityDeliveryInfo::BucketTag' has a wrong offset!");

// Function FortniteGame.BuildingGameplayActor.EnableAbilityDeliveryInfo
// 0x0008 (0x0008 - 0x0000)
struct BuildingGameplayActor_EnableAbilityDeliveryInfo final
{
public:
	struct FGameplayTag                           BucketTag;                                         // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingGameplayActor_EnableAbilityDeliveryInfo) == 0x000008, "Wrong alignment on BuildingGameplayActor_EnableAbilityDeliveryInfo");
static_assert(sizeof(BuildingGameplayActor_EnableAbilityDeliveryInfo) == 0x000008, "Wrong size on BuildingGameplayActor_EnableAbilityDeliveryInfo");
static_assert(offsetof(BuildingGameplayActor_EnableAbilityDeliveryInfo, BucketTag) == 0x000000, "Member 'BuildingGameplayActor_EnableAbilityDeliveryInfo::BucketTag' has a wrong offset!");

// Function FortniteGame.BuildingGameplayActor.K2_AddGameplayCue
// 0x0020 (0x0020 - 0x0000)
struct BuildingGameplayActor_K2_AddGameplayCue final
{
public:
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           Context;                                           // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingGameplayActor_K2_AddGameplayCue) == 0x000008, "Wrong alignment on BuildingGameplayActor_K2_AddGameplayCue");
static_assert(sizeof(BuildingGameplayActor_K2_AddGameplayCue) == 0x000020, "Wrong size on BuildingGameplayActor_K2_AddGameplayCue");
static_assert(offsetof(BuildingGameplayActor_K2_AddGameplayCue, GameplayCueTag) == 0x000000, "Member 'BuildingGameplayActor_K2_AddGameplayCue::GameplayCueTag' has a wrong offset!");
static_assert(offsetof(BuildingGameplayActor_K2_AddGameplayCue, Context) == 0x000008, "Member 'BuildingGameplayActor_K2_AddGameplayCue::Context' has a wrong offset!");

// Function FortniteGame.BuildingGameplayActor.K2_ExecuteGameplayCue
// 0x0020 (0x0020 - 0x0000)
struct BuildingGameplayActor_K2_ExecuteGameplayCue final
{
public:
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           Context;                                           // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingGameplayActor_K2_ExecuteGameplayCue) == 0x000008, "Wrong alignment on BuildingGameplayActor_K2_ExecuteGameplayCue");
static_assert(sizeof(BuildingGameplayActor_K2_ExecuteGameplayCue) == 0x000020, "Wrong size on BuildingGameplayActor_K2_ExecuteGameplayCue");
static_assert(offsetof(BuildingGameplayActor_K2_ExecuteGameplayCue, GameplayCueTag) == 0x000000, "Member 'BuildingGameplayActor_K2_ExecuteGameplayCue::GameplayCueTag' has a wrong offset!");
static_assert(offsetof(BuildingGameplayActor_K2_ExecuteGameplayCue, Context) == 0x000008, "Member 'BuildingGameplayActor_K2_ExecuteGameplayCue::Context' has a wrong offset!");

// Function FortniteGame.BuildingGameplayActor.K2_ExecuteGameplayCueWithParams
// 0x00C0 (0x00C0 - 0x0000)
struct BuildingGameplayActor_K2_ExecuteGameplayCueWithParams final
{
public:
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 GameplayCueParameters;                             // 0x0008(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingGameplayActor_K2_ExecuteGameplayCueWithParams) == 0x000008, "Wrong alignment on BuildingGameplayActor_K2_ExecuteGameplayCueWithParams");
static_assert(sizeof(BuildingGameplayActor_K2_ExecuteGameplayCueWithParams) == 0x0000C0, "Wrong size on BuildingGameplayActor_K2_ExecuteGameplayCueWithParams");
static_assert(offsetof(BuildingGameplayActor_K2_ExecuteGameplayCueWithParams, GameplayCueTag) == 0x000000, "Member 'BuildingGameplayActor_K2_ExecuteGameplayCueWithParams::GameplayCueTag' has a wrong offset!");
static_assert(offsetof(BuildingGameplayActor_K2_ExecuteGameplayCueWithParams, GameplayCueParameters) == 0x000008, "Member 'BuildingGameplayActor_K2_ExecuteGameplayCueWithParams::GameplayCueParameters' has a wrong offset!");

// Function FortniteGame.BuildingGameplayActor.K2_RemoveGameplayCue
// 0x0008 (0x0008 - 0x0000)
struct BuildingGameplayActor_K2_RemoveGameplayCue final
{
public:
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingGameplayActor_K2_RemoveGameplayCue) == 0x000008, "Wrong alignment on BuildingGameplayActor_K2_RemoveGameplayCue");
static_assert(sizeof(BuildingGameplayActor_K2_RemoveGameplayCue) == 0x000008, "Wrong size on BuildingGameplayActor_K2_RemoveGameplayCue");
static_assert(offsetof(BuildingGameplayActor_K2_RemoveGameplayCue, GameplayCueTag) == 0x000000, "Member 'BuildingGameplayActor_K2_RemoveGameplayCue::GameplayCueTag' has a wrong offset!");

// Function FortniteGame.BuildingGameplayActor.OnRegisteredTouchComponentBeginOverlap
// 0x00A0 (0x00A0 - 0x0000)
struct BuildingGameplayActor_OnRegisteredTouchComponentBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingGameplayActor_OnRegisteredTouchComponentBeginOverlap) == 0x000008, "Wrong alignment on BuildingGameplayActor_OnRegisteredTouchComponentBeginOverlap");
static_assert(sizeof(BuildingGameplayActor_OnRegisteredTouchComponentBeginOverlap) == 0x0000A0, "Wrong size on BuildingGameplayActor_OnRegisteredTouchComponentBeginOverlap");
static_assert(offsetof(BuildingGameplayActor_OnRegisteredTouchComponentBeginOverlap, OverlappedComp) == 0x000000, "Member 'BuildingGameplayActor_OnRegisteredTouchComponentBeginOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(BuildingGameplayActor_OnRegisteredTouchComponentBeginOverlap, Other) == 0x000008, "Member 'BuildingGameplayActor_OnRegisteredTouchComponentBeginOverlap::Other' has a wrong offset!");
static_assert(offsetof(BuildingGameplayActor_OnRegisteredTouchComponentBeginOverlap, OtherComp) == 0x000010, "Member 'BuildingGameplayActor_OnRegisteredTouchComponentBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(BuildingGameplayActor_OnRegisteredTouchComponentBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'BuildingGameplayActor_OnRegisteredTouchComponentBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BuildingGameplayActor_OnRegisteredTouchComponentBeginOverlap, bFromSweep) == 0x00001C, "Member 'BuildingGameplayActor_OnRegisteredTouchComponentBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(BuildingGameplayActor_OnRegisteredTouchComponentBeginOverlap, SweepResult) == 0x000020, "Member 'BuildingGameplayActor_OnRegisteredTouchComponentBeginOverlap::SweepResult' has a wrong offset!");

// Function FortniteGame.BuildingGameplayActor.OnRegisteredTouchComponentEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct BuildingGameplayActor_OnRegisteredTouchComponentEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingGameplayActor_OnRegisteredTouchComponentEndOverlap) == 0x000008, "Wrong alignment on BuildingGameplayActor_OnRegisteredTouchComponentEndOverlap");
static_assert(sizeof(BuildingGameplayActor_OnRegisteredTouchComponentEndOverlap) == 0x000020, "Wrong size on BuildingGameplayActor_OnRegisteredTouchComponentEndOverlap");
static_assert(offsetof(BuildingGameplayActor_OnRegisteredTouchComponentEndOverlap, OverlappedComp) == 0x000000, "Member 'BuildingGameplayActor_OnRegisteredTouchComponentEndOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(BuildingGameplayActor_OnRegisteredTouchComponentEndOverlap, Other) == 0x000008, "Member 'BuildingGameplayActor_OnRegisteredTouchComponentEndOverlap::Other' has a wrong offset!");
static_assert(offsetof(BuildingGameplayActor_OnRegisteredTouchComponentEndOverlap, OtherComp) == 0x000010, "Member 'BuildingGameplayActor_OnRegisteredTouchComponentEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(BuildingGameplayActor_OnRegisteredTouchComponentEndOverlap, OtherBodyIndex) == 0x000018, "Member 'BuildingGameplayActor_OnRegisteredTouchComponentEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function FortniteGame.BuildingGameplayActor.SetAbilitySourceLevel
// 0x0004 (0x0004 - 0x0000)
struct BuildingGameplayActor_SetAbilitySourceLevel final
{
public:
	int32                                         NewAbilitySourceLevel;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingGameplayActor_SetAbilitySourceLevel) == 0x000004, "Wrong alignment on BuildingGameplayActor_SetAbilitySourceLevel");
static_assert(sizeof(BuildingGameplayActor_SetAbilitySourceLevel) == 0x000004, "Wrong size on BuildingGameplayActor_SetAbilitySourceLevel");
static_assert(offsetof(BuildingGameplayActor_SetAbilitySourceLevel, NewAbilitySourceLevel) == 0x000000, "Member 'BuildingGameplayActor_SetAbilitySourceLevel::NewAbilitySourceLevel' has a wrong offset!");

// Function FortniteGame.BuildingGameplayActor.SetIgnoreInstigatorCollision
// 0x0001 (0x0001 - 0x0000)
struct BuildingGameplayActor_SetIgnoreInstigatorCollision final
{
public:
	bool                                          bShouldIgnore;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingGameplayActor_SetIgnoreInstigatorCollision) == 0x000001, "Wrong alignment on BuildingGameplayActor_SetIgnoreInstigatorCollision");
static_assert(sizeof(BuildingGameplayActor_SetIgnoreInstigatorCollision) == 0x000001, "Wrong size on BuildingGameplayActor_SetIgnoreInstigatorCollision");
static_assert(offsetof(BuildingGameplayActor_SetIgnoreInstigatorCollision, bShouldIgnore) == 0x000000, "Member 'BuildingGameplayActor_SetIgnoreInstigatorCollision::bShouldIgnore' has a wrong offset!");

// Function FortniteGame.BuildingGameplayActor.SetInitialVelocity
// 0x000C (0x000C - 0x0000)
struct BuildingGameplayActor_SetInitialVelocity final
{
public:
	struct FVector                                InitialVelocity;                                   // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingGameplayActor_SetInitialVelocity) == 0x000004, "Wrong alignment on BuildingGameplayActor_SetInitialVelocity");
static_assert(sizeof(BuildingGameplayActor_SetInitialVelocity) == 0x00000C, "Wrong size on BuildingGameplayActor_SetInitialVelocity");
static_assert(offsetof(BuildingGameplayActor_SetInitialVelocity, InitialVelocity) == 0x000000, "Member 'BuildingGameplayActor_SetInitialVelocity::InitialVelocity' has a wrong offset!");

// Function FortniteGame.BuildingGameplayActor.SetTouchComponentForAbilityDeliveryInfo
// 0x0008 (0x0008 - 0x0000)
struct BuildingGameplayActor_SetTouchComponentForAbilityDeliveryInfo final
{
public:
	class UPrimitiveComponent*                    PrimitiveComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingGameplayActor_SetTouchComponentForAbilityDeliveryInfo) == 0x000008, "Wrong alignment on BuildingGameplayActor_SetTouchComponentForAbilityDeliveryInfo");
static_assert(sizeof(BuildingGameplayActor_SetTouchComponentForAbilityDeliveryInfo) == 0x000008, "Wrong size on BuildingGameplayActor_SetTouchComponentForAbilityDeliveryInfo");
static_assert(offsetof(BuildingGameplayActor_SetTouchComponentForAbilityDeliveryInfo, PrimitiveComponent) == 0x000000, "Member 'BuildingGameplayActor_SetTouchComponentForAbilityDeliveryInfo::PrimitiveComponent' has a wrong offset!");

// Function FortniteGame.BuildingGameplayActor.GetTargetingSourceTransform
// 0x0040 (0x0040 - 0x0000)
struct BuildingGameplayActor_GetTargetingSourceTransform final
{
public:
	EFortAbilityTargetingSource                   Source;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingGameplayActor_GetTargetingSourceTransform) == 0x000010, "Wrong alignment on BuildingGameplayActor_GetTargetingSourceTransform");
static_assert(sizeof(BuildingGameplayActor_GetTargetingSourceTransform) == 0x000040, "Wrong size on BuildingGameplayActor_GetTargetingSourceTransform");
static_assert(offsetof(BuildingGameplayActor_GetTargetingSourceTransform, Source) == 0x000000, "Member 'BuildingGameplayActor_GetTargetingSourceTransform::Source' has a wrong offset!");
static_assert(offsetof(BuildingGameplayActor_GetTargetingSourceTransform, ReturnValue) == 0x000010, "Member 'BuildingGameplayActor_GetTargetingSourceTransform::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingCapturePointActor.OnCapturePointActiveStateChange
// 0x0001 (0x0001 - 0x0000)
struct BuildingCapturePointActor_OnCapturePointActiveStateChange final
{
public:
	bool                                          bInActive;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingCapturePointActor_OnCapturePointActiveStateChange) == 0x000001, "Wrong alignment on BuildingCapturePointActor_OnCapturePointActiveStateChange");
static_assert(sizeof(BuildingCapturePointActor_OnCapturePointActiveStateChange) == 0x000001, "Wrong size on BuildingCapturePointActor_OnCapturePointActiveStateChange");
static_assert(offsetof(BuildingCapturePointActor_OnCapturePointActiveStateChange, bInActive) == 0x000000, "Member 'BuildingCapturePointActor_OnCapturePointActiveStateChange::bInActive' has a wrong offset!");

// Function FortniteGame.BuildingCapturePointActor.OnCapturePointLockStateChange
// 0x0001 (0x0001 - 0x0000)
struct BuildingCapturePointActor_OnCapturePointLockStateChange final
{
public:
	bool                                          bInLocked;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingCapturePointActor_OnCapturePointLockStateChange) == 0x000001, "Wrong alignment on BuildingCapturePointActor_OnCapturePointLockStateChange");
static_assert(sizeof(BuildingCapturePointActor_OnCapturePointLockStateChange) == 0x000001, "Wrong size on BuildingCapturePointActor_OnCapturePointLockStateChange");
static_assert(offsetof(BuildingCapturePointActor_OnCapturePointLockStateChange, bInLocked) == 0x000000, "Member 'BuildingCapturePointActor_OnCapturePointLockStateChange::bInLocked' has a wrong offset!");

// Function FortniteGame.BuildingCapturePointActor.OnCapturePointStateChange
// 0x0002 (0x0002 - 0x0000)
struct BuildingCapturePointActor_OnCapturePointStateChange final
{
public:
	ECaptureState                                 InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortTeam                                     InTeam;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingCapturePointActor_OnCapturePointStateChange) == 0x000001, "Wrong alignment on BuildingCapturePointActor_OnCapturePointStateChange");
static_assert(sizeof(BuildingCapturePointActor_OnCapturePointStateChange) == 0x000002, "Wrong size on BuildingCapturePointActor_OnCapturePointStateChange");
static_assert(offsetof(BuildingCapturePointActor_OnCapturePointStateChange, InState) == 0x000000, "Member 'BuildingCapturePointActor_OnCapturePointStateChange::InState' has a wrong offset!");
static_assert(offsetof(BuildingCapturePointActor_OnCapturePointStateChange, InTeam) == 0x000001, "Member 'BuildingCapturePointActor_OnCapturePointStateChange::InTeam' has a wrong offset!");

// Function FortniteGame.BuildingCapturePointActor.OnEnterCapturePoint
// 0x00A0 (0x00A0 - 0x0000)
struct BuildingCapturePointActor_OnEnterCapturePoint final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingCapturePointActor_OnEnterCapturePoint) == 0x000008, "Wrong alignment on BuildingCapturePointActor_OnEnterCapturePoint");
static_assert(sizeof(BuildingCapturePointActor_OnEnterCapturePoint) == 0x0000A0, "Wrong size on BuildingCapturePointActor_OnEnterCapturePoint");
static_assert(offsetof(BuildingCapturePointActor_OnEnterCapturePoint, OverlappedComp) == 0x000000, "Member 'BuildingCapturePointActor_OnEnterCapturePoint::OverlappedComp' has a wrong offset!");
static_assert(offsetof(BuildingCapturePointActor_OnEnterCapturePoint, OtherActor) == 0x000008, "Member 'BuildingCapturePointActor_OnEnterCapturePoint::OtherActor' has a wrong offset!");
static_assert(offsetof(BuildingCapturePointActor_OnEnterCapturePoint, OtherComp) == 0x000010, "Member 'BuildingCapturePointActor_OnEnterCapturePoint::OtherComp' has a wrong offset!");
static_assert(offsetof(BuildingCapturePointActor_OnEnterCapturePoint, OtherBodyIndex) == 0x000018, "Member 'BuildingCapturePointActor_OnEnterCapturePoint::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BuildingCapturePointActor_OnEnterCapturePoint, bFromSweep) == 0x00001C, "Member 'BuildingCapturePointActor_OnEnterCapturePoint::bFromSweep' has a wrong offset!");
static_assert(offsetof(BuildingCapturePointActor_OnEnterCapturePoint, SweepResult) == 0x000020, "Member 'BuildingCapturePointActor_OnEnterCapturePoint::SweepResult' has a wrong offset!");

// Function FortniteGame.BuildingCapturePointActor.OnLeaveCapturePoint
// 0x0020 (0x0020 - 0x0000)
struct BuildingCapturePointActor_OnLeaveCapturePoint final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingCapturePointActor_OnLeaveCapturePoint) == 0x000008, "Wrong alignment on BuildingCapturePointActor_OnLeaveCapturePoint");
static_assert(sizeof(BuildingCapturePointActor_OnLeaveCapturePoint) == 0x000020, "Wrong size on BuildingCapturePointActor_OnLeaveCapturePoint");
static_assert(offsetof(BuildingCapturePointActor_OnLeaveCapturePoint, OverlappedComp) == 0x000000, "Member 'BuildingCapturePointActor_OnLeaveCapturePoint::OverlappedComp' has a wrong offset!");
static_assert(offsetof(BuildingCapturePointActor_OnLeaveCapturePoint, OtherActor) == 0x000008, "Member 'BuildingCapturePointActor_OnLeaveCapturePoint::OtherActor' has a wrong offset!");
static_assert(offsetof(BuildingCapturePointActor_OnLeaveCapturePoint, OtherComp) == 0x000010, "Member 'BuildingCapturePointActor_OnLeaveCapturePoint::OtherComp' has a wrong offset!");
static_assert(offsetof(BuildingCapturePointActor_OnLeaveCapturePoint, OtherBodyIndex) == 0x000018, "Member 'BuildingCapturePointActor_OnLeaveCapturePoint::OtherBodyIndex' has a wrong offset!");

// Function FortniteGame.BuildingCapturePointActor.SetActivatedState
// 0x0001 (0x0001 - 0x0000)
struct BuildingCapturePointActor_SetActivatedState final
{
public:
	bool                                          bInActivated;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingCapturePointActor_SetActivatedState) == 0x000001, "Wrong alignment on BuildingCapturePointActor_SetActivatedState");
static_assert(sizeof(BuildingCapturePointActor_SetActivatedState) == 0x000001, "Wrong size on BuildingCapturePointActor_SetActivatedState");
static_assert(offsetof(BuildingCapturePointActor_SetActivatedState, bInActivated) == 0x000000, "Member 'BuildingCapturePointActor_SetActivatedState::bInActivated' has a wrong offset!");

// Function FortniteGame.BuildingCapturePointActor.GetCaptureState
// 0x0001 (0x0001 - 0x0000)
struct BuildingCapturePointActor_GetCaptureState final
{
public:
	ECaptureState                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingCapturePointActor_GetCaptureState) == 0x000001, "Wrong alignment on BuildingCapturePointActor_GetCaptureState");
static_assert(sizeof(BuildingCapturePointActor_GetCaptureState) == 0x000001, "Wrong size on BuildingCapturePointActor_GetCaptureState");
static_assert(offsetof(BuildingCapturePointActor_GetCaptureState, ReturnValue) == 0x000000, "Member 'BuildingCapturePointActor_GetCaptureState::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingConnectivityComponent.K2_IsPowered
// 0x0001 (0x0001 - 0x0000)
struct BuildingConnectivityComponent_K2_IsPowered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingConnectivityComponent_K2_IsPowered) == 0x000001, "Wrong alignment on BuildingConnectivityComponent_K2_IsPowered");
static_assert(sizeof(BuildingConnectivityComponent_K2_IsPowered) == 0x000001, "Wrong size on BuildingConnectivityComponent_K2_IsPowered");
static_assert(offsetof(BuildingConnectivityComponent_K2_IsPowered, ReturnValue) == 0x000000, "Member 'BuildingConnectivityComponent_K2_IsPowered::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingConnectivityComponent.CanConnectTo
// 0x0010 (0x0010 - 0x0000)
struct BuildingConnectivityComponent_CanConnectTo final
{
public:
	class ABuildingSMActor*                       TestActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingConnectivityComponent_CanConnectTo) == 0x000008, "Wrong alignment on BuildingConnectivityComponent_CanConnectTo");
static_assert(sizeof(BuildingConnectivityComponent_CanConnectTo) == 0x000010, "Wrong size on BuildingConnectivityComponent_CanConnectTo");
static_assert(offsetof(BuildingConnectivityComponent_CanConnectTo, TestActor) == 0x000000, "Member 'BuildingConnectivityComponent_CanConnectTo::TestActor' has a wrong offset!");
static_assert(offsetof(BuildingConnectivityComponent_CanConnectTo, ReturnValue) == 0x000008, "Member 'BuildingConnectivityComponent_CanConnectTo::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingConnectivityComponent.IsConnectedTo
// 0x0010 (0x0010 - 0x0000)
struct BuildingConnectivityComponent_IsConnectedTo final
{
public:
	class ABuildingSMActor*                       TestActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingConnectivityComponent_IsConnectedTo) == 0x000008, "Wrong alignment on BuildingConnectivityComponent_IsConnectedTo");
static_assert(sizeof(BuildingConnectivityComponent_IsConnectedTo) == 0x000010, "Wrong size on BuildingConnectivityComponent_IsConnectedTo");
static_assert(offsetof(BuildingConnectivityComponent_IsConnectedTo, TestActor) == 0x000000, "Member 'BuildingConnectivityComponent_IsConnectedTo::TestActor' has a wrong offset!");
static_assert(offsetof(BuildingConnectivityComponent_IsConnectedTo, ReturnValue) == 0x000008, "Member 'BuildingConnectivityComponent_IsConnectedTo::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingConnectivityEffect.OnConnect
// 0x0060 (0x0060 - 0x0000)
struct BuildingConnectivityEffect_OnConnect final
{
public:
	struct FTransform                             T1;                                                // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             T2;                                                // 0x0030(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingConnectivityEffect_OnConnect) == 0x000010, "Wrong alignment on BuildingConnectivityEffect_OnConnect");
static_assert(sizeof(BuildingConnectivityEffect_OnConnect) == 0x000060, "Wrong size on BuildingConnectivityEffect_OnConnect");
static_assert(offsetof(BuildingConnectivityEffect_OnConnect, T1) == 0x000000, "Member 'BuildingConnectivityEffect_OnConnect::T1' has a wrong offset!");
static_assert(offsetof(BuildingConnectivityEffect_OnConnect, T2) == 0x000030, "Member 'BuildingConnectivityEffect_OnConnect::T2' has a wrong offset!");

// Function FortniteGame.BuildingContainer.GetLootTier
// 0x0004 (0x0004 - 0x0000)
struct BuildingContainer_GetLootTier final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingContainer_GetLootTier) == 0x000004, "Wrong alignment on BuildingContainer_GetLootTier");
static_assert(sizeof(BuildingContainer_GetLootTier) == 0x000004, "Wrong size on BuildingContainer_GetLootTier");
static_assert(offsetof(BuildingContainer_GetLootTier, ReturnValue) == 0x000000, "Member 'BuildingContainer_GetLootTier::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCompendiumBundleDefinition.DoesCompendiumBundleExpire
// 0x0001 (0x0001 - 0x0000)
struct FortCompendiumBundleDefinition_DoesCompendiumBundleExpire final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCompendiumBundleDefinition_DoesCompendiumBundleExpire) == 0x000001, "Wrong alignment on FortCompendiumBundleDefinition_DoesCompendiumBundleExpire");
static_assert(sizeof(FortCompendiumBundleDefinition_DoesCompendiumBundleExpire) == 0x000001, "Wrong size on FortCompendiumBundleDefinition_DoesCompendiumBundleExpire");
static_assert(offsetof(FortCompendiumBundleDefinition_DoesCompendiumBundleExpire, ReturnValue) == 0x000000, "Member 'FortCompendiumBundleDefinition_DoesCompendiumBundleExpire::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCompendiumBundleDefinition.GetCompendiumItemDefinitions
// 0x0010 (0x0010 - 0x0000)
struct FortCompendiumBundleDefinition_GetCompendiumItemDefinitions final
{
public:
	TArray<class UFortCompendiumItemDefinition*>  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCompendiumBundleDefinition_GetCompendiumItemDefinitions) == 0x000008, "Wrong alignment on FortCompendiumBundleDefinition_GetCompendiumItemDefinitions");
static_assert(sizeof(FortCompendiumBundleDefinition_GetCompendiumItemDefinitions) == 0x000010, "Wrong size on FortCompendiumBundleDefinition_GetCompendiumItemDefinitions");
static_assert(offsetof(FortCompendiumBundleDefinition_GetCompendiumItemDefinitions, ReturnValue) == 0x000000, "Member 'FortCompendiumBundleDefinition_GetCompendiumItemDefinitions::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCompendiumBundleDefinition.GetEventName
// 0x0010 (0x0010 - 0x0000)
struct FortCompendiumBundleDefinition_GetEventName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCompendiumBundleDefinition_GetEventName) == 0x000008, "Wrong alignment on FortCompendiumBundleDefinition_GetEventName");
static_assert(sizeof(FortCompendiumBundleDefinition_GetEventName) == 0x000010, "Wrong size on FortCompendiumBundleDefinition_GetEventName");
static_assert(offsetof(FortCompendiumBundleDefinition_GetEventName, ReturnValue) == 0x000000, "Member 'FortCompendiumBundleDefinition_GetEventName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortConsumableAccountItem.CanActivateOnOthers
// 0x0001 (0x0001 - 0x0000)
struct FortConsumableAccountItem_CanActivateOnOthers final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortConsumableAccountItem_CanActivateOnOthers) == 0x000001, "Wrong alignment on FortConsumableAccountItem_CanActivateOnOthers");
static_assert(sizeof(FortConsumableAccountItem_CanActivateOnOthers) == 0x000001, "Wrong size on FortConsumableAccountItem_CanActivateOnOthers");
static_assert(offsetof(FortConsumableAccountItem_CanActivateOnOthers, ReturnValue) == 0x000000, "Member 'FortConsumableAccountItem_CanActivateOnOthers::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortConsumableAccountItem.CanActivateOnSelf
// 0x0001 (0x0001 - 0x0000)
struct FortConsumableAccountItem_CanActivateOnSelf final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortConsumableAccountItem_CanActivateOnSelf) == 0x000001, "Wrong alignment on FortConsumableAccountItem_CanActivateOnSelf");
static_assert(sizeof(FortConsumableAccountItem_CanActivateOnSelf) == 0x000001, "Wrong size on FortConsumableAccountItem_CanActivateOnSelf");
static_assert(offsetof(FortConsumableAccountItem_CanActivateOnSelf, ReturnValue) == 0x000000, "Member 'FortConsumableAccountItem_CanActivateOnSelf::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTargetSelectionInterface.GetTargetingTransform
// 0x0040 (0x0040 - 0x0000)
struct FortTargetSelectionInterface_GetTargetingTransform final
{
public:
	EFortAbilityTargetingSource                   Source;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortGameplayAbility*                   SourceAbility;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTargetSelectionInterface_GetTargetingTransform) == 0x000010, "Wrong alignment on FortTargetSelectionInterface_GetTargetingTransform");
static_assert(sizeof(FortTargetSelectionInterface_GetTargetingTransform) == 0x000040, "Wrong size on FortTargetSelectionInterface_GetTargetingTransform");
static_assert(offsetof(FortTargetSelectionInterface_GetTargetingTransform, Source) == 0x000000, "Member 'FortTargetSelectionInterface_GetTargetingTransform::Source' has a wrong offset!");
static_assert(offsetof(FortTargetSelectionInterface_GetTargetingTransform, SourceAbility) == 0x000008, "Member 'FortTargetSelectionInterface_GetTargetingTransform::SourceAbility' has a wrong offset!");
static_assert(offsetof(FortTargetSelectionInterface_GetTargetingTransform, ReturnValue) == 0x000010, "Member 'FortTargetSelectionInterface_GetTargetingTransform::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpProfileCollectionBook.ClaimCollectionBookPageRewards
// 0x00A0 (0x00A0 - 0x0000)
struct FortMcpProfileCollectionBook_ClaimCollectionBookPageRewards final
{
public:
	class FString                                 PageTemplateId;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SectionId;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectedRewardIndex;                               // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0xC];                                       // 0x0024(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FClientUrlContext                      Context;                                           // 0x0030(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileCollectionBook_ClaimCollectionBookPageRewards) == 0x000010, "Wrong alignment on FortMcpProfileCollectionBook_ClaimCollectionBookPageRewards");
static_assert(sizeof(FortMcpProfileCollectionBook_ClaimCollectionBookPageRewards) == 0x0000A0, "Wrong size on FortMcpProfileCollectionBook_ClaimCollectionBookPageRewards");
static_assert(offsetof(FortMcpProfileCollectionBook_ClaimCollectionBookPageRewards, PageTemplateId) == 0x000000, "Member 'FortMcpProfileCollectionBook_ClaimCollectionBookPageRewards::PageTemplateId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileCollectionBook_ClaimCollectionBookPageRewards, SectionId) == 0x000010, "Member 'FortMcpProfileCollectionBook_ClaimCollectionBookPageRewards::SectionId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileCollectionBook_ClaimCollectionBookPageRewards, SelectedRewardIndex) == 0x000020, "Member 'FortMcpProfileCollectionBook_ClaimCollectionBookPageRewards::SelectedRewardIndex' has a wrong offset!");
static_assert(offsetof(FortMcpProfileCollectionBook_ClaimCollectionBookPageRewards, Context) == 0x000030, "Member 'FortMcpProfileCollectionBook_ClaimCollectionBookPageRewards::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileCollectionBook.ConvertSlottedItem
// 0x0090 (0x0090 - 0x0000)
struct FortMcpProfileCollectionBook_ConvertSlottedItem final
{
public:
	class FString                                 TargetItemId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConversionIndex;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FClientUrlContext                      Context;                                           // 0x0020(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileCollectionBook_ConvertSlottedItem) == 0x000010, "Wrong alignment on FortMcpProfileCollectionBook_ConvertSlottedItem");
static_assert(sizeof(FortMcpProfileCollectionBook_ConvertSlottedItem) == 0x000090, "Wrong size on FortMcpProfileCollectionBook_ConvertSlottedItem");
static_assert(offsetof(FortMcpProfileCollectionBook_ConvertSlottedItem, TargetItemId) == 0x000000, "Member 'FortMcpProfileCollectionBook_ConvertSlottedItem::TargetItemId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileCollectionBook_ConvertSlottedItem, ConversionIndex) == 0x000010, "Member 'FortMcpProfileCollectionBook_ConvertSlottedItem::ConversionIndex' has a wrong offset!");
static_assert(offsetof(FortMcpProfileCollectionBook_ConvertSlottedItem, Context) == 0x000020, "Member 'FortMcpProfileCollectionBook_ConvertSlottedItem::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileCollectionBook.UpgradeSlottedItem
// 0x0080 (0x0080 - 0x0000)
struct FortMcpProfileCollectionBook_UpgradeSlottedItem final
{
public:
	class FString                                 TargetItemId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0010(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileCollectionBook_UpgradeSlottedItem) == 0x000010, "Wrong alignment on FortMcpProfileCollectionBook_UpgradeSlottedItem");
static_assert(sizeof(FortMcpProfileCollectionBook_UpgradeSlottedItem) == 0x000080, "Wrong size on FortMcpProfileCollectionBook_UpgradeSlottedItem");
static_assert(offsetof(FortMcpProfileCollectionBook_UpgradeSlottedItem, TargetItemId) == 0x000000, "Member 'FortMcpProfileCollectionBook_UpgradeSlottedItem::TargetItemId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileCollectionBook_UpgradeSlottedItem, Context) == 0x000010, "Member 'FortMcpProfileCollectionBook_UpgradeSlottedItem::Context' has a wrong offset!");

// Function FortniteGame.FortConversionControlItemDefinition.GetFirstConversionTier
// 0x0001 (0x0001 - 0x0000)
struct FortConversionControlItemDefinition_GetFirstConversionTier final
{
public:
	EFortRarity                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortConversionControlItemDefinition_GetFirstConversionTier) == 0x000001, "Wrong alignment on FortConversionControlItemDefinition_GetFirstConversionTier");
static_assert(sizeof(FortConversionControlItemDefinition_GetFirstConversionTier) == 0x000001, "Wrong size on FortConversionControlItemDefinition_GetFirstConversionTier");
static_assert(offsetof(FortConversionControlItemDefinition_GetFirstConversionTier, ReturnValue) == 0x000000, "Member 'FortConversionControlItemDefinition_GetFirstConversionTier::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortConversionControlItemDefinition.GetMaxConversionTier
// 0x0001 (0x0001 - 0x0000)
struct FortConversionControlItemDefinition_GetMaxConversionTier final
{
public:
	EFortRarity                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortConversionControlItemDefinition_GetMaxConversionTier) == 0x000001, "Wrong alignment on FortConversionControlItemDefinition_GetMaxConversionTier");
static_assert(sizeof(FortConversionControlItemDefinition_GetMaxConversionTier) == 0x000001, "Wrong size on FortConversionControlItemDefinition_GetMaxConversionTier");
static_assert(offsetof(FortConversionControlItemDefinition_GetMaxConversionTier, ReturnValue) == 0x000000, "Member 'FortConversionControlItemDefinition_GetMaxConversionTier::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortConversionControlItemDefinition.GetPointsForTier
// 0x0008 (0x0008 - 0x0000)
struct FortConversionControlItemDefinition_GetPointsForTier final
{
public:
	EFortRarity                                   InTier;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortConversionControlItemDefinition_GetPointsForTier) == 0x000004, "Wrong alignment on FortConversionControlItemDefinition_GetPointsForTier");
static_assert(sizeof(FortConversionControlItemDefinition_GetPointsForTier) == 0x000008, "Wrong size on FortConversionControlItemDefinition_GetPointsForTier");
static_assert(offsetof(FortConversionControlItemDefinition_GetPointsForTier, InTier) == 0x000000, "Member 'FortConversionControlItemDefinition_GetPointsForTier::InTier' has a wrong offset!");
static_assert(offsetof(FortConversionControlItemDefinition_GetPointsForTier, ReturnValue) == 0x000004, "Member 'FortConversionControlItemDefinition_GetPointsForTier::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortConversionControlItemDefinition.GetRequiredCatalysts
// 0x0020 (0x0020 - 0x0000)
struct FortConversionControlItemDefinition_GetRequiredCatalysts final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortConversionControlItemDefinition_GetRequiredCatalysts) == 0x000008, "Wrong alignment on FortConversionControlItemDefinition_GetRequiredCatalysts");
static_assert(sizeof(FortConversionControlItemDefinition_GetRequiredCatalysts) == 0x000020, "Wrong size on FortConversionControlItemDefinition_GetRequiredCatalysts");
static_assert(offsetof(FortConversionControlItemDefinition_GetRequiredCatalysts, ReturnValue) == 0x000000, "Member 'FortConversionControlItemDefinition_GetRequiredCatalysts::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortConversionControlItemDefinition.GetRequiredItemDefinition
// 0x0008 (0x0008 - 0x0000)
struct FortConversionControlItemDefinition_GetRequiredItemDefinition final
{
public:
	class UFortAccountItemDefinition*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortConversionControlItemDefinition_GetRequiredItemDefinition) == 0x000008, "Wrong alignment on FortConversionControlItemDefinition_GetRequiredItemDefinition");
static_assert(sizeof(FortConversionControlItemDefinition_GetRequiredItemDefinition) == 0x000008, "Wrong size on FortConversionControlItemDefinition_GetRequiredItemDefinition");
static_assert(offsetof(FortConversionControlItemDefinition_GetRequiredItemDefinition, ReturnValue) == 0x000000, "Member 'FortConversionControlItemDefinition_GetRequiredItemDefinition::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortConversionControlItemDefinition.GetRequiredItemQuantity
// 0x0008 (0x0008 - 0x0000)
struct FortConversionControlItemDefinition_GetRequiredItemQuantity final
{
public:
	int32                                         SacrificePoints;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortConversionControlItemDefinition_GetRequiredItemQuantity) == 0x000004, "Wrong alignment on FortConversionControlItemDefinition_GetRequiredItemQuantity");
static_assert(sizeof(FortConversionControlItemDefinition_GetRequiredItemQuantity) == 0x000008, "Wrong size on FortConversionControlItemDefinition_GetRequiredItemQuantity");
static_assert(offsetof(FortConversionControlItemDefinition_GetRequiredItemQuantity, SacrificePoints) == 0x000000, "Member 'FortConversionControlItemDefinition_GetRequiredItemQuantity::SacrificePoints' has a wrong offset!");
static_assert(offsetof(FortConversionControlItemDefinition_GetRequiredItemQuantity, ReturnValue) == 0x000004, "Member 'FortConversionControlItemDefinition_GetRequiredItemQuantity::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortConversionControlItemDefinition.GetRewardName
// 0x0018 (0x0018 - 0x0000)
struct FortConversionControlItemDefinition_GetRewardName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortConversionControlItemDefinition_GetRewardName) == 0x000008, "Wrong alignment on FortConversionControlItemDefinition_GetRewardName");
static_assert(sizeof(FortConversionControlItemDefinition_GetRewardName) == 0x000018, "Wrong size on FortConversionControlItemDefinition_GetRewardName");
static_assert(offsetof(FortConversionControlItemDefinition_GetRewardName, ReturnValue) == 0x000000, "Member 'FortConversionControlItemDefinition_GetRewardName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortConversionControlItemDefinition.GetTierFromSacrificePoints
// 0x0008 (0x0008 - 0x0000)
struct FortConversionControlItemDefinition_GetTierFromSacrificePoints final
{
public:
	int32                                         SacrificePoints;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortRarity                                   CalculatedTier;                                    // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortConversionControlItemDefinition_GetTierFromSacrificePoints) == 0x000004, "Wrong alignment on FortConversionControlItemDefinition_GetTierFromSacrificePoints");
static_assert(sizeof(FortConversionControlItemDefinition_GetTierFromSacrificePoints) == 0x000008, "Wrong size on FortConversionControlItemDefinition_GetTierFromSacrificePoints");
static_assert(offsetof(FortConversionControlItemDefinition_GetTierFromSacrificePoints, SacrificePoints) == 0x000000, "Member 'FortConversionControlItemDefinition_GetTierFromSacrificePoints::SacrificePoints' has a wrong offset!");
static_assert(offsetof(FortConversionControlItemDefinition_GetTierFromSacrificePoints, CalculatedTier) == 0x000004, "Member 'FortConversionControlItemDefinition_GetTierFromSacrificePoints::CalculatedTier' has a wrong offset!");
static_assert(offsetof(FortConversionControlItemDefinition_GetTierFromSacrificePoints, ReturnValue) == 0x000005, "Member 'FortConversionControlItemDefinition_GetTierFromSacrificePoints::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingFlagSpawn.IsSpawnedObjectAwayFromBase
// 0x0001 (0x0001 - 0x0000)
struct BuildingFlagSpawn_IsSpawnedObjectAwayFromBase final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingFlagSpawn_IsSpawnedObjectAwayFromBase) == 0x000001, "Wrong alignment on BuildingFlagSpawn_IsSpawnedObjectAwayFromBase");
static_assert(sizeof(BuildingFlagSpawn_IsSpawnedObjectAwayFromBase) == 0x000001, "Wrong size on BuildingFlagSpawn_IsSpawnedObjectAwayFromBase");
static_assert(offsetof(BuildingFlagSpawn_IsSpawnedObjectAwayFromBase, ReturnValue) == 0x000000, "Member 'BuildingFlagSpawn_IsSpawnedObjectAwayFromBase::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWorldItemTooltip.GetNumericValue
// 0x0028 (0x0028 - 0x0000)
struct FortWorldItemTooltip_GetNumericValue final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVal;                                            // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortWorldItemTooltip_GetNumericValue) == 0x000008, "Wrong alignment on FortWorldItemTooltip_GetNumericValue");
static_assert(sizeof(FortWorldItemTooltip_GetNumericValue) == 0x000028, "Wrong size on FortWorldItemTooltip_GetNumericValue");
static_assert(offsetof(FortWorldItemTooltip_GetNumericValue, ObjectToDescribe) == 0x000000, "Member 'FortWorldItemTooltip_GetNumericValue::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortWorldItemTooltip_GetNumericValue, Tag) == 0x000008, "Member 'FortWorldItemTooltip_GetNumericValue::Tag' has a wrong offset!");
static_assert(offsetof(FortWorldItemTooltip_GetNumericValue, Context) == 0x000010, "Member 'FortWorldItemTooltip_GetNumericValue::Context' has a wrong offset!");
static_assert(offsetof(FortWorldItemTooltip_GetNumericValue, Token) == 0x000018, "Member 'FortWorldItemTooltip_GetNumericValue::Token' has a wrong offset!");
static_assert(offsetof(FortWorldItemTooltip_GetNumericValue, OutVal) == 0x000020, "Member 'FortWorldItemTooltip_GetNumericValue::OutVal' has a wrong offset!");
static_assert(offsetof(FortWorldItemTooltip_GetNumericValue, ReturnValue) == 0x000024, "Member 'FortWorldItemTooltip_GetNumericValue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWorldItemTooltip.GetTextForToken
// 0x0040 (0x0040 - 0x0000)
struct FortWorldItemTooltip_GetTextForToken final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortWorldItemTooltip_GetTextForToken) == 0x000008, "Wrong alignment on FortWorldItemTooltip_GetTextForToken");
static_assert(sizeof(FortWorldItemTooltip_GetTextForToken) == 0x000040, "Wrong size on FortWorldItemTooltip_GetTextForToken");
static_assert(offsetof(FortWorldItemTooltip_GetTextForToken, ObjectToDescribe) == 0x000000, "Member 'FortWorldItemTooltip_GetTextForToken::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortWorldItemTooltip_GetTextForToken, Tag) == 0x000008, "Member 'FortWorldItemTooltip_GetTextForToken::Tag' has a wrong offset!");
static_assert(offsetof(FortWorldItemTooltip_GetTextForToken, Context) == 0x000010, "Member 'FortWorldItemTooltip_GetTextForToken::Context' has a wrong offset!");
static_assert(offsetof(FortWorldItemTooltip_GetTextForToken, Token) == 0x000018, "Member 'FortWorldItemTooltip_GetTextForToken::Token' has a wrong offset!");
static_assert(offsetof(FortWorldItemTooltip_GetTextForToken, OutText) == 0x000020, "Member 'FortWorldItemTooltip_GetTextForToken::OutText' has a wrong offset!");
static_assert(offsetof(FortWorldItemTooltip_GetTextForToken, ReturnValue) == 0x000038, "Member 'FortWorldItemTooltip_GetTextForToken::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWorldItemTooltip.GetTokenizedDescriptionText
// 0x0030 (0x0030 - 0x0000)
struct FortWorldItemTooltip_GetTokenizedDescriptionText final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           OutDescription;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortWorldItemTooltip_GetTokenizedDescriptionText) == 0x000008, "Wrong alignment on FortWorldItemTooltip_GetTokenizedDescriptionText");
static_assert(sizeof(FortWorldItemTooltip_GetTokenizedDescriptionText) == 0x000030, "Wrong size on FortWorldItemTooltip_GetTokenizedDescriptionText");
static_assert(offsetof(FortWorldItemTooltip_GetTokenizedDescriptionText, ObjectToDescribe) == 0x000000, "Member 'FortWorldItemTooltip_GetTokenizedDescriptionText::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortWorldItemTooltip_GetTokenizedDescriptionText, Tag) == 0x000008, "Member 'FortWorldItemTooltip_GetTokenizedDescriptionText::Tag' has a wrong offset!");
static_assert(offsetof(FortWorldItemTooltip_GetTokenizedDescriptionText, Context) == 0x000010, "Member 'FortWorldItemTooltip_GetTokenizedDescriptionText::Context' has a wrong offset!");
static_assert(offsetof(FortWorldItemTooltip_GetTokenizedDescriptionText, OutDescription) == 0x000018, "Member 'FortWorldItemTooltip_GetTokenizedDescriptionText::OutDescription' has a wrong offset!");
static_assert(offsetof(FortWorldItemTooltip_GetTokenizedDescriptionText, ReturnValue) == 0x000028, "Member 'FortWorldItemTooltip_GetTokenizedDescriptionText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortConsumableItemTooltip.GetNumericValue
// 0x0028 (0x0028 - 0x0000)
struct FortConsumableItemTooltip_GetNumericValue final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVal;                                            // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortConsumableItemTooltip_GetNumericValue) == 0x000008, "Wrong alignment on FortConsumableItemTooltip_GetNumericValue");
static_assert(sizeof(FortConsumableItemTooltip_GetNumericValue) == 0x000028, "Wrong size on FortConsumableItemTooltip_GetNumericValue");
static_assert(offsetof(FortConsumableItemTooltip_GetNumericValue, ObjectToDescribe) == 0x000000, "Member 'FortConsumableItemTooltip_GetNumericValue::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortConsumableItemTooltip_GetNumericValue, Tag) == 0x000008, "Member 'FortConsumableItemTooltip_GetNumericValue::Tag' has a wrong offset!");
static_assert(offsetof(FortConsumableItemTooltip_GetNumericValue, Context) == 0x000010, "Member 'FortConsumableItemTooltip_GetNumericValue::Context' has a wrong offset!");
static_assert(offsetof(FortConsumableItemTooltip_GetNumericValue, Token) == 0x000018, "Member 'FortConsumableItemTooltip_GetNumericValue::Token' has a wrong offset!");
static_assert(offsetof(FortConsumableItemTooltip_GetNumericValue, OutVal) == 0x000020, "Member 'FortConsumableItemTooltip_GetNumericValue::OutVal' has a wrong offset!");
static_assert(offsetof(FortConsumableItemTooltip_GetNumericValue, ReturnValue) == 0x000024, "Member 'FortConsumableItemTooltip_GetNumericValue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortConsumableItemTooltip.GetTextForToken
// 0x0040 (0x0040 - 0x0000)
struct FortConsumableItemTooltip_GetTextForToken final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortConsumableItemTooltip_GetTextForToken) == 0x000008, "Wrong alignment on FortConsumableItemTooltip_GetTextForToken");
static_assert(sizeof(FortConsumableItemTooltip_GetTextForToken) == 0x000040, "Wrong size on FortConsumableItemTooltip_GetTextForToken");
static_assert(offsetof(FortConsumableItemTooltip_GetTextForToken, ObjectToDescribe) == 0x000000, "Member 'FortConsumableItemTooltip_GetTextForToken::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortConsumableItemTooltip_GetTextForToken, Tag) == 0x000008, "Member 'FortConsumableItemTooltip_GetTextForToken::Tag' has a wrong offset!");
static_assert(offsetof(FortConsumableItemTooltip_GetTextForToken, Context) == 0x000010, "Member 'FortConsumableItemTooltip_GetTextForToken::Context' has a wrong offset!");
static_assert(offsetof(FortConsumableItemTooltip_GetTextForToken, Token) == 0x000018, "Member 'FortConsumableItemTooltip_GetTextForToken::Token' has a wrong offset!");
static_assert(offsetof(FortConsumableItemTooltip_GetTextForToken, OutText) == 0x000020, "Member 'FortConsumableItemTooltip_GetTextForToken::OutText' has a wrong offset!");
static_assert(offsetof(FortConsumableItemTooltip_GetTextForToken, ReturnValue) == 0x000038, "Member 'FortConsumableItemTooltip_GetTextForToken::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortConsumableItemTooltip.GetTokenizedDescriptionText
// 0x0030 (0x0030 - 0x0000)
struct FortConsumableItemTooltip_GetTokenizedDescriptionText final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           OutDescription;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortConsumableItemTooltip_GetTokenizedDescriptionText) == 0x000008, "Wrong alignment on FortConsumableItemTooltip_GetTokenizedDescriptionText");
static_assert(sizeof(FortConsumableItemTooltip_GetTokenizedDescriptionText) == 0x000030, "Wrong size on FortConsumableItemTooltip_GetTokenizedDescriptionText");
static_assert(offsetof(FortConsumableItemTooltip_GetTokenizedDescriptionText, ObjectToDescribe) == 0x000000, "Member 'FortConsumableItemTooltip_GetTokenizedDescriptionText::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortConsumableItemTooltip_GetTokenizedDescriptionText, Tag) == 0x000008, "Member 'FortConsumableItemTooltip_GetTokenizedDescriptionText::Tag' has a wrong offset!");
static_assert(offsetof(FortConsumableItemTooltip_GetTokenizedDescriptionText, Context) == 0x000010, "Member 'FortConsumableItemTooltip_GetTokenizedDescriptionText::Context' has a wrong offset!");
static_assert(offsetof(FortConsumableItemTooltip_GetTokenizedDescriptionText, OutDescription) == 0x000018, "Member 'FortConsumableItemTooltip_GetTokenizedDescriptionText::OutDescription' has a wrong offset!");
static_assert(offsetof(FortConsumableItemTooltip_GetTokenizedDescriptionText, ReturnValue) == 0x000028, "Member 'FortConsumableItemTooltip_GetTokenizedDescriptionText::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingFloor.IsBalcony
// 0x0001 (0x0001 - 0x0000)
struct BuildingFloor_IsBalcony final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingFloor_IsBalcony) == 0x000001, "Wrong alignment on BuildingFloor_IsBalcony");
static_assert(sizeof(BuildingFloor_IsBalcony) == 0x000001, "Wrong size on BuildingFloor_IsBalcony");
static_assert(offsetof(BuildingFloor_IsBalcony, ReturnValue) == 0x000000, "Member 'BuildingFloor_IsBalcony::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingFOBConfigActor.AttemptSelectFOBCore
// 0x0010 (0x0010 - 0x0000)
struct BuildingFOBConfigActor_AttemptSelectFOBCore final
{
public:
	class UFortFOBCoreDecoItemDefinition*         DefToSelect;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingFOBConfigActor_AttemptSelectFOBCore) == 0x000008, "Wrong alignment on BuildingFOBConfigActor_AttemptSelectFOBCore");
static_assert(sizeof(BuildingFOBConfigActor_AttemptSelectFOBCore) == 0x000010, "Wrong size on BuildingFOBConfigActor_AttemptSelectFOBCore");
static_assert(offsetof(BuildingFOBConfigActor_AttemptSelectFOBCore, DefToSelect) == 0x000000, "Member 'BuildingFOBConfigActor_AttemptSelectFOBCore::DefToSelect' has a wrong offset!");
static_assert(offsetof(BuildingFOBConfigActor_AttemptSelectFOBCore, ReturnValue) == 0x000008, "Member 'BuildingFOBConfigActor_AttemptSelectFOBCore::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingFOBConfigActor.OnCoreInitialized
// 0x0008 (0x0008 - 0x0000)
struct BuildingFOBConfigActor_OnCoreInitialized final
{
public:
	class ABuildingFOBCoreActor*                  InitializedCore;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingFOBConfigActor_OnCoreInitialized) == 0x000008, "Wrong alignment on BuildingFOBConfigActor_OnCoreInitialized");
static_assert(sizeof(BuildingFOBConfigActor_OnCoreInitialized) == 0x000008, "Wrong size on BuildingFOBConfigActor_OnCoreInitialized");
static_assert(offsetof(BuildingFOBConfigActor_OnCoreInitialized, InitializedCore) == 0x000000, "Member 'BuildingFOBConfigActor_OnCoreInitialized::InitializedCore' has a wrong offset!");

// Function FortniteGame.BuildingFOBConfigActor.OnFOBModeSet
// 0x0001 (0x0001 - 0x0000)
struct BuildingFOBConfigActor_OnFOBModeSet final
{
public:
	EFOBMode                                      ModeThatWasSet;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingFOBConfigActor_OnFOBModeSet) == 0x000001, "Wrong alignment on BuildingFOBConfigActor_OnFOBModeSet");
static_assert(sizeof(BuildingFOBConfigActor_OnFOBModeSet) == 0x000001, "Wrong size on BuildingFOBConfigActor_OnFOBModeSet");
static_assert(offsetof(BuildingFOBConfigActor_OnFOBModeSet, ModeThatWasSet) == 0x000000, "Member 'BuildingFOBConfigActor_OnFOBModeSet::ModeThatWasSet' has a wrong offset!");

// Function FortniteGame.BuildingFOBConfigActor.OnIOOperationCompleteMulticast
// 0x0010 (0x0010 - 0x0000)
struct BuildingFOBConfigActor_OnIOOperationCompleteMulticast final
{
public:
	EFOBIOStatus                                  IOOperation;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortFOBCoreDecoItemDefinition*         SelectedCoreDef;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingFOBConfigActor_OnIOOperationCompleteMulticast) == 0x000008, "Wrong alignment on BuildingFOBConfigActor_OnIOOperationCompleteMulticast");
static_assert(sizeof(BuildingFOBConfigActor_OnIOOperationCompleteMulticast) == 0x000010, "Wrong size on BuildingFOBConfigActor_OnIOOperationCompleteMulticast");
static_assert(offsetof(BuildingFOBConfigActor_OnIOOperationCompleteMulticast, IOOperation) == 0x000000, "Member 'BuildingFOBConfigActor_OnIOOperationCompleteMulticast::IOOperation' has a wrong offset!");
static_assert(offsetof(BuildingFOBConfigActor_OnIOOperationCompleteMulticast, bSuccess) == 0x000001, "Member 'BuildingFOBConfigActor_OnIOOperationCompleteMulticast::bSuccess' has a wrong offset!");
static_assert(offsetof(BuildingFOBConfigActor_OnIOOperationCompleteMulticast, SelectedCoreDef) == 0x000008, "Member 'BuildingFOBConfigActor_OnIOOperationCompleteMulticast::SelectedCoreDef' has a wrong offset!");

// Function FortniteGame.BuildingFOBConfigActor.ReloadFOB
// 0x0001 (0x0001 - 0x0000)
struct BuildingFOBConfigActor_ReloadFOB final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingFOBConfigActor_ReloadFOB) == 0x000001, "Wrong alignment on BuildingFOBConfigActor_ReloadFOB");
static_assert(sizeof(BuildingFOBConfigActor_ReloadFOB) == 0x000001, "Wrong size on BuildingFOBConfigActor_ReloadFOB");
static_assert(offsetof(BuildingFOBConfigActor_ReloadFOB, ReturnValue) == 0x000000, "Member 'BuildingFOBConfigActor_ReloadFOB::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingFOBConfigActor.CanPerformIOOperation
// 0x0001 (0x0001 - 0x0000)
struct BuildingFOBConfigActor_CanPerformIOOperation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingFOBConfigActor_CanPerformIOOperation) == 0x000001, "Wrong alignment on BuildingFOBConfigActor_CanPerformIOOperation");
static_assert(sizeof(BuildingFOBConfigActor_CanPerformIOOperation) == 0x000001, "Wrong size on BuildingFOBConfigActor_CanPerformIOOperation");
static_assert(offsetof(BuildingFOBConfigActor_CanPerformIOOperation, ReturnValue) == 0x000000, "Member 'BuildingFOBConfigActor_CanPerformIOOperation::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingFOBConfigActor.CanReloadFOB
// 0x0001 (0x0001 - 0x0000)
struct BuildingFOBConfigActor_CanReloadFOB final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingFOBConfigActor_CanReloadFOB) == 0x000001, "Wrong alignment on BuildingFOBConfigActor_CanReloadFOB");
static_assert(sizeof(BuildingFOBConfigActor_CanReloadFOB) == 0x000001, "Wrong size on BuildingFOBConfigActor_CanReloadFOB");
static_assert(offsetof(BuildingFOBConfigActor_CanReloadFOB, ReturnValue) == 0x000000, "Member 'BuildingFOBConfigActor_CanReloadFOB::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingFOBConfigActor.CanSaveFOB
// 0x0001 (0x0001 - 0x0000)
struct BuildingFOBConfigActor_CanSaveFOB final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingFOBConfigActor_CanSaveFOB) == 0x000001, "Wrong alignment on BuildingFOBConfigActor_CanSaveFOB");
static_assert(sizeof(BuildingFOBConfigActor_CanSaveFOB) == 0x000001, "Wrong size on BuildingFOBConfigActor_CanSaveFOB");
static_assert(offsetof(BuildingFOBConfigActor_CanSaveFOB, ReturnValue) == 0x000000, "Member 'BuildingFOBConfigActor_CanSaveFOB::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingFOBConfigActor.GetAllCoreChoices
// 0x0010 (0x0010 - 0x0000)
struct BuildingFOBConfigActor_GetAllCoreChoices final
{
public:
	TArray<struct FFOBCoreChoice>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingFOBConfigActor_GetAllCoreChoices) == 0x000008, "Wrong alignment on BuildingFOBConfigActor_GetAllCoreChoices");
static_assert(sizeof(BuildingFOBConfigActor_GetAllCoreChoices) == 0x000010, "Wrong size on BuildingFOBConfigActor_GetAllCoreChoices");
static_assert(offsetof(BuildingFOBConfigActor_GetAllCoreChoices, ReturnValue) == 0x000000, "Member 'BuildingFOBConfigActor_GetAllCoreChoices::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingFOBConfigActor.GetFOBMode
// 0x0001 (0x0001 - 0x0000)
struct BuildingFOBConfigActor_GetFOBMode final
{
public:
	EFOBMode                                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingFOBConfigActor_GetFOBMode) == 0x000001, "Wrong alignment on BuildingFOBConfigActor_GetFOBMode");
static_assert(sizeof(BuildingFOBConfigActor_GetFOBMode) == 0x000001, "Wrong size on BuildingFOBConfigActor_GetFOBMode");
static_assert(offsetof(BuildingFOBConfigActor_GetFOBMode, ReturnValue) == 0x000000, "Member 'BuildingFOBConfigActor_GetFOBMode::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingFOBConfigActor.GetSelectedFOBCoreItemDefinition
// 0x0008 (0x0008 - 0x0000)
struct BuildingFOBConfigActor_GetSelectedFOBCoreItemDefinition final
{
public:
	class UFortFOBCoreDecoItemDefinition*         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingFOBConfigActor_GetSelectedFOBCoreItemDefinition) == 0x000008, "Wrong alignment on BuildingFOBConfigActor_GetSelectedFOBCoreItemDefinition");
static_assert(sizeof(BuildingFOBConfigActor_GetSelectedFOBCoreItemDefinition) == 0x000008, "Wrong size on BuildingFOBConfigActor_GetSelectedFOBCoreItemDefinition");
static_assert(offsetof(BuildingFOBConfigActor_GetSelectedFOBCoreItemDefinition, ReturnValue) == 0x000000, "Member 'BuildingFOBConfigActor_GetSelectedFOBCoreItemDefinition::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingFOBConfigActor.IsBuildingActorWithinFOB
// 0x0010 (0x0010 - 0x0000)
struct BuildingFOBConfigActor_IsBuildingActorWithinFOB final
{
public:
	class ABuildingActor*                         ActorToCheck;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingFOBConfigActor_IsBuildingActorWithinFOB) == 0x000008, "Wrong alignment on BuildingFOBConfigActor_IsBuildingActorWithinFOB");
static_assert(sizeof(BuildingFOBConfigActor_IsBuildingActorWithinFOB) == 0x000010, "Wrong size on BuildingFOBConfigActor_IsBuildingActorWithinFOB");
static_assert(offsetof(BuildingFOBConfigActor_IsBuildingActorWithinFOB, ActorToCheck) == 0x000000, "Member 'BuildingFOBConfigActor_IsBuildingActorWithinFOB::ActorToCheck' has a wrong offset!");
static_assert(offsetof(BuildingFOBConfigActor_IsBuildingActorWithinFOB, ReturnValue) == 0x000008, "Member 'BuildingFOBConfigActor_IsBuildingActorWithinFOB::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingFOBConfigActor.IsFinalized
// 0x0001 (0x0001 - 0x0000)
struct BuildingFOBConfigActor_IsFinalized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingFOBConfigActor_IsFinalized) == 0x000001, "Wrong alignment on BuildingFOBConfigActor_IsFinalized");
static_assert(sizeof(BuildingFOBConfigActor_IsFinalized) == 0x000001, "Wrong size on BuildingFOBConfigActor_IsFinalized");
static_assert(offsetof(BuildingFOBConfigActor_IsFinalized, ReturnValue) == 0x000000, "Member 'BuildingFOBConfigActor_IsFinalized::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingFOBConfigActor.IsInitialized
// 0x0001 (0x0001 - 0x0000)
struct BuildingFOBConfigActor_IsInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingFOBConfigActor_IsInitialized) == 0x000001, "Wrong alignment on BuildingFOBConfigActor_IsInitialized");
static_assert(sizeof(BuildingFOBConfigActor_IsInitialized) == 0x000001, "Wrong size on BuildingFOBConfigActor_IsInitialized");
static_assert(offsetof(BuildingFOBConfigActor_IsInitialized, ReturnValue) == 0x000000, "Member 'BuildingFOBConfigActor_IsInitialized::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingFOBConfigActor.IsPlayerControllerFOBOwner
// 0x0010 (0x0010 - 0x0000)
struct BuildingFOBConfigActor_IsPlayerControllerFOBOwner final
{
public:
	const class AFortPlayerController*            FortPC;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingFOBConfigActor_IsPlayerControllerFOBOwner) == 0x000008, "Wrong alignment on BuildingFOBConfigActor_IsPlayerControllerFOBOwner");
static_assert(sizeof(BuildingFOBConfigActor_IsPlayerControllerFOBOwner) == 0x000010, "Wrong size on BuildingFOBConfigActor_IsPlayerControllerFOBOwner");
static_assert(offsetof(BuildingFOBConfigActor_IsPlayerControllerFOBOwner, FortPC) == 0x000000, "Member 'BuildingFOBConfigActor_IsPlayerControllerFOBOwner::FortPC' has a wrong offset!");
static_assert(offsetof(BuildingFOBConfigActor_IsPlayerControllerFOBOwner, ReturnValue) == 0x000008, "Member 'BuildingFOBConfigActor_IsPlayerControllerFOBOwner::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerState.AreUniqueIDsIdentical
// 0x0058 (0x0058 - 0x0000)
struct FortPlayerState_AreUniqueIDsIdentical final
{
public:
	struct FUniqueNetIdRepl                       A;                                                 // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       B;                                                 // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerState_AreUniqueIDsIdentical) == 0x000008, "Wrong alignment on FortPlayerState_AreUniqueIDsIdentical");
static_assert(sizeof(FortPlayerState_AreUniqueIDsIdentical) == 0x000058, "Wrong size on FortPlayerState_AreUniqueIDsIdentical");
static_assert(offsetof(FortPlayerState_AreUniqueIDsIdentical, A) == 0x000000, "Member 'FortPlayerState_AreUniqueIDsIdentical::A' has a wrong offset!");
static_assert(offsetof(FortPlayerState_AreUniqueIDsIdentical, B) == 0x000028, "Member 'FortPlayerState_AreUniqueIDsIdentical::B' has a wrong offset!");
static_assert(offsetof(FortPlayerState_AreUniqueIDsIdentical, ReturnValue) == 0x000050, "Member 'FortPlayerState_AreUniqueIDsIdentical::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerState.GetCurrentPawn
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerState_GetCurrentPawn final
{
public:
	class AFortPlayerPawn*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerState_GetCurrentPawn) == 0x000008, "Wrong alignment on FortPlayerState_GetCurrentPawn");
static_assert(sizeof(FortPlayerState_GetCurrentPawn) == 0x000008, "Wrong size on FortPlayerState_GetCurrentPawn");
static_assert(offsetof(FortPlayerState_GetCurrentPawn, ReturnValue) == 0x000000, "Member 'FortPlayerState_GetCurrentPawn::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerState.OnRep_HomeActor
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerState_OnRep_HomeActor final
{
public:
	class AActor*                                 OldHomeActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerState_OnRep_HomeActor) == 0x000008, "Wrong alignment on FortPlayerState_OnRep_HomeActor");
static_assert(sizeof(FortPlayerState_OnRep_HomeActor) == 0x000008, "Wrong size on FortPlayerState_OnRep_HomeActor");
static_assert(offsetof(FortPlayerState_OnRep_HomeActor, OldHomeActor) == 0x000000, "Member 'FortPlayerState_OnRep_HomeActor::OldHomeActor' has a wrong offset!");

// Function FortniteGame.FortPlayerState.ServerSetShowHeroBackpack
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerState_ServerSetShowHeroBackpack final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerState_ServerSetShowHeroBackpack) == 0x000001, "Wrong alignment on FortPlayerState_ServerSetShowHeroBackpack");
static_assert(sizeof(FortPlayerState_ServerSetShowHeroBackpack) == 0x000001, "Wrong size on FortPlayerState_ServerSetShowHeroBackpack");
static_assert(offsetof(FortPlayerState_ServerSetShowHeroBackpack, bShow) == 0x000000, "Member 'FortPlayerState_ServerSetShowHeroBackpack::bShow' has a wrong offset!");

// Function FortniteGame.FortPlayerState.ServerSetShowHeroHeadAccessories
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerState_ServerSetShowHeroHeadAccessories final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerState_ServerSetShowHeroHeadAccessories) == 0x000001, "Wrong alignment on FortPlayerState_ServerSetShowHeroHeadAccessories");
static_assert(sizeof(FortPlayerState_ServerSetShowHeroHeadAccessories) == 0x000001, "Wrong size on FortPlayerState_ServerSetShowHeroHeadAccessories");
static_assert(offsetof(FortPlayerState_ServerSetShowHeroHeadAccessories, bShow) == 0x000000, "Member 'FortPlayerState_ServerSetShowHeroHeadAccessories::bShow' has a wrong offset!");

// Function FortniteGame.FortPlayerState.GetPlatformUniqueNetId
// 0x0028 (0x0028 - 0x0000)
struct FortPlayerState_GetPlatformUniqueNetId final
{
public:
	struct FUniqueNetIdRepl                       ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerState_GetPlatformUniqueNetId) == 0x000008, "Wrong alignment on FortPlayerState_GetPlatformUniqueNetId");
static_assert(sizeof(FortPlayerState_GetPlatformUniqueNetId) == 0x000028, "Wrong size on FortPlayerState_GetPlatformUniqueNetId");
static_assert(offsetof(FortPlayerState_GetPlatformUniqueNetId, ReturnValue) == 0x000000, "Member 'FortPlayerState_GetPlatformUniqueNetId::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerState.GetPlayerOSSName
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerState_GetPlayerOSSName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerState_GetPlayerOSSName) == 0x000004, "Wrong alignment on FortPlayerState_GetPlayerOSSName");
static_assert(sizeof(FortPlayerState_GetPlayerOSSName) == 0x000008, "Wrong size on FortPlayerState_GetPlayerOSSName");
static_assert(offsetof(FortPlayerState_GetPlayerOSSName, ReturnValue) == 0x000000, "Member 'FortPlayerState_GetPlayerOSSName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerState.GetUniqueID
// 0x0028 (0x0028 - 0x0000)
struct FortPlayerState_GetUniqueID final
{
public:
	struct FUniqueNetIdRepl                       ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerState_GetUniqueID) == 0x000008, "Wrong alignment on FortPlayerState_GetUniqueID");
static_assert(sizeof(FortPlayerState_GetUniqueID) == 0x000028, "Wrong size on FortPlayerState_GetUniqueID");
static_assert(offsetof(FortPlayerState_GetUniqueID, ReturnValue) == 0x000000, "Member 'FortPlayerState_GetUniqueID::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerState.IsConsolePlayer
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerState_IsConsolePlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerState_IsConsolePlayer) == 0x000001, "Wrong alignment on FortPlayerState_IsConsolePlayer");
static_assert(sizeof(FortPlayerState_IsConsolePlayer) == 0x000001, "Wrong size on FortPlayerState_IsConsolePlayer");
static_assert(offsetof(FortPlayerState_IsConsolePlayer, ReturnValue) == 0x000000, "Member 'FortPlayerState_IsConsolePlayer::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingFOBCoreActor.OnActiveStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct BuildingFOBCoreActor_OnActiveStatusChanged final
{
public:
	bool                                          bNewActiveStatus;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingFOBCoreActor_OnActiveStatusChanged) == 0x000001, "Wrong alignment on BuildingFOBCoreActor_OnActiveStatusChanged");
static_assert(sizeof(BuildingFOBCoreActor_OnActiveStatusChanged) == 0x000001, "Wrong size on BuildingFOBCoreActor_OnActiveStatusChanged");
static_assert(offsetof(BuildingFOBCoreActor_OnActiveStatusChanged, bNewActiveStatus) == 0x000000, "Member 'BuildingFOBCoreActor_OnActiveStatusChanged::bNewActiveStatus' has a wrong offset!");

// Function FortniteGame.BuildingFOBCoreActor.OnTargetableStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct BuildingFOBCoreActor_OnTargetableStatusChanged final
{
public:
	bool                                          bNewTargetableStatus;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingFOBCoreActor_OnTargetableStatusChanged) == 0x000001, "Wrong alignment on BuildingFOBCoreActor_OnTargetableStatusChanged");
static_assert(sizeof(BuildingFOBCoreActor_OnTargetableStatusChanged) == 0x000001, "Wrong size on BuildingFOBCoreActor_OnTargetableStatusChanged");
static_assert(offsetof(BuildingFOBCoreActor_OnTargetableStatusChanged, bNewTargetableStatus) == 0x000000, "Member 'BuildingFOBCoreActor_OnTargetableStatusChanged::bNewTargetableStatus' has a wrong offset!");

// Function FortniteGame.BuildingFOBCoreActor.OnVulnerableStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct BuildingFOBCoreActor_OnVulnerableStatusChanged final
{
public:
	bool                                          bNewTargetableStatus;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingFOBCoreActor_OnVulnerableStatusChanged) == 0x000001, "Wrong alignment on BuildingFOBCoreActor_OnVulnerableStatusChanged");
static_assert(sizeof(BuildingFOBCoreActor_OnVulnerableStatusChanged) == 0x000001, "Wrong size on BuildingFOBCoreActor_OnVulnerableStatusChanged");
static_assert(offsetof(BuildingFOBCoreActor_OnVulnerableStatusChanged, bNewTargetableStatus) == 0x000000, "Member 'BuildingFOBCoreActor_OnVulnerableStatusChanged::bNewTargetableStatus' has a wrong offset!");

// Function FortniteGame.BuildingFOBCoreActor.GetFOBBoundsBoxOverlappedActors
// 0x0018 (0x0018 - 0x0000)
struct BuildingFOBCoreActor_GetFOBBoundsBoxOverlappedActors final
{
public:
	TArray<class ABuildingSMActor*>               OverlappedActors;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bSortByDistanceFromCore;                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingFOBCoreActor_GetFOBBoundsBoxOverlappedActors) == 0x000008, "Wrong alignment on BuildingFOBCoreActor_GetFOBBoundsBoxOverlappedActors");
static_assert(sizeof(BuildingFOBCoreActor_GetFOBBoundsBoxOverlappedActors) == 0x000018, "Wrong size on BuildingFOBCoreActor_GetFOBBoundsBoxOverlappedActors");
static_assert(offsetof(BuildingFOBCoreActor_GetFOBBoundsBoxOverlappedActors, OverlappedActors) == 0x000000, "Member 'BuildingFOBCoreActor_GetFOBBoundsBoxOverlappedActors::OverlappedActors' has a wrong offset!");
static_assert(offsetof(BuildingFOBCoreActor_GetFOBBoundsBoxOverlappedActors, bSortByDistanceFromCore) == 0x000010, "Member 'BuildingFOBCoreActor_GetFOBBoundsBoxOverlappedActors::bSortByDistanceFromCore' has a wrong offset!");

// Function FortniteGame.BuildingFOBCoreActor.GetFOBBoundsCenterAndExtents
// 0x001C (0x001C - 0x0000)
struct BuildingFOBCoreActor_GetFOBBoundsCenterAndExtents final
{
public:
	struct FVector                                OutCenter;                                         // 0x0000(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutExtents;                                        // 0x000C(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingFOBCoreActor_GetFOBBoundsCenterAndExtents) == 0x000004, "Wrong alignment on BuildingFOBCoreActor_GetFOBBoundsCenterAndExtents");
static_assert(sizeof(BuildingFOBCoreActor_GetFOBBoundsCenterAndExtents) == 0x00001C, "Wrong size on BuildingFOBCoreActor_GetFOBBoundsCenterAndExtents");
static_assert(offsetof(BuildingFOBCoreActor_GetFOBBoundsCenterAndExtents, OutCenter) == 0x000000, "Member 'BuildingFOBCoreActor_GetFOBBoundsCenterAndExtents::OutCenter' has a wrong offset!");
static_assert(offsetof(BuildingFOBCoreActor_GetFOBBoundsCenterAndExtents, OutExtents) == 0x00000C, "Member 'BuildingFOBCoreActor_GetFOBBoundsCenterAndExtents::OutExtents' has a wrong offset!");
static_assert(offsetof(BuildingFOBCoreActor_GetFOBBoundsCenterAndExtents, ReturnValue) == 0x000018, "Member 'BuildingFOBCoreActor_GetFOBBoundsCenterAndExtents::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingFOBCoreActor.GetSimpleDeathFXTransform
// 0x0030 (0x0030 - 0x0000)
struct BuildingFOBCoreActor_GetSimpleDeathFXTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingFOBCoreActor_GetSimpleDeathFXTransform) == 0x000010, "Wrong alignment on BuildingFOBCoreActor_GetSimpleDeathFXTransform");
static_assert(sizeof(BuildingFOBCoreActor_GetSimpleDeathFXTransform) == 0x000030, "Wrong size on BuildingFOBCoreActor_GetSimpleDeathFXTransform");
static_assert(offsetof(BuildingFOBCoreActor_GetSimpleDeathFXTransform, ReturnValue) == 0x000000, "Member 'BuildingFOBCoreActor_GetSimpleDeathFXTransform::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingFOBCoreActor.IsActive
// 0x0001 (0x0001 - 0x0000)
struct BuildingFOBCoreActor_IsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingFOBCoreActor_IsActive) == 0x000001, "Wrong alignment on BuildingFOBCoreActor_IsActive");
static_assert(sizeof(BuildingFOBCoreActor_IsActive) == 0x000001, "Wrong size on BuildingFOBCoreActor_IsActive");
static_assert(offsetof(BuildingFOBCoreActor_IsActive, ReturnValue) == 0x000000, "Member 'BuildingFOBCoreActor_IsActive::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingFOBCoreActor.IsActorWithinFOBBounds
// 0x0010 (0x0010 - 0x0000)
struct BuildingFOBCoreActor_IsActorWithinFOBBounds final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingFOBCoreActor_IsActorWithinFOBBounds) == 0x000008, "Wrong alignment on BuildingFOBCoreActor_IsActorWithinFOBBounds");
static_assert(sizeof(BuildingFOBCoreActor_IsActorWithinFOBBounds) == 0x000010, "Wrong size on BuildingFOBCoreActor_IsActorWithinFOBBounds");
static_assert(offsetof(BuildingFOBCoreActor_IsActorWithinFOBBounds, Actor) == 0x000000, "Member 'BuildingFOBCoreActor_IsActorWithinFOBBounds::Actor' has a wrong offset!");
static_assert(offsetof(BuildingFOBCoreActor_IsActorWithinFOBBounds, ReturnValue) == 0x000008, "Member 'BuildingFOBCoreActor_IsActorWithinFOBBounds::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingFOBCoreSpawnPad.GetCoreSpawnTransform
// 0x0030 (0x0030 - 0x0000)
struct BuildingFOBCoreSpawnPad_GetCoreSpawnTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingFOBCoreSpawnPad_GetCoreSpawnTransform) == 0x000010, "Wrong alignment on BuildingFOBCoreSpawnPad_GetCoreSpawnTransform");
static_assert(sizeof(BuildingFOBCoreSpawnPad_GetCoreSpawnTransform) == 0x000030, "Wrong size on BuildingFOBCoreSpawnPad_GetCoreSpawnTransform");
static_assert(offsetof(BuildingFOBCoreSpawnPad_GetCoreSpawnTransform, ReturnValue) == 0x000000, "Member 'BuildingFOBCoreSpawnPad_GetCoreSpawnTransform::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerStateZone.GetNumOfAccumulatedItem
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerStateZone_GetNumOfAccumulatedItem final
{
public:
	const class UFortWorldItemDefinition*         ItemDefinition;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerStateZone_GetNumOfAccumulatedItem) == 0x000008, "Wrong alignment on FortPlayerStateZone_GetNumOfAccumulatedItem");
static_assert(sizeof(FortPlayerStateZone_GetNumOfAccumulatedItem) == 0x000010, "Wrong size on FortPlayerStateZone_GetNumOfAccumulatedItem");
static_assert(offsetof(FortPlayerStateZone_GetNumOfAccumulatedItem, ItemDefinition) == 0x000000, "Member 'FortPlayerStateZone_GetNumOfAccumulatedItem::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FortPlayerStateZone_GetNumOfAccumulatedItem, ReturnValue) == 0x000008, "Member 'FortPlayerStateZone_GetNumOfAccumulatedItem::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingItemCollectorActor.GetNumberOfTeamCaptures
// 0x0008 (0x0008 - 0x0000)
struct BuildingItemCollectorActor_GetNumberOfTeamCaptures final
{
public:
	EFortTeam                                     InTeam;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingItemCollectorActor_GetNumberOfTeamCaptures) == 0x000004, "Wrong alignment on BuildingItemCollectorActor_GetNumberOfTeamCaptures");
static_assert(sizeof(BuildingItemCollectorActor_GetNumberOfTeamCaptures) == 0x000008, "Wrong size on BuildingItemCollectorActor_GetNumberOfTeamCaptures");
static_assert(offsetof(BuildingItemCollectorActor_GetNumberOfTeamCaptures, InTeam) == 0x000000, "Member 'BuildingItemCollectorActor_GetNumberOfTeamCaptures::InTeam' has a wrong offset!");
static_assert(offsetof(BuildingItemCollectorActor_GetNumberOfTeamCaptures, ReturnValue) == 0x000004, "Member 'BuildingItemCollectorActor_GetNumberOfTeamCaptures::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingItemCollectorActor.GetTeamDepositAmount
// 0x0008 (0x0008 - 0x0000)
struct BuildingItemCollectorActor_GetTeamDepositAmount final
{
public:
	EFortTeam                                     InTeam;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingItemCollectorActor_GetTeamDepositAmount) == 0x000004, "Wrong alignment on BuildingItemCollectorActor_GetTeamDepositAmount");
static_assert(sizeof(BuildingItemCollectorActor_GetTeamDepositAmount) == 0x000008, "Wrong size on BuildingItemCollectorActor_GetTeamDepositAmount");
static_assert(offsetof(BuildingItemCollectorActor_GetTeamDepositAmount, InTeam) == 0x000000, "Member 'BuildingItemCollectorActor_GetTeamDepositAmount::InTeam' has a wrong offset!");
static_assert(offsetof(BuildingItemCollectorActor_GetTeamDepositAmount, ReturnValue) == 0x000004, "Member 'BuildingItemCollectorActor_GetTeamDepositAmount::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingItemCollectorActor.GetTeamDepositGoal
// 0x0008 (0x0008 - 0x0000)
struct BuildingItemCollectorActor_GetTeamDepositGoal final
{
public:
	EFortTeam                                     InTeam;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingItemCollectorActor_GetTeamDepositGoal) == 0x000004, "Wrong alignment on BuildingItemCollectorActor_GetTeamDepositGoal");
static_assert(sizeof(BuildingItemCollectorActor_GetTeamDepositGoal) == 0x000008, "Wrong size on BuildingItemCollectorActor_GetTeamDepositGoal");
static_assert(offsetof(BuildingItemCollectorActor_GetTeamDepositGoal, InTeam) == 0x000000, "Member 'BuildingItemCollectorActor_GetTeamDepositGoal::InTeam' has a wrong offset!");
static_assert(offsetof(BuildingItemCollectorActor_GetTeamDepositGoal, ReturnValue) == 0x000004, "Member 'BuildingItemCollectorActor_GetTeamDepositGoal::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingItemCollectorActor.GetTeamReachedGoalCount
// 0x0008 (0x0008 - 0x0000)
struct BuildingItemCollectorActor_GetTeamReachedGoalCount final
{
public:
	EFortTeam                                     InTeam;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingItemCollectorActor_GetTeamReachedGoalCount) == 0x000004, "Wrong alignment on BuildingItemCollectorActor_GetTeamReachedGoalCount");
static_assert(sizeof(BuildingItemCollectorActor_GetTeamReachedGoalCount) == 0x000008, "Wrong size on BuildingItemCollectorActor_GetTeamReachedGoalCount");
static_assert(offsetof(BuildingItemCollectorActor_GetTeamReachedGoalCount, InTeam) == 0x000000, "Member 'BuildingItemCollectorActor_GetTeamReachedGoalCount::InTeam' has a wrong offset!");
static_assert(offsetof(BuildingItemCollectorActor_GetTeamReachedGoalCount, ReturnValue) == 0x000004, "Member 'BuildingItemCollectorActor_GetTeamReachedGoalCount::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingItemCollectorActor.OnItemCollectorStateChanged
// 0x0001 (0x0001 - 0x0000)
struct BuildingItemCollectorActor_OnItemCollectorStateChanged final
{
public:
	EFortItemCollectorState                       InItemCollectorState;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingItemCollectorActor_OnItemCollectorStateChanged) == 0x000001, "Wrong alignment on BuildingItemCollectorActor_OnItemCollectorStateChanged");
static_assert(sizeof(BuildingItemCollectorActor_OnItemCollectorStateChanged) == 0x000001, "Wrong size on BuildingItemCollectorActor_OnItemCollectorStateChanged");
static_assert(offsetof(BuildingItemCollectorActor_OnItemCollectorStateChanged, InItemCollectorState) == 0x000000, "Member 'BuildingItemCollectorActor_OnItemCollectorStateChanged::InItemCollectorState' has a wrong offset!");

// Function FortniteGame.BuildingItemCollectorActor.OnTeamReachedDepositGoal
// 0x0001 (0x0001 - 0x0000)
struct BuildingItemCollectorActor_OnTeamReachedDepositGoal final
{
public:
	EFortTeam                                     InControllingTeam;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingItemCollectorActor_OnTeamReachedDepositGoal) == 0x000001, "Wrong alignment on BuildingItemCollectorActor_OnTeamReachedDepositGoal");
static_assert(sizeof(BuildingItemCollectorActor_OnTeamReachedDepositGoal) == 0x000001, "Wrong size on BuildingItemCollectorActor_OnTeamReachedDepositGoal");
static_assert(offsetof(BuildingItemCollectorActor_OnTeamReachedDepositGoal, InControllingTeam) == 0x000000, "Member 'BuildingItemCollectorActor_OnTeamReachedDepositGoal::InControllingTeam' has a wrong offset!");

// Function FortniteGame.BuildingItemCollectorActor.SetItemCollectorState
// 0x0001 (0x0001 - 0x0000)
struct BuildingItemCollectorActor_SetItemCollectorState final
{
public:
	EFortItemCollectorState                       InItemCollectorState;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingItemCollectorActor_SetItemCollectorState) == 0x000001, "Wrong alignment on BuildingItemCollectorActor_SetItemCollectorState");
static_assert(sizeof(BuildingItemCollectorActor_SetItemCollectorState) == 0x000001, "Wrong size on BuildingItemCollectorActor_SetItemCollectorState");
static_assert(offsetof(BuildingItemCollectorActor_SetItemCollectorState, InItemCollectorState) == 0x000000, "Member 'BuildingItemCollectorActor_SetItemCollectorState::InItemCollectorState' has a wrong offset!");

// Function FortniteGame.BuildingItemCollectorActor.UpdateTeamDepositValues
// 0x0020 (0x0020 - 0x0000)
struct BuildingItemCollectorActor_UpdateTeamDepositValues final
{
public:
	TArray<int32>                                 DepositAmounts;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 DepositGoals;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingItemCollectorActor_UpdateTeamDepositValues) == 0x000008, "Wrong alignment on BuildingItemCollectorActor_UpdateTeamDepositValues");
static_assert(sizeof(BuildingItemCollectorActor_UpdateTeamDepositValues) == 0x000020, "Wrong size on BuildingItemCollectorActor_UpdateTeamDepositValues");
static_assert(offsetof(BuildingItemCollectorActor_UpdateTeamDepositValues, DepositAmounts) == 0x000000, "Member 'BuildingItemCollectorActor_UpdateTeamDepositValues::DepositAmounts' has a wrong offset!");
static_assert(offsetof(BuildingItemCollectorActor_UpdateTeamDepositValues, DepositGoals) == 0x000010, "Member 'BuildingItemCollectorActor_UpdateTeamDepositValues::DepositGoals' has a wrong offset!");

// Function FortniteGame.FortPlayerStateOutpost.ServerSetCanEditOutpost
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerStateOutpost_ServerSetCanEditOutpost final
{
public:
	class AFortPlayerStateOutpost*                InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanEdit;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerStateOutpost_ServerSetCanEditOutpost) == 0x000008, "Wrong alignment on FortPlayerStateOutpost_ServerSetCanEditOutpost");
static_assert(sizeof(FortPlayerStateOutpost_ServerSetCanEditOutpost) == 0x000010, "Wrong size on FortPlayerStateOutpost_ServerSetCanEditOutpost");
static_assert(offsetof(FortPlayerStateOutpost_ServerSetCanEditOutpost, InPlayer) == 0x000000, "Member 'FortPlayerStateOutpost_ServerSetCanEditOutpost::InPlayer' has a wrong offset!");
static_assert(offsetof(FortPlayerStateOutpost_ServerSetCanEditOutpost, bCanEdit) == 0x000008, "Member 'FortPlayerStateOutpost_ServerSetCanEditOutpost::bCanEdit' has a wrong offset!");

// Function FortniteGame.FortPlayerStateOutpost.SetCanEditOutpost
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerStateOutpost_SetCanEditOutpost final
{
public:
	class AFortPlayerStateOutpost*                InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanEdit;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerStateOutpost_SetCanEditOutpost) == 0x000008, "Wrong alignment on FortPlayerStateOutpost_SetCanEditOutpost");
static_assert(sizeof(FortPlayerStateOutpost_SetCanEditOutpost) == 0x000010, "Wrong size on FortPlayerStateOutpost_SetCanEditOutpost");
static_assert(offsetof(FortPlayerStateOutpost_SetCanEditOutpost, InPlayer) == 0x000000, "Member 'FortPlayerStateOutpost_SetCanEditOutpost::InPlayer' has a wrong offset!");
static_assert(offsetof(FortPlayerStateOutpost_SetCanEditOutpost, bCanEdit) == 0x000008, "Member 'FortPlayerStateOutpost_SetCanEditOutpost::bCanEdit' has a wrong offset!");

// Function FortniteGame.FortPlayerStateOutpost.CanEditOutpost
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerStateOutpost_CanEditOutpost final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerStateOutpost_CanEditOutpost) == 0x000001, "Wrong alignment on FortPlayerStateOutpost_CanEditOutpost");
static_assert(sizeof(FortPlayerStateOutpost_CanEditOutpost) == 0x000001, "Wrong size on FortPlayerStateOutpost_CanEditOutpost");
static_assert(offsetof(FortPlayerStateOutpost_CanEditOutpost, ReturnValue) == 0x000000, "Member 'FortPlayerStateOutpost_CanEditOutpost::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerStateOutpost.IsOutpostOwner
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerStateOutpost_IsOutpostOwner final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerStateOutpost_IsOutpostOwner) == 0x000001, "Wrong alignment on FortPlayerStateOutpost_IsOutpostOwner");
static_assert(sizeof(FortPlayerStateOutpost_IsOutpostOwner) == 0x000001, "Wrong size on FortPlayerStateOutpost_IsOutpostOwner");
static_assert(offsetof(FortPlayerStateOutpost_IsOutpostOwner, ReturnValue) == 0x000000, "Member 'FortPlayerStateOutpost_IsOutpostOwner::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingLayoutRequirement.ActivateRequirement
// 0x0001 (0x0001 - 0x0000)
struct BuildingLayoutRequirement_ActivateRequirement final
{
public:
	bool                                          bMakeVisible;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingLayoutRequirement_ActivateRequirement) == 0x000001, "Wrong alignment on BuildingLayoutRequirement_ActivateRequirement");
static_assert(sizeof(BuildingLayoutRequirement_ActivateRequirement) == 0x000001, "Wrong size on BuildingLayoutRequirement_ActivateRequirement");
static_assert(offsetof(BuildingLayoutRequirement_ActivateRequirement, bMakeVisible) == 0x000000, "Member 'BuildingLayoutRequirement_ActivateRequirement::bMakeVisible' has a wrong offset!");

// Function FortniteGame.BuildingLayoutRequirement.OnRequirementSatisfyingActorDied
// 0x0050 (0x0050 - 0x0000)
struct BuildingLayoutRequirement_OnRequirementSatisfyingActorDied final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0030(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Momentum;                                          // 0x0040(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingLayoutRequirement_OnRequirementSatisfyingActorDied) == 0x000008, "Wrong alignment on BuildingLayoutRequirement_OnRequirementSatisfyingActorDied");
static_assert(sizeof(BuildingLayoutRequirement_OnRequirementSatisfyingActorDied) == 0x000050, "Wrong size on BuildingLayoutRequirement_OnRequirementSatisfyingActorDied");
static_assert(offsetof(BuildingLayoutRequirement_OnRequirementSatisfyingActorDied, DamagedActor) == 0x000000, "Member 'BuildingLayoutRequirement_OnRequirementSatisfyingActorDied::DamagedActor' has a wrong offset!");
static_assert(offsetof(BuildingLayoutRequirement_OnRequirementSatisfyingActorDied, Damage) == 0x000008, "Member 'BuildingLayoutRequirement_OnRequirementSatisfyingActorDied::Damage' has a wrong offset!");
static_assert(offsetof(BuildingLayoutRequirement_OnRequirementSatisfyingActorDied, InstigatedBy) == 0x000010, "Member 'BuildingLayoutRequirement_OnRequirementSatisfyingActorDied::InstigatedBy' has a wrong offset!");
static_assert(offsetof(BuildingLayoutRequirement_OnRequirementSatisfyingActorDied, DamageCauser) == 0x000018, "Member 'BuildingLayoutRequirement_OnRequirementSatisfyingActorDied::DamageCauser' has a wrong offset!");
static_assert(offsetof(BuildingLayoutRequirement_OnRequirementSatisfyingActorDied, HitLocation) == 0x000020, "Member 'BuildingLayoutRequirement_OnRequirementSatisfyingActorDied::HitLocation' has a wrong offset!");
static_assert(offsetof(BuildingLayoutRequirement_OnRequirementSatisfyingActorDied, FHitComponent) == 0x000030, "Member 'BuildingLayoutRequirement_OnRequirementSatisfyingActorDied::FHitComponent' has a wrong offset!");
static_assert(offsetof(BuildingLayoutRequirement_OnRequirementSatisfyingActorDied, BoneName) == 0x000038, "Member 'BuildingLayoutRequirement_OnRequirementSatisfyingActorDied::BoneName' has a wrong offset!");
static_assert(offsetof(BuildingLayoutRequirement_OnRequirementSatisfyingActorDied, Momentum) == 0x000040, "Member 'BuildingLayoutRequirement_OnRequirementSatisfyingActorDied::Momentum' has a wrong offset!");

// Function FortniteGame.BuildingLayoutRequirement.SetRequiredResourceType
// 0x0001 (0x0001 - 0x0000)
struct BuildingLayoutRequirement_SetRequiredResourceType final
{
public:
	EFortResourceType                             DesiredResourceType;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingLayoutRequirement_SetRequiredResourceType) == 0x000001, "Wrong alignment on BuildingLayoutRequirement_SetRequiredResourceType");
static_assert(sizeof(BuildingLayoutRequirement_SetRequiredResourceType) == 0x000001, "Wrong size on BuildingLayoutRequirement_SetRequiredResourceType");
static_assert(offsetof(BuildingLayoutRequirement_SetRequiredResourceType, DesiredResourceType) == 0x000000, "Member 'BuildingLayoutRequirement_SetRequiredResourceType::DesiredResourceType' has a wrong offset!");

// Function FortniteGame.BuildingLayoutRequirement.SetRequirementVisible
// 0x0001 (0x0001 - 0x0000)
struct BuildingLayoutRequirement_SetRequirementVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingLayoutRequirement_SetRequirementVisible) == 0x000001, "Wrong alignment on BuildingLayoutRequirement_SetRequirementVisible");
static_assert(sizeof(BuildingLayoutRequirement_SetRequirementVisible) == 0x000001, "Wrong size on BuildingLayoutRequirement_SetRequirementVisible");
static_assert(offsetof(BuildingLayoutRequirement_SetRequirementVisible, bVisible) == 0x000000, "Member 'BuildingLayoutRequirement_SetRequirementVisible::bVisible' has a wrong offset!");

// Function FortniteGame.FortDateTimeLibrary.GetMcpRelativeUtcNow
// 0x0010 (0x0010 - 0x0000)
struct FortDateTimeLibrary_GetMcpRelativeUtcNow final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDateTimeLibrary_GetMcpRelativeUtcNow) == 0x000008, "Wrong alignment on FortDateTimeLibrary_GetMcpRelativeUtcNow");
static_assert(sizeof(FortDateTimeLibrary_GetMcpRelativeUtcNow) == 0x000010, "Wrong size on FortDateTimeLibrary_GetMcpRelativeUtcNow");
static_assert(offsetof(FortDateTimeLibrary_GetMcpRelativeUtcNow, FortPC) == 0x000000, "Member 'FortDateTimeLibrary_GetMcpRelativeUtcNow::FortPC' has a wrong offset!");
static_assert(offsetof(FortDateTimeLibrary_GetMcpRelativeUtcNow, ReturnValue) == 0x000008, "Member 'FortDateTimeLibrary_GetMcpRelativeUtcNow::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDateTimeLibrary.GetTimespanAsText
// 0x0028 (0x0028 - 0x0000)
struct FortDateTimeLibrary_GetTimespanAsText final
{
public:
	struct FTimespan                              Timespan;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowSeconds;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETimespanAsTextFormat                         FormatType;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDateTimeLibrary_GetTimespanAsText) == 0x000008, "Wrong alignment on FortDateTimeLibrary_GetTimespanAsText");
static_assert(sizeof(FortDateTimeLibrary_GetTimespanAsText) == 0x000028, "Wrong size on FortDateTimeLibrary_GetTimespanAsText");
static_assert(offsetof(FortDateTimeLibrary_GetTimespanAsText, Timespan) == 0x000000, "Member 'FortDateTimeLibrary_GetTimespanAsText::Timespan' has a wrong offset!");
static_assert(offsetof(FortDateTimeLibrary_GetTimespanAsText, bShowSeconds) == 0x000008, "Member 'FortDateTimeLibrary_GetTimespanAsText::bShowSeconds' has a wrong offset!");
static_assert(offsetof(FortDateTimeLibrary_GetTimespanAsText, FormatType) == 0x000009, "Member 'FortDateTimeLibrary_GetTimespanAsText::FormatType' has a wrong offset!");
static_assert(offsetof(FortDateTimeLibrary_GetTimespanAsText, ReturnValue) == 0x000010, "Member 'FortDateTimeLibrary_GetTimespanAsText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHealthRegenInterface.GetHealthRegenDelayGameplayEffect
// 0x0008 (0x0008 - 0x0000)
struct FortHealthRegenInterface_GetHealthRegenDelayGameplayEffect final
{
public:
	class UGameplayEffect*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHealthRegenInterface_GetHealthRegenDelayGameplayEffect) == 0x000008, "Wrong alignment on FortHealthRegenInterface_GetHealthRegenDelayGameplayEffect");
static_assert(sizeof(FortHealthRegenInterface_GetHealthRegenDelayGameplayEffect) == 0x000008, "Wrong size on FortHealthRegenInterface_GetHealthRegenDelayGameplayEffect");
static_assert(offsetof(FortHealthRegenInterface_GetHealthRegenDelayGameplayEffect, ReturnValue) == 0x000000, "Member 'FortHealthRegenInterface_GetHealthRegenDelayGameplayEffect::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHealthRegenInterface.GetHealthRegenGameplayEffect
// 0x0008 (0x0008 - 0x0000)
struct FortHealthRegenInterface_GetHealthRegenGameplayEffect final
{
public:
	class UGameplayEffect*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHealthRegenInterface_GetHealthRegenGameplayEffect) == 0x000008, "Wrong alignment on FortHealthRegenInterface_GetHealthRegenGameplayEffect");
static_assert(sizeof(FortHealthRegenInterface_GetHealthRegenGameplayEffect) == 0x000008, "Wrong size on FortHealthRegenInterface_GetHealthRegenGameplayEffect");
static_assert(offsetof(FortHealthRegenInterface_GetHealthRegenGameplayEffect, ReturnValue) == 0x000000, "Member 'FortHealthRegenInterface_GetHealthRegenGameplayEffect::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHealthRegenInterface.GetHealthRegenGameplayEffectClass
// 0x0008 (0x0008 - 0x0000)
struct FortHealthRegenInterface_GetHealthRegenGameplayEffectClass final
{
public:
	TSubclassOf<class UGameplayEffect>            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHealthRegenInterface_GetHealthRegenGameplayEffectClass) == 0x000008, "Wrong alignment on FortHealthRegenInterface_GetHealthRegenGameplayEffectClass");
static_assert(sizeof(FortHealthRegenInterface_GetHealthRegenGameplayEffectClass) == 0x000008, "Wrong size on FortHealthRegenInterface_GetHealthRegenGameplayEffectClass");
static_assert(offsetof(FortHealthRegenInterface_GetHealthRegenGameplayEffectClass, ReturnValue) == 0x000000, "Member 'FortHealthRegenInterface_GetHealthRegenGameplayEffectClass::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHealthRegenInterface.GetShieldRegenDelayGameplayEffect
// 0x0008 (0x0008 - 0x0000)
struct FortHealthRegenInterface_GetShieldRegenDelayGameplayEffect final
{
public:
	class UGameplayEffect*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHealthRegenInterface_GetShieldRegenDelayGameplayEffect) == 0x000008, "Wrong alignment on FortHealthRegenInterface_GetShieldRegenDelayGameplayEffect");
static_assert(sizeof(FortHealthRegenInterface_GetShieldRegenDelayGameplayEffect) == 0x000008, "Wrong size on FortHealthRegenInterface_GetShieldRegenDelayGameplayEffect");
static_assert(offsetof(FortHealthRegenInterface_GetShieldRegenDelayGameplayEffect, ReturnValue) == 0x000000, "Member 'FortHealthRegenInterface_GetShieldRegenDelayGameplayEffect::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHealthRegenInterface.GetShieldRegenGameplayEffect
// 0x0008 (0x0008 - 0x0000)
struct FortHealthRegenInterface_GetShieldRegenGameplayEffect final
{
public:
	class UGameplayEffect*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHealthRegenInterface_GetShieldRegenGameplayEffect) == 0x000008, "Wrong alignment on FortHealthRegenInterface_GetShieldRegenGameplayEffect");
static_assert(sizeof(FortHealthRegenInterface_GetShieldRegenGameplayEffect) == 0x000008, "Wrong size on FortHealthRegenInterface_GetShieldRegenGameplayEffect");
static_assert(offsetof(FortHealthRegenInterface_GetShieldRegenGameplayEffect, ReturnValue) == 0x000000, "Member 'FortHealthRegenInterface_GetShieldRegenGameplayEffect::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHealthRegenInterface.GetShieldRegenGameplayEffectClass
// 0x0008 (0x0008 - 0x0000)
struct FortHealthRegenInterface_GetShieldRegenGameplayEffectClass final
{
public:
	TSubclassOf<class UGameplayEffect>            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHealthRegenInterface_GetShieldRegenGameplayEffectClass) == 0x000008, "Wrong alignment on FortHealthRegenInterface_GetShieldRegenGameplayEffectClass");
static_assert(sizeof(FortHealthRegenInterface_GetShieldRegenGameplayEffectClass) == 0x000008, "Wrong size on FortHealthRegenInterface_GetShieldRegenGameplayEffectClass");
static_assert(offsetof(FortHealthRegenInterface_GetShieldRegenGameplayEffectClass, ReturnValue) == 0x000000, "Member 'FortHealthRegenInterface_GetShieldRegenGameplayEffectClass::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingPropAtlas.InitializeAudio
// 0x0008 (0x0008 - 0x0000)
struct BuildingPropAtlas_InitializeAudio final
{
public:
	class UAudioComponent*                        InPortalLoopingComp;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingPropAtlas_InitializeAudio) == 0x000008, "Wrong alignment on BuildingPropAtlas_InitializeAudio");
static_assert(sizeof(BuildingPropAtlas_InitializeAudio) == 0x000008, "Wrong size on BuildingPropAtlas_InitializeAudio");
static_assert(offsetof(BuildingPropAtlas_InitializeAudio, InPortalLoopingComp) == 0x000000, "Member 'BuildingPropAtlas_InitializeAudio::InPortalLoopingComp' has a wrong offset!");

// Function FortniteGame.BuildingPropAtlas.InitializeRings
// 0x0018 (0x0018 - 0x0000)
struct BuildingPropAtlas_InitializeRings final
{
public:
	class UPrimitiveComponent*                    InRing1Comp;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    InRing2Comp;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    InRing3Comp;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingPropAtlas_InitializeRings) == 0x000008, "Wrong alignment on BuildingPropAtlas_InitializeRings");
static_assert(sizeof(BuildingPropAtlas_InitializeRings) == 0x000018, "Wrong size on BuildingPropAtlas_InitializeRings");
static_assert(offsetof(BuildingPropAtlas_InitializeRings, InRing1Comp) == 0x000000, "Member 'BuildingPropAtlas_InitializeRings::InRing1Comp' has a wrong offset!");
static_assert(offsetof(BuildingPropAtlas_InitializeRings, InRing2Comp) == 0x000008, "Member 'BuildingPropAtlas_InitializeRings::InRing2Comp' has a wrong offset!");
static_assert(offsetof(BuildingPropAtlas_InitializeRings, InRing3Comp) == 0x000010, "Member 'BuildingPropAtlas_InitializeRings::InRing3Comp' has a wrong offset!");

// Function FortniteGame.BuildingPropAtlas.PlayRingDamage
// 0x0010 (0x0010 - 0x0000)
struct BuildingPropAtlas_PlayRingDamage final
{
public:
	float                                         DurationMin;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationMax;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MagnitudeMin;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MagnitudeMax;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingPropAtlas_PlayRingDamage) == 0x000004, "Wrong alignment on BuildingPropAtlas_PlayRingDamage");
static_assert(sizeof(BuildingPropAtlas_PlayRingDamage) == 0x000010, "Wrong size on BuildingPropAtlas_PlayRingDamage");
static_assert(offsetof(BuildingPropAtlas_PlayRingDamage, DurationMin) == 0x000000, "Member 'BuildingPropAtlas_PlayRingDamage::DurationMin' has a wrong offset!");
static_assert(offsetof(BuildingPropAtlas_PlayRingDamage, DurationMax) == 0x000004, "Member 'BuildingPropAtlas_PlayRingDamage::DurationMax' has a wrong offset!");
static_assert(offsetof(BuildingPropAtlas_PlayRingDamage, MagnitudeMin) == 0x000008, "Member 'BuildingPropAtlas_PlayRingDamage::MagnitudeMin' has a wrong offset!");
static_assert(offsetof(BuildingPropAtlas_PlayRingDamage, MagnitudeMax) == 0x00000C, "Member 'BuildingPropAtlas_PlayRingDamage::MagnitudeMax' has a wrong offset!");

// Function FortniteGame.BuildingPropAtlas.PlayRingsIdleLoop
// 0x0008 (0x0008 - 0x0000)
struct BuildingPropAtlas_PlayRingsIdleLoop final
{
public:
	float                                         AnimDuration;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ring1ZOffset;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingPropAtlas_PlayRingsIdleLoop) == 0x000004, "Wrong alignment on BuildingPropAtlas_PlayRingsIdleLoop");
static_assert(sizeof(BuildingPropAtlas_PlayRingsIdleLoop) == 0x000008, "Wrong size on BuildingPropAtlas_PlayRingsIdleLoop");
static_assert(offsetof(BuildingPropAtlas_PlayRingsIdleLoop, AnimDuration) == 0x000000, "Member 'BuildingPropAtlas_PlayRingsIdleLoop::AnimDuration' has a wrong offset!");
static_assert(offsetof(BuildingPropAtlas_PlayRingsIdleLoop, Ring1ZOffset) == 0x000004, "Member 'BuildingPropAtlas_PlayRingsIdleLoop::Ring1ZOffset' has a wrong offset!");

// Function FortniteGame.BuildingPropAtlas.PlayRingSpinning
// 0x0030 (0x0030 - 0x0000)
struct BuildingPropAtlas_PlayRingSpinning final
{
public:
	struct FRotator                               Ring1RateMin;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               Ring1RateMax;                                      // 0x000C(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               Ring2Rate;                                         // 0x0018(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               Ring3Rate;                                         // 0x0024(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingPropAtlas_PlayRingSpinning) == 0x000004, "Wrong alignment on BuildingPropAtlas_PlayRingSpinning");
static_assert(sizeof(BuildingPropAtlas_PlayRingSpinning) == 0x000030, "Wrong size on BuildingPropAtlas_PlayRingSpinning");
static_assert(offsetof(BuildingPropAtlas_PlayRingSpinning, Ring1RateMin) == 0x000000, "Member 'BuildingPropAtlas_PlayRingSpinning::Ring1RateMin' has a wrong offset!");
static_assert(offsetof(BuildingPropAtlas_PlayRingSpinning, Ring1RateMax) == 0x00000C, "Member 'BuildingPropAtlas_PlayRingSpinning::Ring1RateMax' has a wrong offset!");
static_assert(offsetof(BuildingPropAtlas_PlayRingSpinning, Ring2Rate) == 0x000018, "Member 'BuildingPropAtlas_PlayRingSpinning::Ring2Rate' has a wrong offset!");
static_assert(offsetof(BuildingPropAtlas_PlayRingSpinning, Ring3Rate) == 0x000024, "Member 'BuildingPropAtlas_PlayRingSpinning::Ring3Rate' has a wrong offset!");

// Function FortniteGame.BuildingPropAtlas.PlayRingsReset
// 0x0004 (0x0004 - 0x0000)
struct BuildingPropAtlas_PlayRingsReset final
{
public:
	float                                         AnimDuration;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingPropAtlas_PlayRingsReset) == 0x000004, "Wrong alignment on BuildingPropAtlas_PlayRingsReset");
static_assert(sizeof(BuildingPropAtlas_PlayRingsReset) == 0x000004, "Wrong size on BuildingPropAtlas_PlayRingsReset");
static_assert(offsetof(BuildingPropAtlas_PlayRingsReset, AnimDuration) == 0x000000, "Member 'BuildingPropAtlas_PlayRingsReset::AnimDuration' has a wrong offset!");

// Function FortniteGame.BuildingPropAtlas.SetupAnimationSpeed
// 0x0010 (0x0010 - 0x0000)
struct BuildingPropAtlas_SetupAnimationSpeed final
{
public:
	float                                         InActivationTime;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTotalDefenseTime;                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAnimSpeedStart;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAnimSpeedEnd;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingPropAtlas_SetupAnimationSpeed) == 0x000004, "Wrong alignment on BuildingPropAtlas_SetupAnimationSpeed");
static_assert(sizeof(BuildingPropAtlas_SetupAnimationSpeed) == 0x000010, "Wrong size on BuildingPropAtlas_SetupAnimationSpeed");
static_assert(offsetof(BuildingPropAtlas_SetupAnimationSpeed, InActivationTime) == 0x000000, "Member 'BuildingPropAtlas_SetupAnimationSpeed::InActivationTime' has a wrong offset!");
static_assert(offsetof(BuildingPropAtlas_SetupAnimationSpeed, InTotalDefenseTime) == 0x000004, "Member 'BuildingPropAtlas_SetupAnimationSpeed::InTotalDefenseTime' has a wrong offset!");
static_assert(offsetof(BuildingPropAtlas_SetupAnimationSpeed, InAnimSpeedStart) == 0x000008, "Member 'BuildingPropAtlas_SetupAnimationSpeed::InAnimSpeedStart' has a wrong offset!");
static_assert(offsetof(BuildingPropAtlas_SetupAnimationSpeed, InAnimSpeedEnd) == 0x00000C, "Member 'BuildingPropAtlas_SetupAnimationSpeed::InAnimSpeedEnd' has a wrong offset!");

// Function FortniteGame.BuildingPropAtlas.SetupAnimationTransition
// 0x0018 (0x0018 - 0x0000)
struct BuildingPropAtlas_SetupAnimationTransition final
{
public:
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParamName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTransitionTime;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingPropAtlas_SetupAnimationTransition) == 0x000008, "Wrong alignment on BuildingPropAtlas_SetupAnimationTransition");
static_assert(sizeof(BuildingPropAtlas_SetupAnimationTransition) == 0x000018, "Wrong size on BuildingPropAtlas_SetupAnimationTransition");
static_assert(offsetof(BuildingPropAtlas_SetupAnimationTransition, Mid) == 0x000000, "Member 'BuildingPropAtlas_SetupAnimationTransition::Mid' has a wrong offset!");
static_assert(offsetof(BuildingPropAtlas_SetupAnimationTransition, ParamName) == 0x000008, "Member 'BuildingPropAtlas_SetupAnimationTransition::ParamName' has a wrong offset!");
static_assert(offsetof(BuildingPropAtlas_SetupAnimationTransition, InTransitionTime) == 0x000010, "Member 'BuildingPropAtlas_SetupAnimationTransition::InTransitionTime' has a wrong offset!");

// Function FortniteGame.BuildingPropAtlas.GetDefenseAnimSpeed
// 0x0004 (0x0004 - 0x0000)
struct BuildingPropAtlas_GetDefenseAnimSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingPropAtlas_GetDefenseAnimSpeed) == 0x000004, "Wrong alignment on BuildingPropAtlas_GetDefenseAnimSpeed");
static_assert(sizeof(BuildingPropAtlas_GetDefenseAnimSpeed) == 0x000004, "Wrong size on BuildingPropAtlas_GetDefenseAnimSpeed");
static_assert(offsetof(BuildingPropAtlas_GetDefenseAnimSpeed, ReturnValue) == 0x000000, "Member 'BuildingPropAtlas_GetDefenseAnimSpeed::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingPropAtlas.GetDefenseProgress
// 0x0004 (0x0004 - 0x0000)
struct BuildingPropAtlas_GetDefenseProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingPropAtlas_GetDefenseProgress) == 0x000004, "Wrong alignment on BuildingPropAtlas_GetDefenseProgress");
static_assert(sizeof(BuildingPropAtlas_GetDefenseProgress) == 0x000004, "Wrong size on BuildingPropAtlas_GetDefenseProgress");
static_assert(offsetof(BuildingPropAtlas_GetDefenseProgress, ReturnValue) == 0x000000, "Member 'BuildingPropAtlas_GetDefenseProgress::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPatrolWardInterface.GetAffectingDistance
// 0x0004 (0x0004 - 0x0000)
struct FortPatrolWardInterface_GetAffectingDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPatrolWardInterface_GetAffectingDistance) == 0x000004, "Wrong alignment on FortPatrolWardInterface_GetAffectingDistance");
static_assert(sizeof(FortPatrolWardInterface_GetAffectingDistance) == 0x000004, "Wrong size on FortPatrolWardInterface_GetAffectingDistance");
static_assert(offsetof(FortPatrolWardInterface_GetAffectingDistance, ReturnValue) == 0x000000, "Member 'FortPatrolWardInterface_GetAffectingDistance::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPatrolWardInterface.GetAffectingType
// 0x0001 (0x0001 - 0x0000)
struct FortPatrolWardInterface_GetAffectingType final
{
public:
	EWardAffectType                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPatrolWardInterface_GetAffectingType) == 0x000001, "Wrong alignment on FortPatrolWardInterface_GetAffectingType");
static_assert(sizeof(FortPatrolWardInterface_GetAffectingType) == 0x000001, "Wrong size on FortPatrolWardInterface_GetAffectingType");
static_assert(offsetof(FortPatrolWardInterface_GetAffectingType, ReturnValue) == 0x000000, "Member 'FortPatrolWardInterface_GetAffectingType::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDecoPreview.CreatePreviewMID
// 0x0010 (0x0010 - 0x0000)
struct FortDecoPreview_CreatePreviewMID final
{
public:
	class UMaterialInterface*                     OverrideParentMaterial;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoPreview_CreatePreviewMID) == 0x000008, "Wrong alignment on FortDecoPreview_CreatePreviewMID");
static_assert(sizeof(FortDecoPreview_CreatePreviewMID) == 0x000010, "Wrong size on FortDecoPreview_CreatePreviewMID");
static_assert(offsetof(FortDecoPreview_CreatePreviewMID, OverrideParentMaterial) == 0x000000, "Member 'FortDecoPreview_CreatePreviewMID::OverrideParentMaterial' has a wrong offset!");
static_assert(offsetof(FortDecoPreview_CreatePreviewMID, ReturnValue) == 0x000008, "Member 'FortDecoPreview_CreatePreviewMID::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDecoPreview.GetTextureParameterValueFromMeshComponent
// 0x0020 (0x0020 - 0x0000)
struct FortDecoPreview_GetTextureParameterValueFromMeshComponent final
{
public:
	class UMeshComponent*                         MeshComp;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ElementIdx;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ParamName;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoPreview_GetTextureParameterValueFromMeshComponent) == 0x000008, "Wrong alignment on FortDecoPreview_GetTextureParameterValueFromMeshComponent");
static_assert(sizeof(FortDecoPreview_GetTextureParameterValueFromMeshComponent) == 0x000020, "Wrong size on FortDecoPreview_GetTextureParameterValueFromMeshComponent");
static_assert(offsetof(FortDecoPreview_GetTextureParameterValueFromMeshComponent, MeshComp) == 0x000000, "Member 'FortDecoPreview_GetTextureParameterValueFromMeshComponent::MeshComp' has a wrong offset!");
static_assert(offsetof(FortDecoPreview_GetTextureParameterValueFromMeshComponent, ElementIdx) == 0x000008, "Member 'FortDecoPreview_GetTextureParameterValueFromMeshComponent::ElementIdx' has a wrong offset!");
static_assert(offsetof(FortDecoPreview_GetTextureParameterValueFromMeshComponent, ParamName) == 0x000010, "Member 'FortDecoPreview_GetTextureParameterValueFromMeshComponent::ParamName' has a wrong offset!");
static_assert(offsetof(FortDecoPreview_GetTextureParameterValueFromMeshComponent, ReturnValue) == 0x000018, "Member 'FortDecoPreview_GetTextureParameterValueFromMeshComponent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDecoPreview.OnBounceMotionUpdate
// 0x0004 (0x0004 - 0x0000)
struct FortDecoPreview_OnBounceMotionUpdate final
{
public:
	float                                         VectorScale;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoPreview_OnBounceMotionUpdate) == 0x000004, "Wrong alignment on FortDecoPreview_OnBounceMotionUpdate");
static_assert(sizeof(FortDecoPreview_OnBounceMotionUpdate) == 0x000004, "Wrong size on FortDecoPreview_OnBounceMotionUpdate");
static_assert(offsetof(FortDecoPreview_OnBounceMotionUpdate, VectorScale) == 0x000000, "Member 'FortDecoPreview_OnBounceMotionUpdate::VectorScale' has a wrong offset!");

// Function FortniteGame.FortDecoPreview.OnInitializeDecoPreview
// 0x0010 (0x0010 - 0x0000)
struct FortDecoPreview_OnInitializeDecoPreview final
{
public:
	const class ABuildingActor*                   NewBuildingActor;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortDecoItemDefinition*          NewDecoItemDefinition;                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoPreview_OnInitializeDecoPreview) == 0x000008, "Wrong alignment on FortDecoPreview_OnInitializeDecoPreview");
static_assert(sizeof(FortDecoPreview_OnInitializeDecoPreview) == 0x000010, "Wrong size on FortDecoPreview_OnInitializeDecoPreview");
static_assert(offsetof(FortDecoPreview_OnInitializeDecoPreview, NewBuildingActor) == 0x000000, "Member 'FortDecoPreview_OnInitializeDecoPreview::NewBuildingActor' has a wrong offset!");
static_assert(offsetof(FortDecoPreview_OnInitializeDecoPreview, NewDecoItemDefinition) == 0x000008, "Member 'FortDecoPreview_OnInitializeDecoPreview::NewDecoItemDefinition' has a wrong offset!");

// Function FortniteGame.FortDecoPreview.OnUpdateScale
// 0x0010 (0x0010 - 0x0000)
struct FortDecoPreview_OnUpdateScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InWorldSpacePivot;                                 // 0x0004(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoPreview_OnUpdateScale) == 0x000004, "Wrong alignment on FortDecoPreview_OnUpdateScale");
static_assert(sizeof(FortDecoPreview_OnUpdateScale) == 0x000010, "Wrong size on FortDecoPreview_OnUpdateScale");
static_assert(offsetof(FortDecoPreview_OnUpdateScale, Scale) == 0x000000, "Member 'FortDecoPreview_OnUpdateScale::Scale' has a wrong offset!");
static_assert(offsetof(FortDecoPreview_OnUpdateScale, InWorldSpacePivot) == 0x000004, "Member 'FortDecoPreview_OnUpdateScale::InWorldSpacePivot' has a wrong offset!");

// Function FortniteGame.FortDecoPreview.OnUpdateVisuals
// 0x0008 (0x0008 - 0x0000)
struct FortDecoPreview_OnUpdateVisuals final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSafeToPlace;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortDecoPreview_OnUpdateVisuals) == 0x000004, "Wrong alignment on FortDecoPreview_OnUpdateVisuals");
static_assert(sizeof(FortDecoPreview_OnUpdateVisuals) == 0x000008, "Wrong size on FortDecoPreview_OnUpdateVisuals");
static_assert(offsetof(FortDecoPreview_OnUpdateVisuals, DeltaSeconds) == 0x000000, "Member 'FortDecoPreview_OnUpdateVisuals::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(FortDecoPreview_OnUpdateVisuals, bSafeToPlace) == 0x000004, "Member 'FortDecoPreview_OnUpdateVisuals::bSafeToPlace' has a wrong offset!");

// Function FortniteGame.FortDecoPreview.SetScalarParameterValueOnAllPreviewMIDs
// 0x0010 (0x0010 - 0x0000)
struct FortDecoPreview_SetScalarParameterValueOnAllPreviewMIDs final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParamValue;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortDecoPreview_SetScalarParameterValueOnAllPreviewMIDs) == 0x000004, "Wrong alignment on FortDecoPreview_SetScalarParameterValueOnAllPreviewMIDs");
static_assert(sizeof(FortDecoPreview_SetScalarParameterValueOnAllPreviewMIDs) == 0x000010, "Wrong size on FortDecoPreview_SetScalarParameterValueOnAllPreviewMIDs");
static_assert(offsetof(FortDecoPreview_SetScalarParameterValueOnAllPreviewMIDs, ParamName) == 0x000000, "Member 'FortDecoPreview_SetScalarParameterValueOnAllPreviewMIDs::ParamName' has a wrong offset!");
static_assert(offsetof(FortDecoPreview_SetScalarParameterValueOnAllPreviewMIDs, ParamValue) == 0x000008, "Member 'FortDecoPreview_SetScalarParameterValueOnAllPreviewMIDs::ParamValue' has a wrong offset!");

// Function FortniteGame.FortDecoPreview.SetVectorParameterValueOnAllPreviewMIDs
// 0x0018 (0x0018 - 0x0000)
struct FortDecoPreview_SetVectorParameterValueOnAllPreviewMIDs final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ParamValue;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoPreview_SetVectorParameterValueOnAllPreviewMIDs) == 0x000004, "Wrong alignment on FortDecoPreview_SetVectorParameterValueOnAllPreviewMIDs");
static_assert(sizeof(FortDecoPreview_SetVectorParameterValueOnAllPreviewMIDs) == 0x000018, "Wrong size on FortDecoPreview_SetVectorParameterValueOnAllPreviewMIDs");
static_assert(offsetof(FortDecoPreview_SetVectorParameterValueOnAllPreviewMIDs, ParamName) == 0x000000, "Member 'FortDecoPreview_SetVectorParameterValueOnAllPreviewMIDs::ParamName' has a wrong offset!");
static_assert(offsetof(FortDecoPreview_SetVectorParameterValueOnAllPreviewMIDs, ParamValue) == 0x000008, "Member 'FortDecoPreview_SetVectorParameterValueOnAllPreviewMIDs::ParamValue' has a wrong offset!");

// Function FortniteGame.BuildingRift.OnFinishedEncounterSpawn
// 0x0008 (0x0008 - 0x0000)
struct BuildingRift_OnFinishedEncounterSpawn final
{
public:
	class AFortAIPawn*                            SpawnedAI;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingRift_OnFinishedEncounterSpawn) == 0x000008, "Wrong alignment on BuildingRift_OnFinishedEncounterSpawn");
static_assert(sizeof(BuildingRift_OnFinishedEncounterSpawn) == 0x000008, "Wrong size on BuildingRift_OnFinishedEncounterSpawn");
static_assert(offsetof(BuildingRift_OnFinishedEncounterSpawn, SpawnedAI) == 0x000000, "Member 'BuildingRift_OnFinishedEncounterSpawn::SpawnedAI' has a wrong offset!");

// Function FortniteGame.BuildingRift.OnStartedEncounterSpawn
// 0x0008 (0x0008 - 0x0000)
struct BuildingRift_OnStartedEncounterSpawn final
{
public:
	class AFortAIPawn*                            SpawnedAI;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingRift_OnStartedEncounterSpawn) == 0x000008, "Wrong alignment on BuildingRift_OnStartedEncounterSpawn");
static_assert(sizeof(BuildingRift_OnStartedEncounterSpawn) == 0x000008, "Wrong size on BuildingRift_OnStartedEncounterSpawn");
static_assert(offsetof(BuildingRift_OnStartedEncounterSpawn, SpawnedAI) == 0x000000, "Member 'BuildingRift_OnStartedEncounterSpawn::SpawnedAI' has a wrong offset!");

// Function FortniteGame.FortPawn.AlignRotationToHitDirection
// 0x000C (0x000C - 0x0000)
struct FortPawn_AlignRotationToHitDirection final
{
public:
	struct FVector                                HitDirection;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_AlignRotationToHitDirection) == 0x000004, "Wrong alignment on FortPawn_AlignRotationToHitDirection");
static_assert(sizeof(FortPawn_AlignRotationToHitDirection) == 0x00000C, "Wrong size on FortPawn_AlignRotationToHitDirection");
static_assert(offsetof(FortPawn_AlignRotationToHitDirection, HitDirection) == 0x000000, "Member 'FortPawn_AlignRotationToHitDirection::HitDirection' has a wrong offset!");

// Function FortniteGame.FortPawn.AnimMontage_LocalJumpToSectionName
// 0x0010 (0x0010 - 0x0000)
struct FortPawn_AnimMontage_LocalJumpToSectionName final
{
public:
	class FName                                   SectionName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPawn_AnimMontage_LocalJumpToSectionName) == 0x000004, "Wrong alignment on FortPawn_AnimMontage_LocalJumpToSectionName");
static_assert(sizeof(FortPawn_AnimMontage_LocalJumpToSectionName) == 0x000010, "Wrong size on FortPawn_AnimMontage_LocalJumpToSectionName");
static_assert(offsetof(FortPawn_AnimMontage_LocalJumpToSectionName, SectionName) == 0x000000, "Member 'FortPawn_AnimMontage_LocalJumpToSectionName::SectionName' has a wrong offset!");
static_assert(offsetof(FortPawn_AnimMontage_LocalJumpToSectionName, ReturnValue) == 0x000008, "Member 'FortPawn_AnimMontage_LocalJumpToSectionName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.AnimMontage_LocalSetNextSectionName
// 0x0018 (0x0018 - 0x0000)
struct FortPawn_AnimMontage_LocalSetNextSectionName final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NextSectionName;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_AnimMontage_LocalSetNextSectionName) == 0x000008, "Wrong alignment on FortPawn_AnimMontage_LocalSetNextSectionName");
static_assert(sizeof(FortPawn_AnimMontage_LocalSetNextSectionName) == 0x000018, "Wrong size on FortPawn_AnimMontage_LocalSetNextSectionName");
static_assert(offsetof(FortPawn_AnimMontage_LocalSetNextSectionName, AnimMontage) == 0x000000, "Member 'FortPawn_AnimMontage_LocalSetNextSectionName::AnimMontage' has a wrong offset!");
static_assert(offsetof(FortPawn_AnimMontage_LocalSetNextSectionName, SectionName) == 0x000008, "Member 'FortPawn_AnimMontage_LocalSetNextSectionName::SectionName' has a wrong offset!");
static_assert(offsetof(FortPawn_AnimMontage_LocalSetNextSectionName, NextSectionName) == 0x000010, "Member 'FortPawn_AnimMontage_LocalSetNextSectionName::NextSectionName' has a wrong offset!");

// Function FortniteGame.FortPawn.ApplyKnockback
// 0x0014 (0x0014 - 0x0000)
struct FortPawn_ApplyKnockback final
{
public:
	float                                         KnockbackMagnitude;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KnockbackZAngle;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImpulseDir;                                        // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_ApplyKnockback) == 0x000004, "Wrong alignment on FortPawn_ApplyKnockback");
static_assert(sizeof(FortPawn_ApplyKnockback) == 0x000014, "Wrong size on FortPawn_ApplyKnockback");
static_assert(offsetof(FortPawn_ApplyKnockback, KnockbackMagnitude) == 0x000000, "Member 'FortPawn_ApplyKnockback::KnockbackMagnitude' has a wrong offset!");
static_assert(offsetof(FortPawn_ApplyKnockback, KnockbackZAngle) == 0x000004, "Member 'FortPawn_ApplyKnockback::KnockbackZAngle' has a wrong offset!");
static_assert(offsetof(FortPawn_ApplyKnockback, ImpulseDir) == 0x000008, "Member 'FortPawn_ApplyKnockback::ImpulseDir' has a wrong offset!");

// Function FortniteGame.FortPawn.AttachAssetToSocket
// 0x0030 (0x0030 - 0x0000)
struct FortPawn_AttachAssetToSocket final
{
public:
	struct FAssetAttachment                       InAttachment;                                      // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_AttachAssetToSocket) == 0x000008, "Wrong alignment on FortPawn_AttachAssetToSocket");
static_assert(sizeof(FortPawn_AttachAssetToSocket) == 0x000030, "Wrong size on FortPawn_AttachAssetToSocket");
static_assert(offsetof(FortPawn_AttachAssetToSocket, InAttachment) == 0x000000, "Member 'FortPawn_AttachAssetToSocket::InAttachment' has a wrong offset!");

// Function FortniteGame.FortPawn.ClientInternalEquipWeapon
// 0x0008 (0x0008 - 0x0000)
struct FortPawn_ClientInternalEquipWeapon final
{
public:
	class AFortWeapon*                            Weap;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_ClientInternalEquipWeapon) == 0x000008, "Wrong alignment on FortPawn_ClientInternalEquipWeapon");
static_assert(sizeof(FortPawn_ClientInternalEquipWeapon) == 0x000008, "Wrong size on FortPawn_ClientInternalEquipWeapon");
static_assert(offsetof(FortPawn_ClientInternalEquipWeapon, Weap) == 0x000000, "Member 'FortPawn_ClientInternalEquipWeapon::Weap' has a wrong offset!");

// Function FortniteGame.FortPawn.DetachAssetFromSocket
// 0x0008 (0x0008 - 0x0000)
struct FortPawn_DetachAssetFromSocket final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_DetachAssetFromSocket) == 0x000004, "Wrong alignment on FortPawn_DetachAssetFromSocket");
static_assert(sizeof(FortPawn_DetachAssetFromSocket) == 0x000008, "Wrong size on FortPawn_DetachAssetFromSocket");
static_assert(offsetof(FortPawn_DetachAssetFromSocket, SocketName) == 0x000000, "Member 'FortPawn_DetachAssetFromSocket::SocketName' has a wrong offset!");

// Function FortniteGame.FortPawn.DoFatalDamage
// 0x0008 (0x0008 - 0x0000)
struct FortPawn_DoFatalDamage final
{
public:
	class UAbilitySystemComponent*                KillerAbilitySystemComponent;                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_DoFatalDamage) == 0x000008, "Wrong alignment on FortPawn_DoFatalDamage");
static_assert(sizeof(FortPawn_DoFatalDamage) == 0x000008, "Wrong size on FortPawn_DoFatalDamage");
static_assert(offsetof(FortPawn_DoFatalDamage, KillerAbilitySystemComponent) == 0x000000, "Member 'FortPawn_DoFatalDamage::KillerAbilitySystemComponent' has a wrong offset!");

// Function FortniteGame.FortPawn.EquipWeaponDefinition
// 0x0020 (0x0020 - 0x0000)
struct FortPawn_EquipWeaponDefinition final
{
public:
	const class UFortWeaponItemDefinition*        WeaponData;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ItemEntryGuid;                                     // 0x0008(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortWeapon*                            ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_EquipWeaponDefinition) == 0x000008, "Wrong alignment on FortPawn_EquipWeaponDefinition");
static_assert(sizeof(FortPawn_EquipWeaponDefinition) == 0x000020, "Wrong size on FortPawn_EquipWeaponDefinition");
static_assert(offsetof(FortPawn_EquipWeaponDefinition, WeaponData) == 0x000000, "Member 'FortPawn_EquipWeaponDefinition::WeaponData' has a wrong offset!");
static_assert(offsetof(FortPawn_EquipWeaponDefinition, ItemEntryGuid) == 0x000008, "Member 'FortPawn_EquipWeaponDefinition::ItemEntryGuid' has a wrong offset!");
static_assert(offsetof(FortPawn_EquipWeaponDefinition, ReturnValue) == 0x000018, "Member 'FortPawn_EquipWeaponDefinition::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.ForceKill
// 0x0018 (0x0018 - 0x0000)
struct FortPawn_ForceKill final
{
public:
	struct FGameplayTag                           DeathReason;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            KillerController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 KillerActor;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_ForceKill) == 0x000008, "Wrong alignment on FortPawn_ForceKill");
static_assert(sizeof(FortPawn_ForceKill) == 0x000018, "Wrong size on FortPawn_ForceKill");
static_assert(offsetof(FortPawn_ForceKill, DeathReason) == 0x000000, "Member 'FortPawn_ForceKill::DeathReason' has a wrong offset!");
static_assert(offsetof(FortPawn_ForceKill, KillerController) == 0x000008, "Member 'FortPawn_ForceKill::KillerController' has a wrong offset!");
static_assert(offsetof(FortPawn_ForceKill, KillerActor) == 0x000010, "Member 'FortPawn_ForceKill::KillerActor' has a wrong offset!");

// Function FortniteGame.FortPawn.GameplayCue
// 0x00C0 (0x00C0 - 0x0000)
struct FortPawn_GameplayCue final
{
public:
	EGameplayCueEvent                             EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00B8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GameplayCue) == 0x000008, "Wrong alignment on FortPawn_GameplayCue");
static_assert(sizeof(FortPawn_GameplayCue) == 0x0000C0, "Wrong size on FortPawn_GameplayCue");
static_assert(offsetof(FortPawn_GameplayCue, EventType) == 0x000000, "Member 'FortPawn_GameplayCue::EventType' has a wrong offset!");
static_assert(offsetof(FortPawn_GameplayCue, Parameters) == 0x000008, "Member 'FortPawn_GameplayCue::Parameters' has a wrong offset!");

// Function FortniteGame.FortPawn.GameplayCue_Damage
// 0x00C0 (0x00C0 - 0x0000)
struct FortPawn_GameplayCue_Damage final
{
public:
	EGameplayCueEvent                             EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00B8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GameplayCue_Damage) == 0x000008, "Wrong alignment on FortPawn_GameplayCue_Damage");
static_assert(sizeof(FortPawn_GameplayCue_Damage) == 0x0000C0, "Wrong size on FortPawn_GameplayCue_Damage");
static_assert(offsetof(FortPawn_GameplayCue_Damage, EventType) == 0x000000, "Member 'FortPawn_GameplayCue_Damage::EventType' has a wrong offset!");
static_assert(offsetof(FortPawn_GameplayCue_Damage, Parameters) == 0x000008, "Member 'FortPawn_GameplayCue_Damage::Parameters' has a wrong offset!");

// Function FortniteGame.FortPawn.GameplayCue_InstantDeath
// 0x00C0 (0x00C0 - 0x0000)
struct FortPawn_GameplayCue_InstantDeath final
{
public:
	EGameplayCueEvent                             EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00B8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GameplayCue_InstantDeath) == 0x000008, "Wrong alignment on FortPawn_GameplayCue_InstantDeath");
static_assert(sizeof(FortPawn_GameplayCue_InstantDeath) == 0x0000C0, "Wrong size on FortPawn_GameplayCue_InstantDeath");
static_assert(offsetof(FortPawn_GameplayCue_InstantDeath, EventType) == 0x000000, "Member 'FortPawn_GameplayCue_InstantDeath::EventType' has a wrong offset!");
static_assert(offsetof(FortPawn_GameplayCue_InstantDeath, Parameters) == 0x000008, "Member 'FortPawn_GameplayCue_InstantDeath::Parameters' has a wrong offset!");

// Function FortniteGame.FortPawn.GetAssetSkeletalMeshComponentAttachment
// 0x0010 (0x0010 - 0x0000)
struct FortPawn_GetAssetSkeletalMeshComponentAttachment final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetAssetSkeletalMeshComponentAttachment) == 0x000008, "Wrong alignment on FortPawn_GetAssetSkeletalMeshComponentAttachment");
static_assert(sizeof(FortPawn_GetAssetSkeletalMeshComponentAttachment) == 0x000010, "Wrong size on FortPawn_GetAssetSkeletalMeshComponentAttachment");
static_assert(offsetof(FortPawn_GetAssetSkeletalMeshComponentAttachment, SocketName) == 0x000000, "Member 'FortPawn_GetAssetSkeletalMeshComponentAttachment::SocketName' has a wrong offset!");
static_assert(offsetof(FortPawn_GetAssetSkeletalMeshComponentAttachment, ReturnValue) == 0x000008, "Member 'FortPawn_GetAssetSkeletalMeshComponentAttachment::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetCurrentMontageSectionTimeLeft
// 0x0004 (0x0004 - 0x0000)
struct FortPawn_GetCurrentMontageSectionTimeLeft final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetCurrentMontageSectionTimeLeft) == 0x000004, "Wrong alignment on FortPawn_GetCurrentMontageSectionTimeLeft");
static_assert(sizeof(FortPawn_GetCurrentMontageSectionTimeLeft) == 0x000004, "Wrong size on FortPawn_GetCurrentMontageSectionTimeLeft");
static_assert(offsetof(FortPawn_GetCurrentMontageSectionTimeLeft, ReturnValue) == 0x000000, "Member 'FortPawn_GetCurrentMontageSectionTimeLeft::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetMyMovementBaseActor
// 0x0008 (0x0008 - 0x0000)
struct FortPawn_GetMyMovementBaseActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetMyMovementBaseActor) == 0x000008, "Wrong alignment on FortPawn_GetMyMovementBaseActor");
static_assert(sizeof(FortPawn_GetMyMovementBaseActor) == 0x000008, "Wrong size on FortPawn_GetMyMovementBaseActor");
static_assert(offsetof(FortPawn_GetMyMovementBaseActor, ReturnValue) == 0x000000, "Member 'FortPawn_GetMyMovementBaseActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetPawnMID
// 0x0010 (0x0010 - 0x0000)
struct FortPawn_GetPawnMID final
{
public:
	int32                                         ElementIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetPawnMID) == 0x000008, "Wrong alignment on FortPawn_GetPawnMID");
static_assert(sizeof(FortPawn_GetPawnMID) == 0x000010, "Wrong size on FortPawn_GetPawnMID");
static_assert(offsetof(FortPawn_GetPawnMID, ElementIndex) == 0x000000, "Member 'FortPawn_GetPawnMID::ElementIndex' has a wrong offset!");
static_assert(offsetof(FortPawn_GetPawnMID, ReturnValue) == 0x000008, "Member 'FortPawn_GetPawnMID::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetShieldOrHealthPercent
// 0x0004 (0x0004 - 0x0000)
struct FortPawn_GetShieldOrHealthPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetShieldOrHealthPercent) == 0x000004, "Wrong alignment on FortPawn_GetShieldOrHealthPercent");
static_assert(sizeof(FortPawn_GetShieldOrHealthPercent) == 0x000004, "Wrong size on FortPawn_GetShieldOrHealthPercent");
static_assert(offsetof(FortPawn_GetShieldOrHealthPercent, ReturnValue) == 0x000000, "Member 'FortPawn_GetShieldOrHealthPercent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.InitializeDeathHitSocket
// 0x0018 (0x0018 - 0x0000)
struct FortPawn_InitializeDeathHitSocket final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldNormal;                                       // 0x000C(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_InitializeDeathHitSocket) == 0x000004, "Wrong alignment on FortPawn_InitializeDeathHitSocket");
static_assert(sizeof(FortPawn_InitializeDeathHitSocket) == 0x000018, "Wrong size on FortPawn_InitializeDeathHitSocket");
static_assert(offsetof(FortPawn_InitializeDeathHitSocket, WorldLocation) == 0x000000, "Member 'FortPawn_InitializeDeathHitSocket::WorldLocation' has a wrong offset!");
static_assert(offsetof(FortPawn_InitializeDeathHitSocket, WorldNormal) == 0x00000C, "Member 'FortPawn_InitializeDeathHitSocket::WorldNormal' has a wrong offset!");

// Function FortniteGame.FortPawn.LaunchCharacterJump
// 0x0010 (0x0010 - 0x0000)
struct FortPawn_LaunchCharacterJump final
{
public:
	struct FVector                                LaunchVelocity;                                    // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bXYOverride;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bZOverride;                                        // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreFallDamage;                                 // 0x000E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayFeedbackEvent;                                // 0x000F(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_LaunchCharacterJump) == 0x000004, "Wrong alignment on FortPawn_LaunchCharacterJump");
static_assert(sizeof(FortPawn_LaunchCharacterJump) == 0x000010, "Wrong size on FortPawn_LaunchCharacterJump");
static_assert(offsetof(FortPawn_LaunchCharacterJump, LaunchVelocity) == 0x000000, "Member 'FortPawn_LaunchCharacterJump::LaunchVelocity' has a wrong offset!");
static_assert(offsetof(FortPawn_LaunchCharacterJump, bXYOverride) == 0x00000C, "Member 'FortPawn_LaunchCharacterJump::bXYOverride' has a wrong offset!");
static_assert(offsetof(FortPawn_LaunchCharacterJump, bZOverride) == 0x00000D, "Member 'FortPawn_LaunchCharacterJump::bZOverride' has a wrong offset!");
static_assert(offsetof(FortPawn_LaunchCharacterJump, bIgnoreFallDamage) == 0x00000E, "Member 'FortPawn_LaunchCharacterJump::bIgnoreFallDamage' has a wrong offset!");
static_assert(offsetof(FortPawn_LaunchCharacterJump, bPlayFeedbackEvent) == 0x00000F, "Member 'FortPawn_LaunchCharacterJump::bPlayFeedbackEvent' has a wrong offset!");

// Function FortniteGame.FortPawn.OnBaseChanged
// 0x0008 (0x0008 - 0x0000)
struct FortPawn_OnBaseChanged final
{
public:
	class AActor*                                 NewBase;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_OnBaseChanged) == 0x000008, "Wrong alignment on FortPawn_OnBaseChanged");
static_assert(sizeof(FortPawn_OnBaseChanged) == 0x000008, "Wrong size on FortPawn_OnBaseChanged");
static_assert(offsetof(FortPawn_OnBaseChanged, NewBase) == 0x000000, "Member 'FortPawn_OnBaseChanged::NewBase' has a wrong offset!");

// Function FortniteGame.FortPawn.OnBumpPushedPawn
// 0x0010 (0x0010 - 0x0000)
struct FortPawn_OnBumpPushedPawn final
{
public:
	class AFortPawn*                              InstigatedBy;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PushTimeLeft;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPawn_OnBumpPushedPawn) == 0x000008, "Wrong alignment on FortPawn_OnBumpPushedPawn");
static_assert(sizeof(FortPawn_OnBumpPushedPawn) == 0x000010, "Wrong size on FortPawn_OnBumpPushedPawn");
static_assert(offsetof(FortPawn_OnBumpPushedPawn, InstigatedBy) == 0x000000, "Member 'FortPawn_OnBumpPushedPawn::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortPawn_OnBumpPushedPawn, PushTimeLeft) == 0x000008, "Member 'FortPawn_OnBumpPushedPawn::PushTimeLeft' has a wrong offset!");

// Function FortniteGame.FortPawn.OnDamagePlayEffects
// 0x00E0 (0x00E0 - 0x0000)
struct FortPawn_OnDamagePlayEffects final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  DamageTags;                                        // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Momentum;                                          // 0x0028(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitInfo;                                           // 0x0038(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AFortPawn*                              InstigatedBy;                                      // 0x00B8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x00C0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x00C8(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_OnDamagePlayEffects) == 0x000008, "Wrong alignment on FortPawn_OnDamagePlayEffects");
static_assert(sizeof(FortPawn_OnDamagePlayEffects) == 0x0000E0, "Wrong size on FortPawn_OnDamagePlayEffects");
static_assert(offsetof(FortPawn_OnDamagePlayEffects, Damage) == 0x000000, "Member 'FortPawn_OnDamagePlayEffects::Damage' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDamagePlayEffects, DamageTags) == 0x000008, "Member 'FortPawn_OnDamagePlayEffects::DamageTags' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDamagePlayEffects, Momentum) == 0x000028, "Member 'FortPawn_OnDamagePlayEffects::Momentum' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDamagePlayEffects, HitInfo) == 0x000038, "Member 'FortPawn_OnDamagePlayEffects::HitInfo' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDamagePlayEffects, InstigatedBy) == 0x0000B8, "Member 'FortPawn_OnDamagePlayEffects::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDamagePlayEffects, DamageCauser) == 0x0000C0, "Member 'FortPawn_OnDamagePlayEffects::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDamagePlayEffects, EffectContext) == 0x0000C8, "Member 'FortPawn_OnDamagePlayEffects::EffectContext' has a wrong offset!");

// Function FortniteGame.FortPawn.OnDamageServer
// 0x00E0 (0x00E0 - 0x0000)
struct FortPawn_OnDamageServer final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  DamageTags;                                        // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Momentum;                                          // 0x0028(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitInfo;                                           // 0x0038(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AController*                            InstigatedBy;                                      // 0x00B8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x00C0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x00C8(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_OnDamageServer) == 0x000008, "Wrong alignment on FortPawn_OnDamageServer");
static_assert(sizeof(FortPawn_OnDamageServer) == 0x0000E0, "Wrong size on FortPawn_OnDamageServer");
static_assert(offsetof(FortPawn_OnDamageServer, Damage) == 0x000000, "Member 'FortPawn_OnDamageServer::Damage' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDamageServer, DamageTags) == 0x000008, "Member 'FortPawn_OnDamageServer::DamageTags' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDamageServer, Momentum) == 0x000028, "Member 'FortPawn_OnDamageServer::Momentum' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDamageServer, HitInfo) == 0x000038, "Member 'FortPawn_OnDamageServer::HitInfo' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDamageServer, InstigatedBy) == 0x0000B8, "Member 'FortPawn_OnDamageServer::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDamageServer, DamageCauser) == 0x0000C0, "Member 'FortPawn_OnDamageServer::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDamageServer, EffectContext) == 0x0000C8, "Member 'FortPawn_OnDamageServer::EffectContext' has a wrong offset!");

// Function FortniteGame.FortPawn.OnDamageZoneStatusChanged
// 0x0002 (0x0002 - 0x0000)
struct FortPawn_OnDamageZoneStatusChanged final
{
public:
	EFortDamageZone                               Zone;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStatus;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_OnDamageZoneStatusChanged) == 0x000001, "Wrong alignment on FortPawn_OnDamageZoneStatusChanged");
static_assert(sizeof(FortPawn_OnDamageZoneStatusChanged) == 0x000002, "Wrong size on FortPawn_OnDamageZoneStatusChanged");
static_assert(offsetof(FortPawn_OnDamageZoneStatusChanged, Zone) == 0x000000, "Member 'FortPawn_OnDamageZoneStatusChanged::Zone' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDamageZoneStatusChanged, bStatus) == 0x000001, "Member 'FortPawn_OnDamageZoneStatusChanged::bStatus' has a wrong offset!");

// Function FortniteGame.FortPawn.OnDeathPlayEffects
// 0x00E0 (0x00E0 - 0x0000)
struct FortPawn_OnDeathPlayEffects final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  DamageTags;                                        // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Momentum;                                          // 0x0028(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitInfo;                                           // 0x0038(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AFortPawn*                              InstigatedBy;                                      // 0x00B8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x00C0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x00C8(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_OnDeathPlayEffects) == 0x000008, "Wrong alignment on FortPawn_OnDeathPlayEffects");
static_assert(sizeof(FortPawn_OnDeathPlayEffects) == 0x0000E0, "Wrong size on FortPawn_OnDeathPlayEffects");
static_assert(offsetof(FortPawn_OnDeathPlayEffects, Damage) == 0x000000, "Member 'FortPawn_OnDeathPlayEffects::Damage' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDeathPlayEffects, DamageTags) == 0x000008, "Member 'FortPawn_OnDeathPlayEffects::DamageTags' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDeathPlayEffects, Momentum) == 0x000028, "Member 'FortPawn_OnDeathPlayEffects::Momentum' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDeathPlayEffects, HitInfo) == 0x000038, "Member 'FortPawn_OnDeathPlayEffects::HitInfo' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDeathPlayEffects, InstigatedBy) == 0x0000B8, "Member 'FortPawn_OnDeathPlayEffects::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDeathPlayEffects, DamageCauser) == 0x0000C0, "Member 'FortPawn_OnDeathPlayEffects::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDeathPlayEffects, EffectContext) == 0x0000C8, "Member 'FortPawn_OnDeathPlayEffects::EffectContext' has a wrong offset!");

// Function FortniteGame.FortPawn.OnDeathServer
// 0x00E0 (0x00E0 - 0x0000)
struct FortPawn_OnDeathServer final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  DamageTags;                                        // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Momentum;                                          // 0x0028(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitInfo;                                           // 0x0038(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AController*                            InstigatedBy;                                      // 0x00B8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x00C0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x00C8(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_OnDeathServer) == 0x000008, "Wrong alignment on FortPawn_OnDeathServer");
static_assert(sizeof(FortPawn_OnDeathServer) == 0x0000E0, "Wrong size on FortPawn_OnDeathServer");
static_assert(offsetof(FortPawn_OnDeathServer, Damage) == 0x000000, "Member 'FortPawn_OnDeathServer::Damage' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDeathServer, DamageTags) == 0x000008, "Member 'FortPawn_OnDeathServer::DamageTags' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDeathServer, Momentum) == 0x000028, "Member 'FortPawn_OnDeathServer::Momentum' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDeathServer, HitInfo) == 0x000038, "Member 'FortPawn_OnDeathServer::HitInfo' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDeathServer, InstigatedBy) == 0x0000B8, "Member 'FortPawn_OnDeathServer::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDeathServer, DamageCauser) == 0x0000C0, "Member 'FortPawn_OnDeathServer::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDeathServer, EffectContext) == 0x0000C8, "Member 'FortPawn_OnDeathServer::EffectContext' has a wrong offset!");

// Function FortniteGame.FortPawn.OnDisplaySentence
// 0x0018 (0x0018 - 0x0000)
struct FortPawn_OnDisplaySentence final
{
public:
	class FText                                   SpeechText;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_OnDisplaySentence) == 0x000008, "Wrong alignment on FortPawn_OnDisplaySentence");
static_assert(sizeof(FortPawn_OnDisplaySentence) == 0x000018, "Wrong size on FortPawn_OnDisplaySentence");
static_assert(offsetof(FortPawn_OnDisplaySentence, SpeechText) == 0x000000, "Member 'FortPawn_OnDisplaySentence::SpeechText' has a wrong offset!");

// Function FortniteGame.FortPawn.OnMontageEnded
// 0x0010 (0x0010 - 0x0000)
struct FortPawn_OnMontageEnded final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPawn_OnMontageEnded) == 0x000008, "Wrong alignment on FortPawn_OnMontageEnded");
static_assert(sizeof(FortPawn_OnMontageEnded) == 0x000010, "Wrong size on FortPawn_OnMontageEnded");
static_assert(offsetof(FortPawn_OnMontageEnded, Montage) == 0x000000, "Member 'FortPawn_OnMontageEnded::Montage' has a wrong offset!");
static_assert(offsetof(FortPawn_OnMontageEnded, bInterrupted) == 0x000008, "Member 'FortPawn_OnMontageEnded::bInterrupted' has a wrong offset!");

// Function FortniteGame.FortPawn.OnMontageStarted
// 0x0008 (0x0008 - 0x0000)
struct FortPawn_OnMontageStarted final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_OnMontageStarted) == 0x000008, "Wrong alignment on FortPawn_OnMontageStarted");
static_assert(sizeof(FortPawn_OnMontageStarted) == 0x000008, "Wrong size on FortPawn_OnMontageStarted");
static_assert(offsetof(FortPawn_OnMontageStarted, Montage) == 0x000000, "Member 'FortPawn_OnMontageStarted::Montage' has a wrong offset!");

// Function FortniteGame.FortPawn.OnOutOfControlResistanceServer
// 0x0050 (0x0050 - 0x0000)
struct FortPawn_OnOutOfControlResistanceServer final
{
public:
	float                                         ImpactDamageDone;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  SourceTags;                                        // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0028(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AController*                            EffectInstigator;                                  // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EffectCauser;                                      // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_OnOutOfControlResistanceServer) == 0x000008, "Wrong alignment on FortPawn_OnOutOfControlResistanceServer");
static_assert(sizeof(FortPawn_OnOutOfControlResistanceServer) == 0x000050, "Wrong size on FortPawn_OnOutOfControlResistanceServer");
static_assert(offsetof(FortPawn_OnOutOfControlResistanceServer, ImpactDamageDone) == 0x000000, "Member 'FortPawn_OnOutOfControlResistanceServer::ImpactDamageDone' has a wrong offset!");
static_assert(offsetof(FortPawn_OnOutOfControlResistanceServer, SourceTags) == 0x000008, "Member 'FortPawn_OnOutOfControlResistanceServer::SourceTags' has a wrong offset!");
static_assert(offsetof(FortPawn_OnOutOfControlResistanceServer, EffectContext) == 0x000028, "Member 'FortPawn_OnOutOfControlResistanceServer::EffectContext' has a wrong offset!");
static_assert(offsetof(FortPawn_OnOutOfControlResistanceServer, EffectInstigator) == 0x000040, "Member 'FortPawn_OnOutOfControlResistanceServer::EffectInstigator' has a wrong offset!");
static_assert(offsetof(FortPawn_OnOutOfControlResistanceServer, EffectCauser) == 0x000048, "Member 'FortPawn_OnOutOfControlResistanceServer::EffectCauser' has a wrong offset!");

// Function FortniteGame.FortPawn.OnWeaponEquipped
// 0x0010 (0x0010 - 0x0000)
struct FortPawn_OnWeaponEquipped final
{
public:
	class AFortWeapon*                            NewWeapon;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortWeapon*                            PrevWeapon;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_OnWeaponEquipped) == 0x000008, "Wrong alignment on FortPawn_OnWeaponEquipped");
static_assert(sizeof(FortPawn_OnWeaponEquipped) == 0x000010, "Wrong size on FortPawn_OnWeaponEquipped");
static_assert(offsetof(FortPawn_OnWeaponEquipped, NewWeapon) == 0x000000, "Member 'FortPawn_OnWeaponEquipped::NewWeapon' has a wrong offset!");
static_assert(offsetof(FortPawn_OnWeaponEquipped, PrevWeapon) == 0x000008, "Member 'FortPawn_OnWeaponEquipped::PrevWeapon' has a wrong offset!");

// Function FortniteGame.FortPawn.PawnStartFire
// 0x0001 (0x0001 - 0x0000)
struct FortPawn_PawnStartFire final
{
public:
	uint8                                         FireModeNum;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_PawnStartFire) == 0x000001, "Wrong alignment on FortPawn_PawnStartFire");
static_assert(sizeof(FortPawn_PawnStartFire) == 0x000001, "Wrong size on FortPawn_PawnStartFire");
static_assert(offsetof(FortPawn_PawnStartFire, FireModeNum) == 0x000000, "Member 'FortPawn_PawnStartFire::FireModeNum' has a wrong offset!");

// Function FortniteGame.FortPawn.PawnStopFire
// 0x0001 (0x0001 - 0x0000)
struct FortPawn_PawnStopFire final
{
public:
	uint8                                         FireModeNum;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_PawnStopFire) == 0x000001, "Wrong alignment on FortPawn_PawnStopFire");
static_assert(sizeof(FortPawn_PawnStopFire) == 0x000001, "Wrong size on FortPawn_PawnStopFire");
static_assert(offsetof(FortPawn_PawnStopFire, FireModeNum) == 0x000000, "Member 'FortPawn_PawnStopFire::FireModeNum' has a wrong offset!");

// Function FortniteGame.FortPawn.PickUpActor
// 0x0018 (0x0018 - 0x0000)
struct FortPawn_PickUpActor final
{
public:
	class AActor*                                 PickupTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortDecoItemDefinition*          PlacementDecoItemDefinition;                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPawn_PickUpActor) == 0x000008, "Wrong alignment on FortPawn_PickUpActor");
static_assert(sizeof(FortPawn_PickUpActor) == 0x000018, "Wrong size on FortPawn_PickUpActor");
static_assert(offsetof(FortPawn_PickUpActor, PickupTarget) == 0x000000, "Member 'FortPawn_PickUpActor::PickupTarget' has a wrong offset!");
static_assert(offsetof(FortPawn_PickUpActor, PlacementDecoItemDefinition) == 0x000008, "Member 'FortPawn_PickUpActor::PlacementDecoItemDefinition' has a wrong offset!");
static_assert(offsetof(FortPawn_PickUpActor, ReturnValue) == 0x000010, "Member 'FortPawn_PickUpActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.PlayFootStepSound
// 0x0004 (0x0004 - 0x0000)
struct FortPawn_PlayFootStepSound final
{
public:
	int32                                         FootDown;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_PlayFootStepSound) == 0x000004, "Wrong alignment on FortPawn_PlayFootStepSound");
static_assert(sizeof(FortPawn_PlayFootStepSound) == 0x000004, "Wrong size on FortPawn_PlayFootStepSound");
static_assert(offsetof(FortPawn_PlayFootStepSound, FootDown) == 0x000000, "Member 'FortPawn_PlayFootStepSound::FootDown' has a wrong offset!");

// Function FortniteGame.FortPawn.PlayLocalAnimMontage
// 0x0020 (0x0020 - 0x0000)
struct FortPawn_PlayLocalAnimMontage final
{
public:
	class UAnimMontage*                           NewAnimMontage;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   StartSectionName;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPawn_PlayLocalAnimMontage) == 0x000008, "Wrong alignment on FortPawn_PlayLocalAnimMontage");
static_assert(sizeof(FortPawn_PlayLocalAnimMontage) == 0x000020, "Wrong size on FortPawn_PlayLocalAnimMontage");
static_assert(offsetof(FortPawn_PlayLocalAnimMontage, NewAnimMontage) == 0x000000, "Member 'FortPawn_PlayLocalAnimMontage::NewAnimMontage' has a wrong offset!");
static_assert(offsetof(FortPawn_PlayLocalAnimMontage, InPlayRate) == 0x000008, "Member 'FortPawn_PlayLocalAnimMontage::InPlayRate' has a wrong offset!");
static_assert(offsetof(FortPawn_PlayLocalAnimMontage, StartSectionName) == 0x000010, "Member 'FortPawn_PlayLocalAnimMontage::StartSectionName' has a wrong offset!");
static_assert(offsetof(FortPawn_PlayLocalAnimMontage, ReturnValue) == 0x000018, "Member 'FortPawn_PlayLocalAnimMontage::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.PlaySound
// 0x0010 (0x0010 - 0x0000)
struct FortPawn_PlaySound final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_PlaySound) == 0x000008, "Wrong alignment on FortPawn_PlaySound");
static_assert(sizeof(FortPawn_PlaySound) == 0x000010, "Wrong size on FortPawn_PlaySound");
static_assert(offsetof(FortPawn_PlaySound, Sound) == 0x000000, "Member 'FortPawn_PlaySound::Sound' has a wrong offset!");
static_assert(offsetof(FortPawn_PlaySound, VolumeMultiplier) == 0x000008, "Member 'FortPawn_PlaySound::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(FortPawn_PlaySound, PitchMultiplier) == 0x00000C, "Member 'FortPawn_PlaySound::PitchMultiplier' has a wrong offset!");

// Function FortniteGame.FortPawn.PrototypeCharacterMovement
// 0x0010 (0x0010 - 0x0000)
struct FortPawn_PrototypeCharacterMovement final
{
public:
	EMovementMode                                 MovementMode;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LaunchVelocity;                                    // 0x0004(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_PrototypeCharacterMovement) == 0x000004, "Wrong alignment on FortPawn_PrototypeCharacterMovement");
static_assert(sizeof(FortPawn_PrototypeCharacterMovement) == 0x000010, "Wrong size on FortPawn_PrototypeCharacterMovement");
static_assert(offsetof(FortPawn_PrototypeCharacterMovement, MovementMode) == 0x000000, "Member 'FortPawn_PrototypeCharacterMovement::MovementMode' has a wrong offset!");
static_assert(offsetof(FortPawn_PrototypeCharacterMovement, LaunchVelocity) == 0x000004, "Member 'FortPawn_PrototypeCharacterMovement::LaunchVelocity' has a wrong offset!");

// Function FortniteGame.FortPawn.RemoveCallout
// 0x0008 (0x0008 - 0x0000)
struct FortPawn_RemoveCallout final
{
public:
	struct FGameplayTag                           CalloutTagToRemove;                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_RemoveCallout) == 0x000008, "Wrong alignment on FortPawn_RemoveCallout");
static_assert(sizeof(FortPawn_RemoveCallout) == 0x000008, "Wrong size on FortPawn_RemoveCallout");
static_assert(offsetof(FortPawn_RemoveCallout, CalloutTagToRemove) == 0x000000, "Member 'FortPawn_RemoveCallout::CalloutTagToRemove' has a wrong offset!");

// Function FortniteGame.FortPawn.ServerInternalEquipWeapon
// 0x0008 (0x0008 - 0x0000)
struct FortPawn_ServerInternalEquipWeapon final
{
public:
	class AFortWeapon*                            Weap;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_ServerInternalEquipWeapon) == 0x000008, "Wrong alignment on FortPawn_ServerInternalEquipWeapon");
static_assert(sizeof(FortPawn_ServerInternalEquipWeapon) == 0x000008, "Wrong size on FortPawn_ServerInternalEquipWeapon");
static_assert(offsetof(FortPawn_ServerInternalEquipWeapon, Weap) == 0x000000, "Member 'FortPawn_ServerInternalEquipWeapon::Weap' has a wrong offset!");

// Function FortniteGame.FortPawn.ServerTeleportNearLocation
// 0x000C (0x000C - 0x0000)
struct FortPawn_ServerTeleportNearLocation final
{
public:
	struct FVector                                ActorLocation;                                     // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_ServerTeleportNearLocation) == 0x000004, "Wrong alignment on FortPawn_ServerTeleportNearLocation");
static_assert(sizeof(FortPawn_ServerTeleportNearLocation) == 0x00000C, "Wrong size on FortPawn_ServerTeleportNearLocation");
static_assert(offsetof(FortPawn_ServerTeleportNearLocation, ActorLocation) == 0x000000, "Member 'FortPawn_ServerTeleportNearLocation::ActorLocation' has a wrong offset!");

// Function FortniteGame.FortPawn.SetCallout
// 0x0010 (0x0010 - 0x0000)
struct FortPawn_SetCallout final
{
public:
	struct FGameplayTag                           CalloutTagToSet;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPawn_SetCallout) == 0x000008, "Wrong alignment on FortPawn_SetCallout");
static_assert(sizeof(FortPawn_SetCallout) == 0x000010, "Wrong size on FortPawn_SetCallout");
static_assert(offsetof(FortPawn_SetCallout, CalloutTagToSet) == 0x000000, "Member 'FortPawn_SetCallout::CalloutTagToSet' has a wrong offset!");
static_assert(offsetof(FortPawn_SetCallout, Duration) == 0x000008, "Member 'FortPawn_SetCallout::Duration' has a wrong offset!");

// Function FortniteGame.FortPawn.SetControlRecoveryBehavior
// 0x0001 (0x0001 - 0x0000)
struct FortPawn_SetControlRecoveryBehavior final
{
public:
	EFortControlRecoveryBehavior                  NewBehavior;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_SetControlRecoveryBehavior) == 0x000001, "Wrong alignment on FortPawn_SetControlRecoveryBehavior");
static_assert(sizeof(FortPawn_SetControlRecoveryBehavior) == 0x000001, "Wrong size on FortPawn_SetControlRecoveryBehavior");
static_assert(offsetof(FortPawn_SetControlRecoveryBehavior, NewBehavior) == 0x000000, "Member 'FortPawn_SetControlRecoveryBehavior::NewBehavior' has a wrong offset!");

// Function FortniteGame.FortPawn.SetFNameBasedOnHitDirection
// 0x0038 (0x0038 - 0x0000)
struct FortPawn_SetFNameBasedOnHitDirection final
{
public:
	struct FVector                                HitDirection;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   NameResult;                                        // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NameFront;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NameBack;                                          // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NameLeft;                                          // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NameRight;                                         // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_SetFNameBasedOnHitDirection) == 0x000004, "Wrong alignment on FortPawn_SetFNameBasedOnHitDirection");
static_assert(sizeof(FortPawn_SetFNameBasedOnHitDirection) == 0x000038, "Wrong size on FortPawn_SetFNameBasedOnHitDirection");
static_assert(offsetof(FortPawn_SetFNameBasedOnHitDirection, HitDirection) == 0x000000, "Member 'FortPawn_SetFNameBasedOnHitDirection::HitDirection' has a wrong offset!");
static_assert(offsetof(FortPawn_SetFNameBasedOnHitDirection, NameResult) == 0x000010, "Member 'FortPawn_SetFNameBasedOnHitDirection::NameResult' has a wrong offset!");
static_assert(offsetof(FortPawn_SetFNameBasedOnHitDirection, NameFront) == 0x000018, "Member 'FortPawn_SetFNameBasedOnHitDirection::NameFront' has a wrong offset!");
static_assert(offsetof(FortPawn_SetFNameBasedOnHitDirection, NameBack) == 0x000020, "Member 'FortPawn_SetFNameBasedOnHitDirection::NameBack' has a wrong offset!");
static_assert(offsetof(FortPawn_SetFNameBasedOnHitDirection, NameLeft) == 0x000028, "Member 'FortPawn_SetFNameBasedOnHitDirection::NameLeft' has a wrong offset!");
static_assert(offsetof(FortPawn_SetFNameBasedOnHitDirection, NameRight) == 0x000030, "Member 'FortPawn_SetFNameBasedOnHitDirection::NameRight' has a wrong offset!");

// Function FortniteGame.FortPawn.SetHealth
// 0x0004 (0x0004 - 0x0000)
struct FortPawn_SetHealth final
{
public:
	float                                         NewHealthVal;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_SetHealth) == 0x000004, "Wrong alignment on FortPawn_SetHealth");
static_assert(sizeof(FortPawn_SetHealth) == 0x000004, "Wrong size on FortPawn_SetHealth");
static_assert(offsetof(FortPawn_SetHealth, NewHealthVal) == 0x000000, "Member 'FortPawn_SetHealth::NewHealthVal' has a wrong offset!");

// Function FortniteGame.FortPawn.SetHolsterWeapon
// 0x0002 (0x0002 - 0x0000)
struct FortPawn_SetHolsterWeapon final
{
public:
	bool                                          bHolster;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayEquipAnim;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_SetHolsterWeapon) == 0x000001, "Wrong alignment on FortPawn_SetHolsterWeapon");
static_assert(sizeof(FortPawn_SetHolsterWeapon) == 0x000002, "Wrong size on FortPawn_SetHolsterWeapon");
static_assert(offsetof(FortPawn_SetHolsterWeapon, bHolster) == 0x000000, "Member 'FortPawn_SetHolsterWeapon::bHolster' has a wrong offset!");
static_assert(offsetof(FortPawn_SetHolsterWeapon, bPlayEquipAnim) == 0x000001, "Member 'FortPawn_SetHolsterWeapon::bPlayEquipAnim' has a wrong offset!");

// Function FortniteGame.FortPawn.SetIsKnockedBack
// 0x0001 (0x0001 - 0x0000)
struct FortPawn_SetIsKnockedBack final
{
public:
	bool                                          bKnockback;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_SetIsKnockedBack) == 0x000001, "Wrong alignment on FortPawn_SetIsKnockedBack");
static_assert(sizeof(FortPawn_SetIsKnockedBack) == 0x000001, "Wrong size on FortPawn_SetIsKnockedBack");
static_assert(offsetof(FortPawn_SetIsKnockedBack, bKnockback) == 0x000000, "Member 'FortPawn_SetIsKnockedBack::bKnockback' has a wrong offset!");

// Function FortniteGame.FortPawn.SetMaxHealth
// 0x0004 (0x0004 - 0x0000)
struct FortPawn_SetMaxHealth final
{
public:
	float                                         NewHealthVal;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_SetMaxHealth) == 0x000004, "Wrong alignment on FortPawn_SetMaxHealth");
static_assert(sizeof(FortPawn_SetMaxHealth) == 0x000004, "Wrong size on FortPawn_SetMaxHealth");
static_assert(offsetof(FortPawn_SetMaxHealth, NewHealthVal) == 0x000000, "Member 'FortPawn_SetMaxHealth::NewHealthVal' has a wrong offset!");

// Function FortniteGame.FortPawn.SetPawnAndControlRotation
// 0x000C (0x000C - 0x0000)
struct FortPawn_SetPawnAndControlRotation final
{
public:
	struct FRotator                               NewRotation;                                       // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_SetPawnAndControlRotation) == 0x000004, "Wrong alignment on FortPawn_SetPawnAndControlRotation");
static_assert(sizeof(FortPawn_SetPawnAndControlRotation) == 0x00000C, "Wrong size on FortPawn_SetPawnAndControlRotation");
static_assert(offsetof(FortPawn_SetPawnAndControlRotation, NewRotation) == 0x000000, "Member 'FortPawn_SetPawnAndControlRotation::NewRotation' has a wrong offset!");

// Function FortniteGame.FortPawn.SetPawnVisibility
// 0x0002 (0x0002 - 0x0000)
struct FortPawn_SetPawnVisibility final
{
public:
	bool                                          bNewHidden;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToWeapon;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_SetPawnVisibility) == 0x000001, "Wrong alignment on FortPawn_SetPawnVisibility");
static_assert(sizeof(FortPawn_SetPawnVisibility) == 0x000002, "Wrong size on FortPawn_SetPawnVisibility");
static_assert(offsetof(FortPawn_SetPawnVisibility, bNewHidden) == 0x000000, "Member 'FortPawn_SetPawnVisibility::bNewHidden' has a wrong offset!");
static_assert(offsetof(FortPawn_SetPawnVisibility, bPropagateToWeapon) == 0x000001, "Member 'FortPawn_SetPawnVisibility::bPropagateToWeapon' has a wrong offset!");

// Function FortniteGame.FortPawn.SetSpawnSpot
// 0x0008 (0x0008 - 0x0000)
struct FortPawn_SetSpawnSpot final
{
public:
	class AActor*                                 InSpawnSpot;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_SetSpawnSpot) == 0x000008, "Wrong alignment on FortPawn_SetSpawnSpot");
static_assert(sizeof(FortPawn_SetSpawnSpot) == 0x000008, "Wrong size on FortPawn_SetSpawnSpot");
static_assert(offsetof(FortPawn_SetSpawnSpot, InSpawnSpot) == 0x000000, "Member 'FortPawn_SetSpawnSpot::InSpawnSpot' has a wrong offset!");

// Function FortniteGame.FortPawn.SpawnCameraLensEffect
// 0x0010 (0x0010 - 0x0000)
struct FortPawn_SpawnCameraLensEffect final
{
public:
	TSubclassOf<class AEmitterCameraLensEffectBase> LensEffectEmitterClass;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEmitterCameraLensEffectBase*           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_SpawnCameraLensEffect) == 0x000008, "Wrong alignment on FortPawn_SpawnCameraLensEffect");
static_assert(sizeof(FortPawn_SpawnCameraLensEffect) == 0x000010, "Wrong size on FortPawn_SpawnCameraLensEffect");
static_assert(offsetof(FortPawn_SpawnCameraLensEffect, LensEffectEmitterClass) == 0x000000, "Member 'FortPawn_SpawnCameraLensEffect::LensEffectEmitterClass' has a wrong offset!");
static_assert(offsetof(FortPawn_SpawnCameraLensEffect, ReturnValue) == 0x000008, "Member 'FortPawn_SpawnCameraLensEffect::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.SpawnCameraLensEffectDirectional
// 0x0098 (0x0098 - 0x0000)
struct FortPawn_SpawnCameraLensEffectDirectional final
{
public:
	TSubclassOf<class AFortEmitterCameraLensEffectDirectional> LensEffectEmitterClass;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPawn*                              DamageDealer;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitInfo;                                           // 0x0010(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AFortEmitterCameraLensEffectDirectional* ReturnValue;                                       // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_SpawnCameraLensEffectDirectional) == 0x000008, "Wrong alignment on FortPawn_SpawnCameraLensEffectDirectional");
static_assert(sizeof(FortPawn_SpawnCameraLensEffectDirectional) == 0x000098, "Wrong size on FortPawn_SpawnCameraLensEffectDirectional");
static_assert(offsetof(FortPawn_SpawnCameraLensEffectDirectional, LensEffectEmitterClass) == 0x000000, "Member 'FortPawn_SpawnCameraLensEffectDirectional::LensEffectEmitterClass' has a wrong offset!");
static_assert(offsetof(FortPawn_SpawnCameraLensEffectDirectional, DamageDealer) == 0x000008, "Member 'FortPawn_SpawnCameraLensEffectDirectional::DamageDealer' has a wrong offset!");
static_assert(offsetof(FortPawn_SpawnCameraLensEffectDirectional, HitInfo) == 0x000010, "Member 'FortPawn_SpawnCameraLensEffectDirectional::HitInfo' has a wrong offset!");
static_assert(offsetof(FortPawn_SpawnCameraLensEffectDirectional, ReturnValue) == 0x000090, "Member 'FortPawn_SpawnCameraLensEffectDirectional::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.StartPushMomentum
// 0x0010 (0x0010 - 0x0000)
struct FortPawn_StartPushMomentum final
{
public:
	struct FVector                                NewPushMomentum;                                   // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_StartPushMomentum) == 0x000004, "Wrong alignment on FortPawn_StartPushMomentum");
static_assert(sizeof(FortPawn_StartPushMomentum) == 0x000010, "Wrong size on FortPawn_StartPushMomentum");
static_assert(offsetof(FortPawn_StartPushMomentum, NewPushMomentum) == 0x000000, "Member 'FortPawn_StartPushMomentum::NewPushMomentum' has a wrong offset!");
static_assert(offsetof(FortPawn_StartPushMomentum, Duration) == 0x00000C, "Member 'FortPawn_StartPushMomentum::Duration' has a wrong offset!");

// Function FortniteGame.FortPawn.TriggerFeedbackEvent
// 0x0020 (0x0020 - 0x0000)
struct FortPawn_TriggerFeedbackEvent final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPawn*                              InstigatorPawn;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPawn*                              Recipient;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverriddenDelay;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPawn_TriggerFeedbackEvent) == 0x000008, "Wrong alignment on FortPawn_TriggerFeedbackEvent");
static_assert(sizeof(FortPawn_TriggerFeedbackEvent) == 0x000020, "Wrong size on FortPawn_TriggerFeedbackEvent");
static_assert(offsetof(FortPawn_TriggerFeedbackEvent, EventName) == 0x000000, "Member 'FortPawn_TriggerFeedbackEvent::EventName' has a wrong offset!");
static_assert(offsetof(FortPawn_TriggerFeedbackEvent, InstigatorPawn) == 0x000008, "Member 'FortPawn_TriggerFeedbackEvent::InstigatorPawn' has a wrong offset!");
static_assert(offsetof(FortPawn_TriggerFeedbackEvent, Recipient) == 0x000010, "Member 'FortPawn_TriggerFeedbackEvent::Recipient' has a wrong offset!");
static_assert(offsetof(FortPawn_TriggerFeedbackEvent, OverriddenDelay) == 0x000018, "Member 'FortPawn_TriggerFeedbackEvent::OverriddenDelay' has a wrong offset!");

// Function FortniteGame.FortPawn.GetControlRecoveryBehavior
// 0x0001 (0x0001 - 0x0000)
struct FortPawn_GetControlRecoveryBehavior final
{
public:
	EFortControlRecoveryBehavior                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetControlRecoveryBehavior) == 0x000001, "Wrong alignment on FortPawn_GetControlRecoveryBehavior");
static_assert(sizeof(FortPawn_GetControlRecoveryBehavior) == 0x000001, "Wrong size on FortPawn_GetControlRecoveryBehavior");
static_assert(offsetof(FortPawn_GetControlRecoveryBehavior, ReturnValue) == 0x000000, "Member 'FortPawn_GetControlRecoveryBehavior::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetControlResistance
// 0x0004 (0x0004 - 0x0000)
struct FortPawn_GetControlResistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetControlResistance) == 0x000004, "Wrong alignment on FortPawn_GetControlResistance");
static_assert(sizeof(FortPawn_GetControlResistance) == 0x000004, "Wrong size on FortPawn_GetControlResistance");
static_assert(offsetof(FortPawn_GetControlResistance, ReturnValue) == 0x000000, "Member 'FortPawn_GetControlResistance::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetCurrentSentenceSpeechText
// 0x0018 (0x0018 - 0x0000)
struct FortPawn_GetCurrentSentenceSpeechText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetCurrentSentenceSpeechText) == 0x000008, "Wrong alignment on FortPawn_GetCurrentSentenceSpeechText");
static_assert(sizeof(FortPawn_GetCurrentSentenceSpeechText) == 0x000018, "Wrong size on FortPawn_GetCurrentSentenceSpeechText");
static_assert(offsetof(FortPawn_GetCurrentSentenceSpeechText, ReturnValue) == 0x000000, "Member 'FortPawn_GetCurrentSentenceSpeechText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetDamageZone
// 0x0088 (0x0088 - 0x0000)
struct FortPawn_GetDamageZone final
{
public:
	struct FHitResult                             InHitResult;                                       // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EFortDamageZone                               ReturnValue;                                       // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPawn_GetDamageZone) == 0x000008, "Wrong alignment on FortPawn_GetDamageZone");
static_assert(sizeof(FortPawn_GetDamageZone) == 0x000088, "Wrong size on FortPawn_GetDamageZone");
static_assert(offsetof(FortPawn_GetDamageZone, InHitResult) == 0x000000, "Member 'FortPawn_GetDamageZone::InHitResult' has a wrong offset!");
static_assert(offsetof(FortPawn_GetDamageZone, ReturnValue) == 0x000080, "Member 'FortPawn_GetDamageZone::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetDefaultTargetingOrigin
// 0x000C (0x000C - 0x0000)
struct FortPawn_GetDefaultTargetingOrigin final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetDefaultTargetingOrigin) == 0x000004, "Wrong alignment on FortPawn_GetDefaultTargetingOrigin");
static_assert(sizeof(FortPawn_GetDefaultTargetingOrigin) == 0x00000C, "Wrong size on FortPawn_GetDefaultTargetingOrigin");
static_assert(offsetof(FortPawn_GetDefaultTargetingOrigin, ReturnValue) == 0x000000, "Member 'FortPawn_GetDefaultTargetingOrigin::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetDefaultTargetingRotation
// 0x000C (0x000C - 0x0000)
struct FortPawn_GetDefaultTargetingRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetDefaultTargetingRotation) == 0x000004, "Wrong alignment on FortPawn_GetDefaultTargetingRotation");
static_assert(sizeof(FortPawn_GetDefaultTargetingRotation) == 0x00000C, "Wrong size on FortPawn_GetDefaultTargetingRotation");
static_assert(offsetof(FortPawn_GetDefaultTargetingRotation, ReturnValue) == 0x000000, "Member 'FortPawn_GetDefaultTargetingRotation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetEncounterInfo
// 0x0008 (0x0008 - 0x0000)
struct FortPawn_GetEncounterInfo final
{
public:
	class UFortAIEncounterInfo*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetEncounterInfo) == 0x000008, "Wrong alignment on FortPawn_GetEncounterInfo");
static_assert(sizeof(FortPawn_GetEncounterInfo) == 0x000008, "Wrong size on FortPawn_GetEncounterInfo");
static_assert(offsetof(FortPawn_GetEncounterInfo, ReturnValue) == 0x000000, "Member 'FortPawn_GetEncounterInfo::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetHealth
// 0x0004 (0x0004 - 0x0000)
struct FortPawn_GetHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetHealth) == 0x000004, "Wrong alignment on FortPawn_GetHealth");
static_assert(sizeof(FortPawn_GetHealth) == 0x000004, "Wrong size on FortPawn_GetHealth");
static_assert(offsetof(FortPawn_GetHealth, ReturnValue) == 0x000000, "Member 'FortPawn_GetHealth::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetHealthPercent
// 0x0004 (0x0004 - 0x0000)
struct FortPawn_GetHealthPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetHealthPercent) == 0x000004, "Wrong alignment on FortPawn_GetHealthPercent");
static_assert(sizeof(FortPawn_GetHealthPercent) == 0x000004, "Wrong size on FortPawn_GetHealthPercent");
static_assert(offsetof(FortPawn_GetHealthPercent, ReturnValue) == 0x000000, "Member 'FortPawn_GetHealthPercent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetKnockbackMultiplier
// 0x0004 (0x0004 - 0x0000)
struct FortPawn_GetKnockbackMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetKnockbackMultiplier) == 0x000004, "Wrong alignment on FortPawn_GetKnockbackMultiplier");
static_assert(sizeof(FortPawn_GetKnockbackMultiplier) == 0x000004, "Wrong size on FortPawn_GetKnockbackMultiplier");
static_assert(offsetof(FortPawn_GetKnockbackMultiplier, ReturnValue) == 0x000000, "Member 'FortPawn_GetKnockbackMultiplier::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetKnockbackThreshold
// 0x0004 (0x0004 - 0x0000)
struct FortPawn_GetKnockbackThreshold final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetKnockbackThreshold) == 0x000004, "Wrong alignment on FortPawn_GetKnockbackThreshold");
static_assert(sizeof(FortPawn_GetKnockbackThreshold) == 0x000004, "Wrong size on FortPawn_GetKnockbackThreshold");
static_assert(offsetof(FortPawn_GetKnockbackThreshold, ReturnValue) == 0x000000, "Member 'FortPawn_GetKnockbackThreshold::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetLocalViewingPlayerController
// 0x0008 (0x0008 - 0x0000)
struct FortPawn_GetLocalViewingPlayerController final
{
public:
	class APlayerController*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetLocalViewingPlayerController) == 0x000008, "Wrong alignment on FortPawn_GetLocalViewingPlayerController");
static_assert(sizeof(FortPawn_GetLocalViewingPlayerController) == 0x000008, "Wrong size on FortPawn_GetLocalViewingPlayerController");
static_assert(offsetof(FortPawn_GetLocalViewingPlayerController, ReturnValue) == 0x000000, "Member 'FortPawn_GetLocalViewingPlayerController::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetMaxControlResistance
// 0x0004 (0x0004 - 0x0000)
struct FortPawn_GetMaxControlResistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetMaxControlResistance) == 0x000004, "Wrong alignment on FortPawn_GetMaxControlResistance");
static_assert(sizeof(FortPawn_GetMaxControlResistance) == 0x000004, "Wrong size on FortPawn_GetMaxControlResistance");
static_assert(offsetof(FortPawn_GetMaxControlResistance, ReturnValue) == 0x000000, "Member 'FortPawn_GetMaxControlResistance::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetMaxHealth
// 0x0004 (0x0004 - 0x0000)
struct FortPawn_GetMaxHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetMaxHealth) == 0x000004, "Wrong alignment on FortPawn_GetMaxHealth");
static_assert(sizeof(FortPawn_GetMaxHealth) == 0x000004, "Wrong size on FortPawn_GetMaxHealth");
static_assert(offsetof(FortPawn_GetMaxHealth, ReturnValue) == 0x000000, "Member 'FortPawn_GetMaxHealth::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetMaxShield
// 0x0004 (0x0004 - 0x0000)
struct FortPawn_GetMaxShield final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetMaxShield) == 0x000004, "Wrong alignment on FortPawn_GetMaxShield");
static_assert(sizeof(FortPawn_GetMaxShield) == 0x000004, "Wrong size on FortPawn_GetMaxShield");
static_assert(offsetof(FortPawn_GetMaxShield, ReturnValue) == 0x000000, "Member 'FortPawn_GetMaxShield::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetMeleeComboCounter
// 0x0004 (0x0004 - 0x0000)
struct FortPawn_GetMeleeComboCounter final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetMeleeComboCounter) == 0x000004, "Wrong alignment on FortPawn_GetMeleeComboCounter");
static_assert(sizeof(FortPawn_GetMeleeComboCounter) == 0x000004, "Wrong size on FortPawn_GetMeleeComboCounter");
static_assert(offsetof(FortPawn_GetMeleeComboCounter, ReturnValue) == 0x000000, "Member 'FortPawn_GetMeleeComboCounter::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetMeleeReticleStrikeAngle
// 0x0008 (0x0008 - 0x0000)
struct FortPawn_GetMeleeReticleStrikeAngle final
{
public:
	bool                                          bPrimaryInput;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetMeleeReticleStrikeAngle) == 0x000004, "Wrong alignment on FortPawn_GetMeleeReticleStrikeAngle");
static_assert(sizeof(FortPawn_GetMeleeReticleStrikeAngle) == 0x000008, "Wrong size on FortPawn_GetMeleeReticleStrikeAngle");
static_assert(offsetof(FortPawn_GetMeleeReticleStrikeAngle, bPrimaryInput) == 0x000000, "Member 'FortPawn_GetMeleeReticleStrikeAngle::bPrimaryInput' has a wrong offset!");
static_assert(offsetof(FortPawn_GetMeleeReticleStrikeAngle, ReturnValue) == 0x000004, "Member 'FortPawn_GetMeleeReticleStrikeAngle::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetMovementPredictionPosition
// 0x0010 (0x0010 - 0x0000)
struct FortPawn_GetMovementPredictionPosition final
{
public:
	float                                         PredictionDeltaTime;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetMovementPredictionPosition) == 0x000004, "Wrong alignment on FortPawn_GetMovementPredictionPosition");
static_assert(sizeof(FortPawn_GetMovementPredictionPosition) == 0x000010, "Wrong size on FortPawn_GetMovementPredictionPosition");
static_assert(offsetof(FortPawn_GetMovementPredictionPosition, PredictionDeltaTime) == 0x000000, "Member 'FortPawn_GetMovementPredictionPosition::PredictionDeltaTime' has a wrong offset!");
static_assert(offsetof(FortPawn_GetMovementPredictionPosition, ReturnValue) == 0x000004, "Member 'FortPawn_GetMovementPredictionPosition::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetShield
// 0x0004 (0x0004 - 0x0000)
struct FortPawn_GetShield final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetShield) == 0x000004, "Wrong alignment on FortPawn_GetShield");
static_assert(sizeof(FortPawn_GetShield) == 0x000004, "Wrong size on FortPawn_GetShield");
static_assert(offsetof(FortPawn_GetShield, ReturnValue) == 0x000000, "Member 'FortPawn_GetShield::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetSphericalHitDirection
// 0x0014 (0x0014 - 0x0000)
struct FortPawn_GetSphericalHitDirection final
{
public:
	struct FVector                                HitDirection;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Azimuth;                                           // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Elevation;                                         // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetSphericalHitDirection) == 0x000004, "Wrong alignment on FortPawn_GetSphericalHitDirection");
static_assert(sizeof(FortPawn_GetSphericalHitDirection) == 0x000014, "Wrong size on FortPawn_GetSphericalHitDirection");
static_assert(offsetof(FortPawn_GetSphericalHitDirection, HitDirection) == 0x000000, "Member 'FortPawn_GetSphericalHitDirection::HitDirection' has a wrong offset!");
static_assert(offsetof(FortPawn_GetSphericalHitDirection, Azimuth) == 0x00000C, "Member 'FortPawn_GetSphericalHitDirection::Azimuth' has a wrong offset!");
static_assert(offsetof(FortPawn_GetSphericalHitDirection, Elevation) == 0x000010, "Member 'FortPawn_GetSphericalHitDirection::Elevation' has a wrong offset!");

// Function FortniteGame.FortPawn.GetTargetingTransform
// 0x0040 (0x0040 - 0x0000)
struct FortPawn_GetTargetingTransform final
{
public:
	EFortAbilityTargetingSource                   Source;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortGameplayAbility*                   SourceAbility;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetTargetingTransform) == 0x000010, "Wrong alignment on FortPawn_GetTargetingTransform");
static_assert(sizeof(FortPawn_GetTargetingTransform) == 0x000040, "Wrong size on FortPawn_GetTargetingTransform");
static_assert(offsetof(FortPawn_GetTargetingTransform, Source) == 0x000000, "Member 'FortPawn_GetTargetingTransform::Source' has a wrong offset!");
static_assert(offsetof(FortPawn_GetTargetingTransform, SourceAbility) == 0x000008, "Member 'FortPawn_GetTargetingTransform::SourceAbility' has a wrong offset!");
static_assert(offsetof(FortPawn_GetTargetingTransform, ReturnValue) == 0x000010, "Member 'FortPawn_GetTargetingTransform::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.HasCurrentMontage
// 0x0001 (0x0001 - 0x0000)
struct FortPawn_HasCurrentMontage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_HasCurrentMontage) == 0x000001, "Wrong alignment on FortPawn_HasCurrentMontage");
static_assert(sizeof(FortPawn_HasCurrentMontage) == 0x000001, "Wrong size on FortPawn_HasCurrentMontage");
static_assert(offsetof(FortPawn_HasCurrentMontage, ReturnValue) == 0x000000, "Member 'FortPawn_HasCurrentMontage::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.IsActionInputIgnored
// 0x0001 (0x0001 - 0x0000)
struct FortPawn_IsActionInputIgnored final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_IsActionInputIgnored) == 0x000001, "Wrong alignment on FortPawn_IsActionInputIgnored");
static_assert(sizeof(FortPawn_IsActionInputIgnored) == 0x000001, "Wrong size on FortPawn_IsActionInputIgnored");
static_assert(offsetof(FortPawn_IsActionInputIgnored, ReturnValue) == 0x000000, "Member 'FortPawn_IsActionInputIgnored::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.IsAllowChainStun
// 0x0001 (0x0001 - 0x0000)
struct FortPawn_IsAllowChainStun final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_IsAllowChainStun) == 0x000001, "Wrong alignment on FortPawn_IsAllowChainStun");
static_assert(sizeof(FortPawn_IsAllowChainStun) == 0x000001, "Wrong size on FortPawn_IsAllowChainStun");
static_assert(offsetof(FortPawn_IsAllowChainStun, ReturnValue) == 0x000000, "Member 'FortPawn_IsAllowChainStun::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.IsDBNO
// 0x0001 (0x0001 - 0x0000)
struct FortPawn_IsDBNO final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_IsDBNO) == 0x000001, "Wrong alignment on FortPawn_IsDBNO");
static_assert(sizeof(FortPawn_IsDBNO) == 0x000001, "Wrong size on FortPawn_IsDBNO");
static_assert(offsetof(FortPawn_IsDBNO, ReturnValue) == 0x000000, "Member 'FortPawn_IsDBNO::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.IsDead
// 0x0001 (0x0001 - 0x0000)
struct FortPawn_IsDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_IsDead) == 0x000001, "Wrong alignment on FortPawn_IsDead");
static_assert(sizeof(FortPawn_IsDead) == 0x000001, "Wrong size on FortPawn_IsDead");
static_assert(offsetof(FortPawn_IsDead, ReturnValue) == 0x000000, "Member 'FortPawn_IsDead::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.IsFrontalHit
// 0x0010 (0x0010 - 0x0000)
struct FortPawn_IsFrontalHit final
{
public:
	struct FVector                                HitDirection;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPawn_IsFrontalHit) == 0x000004, "Wrong alignment on FortPawn_IsFrontalHit");
static_assert(sizeof(FortPawn_IsFrontalHit) == 0x000010, "Wrong size on FortPawn_IsFrontalHit");
static_assert(offsetof(FortPawn_IsFrontalHit, HitDirection) == 0x000000, "Member 'FortPawn_IsFrontalHit::HitDirection' has a wrong offset!");
static_assert(offsetof(FortPawn_IsFrontalHit, ReturnValue) == 0x00000C, "Member 'FortPawn_IsFrontalHit::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.IsStaggered
// 0x0001 (0x0001 - 0x0000)
struct FortPawn_IsStaggered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_IsStaggered) == 0x000001, "Wrong alignment on FortPawn_IsStaggered");
static_assert(sizeof(FortPawn_IsStaggered) == 0x000001, "Wrong size on FortPawn_IsStaggered");
static_assert(offsetof(FortPawn_IsStaggered, ReturnValue) == 0x000000, "Member 'FortPawn_IsStaggered::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.IsWeaponHolstered
// 0x0001 (0x0001 - 0x0000)
struct FortPawn_IsWeaponHolstered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_IsWeaponHolstered) == 0x000001, "Wrong alignment on FortPawn_IsWeaponHolstered");
static_assert(sizeof(FortPawn_IsWeaponHolstered) == 0x000001, "Wrong size on FortPawn_IsWeaponHolstered");
static_assert(offsetof(FortPawn_IsWeaponHolstered, ReturnValue) == 0x000000, "Member 'FortPawn_IsWeaponHolstered::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIPawn.GetGroundSpeedForUrgency
// 0x0010 (0x0010 - 0x0000)
struct FortAIPawn_GetGroundSpeedForUrgency final
{
public:
	class AFortAIPawn*                            FortAIPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMovementUrgency                          Urgency;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_GetGroundSpeedForUrgency) == 0x000008, "Wrong alignment on FortAIPawn_GetGroundSpeedForUrgency");
static_assert(sizeof(FortAIPawn_GetGroundSpeedForUrgency) == 0x000010, "Wrong size on FortAIPawn_GetGroundSpeedForUrgency");
static_assert(offsetof(FortAIPawn_GetGroundSpeedForUrgency, FortAIPawn) == 0x000000, "Member 'FortAIPawn_GetGroundSpeedForUrgency::FortAIPawn' has a wrong offset!");
static_assert(offsetof(FortAIPawn_GetGroundSpeedForUrgency, Urgency) == 0x000008, "Member 'FortAIPawn_GetGroundSpeedForUrgency::Urgency' has a wrong offset!");
static_assert(offsetof(FortAIPawn_GetGroundSpeedForUrgency, ReturnValue) == 0x00000C, "Member 'FortAIPawn_GetGroundSpeedForUrgency::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIPawn.GetMovementStyle
// 0x0010 (0x0010 - 0x0000)
struct FortAIPawn_GetMovementStyle final
{
public:
	const class AFortAIPawn*                      FortAIPawn;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMovementStyle                            ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIPawn_GetMovementStyle) == 0x000008, "Wrong alignment on FortAIPawn_GetMovementStyle");
static_assert(sizeof(FortAIPawn_GetMovementStyle) == 0x000010, "Wrong size on FortAIPawn_GetMovementStyle");
static_assert(offsetof(FortAIPawn_GetMovementStyle, FortAIPawn) == 0x000000, "Member 'FortAIPawn_GetMovementStyle::FortAIPawn' has a wrong offset!");
static_assert(offsetof(FortAIPawn_GetMovementStyle, ReturnValue) == 0x000008, "Member 'FortAIPawn_GetMovementStyle::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIPawn.GetMovementUrgency
// 0x0010 (0x0010 - 0x0000)
struct FortAIPawn_GetMovementUrgency final
{
public:
	class AFortAIPawn*                            FortAIPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMovementUrgency                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIPawn_GetMovementUrgency) == 0x000008, "Wrong alignment on FortAIPawn_GetMovementUrgency");
static_assert(sizeof(FortAIPawn_GetMovementUrgency) == 0x000010, "Wrong size on FortAIPawn_GetMovementUrgency");
static_assert(offsetof(FortAIPawn_GetMovementUrgency, FortAIPawn) == 0x000000, "Member 'FortAIPawn_GetMovementUrgency::FortAIPawn' has a wrong offset!");
static_assert(offsetof(FortAIPawn_GetMovementUrgency, ReturnValue) == 0x000008, "Member 'FortAIPawn_GetMovementUrgency::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIPawn.AddFortAbilitySet
// 0x0008 (0x0008 - 0x0000)
struct FortAIPawn_AddFortAbilitySet final
{
public:
	class UFortAbilitySet*                        FortAbilitySet;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_AddFortAbilitySet) == 0x000008, "Wrong alignment on FortAIPawn_AddFortAbilitySet");
static_assert(sizeof(FortAIPawn_AddFortAbilitySet) == 0x000008, "Wrong size on FortAIPawn_AddFortAbilitySet");
static_assert(offsetof(FortAIPawn_AddFortAbilitySet, FortAbilitySet) == 0x000000, "Member 'FortAIPawn_AddFortAbilitySet::FortAbilitySet' has a wrong offset!");

// Function FortniteGame.FortAIPawn.AddUnreachablePickup
// 0x0008 (0x0008 - 0x0000)
struct FortAIPawn_AddUnreachablePickup final
{
public:
	class AFortPickup*                            Pickup;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_AddUnreachablePickup) == 0x000008, "Wrong alignment on FortAIPawn_AddUnreachablePickup");
static_assert(sizeof(FortAIPawn_AddUnreachablePickup) == 0x000008, "Wrong size on FortAIPawn_AddUnreachablePickup");
static_assert(offsetof(FortAIPawn_AddUnreachablePickup, Pickup) == 0x000000, "Member 'FortAIPawn_AddUnreachablePickup::Pickup' has a wrong offset!");

// Function FortniteGame.FortAIPawn.CanHitTargetWithAbility
// 0x0030 (0x0030 - 0x0000)
struct FortAIPawn_CanHitTargetWithAbility final
{
public:
	struct FGameplayTagContainer                  GameplayAbilityTag;                                // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	class AActor*                                 CanHitTarget;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseIdealYawRotationToTarget;                      // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIPawn_CanHitTargetWithAbility) == 0x000008, "Wrong alignment on FortAIPawn_CanHitTargetWithAbility");
static_assert(sizeof(FortAIPawn_CanHitTargetWithAbility) == 0x000030, "Wrong size on FortAIPawn_CanHitTargetWithAbility");
static_assert(offsetof(FortAIPawn_CanHitTargetWithAbility, GameplayAbilityTag) == 0x000000, "Member 'FortAIPawn_CanHitTargetWithAbility::GameplayAbilityTag' has a wrong offset!");
static_assert(offsetof(FortAIPawn_CanHitTargetWithAbility, CanHitTarget) == 0x000020, "Member 'FortAIPawn_CanHitTargetWithAbility::CanHitTarget' has a wrong offset!");
static_assert(offsetof(FortAIPawn_CanHitTargetWithAbility, bUseIdealYawRotationToTarget) == 0x000028, "Member 'FortAIPawn_CanHitTargetWithAbility::bUseIdealYawRotationToTarget' has a wrong offset!");
static_assert(offsetof(FortAIPawn_CanHitTargetWithAbility, ReturnValue) == 0x000029, "Member 'FortAIPawn_CanHitTargetWithAbility::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIPawn.ClearAIFocalPoint
// 0x0001 (0x0001 - 0x0000)
struct FortAIPawn_ClearAIFocalPoint final
{
public:
	bool                                          bUseAttackingPriority;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_ClearAIFocalPoint) == 0x000001, "Wrong alignment on FortAIPawn_ClearAIFocalPoint");
static_assert(sizeof(FortAIPawn_ClearAIFocalPoint) == 0x000001, "Wrong size on FortAIPawn_ClearAIFocalPoint");
static_assert(offsetof(FortAIPawn_ClearAIFocalPoint, bUseAttackingPriority) == 0x000000, "Member 'FortAIPawn_ClearAIFocalPoint::bUseAttackingPriority' has a wrong offset!");

// Function FortniteGame.FortAIPawn.GrabPickup
// 0x0008 (0x0008 - 0x0000)
struct FortAIPawn_GrabPickup final
{
public:
	class AFortPickup*                            Pickup;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_GrabPickup) == 0x000008, "Wrong alignment on FortAIPawn_GrabPickup");
static_assert(sizeof(FortAIPawn_GrabPickup) == 0x000008, "Wrong size on FortAIPawn_GrabPickup");
static_assert(offsetof(FortAIPawn_GrabPickup, Pickup) == 0x000000, "Member 'FortAIPawn_GrabPickup::Pickup' has a wrong offset!");

// Function FortniteGame.FortAIPawn.OnCheatUpdateSpecialEventGE
// 0x0001 (0x0001 - 0x0000)
struct FortAIPawn_OnCheatUpdateSpecialEventGE final
{
public:
	bool                                          bShouldUseSpecialEventGE;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_OnCheatUpdateSpecialEventGE) == 0x000001, "Wrong alignment on FortAIPawn_OnCheatUpdateSpecialEventGE");
static_assert(sizeof(FortAIPawn_OnCheatUpdateSpecialEventGE) == 0x000001, "Wrong size on FortAIPawn_OnCheatUpdateSpecialEventGE");
static_assert(offsetof(FortAIPawn_OnCheatUpdateSpecialEventGE, bShouldUseSpecialEventGE) == 0x000000, "Member 'FortAIPawn_OnCheatUpdateSpecialEventGE::bShouldUseSpecialEventGE' has a wrong offset!");

// Function FortniteGame.FortAIPawn.OnDefenderTrapSet
// 0x0008 (0x0008 - 0x0000)
struct FortAIPawn_OnDefenderTrapSet final
{
public:
	class ABuildingTrapDefender*                  OldDefenderTrap;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_OnDefenderTrapSet) == 0x000008, "Wrong alignment on FortAIPawn_OnDefenderTrapSet");
static_assert(sizeof(FortAIPawn_OnDefenderTrapSet) == 0x000008, "Wrong size on FortAIPawn_OnDefenderTrapSet");
static_assert(offsetof(FortAIPawn_OnDefenderTrapSet, OldDefenderTrap) == 0x000000, "Member 'FortAIPawn_OnDefenderTrapSet::OldDefenderTrap' has a wrong offset!");

// Function FortniteGame.FortAIPawn.OnOutsideOfTetherBeyondMaxTimeAllowed
// 0x0001 (0x0001 - 0x0000)
struct FortAIPawn_OnOutsideOfTetherBeyondMaxTimeAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_OnOutsideOfTetherBeyondMaxTimeAllowed) == 0x000001, "Wrong alignment on FortAIPawn_OnOutsideOfTetherBeyondMaxTimeAllowed");
static_assert(sizeof(FortAIPawn_OnOutsideOfTetherBeyondMaxTimeAllowed) == 0x000001, "Wrong size on FortAIPawn_OnOutsideOfTetherBeyondMaxTimeAllowed");
static_assert(offsetof(FortAIPawn_OnOutsideOfTetherBeyondMaxTimeAllowed, ReturnValue) == 0x000000, "Member 'FortAIPawn_OnOutsideOfTetherBeyondMaxTimeAllowed::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIPawn.OnSleepingAIsFloorBuildingActorDied
// 0x0050 (0x0050 - 0x0000)
struct FortAIPawn_OnSleepingAIsFloorBuildingActorDied final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0030(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Momentum;                                          // 0x0040(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIPawn_OnSleepingAIsFloorBuildingActorDied) == 0x000008, "Wrong alignment on FortAIPawn_OnSleepingAIsFloorBuildingActorDied");
static_assert(sizeof(FortAIPawn_OnSleepingAIsFloorBuildingActorDied) == 0x000050, "Wrong size on FortAIPawn_OnSleepingAIsFloorBuildingActorDied");
static_assert(offsetof(FortAIPawn_OnSleepingAIsFloorBuildingActorDied, DamagedActor) == 0x000000, "Member 'FortAIPawn_OnSleepingAIsFloorBuildingActorDied::DamagedActor' has a wrong offset!");
static_assert(offsetof(FortAIPawn_OnSleepingAIsFloorBuildingActorDied, Damage) == 0x000008, "Member 'FortAIPawn_OnSleepingAIsFloorBuildingActorDied::Damage' has a wrong offset!");
static_assert(offsetof(FortAIPawn_OnSleepingAIsFloorBuildingActorDied, InstigatedBy) == 0x000010, "Member 'FortAIPawn_OnSleepingAIsFloorBuildingActorDied::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortAIPawn_OnSleepingAIsFloorBuildingActorDied, DamageCauser) == 0x000018, "Member 'FortAIPawn_OnSleepingAIsFloorBuildingActorDied::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortAIPawn_OnSleepingAIsFloorBuildingActorDied, HitLocation) == 0x000020, "Member 'FortAIPawn_OnSleepingAIsFloorBuildingActorDied::HitLocation' has a wrong offset!");
static_assert(offsetof(FortAIPawn_OnSleepingAIsFloorBuildingActorDied, FHitComponent) == 0x000030, "Member 'FortAIPawn_OnSleepingAIsFloorBuildingActorDied::FHitComponent' has a wrong offset!");
static_assert(offsetof(FortAIPawn_OnSleepingAIsFloorBuildingActorDied, BoneName) == 0x000038, "Member 'FortAIPawn_OnSleepingAIsFloorBuildingActorDied::BoneName' has a wrong offset!");
static_assert(offsetof(FortAIPawn_OnSleepingAIsFloorBuildingActorDied, Momentum) == 0x000040, "Member 'FortAIPawn_OnSleepingAIsFloorBuildingActorDied::Momentum' has a wrong offset!");

// Function FortniteGame.FortAIPawn.SetAIFocalPoint
// 0x0018 (0x0018 - 0x0000)
struct FortAIPawn_SetAIFocalPoint final
{
public:
	class AActor*                                 FocusTarget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FocalPoint;                                        // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAttackingPriority;                             // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIPawn_SetAIFocalPoint) == 0x000008, "Wrong alignment on FortAIPawn_SetAIFocalPoint");
static_assert(sizeof(FortAIPawn_SetAIFocalPoint) == 0x000018, "Wrong size on FortAIPawn_SetAIFocalPoint");
static_assert(offsetof(FortAIPawn_SetAIFocalPoint, FocusTarget) == 0x000000, "Member 'FortAIPawn_SetAIFocalPoint::FocusTarget' has a wrong offset!");
static_assert(offsetof(FortAIPawn_SetAIFocalPoint, FocalPoint) == 0x000008, "Member 'FortAIPawn_SetAIFocalPoint::FocalPoint' has a wrong offset!");
static_assert(offsetof(FortAIPawn_SetAIFocalPoint, bUseAttackingPriority) == 0x000014, "Member 'FortAIPawn_SetAIFocalPoint::bUseAttackingPriority' has a wrong offset!");

// Function FortniteGame.FortAIPawn.SetAIRotationRate
// 0x000C (0x000C - 0x0000)
struct FortAIPawn_SetAIRotationRate final
{
public:
	struct FRotator                               AIRotationRate;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_SetAIRotationRate) == 0x000004, "Wrong alignment on FortAIPawn_SetAIRotationRate");
static_assert(sizeof(FortAIPawn_SetAIRotationRate) == 0x00000C, "Wrong size on FortAIPawn_SetAIRotationRate");
static_assert(offsetof(FortAIPawn_SetAIRotationRate, AIRotationRate) == 0x000000, "Member 'FortAIPawn_SetAIRotationRate::AIRotationRate' has a wrong offset!");

// Function FortniteGame.FortAIPawn.SetAIType
// 0x0001 (0x0001 - 0x0000)
struct FortAIPawn_SetAIType final
{
public:
	EFortressAIType                               InAIType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_SetAIType) == 0x000001, "Wrong alignment on FortAIPawn_SetAIType");
static_assert(sizeof(FortAIPawn_SetAIType) == 0x000001, "Wrong size on FortAIPawn_SetAIType");
static_assert(offsetof(FortAIPawn_SetAIType, InAIType) == 0x000000, "Member 'FortAIPawn_SetAIType::InAIType' has a wrong offset!");

// Function FortniteGame.FortAIPawn.SetBlockCollisionWithOtherAI
// 0x0001 (0x0001 - 0x0000)
struct FortAIPawn_SetBlockCollisionWithOtherAI final
{
public:
	bool                                          bInEnableBlockingCollisionWithOtherAI;             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_SetBlockCollisionWithOtherAI) == 0x000001, "Wrong alignment on FortAIPawn_SetBlockCollisionWithOtherAI");
static_assert(sizeof(FortAIPawn_SetBlockCollisionWithOtherAI) == 0x000001, "Wrong size on FortAIPawn_SetBlockCollisionWithOtherAI");
static_assert(offsetof(FortAIPawn_SetBlockCollisionWithOtherAI, bInEnableBlockingCollisionWithOtherAI) == 0x000000, "Member 'FortAIPawn_SetBlockCollisionWithOtherAI::bInEnableBlockingCollisionWithOtherAI' has a wrong offset!");

// Function FortniteGame.FortAIPawn.SetCanInteract
// 0x0001 (0x0001 - 0x0000)
struct FortAIPawn_SetCanInteract final
{
public:
	bool                                          CanInteract;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_SetCanInteract) == 0x000001, "Wrong alignment on FortAIPawn_SetCanInteract");
static_assert(sizeof(FortAIPawn_SetCanInteract) == 0x000001, "Wrong size on FortAIPawn_SetCanInteract");
static_assert(offsetof(FortAIPawn_SetCanInteract, CanInteract) == 0x000000, "Member 'FortAIPawn_SetCanInteract::CanInteract' has a wrong offset!");

// Function FortniteGame.FortAIPawn.SetCanSleep
// 0x0001 (0x0001 - 0x0000)
struct FortAIPawn_SetCanSleep final
{
public:
	bool                                          InCanSleep;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_SetCanSleep) == 0x000001, "Wrong alignment on FortAIPawn_SetCanSleep");
static_assert(sizeof(FortAIPawn_SetCanSleep) == 0x000001, "Wrong size on FortAIPawn_SetCanSleep");
static_assert(offsetof(FortAIPawn_SetCanSleep, InCanSleep) == 0x000000, "Member 'FortAIPawn_SetCanSleep::InCanSleep' has a wrong offset!");

// Function FortniteGame.FortAIPawn.SetCollisionProfileName
// 0x0008 (0x0008 - 0x0000)
struct FortAIPawn_SetCollisionProfileName final
{
public:
	class FName                                   InCollisionProfileName;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_SetCollisionProfileName) == 0x000004, "Wrong alignment on FortAIPawn_SetCollisionProfileName");
static_assert(sizeof(FortAIPawn_SetCollisionProfileName) == 0x000008, "Wrong size on FortAIPawn_SetCollisionProfileName");
static_assert(offsetof(FortAIPawn_SetCollisionProfileName, InCollisionProfileName) == 0x000000, "Member 'FortAIPawn_SetCollisionProfileName::InCollisionProfileName' has a wrong offset!");

// Function FortniteGame.FortAIPawn.SetCurrentAimTarget
// 0x0008 (0x0008 - 0x0000)
struct FortAIPawn_SetCurrentAimTarget final
{
public:
	class AActor*                                 AimTarget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_SetCurrentAimTarget) == 0x000008, "Wrong alignment on FortAIPawn_SetCurrentAimTarget");
static_assert(sizeof(FortAIPawn_SetCurrentAimTarget) == 0x000008, "Wrong size on FortAIPawn_SetCurrentAimTarget");
static_assert(offsetof(FortAIPawn_SetCurrentAimTarget, AimTarget) == 0x000000, "Member 'FortAIPawn_SetCurrentAimTarget::AimTarget' has a wrong offset!");

// Function FortniteGame.FortAIPawn.SetDefenderTrap
// 0x0008 (0x0008 - 0x0000)
struct FortAIPawn_SetDefenderTrap final
{
public:
	class ABuildingTrapDefender*                  InDefenderTrap;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_SetDefenderTrap) == 0x000008, "Wrong alignment on FortAIPawn_SetDefenderTrap");
static_assert(sizeof(FortAIPawn_SetDefenderTrap) == 0x000008, "Wrong size on FortAIPawn_SetDefenderTrap");
static_assert(offsetof(FortAIPawn_SetDefenderTrap, InDefenderTrap) == 0x000000, "Member 'FortAIPawn_SetDefenderTrap::InDefenderTrap' has a wrong offset!");

// Function FortniteGame.FortAIPawn.SetEncounterInfo
// 0x0008 (0x0008 - 0x0000)
struct FortAIPawn_SetEncounterInfo final
{
public:
	class UFortAIEncounterInfo*                   InEncounterInfo;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_SetEncounterInfo) == 0x000008, "Wrong alignment on FortAIPawn_SetEncounterInfo");
static_assert(sizeof(FortAIPawn_SetEncounterInfo) == 0x000008, "Wrong size on FortAIPawn_SetEncounterInfo");
static_assert(offsetof(FortAIPawn_SetEncounterInfo, InEncounterInfo) == 0x000000, "Member 'FortAIPawn_SetEncounterInfo::InEncounterInfo' has a wrong offset!");

// Function FortniteGame.FortAIPawn.SetEyeColor
// 0x0014 (0x0014 - 0x0000)
struct FortAIPawn_SetEyeColor final
{
public:
	struct FLinearColor                           NewEyeColor;                                       // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewEyeBrightness;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_SetEyeColor) == 0x000004, "Wrong alignment on FortAIPawn_SetEyeColor");
static_assert(sizeof(FortAIPawn_SetEyeColor) == 0x000014, "Wrong size on FortAIPawn_SetEyeColor");
static_assert(offsetof(FortAIPawn_SetEyeColor, NewEyeColor) == 0x000000, "Member 'FortAIPawn_SetEyeColor::NewEyeColor' has a wrong offset!");
static_assert(offsetof(FortAIPawn_SetEyeColor, NewEyeBrightness) == 0x000010, "Member 'FortAIPawn_SetEyeColor::NewEyeBrightness' has a wrong offset!");

// Function FortniteGame.FortAIPawn.SetIsCharging
// 0x0001 (0x0001 - 0x0000)
struct FortAIPawn_SetIsCharging final
{
public:
	bool                                          bNewIsCharging;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_SetIsCharging) == 0x000001, "Wrong alignment on FortAIPawn_SetIsCharging");
static_assert(sizeof(FortAIPawn_SetIsCharging) == 0x000001, "Wrong size on FortAIPawn_SetIsCharging");
static_assert(offsetof(FortAIPawn_SetIsCharging, bNewIsCharging) == 0x000000, "Member 'FortAIPawn_SetIsCharging::bNewIsCharging' has a wrong offset!");

// Function FortniteGame.FortAIPawn.SetMinimapViewableDistance
// 0x0004 (0x0004 - 0x0000)
struct FortAIPawn_SetMinimapViewableDistance final
{
public:
	float                                         NewMinimapViewableDistance;                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_SetMinimapViewableDistance) == 0x000004, "Wrong alignment on FortAIPawn_SetMinimapViewableDistance");
static_assert(sizeof(FortAIPawn_SetMinimapViewableDistance) == 0x000004, "Wrong size on FortAIPawn_SetMinimapViewableDistance");
static_assert(offsetof(FortAIPawn_SetMinimapViewableDistance, NewMinimapViewableDistance) == 0x000000, "Member 'FortAIPawn_SetMinimapViewableDistance::NewMinimapViewableDistance' has a wrong offset!");

// Function FortniteGame.FortAIPawn.SetMinimumAILOD
// 0x0001 (0x0001 - 0x0000)
struct FortAIPawn_SetMinimumAILOD final
{
public:
	EFortAILODLevel                               MinimumAILOD;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_SetMinimumAILOD) == 0x000001, "Wrong alignment on FortAIPawn_SetMinimumAILOD");
static_assert(sizeof(FortAIPawn_SetMinimumAILOD) == 0x000001, "Wrong size on FortAIPawn_SetMinimumAILOD");
static_assert(offsetof(FortAIPawn_SetMinimumAILOD, MinimumAILOD) == 0x000000, "Member 'FortAIPawn_SetMinimumAILOD::MinimumAILOD' has a wrong offset!");

// Function FortniteGame.FortAIPawn.SetMovementUrgency
// 0x0001 (0x0001 - 0x0000)
struct FortAIPawn_SetMovementUrgency final
{
public:
	EFortMovementUrgency                          Urgency;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_SetMovementUrgency) == 0x000001, "Wrong alignment on FortAIPawn_SetMovementUrgency");
static_assert(sizeof(FortAIPawn_SetMovementUrgency) == 0x000001, "Wrong size on FortAIPawn_SetMovementUrgency");
static_assert(offsetof(FortAIPawn_SetMovementUrgency, Urgency) == 0x000000, "Member 'FortAIPawn_SetMovementUrgency::Urgency' has a wrong offset!");

// Function FortniteGame.FortAIPawn.SetShouldStartSleeping
// 0x0001 (0x0001 - 0x0000)
struct FortAIPawn_SetShouldStartSleeping final
{
public:
	bool                                          bHintStartSleeping;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_SetShouldStartSleeping) == 0x000001, "Wrong alignment on FortAIPawn_SetShouldStartSleeping");
static_assert(sizeof(FortAIPawn_SetShouldStartSleeping) == 0x000001, "Wrong size on FortAIPawn_SetShouldStartSleeping");
static_assert(offsetof(FortAIPawn_SetShouldStartSleeping, bHintStartSleeping) == 0x000000, "Member 'FortAIPawn_SetShouldStartSleeping::bHintStartSleeping' has a wrong offset!");

// Function FortniteGame.FortAIPawn.SetSkinColor
// 0x0014 (0x0014 - 0x0000)
struct FortAIPawn_SetSkinColor final
{
public:
	struct FLinearColor                           NewSkinColor;                                      // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewSkinBrightness;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_SetSkinColor) == 0x000004, "Wrong alignment on FortAIPawn_SetSkinColor");
static_assert(sizeof(FortAIPawn_SetSkinColor) == 0x000014, "Wrong size on FortAIPawn_SetSkinColor");
static_assert(offsetof(FortAIPawn_SetSkinColor, NewSkinColor) == 0x000000, "Member 'FortAIPawn_SetSkinColor::NewSkinColor' has a wrong offset!");
static_assert(offsetof(FortAIPawn_SetSkinColor, NewSkinBrightness) == 0x000010, "Member 'FortAIPawn_SetSkinColor::NewSkinBrightness' has a wrong offset!");

// Function FortniteGame.FortAIPawn.SetWeaponCollisionComponent
// 0x0008 (0x0008 - 0x0000)
struct FortAIPawn_SetWeaponCollisionComponent final
{
public:
	class UShapeComponent*                        InWeaponCollisionComponent;                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_SetWeaponCollisionComponent) == 0x000008, "Wrong alignment on FortAIPawn_SetWeaponCollisionComponent");
static_assert(sizeof(FortAIPawn_SetWeaponCollisionComponent) == 0x000008, "Wrong size on FortAIPawn_SetWeaponCollisionComponent");
static_assert(offsetof(FortAIPawn_SetWeaponCollisionComponent, InWeaponCollisionComponent) == 0x000000, "Member 'FortAIPawn_SetWeaponCollisionComponent::InWeaponCollisionComponent' has a wrong offset!");

// Function FortniteGame.FortAIPawn.GetCharacterGender
// 0x0001 (0x0001 - 0x0000)
struct FortAIPawn_GetCharacterGender final
{
public:
	EFortCustomGender                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_GetCharacterGender) == 0x000001, "Wrong alignment on FortAIPawn_GetCharacterGender");
static_assert(sizeof(FortAIPawn_GetCharacterGender) == 0x000001, "Wrong size on FortAIPawn_GetCharacterGender");
static_assert(offsetof(FortAIPawn_GetCharacterGender, ReturnValue) == 0x000000, "Member 'FortAIPawn_GetCharacterGender::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIPawn.GetCurrentAimTarget
// 0x0008 (0x0008 - 0x0000)
struct FortAIPawn_GetCurrentAimTarget final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_GetCurrentAimTarget) == 0x000008, "Wrong alignment on FortAIPawn_GetCurrentAimTarget");
static_assert(sizeof(FortAIPawn_GetCurrentAimTarget) == 0x000008, "Wrong size on FortAIPawn_GetCurrentAimTarget");
static_assert(offsetof(FortAIPawn_GetCurrentAimTarget, ReturnValue) == 0x000000, "Member 'FortAIPawn_GetCurrentAimTarget::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIPawn.GetDefenderItemInstanceId
// 0x0010 (0x0010 - 0x0000)
struct FortAIPawn_GetDefenderItemInstanceId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_GetDefenderItemInstanceId) == 0x000008, "Wrong alignment on FortAIPawn_GetDefenderItemInstanceId");
static_assert(sizeof(FortAIPawn_GetDefenderItemInstanceId) == 0x000010, "Wrong size on FortAIPawn_GetDefenderItemInstanceId");
static_assert(offsetof(FortAIPawn_GetDefenderItemInstanceId, ReturnValue) == 0x000000, "Member 'FortAIPawn_GetDefenderItemInstanceId::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIPawn.GetDifficultyLevel
// 0x0004 (0x0004 - 0x0000)
struct FortAIPawn_GetDifficultyLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_GetDifficultyLevel) == 0x000004, "Wrong alignment on FortAIPawn_GetDifficultyLevel");
static_assert(sizeof(FortAIPawn_GetDifficultyLevel) == 0x000004, "Wrong size on FortAIPawn_GetDifficultyLevel");
static_assert(offsetof(FortAIPawn_GetDifficultyLevel, ReturnValue) == 0x000000, "Member 'FortAIPawn_GetDifficultyLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIPawn.GetImpactPhysicalSurfaceSound
// 0x0088 (0x0088 - 0x0000)
struct FortAIPawn_GetImpactPhysicalSurfaceSound final
{
public:
	struct FHitResult                             Impact;                                            // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class USoundBase*                             ReturnValue;                                       // 0x0080(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_GetImpactPhysicalSurfaceSound) == 0x000008, "Wrong alignment on FortAIPawn_GetImpactPhysicalSurfaceSound");
static_assert(sizeof(FortAIPawn_GetImpactPhysicalSurfaceSound) == 0x000088, "Wrong size on FortAIPawn_GetImpactPhysicalSurfaceSound");
static_assert(offsetof(FortAIPawn_GetImpactPhysicalSurfaceSound, Impact) == 0x000000, "Member 'FortAIPawn_GetImpactPhysicalSurfaceSound::Impact' has a wrong offset!");
static_assert(offsetof(FortAIPawn_GetImpactPhysicalSurfaceSound, ReturnValue) == 0x000080, "Member 'FortAIPawn_GetImpactPhysicalSurfaceSound::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIPawn.GetScoreValue
// 0x0004 (0x0004 - 0x0000)
struct FortAIPawn_GetScoreValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_GetScoreValue) == 0x000004, "Wrong alignment on FortAIPawn_GetScoreValue");
static_assert(sizeof(FortAIPawn_GetScoreValue) == 0x000004, "Wrong size on FortAIPawn_GetScoreValue");
static_assert(offsetof(FortAIPawn_GetScoreValue, ReturnValue) == 0x000000, "Member 'FortAIPawn_GetScoreValue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIPawn.GetSpawnLocation
// 0x000C (0x000C - 0x0000)
struct FortAIPawn_GetSpawnLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_GetSpawnLocation) == 0x000004, "Wrong alignment on FortAIPawn_GetSpawnLocation");
static_assert(sizeof(FortAIPawn_GetSpawnLocation) == 0x00000C, "Wrong size on FortAIPawn_GetSpawnLocation");
static_assert(offsetof(FortAIPawn_GetSpawnLocation, ReturnValue) == 0x000000, "Member 'FortAIPawn_GetSpawnLocation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIPawn.GetSpawnPointValue
// 0x0004 (0x0004 - 0x0000)
struct FortAIPawn_GetSpawnPointValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_GetSpawnPointValue) == 0x000004, "Wrong alignment on FortAIPawn_GetSpawnPointValue");
static_assert(sizeof(FortAIPawn_GetSpawnPointValue) == 0x000004, "Wrong size on FortAIPawn_GetSpawnPointValue");
static_assert(offsetof(FortAIPawn_GetSpawnPointValue, ReturnValue) == 0x000000, "Member 'FortAIPawn_GetSpawnPointValue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIPawn.GetSpawnRotation
// 0x000C (0x000C - 0x0000)
struct FortAIPawn_GetSpawnRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_GetSpawnRotation) == 0x000004, "Wrong alignment on FortAIPawn_GetSpawnRotation");
static_assert(sizeof(FortAIPawn_GetSpawnRotation) == 0x00000C, "Wrong size on FortAIPawn_GetSpawnRotation");
static_assert(offsetof(FortAIPawn_GetSpawnRotation, ReturnValue) == 0x000000, "Member 'FortAIPawn_GetSpawnRotation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIPawn.HasTether
// 0x0001 (0x0001 - 0x0000)
struct FortAIPawn_HasTether final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_HasTether) == 0x000001, "Wrong alignment on FortAIPawn_HasTether");
static_assert(sizeof(FortAIPawn_HasTether) == 0x000001, "Wrong size on FortAIPawn_HasTether");
static_assert(offsetof(FortAIPawn_HasTether, ReturnValue) == 0x000000, "Member 'FortAIPawn_HasTether::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIPawn.IsDefender
// 0x0001 (0x0001 - 0x0000)
struct FortAIPawn_IsDefender final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_IsDefender) == 0x000001, "Wrong alignment on FortAIPawn_IsDefender");
static_assert(sizeof(FortAIPawn_IsDefender) == 0x000001, "Wrong size on FortAIPawn_IsDefender");
static_assert(offsetof(FortAIPawn_IsDefender, ReturnValue) == 0x000000, "Member 'FortAIPawn_IsDefender::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIPawn.IsInCombat
// 0x0001 (0x0001 - 0x0000)
struct FortAIPawn_IsInCombat final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_IsInCombat) == 0x000001, "Wrong alignment on FortAIPawn_IsInCombat");
static_assert(sizeof(FortAIPawn_IsInCombat) == 0x000001, "Wrong size on FortAIPawn_IsInCombat");
static_assert(offsetof(FortAIPawn_IsInCombat, ReturnValue) == 0x000000, "Member 'FortAIPawn_IsInCombat::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIPawn.IsInsideTetherBounds
// 0x0002 (0x0002 - 0x0000)
struct FortAIPawn_IsInsideTetherBounds final
{
public:
	bool                                          bUseRelaxedTetherBounds;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_IsInsideTetherBounds) == 0x000001, "Wrong alignment on FortAIPawn_IsInsideTetherBounds");
static_assert(sizeof(FortAIPawn_IsInsideTetherBounds) == 0x000002, "Wrong size on FortAIPawn_IsInsideTetherBounds");
static_assert(offsetof(FortAIPawn_IsInsideTetherBounds, bUseRelaxedTetherBounds) == 0x000000, "Member 'FortAIPawn_IsInsideTetherBounds::bUseRelaxedTetherBounds' has a wrong offset!");
static_assert(offsetof(FortAIPawn_IsInsideTetherBounds, ReturnValue) == 0x000001, "Member 'FortAIPawn_IsInsideTetherBounds::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIPawn.K2_FindExistingItemForDefinition
// 0x0018 (0x0018 - 0x0000)
struct FortAIPawn_K2_FindExistingItemForDefinition final
{
public:
	const class UFortItemDefinition*              ItemDefinition;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInStorageVault;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItem*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_K2_FindExistingItemForDefinition) == 0x000008, "Wrong alignment on FortAIPawn_K2_FindExistingItemForDefinition");
static_assert(sizeof(FortAIPawn_K2_FindExistingItemForDefinition) == 0x000018, "Wrong size on FortAIPawn_K2_FindExistingItemForDefinition");
static_assert(offsetof(FortAIPawn_K2_FindExistingItemForDefinition, ItemDefinition) == 0x000000, "Member 'FortAIPawn_K2_FindExistingItemForDefinition::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FortAIPawn_K2_FindExistingItemForDefinition, bInStorageVault) == 0x000008, "Member 'FortAIPawn_K2_FindExistingItemForDefinition::bInStorageVault' has a wrong offset!");
static_assert(offsetof(FortAIPawn_K2_FindExistingItemForDefinition, ReturnValue) == 0x000010, "Member 'FortAIPawn_K2_FindExistingItemForDefinition::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIPawn.K2_GetDefenderItem
// 0x0008 (0x0008 - 0x0000)
struct FortAIPawn_K2_GetDefenderItem final
{
public:
	class UFortItem*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_K2_GetDefenderItem) == 0x000008, "Wrong alignment on FortAIPawn_K2_GetDefenderItem");
static_assert(sizeof(FortAIPawn_K2_GetDefenderItem) == 0x000008, "Wrong size on FortAIPawn_K2_GetDefenderItem");
static_assert(offsetof(FortAIPawn_K2_GetDefenderItem, ReturnValue) == 0x000000, "Member 'FortAIPawn_K2_GetDefenderItem::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeapon.ClientGivenTo
// 0x0008 (0x0008 - 0x0000)
struct FortWeapon_ClientGivenTo final
{
public:
	class APawn*                                  P;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_ClientGivenTo) == 0x000008, "Wrong alignment on FortWeapon_ClientGivenTo");
static_assert(sizeof(FortWeapon_ClientGivenTo) == 0x000008, "Wrong size on FortWeapon_ClientGivenTo");
static_assert(offsetof(FortWeapon_ClientGivenTo, P) == 0x000000, "Member 'FortWeapon_ClientGivenTo::P' has a wrong offset!");

// Function FortniteGame.FortWeapon.ClientReportShotFlags
// 0x0008 (0x0008 - 0x0000)
struct FortWeapon_ClientReportShotFlags final
{
public:
	uint32                                        ShotFlags;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShotIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_ClientReportShotFlags) == 0x000004, "Wrong alignment on FortWeapon_ClientReportShotFlags");
static_assert(sizeof(FortWeapon_ClientReportShotFlags) == 0x000008, "Wrong size on FortWeapon_ClientReportShotFlags");
static_assert(offsetof(FortWeapon_ClientReportShotFlags, ShotFlags) == 0x000000, "Member 'FortWeapon_ClientReportShotFlags::ShotFlags' has a wrong offset!");
static_assert(offsetof(FortWeapon_ClientReportShotFlags, ShotIndex) == 0x000004, "Member 'FortWeapon_ClientReportShotFlags::ShotIndex' has a wrong offset!");

// Function FortniteGame.FortWeapon.DetermineReticleColor
// 0x0004 (0x0004 - 0x0000)
struct FortWeapon_DetermineReticleColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_DetermineReticleColor) == 0x000004, "Wrong alignment on FortWeapon_DetermineReticleColor");
static_assert(sizeof(FortWeapon_DetermineReticleColor) == 0x000004, "Wrong size on FortWeapon_DetermineReticleColor");
static_assert(offsetof(FortWeapon_DetermineReticleColor, ReturnValue) == 0x000000, "Member 'FortWeapon_DetermineReticleColor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeapon.GameplayCue_Impact
// 0x00C0 (0x00C0 - 0x0000)
struct FortWeapon_GameplayCue_Impact final
{
public:
	EGameplayCueEvent                             EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00B8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_GameplayCue_Impact) == 0x000008, "Wrong alignment on FortWeapon_GameplayCue_Impact");
static_assert(sizeof(FortWeapon_GameplayCue_Impact) == 0x0000C0, "Wrong size on FortWeapon_GameplayCue_Impact");
static_assert(offsetof(FortWeapon_GameplayCue_Impact, EventType) == 0x000000, "Member 'FortWeapon_GameplayCue_Impact::EventType' has a wrong offset!");
static_assert(offsetof(FortWeapon_GameplayCue_Impact, Parameters) == 0x000008, "Member 'FortWeapon_GameplayCue_Impact::Parameters' has a wrong offset!");

// Function FortniteGame.FortWeapon.GameplayCue_Weapons_Activation
// 0x00C0 (0x00C0 - 0x0000)
struct FortWeapon_GameplayCue_Weapons_Activation final
{
public:
	EGameplayCueEvent                             EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00B8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_GameplayCue_Weapons_Activation) == 0x000008, "Wrong alignment on FortWeapon_GameplayCue_Weapons_Activation");
static_assert(sizeof(FortWeapon_GameplayCue_Weapons_Activation) == 0x0000C0, "Wrong size on FortWeapon_GameplayCue_Weapons_Activation");
static_assert(offsetof(FortWeapon_GameplayCue_Weapons_Activation, EventType) == 0x000000, "Member 'FortWeapon_GameplayCue_Weapons_Activation::EventType' has a wrong offset!");
static_assert(offsetof(FortWeapon_GameplayCue_Weapons_Activation, Parameters) == 0x000008, "Member 'FortWeapon_GameplayCue_Weapons_Activation::Parameters' has a wrong offset!");

// Function FortniteGame.FortWeapon.GetMeleeAttackPlayRate
// 0x0004 (0x0004 - 0x0000)
struct FortWeapon_GetMeleeAttackPlayRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_GetMeleeAttackPlayRate) == 0x000004, "Wrong alignment on FortWeapon_GetMeleeAttackPlayRate");
static_assert(sizeof(FortWeapon_GetMeleeAttackPlayRate) == 0x000004, "Wrong size on FortWeapon_GetMeleeAttackPlayRate");
static_assert(offsetof(FortWeapon_GetMeleeAttackPlayRate, ReturnValue) == 0x000000, "Member 'FortWeapon_GetMeleeAttackPlayRate::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeapon.K2_OnProgressiveCosmeticWatchedStatChanged
// 0x0010 (0x0010 - 0x0000)
struct FortWeapon_K2_OnProgressiveCosmeticWatchedStatChanged final
{
public:
	class FName                                   StatName;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortWeapon_K2_OnProgressiveCosmeticWatchedStatChanged) == 0x000004, "Wrong alignment on FortWeapon_K2_OnProgressiveCosmeticWatchedStatChanged");
static_assert(sizeof(FortWeapon_K2_OnProgressiveCosmeticWatchedStatChanged) == 0x000010, "Wrong size on FortWeapon_K2_OnProgressiveCosmeticWatchedStatChanged");
static_assert(offsetof(FortWeapon_K2_OnProgressiveCosmeticWatchedStatChanged, StatName) == 0x000000, "Member 'FortWeapon_K2_OnProgressiveCosmeticWatchedStatChanged::StatName' has a wrong offset!");
static_assert(offsetof(FortWeapon_K2_OnProgressiveCosmeticWatchedStatChanged, NewValue) == 0x000008, "Member 'FortWeapon_K2_OnProgressiveCosmeticWatchedStatChanged::NewValue' has a wrong offset!");

// Function FortniteGame.FortWeapon.OnInitAlteration
// 0x0008 (0x0008 - 0x0000)
struct FortWeapon_OnInitAlteration final
{
public:
	class UFortAlterationItemDefinition*          NewAlteration;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_OnInitAlteration) == 0x000008, "Wrong alignment on FortWeapon_OnInitAlteration");
static_assert(sizeof(FortWeapon_OnInitAlteration) == 0x000008, "Wrong size on FortWeapon_OnInitAlteration");
static_assert(offsetof(FortWeapon_OnInitAlteration, NewAlteration) == 0x000000, "Member 'FortWeapon_OnInitAlteration::NewAlteration' has a wrong offset!");

// Function FortniteGame.FortWeapon.OnInitCosmeticAlterations
// 0x0B28 (0x0B28 - 0x0000)
struct FortWeapon_OnInitCosmeticAlterations final
{
public:
	struct FFortCosmeticModification              CosmeticMod;                                       // 0x0000(0x0B20)(Parm, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               DynamicMaterialInstance;                           // 0x0B20(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_OnInitCosmeticAlterations) == 0x000008, "Wrong alignment on FortWeapon_OnInitCosmeticAlterations");
static_assert(sizeof(FortWeapon_OnInitCosmeticAlterations) == 0x000B28, "Wrong size on FortWeapon_OnInitCosmeticAlterations");
static_assert(offsetof(FortWeapon_OnInitCosmeticAlterations, CosmeticMod) == 0x000000, "Member 'FortWeapon_OnInitCosmeticAlterations::CosmeticMod' has a wrong offset!");
static_assert(offsetof(FortWeapon_OnInitCosmeticAlterations, DynamicMaterialInstance) == 0x000B20, "Member 'FortWeapon_OnInitCosmeticAlterations::DynamicMaterialInstance' has a wrong offset!");

// Function FortniteGame.FortWeapon.OnPawnMontageBlendingOut
// 0x0010 (0x0010 - 0x0000)
struct FortWeapon_OnPawnMontageBlendingOut final
{
public:
	class UAnimMontage*                           PawnMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortWeapon_OnPawnMontageBlendingOut) == 0x000008, "Wrong alignment on FortWeapon_OnPawnMontageBlendingOut");
static_assert(sizeof(FortWeapon_OnPawnMontageBlendingOut) == 0x000010, "Wrong size on FortWeapon_OnPawnMontageBlendingOut");
static_assert(offsetof(FortWeapon_OnPawnMontageBlendingOut, PawnMontage) == 0x000000, "Member 'FortWeapon_OnPawnMontageBlendingOut::PawnMontage' has a wrong offset!");
static_assert(offsetof(FortWeapon_OnPawnMontageBlendingOut, bInterrupted) == 0x000008, "Member 'FortWeapon_OnPawnMontageBlendingOut::bInterrupted' has a wrong offset!");

// Function FortniteGame.FortWeapon.OnPawnMontageStarted
// 0x0008 (0x0008 - 0x0000)
struct FortWeapon_OnPawnMontageStarted final
{
public:
	class UAnimMontage*                           PawnMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_OnPawnMontageStarted) == 0x000008, "Wrong alignment on FortWeapon_OnPawnMontageStarted");
static_assert(sizeof(FortWeapon_OnPawnMontageStarted) == 0x000008, "Wrong size on FortWeapon_OnPawnMontageStarted");
static_assert(offsetof(FortWeapon_OnPawnMontageStarted, PawnMontage) == 0x000000, "Member 'FortWeapon_OnPawnMontageStarted::PawnMontage' has a wrong offset!");

// Function FortniteGame.FortWeapon.OnPlayImpactFX
// 0x0090 (0x0090 - 0x0000)
struct FortWeapon_OnPlayImpactFX final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EPhysicalSurface                              ImpactPhysicalSurface;                             // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               SpawnedPSC;                                        // 0x0088(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_OnPlayImpactFX) == 0x000008, "Wrong alignment on FortWeapon_OnPlayImpactFX");
static_assert(sizeof(FortWeapon_OnPlayImpactFX) == 0x000090, "Wrong size on FortWeapon_OnPlayImpactFX");
static_assert(offsetof(FortWeapon_OnPlayImpactFX, HitResult) == 0x000000, "Member 'FortWeapon_OnPlayImpactFX::HitResult' has a wrong offset!");
static_assert(offsetof(FortWeapon_OnPlayImpactFX, ImpactPhysicalSurface) == 0x000080, "Member 'FortWeapon_OnPlayImpactFX::ImpactPhysicalSurface' has a wrong offset!");
static_assert(offsetof(FortWeapon_OnPlayImpactFX, SpawnedPSC) == 0x000088, "Member 'FortWeapon_OnPlayImpactFX::SpawnedPSC' has a wrong offset!");

// Function FortniteGame.FortWeapon.OnPlayReloadFX
// 0x0001 (0x0001 - 0x0000)
struct FortWeapon_OnPlayReloadFX final
{
public:
	EFortReloadFXState                            ReloadStage;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_OnPlayReloadFX) == 0x000001, "Wrong alignment on FortWeapon_OnPlayReloadFX");
static_assert(sizeof(FortWeapon_OnPlayReloadFX) == 0x000001, "Wrong size on FortWeapon_OnPlayReloadFX");
static_assert(offsetof(FortWeapon_OnPlayReloadFX, ReloadStage) == 0x000000, "Member 'FortWeapon_OnPlayReloadFX::ReloadStage' has a wrong offset!");

// Function FortniteGame.FortWeapon.OnPlayWeaponFireFX
// 0x0002 (0x0002 - 0x0000)
struct FortWeapon_OnPlayWeaponFireFX final
{
public:
	bool                                          bPersistentFire;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSecondaryFire;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_OnPlayWeaponFireFX) == 0x000001, "Wrong alignment on FortWeapon_OnPlayWeaponFireFX");
static_assert(sizeof(FortWeapon_OnPlayWeaponFireFX) == 0x000002, "Wrong size on FortWeapon_OnPlayWeaponFireFX");
static_assert(offsetof(FortWeapon_OnPlayWeaponFireFX, bPersistentFire) == 0x000000, "Member 'FortWeapon_OnPlayWeaponFireFX::bPersistentFire' has a wrong offset!");
static_assert(offsetof(FortWeapon_OnPlayWeaponFireFX, bSecondaryFire) == 0x000001, "Member 'FortWeapon_OnPlayWeaponFireFX::bSecondaryFire' has a wrong offset!");

// Function FortniteGame.FortWeapon.OnSetTargeting
// 0x0001 (0x0001 - 0x0000)
struct FortWeapon_OnSetTargeting final
{
public:
	bool                                          bNewIsTargeting;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_OnSetTargeting) == 0x000001, "Wrong alignment on FortWeapon_OnSetTargeting");
static_assert(sizeof(FortWeapon_OnSetTargeting) == 0x000001, "Wrong size on FortWeapon_OnSetTargeting");
static_assert(offsetof(FortWeapon_OnSetTargeting, bNewIsTargeting) == 0x000000, "Member 'FortWeapon_OnSetTargeting::bNewIsTargeting' has a wrong offset!");

// Function FortniteGame.FortWeapon.OnWeaponVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct FortWeapon_OnWeaponVisibilityChanged final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_OnWeaponVisibilityChanged) == 0x000001, "Wrong alignment on FortWeapon_OnWeaponVisibilityChanged");
static_assert(sizeof(FortWeapon_OnWeaponVisibilityChanged) == 0x000001, "Wrong size on FortWeapon_OnWeaponVisibilityChanged");
static_assert(offsetof(FortWeapon_OnWeaponVisibilityChanged, bVisible) == 0x000000, "Member 'FortWeapon_OnWeaponVisibilityChanged::bVisible' has a wrong offset!");

// Function FortniteGame.FortWeapon.PlayForceFeedback
// 0x0003 (0x0003 - 0x0000)
struct FortWeapon_PlayForceFeedback final
{
public:
	bool                                          bSecondaryFire;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPersistentFire;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImpact;                                           // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_PlayForceFeedback) == 0x000001, "Wrong alignment on FortWeapon_PlayForceFeedback");
static_assert(sizeof(FortWeapon_PlayForceFeedback) == 0x000003, "Wrong size on FortWeapon_PlayForceFeedback");
static_assert(offsetof(FortWeapon_PlayForceFeedback, bSecondaryFire) == 0x000000, "Member 'FortWeapon_PlayForceFeedback::bSecondaryFire' has a wrong offset!");
static_assert(offsetof(FortWeapon_PlayForceFeedback, bPersistentFire) == 0x000001, "Member 'FortWeapon_PlayForceFeedback::bPersistentFire' has a wrong offset!");
static_assert(offsetof(FortWeapon_PlayForceFeedback, bImpact) == 0x000002, "Member 'FortWeapon_PlayForceFeedback::bImpact' has a wrong offset!");

// Function FortniteGame.FortWeapon.PlayNativeImpactFX
// 0x0138 (0x0138 - 0x0000)
struct FortWeapon_PlayNativeImpactFX final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 GameplayCueParameters;                             // 0x0080(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_PlayNativeImpactFX) == 0x000008, "Wrong alignment on FortWeapon_PlayNativeImpactFX");
static_assert(sizeof(FortWeapon_PlayNativeImpactFX) == 0x000138, "Wrong size on FortWeapon_PlayNativeImpactFX");
static_assert(offsetof(FortWeapon_PlayNativeImpactFX, HitResult) == 0x000000, "Member 'FortWeapon_PlayNativeImpactFX::HitResult' has a wrong offset!");
static_assert(offsetof(FortWeapon_PlayNativeImpactFX, GameplayCueParameters) == 0x000080, "Member 'FortWeapon_PlayNativeImpactFX::GameplayCueParameters' has a wrong offset!");

// Function FortniteGame.FortWeapon.PlayReloadFX
// 0x0001 (0x0001 - 0x0000)
struct FortWeapon_PlayReloadFX final
{
public:
	EFortReloadFXState                            ReloadStage;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_PlayReloadFX) == 0x000001, "Wrong alignment on FortWeapon_PlayReloadFX");
static_assert(sizeof(FortWeapon_PlayReloadFX) == 0x000001, "Wrong size on FortWeapon_PlayReloadFX");
static_assert(offsetof(FortWeapon_PlayReloadFX, ReloadStage) == 0x000000, "Member 'FortWeapon_PlayReloadFX::ReloadStage' has a wrong offset!");

// Function FortniteGame.FortWeapon.PlayWeaponFireFX
// 0x0001 (0x0001 - 0x0000)
struct FortWeapon_PlayWeaponFireFX final
{
public:
	bool                                          bSecondaryFire;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_PlayWeaponFireFX) == 0x000001, "Wrong alignment on FortWeapon_PlayWeaponFireFX");
static_assert(sizeof(FortWeapon_PlayWeaponFireFX) == 0x000001, "Wrong size on FortWeapon_PlayWeaponFireFX");
static_assert(offsetof(FortWeapon_PlayWeaponFireFX, bSecondaryFire) == 0x000000, "Member 'FortWeapon_PlayWeaponFireFX::bSecondaryFire' has a wrong offset!");

// Function FortniteGame.FortWeapon.ServerSetChargeState
// 0x0001 (0x0001 - 0x0000)
struct FortWeapon_ServerSetChargeState final
{
public:
	uint8                                         NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_ServerSetChargeState) == 0x000001, "Wrong alignment on FortWeapon_ServerSetChargeState");
static_assert(sizeof(FortWeapon_ServerSetChargeState) == 0x000001, "Wrong size on FortWeapon_ServerSetChargeState");
static_assert(offsetof(FortWeapon_ServerSetChargeState, NewState) == 0x000000, "Member 'FortWeapon_ServerSetChargeState::NewState' has a wrong offset!");

// Function FortniteGame.FortWeapon.SetShouldDrawNativeReticle
// 0x0001 (0x0001 - 0x0000)
struct FortWeapon_SetShouldDrawNativeReticle final
{
public:
	bool                                          bInShouldDrawReticle;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_SetShouldDrawNativeReticle) == 0x000001, "Wrong alignment on FortWeapon_SetShouldDrawNativeReticle");
static_assert(sizeof(FortWeapon_SetShouldDrawNativeReticle) == 0x000001, "Wrong size on FortWeapon_SetShouldDrawNativeReticle");
static_assert(offsetof(FortWeapon_SetShouldDrawNativeReticle, bInShouldDrawReticle) == 0x000000, "Member 'FortWeapon_SetShouldDrawNativeReticle::bInShouldDrawReticle' has a wrong offset!");

// Function FortniteGame.FortWeapon.SetWeaponVisibility
// 0x0002 (0x0002 - 0x0000)
struct FortWeapon_SetWeaponVisibility final
{
public:
	bool                                          bDesiredVisibility;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceUpdate;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_SetWeaponVisibility) == 0x000001, "Wrong alignment on FortWeapon_SetWeaponVisibility");
static_assert(sizeof(FortWeapon_SetWeaponVisibility) == 0x000002, "Wrong size on FortWeapon_SetWeaponVisibility");
static_assert(offsetof(FortWeapon_SetWeaponVisibility, bDesiredVisibility) == 0x000000, "Member 'FortWeapon_SetWeaponVisibility::bDesiredVisibility' has a wrong offset!");
static_assert(offsetof(FortWeapon_SetWeaponVisibility, bForceUpdate) == 0x000001, "Member 'FortWeapon_SetWeaponVisibility::bForceUpdate' has a wrong offset!");

// Function FortniteGame.FortWeapon.UseWeaponDurability
// 0x0004 (0x0004 - 0x0000)
struct FortWeapon_UseWeaponDurability final
{
public:
	float                                         DurabilityScale;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_UseWeaponDurability) == 0x000004, "Wrong alignment on FortWeapon_UseWeaponDurability");
static_assert(sizeof(FortWeapon_UseWeaponDurability) == 0x000004, "Wrong size on FortWeapon_UseWeaponDurability");
static_assert(offsetof(FortWeapon_UseWeaponDurability, DurabilityScale) == 0x000000, "Member 'FortWeapon_UseWeaponDurability::DurabilityScale' has a wrong offset!");

// Function FortniteGame.FortWeapon.GetAlterations
// 0x0010 (0x0010 - 0x0000)
struct FortWeapon_GetAlterations final
{
public:
	TArray<class UFortAlterationItemDefinition*>  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_GetAlterations) == 0x000008, "Wrong alignment on FortWeapon_GetAlterations");
static_assert(sizeof(FortWeapon_GetAlterations) == 0x000010, "Wrong size on FortWeapon_GetAlterations");
static_assert(offsetof(FortWeapon_GetAlterations, ReturnValue) == 0x000000, "Member 'FortWeapon_GetAlterations::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeapon.GetBulletsPerClip
// 0x0004 (0x0004 - 0x0000)
struct FortWeapon_GetBulletsPerClip final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_GetBulletsPerClip) == 0x000004, "Wrong alignment on FortWeapon_GetBulletsPerClip");
static_assert(sizeof(FortWeapon_GetBulletsPerClip) == 0x000004, "Wrong size on FortWeapon_GetBulletsPerClip");
static_assert(offsetof(FortWeapon_GetBulletsPerClip, ReturnValue) == 0x000000, "Member 'FortWeapon_GetBulletsPerClip::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeapon.GetChargePercent
// 0x0004 (0x0004 - 0x0000)
struct FortWeapon_GetChargePercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_GetChargePercent) == 0x000004, "Wrong alignment on FortWeapon_GetChargePercent");
static_assert(sizeof(FortWeapon_GetChargePercent) == 0x000004, "Wrong size on FortWeapon_GetChargePercent");
static_assert(offsetof(FortWeapon_GetChargePercent, ReturnValue) == 0x000000, "Member 'FortWeapon_GetChargePercent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeapon.GetCoreAnimation
// 0x0001 (0x0001 - 0x0000)
struct FortWeapon_GetCoreAnimation final
{
public:
	EFortWeaponCoreAnimation                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_GetCoreAnimation) == 0x000001, "Wrong alignment on FortWeapon_GetCoreAnimation");
static_assert(sizeof(FortWeapon_GetCoreAnimation) == 0x000001, "Wrong size on FortWeapon_GetCoreAnimation");
static_assert(offsetof(FortWeapon_GetCoreAnimation, ReturnValue) == 0x000000, "Member 'FortWeapon_GetCoreAnimation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeapon.GetCurrentMaxChargePercent
// 0x0004 (0x0004 - 0x0000)
struct FortWeapon_GetCurrentMaxChargePercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_GetCurrentMaxChargePercent) == 0x000004, "Wrong alignment on FortWeapon_GetCurrentMaxChargePercent");
static_assert(sizeof(FortWeapon_GetCurrentMaxChargePercent) == 0x000004, "Wrong size on FortWeapon_GetCurrentMaxChargePercent");
static_assert(offsetof(FortWeapon_GetCurrentMaxChargePercent, ReturnValue) == 0x000000, "Member 'FortWeapon_GetCurrentMaxChargePercent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeapon.GetDamageStartLocation
// 0x0018 (0x0018 - 0x0000)
struct FortWeapon_GetDamageStartLocation final
{
public:
	struct FVector                                AimDir;                                            // 0x0000(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_GetDamageStartLocation) == 0x000004, "Wrong alignment on FortWeapon_GetDamageStartLocation");
static_assert(sizeof(FortWeapon_GetDamageStartLocation) == 0x000018, "Wrong size on FortWeapon_GetDamageStartLocation");
static_assert(offsetof(FortWeapon_GetDamageStartLocation, AimDir) == 0x000000, "Member 'FortWeapon_GetDamageStartLocation::AimDir' has a wrong offset!");
static_assert(offsetof(FortWeapon_GetDamageStartLocation, ReturnValue) == 0x00000C, "Member 'FortWeapon_GetDamageStartLocation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeapon.GetLocalMagazineAmmoCount
// 0x0004 (0x0004 - 0x0000)
struct FortWeapon_GetLocalMagazineAmmoCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_GetLocalMagazineAmmoCount) == 0x000004, "Wrong alignment on FortWeapon_GetLocalMagazineAmmoCount");
static_assert(sizeof(FortWeapon_GetLocalMagazineAmmoCount) == 0x000004, "Wrong size on FortWeapon_GetLocalMagazineAmmoCount");
static_assert(offsetof(FortWeapon_GetLocalMagazineAmmoCount, ReturnValue) == 0x000000, "Member 'FortWeapon_GetLocalMagazineAmmoCount::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeapon.GetLocalRemainingAmmo
// 0x0004 (0x0004 - 0x0000)
struct FortWeapon_GetLocalRemainingAmmo final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_GetLocalRemainingAmmo) == 0x000004, "Wrong alignment on FortWeapon_GetLocalRemainingAmmo");
static_assert(sizeof(FortWeapon_GetLocalRemainingAmmo) == 0x000004, "Wrong size on FortWeapon_GetLocalRemainingAmmo");
static_assert(offsetof(FortWeapon_GetLocalRemainingAmmo, ReturnValue) == 0x000000, "Member 'FortWeapon_GetLocalRemainingAmmo::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeapon.GetMagazineAmmoCount
// 0x0004 (0x0004 - 0x0000)
struct FortWeapon_GetMagazineAmmoCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_GetMagazineAmmoCount) == 0x000004, "Wrong alignment on FortWeapon_GetMagazineAmmoCount");
static_assert(sizeof(FortWeapon_GetMagazineAmmoCount) == 0x000004, "Wrong size on FortWeapon_GetMagazineAmmoCount");
static_assert(offsetof(FortWeapon_GetMagazineAmmoCount, ReturnValue) == 0x000000, "Member 'FortWeapon_GetMagazineAmmoCount::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeapon.GetMuzzleLocation
// 0x000C (0x000C - 0x0000)
struct FortWeapon_GetMuzzleLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_GetMuzzleLocation) == 0x000004, "Wrong alignment on FortWeapon_GetMuzzleLocation");
static_assert(sizeof(FortWeapon_GetMuzzleLocation) == 0x00000C, "Wrong size on FortWeapon_GetMuzzleLocation");
static_assert(offsetof(FortWeapon_GetMuzzleLocation, ReturnValue) == 0x000000, "Member 'FortWeapon_GetMuzzleLocation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeapon.GetMuzzleSocketTransform
// 0x0030 (0x0030 - 0x0000)
struct FortWeapon_GetMuzzleSocketTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_GetMuzzleSocketTransform) == 0x000010, "Wrong alignment on FortWeapon_GetMuzzleSocketTransform");
static_assert(sizeof(FortWeapon_GetMuzzleSocketTransform) == 0x000030, "Wrong size on FortWeapon_GetMuzzleSocketTransform");
static_assert(offsetof(FortWeapon_GetMuzzleSocketTransform, ReturnValue) == 0x000000, "Member 'FortWeapon_GetMuzzleSocketTransform::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeapon.GetRange
// 0x0004 (0x0004 - 0x0000)
struct FortWeapon_GetRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_GetRange) == 0x000004, "Wrong alignment on FortWeapon_GetRange");
static_assert(sizeof(FortWeapon_GetRange) == 0x000004, "Wrong size on FortWeapon_GetRange");
static_assert(offsetof(FortWeapon_GetRange, ReturnValue) == 0x000000, "Member 'FortWeapon_GetRange::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeapon.GetReloadProgress
// 0x0004 (0x0004 - 0x0000)
struct FortWeapon_GetReloadProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_GetReloadProgress) == 0x000004, "Wrong alignment on FortWeapon_GetReloadProgress");
static_assert(sizeof(FortWeapon_GetReloadProgress) == 0x000004, "Wrong size on FortWeapon_GetReloadProgress");
static_assert(offsetof(FortWeapon_GetReloadProgress, ReturnValue) == 0x000000, "Member 'FortWeapon_GetReloadProgress::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeapon.GetReloadTime
// 0x0004 (0x0004 - 0x0000)
struct FortWeapon_GetReloadTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_GetReloadTime) == 0x000004, "Wrong alignment on FortWeapon_GetReloadTime");
static_assert(sizeof(FortWeapon_GetReloadTime) == 0x000004, "Wrong size on FortWeapon_GetReloadTime");
static_assert(offsetof(FortWeapon_GetReloadTime, ReturnValue) == 0x000000, "Member 'FortWeapon_GetReloadTime::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeapon.GetRemainingAmmo
// 0x0004 (0x0004 - 0x0000)
struct FortWeapon_GetRemainingAmmo final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_GetRemainingAmmo) == 0x000004, "Wrong alignment on FortWeapon_GetRemainingAmmo");
static_assert(sizeof(FortWeapon_GetRemainingAmmo) == 0x000004, "Wrong size on FortWeapon_GetRemainingAmmo");
static_assert(offsetof(FortWeapon_GetRemainingAmmo, ReturnValue) == 0x000000, "Member 'FortWeapon_GetRemainingAmmo::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeapon.GetReticleColor
// 0x0004 (0x0004 - 0x0000)
struct FortWeapon_GetReticleColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_GetReticleColor) == 0x000004, "Wrong alignment on FortWeapon_GetReticleColor");
static_assert(sizeof(FortWeapon_GetReticleColor) == 0x000004, "Wrong size on FortWeapon_GetReticleColor");
static_assert(offsetof(FortWeapon_GetReticleColor, ReturnValue) == 0x000000, "Member 'FortWeapon_GetReticleColor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeapon.IsProjectileWeapon
// 0x0001 (0x0001 - 0x0000)
struct FortWeapon_IsProjectileWeapon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_IsProjectileWeapon) == 0x000001, "Wrong alignment on FortWeapon_IsProjectileWeapon");
static_assert(sizeof(FortWeapon_IsProjectileWeapon) == 0x000001, "Wrong size on FortWeapon_IsProjectileWeapon");
static_assert(offsetof(FortWeapon_IsProjectileWeapon, ReturnValue) == 0x000000, "Member 'FortWeapon_IsProjectileWeapon::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeapon.IsReloading
// 0x0001 (0x0001 - 0x0000)
struct FortWeapon_IsReloading final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_IsReloading) == 0x000001, "Wrong alignment on FortWeapon_IsReloading");
static_assert(sizeof(FortWeapon_IsReloading) == 0x000001, "Wrong size on FortWeapon_IsReloading");
static_assert(offsetof(FortWeapon_IsReloading, ReturnValue) == 0x000000, "Member 'FortWeapon_IsReloading::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDecoTool.OnCarriedActorDestroyed
// 0x0008 (0x0008 - 0x0000)
struct FortDecoTool_OnCarriedActorDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoTool_OnCarriedActorDestroyed) == 0x000008, "Wrong alignment on FortDecoTool_OnCarriedActorDestroyed");
static_assert(sizeof(FortDecoTool_OnCarriedActorDestroyed) == 0x000008, "Wrong size on FortDecoTool_OnCarriedActorDestroyed");
static_assert(offsetof(FortDecoTool_OnCarriedActorDestroyed, DestroyedActor) == 0x000000, "Member 'FortDecoTool_OnCarriedActorDestroyed::DestroyedActor' has a wrong offset!");

// Function FortniteGame.FortDecoTool.OnRep_CarriedActor
// 0x0008 (0x0008 - 0x0000)
struct FortDecoTool_OnRep_CarriedActor final
{
public:
	class AActor*                                 OldCarriedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoTool_OnRep_CarriedActor) == 0x000008, "Wrong alignment on FortDecoTool_OnRep_CarriedActor");
static_assert(sizeof(FortDecoTool_OnRep_CarriedActor) == 0x000008, "Wrong size on FortDecoTool_OnRep_CarriedActor");
static_assert(offsetof(FortDecoTool_OnRep_CarriedActor, OldCarriedActor) == 0x000000, "Member 'FortDecoTool_OnRep_CarriedActor::OldCarriedActor' has a wrong offset!");

// Function FortniteGame.FortDecoTool.ServerSpawnDeco
// 0x0020 (0x0020 - 0x0000)
struct FortDecoTool_ServerSpawnDeco final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class ABuildingSMActor*                       AttachedActor;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoTool_ServerSpawnDeco) == 0x000008, "Wrong alignment on FortDecoTool_ServerSpawnDeco");
static_assert(sizeof(FortDecoTool_ServerSpawnDeco) == 0x000020, "Wrong size on FortDecoTool_ServerSpawnDeco");
static_assert(offsetof(FortDecoTool_ServerSpawnDeco, Location) == 0x000000, "Member 'FortDecoTool_ServerSpawnDeco::Location' has a wrong offset!");
static_assert(offsetof(FortDecoTool_ServerSpawnDeco, Rotation) == 0x00000C, "Member 'FortDecoTool_ServerSpawnDeco::Rotation' has a wrong offset!");
static_assert(offsetof(FortDecoTool_ServerSpawnDeco, AttachedActor) == 0x000018, "Member 'FortDecoTool_ServerSpawnDeco::AttachedActor' has a wrong offset!");

// Function FortniteGame.BuildingStructuralSupportSystem.GetLogicalBuildingGroundSupportedActors
// 0x0018 (0x0018 - 0x0000)
struct BuildingStructuralSupportSystem_GetLogicalBuildingGroundSupportedActors final
{
public:
	int32                                         LogicalIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABuildingSMActor*>               LogicalBuildingGroundSupportedActors;              // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingStructuralSupportSystem_GetLogicalBuildingGroundSupportedActors) == 0x000008, "Wrong alignment on BuildingStructuralSupportSystem_GetLogicalBuildingGroundSupportedActors");
static_assert(sizeof(BuildingStructuralSupportSystem_GetLogicalBuildingGroundSupportedActors) == 0x000018, "Wrong size on BuildingStructuralSupportSystem_GetLogicalBuildingGroundSupportedActors");
static_assert(offsetof(BuildingStructuralSupportSystem_GetLogicalBuildingGroundSupportedActors, LogicalIndex) == 0x000000, "Member 'BuildingStructuralSupportSystem_GetLogicalBuildingGroundSupportedActors::LogicalIndex' has a wrong offset!");
static_assert(offsetof(BuildingStructuralSupportSystem_GetLogicalBuildingGroundSupportedActors, LogicalBuildingGroundSupportedActors) == 0x000008, "Member 'BuildingStructuralSupportSystem_GetLogicalBuildingGroundSupportedActors::LogicalBuildingGroundSupportedActors' has a wrong offset!");

// Function FortniteGame.BuildingStructuralSupportSystem.K2_GetLogicalBuildingActors
// 0x0018 (0x0018 - 0x0000)
struct BuildingStructuralSupportSystem_K2_GetLogicalBuildingActors final
{
public:
	int32                                         LogicalIdx;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABuildingSMActor*>               LogicalBuildingActors;                             // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingStructuralSupportSystem_K2_GetLogicalBuildingActors) == 0x000008, "Wrong alignment on BuildingStructuralSupportSystem_K2_GetLogicalBuildingActors");
static_assert(sizeof(BuildingStructuralSupportSystem_K2_GetLogicalBuildingActors) == 0x000018, "Wrong size on BuildingStructuralSupportSystem_K2_GetLogicalBuildingActors");
static_assert(offsetof(BuildingStructuralSupportSystem_K2_GetLogicalBuildingActors, LogicalIdx) == 0x000000, "Member 'BuildingStructuralSupportSystem_K2_GetLogicalBuildingActors::LogicalIdx' has a wrong offset!");
static_assert(offsetof(BuildingStructuralSupportSystem_K2_GetLogicalBuildingActors, LogicalBuildingActors) == 0x000008, "Member 'BuildingStructuralSupportSystem_K2_GetLogicalBuildingActors::LogicalBuildingActors' has a wrong offset!");

// Function FortniteGame.BuildingStructuralSupportSystem.IsBuildingActorStructurallySupported
// 0x0010 (0x0010 - 0x0000)
struct BuildingStructuralSupportSystem_IsBuildingActorStructurallySupported final
{
public:
	const class ABuildingSMActor*                 ActorToCheck;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingStructuralSupportSystem_IsBuildingActorStructurallySupported) == 0x000008, "Wrong alignment on BuildingStructuralSupportSystem_IsBuildingActorStructurallySupported");
static_assert(sizeof(BuildingStructuralSupportSystem_IsBuildingActorStructurallySupported) == 0x000010, "Wrong size on BuildingStructuralSupportSystem_IsBuildingActorStructurallySupported");
static_assert(offsetof(BuildingStructuralSupportSystem_IsBuildingActorStructurallySupported, ActorToCheck) == 0x000000, "Member 'BuildingStructuralSupportSystem_IsBuildingActorStructurallySupported::ActorToCheck' has a wrong offset!");
static_assert(offsetof(BuildingStructuralSupportSystem_IsBuildingActorStructurallySupported, ReturnValue) == 0x000008, "Member 'BuildingStructuralSupportSystem_IsBuildingActorStructurallySupported::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortReplaySpectator.SetCloudAltitudes
// 0x0004 (0x0004 - 0x0000)
struct FortReplaySpectator_SetCloudAltitudes final
{
public:
	float                                         NewCloudAltitude;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortReplaySpectator_SetCloudAltitudes) == 0x000004, "Wrong alignment on FortReplaySpectator_SetCloudAltitudes");
static_assert(sizeof(FortReplaySpectator_SetCloudAltitudes) == 0x000004, "Wrong size on FortReplaySpectator_SetCloudAltitudes");
static_assert(offsetof(FortReplaySpectator_SetCloudAltitudes, NewCloudAltitude) == 0x000000, "Member 'FortReplaySpectator_SetCloudAltitudes::NewCloudAltitude' has a wrong offset!");

// Function FortniteGame.BuildingTrap.AddDamageComponent
// 0x0008 (0x0008 - 0x0000)
struct BuildingTrap_AddDamageComponent final
{
public:
	class UPrimitiveComponent*                    DamageComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrap_AddDamageComponent) == 0x000008, "Wrong alignment on BuildingTrap_AddDamageComponent");
static_assert(sizeof(BuildingTrap_AddDamageComponent) == 0x000008, "Wrong size on BuildingTrap_AddDamageComponent");
static_assert(offsetof(BuildingTrap_AddDamageComponent, DamageComponent) == 0x000000, "Member 'BuildingTrap_AddDamageComponent::DamageComponent' has a wrong offset!");

// Function FortniteGame.BuildingTrap.AddTriggerComponent
// 0x0008 (0x0008 - 0x0000)
struct BuildingTrap_AddTriggerComponent final
{
public:
	class UPrimitiveComponent*                    TriggerComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrap_AddTriggerComponent) == 0x000008, "Wrong alignment on BuildingTrap_AddTriggerComponent");
static_assert(sizeof(BuildingTrap_AddTriggerComponent) == 0x000008, "Wrong size on BuildingTrap_AddTriggerComponent");
static_assert(offsetof(BuildingTrap_AddTriggerComponent, TriggerComponent) == 0x000000, "Member 'BuildingTrap_AddTriggerComponent::TriggerComponent' has a wrong offset!");

// Function FortniteGame.BuildingTrap.AttemptRetrigger
// 0x0004 (0x0004 - 0x0000)
struct BuildingTrap_AttemptRetrigger final
{
public:
	float                                         Seconds;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrap_AttemptRetrigger) == 0x000004, "Wrong alignment on BuildingTrap_AttemptRetrigger");
static_assert(sizeof(BuildingTrap_AttemptRetrigger) == 0x000004, "Wrong size on BuildingTrap_AttemptRetrigger");
static_assert(offsetof(BuildingTrap_AttemptRetrigger, Seconds) == 0x000000, "Member 'BuildingTrap_AttemptRetrigger::Seconds' has a wrong offset!");

// Function FortniteGame.BuildingTrap.GetArmTime
// 0x0004 (0x0004 - 0x0000)
struct BuildingTrap_GetArmTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrap_GetArmTime) == 0x000004, "Wrong alignment on BuildingTrap_GetArmTime");
static_assert(sizeof(BuildingTrap_GetArmTime) == 0x000004, "Wrong size on BuildingTrap_GetArmTime");
static_assert(offsetof(BuildingTrap_GetArmTime, ReturnValue) == 0x000000, "Member 'BuildingTrap_GetArmTime::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingTrap.GetCenter
// 0x000C (0x000C - 0x0000)
struct BuildingTrap_GetCenter final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrap_GetCenter) == 0x000004, "Wrong alignment on BuildingTrap_GetCenter");
static_assert(sizeof(BuildingTrap_GetCenter) == 0x00000C, "Wrong size on BuildingTrap_GetCenter");
static_assert(offsetof(BuildingTrap_GetCenter, ReturnValue) == 0x000000, "Member 'BuildingTrap_GetCenter::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingTrap.GetReloadTime
// 0x0004 (0x0004 - 0x0000)
struct BuildingTrap_GetReloadTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrap_GetReloadTime) == 0x000004, "Wrong alignment on BuildingTrap_GetReloadTime");
static_assert(sizeof(BuildingTrap_GetReloadTime) == 0x000004, "Wrong size on BuildingTrap_GetReloadTime");
static_assert(offsetof(BuildingTrap_GetReloadTime, ReturnValue) == 0x000000, "Member 'BuildingTrap_GetReloadTime::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingTrap.OnInitAlteration
// 0x0008 (0x0008 - 0x0000)
struct BuildingTrap_OnInitAlteration final
{
public:
	class UFortAlterationItemDefinition*          NewAlteration;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrap_OnInitAlteration) == 0x000008, "Wrong alignment on BuildingTrap_OnInitAlteration");
static_assert(sizeof(BuildingTrap_OnInitAlteration) == 0x000008, "Wrong size on BuildingTrap_OnInitAlteration");
static_assert(offsetof(BuildingTrap_OnInitAlteration, NewAlteration) == 0x000000, "Member 'BuildingTrap_OnInitAlteration::NewAlteration' has a wrong offset!");

// Function FortniteGame.BuildingTrap.OnInitCosmeticAlterations
// 0x0B20 (0x0B20 - 0x0000)
struct BuildingTrap_OnInitCosmeticAlterations final
{
public:
	struct FFortCosmeticModification              CosmeticMod;                                       // 0x0000(0x0B20)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrap_OnInitCosmeticAlterations) == 0x000008, "Wrong alignment on BuildingTrap_OnInitCosmeticAlterations");
static_assert(sizeof(BuildingTrap_OnInitCosmeticAlterations) == 0x000B20, "Wrong size on BuildingTrap_OnInitCosmeticAlterations");
static_assert(offsetof(BuildingTrap_OnInitCosmeticAlterations, CosmeticMod) == 0x000000, "Member 'BuildingTrap_OnInitCosmeticAlterations::CosmeticMod' has a wrong offset!");

// Function FortniteGame.BuildingTrap.OnTriggerTouch
// 0x00A0 (0x00A0 - 0x0000)
struct BuildingTrap_OnTriggerTouch final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrap_OnTriggerTouch) == 0x000008, "Wrong alignment on BuildingTrap_OnTriggerTouch");
static_assert(sizeof(BuildingTrap_OnTriggerTouch) == 0x0000A0, "Wrong size on BuildingTrap_OnTriggerTouch");
static_assert(offsetof(BuildingTrap_OnTriggerTouch, OverlappedComp) == 0x000000, "Member 'BuildingTrap_OnTriggerTouch::OverlappedComp' has a wrong offset!");
static_assert(offsetof(BuildingTrap_OnTriggerTouch, OtherActor) == 0x000008, "Member 'BuildingTrap_OnTriggerTouch::OtherActor' has a wrong offset!");
static_assert(offsetof(BuildingTrap_OnTriggerTouch, OtherComp) == 0x000010, "Member 'BuildingTrap_OnTriggerTouch::OtherComp' has a wrong offset!");
static_assert(offsetof(BuildingTrap_OnTriggerTouch, OtherBodyIndex) == 0x000018, "Member 'BuildingTrap_OnTriggerTouch::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BuildingTrap_OnTriggerTouch, bFromSweep) == 0x00001C, "Member 'BuildingTrap_OnTriggerTouch::bFromSweep' has a wrong offset!");
static_assert(offsetof(BuildingTrap_OnTriggerTouch, SweepResult) == 0x000020, "Member 'BuildingTrap_OnTriggerTouch::SweepResult' has a wrong offset!");

// Function FortniteGame.BuildingTrap.BP_ShouldTrigger
// 0x0018 (0x0018 - 0x0000)
struct BuildingTrap_BP_ShouldTrigger final
{
public:
	TArray<class AActor*>                         TouchingActors;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingTrap_BP_ShouldTrigger) == 0x000008, "Wrong alignment on BuildingTrap_BP_ShouldTrigger");
static_assert(sizeof(BuildingTrap_BP_ShouldTrigger) == 0x000018, "Wrong size on BuildingTrap_BP_ShouldTrigger");
static_assert(offsetof(BuildingTrap_BP_ShouldTrigger, TouchingActors) == 0x000000, "Member 'BuildingTrap_BP_ShouldTrigger::TouchingActors' has a wrong offset!");
static_assert(offsetof(BuildingTrap_BP_ShouldTrigger, ReturnValue) == 0x000010, "Member 'BuildingTrap_BP_ShouldTrigger::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingTrap.GetAlterations
// 0x0010 (0x0010 - 0x0000)
struct BuildingTrap_GetAlterations final
{
public:
	TArray<class UFortAlterationItemDefinition*>  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrap_GetAlterations) == 0x000008, "Wrong alignment on BuildingTrap_GetAlterations");
static_assert(sizeof(BuildingTrap_GetAlterations) == 0x000010, "Wrong size on BuildingTrap_GetAlterations");
static_assert(offsetof(BuildingTrap_GetAlterations, ReturnValue) == 0x000000, "Member 'BuildingTrap_GetAlterations::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingTrap.GetBuildingAttachedTo
// 0x0008 (0x0008 - 0x0000)
struct BuildingTrap_GetBuildingAttachedTo final
{
public:
	class ABuildingSMActor*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrap_GetBuildingAttachedTo) == 0x000008, "Wrong alignment on BuildingTrap_GetBuildingAttachedTo");
static_assert(sizeof(BuildingTrap_GetBuildingAttachedTo) == 0x000008, "Wrong size on BuildingTrap_GetBuildingAttachedTo");
static_assert(offsetof(BuildingTrap_GetBuildingAttachedTo, ReturnValue) == 0x000000, "Member 'BuildingTrap_GetBuildingAttachedTo::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingTrap.GetDamageDelay
// 0x0004 (0x0004 - 0x0000)
struct BuildingTrap_GetDamageDelay final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrap_GetDamageDelay) == 0x000004, "Wrong alignment on BuildingTrap_GetDamageDelay");
static_assert(sizeof(BuildingTrap_GetDamageDelay) == 0x000004, "Wrong size on BuildingTrap_GetDamageDelay");
static_assert(offsetof(BuildingTrap_GetDamageDelay, ReturnValue) == 0x000000, "Member 'BuildingTrap_GetDamageDelay::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingTrap.GetDurabilityPercent
// 0x0004 (0x0004 - 0x0000)
struct BuildingTrap_GetDurabilityPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrap_GetDurabilityPercent) == 0x000004, "Wrong alignment on BuildingTrap_GetDurabilityPercent");
static_assert(sizeof(BuildingTrap_GetDurabilityPercent) == 0x000004, "Wrong size on BuildingTrap_GetDurabilityPercent");
static_assert(offsetof(BuildingTrap_GetDurabilityPercent, ReturnValue) == 0x000000, "Member 'BuildingTrap_GetDurabilityPercent::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingTrap.GetFireDelay
// 0x0004 (0x0004 - 0x0000)
struct BuildingTrap_GetFireDelay final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrap_GetFireDelay) == 0x000004, "Wrong alignment on BuildingTrap_GetFireDelay");
static_assert(sizeof(BuildingTrap_GetFireDelay) == 0x000004, "Wrong size on BuildingTrap_GetFireDelay");
static_assert(offsetof(BuildingTrap_GetFireDelay, ReturnValue) == 0x000000, "Member 'BuildingTrap_GetFireDelay::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingTrap.GetFireLocationAndRotation
// 0x0030 (0x0030 - 0x0000)
struct BuildingTrap_GetFireLocationAndRotation final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrap_GetFireLocationAndRotation) == 0x000010, "Wrong alignment on BuildingTrap_GetFireLocationAndRotation");
static_assert(sizeof(BuildingTrap_GetFireLocationAndRotation) == 0x000030, "Wrong size on BuildingTrap_GetFireLocationAndRotation");
static_assert(offsetof(BuildingTrap_GetFireLocationAndRotation, ReturnValue) == 0x000000, "Member 'BuildingTrap_GetFireLocationAndRotation::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingTrap.GetMaxDurability
// 0x0004 (0x0004 - 0x0000)
struct BuildingTrap_GetMaxDurability final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrap_GetMaxDurability) == 0x000004, "Wrong alignment on BuildingTrap_GetMaxDurability");
static_assert(sizeof(BuildingTrap_GetMaxDurability) == 0x000004, "Wrong size on BuildingTrap_GetMaxDurability");
static_assert(offsetof(BuildingTrap_GetMaxDurability, ReturnValue) == 0x000000, "Member 'BuildingTrap_GetMaxDurability::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingTrap.GetTouchingDamageTargets
// 0x0030 (0x0030 - 0x0000)
struct BuildingTrap_GetTouchingDamageTargets final
{
public:
	struct FFortTargetFilter                      Filter;                                            // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrap_GetTouchingDamageTargets) == 0x000008, "Wrong alignment on BuildingTrap_GetTouchingDamageTargets");
static_assert(sizeof(BuildingTrap_GetTouchingDamageTargets) == 0x000030, "Wrong size on BuildingTrap_GetTouchingDamageTargets");
static_assert(offsetof(BuildingTrap_GetTouchingDamageTargets, Filter) == 0x000000, "Member 'BuildingTrap_GetTouchingDamageTargets::Filter' has a wrong offset!");
static_assert(offsetof(BuildingTrap_GetTouchingDamageTargets, ReturnValue) == 0x000020, "Member 'BuildingTrap_GetTouchingDamageTargets::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingTrap.GetTrapLevel
// 0x0004 (0x0004 - 0x0000)
struct BuildingTrap_GetTrapLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrap_GetTrapLevel) == 0x000004, "Wrong alignment on BuildingTrap_GetTrapLevel");
static_assert(sizeof(BuildingTrap_GetTrapLevel) == 0x000004, "Wrong size on BuildingTrap_GetTrapLevel");
static_assert(offsetof(BuildingTrap_GetTrapLevel, ReturnValue) == 0x000000, "Member 'BuildingTrap_GetTrapLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingTrap.GetTrapRating
// 0x0004 (0x0004 - 0x0000)
struct BuildingTrap_GetTrapRating final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrap_GetTrapRating) == 0x000004, "Wrong alignment on BuildingTrap_GetTrapRating");
static_assert(sizeof(BuildingTrap_GetTrapRating) == 0x000004, "Wrong size on BuildingTrap_GetTrapRating");
static_assert(offsetof(BuildingTrap_GetTrapRating, ReturnValue) == 0x000000, "Member 'BuildingTrap_GetTrapRating::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingTrap.HasDurability
// 0x0001 (0x0001 - 0x0000)
struct BuildingTrap_HasDurability final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrap_HasDurability) == 0x000001, "Wrong alignment on BuildingTrap_HasDurability");
static_assert(sizeof(BuildingTrap_HasDurability) == 0x000001, "Wrong size on BuildingTrap_HasDurability");
static_assert(offsetof(BuildingTrap_HasDurability, ReturnValue) == 0x000000, "Member 'BuildingTrap_HasDurability::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionState.SendMissionUIEvent
// 0x0020 (0x0020 - 0x0000)
struct FortMissionState_SendMissionUIEvent final
{
public:
	struct FGameplayTagContainer                  EventTags;                                         // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionState_SendMissionUIEvent) == 0x000008, "Wrong alignment on FortMissionState_SendMissionUIEvent");
static_assert(sizeof(FortMissionState_SendMissionUIEvent) == 0x000020, "Wrong size on FortMissionState_SendMissionUIEvent");
static_assert(offsetof(FortMissionState_SendMissionUIEvent, EventTags) == 0x000000, "Member 'FortMissionState_SendMissionUIEvent::EventTags' has a wrong offset!");

// Function FortniteGame.FortMissionState.SetTimerForOnAllPlayersLoadedIn
// 0x0004 (0x0004 - 0x0000)
struct FortMissionState_SetTimerForOnAllPlayersLoadedIn final
{
public:
	float                                         Timer;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionState_SetTimerForOnAllPlayersLoadedIn) == 0x000004, "Wrong alignment on FortMissionState_SetTimerForOnAllPlayersLoadedIn");
static_assert(sizeof(FortMissionState_SetTimerForOnAllPlayersLoadedIn) == 0x000004, "Wrong size on FortMissionState_SetTimerForOnAllPlayersLoadedIn");
static_assert(offsetof(FortMissionState_SetTimerForOnAllPlayersLoadedIn, Timer) == 0x000000, "Member 'FortMissionState_SetTimerForOnAllPlayersLoadedIn::Timer' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.AttemptMissionSave
// 0x0010 (0x0010 - 0x0000)
struct FortObjectiveBase_AttemptMissionSave final
{
public:
	class FString                                 OptionalSaveName;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_AttemptMissionSave) == 0x000008, "Wrong alignment on FortObjectiveBase_AttemptMissionSave");
static_assert(sizeof(FortObjectiveBase_AttemptMissionSave) == 0x000010, "Wrong size on FortObjectiveBase_AttemptMissionSave");
static_assert(offsetof(FortObjectiveBase_AttemptMissionSave, OptionalSaveName) == 0x000000, "Member 'FortObjectiveBase_AttemptMissionSave::OptionalSaveName' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.BlueprintOnObjectiveEnd
// 0x0001 (0x0001 - 0x0000)
struct FortObjectiveBase_BlueprintOnObjectiveEnd final
{
public:
	EFortObjectiveStatus                          Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_BlueprintOnObjectiveEnd) == 0x000001, "Wrong alignment on FortObjectiveBase_BlueprintOnObjectiveEnd");
static_assert(sizeof(FortObjectiveBase_BlueprintOnObjectiveEnd) == 0x000001, "Wrong size on FortObjectiveBase_BlueprintOnObjectiveEnd");
static_assert(offsetof(FortObjectiveBase_BlueprintOnObjectiveEnd, Status) == 0x000000, "Member 'FortObjectiveBase_BlueprintOnObjectiveEnd::Status' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.EnableTick
// 0x0001 (0x0001 - 0x0000)
struct FortObjectiveBase_EnableTick final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_EnableTick) == 0x000001, "Wrong alignment on FortObjectiveBase_EnableTick");
static_assert(sizeof(FortObjectiveBase_EnableTick) == 0x000001, "Wrong size on FortObjectiveBase_EnableTick");
static_assert(offsetof(FortObjectiveBase_EnableTick, bEnabled) == 0x000000, "Member 'FortObjectiveBase_EnableTick::bEnabled' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.GetRewardItemsByTag
// 0x0018 (0x0018 - 0x0000)
struct FortObjectiveBase_GetRewardItemsByTag final
{
public:
	struct FGameplayTag                           RewardTag;                                         // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortWorldItemDefinition*>       OutRewardItems;                                    // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_GetRewardItemsByTag) == 0x000008, "Wrong alignment on FortObjectiveBase_GetRewardItemsByTag");
static_assert(sizeof(FortObjectiveBase_GetRewardItemsByTag) == 0x000018, "Wrong size on FortObjectiveBase_GetRewardItemsByTag");
static_assert(offsetof(FortObjectiveBase_GetRewardItemsByTag, RewardTag) == 0x000000, "Member 'FortObjectiveBase_GetRewardItemsByTag::RewardTag' has a wrong offset!");
static_assert(offsetof(FortObjectiveBase_GetRewardItemsByTag, OutRewardItems) == 0x000008, "Member 'FortObjectiveBase_GetRewardItemsByTag::OutRewardItems' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.GrantRewardsByTag
// 0x0010 (0x0010 - 0x0000)
struct FortObjectiveBase_GrantRewardsByTag final
{
public:
	struct FGameplayTag                           RewardTag;                                         // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortRewardType                               RewardType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortObjectiveBase_GrantRewardsByTag) == 0x000008, "Wrong alignment on FortObjectiveBase_GrantRewardsByTag");
static_assert(sizeof(FortObjectiveBase_GrantRewardsByTag) == 0x000010, "Wrong size on FortObjectiveBase_GrantRewardsByTag");
static_assert(offsetof(FortObjectiveBase_GrantRewardsByTag, RewardTag) == 0x000000, "Member 'FortObjectiveBase_GrantRewardsByTag::RewardTag' has a wrong offset!");
static_assert(offsetof(FortObjectiveBase_GrantRewardsByTag, RewardType) == 0x000008, "Member 'FortObjectiveBase_GrantRewardsByTag::RewardType' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.SetObjectiveTimer
// 0x0018 (0x0018 - 0x0000)
struct FortObjectiveBase_SetObjectiveTimer final
{
public:
	class FString                                 FunctionName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimerLength;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartPaused;                                      // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortObjectiveBase_SetObjectiveTimer) == 0x000008, "Wrong alignment on FortObjectiveBase_SetObjectiveTimer");
static_assert(sizeof(FortObjectiveBase_SetObjectiveTimer) == 0x000018, "Wrong size on FortObjectiveBase_SetObjectiveTimer");
static_assert(offsetof(FortObjectiveBase_SetObjectiveTimer, FunctionName) == 0x000000, "Member 'FortObjectiveBase_SetObjectiveTimer::FunctionName' has a wrong offset!");
static_assert(offsetof(FortObjectiveBase_SetObjectiveTimer, TimerLength) == 0x000010, "Member 'FortObjectiveBase_SetObjectiveTimer::TimerLength' has a wrong offset!");
static_assert(offsetof(FortObjectiveBase_SetObjectiveTimer, bStartPaused) == 0x000014, "Member 'FortObjectiveBase_SetObjectiveTimer::bStartPaused' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.SetUiVisibility
// 0x0001 (0x0001 - 0x0000)
struct FortObjectiveBase_SetUiVisibility final
{
public:
	bool                                          bInIsObjectiveVisible;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_SetUiVisibility) == 0x000001, "Wrong alignment on FortObjectiveBase_SetUiVisibility");
static_assert(sizeof(FortObjectiveBase_SetUiVisibility) == 0x000001, "Wrong size on FortObjectiveBase_SetUiVisibility");
static_assert(offsetof(FortObjectiveBase_SetUiVisibility, bInIsObjectiveVisible) == 0x000000, "Member 'FortObjectiveBase_SetUiVisibility::bInIsObjectiveVisible' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.SetUIVisibilityOverride
// 0x0001 (0x0001 - 0x0000)
struct FortObjectiveBase_SetUIVisibilityOverride final
{
public:
	EFortMissionVisibilityOverride                InVisibilityOverride;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_SetUIVisibilityOverride) == 0x000001, "Wrong alignment on FortObjectiveBase_SetUIVisibilityOverride");
static_assert(sizeof(FortObjectiveBase_SetUIVisibilityOverride) == 0x000001, "Wrong size on FortObjectiveBase_SetUIVisibilityOverride");
static_assert(offsetof(FortObjectiveBase_SetUIVisibilityOverride, InVisibilityOverride) == 0x000000, "Member 'FortObjectiveBase_SetUIVisibilityOverride::InVisibilityOverride' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.StartPlayingObjective
// 0x0001 (0x0001 - 0x0000)
struct FortObjectiveBase_StartPlayingObjective final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_StartPlayingObjective) == 0x000001, "Wrong alignment on FortObjectiveBase_StartPlayingObjective");
static_assert(sizeof(FortObjectiveBase_StartPlayingObjective) == 0x000001, "Wrong size on FortObjectiveBase_StartPlayingObjective");
static_assert(offsetof(FortObjectiveBase_StartPlayingObjective, ReturnValue) == 0x000000, "Member 'FortObjectiveBase_StartPlayingObjective::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.StopObjective
// 0x0020 (0x0020 - 0x0000)
struct FortObjectiveBase_StopObjective final
{
public:
	EFortObjectiveStatus                          Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Description;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortBadgeItemDefinition*               ExtraBadgeToGrant;                                 // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_StopObjective) == 0x000008, "Wrong alignment on FortObjectiveBase_StopObjective");
static_assert(sizeof(FortObjectiveBase_StopObjective) == 0x000020, "Wrong size on FortObjectiveBase_StopObjective");
static_assert(offsetof(FortObjectiveBase_StopObjective, Status) == 0x000000, "Member 'FortObjectiveBase_StopObjective::Status' has a wrong offset!");
static_assert(offsetof(FortObjectiveBase_StopObjective, Description) == 0x000008, "Member 'FortObjectiveBase_StopObjective::Description' has a wrong offset!");
static_assert(offsetof(FortObjectiveBase_StopObjective, ExtraBadgeToGrant) == 0x000018, "Member 'FortObjectiveBase_StopObjective::ExtraBadgeToGrant' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.BlueprintGetNumProgressBars
// 0x0004 (0x0004 - 0x0000)
struct FortObjectiveBase_BlueprintGetNumProgressBars final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_BlueprintGetNumProgressBars) == 0x000004, "Wrong alignment on FortObjectiveBase_BlueprintGetNumProgressBars");
static_assert(sizeof(FortObjectiveBase_BlueprintGetNumProgressBars) == 0x000004, "Wrong size on FortObjectiveBase_BlueprintGetNumProgressBars");
static_assert(offsetof(FortObjectiveBase_BlueprintGetNumProgressBars, ReturnValue) == 0x000000, "Member 'FortObjectiveBase_BlueprintGetNumProgressBars::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.BlueprintGetObjectiveDisplayText
// 0x0018 (0x0018 - 0x0000)
struct FortObjectiveBase_BlueprintGetObjectiveDisplayText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_BlueprintGetObjectiveDisplayText) == 0x000008, "Wrong alignment on FortObjectiveBase_BlueprintGetObjectiveDisplayText");
static_assert(sizeof(FortObjectiveBase_BlueprintGetObjectiveDisplayText) == 0x000018, "Wrong size on FortObjectiveBase_BlueprintGetObjectiveDisplayText");
static_assert(offsetof(FortObjectiveBase_BlueprintGetObjectiveDisplayText, ReturnValue) == 0x000000, "Member 'FortObjectiveBase_BlueprintGetObjectiveDisplayText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.BlueprintGetProgressBarColor
// 0x0014 (0x0014 - 0x0000)
struct FortObjectiveBase_BlueprintGetProgressBarColor final
{
public:
	int32                                         ProgressBarIdx;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_BlueprintGetProgressBarColor) == 0x000004, "Wrong alignment on FortObjectiveBase_BlueprintGetProgressBarColor");
static_assert(sizeof(FortObjectiveBase_BlueprintGetProgressBarColor) == 0x000014, "Wrong size on FortObjectiveBase_BlueprintGetProgressBarColor");
static_assert(offsetof(FortObjectiveBase_BlueprintGetProgressBarColor, ProgressBarIdx) == 0x000000, "Member 'FortObjectiveBase_BlueprintGetProgressBarColor::ProgressBarIdx' has a wrong offset!");
static_assert(offsetof(FortObjectiveBase_BlueprintGetProgressBarColor, ReturnValue) == 0x000004, "Member 'FortObjectiveBase_BlueprintGetProgressBarColor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.BlueprintGetProgressBarPercentage
// 0x0008 (0x0008 - 0x0000)
struct FortObjectiveBase_BlueprintGetProgressBarPercentage final
{
public:
	int32                                         ProgressBarIdx;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_BlueprintGetProgressBarPercentage) == 0x000004, "Wrong alignment on FortObjectiveBase_BlueprintGetProgressBarPercentage");
static_assert(sizeof(FortObjectiveBase_BlueprintGetProgressBarPercentage) == 0x000008, "Wrong size on FortObjectiveBase_BlueprintGetProgressBarPercentage");
static_assert(offsetof(FortObjectiveBase_BlueprintGetProgressBarPercentage, ProgressBarIdx) == 0x000000, "Member 'FortObjectiveBase_BlueprintGetProgressBarPercentage::ProgressBarIdx' has a wrong offset!");
static_assert(offsetof(FortObjectiveBase_BlueprintGetProgressBarPercentage, ReturnValue) == 0x000004, "Member 'FortObjectiveBase_BlueprintGetProgressBarPercentage::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.BlueprintGetProgressBarText
// 0x0020 (0x0020 - 0x0000)
struct FortObjectiveBase_BlueprintGetProgressBarText final
{
public:
	int32                                         ProgressBarIdx;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_BlueprintGetProgressBarText) == 0x000008, "Wrong alignment on FortObjectiveBase_BlueprintGetProgressBarText");
static_assert(sizeof(FortObjectiveBase_BlueprintGetProgressBarText) == 0x000020, "Wrong size on FortObjectiveBase_BlueprintGetProgressBarText");
static_assert(offsetof(FortObjectiveBase_BlueprintGetProgressBarText, ProgressBarIdx) == 0x000000, "Member 'FortObjectiveBase_BlueprintGetProgressBarText::ProgressBarIdx' has a wrong offset!");
static_assert(offsetof(FortObjectiveBase_BlueprintGetProgressBarText, ReturnValue) == 0x000008, "Member 'FortObjectiveBase_BlueprintGetProgressBarText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.GetMission
// 0x0008 (0x0008 - 0x0000)
struct FortObjectiveBase_GetMission final
{
public:
	class AFortMission*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_GetMission) == 0x000008, "Wrong alignment on FortObjectiveBase_GetMission");
static_assert(sizeof(FortObjectiveBase_GetMission) == 0x000008, "Wrong size on FortObjectiveBase_GetMission");
static_assert(offsetof(FortObjectiveBase_GetMission, ReturnValue) == 0x000000, "Member 'FortObjectiveBase_GetMission::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.GetMissionGuid
// 0x0010 (0x0010 - 0x0000)
struct FortObjectiveBase_GetMissionGuid final
{
public:
	struct FGuid                                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_GetMissionGuid) == 0x000004, "Wrong alignment on FortObjectiveBase_GetMissionGuid");
static_assert(sizeof(FortObjectiveBase_GetMissionGuid) == 0x000010, "Wrong size on FortObjectiveBase_GetMissionGuid");
static_assert(offsetof(FortObjectiveBase_GetMissionGuid, ReturnValue) == 0x000000, "Member 'FortObjectiveBase_GetMissionGuid::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.GetObjectiveDisplayString
// 0x0018 (0x0018 - 0x0000)
struct FortObjectiveBase_GetObjectiveDisplayString final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_GetObjectiveDisplayString) == 0x000008, "Wrong alignment on FortObjectiveBase_GetObjectiveDisplayString");
static_assert(sizeof(FortObjectiveBase_GetObjectiveDisplayString) == 0x000018, "Wrong size on FortObjectiveBase_GetObjectiveDisplayString");
static_assert(offsetof(FortObjectiveBase_GetObjectiveDisplayString, ReturnValue) == 0x000000, "Member 'FortObjectiveBase_GetObjectiveDisplayString::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.GetObjectiveTimerTimeRemaining
// 0x0004 (0x0004 - 0x0000)
struct FortObjectiveBase_GetObjectiveTimerTimeRemaining final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_GetObjectiveTimerTimeRemaining) == 0x000004, "Wrong alignment on FortObjectiveBase_GetObjectiveTimerTimeRemaining");
static_assert(sizeof(FortObjectiveBase_GetObjectiveTimerTimeRemaining) == 0x000004, "Wrong size on FortObjectiveBase_GetObjectiveTimerTimeRemaining");
static_assert(offsetof(FortObjectiveBase_GetObjectiveTimerTimeRemaining, ReturnValue) == 0x000000, "Member 'FortObjectiveBase_GetObjectiveTimerTimeRemaining::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.GetTimerComponent
// 0x0008 (0x0008 - 0x0000)
struct FortObjectiveBase_GetTimerComponent final
{
public:
	class UFortMissionTimerComponent*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_GetTimerComponent) == 0x000008, "Wrong alignment on FortObjectiveBase_GetTimerComponent");
static_assert(sizeof(FortObjectiveBase_GetTimerComponent) == 0x000008, "Wrong size on FortObjectiveBase_GetTimerComponent");
static_assert(offsetof(FortObjectiveBase_GetTimerComponent, ReturnValue) == 0x000000, "Member 'FortObjectiveBase_GetTimerComponent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.IsObjectiveTimerPaused
// 0x0001 (0x0001 - 0x0000)
struct FortObjectiveBase_IsObjectiveTimerPaused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_IsObjectiveTimerPaused) == 0x000001, "Wrong alignment on FortObjectiveBase_IsObjectiveTimerPaused");
static_assert(sizeof(FortObjectiveBase_IsObjectiveTimerPaused) == 0x000001, "Wrong size on FortObjectiveBase_IsObjectiveTimerPaused");
static_assert(offsetof(FortObjectiveBase_IsObjectiveTimerPaused, ReturnValue) == 0x000000, "Member 'FortObjectiveBase_IsObjectiveTimerPaused::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.IsRelevantToASpecificTeam
// 0x0001 (0x0001 - 0x0000)
struct FortObjectiveBase_IsRelevantToASpecificTeam final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_IsRelevantToASpecificTeam) == 0x000001, "Wrong alignment on FortObjectiveBase_IsRelevantToASpecificTeam");
static_assert(sizeof(FortObjectiveBase_IsRelevantToASpecificTeam) == 0x000001, "Wrong size on FortObjectiveBase_IsRelevantToASpecificTeam");
static_assert(offsetof(FortObjectiveBase_IsRelevantToASpecificTeam, ReturnValue) == 0x000000, "Member 'FortObjectiveBase_IsRelevantToASpecificTeam::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.IsRelevantToTeam
// 0x0002 (0x0002 - 0x0000)
struct FortObjectiveBase_IsRelevantToTeam final
{
public:
	EFortTeam                                     Team;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_IsRelevantToTeam) == 0x000001, "Wrong alignment on FortObjectiveBase_IsRelevantToTeam");
static_assert(sizeof(FortObjectiveBase_IsRelevantToTeam) == 0x000002, "Wrong size on FortObjectiveBase_IsRelevantToTeam");
static_assert(offsetof(FortObjectiveBase_IsRelevantToTeam, Team) == 0x000000, "Member 'FortObjectiveBase_IsRelevantToTeam::Team' has a wrong offset!");
static_assert(offsetof(FortObjectiveBase_IsRelevantToTeam, ReturnValue) == 0x000001, "Member 'FortObjectiveBase_IsRelevantToTeam::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDefenderItemDefinition.GetDefenderSubtype
// 0x0001 (0x0001 - 0x0000)
struct FortDefenderItemDefinition_GetDefenderSubtype final
{
public:
	EFortDefenderSubtype                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDefenderItemDefinition_GetDefenderSubtype) == 0x000001, "Wrong alignment on FortDefenderItemDefinition_GetDefenderSubtype");
static_assert(sizeof(FortDefenderItemDefinition_GetDefenderSubtype) == 0x000001, "Wrong size on FortDefenderItemDefinition_GetDefenderSubtype");
static_assert(offsetof(FortDefenderItemDefinition_GetDefenderSubtype, ReturnValue) == 0x000000, "Member 'FortDefenderItemDefinition_GetDefenderSubtype::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDefenderItemDefinition.GetDefenderSubtypeTag
// 0x0008 (0x0008 - 0x0000)
struct FortDefenderItemDefinition_GetDefenderSubtypeTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDefenderItemDefinition_GetDefenderSubtypeTag) == 0x000008, "Wrong alignment on FortDefenderItemDefinition_GetDefenderSubtypeTag");
static_assert(sizeof(FortDefenderItemDefinition_GetDefenderSubtypeTag) == 0x000008, "Wrong size on FortDefenderItemDefinition_GetDefenderSubtypeTag");
static_assert(offsetof(FortDefenderItemDefinition_GetDefenderSubtypeTag, ReturnValue) == 0x000000, "Member 'FortDefenderItemDefinition_GetDefenderSubtypeTag::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingTrapCeiling_Falling.TrapActivated
// 0x0004 (0x0004 - 0x0000)
struct BuildingTrapCeiling_Falling_TrapActivated final
{
public:
	float                                         CooldownDuration;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrapCeiling_Falling_TrapActivated) == 0x000004, "Wrong alignment on BuildingTrapCeiling_Falling_TrapActivated");
static_assert(sizeof(BuildingTrapCeiling_Falling_TrapActivated) == 0x000004, "Wrong size on BuildingTrapCeiling_Falling_TrapActivated");
static_assert(offsetof(BuildingTrapCeiling_Falling_TrapActivated, CooldownDuration) == 0x000000, "Member 'BuildingTrapCeiling_Falling_TrapActivated::CooldownDuration' has a wrong offset!");

// Function FortniteGame.BuildingTrapDefender.ClearCurrentDefender
// 0x0001 (0x0001 - 0x0000)
struct BuildingTrapDefender_ClearCurrentDefender final
{
public:
	bool                                          bForceKillDefender;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrapDefender_ClearCurrentDefender) == 0x000001, "Wrong alignment on BuildingTrapDefender_ClearCurrentDefender");
static_assert(sizeof(BuildingTrapDefender_ClearCurrentDefender) == 0x000001, "Wrong size on BuildingTrapDefender_ClearCurrentDefender");
static_assert(offsetof(BuildingTrapDefender_ClearCurrentDefender, bForceKillDefender) == 0x000000, "Member 'BuildingTrapDefender_ClearCurrentDefender::bForceKillDefender' has a wrong offset!");

// Function FortniteGame.BuildingTrapDefender.DeployDefender
// 0x0028 (0x0028 - 0x0000)
struct BuildingTrapDefender_DeployDefender final
{
public:
	const class AFortPlayerController*            ItemSelectorPC;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortDefenderItem*                InDefenderItem;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InDefenderSquadId;                                 // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortWorldItem*                   WeaponToGive;                                      // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmmoQuantity;                                      // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingTrapDefender_DeployDefender) == 0x000008, "Wrong alignment on BuildingTrapDefender_DeployDefender");
static_assert(sizeof(BuildingTrapDefender_DeployDefender) == 0x000028, "Wrong size on BuildingTrapDefender_DeployDefender");
static_assert(offsetof(BuildingTrapDefender_DeployDefender, ItemSelectorPC) == 0x000000, "Member 'BuildingTrapDefender_DeployDefender::ItemSelectorPC' has a wrong offset!");
static_assert(offsetof(BuildingTrapDefender_DeployDefender, InDefenderItem) == 0x000008, "Member 'BuildingTrapDefender_DeployDefender::InDefenderItem' has a wrong offset!");
static_assert(offsetof(BuildingTrapDefender_DeployDefender, InDefenderSquadId) == 0x000010, "Member 'BuildingTrapDefender_DeployDefender::InDefenderSquadId' has a wrong offset!");
static_assert(offsetof(BuildingTrapDefender_DeployDefender, WeaponToGive) == 0x000018, "Member 'BuildingTrapDefender_DeployDefender::WeaponToGive' has a wrong offset!");
static_assert(offsetof(BuildingTrapDefender_DeployDefender, AmmoQuantity) == 0x000020, "Member 'BuildingTrapDefender_DeployDefender::AmmoQuantity' has a wrong offset!");

// Function FortniteGame.BuildingTrapDefender.GetLastInteractErrorText
// 0x0018 (0x0018 - 0x0000)
struct BuildingTrapDefender_GetLastInteractErrorText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrapDefender_GetLastInteractErrorText) == 0x000008, "Wrong alignment on BuildingTrapDefender_GetLastInteractErrorText");
static_assert(sizeof(BuildingTrapDefender_GetLastInteractErrorText) == 0x000018, "Wrong size on BuildingTrapDefender_GetLastInteractErrorText");
static_assert(offsetof(BuildingTrapDefender_GetLastInteractErrorText, ReturnValue) == 0x000000, "Member 'BuildingTrapDefender_GetLastInteractErrorText::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingTrapDefender.RemoveCurrentDefender
// 0x0010 (0x0010 - 0x0000)
struct BuildingTrapDefender_RemoveCurrentDefender final
{
public:
	class AFortPlayerStateZone*                   RequestingPlayer;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemovalCausedByPlayerJoin;                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingTrapDefender_RemoveCurrentDefender) == 0x000008, "Wrong alignment on BuildingTrapDefender_RemoveCurrentDefender");
static_assert(sizeof(BuildingTrapDefender_RemoveCurrentDefender) == 0x000010, "Wrong size on BuildingTrapDefender_RemoveCurrentDefender");
static_assert(offsetof(BuildingTrapDefender_RemoveCurrentDefender, RequestingPlayer) == 0x000000, "Member 'BuildingTrapDefender_RemoveCurrentDefender::RequestingPlayer' has a wrong offset!");
static_assert(offsetof(BuildingTrapDefender_RemoveCurrentDefender, bRemovalCausedByPlayerJoin) == 0x000008, "Member 'BuildingTrapDefender_RemoveCurrentDefender::bRemovalCausedByPlayerJoin' has a wrong offset!");

// Function FortniteGame.BuildingTrapDefender.SpawnDefenderfromItem
// 0x0050 (0x0050 - 0x0000)
struct BuildingTrapDefender_SpawnDefenderfromItem final
{
public:
	class UFortAccountItem*                       DefenderItem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DefenderSquadId;                                   // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 InOwner;                                           // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortAIPawn*                            ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrapDefender_SpawnDefenderfromItem) == 0x000010, "Wrong alignment on BuildingTrapDefender_SpawnDefenderfromItem");
static_assert(sizeof(BuildingTrapDefender_SpawnDefenderfromItem) == 0x000050, "Wrong size on BuildingTrapDefender_SpawnDefenderfromItem");
static_assert(offsetof(BuildingTrapDefender_SpawnDefenderfromItem, DefenderItem) == 0x000000, "Member 'BuildingTrapDefender_SpawnDefenderfromItem::DefenderItem' has a wrong offset!");
static_assert(offsetof(BuildingTrapDefender_SpawnDefenderfromItem, DefenderSquadId) == 0x000008, "Member 'BuildingTrapDefender_SpawnDefenderfromItem::DefenderSquadId' has a wrong offset!");
static_assert(offsetof(BuildingTrapDefender_SpawnDefenderfromItem, SpawnTransform) == 0x000010, "Member 'BuildingTrapDefender_SpawnDefenderfromItem::SpawnTransform' has a wrong offset!");
static_assert(offsetof(BuildingTrapDefender_SpawnDefenderfromItem, InOwner) == 0x000040, "Member 'BuildingTrapDefender_SpawnDefenderfromItem::InOwner' has a wrong offset!");
static_assert(offsetof(BuildingTrapDefender_SpawnDefenderfromItem, ReturnValue) == 0x000048, "Member 'BuildingTrapDefender_SpawnDefenderfromItem::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingTrapDefender.SupplyDefender
// 0x0010 (0x0010 - 0x0000)
struct BuildingTrapDefender_SupplyDefender final
{
public:
	const class UFortWorldItem*                   WeaponToGive;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmmoQuantity;                                      // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingTrapDefender_SupplyDefender) == 0x000008, "Wrong alignment on BuildingTrapDefender_SupplyDefender");
static_assert(sizeof(BuildingTrapDefender_SupplyDefender) == 0x000010, "Wrong size on BuildingTrapDefender_SupplyDefender");
static_assert(offsetof(BuildingTrapDefender_SupplyDefender, WeaponToGive) == 0x000000, "Member 'BuildingTrapDefender_SupplyDefender::WeaponToGive' has a wrong offset!");
static_assert(offsetof(BuildingTrapDefender_SupplyDefender, AmmoQuantity) == 0x000008, "Member 'BuildingTrapDefender_SupplyDefender::AmmoQuantity' has a wrong offset!");

// Function FortniteGame.BuildingTrapDefender.TakeWeaponAwayFromDefender
// 0x0010 (0x0010 - 0x0000)
struct BuildingTrapDefender_TakeWeaponAwayFromDefender final
{
public:
	class UFortWorldItem*                         WeaponToTakeAway;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortWorldItem*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrapDefender_TakeWeaponAwayFromDefender) == 0x000008, "Wrong alignment on BuildingTrapDefender_TakeWeaponAwayFromDefender");
static_assert(sizeof(BuildingTrapDefender_TakeWeaponAwayFromDefender) == 0x000010, "Wrong size on BuildingTrapDefender_TakeWeaponAwayFromDefender");
static_assert(offsetof(BuildingTrapDefender_TakeWeaponAwayFromDefender, WeaponToTakeAway) == 0x000000, "Member 'BuildingTrapDefender_TakeWeaponAwayFromDefender::WeaponToTakeAway' has a wrong offset!");
static_assert(offsetof(BuildingTrapDefender_TakeWeaponAwayFromDefender, ReturnValue) == 0x000008, "Member 'BuildingTrapDefender_TakeWeaponAwayFromDefender::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingTrapDefender.GetDefenderSpawnTransform
// 0x0030 (0x0030 - 0x0000)
struct BuildingTrapDefender_GetDefenderSpawnTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrapDefender_GetDefenderSpawnTransform) == 0x000010, "Wrong alignment on BuildingTrapDefender_GetDefenderSpawnTransform");
static_assert(sizeof(BuildingTrapDefender_GetDefenderSpawnTransform) == 0x000030, "Wrong size on BuildingTrapDefender_GetDefenderSpawnTransform");
static_assert(offsetof(BuildingTrapDefender_GetDefenderSpawnTransform, ReturnValue) == 0x000000, "Member 'BuildingTrapDefender_GetDefenderSpawnTransform::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingTurretComponent.AttemptSetCurrentTarget
// 0x0010 (0x0010 - 0x0000)
struct BuildingTurretComponent_AttemptSetCurrentTarget final
{
public:
	class AActor*                                 NewTarget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingTurretComponent_AttemptSetCurrentTarget) == 0x000008, "Wrong alignment on BuildingTurretComponent_AttemptSetCurrentTarget");
static_assert(sizeof(BuildingTurretComponent_AttemptSetCurrentTarget) == 0x000010, "Wrong size on BuildingTurretComponent_AttemptSetCurrentTarget");
static_assert(offsetof(BuildingTurretComponent_AttemptSetCurrentTarget, NewTarget) == 0x000000, "Member 'BuildingTurretComponent_AttemptSetCurrentTarget::NewTarget' has a wrong offset!");
static_assert(offsetof(BuildingTurretComponent_AttemptSetCurrentTarget, ReturnValue) == 0x000008, "Member 'BuildingTurretComponent_AttemptSetCurrentTarget::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingTurretComponent.OnRep_CurrentTarget
// 0x0008 (0x0008 - 0x0000)
struct BuildingTurretComponent_OnRep_CurrentTarget final
{
public:
	class AActor*                                 OldTarget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTurretComponent_OnRep_CurrentTarget) == 0x000008, "Wrong alignment on BuildingTurretComponent_OnRep_CurrentTarget");
static_assert(sizeof(BuildingTurretComponent_OnRep_CurrentTarget) == 0x000008, "Wrong size on BuildingTurretComponent_OnRep_CurrentTarget");
static_assert(offsetof(BuildingTurretComponent_OnRep_CurrentTarget, OldTarget) == 0x000000, "Member 'BuildingTurretComponent_OnRep_CurrentTarget::OldTarget' has a wrong offset!");

// Function FortniteGame.BuildingTurretComponent.OnTargetingBeginOverlap
// 0x00A0 (0x00A0 - 0x0000)
struct BuildingTurretComponent_OnTargetingBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTurretComponent_OnTargetingBeginOverlap) == 0x000008, "Wrong alignment on BuildingTurretComponent_OnTargetingBeginOverlap");
static_assert(sizeof(BuildingTurretComponent_OnTargetingBeginOverlap) == 0x0000A0, "Wrong size on BuildingTurretComponent_OnTargetingBeginOverlap");
static_assert(offsetof(BuildingTurretComponent_OnTargetingBeginOverlap, OverlappedComp) == 0x000000, "Member 'BuildingTurretComponent_OnTargetingBeginOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(BuildingTurretComponent_OnTargetingBeginOverlap, OtherActor) == 0x000008, "Member 'BuildingTurretComponent_OnTargetingBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(BuildingTurretComponent_OnTargetingBeginOverlap, OtherComp) == 0x000010, "Member 'BuildingTurretComponent_OnTargetingBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(BuildingTurretComponent_OnTargetingBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'BuildingTurretComponent_OnTargetingBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BuildingTurretComponent_OnTargetingBeginOverlap, bFromSweep) == 0x00001C, "Member 'BuildingTurretComponent_OnTargetingBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(BuildingTurretComponent_OnTargetingBeginOverlap, SweepResult) == 0x000020, "Member 'BuildingTurretComponent_OnTargetingBeginOverlap::SweepResult' has a wrong offset!");

// Function FortniteGame.BuildingTurretComponent.OnTargetingEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct BuildingTurretComponent_OnTargetingEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingTurretComponent_OnTargetingEndOverlap) == 0x000008, "Wrong alignment on BuildingTurretComponent_OnTargetingEndOverlap");
static_assert(sizeof(BuildingTurretComponent_OnTargetingEndOverlap) == 0x000020, "Wrong size on BuildingTurretComponent_OnTargetingEndOverlap");
static_assert(offsetof(BuildingTurretComponent_OnTargetingEndOverlap, OverlappedComp) == 0x000000, "Member 'BuildingTurretComponent_OnTargetingEndOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(BuildingTurretComponent_OnTargetingEndOverlap, OtherActor) == 0x000008, "Member 'BuildingTurretComponent_OnTargetingEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(BuildingTurretComponent_OnTargetingEndOverlap, OtherComp) == 0x000010, "Member 'BuildingTurretComponent_OnTargetingEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(BuildingTurretComponent_OnTargetingEndOverlap, OtherBodyIndex) == 0x000018, "Member 'BuildingTurretComponent_OnTargetingEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function FortniteGame.BuildingTurretComponent.SetTargetingOverlapComponent
// 0x0008 (0x0008 - 0x0000)
struct BuildingTurretComponent_SetTargetingOverlapComponent final
{
public:
	class UPrimitiveComponent*                    NewTargetingOverlapComponent;                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTurretComponent_SetTargetingOverlapComponent) == 0x000008, "Wrong alignment on BuildingTurretComponent_SetTargetingOverlapComponent");
static_assert(sizeof(BuildingTurretComponent_SetTargetingOverlapComponent) == 0x000008, "Wrong size on BuildingTurretComponent_SetTargetingOverlapComponent");
static_assert(offsetof(BuildingTurretComponent_SetTargetingOverlapComponent, NewTargetingOverlapComponent) == 0x000000, "Member 'BuildingTurretComponent_SetTargetingOverlapComponent::NewTargetingOverlapComponent' has a wrong offset!");

// Function FortniteGame.BuildingTurretComponent.ChooseBestTarget
// 0x0018 (0x0018 - 0x0000)
struct BuildingTurretComponent_ChooseBestTarget final
{
public:
	TArray<class AActor*>                         InOutPotentialTargets;                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTurretComponent_ChooseBestTarget) == 0x000008, "Wrong alignment on BuildingTurretComponent_ChooseBestTarget");
static_assert(sizeof(BuildingTurretComponent_ChooseBestTarget) == 0x000018, "Wrong size on BuildingTurretComponent_ChooseBestTarget");
static_assert(offsetof(BuildingTurretComponent_ChooseBestTarget, InOutPotentialTargets) == 0x000000, "Member 'BuildingTurretComponent_ChooseBestTarget::InOutPotentialTargets' has a wrong offset!");
static_assert(offsetof(BuildingTurretComponent_ChooseBestTarget, ReturnValue) == 0x000010, "Member 'BuildingTurretComponent_ChooseBestTarget::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingTurretComponent.IsValidTarget
// 0x0010 (0x0010 - 0x0000)
struct BuildingTurretComponent_IsValidTarget final
{
public:
	class AActor*                                 InTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingTurretComponent_IsValidTarget) == 0x000008, "Wrong alignment on BuildingTurretComponent_IsValidTarget");
static_assert(sizeof(BuildingTurretComponent_IsValidTarget) == 0x000010, "Wrong size on BuildingTurretComponent_IsValidTarget");
static_assert(offsetof(BuildingTurretComponent_IsValidTarget, InTarget) == 0x000000, "Member 'BuildingTurretComponent_IsValidTarget::InTarget' has a wrong offset!");
static_assert(offsetof(BuildingTurretComponent_IsValidTarget, ReturnValue) == 0x000008, "Member 'BuildingTurretComponent_IsValidTarget::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingTurretComponent_MOBA.OnAllyHarmed
// 0x0010 (0x0010 - 0x0000)
struct BuildingTurretComponent_MOBA_OnAllyHarmed final
{
public:
	class AActor*                                 InAllyActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InHarmingActor;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTurretComponent_MOBA_OnAllyHarmed) == 0x000008, "Wrong alignment on BuildingTurretComponent_MOBA_OnAllyHarmed");
static_assert(sizeof(BuildingTurretComponent_MOBA_OnAllyHarmed) == 0x000010, "Wrong size on BuildingTurretComponent_MOBA_OnAllyHarmed");
static_assert(offsetof(BuildingTurretComponent_MOBA_OnAllyHarmed, InAllyActor) == 0x000000, "Member 'BuildingTurretComponent_MOBA_OnAllyHarmed::InAllyActor' has a wrong offset!");
static_assert(offsetof(BuildingTurretComponent_MOBA_OnAllyHarmed, InHarmingActor) == 0x000008, "Member 'BuildingTurretComponent_MOBA_OnAllyHarmed::InHarmingActor' has a wrong offset!");

// Function FortniteGame.FortCombatManager.GetEventHeatPercent
// 0x0008 (0x0008 - 0x0000)
struct FortCombatManager_GetEventHeatPercent final
{
public:
	EFortCombatEvents                             CombatEvent;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCombatManager_GetEventHeatPercent) == 0x000004, "Wrong alignment on FortCombatManager_GetEventHeatPercent");
static_assert(sizeof(FortCombatManager_GetEventHeatPercent) == 0x000008, "Wrong size on FortCombatManager_GetEventHeatPercent");
static_assert(offsetof(FortCombatManager_GetEventHeatPercent, CombatEvent) == 0x000000, "Member 'FortCombatManager_GetEventHeatPercent::CombatEvent' has a wrong offset!");
static_assert(offsetof(FortCombatManager_GetEventHeatPercent, ReturnValue) == 0x000004, "Member 'FortCombatManager_GetEventHeatPercent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCombatManager.GetEventHeatPercentTotal
// 0x0008 (0x0008 - 0x0000)
struct FortCombatManager_GetEventHeatPercentTotal final
{
public:
	EFortCombatEvents                             CombatEvent;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCombatManager_GetEventHeatPercentTotal) == 0x000004, "Wrong alignment on FortCombatManager_GetEventHeatPercentTotal");
static_assert(sizeof(FortCombatManager_GetEventHeatPercentTotal) == 0x000008, "Wrong size on FortCombatManager_GetEventHeatPercentTotal");
static_assert(offsetof(FortCombatManager_GetEventHeatPercentTotal, CombatEvent) == 0x000000, "Member 'FortCombatManager_GetEventHeatPercentTotal::CombatEvent' has a wrong offset!");
static_assert(offsetof(FortCombatManager_GetEventHeatPercentTotal, ReturnValue) == 0x000004, "Member 'FortCombatManager_GetEventHeatPercentTotal::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCombatManager.OnThresholdChange
// 0x0002 (0x0002 - 0x0000)
struct FortCombatManager_OnThresholdChange final
{
public:
	EFortCombatThresholds                         OldThreshold;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCombatThresholds                         NewThreshold;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCombatManager_OnThresholdChange) == 0x000001, "Wrong alignment on FortCombatManager_OnThresholdChange");
static_assert(sizeof(FortCombatManager_OnThresholdChange) == 0x000002, "Wrong size on FortCombatManager_OnThresholdChange");
static_assert(offsetof(FortCombatManager_OnThresholdChange, OldThreshold) == 0x000000, "Member 'FortCombatManager_OnThresholdChange::OldThreshold' has a wrong offset!");
static_assert(offsetof(FortCombatManager_OnThresholdChange, NewThreshold) == 0x000001, "Member 'FortCombatManager_OnThresholdChange::NewThreshold' has a wrong offset!");

// Function FortniteGame.FortScoreStylingData.GetScoreStylingData
// 0x0308 (0x0308 - 0x0000)
struct FortScoreStylingData_GetScoreStylingData final
{
public:
	EFortUIScoreType                              Rarity;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortScoreStylingInfo                  ScoreStylingInfo;                                  // 0x0008(0x02F8)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0300(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_301[0x7];                                      // 0x0301(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortScoreStylingData_GetScoreStylingData) == 0x000008, "Wrong alignment on FortScoreStylingData_GetScoreStylingData");
static_assert(sizeof(FortScoreStylingData_GetScoreStylingData) == 0x000308, "Wrong size on FortScoreStylingData_GetScoreStylingData");
static_assert(offsetof(FortScoreStylingData_GetScoreStylingData, Rarity) == 0x000000, "Member 'FortScoreStylingData_GetScoreStylingData::Rarity' has a wrong offset!");
static_assert(offsetof(FortScoreStylingData_GetScoreStylingData, ScoreStylingInfo) == 0x000008, "Member 'FortScoreStylingData_GetScoreStylingData::ScoreStylingInfo' has a wrong offset!");
static_assert(offsetof(FortScoreStylingData_GetScoreStylingData, ReturnValue) == 0x000300, "Member 'FortScoreStylingData_GetScoreStylingData::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSpawnableByPlacementSystemInterface.GetMission
// 0x0008 (0x0008 - 0x0000)
struct FortSpawnableByPlacementSystemInterface_GetMission final
{
public:
	class AFortMission*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSpawnableByPlacementSystemInterface_GetMission) == 0x000008, "Wrong alignment on FortSpawnableByPlacementSystemInterface_GetMission");
static_assert(sizeof(FortSpawnableByPlacementSystemInterface_GetMission) == 0x000008, "Wrong size on FortSpawnableByPlacementSystemInterface_GetMission");
static_assert(offsetof(FortSpawnableByPlacementSystemInterface_GetMission, ReturnValue) == 0x000000, "Member 'FortSpawnableByPlacementSystemInterface_GetMission::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSpawnableByPlacementSystemInterface.GetMissionGuid
// 0x0010 (0x0010 - 0x0000)
struct FortSpawnableByPlacementSystemInterface_GetMissionGuid final
{
public:
	struct FGuid                                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSpawnableByPlacementSystemInterface_GetMissionGuid) == 0x000004, "Wrong alignment on FortSpawnableByPlacementSystemInterface_GetMissionGuid");
static_assert(sizeof(FortSpawnableByPlacementSystemInterface_GetMissionGuid) == 0x000010, "Wrong size on FortSpawnableByPlacementSystemInterface_GetMissionGuid");
static_assert(offsetof(FortSpawnableByPlacementSystemInterface_GetMissionGuid, ReturnValue) == 0x000000, "Member 'FortSpawnableByPlacementSystemInterface_GetMissionGuid::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCompendiumItemDefinition.GetQuests
// 0x0028 (0x0028 - 0x0000)
struct FortCompendiumItemDefinition_GetQuests final
{
public:
	class UFortQuestManager*                      QuestManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortQuestItem*>                 OwnedQuests;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UFortQuestItemDefinition*>       UnownedQuests;                                     // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCompendiumItemDefinition_GetQuests) == 0x000008, "Wrong alignment on FortCompendiumItemDefinition_GetQuests");
static_assert(sizeof(FortCompendiumItemDefinition_GetQuests) == 0x000028, "Wrong size on FortCompendiumItemDefinition_GetQuests");
static_assert(offsetof(FortCompendiumItemDefinition_GetQuests, QuestManager) == 0x000000, "Member 'FortCompendiumItemDefinition_GetQuests::QuestManager' has a wrong offset!");
static_assert(offsetof(FortCompendiumItemDefinition_GetQuests, OwnedQuests) == 0x000008, "Member 'FortCompendiumItemDefinition_GetQuests::OwnedQuests' has a wrong offset!");
static_assert(offsetof(FortCompendiumItemDefinition_GetQuests, UnownedQuests) == 0x000018, "Member 'FortCompendiumItemDefinition_GetQuests::UnownedQuests' has a wrong offset!");

// Function FortniteGame.FortCompendiumItemDefinition.GetEventName
// 0x0010 (0x0010 - 0x0000)
struct FortCompendiumItemDefinition_GetEventName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCompendiumItemDefinition_GetEventName) == 0x000008, "Wrong alignment on FortCompendiumItemDefinition_GetEventName");
static_assert(sizeof(FortCompendiumItemDefinition_GetEventName) == 0x000010, "Wrong size on FortCompendiumItemDefinition_GetEventName");
static_assert(offsetof(FortCompendiumItemDefinition_GetEventName, ReturnValue) == 0x000000, "Member 'FortCompendiumItemDefinition_GetEventName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAthenaSupplyDrop.SpawnPickup
// 0x0038 (0x0038 - 0x0000)
struct FortAthenaSupplyDrop_SpawnPickup final
{
public:
	class UFortWorldItemDefinition*               ItemDefinition;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberToSpawn;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPawn*                              TriggeringPawn;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0018(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0024(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPickup*                            ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaSupplyDrop_SpawnPickup) == 0x000008, "Wrong alignment on FortAthenaSupplyDrop_SpawnPickup");
static_assert(sizeof(FortAthenaSupplyDrop_SpawnPickup) == 0x000038, "Wrong size on FortAthenaSupplyDrop_SpawnPickup");
static_assert(offsetof(FortAthenaSupplyDrop_SpawnPickup, ItemDefinition) == 0x000000, "Member 'FortAthenaSupplyDrop_SpawnPickup::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FortAthenaSupplyDrop_SpawnPickup, NumberToSpawn) == 0x000008, "Member 'FortAthenaSupplyDrop_SpawnPickup::NumberToSpawn' has a wrong offset!");
static_assert(offsetof(FortAthenaSupplyDrop_SpawnPickup, TriggeringPawn) == 0x000010, "Member 'FortAthenaSupplyDrop_SpawnPickup::TriggeringPawn' has a wrong offset!");
static_assert(offsetof(FortAthenaSupplyDrop_SpawnPickup, Position) == 0x000018, "Member 'FortAthenaSupplyDrop_SpawnPickup::Position' has a wrong offset!");
static_assert(offsetof(FortAthenaSupplyDrop_SpawnPickup, Direction) == 0x000024, "Member 'FortAthenaSupplyDrop_SpawnPickup::Direction' has a wrong offset!");
static_assert(offsetof(FortAthenaSupplyDrop_SpawnPickup, ReturnValue) == 0x000030, "Member 'FortAthenaSupplyDrop_SpawnPickup::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAthenaSupplyDrop.GroundTrace
// 0x00A0 (0x00A0 - 0x0000)
struct FortAthenaSupplyDrop_GroundTrace final
{
public:
	struct FVector                                TraceStart;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TraceEnd;                                          // 0x000C(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             OutHit;                                            // 0x0018(0x0080)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAthenaSupplyDrop_GroundTrace) == 0x000008, "Wrong alignment on FortAthenaSupplyDrop_GroundTrace");
static_assert(sizeof(FortAthenaSupplyDrop_GroundTrace) == 0x0000A0, "Wrong size on FortAthenaSupplyDrop_GroundTrace");
static_assert(offsetof(FortAthenaSupplyDrop_GroundTrace, TraceStart) == 0x000000, "Member 'FortAthenaSupplyDrop_GroundTrace::TraceStart' has a wrong offset!");
static_assert(offsetof(FortAthenaSupplyDrop_GroundTrace, TraceEnd) == 0x00000C, "Member 'FortAthenaSupplyDrop_GroundTrace::TraceEnd' has a wrong offset!");
static_assert(offsetof(FortAthenaSupplyDrop_GroundTrace, OutHit) == 0x000018, "Member 'FortAthenaSupplyDrop_GroundTrace::OutHit' has a wrong offset!");
static_assert(offsetof(FortAthenaSupplyDrop_GroundTrace, ReturnValue) == 0x000098, "Member 'FortAthenaSupplyDrop_GroundTrace::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponItemDefinitionTooltip.GetNumericValue
// 0x0028 (0x0028 - 0x0000)
struct FortWeaponItemDefinitionTooltip_GetNumericValue final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVal;                                            // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortWeaponItemDefinitionTooltip_GetNumericValue) == 0x000008, "Wrong alignment on FortWeaponItemDefinitionTooltip_GetNumericValue");
static_assert(sizeof(FortWeaponItemDefinitionTooltip_GetNumericValue) == 0x000028, "Wrong size on FortWeaponItemDefinitionTooltip_GetNumericValue");
static_assert(offsetof(FortWeaponItemDefinitionTooltip_GetNumericValue, ObjectToDescribe) == 0x000000, "Member 'FortWeaponItemDefinitionTooltip_GetNumericValue::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortWeaponItemDefinitionTooltip_GetNumericValue, Tag) == 0x000008, "Member 'FortWeaponItemDefinitionTooltip_GetNumericValue::Tag' has a wrong offset!");
static_assert(offsetof(FortWeaponItemDefinitionTooltip_GetNumericValue, Context) == 0x000010, "Member 'FortWeaponItemDefinitionTooltip_GetNumericValue::Context' has a wrong offset!");
static_assert(offsetof(FortWeaponItemDefinitionTooltip_GetNumericValue, Token) == 0x000018, "Member 'FortWeaponItemDefinitionTooltip_GetNumericValue::Token' has a wrong offset!");
static_assert(offsetof(FortWeaponItemDefinitionTooltip_GetNumericValue, OutVal) == 0x000020, "Member 'FortWeaponItemDefinitionTooltip_GetNumericValue::OutVal' has a wrong offset!");
static_assert(offsetof(FortWeaponItemDefinitionTooltip_GetNumericValue, ReturnValue) == 0x000024, "Member 'FortWeaponItemDefinitionTooltip_GetNumericValue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponItemDefinitionTooltip.GetTextForToken
// 0x0040 (0x0040 - 0x0000)
struct FortWeaponItemDefinitionTooltip_GetTextForToken final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortWeaponItemDefinitionTooltip_GetTextForToken) == 0x000008, "Wrong alignment on FortWeaponItemDefinitionTooltip_GetTextForToken");
static_assert(sizeof(FortWeaponItemDefinitionTooltip_GetTextForToken) == 0x000040, "Wrong size on FortWeaponItemDefinitionTooltip_GetTextForToken");
static_assert(offsetof(FortWeaponItemDefinitionTooltip_GetTextForToken, ObjectToDescribe) == 0x000000, "Member 'FortWeaponItemDefinitionTooltip_GetTextForToken::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortWeaponItemDefinitionTooltip_GetTextForToken, Tag) == 0x000008, "Member 'FortWeaponItemDefinitionTooltip_GetTextForToken::Tag' has a wrong offset!");
static_assert(offsetof(FortWeaponItemDefinitionTooltip_GetTextForToken, Context) == 0x000010, "Member 'FortWeaponItemDefinitionTooltip_GetTextForToken::Context' has a wrong offset!");
static_assert(offsetof(FortWeaponItemDefinitionTooltip_GetTextForToken, Token) == 0x000018, "Member 'FortWeaponItemDefinitionTooltip_GetTextForToken::Token' has a wrong offset!");
static_assert(offsetof(FortWeaponItemDefinitionTooltip_GetTextForToken, OutText) == 0x000020, "Member 'FortWeaponItemDefinitionTooltip_GetTextForToken::OutText' has a wrong offset!");
static_assert(offsetof(FortWeaponItemDefinitionTooltip_GetTextForToken, ReturnValue) == 0x000038, "Member 'FortWeaponItemDefinitionTooltip_GetTextForToken::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponItemDefinitionTooltip.GetTokenizedDescriptionText
// 0x0030 (0x0030 - 0x0000)
struct FortWeaponItemDefinitionTooltip_GetTokenizedDescriptionText final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           OutDescription;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortWeaponItemDefinitionTooltip_GetTokenizedDescriptionText) == 0x000008, "Wrong alignment on FortWeaponItemDefinitionTooltip_GetTokenizedDescriptionText");
static_assert(sizeof(FortWeaponItemDefinitionTooltip_GetTokenizedDescriptionText) == 0x000030, "Wrong size on FortWeaponItemDefinitionTooltip_GetTokenizedDescriptionText");
static_assert(offsetof(FortWeaponItemDefinitionTooltip_GetTokenizedDescriptionText, ObjectToDescribe) == 0x000000, "Member 'FortWeaponItemDefinitionTooltip_GetTokenizedDescriptionText::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortWeaponItemDefinitionTooltip_GetTokenizedDescriptionText, Tag) == 0x000008, "Member 'FortWeaponItemDefinitionTooltip_GetTokenizedDescriptionText::Tag' has a wrong offset!");
static_assert(offsetof(FortWeaponItemDefinitionTooltip_GetTokenizedDescriptionText, Context) == 0x000010, "Member 'FortWeaponItemDefinitionTooltip_GetTokenizedDescriptionText::Context' has a wrong offset!");
static_assert(offsetof(FortWeaponItemDefinitionTooltip_GetTokenizedDescriptionText, OutDescription) == 0x000018, "Member 'FortWeaponItemDefinitionTooltip_GetTokenizedDescriptionText::OutDescription' has a wrong offset!");
static_assert(offsetof(FortWeaponItemDefinitionTooltip_GetTokenizedDescriptionText, ReturnValue) == 0x000028, "Member 'FortWeaponItemDefinitionTooltip_GetTokenizedDescriptionText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponMeleeItemDefinitionTooltip.GetNumericValue
// 0x0028 (0x0028 - 0x0000)
struct FortWeaponMeleeItemDefinitionTooltip_GetNumericValue final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVal;                                            // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortWeaponMeleeItemDefinitionTooltip_GetNumericValue) == 0x000008, "Wrong alignment on FortWeaponMeleeItemDefinitionTooltip_GetNumericValue");
static_assert(sizeof(FortWeaponMeleeItemDefinitionTooltip_GetNumericValue) == 0x000028, "Wrong size on FortWeaponMeleeItemDefinitionTooltip_GetNumericValue");
static_assert(offsetof(FortWeaponMeleeItemDefinitionTooltip_GetNumericValue, ObjectToDescribe) == 0x000000, "Member 'FortWeaponMeleeItemDefinitionTooltip_GetNumericValue::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortWeaponMeleeItemDefinitionTooltip_GetNumericValue, Tag) == 0x000008, "Member 'FortWeaponMeleeItemDefinitionTooltip_GetNumericValue::Tag' has a wrong offset!");
static_assert(offsetof(FortWeaponMeleeItemDefinitionTooltip_GetNumericValue, Context) == 0x000010, "Member 'FortWeaponMeleeItemDefinitionTooltip_GetNumericValue::Context' has a wrong offset!");
static_assert(offsetof(FortWeaponMeleeItemDefinitionTooltip_GetNumericValue, Token) == 0x000018, "Member 'FortWeaponMeleeItemDefinitionTooltip_GetNumericValue::Token' has a wrong offset!");
static_assert(offsetof(FortWeaponMeleeItemDefinitionTooltip_GetNumericValue, OutVal) == 0x000020, "Member 'FortWeaponMeleeItemDefinitionTooltip_GetNumericValue::OutVal' has a wrong offset!");
static_assert(offsetof(FortWeaponMeleeItemDefinitionTooltip_GetNumericValue, ReturnValue) == 0x000024, "Member 'FortWeaponMeleeItemDefinitionTooltip_GetNumericValue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponMeleeItemDefinitionTooltip.GetTextForToken
// 0x0040 (0x0040 - 0x0000)
struct FortWeaponMeleeItemDefinitionTooltip_GetTextForToken final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortWeaponMeleeItemDefinitionTooltip_GetTextForToken) == 0x000008, "Wrong alignment on FortWeaponMeleeItemDefinitionTooltip_GetTextForToken");
static_assert(sizeof(FortWeaponMeleeItemDefinitionTooltip_GetTextForToken) == 0x000040, "Wrong size on FortWeaponMeleeItemDefinitionTooltip_GetTextForToken");
static_assert(offsetof(FortWeaponMeleeItemDefinitionTooltip_GetTextForToken, ObjectToDescribe) == 0x000000, "Member 'FortWeaponMeleeItemDefinitionTooltip_GetTextForToken::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortWeaponMeleeItemDefinitionTooltip_GetTextForToken, Tag) == 0x000008, "Member 'FortWeaponMeleeItemDefinitionTooltip_GetTextForToken::Tag' has a wrong offset!");
static_assert(offsetof(FortWeaponMeleeItemDefinitionTooltip_GetTextForToken, Context) == 0x000010, "Member 'FortWeaponMeleeItemDefinitionTooltip_GetTextForToken::Context' has a wrong offset!");
static_assert(offsetof(FortWeaponMeleeItemDefinitionTooltip_GetTextForToken, Token) == 0x000018, "Member 'FortWeaponMeleeItemDefinitionTooltip_GetTextForToken::Token' has a wrong offset!");
static_assert(offsetof(FortWeaponMeleeItemDefinitionTooltip_GetTextForToken, OutText) == 0x000020, "Member 'FortWeaponMeleeItemDefinitionTooltip_GetTextForToken::OutText' has a wrong offset!");
static_assert(offsetof(FortWeaponMeleeItemDefinitionTooltip_GetTextForToken, ReturnValue) == 0x000038, "Member 'FortWeaponMeleeItemDefinitionTooltip_GetTextForToken::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponMeleeItemDefinitionTooltip.GetTokenizedDescriptionText
// 0x0030 (0x0030 - 0x0000)
struct FortWeaponMeleeItemDefinitionTooltip_GetTokenizedDescriptionText final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           OutDescription;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortWeaponMeleeItemDefinitionTooltip_GetTokenizedDescriptionText) == 0x000008, "Wrong alignment on FortWeaponMeleeItemDefinitionTooltip_GetTokenizedDescriptionText");
static_assert(sizeof(FortWeaponMeleeItemDefinitionTooltip_GetTokenizedDescriptionText) == 0x000030, "Wrong size on FortWeaponMeleeItemDefinitionTooltip_GetTokenizedDescriptionText");
static_assert(offsetof(FortWeaponMeleeItemDefinitionTooltip_GetTokenizedDescriptionText, ObjectToDescribe) == 0x000000, "Member 'FortWeaponMeleeItemDefinitionTooltip_GetTokenizedDescriptionText::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortWeaponMeleeItemDefinitionTooltip_GetTokenizedDescriptionText, Tag) == 0x000008, "Member 'FortWeaponMeleeItemDefinitionTooltip_GetTokenizedDescriptionText::Tag' has a wrong offset!");
static_assert(offsetof(FortWeaponMeleeItemDefinitionTooltip_GetTokenizedDescriptionText, Context) == 0x000010, "Member 'FortWeaponMeleeItemDefinitionTooltip_GetTokenizedDescriptionText::Context' has a wrong offset!");
static_assert(offsetof(FortWeaponMeleeItemDefinitionTooltip_GetTokenizedDescriptionText, OutDescription) == 0x000018, "Member 'FortWeaponMeleeItemDefinitionTooltip_GetTokenizedDescriptionText::OutDescription' has a wrong offset!");
static_assert(offsetof(FortWeaponMeleeItemDefinitionTooltip_GetTokenizedDescriptionText, ReturnValue) == 0x000028, "Member 'FortWeaponMeleeItemDefinitionTooltip_GetTokenizedDescriptionText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAISpawnerInterface.IsReadyToReceiveNewSpawnGroup
// 0x0001 (0x0001 - 0x0000)
struct FortAISpawnerInterface_IsReadyToReceiveNewSpawnGroup final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAISpawnerInterface_IsReadyToReceiveNewSpawnGroup) == 0x000001, "Wrong alignment on FortAISpawnerInterface_IsReadyToReceiveNewSpawnGroup");
static_assert(sizeof(FortAISpawnerInterface_IsReadyToReceiveNewSpawnGroup) == 0x000001, "Wrong size on FortAISpawnerInterface_IsReadyToReceiveNewSpawnGroup");
static_assert(offsetof(FortAISpawnerInterface_IsReadyToReceiveNewSpawnGroup, ReturnValue) == 0x000000, "Member 'FortAISpawnerInterface_IsReadyToReceiveNewSpawnGroup::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAISpawnerInterface.OnReceiveSpawnGroup
// 0x0001 (0x0001 - 0x0000)
struct FortAISpawnerInterface_OnReceiveSpawnGroup final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAISpawnerInterface_OnReceiveSpawnGroup) == 0x000001, "Wrong alignment on FortAISpawnerInterface_OnReceiveSpawnGroup");
static_assert(sizeof(FortAISpawnerInterface_OnReceiveSpawnGroup) == 0x000001, "Wrong size on FortAISpawnerInterface_OnReceiveSpawnGroup");
static_assert(offsetof(FortAISpawnerInterface_OnReceiveSpawnGroup, ReturnValue) == 0x000000, "Member 'FortAISpawnerInterface_OnReceiveSpawnGroup::ReturnValue' has a wrong offset!");

// Function FortniteGame.CustomCharacterPartAnimInstance.OnDayPhaseChanged
// 0x0003 (0x0003 - 0x0000)
struct CustomCharacterPartAnimInstance_OnDayPhaseChanged final
{
public:
	EFortDayPhase                                 CurrentDayPhase;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDayPhase                                 PreviousDayPhase;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAtCreation;                                       // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomCharacterPartAnimInstance_OnDayPhaseChanged) == 0x000001, "Wrong alignment on CustomCharacterPartAnimInstance_OnDayPhaseChanged");
static_assert(sizeof(CustomCharacterPartAnimInstance_OnDayPhaseChanged) == 0x000003, "Wrong size on CustomCharacterPartAnimInstance_OnDayPhaseChanged");
static_assert(offsetof(CustomCharacterPartAnimInstance_OnDayPhaseChanged, CurrentDayPhase) == 0x000000, "Member 'CustomCharacterPartAnimInstance_OnDayPhaseChanged::CurrentDayPhase' has a wrong offset!");
static_assert(offsetof(CustomCharacterPartAnimInstance_OnDayPhaseChanged, PreviousDayPhase) == 0x000001, "Member 'CustomCharacterPartAnimInstance_OnDayPhaseChanged::PreviousDayPhase' has a wrong offset!");
static_assert(offsetof(CustomCharacterPartAnimInstance_OnDayPhaseChanged, bAtCreation) == 0x000002, "Member 'CustomCharacterPartAnimInstance_OnDayPhaseChanged::bAtCreation' has a wrong offset!");

// Function FortniteGame.CustomCharacterPartAnimInstance.OnPlayMontageFromGameplayTagQuery
// 0x0050 (0x0050 - 0x0000)
struct CustomCharacterPartAnimInstance_OnPlayMontageFromGameplayTagQuery final
{
public:
	struct FGameplayTagQuery                      MatchingQuery;                                     // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UAnimMontage*                           MontagePlaying;                                    // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomCharacterPartAnimInstance_OnPlayMontageFromGameplayTagQuery) == 0x000008, "Wrong alignment on CustomCharacterPartAnimInstance_OnPlayMontageFromGameplayTagQuery");
static_assert(sizeof(CustomCharacterPartAnimInstance_OnPlayMontageFromGameplayTagQuery) == 0x000050, "Wrong size on CustomCharacterPartAnimInstance_OnPlayMontageFromGameplayTagQuery");
static_assert(offsetof(CustomCharacterPartAnimInstance_OnPlayMontageFromGameplayTagQuery, MatchingQuery) == 0x000000, "Member 'CustomCharacterPartAnimInstance_OnPlayMontageFromGameplayTagQuery::MatchingQuery' has a wrong offset!");
static_assert(offsetof(CustomCharacterPartAnimInstance_OnPlayMontageFromGameplayTagQuery, MontagePlaying) == 0x000048, "Member 'CustomCharacterPartAnimInstance_OnPlayMontageFromGameplayTagQuery::MontagePlaying' has a wrong offset!");

// Function FortniteGame.CustomCharacterPartAnimInstance.GetAssociatedPlayerPawn
// 0x0008 (0x0008 - 0x0000)
struct CustomCharacterPartAnimInstance_GetAssociatedPlayerPawn final
{
public:
	class AFortPlayerPawn*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomCharacterPartAnimInstance_GetAssociatedPlayerPawn) == 0x000008, "Wrong alignment on CustomCharacterPartAnimInstance_GetAssociatedPlayerPawn");
static_assert(sizeof(CustomCharacterPartAnimInstance_GetAssociatedPlayerPawn) == 0x000008, "Wrong size on CustomCharacterPartAnimInstance_GetAssociatedPlayerPawn");
static_assert(offsetof(CustomCharacterPartAnimInstance_GetAssociatedPlayerPawn, ReturnValue) == 0x000000, "Member 'CustomCharacterPartAnimInstance_GetAssociatedPlayerPawn::ReturnValue' has a wrong offset!");

// Function FortniteGame.CustomCharacterPartAnimInstance.GetCharacterPartType
// 0x0001 (0x0001 - 0x0000)
struct CustomCharacterPartAnimInstance_GetCharacterPartType final
{
public:
	EFortCustomPartType                           ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomCharacterPartAnimInstance_GetCharacterPartType) == 0x000001, "Wrong alignment on CustomCharacterPartAnimInstance_GetCharacterPartType");
static_assert(sizeof(CustomCharacterPartAnimInstance_GetCharacterPartType) == 0x000001, "Wrong size on CustomCharacterPartAnimInstance_GetCharacterPartType");
static_assert(offsetof(CustomCharacterPartAnimInstance_GetCharacterPartType, ReturnValue) == 0x000000, "Member 'CustomCharacterPartAnimInstance_GetCharacterPartType::ReturnValue' has a wrong offset!");

// Function FortniteGame.CustomCharacterPartAnimInstance.GetOwnerSkeletalMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct CustomCharacterPartAnimInstance_GetOwnerSkeletalMeshComponent final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomCharacterPartAnimInstance_GetOwnerSkeletalMeshComponent) == 0x000008, "Wrong alignment on CustomCharacterPartAnimInstance_GetOwnerSkeletalMeshComponent");
static_assert(sizeof(CustomCharacterPartAnimInstance_GetOwnerSkeletalMeshComponent) == 0x000008, "Wrong size on CustomCharacterPartAnimInstance_GetOwnerSkeletalMeshComponent");
static_assert(offsetof(CustomCharacterPartAnimInstance_GetOwnerSkeletalMeshComponent, ReturnValue) == 0x000000, "Member 'CustomCharacterPartAnimInstance_GetOwnerSkeletalMeshComponent::ReturnValue' has a wrong offset!");

// Function FortniteGame.CustomCharacterPartAnimInstance.GetPartSkeletalMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct CustomCharacterPartAnimInstance_GetPartSkeletalMeshComponent final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomCharacterPartAnimInstance_GetPartSkeletalMeshComponent) == 0x000008, "Wrong alignment on CustomCharacterPartAnimInstance_GetPartSkeletalMeshComponent");
static_assert(sizeof(CustomCharacterPartAnimInstance_GetPartSkeletalMeshComponent) == 0x000008, "Wrong size on CustomCharacterPartAnimInstance_GetPartSkeletalMeshComponent");
static_assert(offsetof(CustomCharacterPartAnimInstance_GetPartSkeletalMeshComponent, ReturnValue) == 0x000000, "Member 'CustomCharacterPartAnimInstance_GetPartSkeletalMeshComponent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWorldItem.GetOwnedGameplayTags
// 0x0020 (0x0020 - 0x0000)
struct FortWorldItem_GetOwnedGameplayTags final
{
public:
	struct FGameplayTagContainer                  TagContainer;                                      // 0x0000(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWorldItem_GetOwnedGameplayTags) == 0x000008, "Wrong alignment on FortWorldItem_GetOwnedGameplayTags");
static_assert(sizeof(FortWorldItem_GetOwnedGameplayTags) == 0x000020, "Wrong size on FortWorldItem_GetOwnedGameplayTags");
static_assert(offsetof(FortWorldItem_GetOwnedGameplayTags, TagContainer) == 0x000000, "Member 'FortWorldItem_GetOwnedGameplayTags::TagContainer' has a wrong offset!");

// Function FortniteGame.FortWorldItem.SeenInFrontend
// 0x0001 (0x0001 - 0x0000)
struct FortWorldItem_SeenInFrontend final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWorldItem_SeenInFrontend) == 0x000001, "Wrong alignment on FortWorldItem_SeenInFrontend");
static_assert(sizeof(FortWorldItem_SeenInFrontend) == 0x000001, "Wrong size on FortWorldItem_SeenInFrontend");
static_assert(offsetof(FortWorldItem_SeenInFrontend, ReturnValue) == 0x000000, "Member 'FortWorldItem_SeenInFrontend::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAISystem.IsInCone2D
// 0x002C (0x002C - 0x0000)
struct FortAISystem_IsInCone2D final
{
public:
	struct FVector                                ConeOrigin;                                        // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ConeDirection;                                     // 0x000C(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfAngle;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationToCheck;                                   // 0x001C(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAISystem_IsInCone2D) == 0x000004, "Wrong alignment on FortAISystem_IsInCone2D");
static_assert(sizeof(FortAISystem_IsInCone2D) == 0x00002C, "Wrong size on FortAISystem_IsInCone2D");
static_assert(offsetof(FortAISystem_IsInCone2D, ConeOrigin) == 0x000000, "Member 'FortAISystem_IsInCone2D::ConeOrigin' has a wrong offset!");
static_assert(offsetof(FortAISystem_IsInCone2D, ConeDirection) == 0x00000C, "Member 'FortAISystem_IsInCone2D::ConeDirection' has a wrong offset!");
static_assert(offsetof(FortAISystem_IsInCone2D, HalfAngle) == 0x000018, "Member 'FortAISystem_IsInCone2D::HalfAngle' has a wrong offset!");
static_assert(offsetof(FortAISystem_IsInCone2D, LocationToCheck) == 0x00001C, "Member 'FortAISystem_IsInCone2D::LocationToCheck' has a wrong offset!");
static_assert(offsetof(FortAISystem_IsInCone2D, ReturnValue) == 0x000028, "Member 'FortAISystem_IsInCone2D::ReturnValue' has a wrong offset!");

// Function FortniteGame.CustomCharacterPartModifier.OnDayPhaseChanged
// 0x0003 (0x0003 - 0x0000)
struct CustomCharacterPartModifier_OnDayPhaseChanged final
{
public:
	EFortDayPhase                                 CurrentDayPhase;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDayPhase                                 PreviousDayPhase;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAtCreation;                                       // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomCharacterPartModifier_OnDayPhaseChanged) == 0x000001, "Wrong alignment on CustomCharacterPartModifier_OnDayPhaseChanged");
static_assert(sizeof(CustomCharacterPartModifier_OnDayPhaseChanged) == 0x000003, "Wrong size on CustomCharacterPartModifier_OnDayPhaseChanged");
static_assert(offsetof(CustomCharacterPartModifier_OnDayPhaseChanged, CurrentDayPhase) == 0x000000, "Member 'CustomCharacterPartModifier_OnDayPhaseChanged::CurrentDayPhase' has a wrong offset!");
static_assert(offsetof(CustomCharacterPartModifier_OnDayPhaseChanged, PreviousDayPhase) == 0x000001, "Member 'CustomCharacterPartModifier_OnDayPhaseChanged::PreviousDayPhase' has a wrong offset!");
static_assert(offsetof(CustomCharacterPartModifier_OnDayPhaseChanged, bAtCreation) == 0x000002, "Member 'CustomCharacterPartModifier_OnDayPhaseChanged::bAtCreation' has a wrong offset!");

// Function FortniteGame.CustomCharacterPartModifier.GetAssociatedPlayerPawn
// 0x0008 (0x0008 - 0x0000)
struct CustomCharacterPartModifier_GetAssociatedPlayerPawn final
{
public:
	class AFortPlayerPawn*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomCharacterPartModifier_GetAssociatedPlayerPawn) == 0x000008, "Wrong alignment on CustomCharacterPartModifier_GetAssociatedPlayerPawn");
static_assert(sizeof(CustomCharacterPartModifier_GetAssociatedPlayerPawn) == 0x000008, "Wrong size on CustomCharacterPartModifier_GetAssociatedPlayerPawn");
static_assert(offsetof(CustomCharacterPartModifier_GetAssociatedPlayerPawn, ReturnValue) == 0x000000, "Member 'CustomCharacterPartModifier_GetAssociatedPlayerPawn::ReturnValue' has a wrong offset!");

// Function FortniteGame.CustomCharacterPartModifier.GetCharacterPartType
// 0x0001 (0x0001 - 0x0000)
struct CustomCharacterPartModifier_GetCharacterPartType final
{
public:
	EFortCustomPartType                           ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomCharacterPartModifier_GetCharacterPartType) == 0x000001, "Wrong alignment on CustomCharacterPartModifier_GetCharacterPartType");
static_assert(sizeof(CustomCharacterPartModifier_GetCharacterPartType) == 0x000001, "Wrong size on CustomCharacterPartModifier_GetCharacterPartType");
static_assert(offsetof(CustomCharacterPartModifier_GetCharacterPartType, ReturnValue) == 0x000000, "Member 'CustomCharacterPartModifier_GetCharacterPartType::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeap_BuildingTool.OnBlueprintPaperPulseUpdate
// 0x0004 (0x0004 - 0x0000)
struct FortWeap_BuildingTool_OnBlueprintPaperPulseUpdate final
{
public:
	float                                         InCurveVal;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeap_BuildingTool_OnBlueprintPaperPulseUpdate) == 0x000004, "Wrong alignment on FortWeap_BuildingTool_OnBlueprintPaperPulseUpdate");
static_assert(sizeof(FortWeap_BuildingTool_OnBlueprintPaperPulseUpdate) == 0x000004, "Wrong size on FortWeap_BuildingTool_OnBlueprintPaperPulseUpdate");
static_assert(offsetof(FortWeap_BuildingTool_OnBlueprintPaperPulseUpdate, InCurveVal) == 0x000000, "Member 'FortWeap_BuildingTool_OnBlueprintPaperPulseUpdate::InCurveVal' has a wrong offset!");

// Function FortniteGame.CustomCharacterPartOwnerInterface.PlayAnimationsMatchingQuery
// 0x0048 (0x0048 - 0x0000)
struct CustomCharacterPartOwnerInterface_PlayAnimationsMatchingQuery final
{
public:
	struct FGameplayTagQuery                      TagQueryToMatch;                                   // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomCharacterPartOwnerInterface_PlayAnimationsMatchingQuery) == 0x000008, "Wrong alignment on CustomCharacterPartOwnerInterface_PlayAnimationsMatchingQuery");
static_assert(sizeof(CustomCharacterPartOwnerInterface_PlayAnimationsMatchingQuery) == 0x000048, "Wrong size on CustomCharacterPartOwnerInterface_PlayAnimationsMatchingQuery");
static_assert(offsetof(CustomCharacterPartOwnerInterface_PlayAnimationsMatchingQuery, TagQueryToMatch) == 0x000000, "Member 'CustomCharacterPartOwnerInterface_PlayAnimationsMatchingQuery::TagQueryToMatch' has a wrong offset!");

// Function FortniteGame.CustomCharacterPartOwnerInterface.GetCustomizationRootSkeletalMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct CustomCharacterPartOwnerInterface_GetCustomizationRootSkeletalMeshComponent final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomCharacterPartOwnerInterface_GetCustomizationRootSkeletalMeshComponent) == 0x000008, "Wrong alignment on CustomCharacterPartOwnerInterface_GetCustomizationRootSkeletalMeshComponent");
static_assert(sizeof(CustomCharacterPartOwnerInterface_GetCustomizationRootSkeletalMeshComponent) == 0x000008, "Wrong size on CustomCharacterPartOwnerInterface_GetCustomizationRootSkeletalMeshComponent");
static_assert(offsetof(CustomCharacterPartOwnerInterface_GetCustomizationRootSkeletalMeshComponent, ReturnValue) == 0x000000, "Member 'CustomCharacterPartOwnerInterface_GetCustomizationRootSkeletalMeshComponent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortBrushSizeFunctionLibrary.GrowBrushSize
// 0x000C (0x000C - 0x0000)
struct FortBrushSizeFunctionLibrary_GrowBrushSize final
{
public:
	EFortBrushSize                                OriginalBrushSize;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Steps;                                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBrushSize                                ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortBrushSizeFunctionLibrary_GrowBrushSize) == 0x000004, "Wrong alignment on FortBrushSizeFunctionLibrary_GrowBrushSize");
static_assert(sizeof(FortBrushSizeFunctionLibrary_GrowBrushSize) == 0x00000C, "Wrong size on FortBrushSizeFunctionLibrary_GrowBrushSize");
static_assert(offsetof(FortBrushSizeFunctionLibrary_GrowBrushSize, OriginalBrushSize) == 0x000000, "Member 'FortBrushSizeFunctionLibrary_GrowBrushSize::OriginalBrushSize' has a wrong offset!");
static_assert(offsetof(FortBrushSizeFunctionLibrary_GrowBrushSize, Steps) == 0x000004, "Member 'FortBrushSizeFunctionLibrary_GrowBrushSize::Steps' has a wrong offset!");
static_assert(offsetof(FortBrushSizeFunctionLibrary_GrowBrushSize, ReturnValue) == 0x000008, "Member 'FortBrushSizeFunctionLibrary_GrowBrushSize::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortBrushSizeFunctionLibrary.ShrinkBrushSize
// 0x000C (0x000C - 0x0000)
struct FortBrushSizeFunctionLibrary_ShrinkBrushSize final
{
public:
	EFortBrushSize                                OriginalBrushSize;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Steps;                                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBrushSize                                ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortBrushSizeFunctionLibrary_ShrinkBrushSize) == 0x000004, "Wrong alignment on FortBrushSizeFunctionLibrary_ShrinkBrushSize");
static_assert(sizeof(FortBrushSizeFunctionLibrary_ShrinkBrushSize) == 0x00000C, "Wrong size on FortBrushSizeFunctionLibrary_ShrinkBrushSize");
static_assert(offsetof(FortBrushSizeFunctionLibrary_ShrinkBrushSize, OriginalBrushSize) == 0x000000, "Member 'FortBrushSizeFunctionLibrary_ShrinkBrushSize::OriginalBrushSize' has a wrong offset!");
static_assert(offsetof(FortBrushSizeFunctionLibrary_ShrinkBrushSize, Steps) == 0x000004, "Member 'FortBrushSizeFunctionLibrary_ShrinkBrushSize::Steps' has a wrong offset!");
static_assert(offsetof(FortBrushSizeFunctionLibrary_ShrinkBrushSize, ReturnValue) == 0x000008, "Member 'FortBrushSizeFunctionLibrary_ShrinkBrushSize::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAlterableItem.GetNumberOfSlotsForAlterationType
// 0x0008 (0x0008 - 0x0000)
struct FortAlterableItem_GetNumberOfSlotsForAlterationType final
{
public:
	EFortAlteration                               AlterationType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterableItem_GetNumberOfSlotsForAlterationType) == 0x000004, "Wrong alignment on FortAlterableItem_GetNumberOfSlotsForAlterationType");
static_assert(sizeof(FortAlterableItem_GetNumberOfSlotsForAlterationType) == 0x000008, "Wrong size on FortAlterableItem_GetNumberOfSlotsForAlterationType");
static_assert(offsetof(FortAlterableItem_GetNumberOfSlotsForAlterationType, AlterationType) == 0x000000, "Member 'FortAlterableItem_GetNumberOfSlotsForAlterationType::AlterationType' has a wrong offset!");
static_assert(offsetof(FortAlterableItem_GetNumberOfSlotsForAlterationType, ReturnValue) == 0x000004, "Member 'FortAlterableItem_GetNumberOfSlotsForAlterationType::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAlterableItem.GetRating
// 0x0004 (0x0004 - 0x0000)
struct FortAlterableItem_GetRating final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterableItem_GetRating) == 0x000004, "Wrong alignment on FortAlterableItem_GetRating");
static_assert(sizeof(FortAlterableItem_GetRating) == 0x000004, "Wrong size on FortAlterableItem_GetRating");
static_assert(offsetof(FortAlterableItem_GetRating, ReturnValue) == 0x000000, "Member 'FortAlterableItem_GetRating::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTieredCollectionLayout.GetCollectionLayoutDisplayName
// 0x0018 (0x0018 - 0x0000)
struct FortTieredCollectionLayout_GetCollectionLayoutDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTieredCollectionLayout_GetCollectionLayoutDisplayName) == 0x000008, "Wrong alignment on FortTieredCollectionLayout_GetCollectionLayoutDisplayName");
static_assert(sizeof(FortTieredCollectionLayout_GetCollectionLayoutDisplayName) == 0x000018, "Wrong size on FortTieredCollectionLayout_GetCollectionLayoutDisplayName");
static_assert(offsetof(FortTieredCollectionLayout_GetCollectionLayoutDisplayName, ReturnValue) == 0x000000, "Member 'FortTieredCollectionLayout_GetCollectionLayoutDisplayName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTieredCollectionLayout.GetMissionPointsForTier
// 0x0008 (0x0008 - 0x0000)
struct FortTieredCollectionLayout_GetMissionPointsForTier final
{
public:
	int32                                         Tier;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTieredCollectionLayout_GetMissionPointsForTier) == 0x000004, "Wrong alignment on FortTieredCollectionLayout_GetMissionPointsForTier");
static_assert(sizeof(FortTieredCollectionLayout_GetMissionPointsForTier) == 0x000008, "Wrong size on FortTieredCollectionLayout_GetMissionPointsForTier");
static_assert(offsetof(FortTieredCollectionLayout_GetMissionPointsForTier, Tier) == 0x000000, "Member 'FortTieredCollectionLayout_GetMissionPointsForTier::Tier' has a wrong offset!");
static_assert(offsetof(FortTieredCollectionLayout_GetMissionPointsForTier, ReturnValue) == 0x000004, "Member 'FortTieredCollectionLayout_GetMissionPointsForTier::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTieredCollectionLayout.ShouldUseTierAsRandomSeed
// 0x0001 (0x0001 - 0x0000)
struct FortTieredCollectionLayout_ShouldUseTierAsRandomSeed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTieredCollectionLayout_ShouldUseTierAsRandomSeed) == 0x000001, "Wrong alignment on FortTieredCollectionLayout_ShouldUseTierAsRandomSeed");
static_assert(sizeof(FortTieredCollectionLayout_ShouldUseTierAsRandomSeed) == 0x000001, "Wrong size on FortTieredCollectionLayout_ShouldUseTierAsRandomSeed");
static_assert(offsetof(FortTieredCollectionLayout_ShouldUseTierAsRandomSeed, ReturnValue) == 0x000000, "Member 'FortTieredCollectionLayout_ShouldUseTierAsRandomSeed::ReturnValue' has a wrong offset!");

// Function FortniteGame.DeployableBaseCore.GetSimpleDeathFXTransform
// 0x0030 (0x0030 - 0x0000)
struct DeployableBaseCore_GetSimpleDeathFXTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeployableBaseCore_GetSimpleDeathFXTransform) == 0x000010, "Wrong alignment on DeployableBaseCore_GetSimpleDeathFXTransform");
static_assert(sizeof(DeployableBaseCore_GetSimpleDeathFXTransform) == 0x000030, "Wrong size on DeployableBaseCore_GetSimpleDeathFXTransform");
static_assert(offsetof(DeployableBaseCore_GetSimpleDeathFXTransform, ReturnValue) == 0x000000, "Member 'DeployableBaseCore_GetSimpleDeathFXTransform::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponRangedItemDefinitionTooltip.GetNumericValue
// 0x0028 (0x0028 - 0x0000)
struct FortWeaponRangedItemDefinitionTooltip_GetNumericValue final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVal;                                            // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortWeaponRangedItemDefinitionTooltip_GetNumericValue) == 0x000008, "Wrong alignment on FortWeaponRangedItemDefinitionTooltip_GetNumericValue");
static_assert(sizeof(FortWeaponRangedItemDefinitionTooltip_GetNumericValue) == 0x000028, "Wrong size on FortWeaponRangedItemDefinitionTooltip_GetNumericValue");
static_assert(offsetof(FortWeaponRangedItemDefinitionTooltip_GetNumericValue, ObjectToDescribe) == 0x000000, "Member 'FortWeaponRangedItemDefinitionTooltip_GetNumericValue::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortWeaponRangedItemDefinitionTooltip_GetNumericValue, Tag) == 0x000008, "Member 'FortWeaponRangedItemDefinitionTooltip_GetNumericValue::Tag' has a wrong offset!");
static_assert(offsetof(FortWeaponRangedItemDefinitionTooltip_GetNumericValue, Context) == 0x000010, "Member 'FortWeaponRangedItemDefinitionTooltip_GetNumericValue::Context' has a wrong offset!");
static_assert(offsetof(FortWeaponRangedItemDefinitionTooltip_GetNumericValue, Token) == 0x000018, "Member 'FortWeaponRangedItemDefinitionTooltip_GetNumericValue::Token' has a wrong offset!");
static_assert(offsetof(FortWeaponRangedItemDefinitionTooltip_GetNumericValue, OutVal) == 0x000020, "Member 'FortWeaponRangedItemDefinitionTooltip_GetNumericValue::OutVal' has a wrong offset!");
static_assert(offsetof(FortWeaponRangedItemDefinitionTooltip_GetNumericValue, ReturnValue) == 0x000024, "Member 'FortWeaponRangedItemDefinitionTooltip_GetNumericValue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponRangedItemDefinitionTooltip.GetTextForToken
// 0x0040 (0x0040 - 0x0000)
struct FortWeaponRangedItemDefinitionTooltip_GetTextForToken final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortWeaponRangedItemDefinitionTooltip_GetTextForToken) == 0x000008, "Wrong alignment on FortWeaponRangedItemDefinitionTooltip_GetTextForToken");
static_assert(sizeof(FortWeaponRangedItemDefinitionTooltip_GetTextForToken) == 0x000040, "Wrong size on FortWeaponRangedItemDefinitionTooltip_GetTextForToken");
static_assert(offsetof(FortWeaponRangedItemDefinitionTooltip_GetTextForToken, ObjectToDescribe) == 0x000000, "Member 'FortWeaponRangedItemDefinitionTooltip_GetTextForToken::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortWeaponRangedItemDefinitionTooltip_GetTextForToken, Tag) == 0x000008, "Member 'FortWeaponRangedItemDefinitionTooltip_GetTextForToken::Tag' has a wrong offset!");
static_assert(offsetof(FortWeaponRangedItemDefinitionTooltip_GetTextForToken, Context) == 0x000010, "Member 'FortWeaponRangedItemDefinitionTooltip_GetTextForToken::Context' has a wrong offset!");
static_assert(offsetof(FortWeaponRangedItemDefinitionTooltip_GetTextForToken, Token) == 0x000018, "Member 'FortWeaponRangedItemDefinitionTooltip_GetTextForToken::Token' has a wrong offset!");
static_assert(offsetof(FortWeaponRangedItemDefinitionTooltip_GetTextForToken, OutText) == 0x000020, "Member 'FortWeaponRangedItemDefinitionTooltip_GetTextForToken::OutText' has a wrong offset!");
static_assert(offsetof(FortWeaponRangedItemDefinitionTooltip_GetTextForToken, ReturnValue) == 0x000038, "Member 'FortWeaponRangedItemDefinitionTooltip_GetTextForToken::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponRangedItemDefinitionTooltip.GetTokenizedDescriptionText
// 0x0030 (0x0030 - 0x0000)
struct FortWeaponRangedItemDefinitionTooltip_GetTokenizedDescriptionText final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           OutDescription;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortWeaponRangedItemDefinitionTooltip_GetTokenizedDescriptionText) == 0x000008, "Wrong alignment on FortWeaponRangedItemDefinitionTooltip_GetTokenizedDescriptionText");
static_assert(sizeof(FortWeaponRangedItemDefinitionTooltip_GetTokenizedDescriptionText) == 0x000030, "Wrong size on FortWeaponRangedItemDefinitionTooltip_GetTokenizedDescriptionText");
static_assert(offsetof(FortWeaponRangedItemDefinitionTooltip_GetTokenizedDescriptionText, ObjectToDescribe) == 0x000000, "Member 'FortWeaponRangedItemDefinitionTooltip_GetTokenizedDescriptionText::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortWeaponRangedItemDefinitionTooltip_GetTokenizedDescriptionText, Tag) == 0x000008, "Member 'FortWeaponRangedItemDefinitionTooltip_GetTokenizedDescriptionText::Tag' has a wrong offset!");
static_assert(offsetof(FortWeaponRangedItemDefinitionTooltip_GetTokenizedDescriptionText, Context) == 0x000010, "Member 'FortWeaponRangedItemDefinitionTooltip_GetTokenizedDescriptionText::Context' has a wrong offset!");
static_assert(offsetof(FortWeaponRangedItemDefinitionTooltip_GetTokenizedDescriptionText, OutDescription) == 0x000018, "Member 'FortWeaponRangedItemDefinitionTooltip_GetTokenizedDescriptionText::OutDescription' has a wrong offset!");
static_assert(offsetof(FortWeaponRangedItemDefinitionTooltip_GetTokenizedDescriptionText, ReturnValue) == 0x000028, "Member 'FortWeaponRangedItemDefinitionTooltip_GetTokenizedDescriptionText::ReturnValue' has a wrong offset!");

// Function FortniteGame.DeployableBasePlot.GetPlayerStart
// 0x0008 (0x0008 - 0x0000)
struct DeployableBasePlot_GetPlayerStart final
{
public:
	class AFortPlayerStart*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeployableBasePlot_GetPlayerStart) == 0x000008, "Wrong alignment on DeployableBasePlot_GetPlayerStart");
static_assert(sizeof(DeployableBasePlot_GetPlayerStart) == 0x000008, "Wrong size on DeployableBasePlot_GetPlayerStart");
static_assert(offsetof(DeployableBasePlot_GetPlayerStart, ReturnValue) == 0x000000, "Member 'DeployableBasePlot_GetPlayerStart::ReturnValue' has a wrong offset!");

// Function FortniteGame.DeployableBasePlot.HandleBuildingStateTransition
// 0x0002 (0x0002 - 0x0000)
struct DeployableBasePlot_HandleBuildingStateTransition final
{
public:
	EDeployableBaseBuildingState                  InPreviousState;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDeployableBaseBuildingState                  InCurrentState;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeployableBasePlot_HandleBuildingStateTransition) == 0x000001, "Wrong alignment on DeployableBasePlot_HandleBuildingStateTransition");
static_assert(sizeof(DeployableBasePlot_HandleBuildingStateTransition) == 0x000002, "Wrong size on DeployableBasePlot_HandleBuildingStateTransition");
static_assert(offsetof(DeployableBasePlot_HandleBuildingStateTransition, InPreviousState) == 0x000000, "Member 'DeployableBasePlot_HandleBuildingStateTransition::InPreviousState' has a wrong offset!");
static_assert(offsetof(DeployableBasePlot_HandleBuildingStateTransition, InCurrentState) == 0x000001, "Member 'DeployableBasePlot_HandleBuildingStateTransition::InCurrentState' has a wrong offset!");

// Function FortniteGame.DeployableBasePlot.OnBuildingStateTransition
// 0x0002 (0x0002 - 0x0000)
struct DeployableBasePlot_OnBuildingStateTransition final
{
public:
	EDeployableBaseBuildingState                  InPreviousState;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDeployableBaseBuildingState                  InCurrentState;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeployableBasePlot_OnBuildingStateTransition) == 0x000001, "Wrong alignment on DeployableBasePlot_OnBuildingStateTransition");
static_assert(sizeof(DeployableBasePlot_OnBuildingStateTransition) == 0x000002, "Wrong size on DeployableBasePlot_OnBuildingStateTransition");
static_assert(offsetof(DeployableBasePlot_OnBuildingStateTransition, InPreviousState) == 0x000000, "Member 'DeployableBasePlot_OnBuildingStateTransition::InPreviousState' has a wrong offset!");
static_assert(offsetof(DeployableBasePlot_OnBuildingStateTransition, InCurrentState) == 0x000001, "Member 'DeployableBasePlot_OnBuildingStateTransition::InCurrentState' has a wrong offset!");

// Function FortniteGame.DeployableBasePlot.OnCurrentBuildingStateSet
// 0x0001 (0x0001 - 0x0000)
struct DeployableBasePlot_OnCurrentBuildingStateSet final
{
public:
	EDeployableBaseBuildingState                  InCurrentBuildingState;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeployableBasePlot_OnCurrentBuildingStateSet) == 0x000001, "Wrong alignment on DeployableBasePlot_OnCurrentBuildingStateSet");
static_assert(sizeof(DeployableBasePlot_OnCurrentBuildingStateSet) == 0x000001, "Wrong size on DeployableBasePlot_OnCurrentBuildingStateSet");
static_assert(offsetof(DeployableBasePlot_OnCurrentBuildingStateSet, InCurrentBuildingState) == 0x000000, "Member 'DeployableBasePlot_OnCurrentBuildingStateSet::InCurrentBuildingState' has a wrong offset!");

// Function FortniteGame.DeployableBasePlot.GetNumOfItemsInPlot
// 0x0004 (0x0004 - 0x0000)
struct DeployableBasePlot_GetNumOfItemsInPlot final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeployableBasePlot_GetNumOfItemsInPlot) == 0x000004, "Wrong alignment on DeployableBasePlot_GetNumOfItemsInPlot");
static_assert(sizeof(DeployableBasePlot_GetNumOfItemsInPlot) == 0x000004, "Wrong size on DeployableBasePlot_GetNumOfItemsInPlot");
static_assert(offsetof(DeployableBasePlot_GetNumOfItemsInPlot, ReturnValue) == 0x000000, "Member 'DeployableBasePlot_GetNumOfItemsInPlot::ReturnValue' has a wrong offset!");

// Function FortniteGame.DeployableBasePlot.GetOccupantNetID
// 0x0028 (0x0028 - 0x0000)
struct DeployableBasePlot_GetOccupantNetID final
{
public:
	struct FUniqueNetIdRepl                       ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeployableBasePlot_GetOccupantNetID) == 0x000008, "Wrong alignment on DeployableBasePlot_GetOccupantNetID");
static_assert(sizeof(DeployableBasePlot_GetOccupantNetID) == 0x000028, "Wrong size on DeployableBasePlot_GetOccupantNetID");
static_assert(offsetof(DeployableBasePlot_GetOccupantNetID, ReturnValue) == 0x000000, "Member 'DeployableBasePlot_GetOccupantNetID::ReturnValue' has a wrong offset!");

// Function FortniteGame.DeployableBasePlot.IsBuildingActorWithinBuildableSpace
// 0x0018 (0x0018 - 0x0000)
struct DeployableBasePlot_IsBuildingActorWithinBuildableSpace final
{
public:
	const class ABuildingActor*                   ActorToCheck;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GridLocation;                                      // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DeployableBasePlot_IsBuildingActorWithinBuildableSpace) == 0x000008, "Wrong alignment on DeployableBasePlot_IsBuildingActorWithinBuildableSpace");
static_assert(sizeof(DeployableBasePlot_IsBuildingActorWithinBuildableSpace) == 0x000018, "Wrong size on DeployableBasePlot_IsBuildingActorWithinBuildableSpace");
static_assert(offsetof(DeployableBasePlot_IsBuildingActorWithinBuildableSpace, ActorToCheck) == 0x000000, "Member 'DeployableBasePlot_IsBuildingActorWithinBuildableSpace::ActorToCheck' has a wrong offset!");
static_assert(offsetof(DeployableBasePlot_IsBuildingActorWithinBuildableSpace, GridLocation) == 0x000008, "Member 'DeployableBasePlot_IsBuildingActorWithinBuildableSpace::GridLocation' has a wrong offset!");
static_assert(offsetof(DeployableBasePlot_IsBuildingActorWithinBuildableSpace, ReturnValue) == 0x000014, "Member 'DeployableBasePlot_IsBuildingActorWithinBuildableSpace::ReturnValue' has a wrong offset!");

// Function FortniteGame.DeployableBasePlot.IsOccupant
// 0x0030 (0x0030 - 0x0000)
struct DeployableBasePlot_IsOccupant final
{
public:
	struct FUniqueNetIdRepl                       UserId;                                            // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DeployableBasePlot_IsOccupant) == 0x000008, "Wrong alignment on DeployableBasePlot_IsOccupant");
static_assert(sizeof(DeployableBasePlot_IsOccupant) == 0x000030, "Wrong size on DeployableBasePlot_IsOccupant");
static_assert(offsetof(DeployableBasePlot_IsOccupant, UserId) == 0x000000, "Member 'DeployableBasePlot_IsOccupant::UserId' has a wrong offset!");
static_assert(offsetof(DeployableBasePlot_IsOccupant, ReturnValue) == 0x000028, "Member 'DeployableBasePlot_IsOccupant::ReturnValue' has a wrong offset!");

// Function FortniteGame.DeployableBasePlot.IsOccupied
// 0x0001 (0x0001 - 0x0000)
struct DeployableBasePlot_IsOccupied final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeployableBasePlot_IsOccupied) == 0x000001, "Wrong alignment on DeployableBasePlot_IsOccupied");
static_assert(sizeof(DeployableBasePlot_IsOccupied) == 0x000001, "Wrong size on DeployableBasePlot_IsOccupied");
static_assert(offsetof(DeployableBasePlot_IsOccupied, ReturnValue) == 0x000000, "Member 'DeployableBasePlot_IsOccupied::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSaveFileBuildingInstructionsHandler.AreBuildingsLoaded
// 0x0001 (0x0001 - 0x0000)
struct FortSaveFileBuildingInstructionsHandler_AreBuildingsLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSaveFileBuildingInstructionsHandler_AreBuildingsLoaded) == 0x000001, "Wrong alignment on FortSaveFileBuildingInstructionsHandler_AreBuildingsLoaded");
static_assert(sizeof(FortSaveFileBuildingInstructionsHandler_AreBuildingsLoaded) == 0x000001, "Wrong size on FortSaveFileBuildingInstructionsHandler_AreBuildingsLoaded");
static_assert(offsetof(FortSaveFileBuildingInstructionsHandler_AreBuildingsLoaded, ReturnValue) == 0x000000, "Member 'FortSaveFileBuildingInstructionsHandler_AreBuildingsLoaded::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSaveFileBuildingInstructionsHandler.LoadBuildings
// 0x0008 (0x0008 - 0x0000)
struct FortSaveFileBuildingInstructionsHandler_LoadBuildings final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSaveFileBuildingInstructionsHandler_LoadBuildings) == 0x000008, "Wrong alignment on FortSaveFileBuildingInstructionsHandler_LoadBuildings");
static_assert(sizeof(FortSaveFileBuildingInstructionsHandler_LoadBuildings) == 0x000008, "Wrong size on FortSaveFileBuildingInstructionsHandler_LoadBuildings");
static_assert(offsetof(FortSaveFileBuildingInstructionsHandler_LoadBuildings, FortPC) == 0x000000, "Member 'FortSaveFileBuildingInstructionsHandler_LoadBuildings::FortPC' has a wrong offset!");

// Function FortniteGame.FortSaveFileBuildingInstructionsHandler.ResetBuildings
// 0x0001 (0x0001 - 0x0000)
struct FortSaveFileBuildingInstructionsHandler_ResetBuildings final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSaveFileBuildingInstructionsHandler_ResetBuildings) == 0x000001, "Wrong alignment on FortSaveFileBuildingInstructionsHandler_ResetBuildings");
static_assert(sizeof(FortSaveFileBuildingInstructionsHandler_ResetBuildings) == 0x000001, "Wrong size on FortSaveFileBuildingInstructionsHandler_ResetBuildings");
static_assert(offsetof(FortSaveFileBuildingInstructionsHandler_ResetBuildings, ReturnValue) == 0x000000, "Member 'FortSaveFileBuildingInstructionsHandler_ResetBuildings::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSaveFileBuildingInstructionsHandler.SaveBuildings
// 0x0010 (0x0010 - 0x0000)
struct FortSaveFileBuildingInstructionsHandler_SaveBuildings final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSaveFileBuildingInstructionsHandler_SaveBuildings) == 0x000008, "Wrong alignment on FortSaveFileBuildingInstructionsHandler_SaveBuildings");
static_assert(sizeof(FortSaveFileBuildingInstructionsHandler_SaveBuildings) == 0x000010, "Wrong size on FortSaveFileBuildingInstructionsHandler_SaveBuildings");
static_assert(offsetof(FortSaveFileBuildingInstructionsHandler_SaveBuildings, FortPC) == 0x000000, "Member 'FortSaveFileBuildingInstructionsHandler_SaveBuildings::FortPC' has a wrong offset!");
static_assert(offsetof(FortSaveFileBuildingInstructionsHandler_SaveBuildings, ReturnValue) == 0x000008, "Member 'FortSaveFileBuildingInstructionsHandler_SaveBuildings::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTooltipInterface.GetDisplayStats
// 0x0008 (0x0008 - 0x0000)
struct FortTooltipInterface_GetDisplayStats final
{
public:
	class UFortTooltipDisplayStatsList*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTooltipInterface_GetDisplayStats) == 0x000008, "Wrong alignment on FortTooltipInterface_GetDisplayStats");
static_assert(sizeof(FortTooltipInterface_GetDisplayStats) == 0x000008, "Wrong size on FortTooltipInterface_GetDisplayStats");
static_assert(offsetof(FortTooltipInterface_GetDisplayStats, ReturnValue) == 0x000000, "Member 'FortTooltipInterface_GetDisplayStats::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTooltipInterface.GetTooltip
// 0x0008 (0x0008 - 0x0000)
struct FortTooltipInterface_GetTooltip final
{
public:
	TSubclassOf<class UFortTooltip>               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTooltipInterface_GetTooltip) == 0x000008, "Wrong alignment on FortTooltipInterface_GetTooltip");
static_assert(sizeof(FortTooltipInterface_GetTooltip) == 0x000008, "Wrong size on FortTooltipInterface_GetTooltip");
static_assert(offsetof(FortTooltipInterface_GetTooltip, ReturnValue) == 0x000000, "Member 'FortTooltipInterface_GetTooltip::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAlterationItem.GetAlterationDefinitionBP
// 0x0008 (0x0008 - 0x0000)
struct FortAlterationItem_GetAlterationDefinitionBP final
{
public:
	class UFortAlterationItemDefinition*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationItem_GetAlterationDefinitionBP) == 0x000008, "Wrong alignment on FortAlterationItem_GetAlterationDefinitionBP");
static_assert(sizeof(FortAlterationItem_GetAlterationDefinitionBP) == 0x000008, "Wrong size on FortAlterationItem_GetAlterationDefinitionBP");
static_assert(offsetof(FortAlterationItem_GetAlterationDefinitionBP, ReturnValue) == 0x000000, "Member 'FortAlterationItem_GetAlterationDefinitionBP::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityDecoTool.AbilitySpawnDeco
// 0x0030 (0x0030 - 0x0000)
struct FortAbilityDecoTool_AbilitySpawnDeco final
{
public:
	struct FAbilityToolSpawnParameters            SpawnParameters;                                   // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class ABuildingActor*                         ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityDecoTool_AbilitySpawnDeco) == 0x000008, "Wrong alignment on FortAbilityDecoTool_AbilitySpawnDeco");
static_assert(sizeof(FortAbilityDecoTool_AbilitySpawnDeco) == 0x000030, "Wrong size on FortAbilityDecoTool_AbilitySpawnDeco");
static_assert(offsetof(FortAbilityDecoTool_AbilitySpawnDeco, SpawnParameters) == 0x000000, "Member 'FortAbilityDecoTool_AbilitySpawnDeco::SpawnParameters' has a wrong offset!");
static_assert(offsetof(FortAbilityDecoTool_AbilitySpawnDeco, ReturnValue) == 0x000028, "Member 'FortAbilityDecoTool_AbilitySpawnDeco::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityDecoTool.GetPlacementAbilityHandle
// 0x0004 (0x0004 - 0x0000)
struct FortAbilityDecoTool_GetPlacementAbilityHandle final
{
public:
	struct FGameplayAbilitySpecHandle             ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityDecoTool_GetPlacementAbilityHandle) == 0x000004, "Wrong alignment on FortAbilityDecoTool_GetPlacementAbilityHandle");
static_assert(sizeof(FortAbilityDecoTool_GetPlacementAbilityHandle) == 0x000004, "Wrong size on FortAbilityDecoTool_GetPlacementAbilityHandle");
static_assert(offsetof(FortAbilityDecoTool_GetPlacementAbilityHandle, ReturnValue) == 0x000000, "Member 'FortAbilityDecoTool_GetPlacementAbilityHandle::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityDecoTool.GetPlacementAbilityInstance
// 0x0008 (0x0008 - 0x0000)
struct FortAbilityDecoTool_GetPlacementAbilityInstance final
{
public:
	class UFortGameplayAbility*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityDecoTool_GetPlacementAbilityInstance) == 0x000008, "Wrong alignment on FortAbilityDecoTool_GetPlacementAbilityInstance");
static_assert(sizeof(FortAbilityDecoTool_GetPlacementAbilityInstance) == 0x000008, "Wrong size on FortAbilityDecoTool_GetPlacementAbilityInstance");
static_assert(offsetof(FortAbilityDecoTool_GetPlacementAbilityInstance, ReturnValue) == 0x000000, "Member 'FortAbilityDecoTool_GetPlacementAbilityInstance::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityDecoTool.GetSpawnParameters
// 0x0028 (0x0028 - 0x0000)
struct FortAbilityDecoTool_GetSpawnParameters final
{
public:
	struct FAbilityToolSpawnParameters            OutSpawnParamters;                                 // 0x0000(0x0028)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityDecoTool_GetSpawnParameters) == 0x000008, "Wrong alignment on FortAbilityDecoTool_GetSpawnParameters");
static_assert(sizeof(FortAbilityDecoTool_GetSpawnParameters) == 0x000028, "Wrong size on FortAbilityDecoTool_GetSpawnParameters");
static_assert(offsetof(FortAbilityDecoTool_GetSpawnParameters, OutSpawnParamters) == 0x000000, "Member 'FortAbilityDecoTool_GetSpawnParameters::OutSpawnParamters' has a wrong offset!");

// Function FortniteGame.FortAbilityKit.BP_GetGadgets
// 0x0010 (0x0010 - 0x0000)
struct FortAbilityKit_BP_GetGadgets final
{
public:
	TArray<class UFortGadgetItemDefinition*>      GadgetItemDefinitions;                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityKit_BP_GetGadgets) == 0x000008, "Wrong alignment on FortAbilityKit_BP_GetGadgets");
static_assert(sizeof(FortAbilityKit_BP_GetGadgets) == 0x000010, "Wrong size on FortAbilityKit_BP_GetGadgets");
static_assert(offsetof(FortAbilityKit_BP_GetGadgets, GadgetItemDefinitions) == 0x000000, "Member 'FortAbilityKit_BP_GetGadgets::GadgetItemDefinitions' has a wrong offset!");

// Function FortniteGame.FortAbilityKit.GetDescription
// 0x0018 (0x0018 - 0x0000)
struct FortAbilityKit_GetDescription final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityKit_GetDescription) == 0x000008, "Wrong alignment on FortAbilityKit_GetDescription");
static_assert(sizeof(FortAbilityKit_GetDescription) == 0x000018, "Wrong size on FortAbilityKit_GetDescription");
static_assert(offsetof(FortAbilityKit_GetDescription, WorldContextObject) == 0x000000, "Member 'FortAbilityKit_GetDescription::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAbilityKit_GetDescription, ReturnValue) == 0x000008, "Member 'FortAbilityKit_GetDescription::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortScriptedAction.CancelAction
// 0x0001 (0x0001 - 0x0000)
struct FortScriptedAction_CancelAction final
{
public:
	bool                                          bRegisterActionAgain;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortScriptedAction_CancelAction) == 0x000001, "Wrong alignment on FortScriptedAction_CancelAction");
static_assert(sizeof(FortScriptedAction_CancelAction) == 0x000001, "Wrong size on FortScriptedAction_CancelAction");
static_assert(offsetof(FortScriptedAction_CancelAction, bRegisterActionAgain) == 0x000000, "Member 'FortScriptedAction_CancelAction::bRegisterActionAgain' has a wrong offset!");

// Function FortniteGame.FortScriptedAction.CompleteAction
// 0x0001 (0x0001 - 0x0000)
struct FortScriptedAction_CompleteAction final
{
public:
	bool                                          bRegisterActionAgain;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortScriptedAction_CompleteAction) == 0x000001, "Wrong alignment on FortScriptedAction_CompleteAction");
static_assert(sizeof(FortScriptedAction_CompleteAction) == 0x000001, "Wrong size on FortScriptedAction_CompleteAction");
static_assert(offsetof(FortScriptedAction_CompleteAction, bRegisterActionAgain) == 0x000000, "Member 'FortScriptedAction_CompleteAction::bRegisterActionAgain' has a wrong offset!");

// Function FortniteGame.FortScriptedAction.Execute
// 0x0030 (0x0030 - 0x0000)
struct FortScriptedAction_Execute final
{
public:
	struct FFortScriptedActionParams              Params_0;                                          // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortScriptedAction_Execute) == 0x000008, "Wrong alignment on FortScriptedAction_Execute");
static_assert(sizeof(FortScriptedAction_Execute) == 0x000030, "Wrong size on FortScriptedAction_Execute");
static_assert(offsetof(FortScriptedAction_Execute, Params_0) == 0x000000, "Member 'FortScriptedAction_Execute::Params_0' has a wrong offset!");

// Function FortniteGame.FortScriptedAction.GetParams
// 0x0030 (0x0030 - 0x0000)
struct FortScriptedAction_GetParams final
{
public:
	struct FFortScriptedActionParams              Params_0;                                          // 0x0000(0x0030)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortScriptedAction_GetParams) == 0x000008, "Wrong alignment on FortScriptedAction_GetParams");
static_assert(sizeof(FortScriptedAction_GetParams) == 0x000030, "Wrong size on FortScriptedAction_GetParams");
static_assert(offsetof(FortScriptedAction_GetParams, Params_0) == 0x000000, "Member 'FortScriptedAction_GetParams::Params_0' has a wrong offset!");

// Function FortniteGame.FortScriptedAction.CanExecute
// 0x0038 (0x0038 - 0x0000)
struct FortScriptedAction_CanExecute final
{
public:
	struct FFortScriptedActionParams              Params_0;                                          // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortScriptedAction_CanExecute) == 0x000008, "Wrong alignment on FortScriptedAction_CanExecute");
static_assert(sizeof(FortScriptedAction_CanExecute) == 0x000038, "Wrong size on FortScriptedAction_CanExecute");
static_assert(offsetof(FortScriptedAction_CanExecute, Params_0) == 0x000000, "Member 'FortScriptedAction_CanExecute::Params_0' has a wrong offset!");
static_assert(offsetof(FortScriptedAction_CanExecute, ReturnValue) == 0x000030, "Member 'FortScriptedAction_CanExecute::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityKitTooltip.GetTextForToken
// 0x0040 (0x0040 - 0x0000)
struct FortAbilityKitTooltip_GetTextForToken final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAbilityKitTooltip_GetTextForToken) == 0x000008, "Wrong alignment on FortAbilityKitTooltip_GetTextForToken");
static_assert(sizeof(FortAbilityKitTooltip_GetTextForToken) == 0x000040, "Wrong size on FortAbilityKitTooltip_GetTextForToken");
static_assert(offsetof(FortAbilityKitTooltip_GetTextForToken, ObjectToDescribe) == 0x000000, "Member 'FortAbilityKitTooltip_GetTextForToken::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortAbilityKitTooltip_GetTextForToken, Tag) == 0x000008, "Member 'FortAbilityKitTooltip_GetTextForToken::Tag' has a wrong offset!");
static_assert(offsetof(FortAbilityKitTooltip_GetTextForToken, Context) == 0x000010, "Member 'FortAbilityKitTooltip_GetTextForToken::Context' has a wrong offset!");
static_assert(offsetof(FortAbilityKitTooltip_GetTextForToken, Token) == 0x000018, "Member 'FortAbilityKitTooltip_GetTextForToken::Token' has a wrong offset!");
static_assert(offsetof(FortAbilityKitTooltip_GetTextForToken, OutText) == 0x000020, "Member 'FortAbilityKitTooltip_GetTextForToken::OutText' has a wrong offset!");
static_assert(offsetof(FortAbilityKitTooltip_GetTextForToken, ReturnValue) == 0x000038, "Member 'FortAbilityKitTooltip_GetTextForToken::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityKitTooltip.GetTokenizedDescriptionText
// 0x0030 (0x0030 - 0x0000)
struct FortAbilityKitTooltip_GetTokenizedDescriptionText final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           OutDescription;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAbilityKitTooltip_GetTokenizedDescriptionText) == 0x000008, "Wrong alignment on FortAbilityKitTooltip_GetTokenizedDescriptionText");
static_assert(sizeof(FortAbilityKitTooltip_GetTokenizedDescriptionText) == 0x000030, "Wrong size on FortAbilityKitTooltip_GetTokenizedDescriptionText");
static_assert(offsetof(FortAbilityKitTooltip_GetTokenizedDescriptionText, ObjectToDescribe) == 0x000000, "Member 'FortAbilityKitTooltip_GetTokenizedDescriptionText::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortAbilityKitTooltip_GetTokenizedDescriptionText, Tag) == 0x000008, "Member 'FortAbilityKitTooltip_GetTokenizedDescriptionText::Tag' has a wrong offset!");
static_assert(offsetof(FortAbilityKitTooltip_GetTokenizedDescriptionText, Context) == 0x000010, "Member 'FortAbilityKitTooltip_GetTokenizedDescriptionText::Context' has a wrong offset!");
static_assert(offsetof(FortAbilityKitTooltip_GetTokenizedDescriptionText, OutDescription) == 0x000018, "Member 'FortAbilityKitTooltip_GetTokenizedDescriptionText::OutDescription' has a wrong offset!");
static_assert(offsetof(FortAbilityKitTooltip_GetTokenizedDescriptionText, ReturnValue) == 0x000028, "Member 'FortAbilityKitTooltip_GetTokenizedDescriptionText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilitySetTooltip.GetTextForToken
// 0x0040 (0x0040 - 0x0000)
struct FortAbilitySetTooltip_GetTextForToken final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAbilitySetTooltip_GetTextForToken) == 0x000008, "Wrong alignment on FortAbilitySetTooltip_GetTextForToken");
static_assert(sizeof(FortAbilitySetTooltip_GetTextForToken) == 0x000040, "Wrong size on FortAbilitySetTooltip_GetTextForToken");
static_assert(offsetof(FortAbilitySetTooltip_GetTextForToken, ObjectToDescribe) == 0x000000, "Member 'FortAbilitySetTooltip_GetTextForToken::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortAbilitySetTooltip_GetTextForToken, Tag) == 0x000008, "Member 'FortAbilitySetTooltip_GetTextForToken::Tag' has a wrong offset!");
static_assert(offsetof(FortAbilitySetTooltip_GetTextForToken, Context) == 0x000010, "Member 'FortAbilitySetTooltip_GetTextForToken::Context' has a wrong offset!");
static_assert(offsetof(FortAbilitySetTooltip_GetTextForToken, Token) == 0x000018, "Member 'FortAbilitySetTooltip_GetTextForToken::Token' has a wrong offset!");
static_assert(offsetof(FortAbilitySetTooltip_GetTextForToken, OutText) == 0x000020, "Member 'FortAbilitySetTooltip_GetTextForToken::OutText' has a wrong offset!");
static_assert(offsetof(FortAbilitySetTooltip_GetTextForToken, ReturnValue) == 0x000038, "Member 'FortAbilitySetTooltip_GetTextForToken::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilitySetTooltip.GetTokenizedDescriptionText
// 0x0030 (0x0030 - 0x0000)
struct FortAbilitySetTooltip_GetTokenizedDescriptionText final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           OutDescription;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAbilitySetTooltip_GetTokenizedDescriptionText) == 0x000008, "Wrong alignment on FortAbilitySetTooltip_GetTokenizedDescriptionText");
static_assert(sizeof(FortAbilitySetTooltip_GetTokenizedDescriptionText) == 0x000030, "Wrong size on FortAbilitySetTooltip_GetTokenizedDescriptionText");
static_assert(offsetof(FortAbilitySetTooltip_GetTokenizedDescriptionText, ObjectToDescribe) == 0x000000, "Member 'FortAbilitySetTooltip_GetTokenizedDescriptionText::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortAbilitySetTooltip_GetTokenizedDescriptionText, Tag) == 0x000008, "Member 'FortAbilitySetTooltip_GetTokenizedDescriptionText::Tag' has a wrong offset!");
static_assert(offsetof(FortAbilitySetTooltip_GetTokenizedDescriptionText, Context) == 0x000010, "Member 'FortAbilitySetTooltip_GetTokenizedDescriptionText::Context' has a wrong offset!");
static_assert(offsetof(FortAbilitySetTooltip_GetTokenizedDescriptionText, OutDescription) == 0x000018, "Member 'FortAbilitySetTooltip_GetTokenizedDescriptionText::OutDescription' has a wrong offset!");
static_assert(offsetof(FortAbilitySetTooltip_GetTokenizedDescriptionText, ReturnValue) == 0x000028, "Member 'FortAbilitySetTooltip_GetTokenizedDescriptionText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortThreatParticleActor.OnThreatCloudsChanged
// 0x0010 (0x0010 - 0x0000)
struct FortThreatParticleActor_OnThreatCloudsChanged final
{
public:
	TArray<struct FThreatLocationInfo>            ThreatLocationInfo;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortThreatParticleActor_OnThreatCloudsChanged) == 0x000008, "Wrong alignment on FortThreatParticleActor_OnThreatCloudsChanged");
static_assert(sizeof(FortThreatParticleActor_OnThreatCloudsChanged) == 0x000010, "Wrong size on FortThreatParticleActor_OnThreatCloudsChanged");
static_assert(offsetof(FortThreatParticleActor_OnThreatCloudsChanged, ThreatLocationInfo) == 0x000000, "Member 'FortThreatParticleActor_OnThreatCloudsChanged::ThreatLocationInfo' has a wrong offset!");

// Function FortniteGame.FortThreatParticleActor.GetThreatClouds
// 0x0010 (0x0010 - 0x0000)
struct FortThreatParticleActor_GetThreatClouds final
{
public:
	TArray<struct FThreatLocationInfo>            ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortThreatParticleActor_GetThreatClouds) == 0x000008, "Wrong alignment on FortThreatParticleActor_GetThreatClouds");
static_assert(sizeof(FortThreatParticleActor_GetThreatClouds) == 0x000010, "Wrong size on FortThreatParticleActor_GetThreatClouds");
static_assert(offsetof(FortThreatParticleActor_GetThreatClouds, ReturnValue) == 0x000000, "Member 'FortThreatParticleActor_GetThreatClouds::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilitySystemComponent.SetLandingMontageReplication
// 0x0020 (0x0020 - 0x0000)
struct FortAbilitySystemComponent_SetLandingMontageReplication final
{
public:
	class UAnimMontage*                           Montage1;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Section1;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Montage2;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Section2;                                          // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilitySystemComponent_SetLandingMontageReplication) == 0x000008, "Wrong alignment on FortAbilitySystemComponent_SetLandingMontageReplication");
static_assert(sizeof(FortAbilitySystemComponent_SetLandingMontageReplication) == 0x000020, "Wrong size on FortAbilitySystemComponent_SetLandingMontageReplication");
static_assert(offsetof(FortAbilitySystemComponent_SetLandingMontageReplication, Montage1) == 0x000000, "Member 'FortAbilitySystemComponent_SetLandingMontageReplication::Montage1' has a wrong offset!");
static_assert(offsetof(FortAbilitySystemComponent_SetLandingMontageReplication, Section1) == 0x000008, "Member 'FortAbilitySystemComponent_SetLandingMontageReplication::Section1' has a wrong offset!");
static_assert(offsetof(FortAbilitySystemComponent_SetLandingMontageReplication, Montage2) == 0x000010, "Member 'FortAbilitySystemComponent_SetLandingMontageReplication::Montage2' has a wrong offset!");
static_assert(offsetof(FortAbilitySystemComponent_SetLandingMontageReplication, Section2) == 0x000018, "Member 'FortAbilitySystemComponent_SetLandingMontageReplication::Section2' has a wrong offset!");

// Function FortniteGame.FortAbilitySystemComponent.CanActivateAbilityWithMatchingTag
// 0x0028 (0x0028 - 0x0000)
struct FortAbilitySystemComponent_CanActivateAbilityWithMatchingTag final
{
public:
	struct FGameplayTagContainer                  GameplayAbilityTags;                               // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAbilitySystemComponent_CanActivateAbilityWithMatchingTag) == 0x000008, "Wrong alignment on FortAbilitySystemComponent_CanActivateAbilityWithMatchingTag");
static_assert(sizeof(FortAbilitySystemComponent_CanActivateAbilityWithMatchingTag) == 0x000028, "Wrong size on FortAbilitySystemComponent_CanActivateAbilityWithMatchingTag");
static_assert(offsetof(FortAbilitySystemComponent_CanActivateAbilityWithMatchingTag, GameplayAbilityTags) == 0x000000, "Member 'FortAbilitySystemComponent_CanActivateAbilityWithMatchingTag::GameplayAbilityTags' has a wrong offset!");
static_assert(offsetof(FortAbilitySystemComponent_CanActivateAbilityWithMatchingTag, ReturnValue) == 0x000020, "Member 'FortAbilitySystemComponent_CanActivateAbilityWithMatchingTag::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilitySystemComponent.FindAttributeInformation
// 0x0020 (0x0020 - 0x0000)
struct FortAbilitySystemComponent_FindAttributeInformation final
{
public:
	class FString                                 AttributeName;                                     // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeInfo                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilitySystemComponent_FindAttributeInformation) == 0x000008, "Wrong alignment on FortAbilitySystemComponent_FindAttributeInformation");
static_assert(sizeof(FortAbilitySystemComponent_FindAttributeInformation) == 0x000020, "Wrong size on FortAbilitySystemComponent_FindAttributeInformation");
static_assert(offsetof(FortAbilitySystemComponent_FindAttributeInformation, AttributeName) == 0x000000, "Member 'FortAbilitySystemComponent_FindAttributeInformation::AttributeName' has a wrong offset!");
static_assert(offsetof(FortAbilitySystemComponent_FindAttributeInformation, ReturnValue) == 0x000010, "Member 'FortAbilitySystemComponent_FindAttributeInformation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilitySystemComponent.GetAttributeMagnitude
// 0x0018 (0x0018 - 0x0000)
struct FortAbilitySystemComponent_GetAttributeMagnitude final
{
public:
	struct FAttributeInfo                         Info;                                              // 0x0000(0x0010)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAbilitySystemComponent_GetAttributeMagnitude) == 0x000008, "Wrong alignment on FortAbilitySystemComponent_GetAttributeMagnitude");
static_assert(sizeof(FortAbilitySystemComponent_GetAttributeMagnitude) == 0x000018, "Wrong size on FortAbilitySystemComponent_GetAttributeMagnitude");
static_assert(offsetof(FortAbilitySystemComponent_GetAttributeMagnitude, Info) == 0x000000, "Member 'FortAbilitySystemComponent_GetAttributeMagnitude::Info' has a wrong offset!");
static_assert(offsetof(FortAbilitySystemComponent_GetAttributeMagnitude, ReturnValue) == 0x000010, "Member 'FortAbilitySystemComponent_GetAttributeMagnitude::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilitySystemComponent.HasActiveAbilityWithAnyMatchingTag
// 0x0028 (0x0028 - 0x0000)
struct FortAbilitySystemComponent_HasActiveAbilityWithAnyMatchingTag final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAbilitySystemComponent_HasActiveAbilityWithAnyMatchingTag) == 0x000008, "Wrong alignment on FortAbilitySystemComponent_HasActiveAbilityWithAnyMatchingTag");
static_assert(sizeof(FortAbilitySystemComponent_HasActiveAbilityWithAnyMatchingTag) == 0x000028, "Wrong size on FortAbilitySystemComponent_HasActiveAbilityWithAnyMatchingTag");
static_assert(offsetof(FortAbilitySystemComponent_HasActiveAbilityWithAnyMatchingTag, Tags) == 0x000000, "Member 'FortAbilitySystemComponent_HasActiveAbilityWithAnyMatchingTag::Tags' has a wrong offset!");
static_assert(offsetof(FortAbilitySystemComponent_HasActiveAbilityWithAnyMatchingTag, ReturnValue) == 0x000020, "Member 'FortAbilitySystemComponent_HasActiveAbilityWithAnyMatchingTag::ReturnValue' has a wrong offset!");

// Function FortniteGame.StrategicBuildingActor.AttemptIncrementLevelUnlockProgress
// 0x000C (0x000C - 0x0000)
struct StrategicBuildingActor_AttemptIncrementLevelUnlockProgress final
{
public:
	int32                                         InLevel;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InProgressDelta;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StrategicBuildingActor_AttemptIncrementLevelUnlockProgress) == 0x000004, "Wrong alignment on StrategicBuildingActor_AttemptIncrementLevelUnlockProgress");
static_assert(sizeof(StrategicBuildingActor_AttemptIncrementLevelUnlockProgress) == 0x00000C, "Wrong size on StrategicBuildingActor_AttemptIncrementLevelUnlockProgress");
static_assert(offsetof(StrategicBuildingActor_AttemptIncrementLevelUnlockProgress, InLevel) == 0x000000, "Member 'StrategicBuildingActor_AttemptIncrementLevelUnlockProgress::InLevel' has a wrong offset!");
static_assert(offsetof(StrategicBuildingActor_AttemptIncrementLevelUnlockProgress, InProgressDelta) == 0x000004, "Member 'StrategicBuildingActor_AttemptIncrementLevelUnlockProgress::InProgressDelta' has a wrong offset!");
static_assert(offsetof(StrategicBuildingActor_AttemptIncrementLevelUnlockProgress, ReturnValue) == 0x000008, "Member 'StrategicBuildingActor_AttemptIncrementLevelUnlockProgress::ReturnValue' has a wrong offset!");

// Function FortniteGame.StrategicBuildingActor.GiveItemFromStrategicBuildingToPlayer
// 0x0018 (0x0018 - 0x0000)
struct StrategicBuildingActor_GiveItemFromStrategicBuildingToPlayer final
{
public:
	class AFortPlayerController*                  PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortWorldItemDefinition*         ItemDefinition;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberToGive;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StrategicBuildingActor_GiveItemFromStrategicBuildingToPlayer) == 0x000008, "Wrong alignment on StrategicBuildingActor_GiveItemFromStrategicBuildingToPlayer");
static_assert(sizeof(StrategicBuildingActor_GiveItemFromStrategicBuildingToPlayer) == 0x000018, "Wrong size on StrategicBuildingActor_GiveItemFromStrategicBuildingToPlayer");
static_assert(offsetof(StrategicBuildingActor_GiveItemFromStrategicBuildingToPlayer, PlayerController) == 0x000000, "Member 'StrategicBuildingActor_GiveItemFromStrategicBuildingToPlayer::PlayerController' has a wrong offset!");
static_assert(offsetof(StrategicBuildingActor_GiveItemFromStrategicBuildingToPlayer, ItemDefinition) == 0x000008, "Member 'StrategicBuildingActor_GiveItemFromStrategicBuildingToPlayer::ItemDefinition' has a wrong offset!");
static_assert(offsetof(StrategicBuildingActor_GiveItemFromStrategicBuildingToPlayer, NumberToGive) == 0x000010, "Member 'StrategicBuildingActor_GiveItemFromStrategicBuildingToPlayer::NumberToGive' has a wrong offset!");

// Function FortniteGame.StrategicBuildingActor.OnActiveStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct StrategicBuildingActor_OnActiveStatusChanged final
{
public:
	bool                                          bNewActiveStatus;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StrategicBuildingActor_OnActiveStatusChanged) == 0x000001, "Wrong alignment on StrategicBuildingActor_OnActiveStatusChanged");
static_assert(sizeof(StrategicBuildingActor_OnActiveStatusChanged) == 0x000001, "Wrong size on StrategicBuildingActor_OnActiveStatusChanged");
static_assert(offsetof(StrategicBuildingActor_OnActiveStatusChanged, bNewActiveStatus) == 0x000000, "Member 'StrategicBuildingActor_OnActiveStatusChanged::bNewActiveStatus' has a wrong offset!");

// Function FortniteGame.StrategicBuildingActor.OnConstructionEndedPlayEffects
// 0x0004 (0x0004 - 0x0000)
struct StrategicBuildingActor_OnConstructionEndedPlayEffects final
{
public:
	int32                                         ConstructionLevel;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StrategicBuildingActor_OnConstructionEndedPlayEffects) == 0x000004, "Wrong alignment on StrategicBuildingActor_OnConstructionEndedPlayEffects");
static_assert(sizeof(StrategicBuildingActor_OnConstructionEndedPlayEffects) == 0x000004, "Wrong size on StrategicBuildingActor_OnConstructionEndedPlayEffects");
static_assert(offsetof(StrategicBuildingActor_OnConstructionEndedPlayEffects, ConstructionLevel) == 0x000000, "Member 'StrategicBuildingActor_OnConstructionEndedPlayEffects::ConstructionLevel' has a wrong offset!");

// Function FortniteGame.StrategicBuildingActor.OnConstructionStartedPlayEffects
// 0x0014 (0x0014 - 0x0000)
struct StrategicBuildingActor_OnConstructionStartedPlayEffects final
{
public:
	float                                         ServerStartTime;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ServerEndTime;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentServerTime;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElapsedPct;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConstructionLvl;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StrategicBuildingActor_OnConstructionStartedPlayEffects) == 0x000004, "Wrong alignment on StrategicBuildingActor_OnConstructionStartedPlayEffects");
static_assert(sizeof(StrategicBuildingActor_OnConstructionStartedPlayEffects) == 0x000014, "Wrong size on StrategicBuildingActor_OnConstructionStartedPlayEffects");
static_assert(offsetof(StrategicBuildingActor_OnConstructionStartedPlayEffects, ServerStartTime) == 0x000000, "Member 'StrategicBuildingActor_OnConstructionStartedPlayEffects::ServerStartTime' has a wrong offset!");
static_assert(offsetof(StrategicBuildingActor_OnConstructionStartedPlayEffects, ServerEndTime) == 0x000004, "Member 'StrategicBuildingActor_OnConstructionStartedPlayEffects::ServerEndTime' has a wrong offset!");
static_assert(offsetof(StrategicBuildingActor_OnConstructionStartedPlayEffects, CurrentServerTime) == 0x000008, "Member 'StrategicBuildingActor_OnConstructionStartedPlayEffects::CurrentServerTime' has a wrong offset!");
static_assert(offsetof(StrategicBuildingActor_OnConstructionStartedPlayEffects, ElapsedPct) == 0x00000C, "Member 'StrategicBuildingActor_OnConstructionStartedPlayEffects::ElapsedPct' has a wrong offset!");
static_assert(offsetof(StrategicBuildingActor_OnConstructionStartedPlayEffects, ConstructionLvl) == 0x000010, "Member 'StrategicBuildingActor_OnConstructionStartedPlayEffects::ConstructionLvl' has a wrong offset!");

// Function FortniteGame.StrategicBuildingActor.OnConstructionTickPlayEffects
// 0x000C (0x000C - 0x0000)
struct StrategicBuildingActor_OnConstructionTickPlayEffects final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElapsedPct;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConstructionLvl;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StrategicBuildingActor_OnConstructionTickPlayEffects) == 0x000004, "Wrong alignment on StrategicBuildingActor_OnConstructionTickPlayEffects");
static_assert(sizeof(StrategicBuildingActor_OnConstructionTickPlayEffects) == 0x00000C, "Wrong size on StrategicBuildingActor_OnConstructionTickPlayEffects");
static_assert(offsetof(StrategicBuildingActor_OnConstructionTickPlayEffects, DeltaTime) == 0x000000, "Member 'StrategicBuildingActor_OnConstructionTickPlayEffects::DeltaTime' has a wrong offset!");
static_assert(offsetof(StrategicBuildingActor_OnConstructionTickPlayEffects, ElapsedPct) == 0x000004, "Member 'StrategicBuildingActor_OnConstructionTickPlayEffects::ElapsedPct' has a wrong offset!");
static_assert(offsetof(StrategicBuildingActor_OnConstructionTickPlayEffects, ConstructionLvl) == 0x000008, "Member 'StrategicBuildingActor_OnConstructionTickPlayEffects::ConstructionLvl' has a wrong offset!");

// Function FortniteGame.StrategicBuildingActor.GetCurrentLevelUnlockProgress
// 0x0008 (0x0008 - 0x0000)
struct StrategicBuildingActor_GetCurrentLevelUnlockProgress final
{
public:
	int32                                         InLevel;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StrategicBuildingActor_GetCurrentLevelUnlockProgress) == 0x000004, "Wrong alignment on StrategicBuildingActor_GetCurrentLevelUnlockProgress");
static_assert(sizeof(StrategicBuildingActor_GetCurrentLevelUnlockProgress) == 0x000008, "Wrong size on StrategicBuildingActor_GetCurrentLevelUnlockProgress");
static_assert(offsetof(StrategicBuildingActor_GetCurrentLevelUnlockProgress, InLevel) == 0x000000, "Member 'StrategicBuildingActor_GetCurrentLevelUnlockProgress::InLevel' has a wrong offset!");
static_assert(offsetof(StrategicBuildingActor_GetCurrentLevelUnlockProgress, ReturnValue) == 0x000004, "Member 'StrategicBuildingActor_GetCurrentLevelUnlockProgress::ReturnValue' has a wrong offset!");

// Function FortniteGame.StrategicBuildingActor.GetDeathEffectsLocation
// 0x000C (0x000C - 0x0000)
struct StrategicBuildingActor_GetDeathEffectsLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StrategicBuildingActor_GetDeathEffectsLocation) == 0x000004, "Wrong alignment on StrategicBuildingActor_GetDeathEffectsLocation");
static_assert(sizeof(StrategicBuildingActor_GetDeathEffectsLocation) == 0x00000C, "Wrong size on StrategicBuildingActor_GetDeathEffectsLocation");
static_assert(offsetof(StrategicBuildingActor_GetDeathEffectsLocation, ReturnValue) == 0x000000, "Member 'StrategicBuildingActor_GetDeathEffectsLocation::ReturnValue' has a wrong offset!");

// Function FortniteGame.StrategicBuildingActor.GetDeathEffectsRotation
// 0x000C (0x000C - 0x0000)
struct StrategicBuildingActor_GetDeathEffectsRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(StrategicBuildingActor_GetDeathEffectsRotation) == 0x000004, "Wrong alignment on StrategicBuildingActor_GetDeathEffectsRotation");
static_assert(sizeof(StrategicBuildingActor_GetDeathEffectsRotation) == 0x00000C, "Wrong size on StrategicBuildingActor_GetDeathEffectsRotation");
static_assert(offsetof(StrategicBuildingActor_GetDeathEffectsRotation, ReturnValue) == 0x000000, "Member 'StrategicBuildingActor_GetDeathEffectsRotation::ReturnValue' has a wrong offset!");

// Function FortniteGame.StrategicBuildingActor.GetDeathEffectsScale
// 0x000C (0x000C - 0x0000)
struct StrategicBuildingActor_GetDeathEffectsScale final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StrategicBuildingActor_GetDeathEffectsScale) == 0x000004, "Wrong alignment on StrategicBuildingActor_GetDeathEffectsScale");
static_assert(sizeof(StrategicBuildingActor_GetDeathEffectsScale) == 0x00000C, "Wrong size on StrategicBuildingActor_GetDeathEffectsScale");
static_assert(offsetof(StrategicBuildingActor_GetDeathEffectsScale, ReturnValue) == 0x000000, "Member 'StrategicBuildingActor_GetDeathEffectsScale::ReturnValue' has a wrong offset!");

// Function FortniteGame.StrategicBuildingActor.GetMaxLevelUnlockProgress
// 0x0008 (0x0008 - 0x0000)
struct StrategicBuildingActor_GetMaxLevelUnlockProgress final
{
public:
	int32                                         InLevel;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StrategicBuildingActor_GetMaxLevelUnlockProgress) == 0x000004, "Wrong alignment on StrategicBuildingActor_GetMaxLevelUnlockProgress");
static_assert(sizeof(StrategicBuildingActor_GetMaxLevelUnlockProgress) == 0x000008, "Wrong size on StrategicBuildingActor_GetMaxLevelUnlockProgress");
static_assert(offsetof(StrategicBuildingActor_GetMaxLevelUnlockProgress, InLevel) == 0x000000, "Member 'StrategicBuildingActor_GetMaxLevelUnlockProgress::InLevel' has a wrong offset!");
static_assert(offsetof(StrategicBuildingActor_GetMaxLevelUnlockProgress, ReturnValue) == 0x000004, "Member 'StrategicBuildingActor_GetMaxLevelUnlockProgress::ReturnValue' has a wrong offset!");

// Function FortniteGame.StrategicBuildingActor.IsActive
// 0x0001 (0x0001 - 0x0000)
struct StrategicBuildingActor_IsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StrategicBuildingActor_IsActive) == 0x000001, "Wrong alignment on StrategicBuildingActor_IsActive");
static_assert(sizeof(StrategicBuildingActor_IsActive) == 0x000001, "Wrong size on StrategicBuildingActor_IsActive");
static_assert(offsetof(StrategicBuildingActor_IsActive, ReturnValue) == 0x000000, "Member 'StrategicBuildingActor_IsActive::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTooltipContext.SpawnTooltipContext
// 0x0008 (0x0008 - 0x0000)
struct FortTooltipContext_SpawnTooltipContext final
{
public:
	class UFortTooltipContext*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTooltipContext_SpawnTooltipContext) == 0x000008, "Wrong alignment on FortTooltipContext_SpawnTooltipContext");
static_assert(sizeof(FortTooltipContext_SpawnTooltipContext) == 0x000008, "Wrong size on FortTooltipContext_SpawnTooltipContext");
static_assert(offsetof(FortTooltipContext_SpawnTooltipContext, ReturnValue) == 0x000000, "Member 'FortTooltipContext_SpawnTooltipContext::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTooltipContext.SpawnTooltipContextWithNetID
// 0x0038 (0x0038 - 0x0000)
struct FortTooltipContext_SpawnTooltipContextWithNetID final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       UniqueId;                                          // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortTooltipContext*                    ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTooltipContext_SpawnTooltipContextWithNetID) == 0x000008, "Wrong alignment on FortTooltipContext_SpawnTooltipContextWithNetID");
static_assert(sizeof(FortTooltipContext_SpawnTooltipContextWithNetID) == 0x000038, "Wrong size on FortTooltipContext_SpawnTooltipContextWithNetID");
static_assert(offsetof(FortTooltipContext_SpawnTooltipContextWithNetID, WorldContextObject) == 0x000000, "Member 'FortTooltipContext_SpawnTooltipContextWithNetID::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortTooltipContext_SpawnTooltipContextWithNetID, UniqueId) == 0x000008, "Member 'FortTooltipContext_SpawnTooltipContextWithNetID::UniqueId' has a wrong offset!");
static_assert(offsetof(FortTooltipContext_SpawnTooltipContextWithNetID, ReturnValue) == 0x000030, "Member 'FortTooltipContext_SpawnTooltipContextWithNetID::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTooltipContext.SpawnTooltipContextWithSource
// 0x0010 (0x0010 - 0x0000)
struct FortTooltipContext_SpawnTooltipContextWithSource final
{
public:
	class APlayerController*                      SourcePlayerController;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortTooltipContext*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTooltipContext_SpawnTooltipContextWithSource) == 0x000008, "Wrong alignment on FortTooltipContext_SpawnTooltipContextWithSource");
static_assert(sizeof(FortTooltipContext_SpawnTooltipContextWithSource) == 0x000010, "Wrong size on FortTooltipContext_SpawnTooltipContextWithSource");
static_assert(offsetof(FortTooltipContext_SpawnTooltipContextWithSource, SourcePlayerController) == 0x000000, "Member 'FortTooltipContext_SpawnTooltipContextWithSource::SourcePlayerController' has a wrong offset!");
static_assert(offsetof(FortTooltipContext_SpawnTooltipContextWithSource, ReturnValue) == 0x000008, "Member 'FortTooltipContext_SpawnTooltipContextWithSource::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionPowerPointsInterface.GetAvailabilityWeight
// 0x0008 (0x0008 - 0x0000)
struct FortMissionPowerPointsInterface_GetAvailabilityWeight final
{
public:
	float                                         DifficultyLevel;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionPowerPointsInterface_GetAvailabilityWeight) == 0x000004, "Wrong alignment on FortMissionPowerPointsInterface_GetAvailabilityWeight");
static_assert(sizeof(FortMissionPowerPointsInterface_GetAvailabilityWeight) == 0x000008, "Wrong size on FortMissionPowerPointsInterface_GetAvailabilityWeight");
static_assert(offsetof(FortMissionPowerPointsInterface_GetAvailabilityWeight, DifficultyLevel) == 0x000000, "Member 'FortMissionPowerPointsInterface_GetAvailabilityWeight::DifficultyLevel' has a wrong offset!");
static_assert(offsetof(FortMissionPowerPointsInterface_GetAvailabilityWeight, ReturnValue) == 0x000004, "Member 'FortMissionPowerPointsInterface_GetAvailabilityWeight::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionPowerPointsInterface.GetInitialRangeLerpValue
// 0x0008 (0x0008 - 0x0000)
struct FortMissionPowerPointsInterface_GetInitialRangeLerpValue final
{
public:
	float                                         PointsAvailable;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionPowerPointsInterface_GetInitialRangeLerpValue) == 0x000004, "Wrong alignment on FortMissionPowerPointsInterface_GetInitialRangeLerpValue");
static_assert(sizeof(FortMissionPowerPointsInterface_GetInitialRangeLerpValue) == 0x000008, "Wrong size on FortMissionPowerPointsInterface_GetInitialRangeLerpValue");
static_assert(offsetof(FortMissionPowerPointsInterface_GetInitialRangeLerpValue, PointsAvailable) == 0x000000, "Member 'FortMissionPowerPointsInterface_GetInitialRangeLerpValue::PointsAvailable' has a wrong offset!");
static_assert(offsetof(FortMissionPowerPointsInterface_GetInitialRangeLerpValue, ReturnValue) == 0x000004, "Member 'FortMissionPowerPointsInterface_GetInitialRangeLerpValue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionPowerPointsInterface.GetMaxRangeLerpValue
// 0x000C (0x000C - 0x0000)
struct FortMissionPowerPointsInterface_GetMaxRangeLerpValue final
{
public:
	float                                         PointsAvailable;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviousLerpValue;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionPowerPointsInterface_GetMaxRangeLerpValue) == 0x000004, "Wrong alignment on FortMissionPowerPointsInterface_GetMaxRangeLerpValue");
static_assert(sizeof(FortMissionPowerPointsInterface_GetMaxRangeLerpValue) == 0x00000C, "Wrong size on FortMissionPowerPointsInterface_GetMaxRangeLerpValue");
static_assert(offsetof(FortMissionPowerPointsInterface_GetMaxRangeLerpValue, PointsAvailable) == 0x000000, "Member 'FortMissionPowerPointsInterface_GetMaxRangeLerpValue::PointsAvailable' has a wrong offset!");
static_assert(offsetof(FortMissionPowerPointsInterface_GetMaxRangeLerpValue, PreviousLerpValue) == 0x000004, "Member 'FortMissionPowerPointsInterface_GetMaxRangeLerpValue::PreviousLerpValue' has a wrong offset!");
static_assert(offsetof(FortMissionPowerPointsInterface_GetMaxRangeLerpValue, ReturnValue) == 0x000008, "Member 'FortMissionPowerPointsInterface_GetMaxRangeLerpValue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionPowerPointsInterface.GetPowerPointsCost
// 0x0008 (0x0008 - 0x0000)
struct FortMissionPowerPointsInterface_GetPowerPointsCost final
{
public:
	float                                         LerpValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionPowerPointsInterface_GetPowerPointsCost) == 0x000004, "Wrong alignment on FortMissionPowerPointsInterface_GetPowerPointsCost");
static_assert(sizeof(FortMissionPowerPointsInterface_GetPowerPointsCost) == 0x000008, "Wrong size on FortMissionPowerPointsInterface_GetPowerPointsCost");
static_assert(offsetof(FortMissionPowerPointsInterface_GetPowerPointsCost, LerpValue) == 0x000000, "Member 'FortMissionPowerPointsInterface_GetPowerPointsCost::LerpValue' has a wrong offset!");
static_assert(offsetof(FortMissionPowerPointsInterface_GetPowerPointsCost, ReturnValue) == 0x000004, "Member 'FortMissionPowerPointsInterface_GetPowerPointsCost::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilitySystemComponentTooltipContext.SpawnAbilitySystemTooltipContext
// 0x0008 (0x0008 - 0x0000)
struct FortAbilitySystemComponentTooltipContext_SpawnAbilitySystemTooltipContext final
{
public:
	class UFortAbilitySystemComponentTooltipContext* ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilitySystemComponentTooltipContext_SpawnAbilitySystemTooltipContext) == 0x000008, "Wrong alignment on FortAbilitySystemComponentTooltipContext_SpawnAbilitySystemTooltipContext");
static_assert(sizeof(FortAbilitySystemComponentTooltipContext_SpawnAbilitySystemTooltipContext) == 0x000008, "Wrong size on FortAbilitySystemComponentTooltipContext_SpawnAbilitySystemTooltipContext");
static_assert(offsetof(FortAbilitySystemComponentTooltipContext_SpawnAbilitySystemTooltipContext, ReturnValue) == 0x000000, "Member 'FortAbilitySystemComponentTooltipContext_SpawnAbilitySystemTooltipContext::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilitySystemComponentTooltipContext.SpawnAbilitySystemTooltipContextFromOtherContext
// 0x0010 (0x0010 - 0x0000)
struct FortAbilitySystemComponentTooltipContext_SpawnAbilitySystemTooltipContextFromOtherContext final
{
public:
	const class UFortTooltipContext*              OtherContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAbilitySystemComponentTooltipContext* ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilitySystemComponentTooltipContext_SpawnAbilitySystemTooltipContextFromOtherContext) == 0x000008, "Wrong alignment on FortAbilitySystemComponentTooltipContext_SpawnAbilitySystemTooltipContextFromOtherContext");
static_assert(sizeof(FortAbilitySystemComponentTooltipContext_SpawnAbilitySystemTooltipContextFromOtherContext) == 0x000010, "Wrong size on FortAbilitySystemComponentTooltipContext_SpawnAbilitySystemTooltipContextFromOtherContext");
static_assert(offsetof(FortAbilitySystemComponentTooltipContext_SpawnAbilitySystemTooltipContextFromOtherContext, OtherContext) == 0x000000, "Member 'FortAbilitySystemComponentTooltipContext_SpawnAbilitySystemTooltipContextFromOtherContext::OtherContext' has a wrong offset!");
static_assert(offsetof(FortAbilitySystemComponentTooltipContext_SpawnAbilitySystemTooltipContextFromOtherContext, ReturnValue) == 0x000008, "Member 'FortAbilitySystemComponentTooltipContext_SpawnAbilitySystemTooltipContextFromOtherContext::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.SpawnAtPlacementActorsAsArray
// 0x0020 (0x0020 - 0x0000)
struct FortMission_SpawnAtPlacementActorsAsArray final
{
public:
	class AFortMission*                           Mission;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSucceeded;                                        // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_SpawnAtPlacementActorsAsArray) == 0x000008, "Wrong alignment on FortMission_SpawnAtPlacementActorsAsArray");
static_assert(sizeof(FortMission_SpawnAtPlacementActorsAsArray) == 0x000020, "Wrong size on FortMission_SpawnAtPlacementActorsAsArray");
static_assert(offsetof(FortMission_SpawnAtPlacementActorsAsArray, Mission) == 0x000000, "Member 'FortMission_SpawnAtPlacementActorsAsArray::Mission' has a wrong offset!");
static_assert(offsetof(FortMission_SpawnAtPlacementActorsAsArray, bSucceeded) == 0x000008, "Member 'FortMission_SpawnAtPlacementActorsAsArray::bSucceeded' has a wrong offset!");
static_assert(offsetof(FortMission_SpawnAtPlacementActorsAsArray, ReturnValue) == 0x000010, "Member 'FortMission_SpawnAtPlacementActorsAsArray::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.AddCompletionTag
// 0x0008 (0x0008 - 0x0000)
struct FortMission_AddCompletionTag final
{
public:
	struct FGameplayTag                           NewCompletionTag;                                  // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_AddCompletionTag) == 0x000008, "Wrong alignment on FortMission_AddCompletionTag");
static_assert(sizeof(FortMission_AddCompletionTag) == 0x000008, "Wrong size on FortMission_AddCompletionTag");
static_assert(offsetof(FortMission_AddCompletionTag, NewCompletionTag) == 0x000000, "Member 'FortMission_AddCompletionTag::NewCompletionTag' has a wrong offset!");

// Function FortniteGame.FortMission.AddCompletionTags
// 0x0020 (0x0020 - 0x0000)
struct FortMission_AddCompletionTags final
{
public:
	struct FGameplayTagContainer                  NewCompletionTagContainer;                         // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_AddCompletionTags) == 0x000008, "Wrong alignment on FortMission_AddCompletionTags");
static_assert(sizeof(FortMission_AddCompletionTags) == 0x000020, "Wrong size on FortMission_AddCompletionTags");
static_assert(offsetof(FortMission_AddCompletionTags, NewCompletionTagContainer) == 0x000000, "Member 'FortMission_AddCompletionTags::NewCompletionTagContainer' has a wrong offset!");

// Function FortniteGame.FortMission.AddGoalsToAssignment
// 0x0018 (0x0018 - 0x0000)
struct FortMission_AddGoalsToAssignment final
{
public:
	class UFortAIAssignment*                      Assignment;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortAIGoalInfo>                GoalInfos;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_AddGoalsToAssignment) == 0x000008, "Wrong alignment on FortMission_AddGoalsToAssignment");
static_assert(sizeof(FortMission_AddGoalsToAssignment) == 0x000018, "Wrong size on FortMission_AddGoalsToAssignment");
static_assert(offsetof(FortMission_AddGoalsToAssignment, Assignment) == 0x000000, "Member 'FortMission_AddGoalsToAssignment::Assignment' has a wrong offset!");
static_assert(offsetof(FortMission_AddGoalsToAssignment, GoalInfos) == 0x000008, "Member 'FortMission_AddGoalsToAssignment::GoalInfos' has a wrong offset!");

// Function FortniteGame.FortMission.AddGoalsToEncounterAssignment
// 0x0048 (0x0048 - 0x0000)
struct FortMission_AddGoalsToEncounterAssignment final
{
public:
	struct FFortAIAssignmentIdentifier            AssignmentIdentifier;                              // 0x0000(0x0030)(Parm, NativeAccessSpecifierPublic)
	const class UFortAIEncounterInfo*             Encounter;                                         // 0x0030(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortAIGoalInfo>                GoalInfos;                                         // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_AddGoalsToEncounterAssignment) == 0x000008, "Wrong alignment on FortMission_AddGoalsToEncounterAssignment");
static_assert(sizeof(FortMission_AddGoalsToEncounterAssignment) == 0x000048, "Wrong size on FortMission_AddGoalsToEncounterAssignment");
static_assert(offsetof(FortMission_AddGoalsToEncounterAssignment, AssignmentIdentifier) == 0x000000, "Member 'FortMission_AddGoalsToEncounterAssignment::AssignmentIdentifier' has a wrong offset!");
static_assert(offsetof(FortMission_AddGoalsToEncounterAssignment, Encounter) == 0x000030, "Member 'FortMission_AddGoalsToEncounterAssignment::Encounter' has a wrong offset!");
static_assert(offsetof(FortMission_AddGoalsToEncounterAssignment, GoalInfos) == 0x000038, "Member 'FortMission_AddGoalsToEncounterAssignment::GoalInfos' has a wrong offset!");

// Function FortniteGame.FortMission.AddGoalToAssignment
// 0x0020 (0x0020 - 0x0000)
struct FortMission_AddGoalToAssignment final
{
public:
	class UFortAIAssignment*                      Assignment;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAIGoalInfo                        GoalInfo;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_AddGoalToAssignment) == 0x000008, "Wrong alignment on FortMission_AddGoalToAssignment");
static_assert(sizeof(FortMission_AddGoalToAssignment) == 0x000020, "Wrong size on FortMission_AddGoalToAssignment");
static_assert(offsetof(FortMission_AddGoalToAssignment, Assignment) == 0x000000, "Member 'FortMission_AddGoalToAssignment::Assignment' has a wrong offset!");
static_assert(offsetof(FortMission_AddGoalToAssignment, GoalInfo) == 0x000008, "Member 'FortMission_AddGoalToAssignment::GoalInfo' has a wrong offset!");

// Function FortniteGame.FortMission.AddGoalToEncounterAssignment
// 0x0050 (0x0050 - 0x0000)
struct FortMission_AddGoalToEncounterAssignment final
{
public:
	struct FFortAIAssignmentIdentifier            AssignmentIdentifier;                              // 0x0000(0x0030)(Parm, NativeAccessSpecifierPublic)
	const class UFortAIEncounterInfo*             Encounter;                                         // 0x0030(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAIGoalInfo                        GoalInfo;                                          // 0x0038(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_AddGoalToEncounterAssignment) == 0x000008, "Wrong alignment on FortMission_AddGoalToEncounterAssignment");
static_assert(sizeof(FortMission_AddGoalToEncounterAssignment) == 0x000050, "Wrong size on FortMission_AddGoalToEncounterAssignment");
static_assert(offsetof(FortMission_AddGoalToEncounterAssignment, AssignmentIdentifier) == 0x000000, "Member 'FortMission_AddGoalToEncounterAssignment::AssignmentIdentifier' has a wrong offset!");
static_assert(offsetof(FortMission_AddGoalToEncounterAssignment, Encounter) == 0x000030, "Member 'FortMission_AddGoalToEncounterAssignment::Encounter' has a wrong offset!");
static_assert(offsetof(FortMission_AddGoalToEncounterAssignment, GoalInfo) == 0x000038, "Member 'FortMission_AddGoalToEncounterAssignment::GoalInfo' has a wrong offset!");

// Function FortniteGame.FortMission.AddParticipantAccount
// 0x0010 (0x0010 - 0x0000)
struct FortMission_AddParticipantAccount final
{
public:
	class AFortPlayerController*                  PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMission_AddParticipantAccount) == 0x000008, "Wrong alignment on FortMission_AddParticipantAccount");
static_assert(sizeof(FortMission_AddParticipantAccount) == 0x000010, "Wrong size on FortMission_AddParticipantAccount");
static_assert(offsetof(FortMission_AddParticipantAccount, PlayerController) == 0x000000, "Member 'FortMission_AddParticipantAccount::PlayerController' has a wrong offset!");
static_assert(offsetof(FortMission_AddParticipantAccount, ReturnValue) == 0x000008, "Member 'FortMission_AddParticipantAccount::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.AttemptMissionSave
// 0x0010 (0x0010 - 0x0000)
struct FortMission_AttemptMissionSave final
{
public:
	class FString                                 OptionalSaveName;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_AttemptMissionSave) == 0x000008, "Wrong alignment on FortMission_AttemptMissionSave");
static_assert(sizeof(FortMission_AttemptMissionSave) == 0x000010, "Wrong size on FortMission_AttemptMissionSave");
static_assert(offsetof(FortMission_AttemptMissionSave, OptionalSaveName) == 0x000000, "Member 'FortMission_AttemptMissionSave::OptionalSaveName' has a wrong offset!");

// Function FortniteGame.FortMission.BlueprintCustomHandleMissionEvent
// 0x0130 (0x0130 - 0x0000)
struct FortMission_BlueprintCustomHandleMissionEvent final
{
public:
	struct FGuid                                  Param_MissionGuid;                                 // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ObjectiveHandle;                                   // 0x0010(0x0020)(Parm, NativeAccessSpecifierPublic)
	class UFortMissionEventParams*                Params_0;                                          // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DO_NOT_USE_THIS_OR_VARIABLES_BELOW;                // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                EventFocus;                                        // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UDataAsset*                       EventContent;                                      // 0x0048(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EventInstigator;                                   // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GenericInt;                                        // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GenericFloat;                                      // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   GenericText;                                       // 0x0060(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0078(0x0020)(Parm, NativeAccessSpecifierPublic)
	struct FFortMissionEvent                      MissionEvent;                                      // 0x0098(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_BlueprintCustomHandleMissionEvent) == 0x000008, "Wrong alignment on FortMission_BlueprintCustomHandleMissionEvent");
static_assert(sizeof(FortMission_BlueprintCustomHandleMissionEvent) == 0x000130, "Wrong size on FortMission_BlueprintCustomHandleMissionEvent");
static_assert(offsetof(FortMission_BlueprintCustomHandleMissionEvent, Param_MissionGuid) == 0x000000, "Member 'FortMission_BlueprintCustomHandleMissionEvent::Param_MissionGuid' has a wrong offset!");
static_assert(offsetof(FortMission_BlueprintCustomHandleMissionEvent, ObjectiveHandle) == 0x000010, "Member 'FortMission_BlueprintCustomHandleMissionEvent::ObjectiveHandle' has a wrong offset!");
static_assert(offsetof(FortMission_BlueprintCustomHandleMissionEvent, Params_0) == 0x000030, "Member 'FortMission_BlueprintCustomHandleMissionEvent::Params_0' has a wrong offset!");
static_assert(offsetof(FortMission_BlueprintCustomHandleMissionEvent, DO_NOT_USE_THIS_OR_VARIABLES_BELOW) == 0x000038, "Member 'FortMission_BlueprintCustomHandleMissionEvent::DO_NOT_USE_THIS_OR_VARIABLES_BELOW' has a wrong offset!");
static_assert(offsetof(FortMission_BlueprintCustomHandleMissionEvent, EventFocus) == 0x000040, "Member 'FortMission_BlueprintCustomHandleMissionEvent::EventFocus' has a wrong offset!");
static_assert(offsetof(FortMission_BlueprintCustomHandleMissionEvent, EventContent) == 0x000048, "Member 'FortMission_BlueprintCustomHandleMissionEvent::EventContent' has a wrong offset!");
static_assert(offsetof(FortMission_BlueprintCustomHandleMissionEvent, EventInstigator) == 0x000050, "Member 'FortMission_BlueprintCustomHandleMissionEvent::EventInstigator' has a wrong offset!");
static_assert(offsetof(FortMission_BlueprintCustomHandleMissionEvent, GenericInt) == 0x000058, "Member 'FortMission_BlueprintCustomHandleMissionEvent::GenericInt' has a wrong offset!");
static_assert(offsetof(FortMission_BlueprintCustomHandleMissionEvent, GenericFloat) == 0x00005C, "Member 'FortMission_BlueprintCustomHandleMissionEvent::GenericFloat' has a wrong offset!");
static_assert(offsetof(FortMission_BlueprintCustomHandleMissionEvent, GenericText) == 0x000060, "Member 'FortMission_BlueprintCustomHandleMissionEvent::GenericText' has a wrong offset!");
static_assert(offsetof(FortMission_BlueprintCustomHandleMissionEvent, GameplayTags) == 0x000078, "Member 'FortMission_BlueprintCustomHandleMissionEvent::GameplayTags' has a wrong offset!");
static_assert(offsetof(FortMission_BlueprintCustomHandleMissionEvent, MissionEvent) == 0x000098, "Member 'FortMission_BlueprintCustomHandleMissionEvent::MissionEvent' has a wrong offset!");

// Function FortniteGame.FortMission.BlueprintOnMissionEnd
// 0x0001 (0x0001 - 0x0000)
struct FortMission_BlueprintOnMissionEnd final
{
public:
	EFortMissionStatus                            Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_BlueprintOnMissionEnd) == 0x000001, "Wrong alignment on FortMission_BlueprintOnMissionEnd");
static_assert(sizeof(FortMission_BlueprintOnMissionEnd) == 0x000001, "Wrong size on FortMission_BlueprintOnMissionEnd");
static_assert(offsetof(FortMission_BlueprintOnMissionEnd, Status) == 0x000000, "Member 'FortMission_BlueprintOnMissionEnd::Status' has a wrong offset!");

// Function FortniteGame.FortMission.ChooseRandomReward
// 0x0088 (0x0088 - 0x0000)
struct FortMission_ChooseRandomReward final
{
public:
	struct FFortMissionWeightedReward             ReturnValue;                                       // 0x0000(0x0088)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_ChooseRandomReward) == 0x000008, "Wrong alignment on FortMission_ChooseRandomReward");
static_assert(sizeof(FortMission_ChooseRandomReward) == 0x000088, "Wrong size on FortMission_ChooseRandomReward");
static_assert(offsetof(FortMission_ChooseRandomReward, ReturnValue) == 0x000000, "Member 'FortMission_ChooseRandomReward::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.CreateEncounterAssignment
// 0x0070 (0x0070 - 0x0000)
struct FortMission_CreateEncounterAssignment final
{
public:
	struct FGameplayTagContainer                  AssignmentTags;                                    // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UFortAIEncounterInfo*             Encounter;                                         // 0x0020(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAIAssignmentSettings*              AssignmentSettings;                                // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortAIGoalProvider>        GoalProvider;                                      // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAIAssignmentIdentifier            AssignmentIdentifier;                              // 0x0038(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
	EAssignmentCreationResult                     ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMission_CreateEncounterAssignment) == 0x000008, "Wrong alignment on FortMission_CreateEncounterAssignment");
static_assert(sizeof(FortMission_CreateEncounterAssignment) == 0x000070, "Wrong size on FortMission_CreateEncounterAssignment");
static_assert(offsetof(FortMission_CreateEncounterAssignment, AssignmentTags) == 0x000000, "Member 'FortMission_CreateEncounterAssignment::AssignmentTags' has a wrong offset!");
static_assert(offsetof(FortMission_CreateEncounterAssignment, Encounter) == 0x000020, "Member 'FortMission_CreateEncounterAssignment::Encounter' has a wrong offset!");
static_assert(offsetof(FortMission_CreateEncounterAssignment, AssignmentSettings) == 0x000028, "Member 'FortMission_CreateEncounterAssignment::AssignmentSettings' has a wrong offset!");
static_assert(offsetof(FortMission_CreateEncounterAssignment, GoalProvider) == 0x000030, "Member 'FortMission_CreateEncounterAssignment::GoalProvider' has a wrong offset!");
static_assert(offsetof(FortMission_CreateEncounterAssignment, AssignmentIdentifier) == 0x000038, "Member 'FortMission_CreateEncounterAssignment::AssignmentIdentifier' has a wrong offset!");
static_assert(offsetof(FortMission_CreateEncounterAssignment, ReturnValue) == 0x000068, "Member 'FortMission_CreateEncounterAssignment::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.CreateEncounterSequence
// 0x0028 (0x0028 - 0x0000)
struct FortMission_CreateEncounterSequence final
{
public:
	struct FGameplayTagContainer                  SequenceTags;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UFortAIEncounterSequence*               ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_CreateEncounterSequence) == 0x000008, "Wrong alignment on FortMission_CreateEncounterSequence");
static_assert(sizeof(FortMission_CreateEncounterSequence) == 0x000028, "Wrong size on FortMission_CreateEncounterSequence");
static_assert(offsetof(FortMission_CreateEncounterSequence, SequenceTags) == 0x000000, "Member 'FortMission_CreateEncounterSequence::SequenceTags' has a wrong offset!");
static_assert(offsetof(FortMission_CreateEncounterSequence, ReturnValue) == 0x000020, "Member 'FortMission_CreateEncounterSequence::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.FindGoalLocationsForEncounterAssignment
// 0x0048 (0x0048 - 0x0000)
struct FortMission_FindGoalLocationsForEncounterAssignment final
{
public:
	struct FFortAIAssignmentIdentifier            AssignmentIdentifier;                              // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UFortAIEncounterInfo*             Encounter;                                         // 0x0030(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        OutGoalLocations;                                  // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_FindGoalLocationsForEncounterAssignment) == 0x000008, "Wrong alignment on FortMission_FindGoalLocationsForEncounterAssignment");
static_assert(sizeof(FortMission_FindGoalLocationsForEncounterAssignment) == 0x000048, "Wrong size on FortMission_FindGoalLocationsForEncounterAssignment");
static_assert(offsetof(FortMission_FindGoalLocationsForEncounterAssignment, AssignmentIdentifier) == 0x000000, "Member 'FortMission_FindGoalLocationsForEncounterAssignment::AssignmentIdentifier' has a wrong offset!");
static_assert(offsetof(FortMission_FindGoalLocationsForEncounterAssignment, Encounter) == 0x000030, "Member 'FortMission_FindGoalLocationsForEncounterAssignment::Encounter' has a wrong offset!");
static_assert(offsetof(FortMission_FindGoalLocationsForEncounterAssignment, OutGoalLocations) == 0x000038, "Member 'FortMission_FindGoalLocationsForEncounterAssignment::OutGoalLocations' has a wrong offset!");

// Function FortniteGame.FortMission.FocusThisMission
// 0x0020 (0x0020 - 0x0000)
struct FortMission_FocusThisMission final
{
public:
	class FText                                   FocusDisplayText;                                  // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         FocusPercentage;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMission_FocusThisMission) == 0x000008, "Wrong alignment on FortMission_FocusThisMission");
static_assert(sizeof(FortMission_FocusThisMission) == 0x000020, "Wrong size on FortMission_FocusThisMission");
static_assert(offsetof(FortMission_FocusThisMission, FocusDisplayText) == 0x000000, "Member 'FortMission_FocusThisMission::FocusDisplayText' has a wrong offset!");
static_assert(offsetof(FortMission_FocusThisMission, FocusPercentage) == 0x000018, "Member 'FortMission_FocusThisMission::FocusPercentage' has a wrong offset!");

// Function FortniteGame.FortMission.GetConfigData
// 0x0010 (0x0010 - 0x0000)
struct FortMission_GetConfigData final
{
public:
	struct FGameplayTag                           InBucketTag;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortMissionConfigData*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_GetConfigData) == 0x000008, "Wrong alignment on FortMission_GetConfigData");
static_assert(sizeof(FortMission_GetConfigData) == 0x000010, "Wrong size on FortMission_GetConfigData");
static_assert(offsetof(FortMission_GetConfigData, InBucketTag) == 0x000000, "Member 'FortMission_GetConfigData::InBucketTag' has a wrong offset!");
static_assert(offsetof(FortMission_GetConfigData, ReturnValue) == 0x000008, "Member 'FortMission_GetConfigData::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.GetRewardItemsByTag
// 0x0018 (0x0018 - 0x0000)
struct FortMission_GetRewardItemsByTag final
{
public:
	struct FGameplayTag                           RewardTag;                                         // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortWorldItemDefinition*>       OutRewardItems;                                    // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_GetRewardItemsByTag) == 0x000008, "Wrong alignment on FortMission_GetRewardItemsByTag");
static_assert(sizeof(FortMission_GetRewardItemsByTag) == 0x000018, "Wrong size on FortMission_GetRewardItemsByTag");
static_assert(offsetof(FortMission_GetRewardItemsByTag, RewardTag) == 0x000000, "Member 'FortMission_GetRewardItemsByTag::RewardTag' has a wrong offset!");
static_assert(offsetof(FortMission_GetRewardItemsByTag, OutRewardItems) == 0x000008, "Member 'FortMission_GetRewardItemsByTag::OutRewardItems' has a wrong offset!");

// Function FortniteGame.FortMission.GrantRewardsByTag
// 0x0010 (0x0010 - 0x0000)
struct FortMission_GrantRewardsByTag final
{
public:
	struct FGameplayTag                           RewardTag;                                         // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortRewardType                               RewardType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMission_GrantRewardsByTag) == 0x000008, "Wrong alignment on FortMission_GrantRewardsByTag");
static_assert(sizeof(FortMission_GrantRewardsByTag) == 0x000010, "Wrong size on FortMission_GrantRewardsByTag");
static_assert(offsetof(FortMission_GrantRewardsByTag, RewardTag) == 0x000000, "Member 'FortMission_GrantRewardsByTag::RewardTag' has a wrong offset!");
static_assert(offsetof(FortMission_GrantRewardsByTag, RewardType) == 0x000008, "Member 'FortMission_GrantRewardsByTag::RewardType' has a wrong offset!");

// Function FortniteGame.FortMission.InitializeActorsForMission
// 0x0020 (0x0020 - 0x0000)
struct FortMission_InitializeActorsForMission final
{
public:
	class AFortMission*                           Mission;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutActorsInitialized;                              // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMission_InitializeActorsForMission) == 0x000008, "Wrong alignment on FortMission_InitializeActorsForMission");
static_assert(sizeof(FortMission_InitializeActorsForMission) == 0x000020, "Wrong size on FortMission_InitializeActorsForMission");
static_assert(offsetof(FortMission_InitializeActorsForMission, Mission) == 0x000000, "Member 'FortMission_InitializeActorsForMission::Mission' has a wrong offset!");
static_assert(offsetof(FortMission_InitializeActorsForMission, OutActorsInitialized) == 0x000008, "Member 'FortMission_InitializeActorsForMission::OutActorsInitialized' has a wrong offset!");
static_assert(offsetof(FortMission_InitializeActorsForMission, ReturnValue) == 0x000018, "Member 'FortMission_InitializeActorsForMission::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.InitializeActorsForMissionMatchingItemIdentifyingQuery
// 0x0068 (0x0068 - 0x0000)
struct FortMission_InitializeActorsForMissionMatchingItemIdentifyingQuery final
{
public:
	class AFortMission*                           Mission;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutActorsInitialized;                              // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMission_InitializeActorsForMissionMatchingItemIdentifyingQuery) == 0x000008, "Wrong alignment on FortMission_InitializeActorsForMissionMatchingItemIdentifyingQuery");
static_assert(sizeof(FortMission_InitializeActorsForMissionMatchingItemIdentifyingQuery) == 0x000068, "Wrong size on FortMission_InitializeActorsForMissionMatchingItemIdentifyingQuery");
static_assert(offsetof(FortMission_InitializeActorsForMissionMatchingItemIdentifyingQuery, Mission) == 0x000000, "Member 'FortMission_InitializeActorsForMissionMatchingItemIdentifyingQuery::Mission' has a wrong offset!");
static_assert(offsetof(FortMission_InitializeActorsForMissionMatchingItemIdentifyingQuery, TagQuery) == 0x000008, "Member 'FortMission_InitializeActorsForMissionMatchingItemIdentifyingQuery::TagQuery' has a wrong offset!");
static_assert(offsetof(FortMission_InitializeActorsForMissionMatchingItemIdentifyingQuery, OutActorsInitialized) == 0x000050, "Member 'FortMission_InitializeActorsForMissionMatchingItemIdentifyingQuery::OutActorsInitialized' has a wrong offset!");
static_assert(offsetof(FortMission_InitializeActorsForMissionMatchingItemIdentifyingQuery, ReturnValue) == 0x000060, "Member 'FortMission_InitializeActorsForMissionMatchingItemIdentifyingQuery::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.OnWaveCompleted
// 0x000C (0x000C - 0x0000)
struct FortMission_OnWaveCompleted final
{
public:
	int32                                         Tier;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Wave;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCompletionResult                         Result;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMission_OnWaveCompleted) == 0x000004, "Wrong alignment on FortMission_OnWaveCompleted");
static_assert(sizeof(FortMission_OnWaveCompleted) == 0x00000C, "Wrong size on FortMission_OnWaveCompleted");
static_assert(offsetof(FortMission_OnWaveCompleted, Tier) == 0x000000, "Member 'FortMission_OnWaveCompleted::Tier' has a wrong offset!");
static_assert(offsetof(FortMission_OnWaveCompleted, Wave) == 0x000004, "Member 'FortMission_OnWaveCompleted::Wave' has a wrong offset!");
static_assert(offsetof(FortMission_OnWaveCompleted, Result) == 0x000008, "Member 'FortMission_OnWaveCompleted::Result' has a wrong offset!");

// Function FortniteGame.FortMission.ProvideAllPotentialBadges
// 0x0010 (0x0010 - 0x0000)
struct FortMission_ProvideAllPotentialBadges final
{
public:
	TArray<struct FGameplayTag>                   BadgeTags;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_ProvideAllPotentialBadges) == 0x000008, "Wrong alignment on FortMission_ProvideAllPotentialBadges");
static_assert(sizeof(FortMission_ProvideAllPotentialBadges) == 0x000010, "Wrong size on FortMission_ProvideAllPotentialBadges");
static_assert(offsetof(FortMission_ProvideAllPotentialBadges, BadgeTags) == 0x000000, "Member 'FortMission_ProvideAllPotentialBadges::BadgeTags' has a wrong offset!");

// Function FortniteGame.FortMission.RecordResourceActorSpawn
// 0x0008 (0x0008 - 0x0000)
struct FortMission_RecordResourceActorSpawn final
{
public:
	class AActor*                                 SpawnedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_RecordResourceActorSpawn) == 0x000008, "Wrong alignment on FortMission_RecordResourceActorSpawn");
static_assert(sizeof(FortMission_RecordResourceActorSpawn) == 0x000008, "Wrong size on FortMission_RecordResourceActorSpawn");
static_assert(offsetof(FortMission_RecordResourceActorSpawn, SpawnedActor) == 0x000000, "Member 'FortMission_RecordResourceActorSpawn::SpawnedActor' has a wrong offset!");

// Function FortniteGame.FortMission.RemoveGoalFromEncounterAssignment
// 0x0050 (0x0050 - 0x0000)
struct FortMission_RemoveGoalFromEncounterAssignment final
{
public:
	struct FFortAIAssignmentIdentifier            AssignmentIdentifier;                              // 0x0000(0x0030)(Parm, NativeAccessSpecifierPublic)
	const class UFortAIEncounterInfo*             Encounter;                                         // 0x0030(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAIGoalInfo                        GoalInfo;                                          // 0x0038(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_RemoveGoalFromEncounterAssignment) == 0x000008, "Wrong alignment on FortMission_RemoveGoalFromEncounterAssignment");
static_assert(sizeof(FortMission_RemoveGoalFromEncounterAssignment) == 0x000050, "Wrong size on FortMission_RemoveGoalFromEncounterAssignment");
static_assert(offsetof(FortMission_RemoveGoalFromEncounterAssignment, AssignmentIdentifier) == 0x000000, "Member 'FortMission_RemoveGoalFromEncounterAssignment::AssignmentIdentifier' has a wrong offset!");
static_assert(offsetof(FortMission_RemoveGoalFromEncounterAssignment, Encounter) == 0x000030, "Member 'FortMission_RemoveGoalFromEncounterAssignment::Encounter' has a wrong offset!");
static_assert(offsetof(FortMission_RemoveGoalFromEncounterAssignment, GoalInfo) == 0x000038, "Member 'FortMission_RemoveGoalFromEncounterAssignment::GoalInfo' has a wrong offset!");

// Function FortniteGame.FortMission.RemoveGoalsFromEncounterAssignment
// 0x0048 (0x0048 - 0x0000)
struct FortMission_RemoveGoalsFromEncounterAssignment final
{
public:
	struct FFortAIAssignmentIdentifier            AssignmentIdentifier;                              // 0x0000(0x0030)(Parm, NativeAccessSpecifierPublic)
	const class UFortAIEncounterInfo*             Encounter;                                         // 0x0030(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortAIGoalInfo>                GoalInfos;                                         // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_RemoveGoalsFromEncounterAssignment) == 0x000008, "Wrong alignment on FortMission_RemoveGoalsFromEncounterAssignment");
static_assert(sizeof(FortMission_RemoveGoalsFromEncounterAssignment) == 0x000048, "Wrong size on FortMission_RemoveGoalsFromEncounterAssignment");
static_assert(offsetof(FortMission_RemoveGoalsFromEncounterAssignment, AssignmentIdentifier) == 0x000000, "Member 'FortMission_RemoveGoalsFromEncounterAssignment::AssignmentIdentifier' has a wrong offset!");
static_assert(offsetof(FortMission_RemoveGoalsFromEncounterAssignment, Encounter) == 0x000030, "Member 'FortMission_RemoveGoalsFromEncounterAssignment::Encounter' has a wrong offset!");
static_assert(offsetof(FortMission_RemoveGoalsFromEncounterAssignment, GoalInfos) == 0x000038, "Member 'FortMission_RemoveGoalsFromEncounterAssignment::GoalInfos' has a wrong offset!");

// Function FortniteGame.FortMission.RemoveParticipantAccount
// 0x0030 (0x0030 - 0x0000)
struct FortMission_RemoveParticipantAccount final
{
public:
	struct FUniqueNetIdRepl                       AbandoningPlayerId;                                // 0x0000(0x0028)(Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMission_RemoveParticipantAccount) == 0x000008, "Wrong alignment on FortMission_RemoveParticipantAccount");
static_assert(sizeof(FortMission_RemoveParticipantAccount) == 0x000030, "Wrong size on FortMission_RemoveParticipantAccount");
static_assert(offsetof(FortMission_RemoveParticipantAccount, AbandoningPlayerId) == 0x000000, "Member 'FortMission_RemoveParticipantAccount::AbandoningPlayerId' has a wrong offset!");
static_assert(offsetof(FortMission_RemoveParticipantAccount, ReturnValue) == 0x000028, "Member 'FortMission_RemoveParticipantAccount::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.SendBotLogicMessage
// 0x0010 (0x0010 - 0x0000)
struct FortMission_SendBotLogicMessage final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_SendBotLogicMessage) == 0x000008, "Wrong alignment on FortMission_SendBotLogicMessage");
static_assert(sizeof(FortMission_SendBotLogicMessage) == 0x000010, "Wrong size on FortMission_SendBotLogicMessage");
static_assert(offsetof(FortMission_SendBotLogicMessage, EventName) == 0x000000, "Member 'FortMission_SendBotLogicMessage::EventName' has a wrong offset!");

// Function FortniteGame.FortMission.SetUiVisibility
// 0x0001 (0x0001 - 0x0000)
struct FortMission_SetUiVisibility final
{
public:
	bool                                          bInIsMissionVisible;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_SetUiVisibility) == 0x000001, "Wrong alignment on FortMission_SetUiVisibility");
static_assert(sizeof(FortMission_SetUiVisibility) == 0x000001, "Wrong size on FortMission_SetUiVisibility");
static_assert(offsetof(FortMission_SetUiVisibility, bInIsMissionVisible) == 0x000000, "Member 'FortMission_SetUiVisibility::bInIsMissionVisible' has a wrong offset!");

// Function FortniteGame.FortMission.StartMissionAIEncounter
// 0x00D8 (0x00D8 - 0x0000)
struct FortMission_StartMissionAIEncounter final
{
public:
	TSubclassOf<class UFortAIEncounterInfo>       EncounterTemplate;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         TargetActors;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UFortAIAssignmentSettings*              AssignmentSettings;                                // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEncounterEnvironmentQueryInfo         EnvironmentQueryInfo;                              // 0x0020(0x0028)(Parm, NativeAccessSpecifierPublic)
	class AActor*                                 QueryActor;                                        // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  InjectedTags;                                      // 0x0050(0x0020)(Parm, NativeAccessSpecifierPublic)
	struct FFortEncounterSettings                 EncounterSettings;                                 // 0x0070(0x0058)(Parm, NativeAccessSpecifierPublic)
	int32                                         ActivationDelay;                                   // 0x00C8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAIEncounterInfo*                   ReturnValue;                                       // 0x00D0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_StartMissionAIEncounter) == 0x000008, "Wrong alignment on FortMission_StartMissionAIEncounter");
static_assert(sizeof(FortMission_StartMissionAIEncounter) == 0x0000D8, "Wrong size on FortMission_StartMissionAIEncounter");
static_assert(offsetof(FortMission_StartMissionAIEncounter, EncounterTemplate) == 0x000000, "Member 'FortMission_StartMissionAIEncounter::EncounterTemplate' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionAIEncounter, TargetActors) == 0x000008, "Member 'FortMission_StartMissionAIEncounter::TargetActors' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionAIEncounter, AssignmentSettings) == 0x000018, "Member 'FortMission_StartMissionAIEncounter::AssignmentSettings' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionAIEncounter, EnvironmentQueryInfo) == 0x000020, "Member 'FortMission_StartMissionAIEncounter::EnvironmentQueryInfo' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionAIEncounter, QueryActor) == 0x000048, "Member 'FortMission_StartMissionAIEncounter::QueryActor' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionAIEncounter, InjectedTags) == 0x000050, "Member 'FortMission_StartMissionAIEncounter::InjectedTags' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionAIEncounter, EncounterSettings) == 0x000070, "Member 'FortMission_StartMissionAIEncounter::EncounterSettings' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionAIEncounter, ActivationDelay) == 0x0000C8, "Member 'FortMission_StartMissionAIEncounter::ActivationDelay' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionAIEncounter, ReturnValue) == 0x0000D0, "Member 'FortMission_StartMissionAIEncounter::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.StartMissionAIEncounterFromGeneratedProfile
// 0x00D8 (0x00D8 - 0x0000)
struct FortMission_StartMissionAIEncounterFromGeneratedProfile final
{
public:
	int32                                         GeneratedEncounterProfileIndex;                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         TargetActors;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UFortAIAssignmentSettings*              AssignmentSettings;                                // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEncounterEnvironmentQueryInfo         EnvironmentQueryInfo;                              // 0x0020(0x0028)(Parm, NativeAccessSpecifierPublic)
	class AActor*                                 QueryActor;                                        // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  InjectedTags;                                      // 0x0050(0x0020)(Parm, NativeAccessSpecifierPublic)
	struct FFortEncounterSettings                 EncounterSettings;                                 // 0x0070(0x0058)(Parm, NativeAccessSpecifierPublic)
	int32                                         ActivationDelay;                                   // 0x00C8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAssignments;                                   // 0x00CC(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAIEncounterInfo*                   ReturnValue;                                       // 0x00D0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_StartMissionAIEncounterFromGeneratedProfile) == 0x000008, "Wrong alignment on FortMission_StartMissionAIEncounterFromGeneratedProfile");
static_assert(sizeof(FortMission_StartMissionAIEncounterFromGeneratedProfile) == 0x0000D8, "Wrong size on FortMission_StartMissionAIEncounterFromGeneratedProfile");
static_assert(offsetof(FortMission_StartMissionAIEncounterFromGeneratedProfile, GeneratedEncounterProfileIndex) == 0x000000, "Member 'FortMission_StartMissionAIEncounterFromGeneratedProfile::GeneratedEncounterProfileIndex' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionAIEncounterFromGeneratedProfile, TargetActors) == 0x000008, "Member 'FortMission_StartMissionAIEncounterFromGeneratedProfile::TargetActors' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionAIEncounterFromGeneratedProfile, AssignmentSettings) == 0x000018, "Member 'FortMission_StartMissionAIEncounterFromGeneratedProfile::AssignmentSettings' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionAIEncounterFromGeneratedProfile, EnvironmentQueryInfo) == 0x000020, "Member 'FortMission_StartMissionAIEncounterFromGeneratedProfile::EnvironmentQueryInfo' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionAIEncounterFromGeneratedProfile, QueryActor) == 0x000048, "Member 'FortMission_StartMissionAIEncounterFromGeneratedProfile::QueryActor' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionAIEncounterFromGeneratedProfile, InjectedTags) == 0x000050, "Member 'FortMission_StartMissionAIEncounterFromGeneratedProfile::InjectedTags' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionAIEncounterFromGeneratedProfile, EncounterSettings) == 0x000070, "Member 'FortMission_StartMissionAIEncounterFromGeneratedProfile::EncounterSettings' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionAIEncounterFromGeneratedProfile, ActivationDelay) == 0x0000C8, "Member 'FortMission_StartMissionAIEncounterFromGeneratedProfile::ActivationDelay' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionAIEncounterFromGeneratedProfile, bUseAssignments) == 0x0000CC, "Member 'FortMission_StartMissionAIEncounterFromGeneratedProfile::bUseAssignments' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionAIEncounterFromGeneratedProfile, ReturnValue) == 0x0000D0, "Member 'FortMission_StartMissionAIEncounterFromGeneratedProfile::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.StopEncounterSequence
// 0x0008 (0x0008 - 0x0000)
struct FortMission_StopEncounterSequence final
{
public:
	class UFortAIEncounterSequence*               SequenceToStop;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_StopEncounterSequence) == 0x000008, "Wrong alignment on FortMission_StopEncounterSequence");
static_assert(sizeof(FortMission_StopEncounterSequence) == 0x000008, "Wrong size on FortMission_StopEncounterSequence");
static_assert(offsetof(FortMission_StopEncounterSequence, SequenceToStop) == 0x000000, "Member 'FortMission_StopEncounterSequence::SequenceToStop' has a wrong offset!");

// Function FortniteGame.FortMission.StopMissionAIEncounter
// 0x0008 (0x0008 - 0x0000)
struct FortMission_StopMissionAIEncounter final
{
public:
	class UFortAIEncounterInfo*                   EncounterToStop;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_StopMissionAIEncounter) == 0x000008, "Wrong alignment on FortMission_StopMissionAIEncounter");
static_assert(sizeof(FortMission_StopMissionAIEncounter) == 0x000008, "Wrong size on FortMission_StopMissionAIEncounter");
static_assert(offsetof(FortMission_StopMissionAIEncounter, EncounterToStop) == 0x000000, "Member 'FortMission_StopMissionAIEncounter::EncounterToStop' has a wrong offset!");

// Function FortniteGame.FortMission.BlueprintCanPlayerParticipate
// 0x0010 (0x0010 - 0x0000)
struct FortMission_BlueprintCanPlayerParticipate final
{
public:
	class AFortPlayerController*                  PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMission_BlueprintCanPlayerParticipate) == 0x000008, "Wrong alignment on FortMission_BlueprintCanPlayerParticipate");
static_assert(sizeof(FortMission_BlueprintCanPlayerParticipate) == 0x000010, "Wrong size on FortMission_BlueprintCanPlayerParticipate");
static_assert(offsetof(FortMission_BlueprintCanPlayerParticipate, PlayerController) == 0x000000, "Member 'FortMission_BlueprintCanPlayerParticipate::PlayerController' has a wrong offset!");
static_assert(offsetof(FortMission_BlueprintCanPlayerParticipate, ReturnValue) == 0x000008, "Member 'FortMission_BlueprintCanPlayerParticipate::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.GetActorsSpawnedMatchingQuery
// 0x0060 (0x0060 - 0x0000)
struct FortMission_GetActorsSpawnedMatchingQuery final
{
public:
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         SpawnedActors;                                     // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMission_GetActorsSpawnedMatchingQuery) == 0x000008, "Wrong alignment on FortMission_GetActorsSpawnedMatchingQuery");
static_assert(sizeof(FortMission_GetActorsSpawnedMatchingQuery) == 0x000060, "Wrong size on FortMission_GetActorsSpawnedMatchingQuery");
static_assert(offsetof(FortMission_GetActorsSpawnedMatchingQuery, TagQuery) == 0x000000, "Member 'FortMission_GetActorsSpawnedMatchingQuery::TagQuery' has a wrong offset!");
static_assert(offsetof(FortMission_GetActorsSpawnedMatchingQuery, SpawnedActors) == 0x000048, "Member 'FortMission_GetActorsSpawnedMatchingQuery::SpawnedActors' has a wrong offset!");
static_assert(offsetof(FortMission_GetActorsSpawnedMatchingQuery, ReturnValue) == 0x000058, "Member 'FortMission_GetActorsSpawnedMatchingQuery::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.GetAdditionalMissionCompletionMissionPoints
// 0x0008 (0x0008 - 0x0000)
struct FortMission_GetAdditionalMissionCompletionMissionPoints final
{
public:
	EFortMissionStatus                            CompletionStatus;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_GetAdditionalMissionCompletionMissionPoints) == 0x000004, "Wrong alignment on FortMission_GetAdditionalMissionCompletionMissionPoints");
static_assert(sizeof(FortMission_GetAdditionalMissionCompletionMissionPoints) == 0x000008, "Wrong size on FortMission_GetAdditionalMissionCompletionMissionPoints");
static_assert(offsetof(FortMission_GetAdditionalMissionCompletionMissionPoints, CompletionStatus) == 0x000000, "Member 'FortMission_GetAdditionalMissionCompletionMissionPoints::CompletionStatus' has a wrong offset!");
static_assert(offsetof(FortMission_GetAdditionalMissionCompletionMissionPoints, ReturnValue) == 0x000004, "Member 'FortMission_GetAdditionalMissionCompletionMissionPoints::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.GetAdditionalMissionSuccessBadges
// 0x0018 (0x0018 - 0x0000)
struct FortMission_GetAdditionalMissionSuccessBadges final
{
public:
	TArray<class UFortWorldItemDefinition*>       SuccessItems;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMission_GetAdditionalMissionSuccessBadges) == 0x000008, "Wrong alignment on FortMission_GetAdditionalMissionSuccessBadges");
static_assert(sizeof(FortMission_GetAdditionalMissionSuccessBadges) == 0x000018, "Wrong size on FortMission_GetAdditionalMissionSuccessBadges");
static_assert(offsetof(FortMission_GetAdditionalMissionSuccessBadges, SuccessItems) == 0x000000, "Member 'FortMission_GetAdditionalMissionSuccessBadges::SuccessItems' has a wrong offset!");
static_assert(offsetof(FortMission_GetAdditionalMissionSuccessBadges, ReturnValue) == 0x000010, "Member 'FortMission_GetAdditionalMissionSuccessBadges::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.GetAllObjectives
// 0x0010 (0x0010 - 0x0000)
struct FortMission_GetAllObjectives final
{
public:
	TArray<class AFortObjectiveBase*>             ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_GetAllObjectives) == 0x000008, "Wrong alignment on FortMission_GetAllObjectives");
static_assert(sizeof(FortMission_GetAllObjectives) == 0x000010, "Wrong size on FortMission_GetAllObjectives");
static_assert(offsetof(FortMission_GetAllObjectives, ReturnValue) == 0x000000, "Member 'FortMission_GetAllObjectives::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.GetBuildingDamageLootTier
// 0x0010 (0x0010 - 0x0000)
struct FortMission_GetBuildingDamageLootTier final
{
public:
	class AFortPlayerController*                  PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMission_GetBuildingDamageLootTier) == 0x000008, "Wrong alignment on FortMission_GetBuildingDamageLootTier");
static_assert(sizeof(FortMission_GetBuildingDamageLootTier) == 0x000010, "Wrong size on FortMission_GetBuildingDamageLootTier");
static_assert(offsetof(FortMission_GetBuildingDamageLootTier, PlayerController) == 0x000000, "Member 'FortMission_GetBuildingDamageLootTier::PlayerController' has a wrong offset!");
static_assert(offsetof(FortMission_GetBuildingDamageLootTier, ReturnValue) == 0x000008, "Member 'FortMission_GetBuildingDamageLootTier::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.GetCurrentBluGloRewards
// 0x0004 (0x0004 - 0x0000)
struct FortMission_GetCurrentBluGloRewards final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_GetCurrentBluGloRewards) == 0x000004, "Wrong alignment on FortMission_GetCurrentBluGloRewards");
static_assert(sizeof(FortMission_GetCurrentBluGloRewards) == 0x000004, "Wrong size on FortMission_GetCurrentBluGloRewards");
static_assert(offsetof(FortMission_GetCurrentBluGloRewards, ReturnValue) == 0x000000, "Member 'FortMission_GetCurrentBluGloRewards::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.GetCurrentFocusDisplayText
// 0x0018 (0x0018 - 0x0000)
struct FortMission_GetCurrentFocusDisplayText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_GetCurrentFocusDisplayText) == 0x000008, "Wrong alignment on FortMission_GetCurrentFocusDisplayText");
static_assert(sizeof(FortMission_GetCurrentFocusDisplayText) == 0x000018, "Wrong size on FortMission_GetCurrentFocusDisplayText");
static_assert(offsetof(FortMission_GetCurrentFocusDisplayText, ReturnValue) == 0x000000, "Member 'FortMission_GetCurrentFocusDisplayText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.GetCurrentFocusPercentage
// 0x0004 (0x0004 - 0x0000)
struct FortMission_GetCurrentFocusPercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_GetCurrentFocusPercentage) == 0x000004, "Wrong alignment on FortMission_GetCurrentFocusPercentage");
static_assert(sizeof(FortMission_GetCurrentFocusPercentage) == 0x000004, "Wrong size on FortMission_GetCurrentFocusPercentage");
static_assert(offsetof(FortMission_GetCurrentFocusPercentage, ReturnValue) == 0x000000, "Member 'FortMission_GetCurrentFocusPercentage::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.GetDaysRemainingBeforeOverPar
// 0x0004 (0x0004 - 0x0000)
struct FortMission_GetDaysRemainingBeforeOverPar final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_GetDaysRemainingBeforeOverPar) == 0x000004, "Wrong alignment on FortMission_GetDaysRemainingBeforeOverPar");
static_assert(sizeof(FortMission_GetDaysRemainingBeforeOverPar) == 0x000004, "Wrong size on FortMission_GetDaysRemainingBeforeOverPar");
static_assert(offsetof(FortMission_GetDaysRemainingBeforeOverPar, ReturnValue) == 0x000000, "Member 'FortMission_GetDaysRemainingBeforeOverPar::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.GetExpectedCompletionTime
// 0x0004 (0x0004 - 0x0000)
struct FortMission_GetExpectedCompletionTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_GetExpectedCompletionTime) == 0x000004, "Wrong alignment on FortMission_GetExpectedCompletionTime");
static_assert(sizeof(FortMission_GetExpectedCompletionTime) == 0x000004, "Wrong size on FortMission_GetExpectedCompletionTime");
static_assert(offsetof(FortMission_GetExpectedCompletionTime, ReturnValue) == 0x000000, "Member 'FortMission_GetExpectedCompletionTime::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.GetMissionGuid
// 0x0010 (0x0010 - 0x0000)
struct FortMission_GetMissionGuid final
{
public:
	struct FGuid                                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_GetMissionGuid) == 0x000004, "Wrong alignment on FortMission_GetMissionGuid");
static_assert(sizeof(FortMission_GetMissionGuid) == 0x000010, "Wrong size on FortMission_GetMissionGuid");
static_assert(offsetof(FortMission_GetMissionGuid, ReturnValue) == 0x000000, "Member 'FortMission_GetMissionGuid::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.GetMissionName
// 0x0018 (0x0018 - 0x0000)
struct FortMission_GetMissionName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_GetMissionName) == 0x000008, "Wrong alignment on FortMission_GetMissionName");
static_assert(sizeof(FortMission_GetMissionName) == 0x000018, "Wrong size on FortMission_GetMissionName");
static_assert(offsetof(FortMission_GetMissionName, ReturnValue) == 0x000000, "Member 'FortMission_GetMissionName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.GetObjectiveByHandle
// 0x0028 (0x0028 - 0x0000)
struct FortMission_GetObjectiveByHandle final
{
public:
	struct FGameplayTagContainer                  ObjectiveHandle;                                   // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AFortObjectiveBase*                     ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_GetObjectiveByHandle) == 0x000008, "Wrong alignment on FortMission_GetObjectiveByHandle");
static_assert(sizeof(FortMission_GetObjectiveByHandle) == 0x000028, "Wrong size on FortMission_GetObjectiveByHandle");
static_assert(offsetof(FortMission_GetObjectiveByHandle, ObjectiveHandle) == 0x000000, "Member 'FortMission_GetObjectiveByHandle::ObjectiveHandle' has a wrong offset!");
static_assert(offsetof(FortMission_GetObjectiveByHandle, ReturnValue) == 0x000020, "Member 'FortMission_GetObjectiveByHandle::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.GetObjectiveHandlesWithTag
// 0x0020 (0x0020 - 0x0000)
struct FortMission_GetObjectiveHandlesWithTag final
{
public:
	struct FGameplayTag                           ObjectiveTag;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxNumberOfObjectives;                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTagContainer>          ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_GetObjectiveHandlesWithTag) == 0x000008, "Wrong alignment on FortMission_GetObjectiveHandlesWithTag");
static_assert(sizeof(FortMission_GetObjectiveHandlesWithTag) == 0x000020, "Wrong size on FortMission_GetObjectiveHandlesWithTag");
static_assert(offsetof(FortMission_GetObjectiveHandlesWithTag, ObjectiveTag) == 0x000000, "Member 'FortMission_GetObjectiveHandlesWithTag::ObjectiveTag' has a wrong offset!");
static_assert(offsetof(FortMission_GetObjectiveHandlesWithTag, MaxNumberOfObjectives) == 0x000008, "Member 'FortMission_GetObjectiveHandlesWithTag::MaxNumberOfObjectives' has a wrong offset!");
static_assert(offsetof(FortMission_GetObjectiveHandlesWithTag, ReturnValue) == 0x000010, "Member 'FortMission_GetObjectiveHandlesWithTag::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.GetObjectiveStatusByHandle
// 0x0028 (0x0028 - 0x0000)
struct FortMission_GetObjectiveStatusByHandle final
{
public:
	struct FGameplayTagContainer                  ObjectiveHandle;                                   // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EFortObjectiveStatus                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMission_GetObjectiveStatusByHandle) == 0x000008, "Wrong alignment on FortMission_GetObjectiveStatusByHandle");
static_assert(sizeof(FortMission_GetObjectiveStatusByHandle) == 0x000028, "Wrong size on FortMission_GetObjectiveStatusByHandle");
static_assert(offsetof(FortMission_GetObjectiveStatusByHandle, ObjectiveHandle) == 0x000000, "Member 'FortMission_GetObjectiveStatusByHandle::ObjectiveHandle' has a wrong offset!");
static_assert(offsetof(FortMission_GetObjectiveStatusByHandle, ReturnValue) == 0x000020, "Member 'FortMission_GetObjectiveStatusByHandle::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.GetParticipatingMissionControllers
// 0x0010 (0x0010 - 0x0000)
struct FortMission_GetParticipatingMissionControllers final
{
public:
	TArray<class AFortPlayerController*>          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_GetParticipatingMissionControllers) == 0x000008, "Wrong alignment on FortMission_GetParticipatingMissionControllers");
static_assert(sizeof(FortMission_GetParticipatingMissionControllers) == 0x000010, "Wrong size on FortMission_GetParticipatingMissionControllers");
static_assert(offsetof(FortMission_GetParticipatingMissionControllers, ReturnValue) == 0x000000, "Member 'FortMission_GetParticipatingMissionControllers::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.GetPawnDamageLootTier
// 0x0010 (0x0010 - 0x0000)
struct FortMission_GetPawnDamageLootTier final
{
public:
	class AFortPlayerController*                  PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMission_GetPawnDamageLootTier) == 0x000008, "Wrong alignment on FortMission_GetPawnDamageLootTier");
static_assert(sizeof(FortMission_GetPawnDamageLootTier) == 0x000010, "Wrong size on FortMission_GetPawnDamageLootTier");
static_assert(offsetof(FortMission_GetPawnDamageLootTier, PlayerController) == 0x000000, "Member 'FortMission_GetPawnDamageLootTier::PlayerController' has a wrong offset!");
static_assert(offsetof(FortMission_GetPawnDamageLootTier, ReturnValue) == 0x000008, "Member 'FortMission_GetPawnDamageLootTier::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.GetSpawnLocationActorsMatchingQuery
// 0x0060 (0x0060 - 0x0000)
struct FortMission_GetSpawnLocationActorsMatchingQuery final
{
public:
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         SpawnLocationActors;                               // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMission_GetSpawnLocationActorsMatchingQuery) == 0x000008, "Wrong alignment on FortMission_GetSpawnLocationActorsMatchingQuery");
static_assert(sizeof(FortMission_GetSpawnLocationActorsMatchingQuery) == 0x000060, "Wrong size on FortMission_GetSpawnLocationActorsMatchingQuery");
static_assert(offsetof(FortMission_GetSpawnLocationActorsMatchingQuery, TagQuery) == 0x000000, "Member 'FortMission_GetSpawnLocationActorsMatchingQuery::TagQuery' has a wrong offset!");
static_assert(offsetof(FortMission_GetSpawnLocationActorsMatchingQuery, SpawnLocationActors) == 0x000048, "Member 'FortMission_GetSpawnLocationActorsMatchingQuery::SpawnLocationActors' has a wrong offset!");
static_assert(offsetof(FortMission_GetSpawnLocationActorsMatchingQuery, ReturnValue) == 0x000058, "Member 'FortMission_GetSpawnLocationActorsMatchingQuery::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.GetSpawnLocationsMatchingQuery
// 0x0060 (0x0060 - 0x0000)
struct FortMission_GetSpawnLocationsMatchingQuery final
{
public:
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        SpawnLocations;                                    // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMission_GetSpawnLocationsMatchingQuery) == 0x000008, "Wrong alignment on FortMission_GetSpawnLocationsMatchingQuery");
static_assert(sizeof(FortMission_GetSpawnLocationsMatchingQuery) == 0x000060, "Wrong size on FortMission_GetSpawnLocationsMatchingQuery");
static_assert(offsetof(FortMission_GetSpawnLocationsMatchingQuery, TagQuery) == 0x000000, "Member 'FortMission_GetSpawnLocationsMatchingQuery::TagQuery' has a wrong offset!");
static_assert(offsetof(FortMission_GetSpawnLocationsMatchingQuery, SpawnLocations) == 0x000048, "Member 'FortMission_GetSpawnLocationsMatchingQuery::SpawnLocations' has a wrong offset!");
static_assert(offsetof(FortMission_GetSpawnLocationsMatchingQuery, ReturnValue) == 0x000058, "Member 'FortMission_GetSpawnLocationsMatchingQuery::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.HasMissionPar
// 0x0001 (0x0001 - 0x0000)
struct FortMission_HasMissionPar final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_HasMissionPar) == 0x000001, "Wrong alignment on FortMission_HasMissionPar");
static_assert(sizeof(FortMission_HasMissionPar) == 0x000001, "Wrong size on FortMission_HasMissionPar");
static_assert(offsetof(FortMission_HasMissionPar, ReturnValue) == 0x000000, "Member 'FortMission_HasMissionPar::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.IsPlayerParticipating
// 0x0010 (0x0010 - 0x0000)
struct FortMission_IsPlayerParticipating final
{
public:
	class AFortPlayerController*                  PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMission_IsPlayerParticipating) == 0x000008, "Wrong alignment on FortMission_IsPlayerParticipating");
static_assert(sizeof(FortMission_IsPlayerParticipating) == 0x000010, "Wrong size on FortMission_IsPlayerParticipating");
static_assert(offsetof(FortMission_IsPlayerParticipating, PlayerController) == 0x000000, "Member 'FortMission_IsPlayerParticipating::PlayerController' has a wrong offset!");
static_assert(offsetof(FortMission_IsPlayerParticipating, ReturnValue) == 0x000008, "Member 'FortMission_IsPlayerParticipating::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilitySystemComponentTooltip.GetNumericValue
// 0x0028 (0x0028 - 0x0000)
struct FortAbilitySystemComponentTooltip_GetNumericValue final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVal;                                            // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAbilitySystemComponentTooltip_GetNumericValue) == 0x000008, "Wrong alignment on FortAbilitySystemComponentTooltip_GetNumericValue");
static_assert(sizeof(FortAbilitySystemComponentTooltip_GetNumericValue) == 0x000028, "Wrong size on FortAbilitySystemComponentTooltip_GetNumericValue");
static_assert(offsetof(FortAbilitySystemComponentTooltip_GetNumericValue, ObjectToDescribe) == 0x000000, "Member 'FortAbilitySystemComponentTooltip_GetNumericValue::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortAbilitySystemComponentTooltip_GetNumericValue, Tag) == 0x000008, "Member 'FortAbilitySystemComponentTooltip_GetNumericValue::Tag' has a wrong offset!");
static_assert(offsetof(FortAbilitySystemComponentTooltip_GetNumericValue, Context) == 0x000010, "Member 'FortAbilitySystemComponentTooltip_GetNumericValue::Context' has a wrong offset!");
static_assert(offsetof(FortAbilitySystemComponentTooltip_GetNumericValue, Token) == 0x000018, "Member 'FortAbilitySystemComponentTooltip_GetNumericValue::Token' has a wrong offset!");
static_assert(offsetof(FortAbilitySystemComponentTooltip_GetNumericValue, OutVal) == 0x000020, "Member 'FortAbilitySystemComponentTooltip_GetNumericValue::OutVal' has a wrong offset!");
static_assert(offsetof(FortAbilitySystemComponentTooltip_GetNumericValue, ReturnValue) == 0x000024, "Member 'FortAbilitySystemComponentTooltip_GetNumericValue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilitySystemComponentTooltip.GetTextForToken
// 0x0040 (0x0040 - 0x0000)
struct FortAbilitySystemComponentTooltip_GetTextForToken final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAbilitySystemComponentTooltip_GetTextForToken) == 0x000008, "Wrong alignment on FortAbilitySystemComponentTooltip_GetTextForToken");
static_assert(sizeof(FortAbilitySystemComponentTooltip_GetTextForToken) == 0x000040, "Wrong size on FortAbilitySystemComponentTooltip_GetTextForToken");
static_assert(offsetof(FortAbilitySystemComponentTooltip_GetTextForToken, ObjectToDescribe) == 0x000000, "Member 'FortAbilitySystemComponentTooltip_GetTextForToken::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortAbilitySystemComponentTooltip_GetTextForToken, Tag) == 0x000008, "Member 'FortAbilitySystemComponentTooltip_GetTextForToken::Tag' has a wrong offset!");
static_assert(offsetof(FortAbilitySystemComponentTooltip_GetTextForToken, Context) == 0x000010, "Member 'FortAbilitySystemComponentTooltip_GetTextForToken::Context' has a wrong offset!");
static_assert(offsetof(FortAbilitySystemComponentTooltip_GetTextForToken, Token) == 0x000018, "Member 'FortAbilitySystemComponentTooltip_GetTextForToken::Token' has a wrong offset!");
static_assert(offsetof(FortAbilitySystemComponentTooltip_GetTextForToken, OutText) == 0x000020, "Member 'FortAbilitySystemComponentTooltip_GetTextForToken::OutText' has a wrong offset!");
static_assert(offsetof(FortAbilitySystemComponentTooltip_GetTextForToken, ReturnValue) == 0x000038, "Member 'FortAbilitySystemComponentTooltip_GetTextForToken::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilitySystemComponentTooltip.GetTokenizedDescriptionText
// 0x0030 (0x0030 - 0x0000)
struct FortAbilitySystemComponentTooltip_GetTokenizedDescriptionText final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           OutDescription;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAbilitySystemComponentTooltip_GetTokenizedDescriptionText) == 0x000008, "Wrong alignment on FortAbilitySystemComponentTooltip_GetTokenizedDescriptionText");
static_assert(sizeof(FortAbilitySystemComponentTooltip_GetTokenizedDescriptionText) == 0x000030, "Wrong size on FortAbilitySystemComponentTooltip_GetTokenizedDescriptionText");
static_assert(offsetof(FortAbilitySystemComponentTooltip_GetTokenizedDescriptionText, ObjectToDescribe) == 0x000000, "Member 'FortAbilitySystemComponentTooltip_GetTokenizedDescriptionText::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortAbilitySystemComponentTooltip_GetTokenizedDescriptionText, Tag) == 0x000008, "Member 'FortAbilitySystemComponentTooltip_GetTokenizedDescriptionText::Tag' has a wrong offset!");
static_assert(offsetof(FortAbilitySystemComponentTooltip_GetTokenizedDescriptionText, Context) == 0x000010, "Member 'FortAbilitySystemComponentTooltip_GetTokenizedDescriptionText::Context' has a wrong offset!");
static_assert(offsetof(FortAbilitySystemComponentTooltip_GetTokenizedDescriptionText, OutDescription) == 0x000018, "Member 'FortAbilitySystemComponentTooltip_GetTokenizedDescriptionText::OutDescription' has a wrong offset!");
static_assert(offsetof(FortAbilitySystemComponentTooltip_GetTokenizedDescriptionText, ReturnValue) == 0x000028, "Member 'FortAbilitySystemComponentTooltip_GetTokenizedDescriptionText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilitySystemComponentTooltip.GetValueData
// 0x0090 (0x0090 - 0x0000)
struct FortAbilitySystemComponentTooltip_GetValueData final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0010(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortTooltipValueData                  OutData;                                           // 0x0018(0x0070)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAbilitySystemComponentTooltip_GetValueData) == 0x000008, "Wrong alignment on FortAbilitySystemComponentTooltip_GetValueData");
static_assert(sizeof(FortAbilitySystemComponentTooltip_GetValueData) == 0x000090, "Wrong size on FortAbilitySystemComponentTooltip_GetValueData");
static_assert(offsetof(FortAbilitySystemComponentTooltip_GetValueData, ObjectToDescribe) == 0x000000, "Member 'FortAbilitySystemComponentTooltip_GetValueData::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortAbilitySystemComponentTooltip_GetValueData, Context) == 0x000008, "Member 'FortAbilitySystemComponentTooltip_GetValueData::Context' has a wrong offset!");
static_assert(offsetof(FortAbilitySystemComponentTooltip_GetValueData, Token) == 0x000010, "Member 'FortAbilitySystemComponentTooltip_GetValueData::Token' has a wrong offset!");
static_assert(offsetof(FortAbilitySystemComponentTooltip_GetValueData, OutData) == 0x000018, "Member 'FortAbilitySystemComponentTooltip_GetValueData::OutData' has a wrong offset!");
static_assert(offsetof(FortAbilitySystemComponentTooltip_GetValueData, ReturnValue) == 0x000088, "Member 'FortAbilitySystemComponentTooltip_GetValueData::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayEffectDeliveryActor.BroadcastExplosion
// 0x0020 (0x0020 - 0x0000)
struct FortGameplayEffectDeliveryActor_BroadcastExplosion final
{
public:
	TArray<class AActor*>                         HitActors;                                         // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FHitResult>                     HitResults;                                        // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayEffectDeliveryActor_BroadcastExplosion) == 0x000008, "Wrong alignment on FortGameplayEffectDeliveryActor_BroadcastExplosion");
static_assert(sizeof(FortGameplayEffectDeliveryActor_BroadcastExplosion) == 0x000020, "Wrong size on FortGameplayEffectDeliveryActor_BroadcastExplosion");
static_assert(offsetof(FortGameplayEffectDeliveryActor_BroadcastExplosion, HitActors) == 0x000000, "Member 'FortGameplayEffectDeliveryActor_BroadcastExplosion::HitActors' has a wrong offset!");
static_assert(offsetof(FortGameplayEffectDeliveryActor_BroadcastExplosion, HitResults) == 0x000010, "Member 'FortGameplayEffectDeliveryActor_BroadcastExplosion::HitResults' has a wrong offset!");

// Function FortniteGame.FortGameplayEffectDeliveryActor.OnComponentOverlap
// 0x00A0 (0x00A0 - 0x0000)
struct FortGameplayEffectDeliveryActor_OnComponentOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayEffectDeliveryActor_OnComponentOverlap) == 0x000008, "Wrong alignment on FortGameplayEffectDeliveryActor_OnComponentOverlap");
static_assert(sizeof(FortGameplayEffectDeliveryActor_OnComponentOverlap) == 0x0000A0, "Wrong size on FortGameplayEffectDeliveryActor_OnComponentOverlap");
static_assert(offsetof(FortGameplayEffectDeliveryActor_OnComponentOverlap, OverlappedComp) == 0x000000, "Member 'FortGameplayEffectDeliveryActor_OnComponentOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(FortGameplayEffectDeliveryActor_OnComponentOverlap, OtherActor) == 0x000008, "Member 'FortGameplayEffectDeliveryActor_OnComponentOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(FortGameplayEffectDeliveryActor_OnComponentOverlap, OtherComp) == 0x000010, "Member 'FortGameplayEffectDeliveryActor_OnComponentOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(FortGameplayEffectDeliveryActor_OnComponentOverlap, OtherBodyIndex) == 0x000018, "Member 'FortGameplayEffectDeliveryActor_OnComponentOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(FortGameplayEffectDeliveryActor_OnComponentOverlap, bFromSweep) == 0x00001C, "Member 'FortGameplayEffectDeliveryActor_OnComponentOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(FortGameplayEffectDeliveryActor_OnComponentOverlap, SweepResult) == 0x000020, "Member 'FortGameplayEffectDeliveryActor_OnComponentOverlap::SweepResult' has a wrong offset!");

// Function FortniteGame.FortGameplayEffectDeliveryActor.OnComponentTouch
// 0x00A8 (0x00A8 - 0x0000)
struct FortGameplayEffectDeliveryActor_OnComponentTouch final
{
public:
	class UPrimitiveComponent*                    HitComp;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0028(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayEffectDeliveryActor_OnComponentTouch) == 0x000008, "Wrong alignment on FortGameplayEffectDeliveryActor_OnComponentTouch");
static_assert(sizeof(FortGameplayEffectDeliveryActor_OnComponentTouch) == 0x0000A8, "Wrong size on FortGameplayEffectDeliveryActor_OnComponentTouch");
static_assert(offsetof(FortGameplayEffectDeliveryActor_OnComponentTouch, HitComp) == 0x000000, "Member 'FortGameplayEffectDeliveryActor_OnComponentTouch::HitComp' has a wrong offset!");
static_assert(offsetof(FortGameplayEffectDeliveryActor_OnComponentTouch, OtherActor) == 0x000008, "Member 'FortGameplayEffectDeliveryActor_OnComponentTouch::OtherActor' has a wrong offset!");
static_assert(offsetof(FortGameplayEffectDeliveryActor_OnComponentTouch, OtherComp) == 0x000010, "Member 'FortGameplayEffectDeliveryActor_OnComponentTouch::OtherComp' has a wrong offset!");
static_assert(offsetof(FortGameplayEffectDeliveryActor_OnComponentTouch, NormalImpulse) == 0x000018, "Member 'FortGameplayEffectDeliveryActor_OnComponentTouch::NormalImpulse' has a wrong offset!");
static_assert(offsetof(FortGameplayEffectDeliveryActor_OnComponentTouch, Hit) == 0x000028, "Member 'FortGameplayEffectDeliveryActor_OnComponentTouch::Hit' has a wrong offset!");

// Function FortniteGame.FortGameplayEffectDeliveryActor.OnExploded
// 0x0020 (0x0020 - 0x0000)
struct FortGameplayEffectDeliveryActor_OnExploded final
{
public:
	TArray<class AActor*>                         HitActors;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FHitResult>                     HitResults;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayEffectDeliveryActor_OnExploded) == 0x000008, "Wrong alignment on FortGameplayEffectDeliveryActor_OnExploded");
static_assert(sizeof(FortGameplayEffectDeliveryActor_OnExploded) == 0x000020, "Wrong size on FortGameplayEffectDeliveryActor_OnExploded");
static_assert(offsetof(FortGameplayEffectDeliveryActor_OnExploded, HitActors) == 0x000000, "Member 'FortGameplayEffectDeliveryActor_OnExploded::HitActors' has a wrong offset!");
static_assert(offsetof(FortGameplayEffectDeliveryActor_OnExploded, HitResults) == 0x000010, "Member 'FortGameplayEffectDeliveryActor_OnExploded::HitResults' has a wrong offset!");

// Function FortniteGame.FortGameplayEffectDeliveryActor.OnTouched
// 0x0098 (0x0098 - 0x0000)
struct FortGameplayEffectDeliveryActor_OnTouched final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0010(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bIsOverlap;                                        // 0x0090(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameplayEffectDeliveryActor_OnTouched) == 0x000008, "Wrong alignment on FortGameplayEffectDeliveryActor_OnTouched");
static_assert(sizeof(FortGameplayEffectDeliveryActor_OnTouched) == 0x000098, "Wrong size on FortGameplayEffectDeliveryActor_OnTouched");
static_assert(offsetof(FortGameplayEffectDeliveryActor_OnTouched, OtherActor) == 0x000000, "Member 'FortGameplayEffectDeliveryActor_OnTouched::OtherActor' has a wrong offset!");
static_assert(offsetof(FortGameplayEffectDeliveryActor_OnTouched, OtherComp) == 0x000008, "Member 'FortGameplayEffectDeliveryActor_OnTouched::OtherComp' has a wrong offset!");
static_assert(offsetof(FortGameplayEffectDeliveryActor_OnTouched, HitResult) == 0x000010, "Member 'FortGameplayEffectDeliveryActor_OnTouched::HitResult' has a wrong offset!");
static_assert(offsetof(FortGameplayEffectDeliveryActor_OnTouched, bIsOverlap) == 0x000090, "Member 'FortGameplayEffectDeliveryActor_OnTouched::bIsOverlap' has a wrong offset!");

// Function FortniteGame.FortGameplayEffectDeliveryActor.SetCollisionComponent
// 0x0008 (0x0008 - 0x0000)
struct FortGameplayEffectDeliveryActor_SetCollisionComponent final
{
public:
	class UPrimitiveComponent*                    NewCollisionComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayEffectDeliveryActor_SetCollisionComponent) == 0x000008, "Wrong alignment on FortGameplayEffectDeliveryActor_SetCollisionComponent");
static_assert(sizeof(FortGameplayEffectDeliveryActor_SetCollisionComponent) == 0x000008, "Wrong size on FortGameplayEffectDeliveryActor_SetCollisionComponent");
static_assert(offsetof(FortGameplayEffectDeliveryActor_SetCollisionComponent, NewCollisionComponent) == 0x000000, "Member 'FortGameplayEffectDeliveryActor_SetCollisionComponent::NewCollisionComponent' has a wrong offset!");

// Function FortniteGame.FortGameplayEffectDeliveryActor.SetIgnoreInstigatorCollision
// 0x0001 (0x0001 - 0x0000)
struct FortGameplayEffectDeliveryActor_SetIgnoreInstigatorCollision final
{
public:
	bool                                          bShouldIgnore;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayEffectDeliveryActor_SetIgnoreInstigatorCollision) == 0x000001, "Wrong alignment on FortGameplayEffectDeliveryActor_SetIgnoreInstigatorCollision");
static_assert(sizeof(FortGameplayEffectDeliveryActor_SetIgnoreInstigatorCollision) == 0x000001, "Wrong size on FortGameplayEffectDeliveryActor_SetIgnoreInstigatorCollision");
static_assert(offsetof(FortGameplayEffectDeliveryActor_SetIgnoreInstigatorCollision, bShouldIgnore) == 0x000000, "Member 'FortGameplayEffectDeliveryActor_SetIgnoreInstigatorCollision::bShouldIgnore' has a wrong offset!");

// Function FortniteGame.FortGameplayEffectDeliveryActor.GetCollisionComponent
// 0x0008 (0x0008 - 0x0000)
struct FortGameplayEffectDeliveryActor_GetCollisionComponent final
{
public:
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayEffectDeliveryActor_GetCollisionComponent) == 0x000008, "Wrong alignment on FortGameplayEffectDeliveryActor_GetCollisionComponent");
static_assert(sizeof(FortGameplayEffectDeliveryActor_GetCollisionComponent) == 0x000008, "Wrong size on FortGameplayEffectDeliveryActor_GetCollisionComponent");
static_assert(offsetof(FortGameplayEffectDeliveryActor_GetCollisionComponent, ReturnValue) == 0x000000, "Member 'FortGameplayEffectDeliveryActor_GetCollisionComponent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayEffectDeliveryActor.IsBeingKilled
// 0x0001 (0x0001 - 0x0000)
struct FortGameplayEffectDeliveryActor_IsBeingKilled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayEffectDeliveryActor_IsBeingKilled) == 0x000001, "Wrong alignment on FortGameplayEffectDeliveryActor_IsBeingKilled");
static_assert(sizeof(FortGameplayEffectDeliveryActor_IsBeingKilled) == 0x000001, "Wrong size on FortGameplayEffectDeliveryActor_IsBeingKilled");
static_assert(offsetof(FortGameplayEffectDeliveryActor_IsBeingKilled, ReturnValue) == 0x000000, "Member 'FortGameplayEffectDeliveryActor_IsBeingKilled::ReturnValue' has a wrong offset!");

// Function FortniteGame.ThreatCloud.OnCloudDeactivated
// 0x0001 (0x0001 - 0x0000)
struct ThreatCloud_OnCloudDeactivated final
{
public:
	EFortThreatDeactivationType                   DeactivationType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThreatCloud_OnCloudDeactivated) == 0x000001, "Wrong alignment on ThreatCloud_OnCloudDeactivated");
static_assert(sizeof(ThreatCloud_OnCloudDeactivated) == 0x000001, "Wrong size on ThreatCloud_OnCloudDeactivated");
static_assert(offsetof(ThreatCloud_OnCloudDeactivated, DeactivationType) == 0x000000, "Member 'ThreatCloud_OnCloudDeactivated::DeactivationType' has a wrong offset!");

// Function FortniteGame.ThreatCloud.OnCloudHiddenChange
// 0x0001 (0x0001 - 0x0000)
struct ThreatCloud_OnCloudHiddenChange final
{
public:
	bool                                          bCloudsAreHidden;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThreatCloud_OnCloudHiddenChange) == 0x000001, "Wrong alignment on ThreatCloud_OnCloudHiddenChange");
static_assert(sizeof(ThreatCloud_OnCloudHiddenChange) == 0x000001, "Wrong size on ThreatCloud_OnCloudHiddenChange");
static_assert(offsetof(ThreatCloud_OnCloudHiddenChange, bCloudsAreHidden) == 0x000000, "Member 'ThreatCloud_OnCloudHiddenChange::bCloudsAreHidden' has a wrong offset!");

// Function FortniteGame.ThreatCloud.OnLightningStrike
// 0x0028 (0x0028 - 0x0000)
struct ThreatCloud_OnLightningStrike final
{
public:
	struct FVector                                StartLocation;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndLocation;                                       // 0x000C(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABuildingRift*                          Rift;                                              // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLightningStruckRift;                              // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThreatCloud_OnLightningStrike) == 0x000008, "Wrong alignment on ThreatCloud_OnLightningStrike");
static_assert(sizeof(ThreatCloud_OnLightningStrike) == 0x000028, "Wrong size on ThreatCloud_OnLightningStrike");
static_assert(offsetof(ThreatCloud_OnLightningStrike, StartLocation) == 0x000000, "Member 'ThreatCloud_OnLightningStrike::StartLocation' has a wrong offset!");
static_assert(offsetof(ThreatCloud_OnLightningStrike, EndLocation) == 0x00000C, "Member 'ThreatCloud_OnLightningStrike::EndLocation' has a wrong offset!");
static_assert(offsetof(ThreatCloud_OnLightningStrike, Rift) == 0x000018, "Member 'ThreatCloud_OnLightningStrike::Rift' has a wrong offset!");
static_assert(offsetof(ThreatCloud_OnLightningStrike, bLightningStruckRift) == 0x000020, "Member 'ThreatCloud_OnLightningStrike::bLightningStruckRift' has a wrong offset!");

// Function FortniteGame.ThreatCloud.GetThreatVolume
// 0x001C (0x001C - 0x0000)
struct ThreatCloud_GetThreatVolume final
{
public:
	struct FBox                                   ReturnValue;                                       // 0x0000(0x001C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThreatCloud_GetThreatVolume) == 0x000004, "Wrong alignment on ThreatCloud_GetThreatVolume");
static_assert(sizeof(ThreatCloud_GetThreatVolume) == 0x00001C, "Wrong size on ThreatCloud_GetThreatVolume");
static_assert(offsetof(ThreatCloud_GetThreatVolume, ReturnValue) == 0x000000, "Member 'ThreatCloud_GetThreatVolume::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAsyncAction_SendQuestStatEvent.SendClientStatEvent
// 0x0028 (0x0028 - 0x0000)
struct FortAsyncAction_SendQuestStatEvent_SendClientStatEvent final
{
public:
	class UFortQuestManager*                      Param_QuestManager;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    Param_ObjectiveStat;                               // 0x0008(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Param_Count;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAsyncAction_SendQuestStatEvent*    ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAsyncAction_SendQuestStatEvent_SendClientStatEvent) == 0x000008, "Wrong alignment on FortAsyncAction_SendQuestStatEvent_SendClientStatEvent");
static_assert(sizeof(FortAsyncAction_SendQuestStatEvent_SendClientStatEvent) == 0x000028, "Wrong size on FortAsyncAction_SendQuestStatEvent_SendClientStatEvent");
static_assert(offsetof(FortAsyncAction_SendQuestStatEvent_SendClientStatEvent, Param_QuestManager) == 0x000000, "Member 'FortAsyncAction_SendQuestStatEvent_SendClientStatEvent::Param_QuestManager' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_SendQuestStatEvent_SendClientStatEvent, Param_ObjectiveStat) == 0x000008, "Member 'FortAsyncAction_SendQuestStatEvent_SendClientStatEvent::Param_ObjectiveStat' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_SendQuestStatEvent_SendClientStatEvent, Param_Count) == 0x000018, "Member 'FortAsyncAction_SendQuestStatEvent_SendClientStatEvent::Param_Count' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_SendQuestStatEvent_SendClientStatEvent, ReturnValue) == 0x000020, "Member 'FortAsyncAction_SendQuestStatEvent_SendClientStatEvent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAsyncAction_SendQuestStatEvent.SendClientStatEventWithTags
// 0x0078 (0x0078 - 0x0000)
struct FortAsyncAction_SendQuestStatEvent_SendClientStatEventWithTags final
{
public:
	class UFortQuestManager*                      Param_QuestManager;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Param_TargetTags;                                  // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Param_SourceTags;                                  // 0x0028(0x0020)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Param_ContextTags;                                 // 0x0048(0x0020)(Parm, NativeAccessSpecifierPublic)
	int32                                         Param_Count;                                       // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAsyncAction_SendQuestStatEvent*    ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAsyncAction_SendQuestStatEvent_SendClientStatEventWithTags) == 0x000008, "Wrong alignment on FortAsyncAction_SendQuestStatEvent_SendClientStatEventWithTags");
static_assert(sizeof(FortAsyncAction_SendQuestStatEvent_SendClientStatEventWithTags) == 0x000078, "Wrong size on FortAsyncAction_SendQuestStatEvent_SendClientStatEventWithTags");
static_assert(offsetof(FortAsyncAction_SendQuestStatEvent_SendClientStatEventWithTags, Param_QuestManager) == 0x000000, "Member 'FortAsyncAction_SendQuestStatEvent_SendClientStatEventWithTags::Param_QuestManager' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_SendQuestStatEvent_SendClientStatEventWithTags, Param_TargetTags) == 0x000008, "Member 'FortAsyncAction_SendQuestStatEvent_SendClientStatEventWithTags::Param_TargetTags' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_SendQuestStatEvent_SendClientStatEventWithTags, Param_SourceTags) == 0x000028, "Member 'FortAsyncAction_SendQuestStatEvent_SendClientStatEventWithTags::Param_SourceTags' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_SendQuestStatEvent_SendClientStatEventWithTags, Param_ContextTags) == 0x000048, "Member 'FortAsyncAction_SendQuestStatEvent_SendClientStatEventWithTags::Param_ContextTags' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_SendQuestStatEvent_SendClientStatEventWithTags, Param_Count) == 0x000068, "Member 'FortAsyncAction_SendQuestStatEvent_SendClientStatEventWithTags::Param_Count' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_SendQuestStatEvent_SendClientStatEventWithTags, ReturnValue) == 0x000070, "Member 'FortAsyncAction_SendQuestStatEvent_SendClientStatEventWithTags::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortUITeamInfo.GetTeamHitPointFractions
// 0x0020 (0x0020 - 0x0000)
struct FortUITeamInfo_GetTeamHitPointFractions final
{
public:
	TArray<float>                                 HealthFractions;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 ShieldFractions;                                   // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUITeamInfo_GetTeamHitPointFractions) == 0x000008, "Wrong alignment on FortUITeamInfo_GetTeamHitPointFractions");
static_assert(sizeof(FortUITeamInfo_GetTeamHitPointFractions) == 0x000020, "Wrong size on FortUITeamInfo_GetTeamHitPointFractions");
static_assert(offsetof(FortUITeamInfo_GetTeamHitPointFractions, HealthFractions) == 0x000000, "Member 'FortUITeamInfo_GetTeamHitPointFractions::HealthFractions' has a wrong offset!");
static_assert(offsetof(FortUITeamInfo_GetTeamHitPointFractions, ShieldFractions) == 0x000010, "Member 'FortUITeamInfo_GetTeamHitPointFractions::ShieldFractions' has a wrong offset!");

// Function FortniteGame.FortUITeamInfo.GetTeamMemberIDs
// 0x0010 (0x0010 - 0x0000)
struct FortUITeamInfo_GetTeamMemberIDs final
{
public:
	TArray<struct FUniqueNetIdRepl>               TeamMemberIDs;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUITeamInfo_GetTeamMemberIDs) == 0x000008, "Wrong alignment on FortUITeamInfo_GetTeamMemberIDs");
static_assert(sizeof(FortUITeamInfo_GetTeamMemberIDs) == 0x000010, "Wrong size on FortUITeamInfo_GetTeamMemberIDs");
static_assert(offsetof(FortUITeamInfo_GetTeamMemberIDs, TeamMemberIDs) == 0x000000, "Member 'FortUITeamInfo_GetTeamMemberIDs::TeamMemberIDs' has a wrong offset!");

// Function FortniteGame.FortUITeamInfo.GetTeamMembers
// 0x0010 (0x0010 - 0x0000)
struct FortUITeamInfo_GetTeamMembers final
{
public:
	TArray<struct FFortTeamMemberInfo>            TeamMembers;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUITeamInfo_GetTeamMembers) == 0x000008, "Wrong alignment on FortUITeamInfo_GetTeamMembers");
static_assert(sizeof(FortUITeamInfo_GetTeamMembers) == 0x000010, "Wrong size on FortUITeamInfo_GetTeamMembers");
static_assert(offsetof(FortUITeamInfo_GetTeamMembers, TeamMembers) == 0x000000, "Member 'FortUITeamInfo_GetTeamMembers::TeamMembers' has a wrong offset!");

// Function FortniteGame.FortUITeamInfo.IsTeamMemberSynchronizing
// 0x0030 (0x0030 - 0x0000)
struct FortUITeamInfo_IsTeamMemberSynchronizing final
{
public:
	struct FUniqueNetIdRepl                       PlayerID;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortUITeamInfo_IsTeamMemberSynchronizing) == 0x000008, "Wrong alignment on FortUITeamInfo_IsTeamMemberSynchronizing");
static_assert(sizeof(FortUITeamInfo_IsTeamMemberSynchronizing) == 0x000030, "Wrong size on FortUITeamInfo_IsTeamMemberSynchronizing");
static_assert(offsetof(FortUITeamInfo_IsTeamMemberSynchronizing, PlayerID) == 0x000000, "Member 'FortUITeamInfo_IsTeamMemberSynchronizing::PlayerID' has a wrong offset!");
static_assert(offsetof(FortUITeamInfo_IsTeamMemberSynchronizing, ReturnValue) == 0x000028, "Member 'FortUITeamInfo_IsTeamMemberSynchronizing::ReturnValue' has a wrong offset!");

// DelegateFunction FortniteGame.FortUITeamInfo.OnTeamHitPointFractionsChanged__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct FortUITeamInfo_OnTeamHitPointFractionsChanged__DelegateSignature final
{
public:
	TArray<float>                                 HealthFractions;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<float>                                 ShieldFractions;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUITeamInfo_OnTeamHitPointFractionsChanged__DelegateSignature) == 0x000008, "Wrong alignment on FortUITeamInfo_OnTeamHitPointFractionsChanged__DelegateSignature");
static_assert(sizeof(FortUITeamInfo_OnTeamHitPointFractionsChanged__DelegateSignature) == 0x000020, "Wrong size on FortUITeamInfo_OnTeamHitPointFractionsChanged__DelegateSignature");
static_assert(offsetof(FortUITeamInfo_OnTeamHitPointFractionsChanged__DelegateSignature, HealthFractions) == 0x000000, "Member 'FortUITeamInfo_OnTeamHitPointFractionsChanged__DelegateSignature::HealthFractions' has a wrong offset!");
static_assert(offsetof(FortUITeamInfo_OnTeamHitPointFractionsChanged__DelegateSignature, ShieldFractions) == 0x000010, "Member 'FortUITeamInfo_OnTeamHitPointFractionsChanged__DelegateSignature::ShieldFractions' has a wrong offset!");

// DelegateFunction FortniteGame.FortUITeamInfo.OnTeamMemberAddedDelegate__DelegateSignature
// 0x01A8 (0x01A8 - 0x0000)
struct FortUITeamInfo_OnTeamMemberAddedDelegate__DelegateSignature final
{
public:
	struct FFortTeamMemberInfo                    NewTeamMemberInfo;                                 // 0x0000(0x01A8)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUITeamInfo_OnTeamMemberAddedDelegate__DelegateSignature) == 0x000008, "Wrong alignment on FortUITeamInfo_OnTeamMemberAddedDelegate__DelegateSignature");
static_assert(sizeof(FortUITeamInfo_OnTeamMemberAddedDelegate__DelegateSignature) == 0x0001A8, "Wrong size on FortUITeamInfo_OnTeamMemberAddedDelegate__DelegateSignature");
static_assert(offsetof(FortUITeamInfo_OnTeamMemberAddedDelegate__DelegateSignature, NewTeamMemberInfo) == 0x000000, "Member 'FortUITeamInfo_OnTeamMemberAddedDelegate__DelegateSignature::NewTeamMemberInfo' has a wrong offset!");

// DelegateFunction FortniteGame.FortUITeamInfo.OnTeamMemberFinishedSynchronizingDelegate__DelegateSignature
// 0x0028 (0x0028 - 0x0000)
struct FortUITeamInfo_OnTeamMemberFinishedSynchronizingDelegate__DelegateSignature final
{
public:
	struct FUniqueNetIdRepl                       NewTeamMemberId;                                   // 0x0000(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUITeamInfo_OnTeamMemberFinishedSynchronizingDelegate__DelegateSignature) == 0x000008, "Wrong alignment on FortUITeamInfo_OnTeamMemberFinishedSynchronizingDelegate__DelegateSignature");
static_assert(sizeof(FortUITeamInfo_OnTeamMemberFinishedSynchronizingDelegate__DelegateSignature) == 0x000028, "Wrong size on FortUITeamInfo_OnTeamMemberFinishedSynchronizingDelegate__DelegateSignature");
static_assert(offsetof(FortUITeamInfo_OnTeamMemberFinishedSynchronizingDelegate__DelegateSignature, NewTeamMemberId) == 0x000000, "Member 'FortUITeamInfo_OnTeamMemberFinishedSynchronizingDelegate__DelegateSignature::NewTeamMemberId' has a wrong offset!");

// DelegateFunction FortniteGame.FortUITeamInfo.OnTeamMemberRemovedDelegate__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct FortUITeamInfo_OnTeamMemberRemovedDelegate__DelegateSignature final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUITeamInfo_OnTeamMemberRemovedDelegate__DelegateSignature) == 0x000004, "Wrong alignment on FortUITeamInfo_OnTeamMemberRemovedDelegate__DelegateSignature");
static_assert(sizeof(FortUITeamInfo_OnTeamMemberRemovedDelegate__DelegateSignature) == 0x000004, "Wrong size on FortUITeamInfo_OnTeamMemberRemovedDelegate__DelegateSignature");
static_assert(offsetof(FortUITeamInfo_OnTeamMemberRemovedDelegate__DelegateSignature, PlayerIndex) == 0x000000, "Member 'FortUITeamInfo_OnTeamMemberRemovedDelegate__DelegateSignature::PlayerIndex' has a wrong offset!");

// DelegateFunction FortniteGame.FortUITeamInfo.OnTeamMemberStateChangedDelegate__DelegateSignature
// 0x01A8 (0x01A8 - 0x0000)
struct FortUITeamInfo_OnTeamMemberStateChangedDelegate__DelegateSignature final
{
public:
	struct FFortTeamMemberInfo                    TeamMemberInfo;                                    // 0x0000(0x01A8)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUITeamInfo_OnTeamMemberStateChangedDelegate__DelegateSignature) == 0x000008, "Wrong alignment on FortUITeamInfo_OnTeamMemberStateChangedDelegate__DelegateSignature");
static_assert(sizeof(FortUITeamInfo_OnTeamMemberStateChangedDelegate__DelegateSignature) == 0x0001A8, "Wrong size on FortUITeamInfo_OnTeamMemberStateChangedDelegate__DelegateSignature");
static_assert(offsetof(FortUITeamInfo_OnTeamMemberStateChangedDelegate__DelegateSignature, TeamMemberInfo) == 0x000000, "Member 'FortUITeamInfo_OnTeamMemberStateChangedDelegate__DelegateSignature::TeamMemberInfo' has a wrong offset!");

// Function FortniteGame.FortAbilitySystemUI.GetDefaultObjectOfGameplayEffectType
// 0x0010 (0x0010 - 0x0000)
struct FortAbilitySystemUI_GetDefaultObjectOfGameplayEffectType final
{
public:
	TSubclassOf<class UGameplayEffect>            EffectType;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameplayEffect*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilitySystemUI_GetDefaultObjectOfGameplayEffectType) == 0x000008, "Wrong alignment on FortAbilitySystemUI_GetDefaultObjectOfGameplayEffectType");
static_assert(sizeof(FortAbilitySystemUI_GetDefaultObjectOfGameplayEffectType) == 0x000010, "Wrong size on FortAbilitySystemUI_GetDefaultObjectOfGameplayEffectType");
static_assert(offsetof(FortAbilitySystemUI_GetDefaultObjectOfGameplayEffectType, EffectType) == 0x000000, "Member 'FortAbilitySystemUI_GetDefaultObjectOfGameplayEffectType::EffectType' has a wrong offset!");
static_assert(offsetof(FortAbilitySystemUI_GetDefaultObjectOfGameplayEffectType, ReturnValue) == 0x000008, "Member 'FortAbilitySystemUI_GetDefaultObjectOfGameplayEffectType::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilitySystemUI.GetStaticGameplayEffectDescription
// 0x0060 (0x0060 - 0x0000)
struct FortAbilitySystemUI_GetStaticGameplayEffectDescription final
{
public:
	const class UGameplayEffect*                  Effect;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Level;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortGameplayEffectDescription         ReturnValue;                                       // 0x0010(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilitySystemUI_GetStaticGameplayEffectDescription) == 0x000008, "Wrong alignment on FortAbilitySystemUI_GetStaticGameplayEffectDescription");
static_assert(sizeof(FortAbilitySystemUI_GetStaticGameplayEffectDescription) == 0x000060, "Wrong size on FortAbilitySystemUI_GetStaticGameplayEffectDescription");
static_assert(offsetof(FortAbilitySystemUI_GetStaticGameplayEffectDescription, Effect) == 0x000000, "Member 'FortAbilitySystemUI_GetStaticGameplayEffectDescription::Effect' has a wrong offset!");
static_assert(offsetof(FortAbilitySystemUI_GetStaticGameplayEffectDescription, Level) == 0x000008, "Member 'FortAbilitySystemUI_GetStaticGameplayEffectDescription::Level' has a wrong offset!");
static_assert(offsetof(FortAbilitySystemUI_GetStaticGameplayEffectDescription, ReturnValue) == 0x000010, "Member 'FortAbilitySystemUI_GetStaticGameplayEffectDescription::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityTask_CommitAccountCosts.CommitAccountCosts
// 0x0010 (0x0010 - 0x0000)
struct FortAbilityTask_CommitAccountCosts_CommitAccountCosts final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAbilityTask_CommitAccountCosts*    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityTask_CommitAccountCosts_CommitAccountCosts) == 0x000008, "Wrong alignment on FortAbilityTask_CommitAccountCosts_CommitAccountCosts");
static_assert(sizeof(FortAbilityTask_CommitAccountCosts_CommitAccountCosts) == 0x000010, "Wrong size on FortAbilityTask_CommitAccountCosts_CommitAccountCosts");
static_assert(offsetof(FortAbilityTask_CommitAccountCosts_CommitAccountCosts, OwningAbility) == 0x000000, "Member 'FortAbilityTask_CommitAccountCosts_CommitAccountCosts::OwningAbility' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_CommitAccountCosts_CommitAccountCosts, ReturnValue) == 0x000008, "Member 'FortAbilityTask_CommitAccountCosts_CommitAccountCosts::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTheaterMapTile.OnDeselectWrapper
// 0x0001 (0x0001 - 0x0000)
struct FortTheaterMapTile_OnDeselectWrapper final
{
public:
	bool                                          bIsGameSessionOwner;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTheaterMapTile_OnDeselectWrapper) == 0x000001, "Wrong alignment on FortTheaterMapTile_OnDeselectWrapper");
static_assert(sizeof(FortTheaterMapTile_OnDeselectWrapper) == 0x000001, "Wrong size on FortTheaterMapTile_OnDeselectWrapper");
static_assert(offsetof(FortTheaterMapTile_OnDeselectWrapper, bIsGameSessionOwner) == 0x000000, "Member 'FortTheaterMapTile_OnDeselectWrapper::bIsGameSessionOwner' has a wrong offset!");

// Function FortniteGame.FortTheaterMapTile.OnMouseOverBegin
// 0x0008 (0x0008 - 0x0000)
struct FortTheaterMapTile_OnMouseOverBegin final
{
public:
	class AActor*                                 MousedOverActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTheaterMapTile_OnMouseOverBegin) == 0x000008, "Wrong alignment on FortTheaterMapTile_OnMouseOverBegin");
static_assert(sizeof(FortTheaterMapTile_OnMouseOverBegin) == 0x000008, "Wrong size on FortTheaterMapTile_OnMouseOverBegin");
static_assert(offsetof(FortTheaterMapTile_OnMouseOverBegin, MousedOverActor) == 0x000000, "Member 'FortTheaterMapTile_OnMouseOverBegin::MousedOverActor' has a wrong offset!");

// Function FortniteGame.FortTheaterMapTile.OnMouseOverEnd
// 0x0008 (0x0008 - 0x0000)
struct FortTheaterMapTile_OnMouseOverEnd final
{
public:
	class AActor*                                 MousedOverActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTheaterMapTile_OnMouseOverEnd) == 0x000008, "Wrong alignment on FortTheaterMapTile_OnMouseOverEnd");
static_assert(sizeof(FortTheaterMapTile_OnMouseOverEnd) == 0x000008, "Wrong size on FortTheaterMapTile_OnMouseOverEnd");
static_assert(offsetof(FortTheaterMapTile_OnMouseOverEnd, MousedOverActor) == 0x000000, "Member 'FortTheaterMapTile_OnMouseOverEnd::MousedOverActor' has a wrong offset!");

// Function FortniteGame.FortTheaterMapTile.OnSelectWrapper
// 0x0001 (0x0001 - 0x0000)
struct FortTheaterMapTile_OnSelectWrapper final
{
public:
	bool                                          bIsGameSessionOwner;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTheaterMapTile_OnSelectWrapper) == 0x000001, "Wrong alignment on FortTheaterMapTile_OnSelectWrapper");
static_assert(sizeof(FortTheaterMapTile_OnSelectWrapper) == 0x000001, "Wrong size on FortTheaterMapTile_OnSelectWrapper");
static_assert(offsetof(FortTheaterMapTile_OnSelectWrapper, bIsGameSessionOwner) == 0x000000, "Member 'FortTheaterMapTile_OnSelectWrapper::bIsGameSessionOwner' has a wrong offset!");

// Function FortniteGame.FortTheaterMapTile.OnTileClicked
// 0x0020 (0x0020 - 0x0000)
struct FortTheaterMapTile_OnTileClicked final
{
public:
	class AActor*                                 ClickedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   ButtonReleased;                                    // 0x0008(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTheaterMapTile_OnTileClicked) == 0x000008, "Wrong alignment on FortTheaterMapTile_OnTileClicked");
static_assert(sizeof(FortTheaterMapTile_OnTileClicked) == 0x000020, "Wrong size on FortTheaterMapTile_OnTileClicked");
static_assert(offsetof(FortTheaterMapTile_OnTileClicked, ClickedActor) == 0x000000, "Member 'FortTheaterMapTile_OnTileClicked::ClickedActor' has a wrong offset!");
static_assert(offsetof(FortTheaterMapTile_OnTileClicked, ButtonReleased) == 0x000008, "Member 'FortTheaterMapTile_OnTileClicked::ButtonReleased' has a wrong offset!");

// Function FortniteGame.FortTheaterMapTile.DoesTileAllowQuickplay
// 0x0001 (0x0001 - 0x0000)
struct FortTheaterMapTile_DoesTileAllowQuickplay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTheaterMapTile_DoesTileAllowQuickplay) == 0x000001, "Wrong alignment on FortTheaterMapTile_DoesTileAllowQuickplay");
static_assert(sizeof(FortTheaterMapTile_DoesTileAllowQuickplay) == 0x000001, "Wrong size on FortTheaterMapTile_DoesTileAllowQuickplay");
static_assert(offsetof(FortTheaterMapTile_DoesTileAllowQuickplay, ReturnValue) == 0x000000, "Member 'FortTheaterMapTile_DoesTileAllowQuickplay::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTheaterMapTile.GetMissionAlertCategory
// 0x0001 (0x0001 - 0x0000)
struct FortTheaterMapTile_GetMissionAlertCategory final
{
public:
	EFortMissionAlertCategory                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTheaterMapTile_GetMissionAlertCategory) == 0x000001, "Wrong alignment on FortTheaterMapTile_GetMissionAlertCategory");
static_assert(sizeof(FortTheaterMapTile_GetMissionAlertCategory) == 0x000001, "Wrong size on FortTheaterMapTile_GetMissionAlertCategory");
static_assert(offsetof(FortTheaterMapTile_GetMissionAlertCategory, ReturnValue) == 0x000000, "Member 'FortTheaterMapTile_GetMissionAlertCategory::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTheaterMapTile.GetZoneDifficulty
// 0x0080 (0x0080 - 0x0000)
struct FortTheaterMapTile_GetZoneDifficulty final
{
public:
	struct FGameDifficultyInfo                    ReturnValue;                                       // 0x0000(0x0080)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTheaterMapTile_GetZoneDifficulty) == 0x000008, "Wrong alignment on FortTheaterMapTile_GetZoneDifficulty");
static_assert(sizeof(FortTheaterMapTile_GetZoneDifficulty) == 0x000080, "Wrong size on FortTheaterMapTile_GetZoneDifficulty");
static_assert(offsetof(FortTheaterMapTile_GetZoneDifficulty, ReturnValue) == 0x000000, "Member 'FortTheaterMapTile_GetZoneDifficulty::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTheaterMapTile.HasValidMissionData
// 0x0001 (0x0001 - 0x0000)
struct FortTheaterMapTile_HasValidMissionData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTheaterMapTile_HasValidMissionData) == 0x000001, "Wrong alignment on FortTheaterMapTile_HasValidMissionData");
static_assert(sizeof(FortTheaterMapTile_HasValidMissionData) == 0x000001, "Wrong size on FortTheaterMapTile_HasValidMissionData");
static_assert(offsetof(FortTheaterMapTile_HasValidMissionData, ReturnValue) == 0x000000, "Member 'FortTheaterMapTile_HasValidMissionData::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTheaterMapTile.IsMissionAlertTile
// 0x0001 (0x0001 - 0x0000)
struct FortTheaterMapTile_IsMissionAlertTile final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTheaterMapTile_IsMissionAlertTile) == 0x000001, "Wrong alignment on FortTheaterMapTile_IsMissionAlertTile");
static_assert(sizeof(FortTheaterMapTile_IsMissionAlertTile) == 0x000001, "Wrong size on FortTheaterMapTile_IsMissionAlertTile");
static_assert(offsetof(FortTheaterMapTile_IsMissionAlertTile, ReturnValue) == 0x000000, "Member 'FortTheaterMapTile_IsMissionAlertTile::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTheaterMapTile.IsTileHidden
// 0x0001 (0x0001 - 0x0000)
struct FortTheaterMapTile_IsTileHidden final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTheaterMapTile_IsTileHidden) == 0x000001, "Wrong alignment on FortTheaterMapTile_IsTileHidden");
static_assert(sizeof(FortTheaterMapTile_IsTileHidden) == 0x000001, "Wrong size on FortTheaterMapTile_IsTileHidden");
static_assert(offsetof(FortTheaterMapTile_IsTileHidden, ReturnValue) == 0x000000, "Member 'FortTheaterMapTile_IsTileHidden::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTheaterMapTile.IsTileLocked
// 0x0001 (0x0001 - 0x0000)
struct FortTheaterMapTile_IsTileLocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTheaterMapTile_IsTileLocked) == 0x000001, "Wrong alignment on FortTheaterMapTile_IsTileLocked");
static_assert(sizeof(FortTheaterMapTile_IsTileLocked) == 0x000001, "Wrong size on FortTheaterMapTile_IsTileLocked");
static_assert(offsetof(FortTheaterMapTile_IsTileLocked, ReturnValue) == 0x000000, "Member 'FortTheaterMapTile_IsTileLocked::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTheaterMapTile.IsTilePlayable
// 0x0001 (0x0001 - 0x0000)
struct FortTheaterMapTile_IsTilePlayable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTheaterMapTile_IsTilePlayable) == 0x000001, "Wrong alignment on FortTheaterMapTile_IsTilePlayable");
static_assert(sizeof(FortTheaterMapTile_IsTilePlayable) == 0x000001, "Wrong size on FortTheaterMapTile_IsTilePlayable");
static_assert(offsetof(FortTheaterMapTile_IsTilePlayable, ReturnValue) == 0x000000, "Member 'FortTheaterMapTile_IsTilePlayable::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTheaterMapTile.IsTileQuestRecommended
// 0x0001 (0x0001 - 0x0000)
struct FortTheaterMapTile_IsTileQuestRecommended final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTheaterMapTile_IsTileQuestRecommended) == 0x000001, "Wrong alignment on FortTheaterMapTile_IsTileQuestRecommended");
static_assert(sizeof(FortTheaterMapTile_IsTileQuestRecommended) == 0x000001, "Wrong size on FortTheaterMapTile_IsTileQuestRecommended");
static_assert(offsetof(FortTheaterMapTile_IsTileQuestRecommended, ReturnValue) == 0x000000, "Member 'FortTheaterMapTile_IsTileQuestRecommended::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTheaterMapTile.IsTileSelectable
// 0x0001 (0x0001 - 0x0000)
struct FortTheaterMapTile_IsTileSelectable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTheaterMapTile_IsTileSelectable) == 0x000001, "Wrong alignment on FortTheaterMapTile_IsTileSelectable");
static_assert(sizeof(FortTheaterMapTile_IsTileSelectable) == 0x000001, "Wrong size on FortTheaterMapTile_IsTileSelectable");
static_assert(offsetof(FortTheaterMapTile_IsTileSelectable, ReturnValue) == 0x000000, "Member 'FortTheaterMapTile_IsTileSelectable::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTheaterMapTile.IsTileValidForMarkedQuest
// 0x0010 (0x0010 - 0x0000)
struct FortTheaterMapTile_IsTileValidForMarkedQuest final
{
public:
	class UFortQuestItem*                         OutMarkedQuest;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTheaterMapTile_IsTileValidForMarkedQuest) == 0x000008, "Wrong alignment on FortTheaterMapTile_IsTileValidForMarkedQuest");
static_assert(sizeof(FortTheaterMapTile_IsTileValidForMarkedQuest) == 0x000010, "Wrong size on FortTheaterMapTile_IsTileValidForMarkedQuest");
static_assert(offsetof(FortTheaterMapTile_IsTileValidForMarkedQuest, OutMarkedQuest) == 0x000000, "Member 'FortTheaterMapTile_IsTileValidForMarkedQuest::OutMarkedQuest' has a wrong offset!");
static_assert(offsetof(FortTheaterMapTile_IsTileValidForMarkedQuest, ReturnValue) == 0x000008, "Member 'FortTheaterMapTile_IsTileValidForMarkedQuest::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityTask_DirectedMovement.DirectedMovement
// 0x0030 (0x0030 - 0x0000)
struct FortAbilityTask_DirectedMovement_DirectedMovement final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MovementDirection;                                 // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDirectedMovementSpace                    MovementSpaceType;                                 // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Param_MovementDistance;                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovementDuration;                                  // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IdealDistance;                                     // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ModifyZ;                                           // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bCancelOnFalling;                            // 0x0025(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAbilityTask_DirectedMovement*      ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityTask_DirectedMovement_DirectedMovement) == 0x000008, "Wrong alignment on FortAbilityTask_DirectedMovement_DirectedMovement");
static_assert(sizeof(FortAbilityTask_DirectedMovement_DirectedMovement) == 0x000030, "Wrong size on FortAbilityTask_DirectedMovement_DirectedMovement");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovement, OwningAbility) == 0x000000, "Member 'FortAbilityTask_DirectedMovement_DirectedMovement::OwningAbility' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovement, MovementDirection) == 0x000008, "Member 'FortAbilityTask_DirectedMovement_DirectedMovement::MovementDirection' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovement, MovementSpaceType) == 0x000014, "Member 'FortAbilityTask_DirectedMovement_DirectedMovement::MovementSpaceType' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovement, Param_MovementDistance) == 0x000018, "Member 'FortAbilityTask_DirectedMovement_DirectedMovement::Param_MovementDistance' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovement, MovementDuration) == 0x00001C, "Member 'FortAbilityTask_DirectedMovement_DirectedMovement::MovementDuration' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovement, IdealDistance) == 0x000020, "Member 'FortAbilityTask_DirectedMovement_DirectedMovement::IdealDistance' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovement, ModifyZ) == 0x000024, "Member 'FortAbilityTask_DirectedMovement_DirectedMovement::ModifyZ' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovement, Param_bCancelOnFalling) == 0x000025, "Member 'FortAbilityTask_DirectedMovement_DirectedMovement::Param_bCancelOnFalling' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovement, ReturnValue) == 0x000028, "Member 'FortAbilityTask_DirectedMovement_DirectedMovement::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityTask_DirectedMovement.DirectedMovementToActor
// 0x0028 (0x0028 - 0x0000)
struct FortAbilityTask_DirectedMovement_DirectedMovementToActor final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxMovementDistance;                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovementDuration;                                  // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IdealDistance;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ModifyZ;                                           // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bCancelOnFalling;                            // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAbilityTask_DirectedMovement*      ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityTask_DirectedMovement_DirectedMovementToActor) == 0x000008, "Wrong alignment on FortAbilityTask_DirectedMovement_DirectedMovementToActor");
static_assert(sizeof(FortAbilityTask_DirectedMovement_DirectedMovementToActor) == 0x000028, "Wrong size on FortAbilityTask_DirectedMovement_DirectedMovementToActor");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToActor, OwningAbility) == 0x000000, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToActor::OwningAbility' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToActor, TargetActor) == 0x000008, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToActor::TargetActor' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToActor, MaxMovementDistance) == 0x000010, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToActor::MaxMovementDistance' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToActor, MovementDuration) == 0x000014, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToActor::MovementDuration' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToActor, IdealDistance) == 0x000018, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToActor::IdealDistance' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToActor, ModifyZ) == 0x00001C, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToActor::ModifyZ' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToActor, Param_bCancelOnFalling) == 0x00001D, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToActor::Param_bCancelOnFalling' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToActor, ReturnValue) == 0x000020, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityTask_DirectedMovement.DirectedMovementToComponent
// 0x0028 (0x0028 - 0x0000)
struct FortAbilityTask_DirectedMovement_DirectedMovementToComponent final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        Param_TargetComponent;                             // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxMovementDistance;                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovementDuration;                                  // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IdealDistance;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ModifyZ;                                           // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bCancelOnFalling;                            // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAbilityTask_DirectedMovement*      ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityTask_DirectedMovement_DirectedMovementToComponent) == 0x000008, "Wrong alignment on FortAbilityTask_DirectedMovement_DirectedMovementToComponent");
static_assert(sizeof(FortAbilityTask_DirectedMovement_DirectedMovementToComponent) == 0x000028, "Wrong size on FortAbilityTask_DirectedMovement_DirectedMovementToComponent");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToComponent, OwningAbility) == 0x000000, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToComponent::OwningAbility' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToComponent, Param_TargetComponent) == 0x000008, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToComponent::Param_TargetComponent' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToComponent, MaxMovementDistance) == 0x000010, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToComponent::MaxMovementDistance' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToComponent, MovementDuration) == 0x000014, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToComponent::MovementDuration' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToComponent, IdealDistance) == 0x000018, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToComponent::IdealDistance' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToComponent, ModifyZ) == 0x00001C, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToComponent::ModifyZ' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToComponent, Param_bCancelOnFalling) == 0x00001D, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToComponent::Param_bCancelOnFalling' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToComponent, ReturnValue) == 0x000020, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToComponent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityTask_DirectedMovement.DirectedMovementToLocation
// 0x0030 (0x0030 - 0x0000)
struct FortAbilityTask_DirectedMovement_DirectedMovementToLocation final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MovementTargetLocation;                            // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDirectedMovementSpace                    MovementSpaceType;                                 // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MovementDuration;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloseEnoughDistance;                               // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ModifyZ;                                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bCancelOnFalling;                            // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAbilityTask_DirectedMovement*      ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityTask_DirectedMovement_DirectedMovementToLocation) == 0x000008, "Wrong alignment on FortAbilityTask_DirectedMovement_DirectedMovementToLocation");
static_assert(sizeof(FortAbilityTask_DirectedMovement_DirectedMovementToLocation) == 0x000030, "Wrong size on FortAbilityTask_DirectedMovement_DirectedMovementToLocation");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToLocation, OwningAbility) == 0x000000, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToLocation::OwningAbility' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToLocation, MovementTargetLocation) == 0x000008, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToLocation::MovementTargetLocation' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToLocation, MovementSpaceType) == 0x000014, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToLocation::MovementSpaceType' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToLocation, MovementDuration) == 0x000018, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToLocation::MovementDuration' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToLocation, CloseEnoughDistance) == 0x00001C, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToLocation::CloseEnoughDistance' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToLocation, ModifyZ) == 0x000020, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToLocation::ModifyZ' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToLocation, Param_bCancelOnFalling) == 0x000021, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToLocation::Param_bCancelOnFalling' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToLocation, ReturnValue) == 0x000028, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToLocation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityTask_MoveAI.CreateMoveAITask
// 0x0050 (0x0050 - 0x0000)
struct FortAbilityTask_MoveAI_CreateMoveAITask final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 MoveActor;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MoveLocation;                                      // 0x0018(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPawnActionMoveMode                           MoveMode;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPathObstacleAction                           PathObstacleAction;                                // 0x0025(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopAtEnd;                                        // 0x0026(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIOptionFlag                                 AcceptPartialPath;                                 // 0x0027(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFinishOnPlayerCollision;                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProjectGoalLocationOnNavMesh;                     // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AcceptableRadius;                                  // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AFortPawn>                  PushBumpedPawnClass;                               // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavigationQueryFilter>     FilterClass;                                       // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseContinuousGoalTracking;                        // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAbilityTask_MoveAI*                ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityTask_MoveAI_CreateMoveAITask) == 0x000008, "Wrong alignment on FortAbilityTask_MoveAI_CreateMoveAITask");
static_assert(sizeof(FortAbilityTask_MoveAI_CreateMoveAITask) == 0x000050, "Wrong size on FortAbilityTask_MoveAI_CreateMoveAITask");
static_assert(offsetof(FortAbilityTask_MoveAI_CreateMoveAITask, OwningAbility) == 0x000000, "Member 'FortAbilityTask_MoveAI_CreateMoveAITask::OwningAbility' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_MoveAI_CreateMoveAITask, TaskInstanceName) == 0x000008, "Member 'FortAbilityTask_MoveAI_CreateMoveAITask::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_MoveAI_CreateMoveAITask, MoveActor) == 0x000010, "Member 'FortAbilityTask_MoveAI_CreateMoveAITask::MoveActor' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_MoveAI_CreateMoveAITask, MoveLocation) == 0x000018, "Member 'FortAbilityTask_MoveAI_CreateMoveAITask::MoveLocation' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_MoveAI_CreateMoveAITask, MoveMode) == 0x000024, "Member 'FortAbilityTask_MoveAI_CreateMoveAITask::MoveMode' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_MoveAI_CreateMoveAITask, PathObstacleAction) == 0x000025, "Member 'FortAbilityTask_MoveAI_CreateMoveAITask::PathObstacleAction' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_MoveAI_CreateMoveAITask, bStopAtEnd) == 0x000026, "Member 'FortAbilityTask_MoveAI_CreateMoveAITask::bStopAtEnd' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_MoveAI_CreateMoveAITask, AcceptPartialPath) == 0x000027, "Member 'FortAbilityTask_MoveAI_CreateMoveAITask::AcceptPartialPath' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_MoveAI_CreateMoveAITask, bFinishOnPlayerCollision) == 0x000028, "Member 'FortAbilityTask_MoveAI_CreateMoveAITask::bFinishOnPlayerCollision' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_MoveAI_CreateMoveAITask, bProjectGoalLocationOnNavMesh) == 0x000029, "Member 'FortAbilityTask_MoveAI_CreateMoveAITask::bProjectGoalLocationOnNavMesh' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_MoveAI_CreateMoveAITask, AcceptableRadius) == 0x00002C, "Member 'FortAbilityTask_MoveAI_CreateMoveAITask::AcceptableRadius' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_MoveAI_CreateMoveAITask, PushBumpedPawnClass) == 0x000030, "Member 'FortAbilityTask_MoveAI_CreateMoveAITask::PushBumpedPawnClass' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_MoveAI_CreateMoveAITask, FilterClass) == 0x000038, "Member 'FortAbilityTask_MoveAI_CreateMoveAITask::FilterClass' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_MoveAI_CreateMoveAITask, bUseContinuousGoalTracking) == 0x000040, "Member 'FortAbilityTask_MoveAI_CreateMoveAITask::bUseContinuousGoalTracking' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_MoveAI_CreateMoveAITask, ReturnValue) == 0x000048, "Member 'FortAbilityTask_MoveAI_CreateMoveAITask::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityTask_PlayMontageWaitTarget.PlayMontageInfoAndWaitForTrigger
// 0x0078 (0x0078 - 0x0000)
struct FortAbilityTask_PlayMontageWaitTarget_PlayMontageInfoAndWaitForTrigger final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortGameplayAbilityMontageInfo        Param_MontageInfo;                                 // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UFortAbilityTask_PlayMontageWaitTarget* ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageInfoAndWaitForTrigger) == 0x000008, "Wrong alignment on FortAbilityTask_PlayMontageWaitTarget_PlayMontageInfoAndWaitForTrigger");
static_assert(sizeof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageInfoAndWaitForTrigger) == 0x000078, "Wrong size on FortAbilityTask_PlayMontageWaitTarget_PlayMontageInfoAndWaitForTrigger");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageInfoAndWaitForTrigger, OwningAbility) == 0x000000, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageInfoAndWaitForTrigger::OwningAbility' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageInfoAndWaitForTrigger, TaskInstanceName) == 0x000008, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageInfoAndWaitForTrigger::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageInfoAndWaitForTrigger, Param_MontageInfo) == 0x000010, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageInfoAndWaitForTrigger::Param_MontageInfo' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageInfoAndWaitForTrigger, ReturnValue) == 0x000070, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageInfoAndWaitForTrigger::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityTask_PlayMontageWaitTarget.PlayMontageWaitTarget
// 0x0038 (0x0038 - 0x0000)
struct FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           MontageToPlay;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimPlayRate;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortGameplayAbilityMontageSectionToPlay      SectionToPlay;                                     // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OverrideSection;                                   // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimRootMotionTranslationScale;                    // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAbilityTask_PlayMontageWaitTarget* ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget) == 0x000008, "Wrong alignment on FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget");
static_assert(sizeof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget) == 0x000038, "Wrong size on FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget, OwningAbility) == 0x000000, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget::OwningAbility' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget, TaskInstanceName) == 0x000008, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget, MontageToPlay) == 0x000010, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget::MontageToPlay' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget, AnimPlayRate) == 0x000018, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget::AnimPlayRate' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget, SectionToPlay) == 0x00001C, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget::SectionToPlay' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget, OverrideSection) == 0x000020, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget::OverrideSection' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget, AnimRootMotionTranslationScale) == 0x000028, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget::AnimRootMotionTranslationScale' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget, ReturnValue) == 0x000030, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityTask_PlayMontageWaitTarget.PlayMontageWithCharPartsWait
// 0x0048 (0x0048 - 0x0000)
struct FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           MontageToPlay;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortCharacterPartMontageInfo>  CharacterPartMontages;                             // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         AnimPlayRate;                                      // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortGameplayAbilityMontageSectionToPlay      SectionToPlay;                                     // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OverrideSection;                                   // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimRootMotionTranslationScale;                    // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAbilityTask_PlayMontageWaitTarget* ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait) == 0x000008, "Wrong alignment on FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait");
static_assert(sizeof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait) == 0x000048, "Wrong size on FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait, OwningAbility) == 0x000000, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait::OwningAbility' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait, TaskInstanceName) == 0x000008, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait, MontageToPlay) == 0x000010, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait::MontageToPlay' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait, CharacterPartMontages) == 0x000018, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait::CharacterPartMontages' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait, AnimPlayRate) == 0x000028, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait::AnimPlayRate' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait, SectionToPlay) == 0x00002C, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait::SectionToPlay' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait, OverrideSection) == 0x000030, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait::OverrideSection' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait, AnimRootMotionTranslationScale) == 0x000038, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait::AnimRootMotionTranslationScale' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait, ReturnValue) == 0x000040, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityTask_PlayMontageWaitTarget.OnTargetDataReadyCallback
// 0x0028 (0x0028 - 0x0000)
struct FortAbilityTask_PlayMontageWaitTarget_OnTargetDataReadyCallback final
{
public:
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ApplicationTag;                                    // 0x0020(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityTask_PlayMontageWaitTarget_OnTargetDataReadyCallback) == 0x000008, "Wrong alignment on FortAbilityTask_PlayMontageWaitTarget_OnTargetDataReadyCallback");
static_assert(sizeof(FortAbilityTask_PlayMontageWaitTarget_OnTargetDataReadyCallback) == 0x000028, "Wrong size on FortAbilityTask_PlayMontageWaitTarget_OnTargetDataReadyCallback");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_OnTargetDataReadyCallback, TargetData) == 0x000000, "Member 'FortAbilityTask_PlayMontageWaitTarget_OnTargetDataReadyCallback::TargetData' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_OnTargetDataReadyCallback, ApplicationTag) == 0x000020, "Member 'FortAbilityTask_PlayMontageWaitTarget_OnTargetDataReadyCallback::ApplicationTag' has a wrong offset!");

// Function FortniteGame.FortAsyncAction_WaitForClientAnnouncement.WaitForClientAnnouncement
// 0x0018 (0x0018 - 0x0000)
struct FortAsyncAction_WaitForClientAnnouncement_WaitForClientAnnouncement final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortClientAnnouncement*                AnnouncementToWaitFor;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAsyncAction_WaitForClientAnnouncement* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAsyncAction_WaitForClientAnnouncement_WaitForClientAnnouncement) == 0x000008, "Wrong alignment on FortAsyncAction_WaitForClientAnnouncement_WaitForClientAnnouncement");
static_assert(sizeof(FortAsyncAction_WaitForClientAnnouncement_WaitForClientAnnouncement) == 0x000018, "Wrong size on FortAsyncAction_WaitForClientAnnouncement_WaitForClientAnnouncement");
static_assert(offsetof(FortAsyncAction_WaitForClientAnnouncement_WaitForClientAnnouncement, InWorldContextObject) == 0x000000, "Member 'FortAsyncAction_WaitForClientAnnouncement_WaitForClientAnnouncement::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_WaitForClientAnnouncement_WaitForClientAnnouncement, AnnouncementToWaitFor) == 0x000008, "Member 'FortAsyncAction_WaitForClientAnnouncement_WaitForClientAnnouncement::AnnouncementToWaitFor' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_WaitForClientAnnouncement_WaitForClientAnnouncement, ReturnValue) == 0x000010, "Member 'FortAsyncAction_WaitForClientAnnouncement_WaitForClientAnnouncement::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortUINotification.CreateWidget
// 0x0010 (0x0010 - 0x0000)
struct FortUINotification_CreateWidget final
{
public:
	class APlayerController*                      OwningPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUINotification_CreateWidget) == 0x000008, "Wrong alignment on FortUINotification_CreateWidget");
static_assert(sizeof(FortUINotification_CreateWidget) == 0x000010, "Wrong size on FortUINotification_CreateWidget");
static_assert(offsetof(FortUINotification_CreateWidget, OwningPlayer) == 0x000000, "Member 'FortUINotification_CreateWidget::OwningPlayer' has a wrong offset!");
static_assert(offsetof(FortUINotification_CreateWidget, ReturnValue) == 0x000008, "Member 'FortUINotification_CreateWidget::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortUINotification.GetImageOverride
// 0x0008 (0x0008 - 0x0000)
struct FortUINotification_GetImageOverride final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUINotification_GetImageOverride) == 0x000008, "Wrong alignment on FortUINotification_GetImageOverride");
static_assert(sizeof(FortUINotification_GetImageOverride) == 0x000008, "Wrong size on FortUINotification_GetImageOverride");
static_assert(offsetof(FortUINotification_GetImageOverride, ReturnValue) == 0x000000, "Member 'FortUINotification_GetImageOverride::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortUINotification.ShouldShowNotification
// 0x0001 (0x0001 - 0x0000)
struct FortUINotification_ShouldShowNotification final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUINotification_ShouldShowNotification) == 0x000001, "Wrong alignment on FortUINotification_ShouldShowNotification");
static_assert(sizeof(FortUINotification_ShouldShowNotification) == 0x000001, "Wrong size on FortUINotification_ShouldShowNotification");
static_assert(offsetof(FortUINotification_ShouldShowNotification, ReturnValue) == 0x000000, "Member 'FortUINotification_ShouldShowNotification::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityTask_SetNextMontageSectionAndWait.SetNextMontageSectionAndWait
// 0x0020 (0x0020 - 0x0000)
struct FortAbilityTask_SetNextMontageSectionAndWait_SetNextMontageSectionAndWait final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           PlayingMontage;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NextMontageSection;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAbilityTask_SetNextMontageSectionAndWait* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityTask_SetNextMontageSectionAndWait_SetNextMontageSectionAndWait) == 0x000008, "Wrong alignment on FortAbilityTask_SetNextMontageSectionAndWait_SetNextMontageSectionAndWait");
static_assert(sizeof(FortAbilityTask_SetNextMontageSectionAndWait_SetNextMontageSectionAndWait) == 0x000020, "Wrong size on FortAbilityTask_SetNextMontageSectionAndWait_SetNextMontageSectionAndWait");
static_assert(offsetof(FortAbilityTask_SetNextMontageSectionAndWait_SetNextMontageSectionAndWait, OwningAbility) == 0x000000, "Member 'FortAbilityTask_SetNextMontageSectionAndWait_SetNextMontageSectionAndWait::OwningAbility' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_SetNextMontageSectionAndWait_SetNextMontageSectionAndWait, PlayingMontage) == 0x000008, "Member 'FortAbilityTask_SetNextMontageSectionAndWait_SetNextMontageSectionAndWait::PlayingMontage' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_SetNextMontageSectionAndWait_SetNextMontageSectionAndWait, NextMontageSection) == 0x000010, "Member 'FortAbilityTask_SetNextMontageSectionAndWait_SetNextMontageSectionAndWait::NextMontageSection' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_SetNextMontageSectionAndWait_SetNextMontageSectionAndWait, ReturnValue) == 0x000018, "Member 'FortAbilityTask_SetNextMontageSectionAndWait_SetNextMontageSectionAndWait::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityTask_SetNextMontageSectionAndWait.OnMontageBlendingOut
// 0x0010 (0x0010 - 0x0000)
struct FortAbilityTask_SetNextMontageSectionAndWait_OnMontageBlendingOut final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAbilityTask_SetNextMontageSectionAndWait_OnMontageBlendingOut) == 0x000008, "Wrong alignment on FortAbilityTask_SetNextMontageSectionAndWait_OnMontageBlendingOut");
static_assert(sizeof(FortAbilityTask_SetNextMontageSectionAndWait_OnMontageBlendingOut) == 0x000010, "Wrong size on FortAbilityTask_SetNextMontageSectionAndWait_OnMontageBlendingOut");
static_assert(offsetof(FortAbilityTask_SetNextMontageSectionAndWait_OnMontageBlendingOut, Montage) == 0x000000, "Member 'FortAbilityTask_SetNextMontageSectionAndWait_OnMontageBlendingOut::Montage' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_SetNextMontageSectionAndWait_OnMontageBlendingOut, bInterrupted) == 0x000008, "Member 'FortAbilityTask_SetNextMontageSectionAndWait_OnMontageBlendingOut::bInterrupted' has a wrong offset!");

// Function FortniteGame.FortAbilityTask_SpawnProjectileAndWait.SpawnProjectileAndWait
// 0x0158 (0x0158 - 0x0000)
struct FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AFortProjectileBase>        Param_Class;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Param_RequestedBy;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Param_SpawnLocation;                               // 0x0018(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Param_SpawnRotation;                               // 0x0024(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               Param_SpawnDirection;                              // 0x0030(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Param_InitialSpeed;                                // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortGameplayEffectContainerSpec       Param_EffectContainerSpecToApplyOnHit;             // 0x0040(0x0080)(Parm, NativeAccessSpecifierPublic)
	struct FFortGameplayEffectContainerSpec       Param_EffectContainerSpecToApplyOnExplode;         // 0x00C0(0x0080)(Parm, NativeAccessSpecifierPublic)
	float                                         Param_GravityScale;                                // 0x0140(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_HomingTarget;                                // 0x0148(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAbilityTask_SpawnProjectileAndWait* ReturnValue;                                       // 0x0150(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait) == 0x000008, "Wrong alignment on FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait");
static_assert(sizeof(FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait) == 0x000158, "Wrong size on FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait");
static_assert(offsetof(FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait, OwningAbility) == 0x000000, "Member 'FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait::OwningAbility' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait, Param_Class) == 0x000008, "Member 'FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait::Param_Class' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait, Param_RequestedBy) == 0x000010, "Member 'FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait::Param_RequestedBy' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait, Param_SpawnLocation) == 0x000018, "Member 'FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait::Param_SpawnLocation' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait, Param_SpawnRotation) == 0x000024, "Member 'FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait::Param_SpawnRotation' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait, Param_SpawnDirection) == 0x000030, "Member 'FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait::Param_SpawnDirection' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait, Param_InitialSpeed) == 0x00003C, "Member 'FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait::Param_InitialSpeed' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait, Param_EffectContainerSpecToApplyOnHit) == 0x000040, "Member 'FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait::Param_EffectContainerSpecToApplyOnHit' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait, Param_EffectContainerSpecToApplyOnExplode) == 0x0000C0, "Member 'FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait::Param_EffectContainerSpecToApplyOnExplode' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait, Param_GravityScale) == 0x000140, "Member 'FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait::Param_GravityScale' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait, Param_HomingTarget) == 0x000148, "Member 'FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait::Param_HomingTarget' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait, ReturnValue) == 0x000150, "Member 'FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityTask_SpawnProjectileAndWait.BeginSpawningActor
// 0x0020 (0x0020 - 0x0000)
struct FortAbilityTask_SpawnProjectileAndWait_BeginSpawningActor final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AFortProjectileBase>        Param_Class;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortProjectileBase*                    SpawnedActor;                                      // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAbilityTask_SpawnProjectileAndWait_BeginSpawningActor) == 0x000008, "Wrong alignment on FortAbilityTask_SpawnProjectileAndWait_BeginSpawningActor");
static_assert(sizeof(FortAbilityTask_SpawnProjectileAndWait_BeginSpawningActor) == 0x000020, "Wrong size on FortAbilityTask_SpawnProjectileAndWait_BeginSpawningActor");
static_assert(offsetof(FortAbilityTask_SpawnProjectileAndWait_BeginSpawningActor, OwningAbility) == 0x000000, "Member 'FortAbilityTask_SpawnProjectileAndWait_BeginSpawningActor::OwningAbility' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_SpawnProjectileAndWait_BeginSpawningActor, Param_Class) == 0x000008, "Member 'FortAbilityTask_SpawnProjectileAndWait_BeginSpawningActor::Param_Class' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_SpawnProjectileAndWait_BeginSpawningActor, SpawnedActor) == 0x000010, "Member 'FortAbilityTask_SpawnProjectileAndWait_BeginSpawningActor::SpawnedActor' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_SpawnProjectileAndWait_BeginSpawningActor, ReturnValue) == 0x000018, "Member 'FortAbilityTask_SpawnProjectileAndWait_BeginSpawningActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityTask_SpawnProjectileAndWait.FinishSpawningActor
// 0x0010 (0x0010 - 0x0000)
struct FortAbilityTask_SpawnProjectileAndWait_FinishSpawningActor final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortProjectileBase*                    SpawnedActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityTask_SpawnProjectileAndWait_FinishSpawningActor) == 0x000008, "Wrong alignment on FortAbilityTask_SpawnProjectileAndWait_FinishSpawningActor");
static_assert(sizeof(FortAbilityTask_SpawnProjectileAndWait_FinishSpawningActor) == 0x000010, "Wrong size on FortAbilityTask_SpawnProjectileAndWait_FinishSpawningActor");
static_assert(offsetof(FortAbilityTask_SpawnProjectileAndWait_FinishSpawningActor, OwningAbility) == 0x000000, "Member 'FortAbilityTask_SpawnProjectileAndWait_FinishSpawningActor::OwningAbility' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_SpawnProjectileAndWait_FinishSpawningActor, SpawnedActor) == 0x000008, "Member 'FortAbilityTask_SpawnProjectileAndWait_FinishSpawningActor::SpawnedActor' has a wrong offset!");

// Function FortniteGame.FortAbilityTask_SpawnProjectileAndWait.OnProjectileDestroyed
// 0x0008 (0x0008 - 0x0000)
struct FortAbilityTask_SpawnProjectileAndWait_OnProjectileDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityTask_SpawnProjectileAndWait_OnProjectileDestroyed) == 0x000008, "Wrong alignment on FortAbilityTask_SpawnProjectileAndWait_OnProjectileDestroyed");
static_assert(sizeof(FortAbilityTask_SpawnProjectileAndWait_OnProjectileDestroyed) == 0x000008, "Wrong size on FortAbilityTask_SpawnProjectileAndWait_OnProjectileDestroyed");
static_assert(offsetof(FortAbilityTask_SpawnProjectileAndWait_OnProjectileDestroyed, DestroyedActor) == 0x000000, "Member 'FortAbilityTask_SpawnProjectileAndWait_OnProjectileDestroyed::DestroyedActor' has a wrong offset!");

// Function FortniteGame.FortAsyncAction_MakeTieredWaveEncounterSettings.CreateAsyncAction_MakeTieredWaveEncounterSettings
// 0x01C0 (0x01C0 - 0x0000)
struct FortAsyncAction_MakeTieredWaveEncounterSettings_CreateAsyncAction_MakeTieredWaveEncounterSettings final
{
public:
	struct FTieredWaveSetData                     Param_WaveData;                                    // 0x0000(0x0160)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FFortEncounterSettings                 InEncounterSettings;                               // 0x0160(0x0058)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UFortAsyncAction_MakeTieredWaveEncounterSettings* ReturnValue;                                       // 0x01B8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAsyncAction_MakeTieredWaveEncounterSettings_CreateAsyncAction_MakeTieredWaveEncounterSettings) == 0x000008, "Wrong alignment on FortAsyncAction_MakeTieredWaveEncounterSettings_CreateAsyncAction_MakeTieredWaveEncounterSettings");
static_assert(sizeof(FortAsyncAction_MakeTieredWaveEncounterSettings_CreateAsyncAction_MakeTieredWaveEncounterSettings) == 0x0001C0, "Wrong size on FortAsyncAction_MakeTieredWaveEncounterSettings_CreateAsyncAction_MakeTieredWaveEncounterSettings");
static_assert(offsetof(FortAsyncAction_MakeTieredWaveEncounterSettings_CreateAsyncAction_MakeTieredWaveEncounterSettings, Param_WaveData) == 0x000000, "Member 'FortAsyncAction_MakeTieredWaveEncounterSettings_CreateAsyncAction_MakeTieredWaveEncounterSettings::Param_WaveData' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_MakeTieredWaveEncounterSettings_CreateAsyncAction_MakeTieredWaveEncounterSettings, InEncounterSettings) == 0x000160, "Member 'FortAsyncAction_MakeTieredWaveEncounterSettings_CreateAsyncAction_MakeTieredWaveEncounterSettings::InEncounterSettings' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_MakeTieredWaveEncounterSettings_CreateAsyncAction_MakeTieredWaveEncounterSettings, ReturnValue) == 0x0001B8, "Member 'FortAsyncAction_MakeTieredWaveEncounterSettings_CreateAsyncAction_MakeTieredWaveEncounterSettings::ReturnValue' has a wrong offset!");

// Function FortniteGame.WorldMapPinManager.CreateWorldMapPin
// 0x0018 (0x0018 - 0x0000)
struct WorldMapPinManager_CreateWorldMapPin final
{
public:
	class FString                                 TheaterId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AWorldMapPin*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldMapPinManager_CreateWorldMapPin) == 0x000008, "Wrong alignment on WorldMapPinManager_CreateWorldMapPin");
static_assert(sizeof(WorldMapPinManager_CreateWorldMapPin) == 0x000018, "Wrong size on WorldMapPinManager_CreateWorldMapPin");
static_assert(offsetof(WorldMapPinManager_CreateWorldMapPin, TheaterId) == 0x000000, "Member 'WorldMapPinManager_CreateWorldMapPin::TheaterId' has a wrong offset!");
static_assert(offsetof(WorldMapPinManager_CreateWorldMapPin, ReturnValue) == 0x000010, "Member 'WorldMapPinManager_CreateWorldMapPin::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityTask_WaitTargetSelection.WaitTargetSelection
// 0x0028 (0x0028 - 0x0000)
struct FortAbilityTask_WaitTargetSelection_WaitTargetSelection final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InApplicationTag;                                  // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bForceTargetingOnServer;                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAbilityTask_WaitTargetSelection*   ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityTask_WaitTargetSelection_WaitTargetSelection) == 0x000008, "Wrong alignment on FortAbilityTask_WaitTargetSelection_WaitTargetSelection");
static_assert(sizeof(FortAbilityTask_WaitTargetSelection_WaitTargetSelection) == 0x000028, "Wrong size on FortAbilityTask_WaitTargetSelection_WaitTargetSelection");
static_assert(offsetof(FortAbilityTask_WaitTargetSelection_WaitTargetSelection, OwningAbility) == 0x000000, "Member 'FortAbilityTask_WaitTargetSelection_WaitTargetSelection::OwningAbility' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_WaitTargetSelection_WaitTargetSelection, TaskInstanceName) == 0x000008, "Member 'FortAbilityTask_WaitTargetSelection_WaitTargetSelection::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_WaitTargetSelection_WaitTargetSelection, InApplicationTag) == 0x000010, "Member 'FortAbilityTask_WaitTargetSelection_WaitTargetSelection::InApplicationTag' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_WaitTargetSelection_WaitTargetSelection, Param_bForceTargetingOnServer) == 0x000018, "Member 'FortAbilityTask_WaitTargetSelection_WaitTargetSelection::Param_bForceTargetingOnServer' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_WaitTargetSelection_WaitTargetSelection, ReturnValue) == 0x000020, "Member 'FortAbilityTask_WaitTargetSelection_WaitTargetSelection::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityTask_WaitTargetSelection.OnTargetDataReadyCallback
// 0x0028 (0x0028 - 0x0000)
struct FortAbilityTask_WaitTargetSelection_OnTargetDataReadyCallback final
{
public:
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ApplicationTag;                                    // 0x0020(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityTask_WaitTargetSelection_OnTargetDataReadyCallback) == 0x000008, "Wrong alignment on FortAbilityTask_WaitTargetSelection_OnTargetDataReadyCallback");
static_assert(sizeof(FortAbilityTask_WaitTargetSelection_OnTargetDataReadyCallback) == 0x000028, "Wrong size on FortAbilityTask_WaitTargetSelection_OnTargetDataReadyCallback");
static_assert(offsetof(FortAbilityTask_WaitTargetSelection_OnTargetDataReadyCallback, TargetData) == 0x000000, "Member 'FortAbilityTask_WaitTargetSelection_OnTargetDataReadyCallback::TargetData' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_WaitTargetSelection_OnTargetDataReadyCallback, ApplicationTag) == 0x000020, "Member 'FortAbilityTask_WaitTargetSelection_OnTargetDataReadyCallback::ApplicationTag' has a wrong offset!");

// Function FortniteGame.FortAbilityTestObserver.StartObserving
// 0x0008 (0x0008 - 0x0000)
struct FortAbilityTestObserver_StartObserving final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityTestObserver_StartObserving) == 0x000008, "Wrong alignment on FortAbilityTestObserver_StartObserving");
static_assert(sizeof(FortAbilityTestObserver_StartObserving) == 0x000008, "Wrong size on FortAbilityTestObserver_StartObserving");
static_assert(offsetof(FortAbilityTestObserver_StartObserving, Pawn) == 0x000000, "Member 'FortAbilityTestObserver_StartObserving::Pawn' has a wrong offset!");

// Function FortniteGame.FortAbilityTestObserver.WasAbilityActivated
// 0x0010 (0x0010 - 0x0000)
struct FortAbilityTestObserver_WasAbilityActivated final
{
public:
	class UGameplayAbility*                       Ability;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAbilityTestObserver_WasAbilityActivated) == 0x000008, "Wrong alignment on FortAbilityTestObserver_WasAbilityActivated");
static_assert(sizeof(FortAbilityTestObserver_WasAbilityActivated) == 0x000010, "Wrong size on FortAbilityTestObserver_WasAbilityActivated");
static_assert(offsetof(FortAbilityTestObserver_WasAbilityActivated, Ability) == 0x000000, "Member 'FortAbilityTestObserver_WasAbilityActivated::Ability' has a wrong offset!");
static_assert(offsetof(FortAbilityTestObserver_WasAbilityActivated, ReturnValue) == 0x000008, "Member 'FortAbilityTestObserver_WasAbilityActivated::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityTestObserver.WasAbilityTagActivated
// 0x0010 (0x0010 - 0x0000)
struct FortAbilityTestObserver_WasAbilityTagActivated final
{
public:
	struct FGameplayTag                           AbilityTag;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAbilityTestObserver_WasAbilityTagActivated) == 0x000008, "Wrong alignment on FortAbilityTestObserver_WasAbilityTagActivated");
static_assert(sizeof(FortAbilityTestObserver_WasAbilityTagActivated) == 0x000010, "Wrong size on FortAbilityTestObserver_WasAbilityTagActivated");
static_assert(offsetof(FortAbilityTestObserver_WasAbilityTagActivated, AbilityTag) == 0x000000, "Member 'FortAbilityTestObserver_WasAbilityTagActivated::AbilityTag' has a wrong offset!");
static_assert(offsetof(FortAbilityTestObserver_WasAbilityTagActivated, ReturnValue) == 0x000008, "Member 'FortAbilityTestObserver_WasAbilityTagActivated::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortObjectiveNeutralCompleteParams.BreakParams
// 0x0008 (0x0008 - 0x0000)
struct FortObjectiveNeutralCompleteParams_BreakParams final
{
public:
	class AFortObjectiveBase*                     _NeutrallyCompletedObjective;                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveNeutralCompleteParams_BreakParams) == 0x000008, "Wrong alignment on FortObjectiveNeutralCompleteParams_BreakParams");
static_assert(sizeof(FortObjectiveNeutralCompleteParams_BreakParams) == 0x000008, "Wrong size on FortObjectiveNeutralCompleteParams_BreakParams");
static_assert(offsetof(FortObjectiveNeutralCompleteParams_BreakParams, _NeutrallyCompletedObjective) == 0x000000, "Member 'FortObjectiveNeutralCompleteParams_BreakParams::_NeutrallyCompletedObjective' has a wrong offset!");

// Function FortniteGame.FortObjectiveNeutralCompleteParams.SetParams
// 0x0010 (0x0010 - 0x0000)
struct FortObjectiveNeutralCompleteParams_SetParams final
{
public:
	class AFortObjectiveBase*                     _NeutrallyCompletedObjective;                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortObjectiveNeutralCompleteParams*    ThisParam;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveNeutralCompleteParams_SetParams) == 0x000008, "Wrong alignment on FortObjectiveNeutralCompleteParams_SetParams");
static_assert(sizeof(FortObjectiveNeutralCompleteParams_SetParams) == 0x000010, "Wrong size on FortObjectiveNeutralCompleteParams_SetParams");
static_assert(offsetof(FortObjectiveNeutralCompleteParams_SetParams, _NeutrallyCompletedObjective) == 0x000000, "Member 'FortObjectiveNeutralCompleteParams_SetParams::_NeutrallyCompletedObjective' has a wrong offset!");
static_assert(offsetof(FortObjectiveNeutralCompleteParams_SetParams, ThisParam) == 0x000008, "Member 'FortObjectiveNeutralCompleteParams_SetParams::ThisParam' has a wrong offset!");

// Function FortniteGame.FortAttachToActorInterface.GetActorAttachedTo
// 0x0008 (0x0008 - 0x0000)
struct FortAttachToActorInterface_GetActorAttachedTo final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAttachToActorInterface_GetActorAttachedTo) == 0x000008, "Wrong alignment on FortAttachToActorInterface_GetActorAttachedTo");
static_assert(sizeof(FortAttachToActorInterface_GetActorAttachedTo) == 0x000008, "Wrong size on FortAttachToActorInterface_GetActorAttachedTo");
static_assert(offsetof(FortAttachToActorInterface_GetActorAttachedTo, ReturnValue) == 0x000000, "Member 'FortAttachToActorInterface_GetActorAttachedTo::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerDiedParams.BreakParams
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerDiedParams_BreakParams final
{
public:
	class AFortPlayerPawn*                        _KilledPlayer;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            _KilledBy;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerDiedParams_BreakParams) == 0x000008, "Wrong alignment on FortPlayerDiedParams_BreakParams");
static_assert(sizeof(FortPlayerDiedParams_BreakParams) == 0x000010, "Wrong size on FortPlayerDiedParams_BreakParams");
static_assert(offsetof(FortPlayerDiedParams_BreakParams, _KilledPlayer) == 0x000000, "Member 'FortPlayerDiedParams_BreakParams::_KilledPlayer' has a wrong offset!");
static_assert(offsetof(FortPlayerDiedParams_BreakParams, _KilledBy) == 0x000008, "Member 'FortPlayerDiedParams_BreakParams::_KilledBy' has a wrong offset!");

// Function FortniteGame.FortPlayerDiedParams.SetParams
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerDiedParams_SetParams final
{
public:
	class AFortPlayerPawn*                        _KilledPlayer;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            _KilledBy;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortPlayerDiedParams*                  ThisParam;                                         // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerDiedParams_SetParams) == 0x000008, "Wrong alignment on FortPlayerDiedParams_SetParams");
static_assert(sizeof(FortPlayerDiedParams_SetParams) == 0x000018, "Wrong size on FortPlayerDiedParams_SetParams");
static_assert(offsetof(FortPlayerDiedParams_SetParams, _KilledPlayer) == 0x000000, "Member 'FortPlayerDiedParams_SetParams::_KilledPlayer' has a wrong offset!");
static_assert(offsetof(FortPlayerDiedParams_SetParams, _KilledBy) == 0x000008, "Member 'FortPlayerDiedParams_SetParams::_KilledBy' has a wrong offset!");
static_assert(offsetof(FortPlayerDiedParams_SetParams, ThisParam) == 0x000010, "Member 'FortPlayerDiedParams_SetParams::ThisParam' has a wrong offset!");

// Function FortniteGame.FortAccountBuffItem.IsActive
// 0x0001 (0x0001 - 0x0000)
struct FortAccountBuffItem_IsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAccountBuffItem_IsActive) == 0x000001, "Wrong alignment on FortAccountBuffItem_IsActive");
static_assert(sizeof(FortAccountBuffItem_IsActive) == 0x000001, "Wrong size on FortAccountBuffItem_IsActive");
static_assert(offsetof(FortAccountBuffItem_IsActive, ReturnValue) == 0x000000, "Member 'FortAccountBuffItem_IsActive::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionSucceededParams.BreakParams
// 0x0008 (0x0008 - 0x0000)
struct FortMissionSucceededParams_BreakParams final
{
public:
	class AFortMission*                           _SucceededMission;                                 // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionSucceededParams_BreakParams) == 0x000008, "Wrong alignment on FortMissionSucceededParams_BreakParams");
static_assert(sizeof(FortMissionSucceededParams_BreakParams) == 0x000008, "Wrong size on FortMissionSucceededParams_BreakParams");
static_assert(offsetof(FortMissionSucceededParams_BreakParams, _SucceededMission) == 0x000000, "Member 'FortMissionSucceededParams_BreakParams::_SucceededMission' has a wrong offset!");

// Function FortniteGame.FortMissionSucceededParams.SetParams
// 0x0010 (0x0010 - 0x0000)
struct FortMissionSucceededParams_SetParams final
{
public:
	class AFortMission*                           _SucceededMission;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortMissionSucceededParams*            ThisParam;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionSucceededParams_SetParams) == 0x000008, "Wrong alignment on FortMissionSucceededParams_SetParams");
static_assert(sizeof(FortMissionSucceededParams_SetParams) == 0x000010, "Wrong size on FortMissionSucceededParams_SetParams");
static_assert(offsetof(FortMissionSucceededParams_SetParams, _SucceededMission) == 0x000000, "Member 'FortMissionSucceededParams_SetParams::_SucceededMission' has a wrong offset!");
static_assert(offsetof(FortMissionSucceededParams_SetParams, ThisParam) == 0x000008, "Member 'FortMissionSucceededParams_SetParams::ThisParam' has a wrong offset!");

// Function FortniteGame.FortToggledOptionsMenuParams.BreakParams
// 0x0010 (0x0010 - 0x0000)
struct FortToggledOptionsMenuParams_BreakParams final
{
public:
	class AFortPlayerController*                  _PlayerThatToggledOptionsMenu;                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Opened;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortToggledOptionsMenuParams_BreakParams) == 0x000008, "Wrong alignment on FortToggledOptionsMenuParams_BreakParams");
static_assert(sizeof(FortToggledOptionsMenuParams_BreakParams) == 0x000010, "Wrong size on FortToggledOptionsMenuParams_BreakParams");
static_assert(offsetof(FortToggledOptionsMenuParams_BreakParams, _PlayerThatToggledOptionsMenu) == 0x000000, "Member 'FortToggledOptionsMenuParams_BreakParams::_PlayerThatToggledOptionsMenu' has a wrong offset!");
static_assert(offsetof(FortToggledOptionsMenuParams_BreakParams, Opened) == 0x000008, "Member 'FortToggledOptionsMenuParams_BreakParams::Opened' has a wrong offset!");

// Function FortniteGame.FortToggledOptionsMenuParams.SetParams
// 0x0018 (0x0018 - 0x0000)
struct FortToggledOptionsMenuParams_SetParams final
{
public:
	class AFortPlayerController*                  _PlayerThatToggledOptionsMenu;                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Opened;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortToggledOptionsMenuParams*          ThisParam;                                         // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortToggledOptionsMenuParams_SetParams) == 0x000008, "Wrong alignment on FortToggledOptionsMenuParams_SetParams");
static_assert(sizeof(FortToggledOptionsMenuParams_SetParams) == 0x000018, "Wrong size on FortToggledOptionsMenuParams_SetParams");
static_assert(offsetof(FortToggledOptionsMenuParams_SetParams, _PlayerThatToggledOptionsMenu) == 0x000000, "Member 'FortToggledOptionsMenuParams_SetParams::_PlayerThatToggledOptionsMenu' has a wrong offset!");
static_assert(offsetof(FortToggledOptionsMenuParams_SetParams, Opened) == 0x000008, "Member 'FortToggledOptionsMenuParams_SetParams::Opened' has a wrong offset!");
static_assert(offsetof(FortToggledOptionsMenuParams_SetParams, ThisParam) == 0x000010, "Member 'FortToggledOptionsMenuParams_SetParams::ThisParam' has a wrong offset!");

// Function FortniteGame.FortOnboardingAnalytics.FireAnalyticsEvent_CinematicSkipped
// 0x0018 (0x0018 - 0x0000)
struct FortOnboardingAnalytics_FireAnalyticsEvent_CinematicSkipped final
{
public:
	const class UObject*                          SourceBp;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CinematicName;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOnboardingAnalytics_FireAnalyticsEvent_CinematicSkipped) == 0x000008, "Wrong alignment on FortOnboardingAnalytics_FireAnalyticsEvent_CinematicSkipped");
static_assert(sizeof(FortOnboardingAnalytics_FireAnalyticsEvent_CinematicSkipped) == 0x000018, "Wrong size on FortOnboardingAnalytics_FireAnalyticsEvent_CinematicSkipped");
static_assert(offsetof(FortOnboardingAnalytics_FireAnalyticsEvent_CinematicSkipped, SourceBp) == 0x000000, "Member 'FortOnboardingAnalytics_FireAnalyticsEvent_CinematicSkipped::SourceBp' has a wrong offset!");
static_assert(offsetof(FortOnboardingAnalytics_FireAnalyticsEvent_CinematicSkipped, CinematicName) == 0x000008, "Member 'FortOnboardingAnalytics_FireAnalyticsEvent_CinematicSkipped::CinematicName' has a wrong offset!");

// Function FortniteGame.FortOnboardingAnalytics.FireAnalyticsEvent_MineCartDestroyed
// 0x0008 (0x0008 - 0x0000)
struct FortOnboardingAnalytics_FireAnalyticsEvent_MineCartDestroyed final
{
public:
	const class UObject*                          SourceBp;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOnboardingAnalytics_FireAnalyticsEvent_MineCartDestroyed) == 0x000008, "Wrong alignment on FortOnboardingAnalytics_FireAnalyticsEvent_MineCartDestroyed");
static_assert(sizeof(FortOnboardingAnalytics_FireAnalyticsEvent_MineCartDestroyed) == 0x000008, "Wrong size on FortOnboardingAnalytics_FireAnalyticsEvent_MineCartDestroyed");
static_assert(offsetof(FortOnboardingAnalytics_FireAnalyticsEvent_MineCartDestroyed, SourceBp) == 0x000000, "Member 'FortOnboardingAnalytics_FireAnalyticsEvent_MineCartDestroyed::SourceBp' has a wrong offset!");

// Function FortniteGame.FortOnboardingAnalytics.FireAnalyticsEvent_TutorialCanceled
// 0x0008 (0x0008 - 0x0000)
struct FortOnboardingAnalytics_FireAnalyticsEvent_TutorialCanceled final
{
public:
	const class UObject*                          SourceBp;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOnboardingAnalytics_FireAnalyticsEvent_TutorialCanceled) == 0x000008, "Wrong alignment on FortOnboardingAnalytics_FireAnalyticsEvent_TutorialCanceled");
static_assert(sizeof(FortOnboardingAnalytics_FireAnalyticsEvent_TutorialCanceled) == 0x000008, "Wrong size on FortOnboardingAnalytics_FireAnalyticsEvent_TutorialCanceled");
static_assert(offsetof(FortOnboardingAnalytics_FireAnalyticsEvent_TutorialCanceled, SourceBp) == 0x000000, "Member 'FortOnboardingAnalytics_FireAnalyticsEvent_TutorialCanceled::SourceBp' has a wrong offset!");

// Function FortniteGame.FortOnboardingAnalytics.FireAnalyticsEvent_TutorialCompleted
// 0x0010 (0x0010 - 0x0000)
struct FortOnboardingAnalytics_FireAnalyticsEvent_TutorialCompleted final
{
public:
	const class UObject*                          SourceBp;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WasSuccessful;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortOnboardingAnalytics_FireAnalyticsEvent_TutorialCompleted) == 0x000008, "Wrong alignment on FortOnboardingAnalytics_FireAnalyticsEvent_TutorialCompleted");
static_assert(sizeof(FortOnboardingAnalytics_FireAnalyticsEvent_TutorialCompleted) == 0x000010, "Wrong size on FortOnboardingAnalytics_FireAnalyticsEvent_TutorialCompleted");
static_assert(offsetof(FortOnboardingAnalytics_FireAnalyticsEvent_TutorialCompleted, SourceBp) == 0x000000, "Member 'FortOnboardingAnalytics_FireAnalyticsEvent_TutorialCompleted::SourceBp' has a wrong offset!");
static_assert(offsetof(FortOnboardingAnalytics_FireAnalyticsEvent_TutorialCompleted, WasSuccessful) == 0x000008, "Member 'FortOnboardingAnalytics_FireAnalyticsEvent_TutorialCompleted::WasSuccessful' has a wrong offset!");

// Function FortniteGame.FortOnboardingAnalytics.FireAnalyticsEvent_TutorialStartupFailed
// 0x0010 (0x0010 - 0x0000)
struct FortOnboardingAnalytics_FireAnalyticsEvent_TutorialStartupFailed final
{
public:
	const class UObject*                          SourceBp;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MatchmakingResult;                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortOnboardingAnalytics_FireAnalyticsEvent_TutorialStartupFailed) == 0x000008, "Wrong alignment on FortOnboardingAnalytics_FireAnalyticsEvent_TutorialStartupFailed");
static_assert(sizeof(FortOnboardingAnalytics_FireAnalyticsEvent_TutorialStartupFailed) == 0x000010, "Wrong size on FortOnboardingAnalytics_FireAnalyticsEvent_TutorialStartupFailed");
static_assert(offsetof(FortOnboardingAnalytics_FireAnalyticsEvent_TutorialStartupFailed, SourceBp) == 0x000000, "Member 'FortOnboardingAnalytics_FireAnalyticsEvent_TutorialStartupFailed::SourceBp' has a wrong offset!");
static_assert(offsetof(FortOnboardingAnalytics_FireAnalyticsEvent_TutorialStartupFailed, MatchmakingResult) == 0x000008, "Member 'FortOnboardingAnalytics_FireAnalyticsEvent_TutorialStartupFailed::MatchmakingResult' has a wrong offset!");

// Function FortniteGame.FortOnboardingAnalytics.FireAnalyticsEvent_VinderTipPlayed
// 0x0018 (0x0018 - 0x0000)
struct FortOnboardingAnalytics_FireAnalyticsEvent_VinderTipPlayed final
{
public:
	const class UObject*                          SourceBp;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VinderTipTag;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOnboardingAnalytics_FireAnalyticsEvent_VinderTipPlayed) == 0x000008, "Wrong alignment on FortOnboardingAnalytics_FireAnalyticsEvent_VinderTipPlayed");
static_assert(sizeof(FortOnboardingAnalytics_FireAnalyticsEvent_VinderTipPlayed) == 0x000018, "Wrong size on FortOnboardingAnalytics_FireAnalyticsEvent_VinderTipPlayed");
static_assert(offsetof(FortOnboardingAnalytics_FireAnalyticsEvent_VinderTipPlayed, SourceBp) == 0x000000, "Member 'FortOnboardingAnalytics_FireAnalyticsEvent_VinderTipPlayed::SourceBp' has a wrong offset!");
static_assert(offsetof(FortOnboardingAnalytics_FireAnalyticsEvent_VinderTipPlayed, VinderTipTag) == 0x000008, "Member 'FortOnboardingAnalytics_FireAnalyticsEvent_VinderTipPlayed::VinderTipTag' has a wrong offset!");

// Function FortniteGame.FortAIController.IsIgnoringProximity
// 0x0010 (0x0010 - 0x0000)
struct FortAIController_IsIgnoringProximity final
{
public:
	class AFortAIController*                      FortAIController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIController_IsIgnoringProximity) == 0x000008, "Wrong alignment on FortAIController_IsIgnoringProximity");
static_assert(sizeof(FortAIController_IsIgnoringProximity) == 0x000010, "Wrong size on FortAIController_IsIgnoringProximity");
static_assert(offsetof(FortAIController_IsIgnoringProximity, FortAIController) == 0x000000, "Member 'FortAIController_IsIgnoringProximity::FortAIController' has a wrong offset!");
static_assert(offsetof(FortAIController_IsIgnoringProximity, ReturnValue) == 0x000008, "Member 'FortAIController_IsIgnoringProximity::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIController.CreateBuildingActor
// 0x0028 (0x0028 - 0x0000)
struct FortAIController_CreateBuildingActor final
{
public:
	TSubclassOf<class ABuildingSMActor>           BuildingClass;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BuildLoc;                                          // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               BuildRot;                                          // 0x0014(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bMirrored;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIController_CreateBuildingActor) == 0x000008, "Wrong alignment on FortAIController_CreateBuildingActor");
static_assert(sizeof(FortAIController_CreateBuildingActor) == 0x000028, "Wrong size on FortAIController_CreateBuildingActor");
static_assert(offsetof(FortAIController_CreateBuildingActor, BuildingClass) == 0x000000, "Member 'FortAIController_CreateBuildingActor::BuildingClass' has a wrong offset!");
static_assert(offsetof(FortAIController_CreateBuildingActor, BuildLoc) == 0x000008, "Member 'FortAIController_CreateBuildingActor::BuildLoc' has a wrong offset!");
static_assert(offsetof(FortAIController_CreateBuildingActor, BuildRot) == 0x000014, "Member 'FortAIController_CreateBuildingActor::BuildRot' has a wrong offset!");
static_assert(offsetof(FortAIController_CreateBuildingActor, bMirrored) == 0x000020, "Member 'FortAIController_CreateBuildingActor::bMirrored' has a wrong offset!");
static_assert(offsetof(FortAIController_CreateBuildingActor, ReturnValue) == 0x000021, "Member 'FortAIController_CreateBuildingActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIController.IgnoreProximityForDuration
// 0x0004 (0x0004 - 0x0000)
struct FortAIController_IgnoreProximityForDuration final
{
public:
	float                                         DurationToIgnore;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIController_IgnoreProximityForDuration) == 0x000004, "Wrong alignment on FortAIController_IgnoreProximityForDuration");
static_assert(sizeof(FortAIController_IgnoreProximityForDuration) == 0x000004, "Wrong size on FortAIController_IgnoreProximityForDuration");
static_assert(offsetof(FortAIController_IgnoreProximityForDuration, DurationToIgnore) == 0x000000, "Member 'FortAIController_IgnoreProximityForDuration::DurationToIgnore' has a wrong offset!");

// Function FortniteGame.FortAIController.IsAllowedToSleep
// 0x0001 (0x0001 - 0x0000)
struct FortAIController_IsAllowedToSleep final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIController_IsAllowedToSleep) == 0x000001, "Wrong alignment on FortAIController_IsAllowedToSleep");
static_assert(sizeof(FortAIController_IsAllowedToSleep) == 0x000001, "Wrong size on FortAIController_IsAllowedToSleep");
static_assert(offsetof(FortAIController_IsAllowedToSleep, ReturnValue) == 0x000000, "Member 'FortAIController_IsAllowedToSleep::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIController.SetAlwaysGameplayRelevant
// 0x0001 (0x0001 - 0x0000)
struct FortAIController_SetAlwaysGameplayRelevant final
{
public:
	bool                                          bInAlwaysGameplayRelevant;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIController_SetAlwaysGameplayRelevant) == 0x000001, "Wrong alignment on FortAIController_SetAlwaysGameplayRelevant");
static_assert(sizeof(FortAIController_SetAlwaysGameplayRelevant) == 0x000001, "Wrong size on FortAIController_SetAlwaysGameplayRelevant");
static_assert(offsetof(FortAIController_SetAlwaysGameplayRelevant, bInAlwaysGameplayRelevant) == 0x000000, "Member 'FortAIController_SetAlwaysGameplayRelevant::bInAlwaysGameplayRelevant' has a wrong offset!");

// Function FortniteGame.FortAIController.SetFullPeripheralVision
// 0x0001 (0x0001 - 0x0000)
struct FortAIController_SetFullPeripheralVision final
{
public:
	bool                                          bNewFullPeripheralVision;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIController_SetFullPeripheralVision) == 0x000001, "Wrong alignment on FortAIController_SetFullPeripheralVision");
static_assert(sizeof(FortAIController_SetFullPeripheralVision) == 0x000001, "Wrong size on FortAIController_SetFullPeripheralVision");
static_assert(offsetof(FortAIController_SetFullPeripheralVision, bNewFullPeripheralVision) == 0x000000, "Member 'FortAIController_SetFullPeripheralVision::bNewFullPeripheralVision' has a wrong offset!");

// Function FortniteGame.FortAIController.SetGoalActor
// 0x0010 (0x0010 - 0x0000)
struct FortAIController_SetGoalActor final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocationAlwaysKnown;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIController_SetGoalActor) == 0x000008, "Wrong alignment on FortAIController_SetGoalActor");
static_assert(sizeof(FortAIController_SetGoalActor) == 0x000010, "Wrong size on FortAIController_SetGoalActor");
static_assert(offsetof(FortAIController_SetGoalActor, InActor) == 0x000000, "Member 'FortAIController_SetGoalActor::InActor' has a wrong offset!");
static_assert(offsetof(FortAIController_SetGoalActor, bLocationAlwaysKnown) == 0x000008, "Member 'FortAIController_SetGoalActor::bLocationAlwaysKnown' has a wrong offset!");

// Function FortniteGame.FortAIController.SetIsSleeping
// 0x0001 (0x0001 - 0x0000)
struct FortAIController_SetIsSleeping final
{
public:
	bool                                          bNewSleepStatus;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIController_SetIsSleeping) == 0x000001, "Wrong alignment on FortAIController_SetIsSleeping");
static_assert(sizeof(FortAIController_SetIsSleeping) == 0x000001, "Wrong size on FortAIController_SetIsSleeping");
static_assert(offsetof(FortAIController_SetIsSleeping, bNewSleepStatus) == 0x000000, "Member 'FortAIController_SetIsSleeping::bNewSleepStatus' has a wrong offset!");

// Function FortniteGame.FortAIController.SetPawnAIType
// 0x0010 (0x0010 - 0x0000)
struct FortAIController_SetPawnAIType final
{
public:
	EFortressAIType                               NewAIType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 SpawnSpot;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIController_SetPawnAIType) == 0x000008, "Wrong alignment on FortAIController_SetPawnAIType");
static_assert(sizeof(FortAIController_SetPawnAIType) == 0x000010, "Wrong size on FortAIController_SetPawnAIType");
static_assert(offsetof(FortAIController_SetPawnAIType, NewAIType) == 0x000000, "Member 'FortAIController_SetPawnAIType::NewAIType' has a wrong offset!");
static_assert(offsetof(FortAIController_SetPawnAIType, SpawnSpot) == 0x000008, "Member 'FortAIController_SetPawnAIType::SpawnSpot' has a wrong offset!");

// Function FortniteGame.FortAIController.SetTeam
// 0x0001 (0x0001 - 0x0000)
struct FortAIController_SetTeam final
{
public:
	EFortTeam                                     InTeam;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIController_SetTeam) == 0x000001, "Wrong alignment on FortAIController_SetTeam");
static_assert(sizeof(FortAIController_SetTeam) == 0x000001, "Wrong size on FortAIController_SetTeam");
static_assert(offsetof(FortAIController_SetTeam, InTeam) == 0x000000, "Member 'FortAIController_SetTeam::InTeam' has a wrong offset!");

// Function FortniteGame.FortAIController.SetupCustomVIM
// 0x0008 (0x0008 - 0x0000)
struct FortAIController_SetupCustomVIM final
{
public:
	class UClass*                                 VIM;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIController_SetupCustomVIM) == 0x000008, "Wrong alignment on FortAIController_SetupCustomVIM");
static_assert(sizeof(FortAIController_SetupCustomVIM) == 0x000008, "Wrong size on FortAIController_SetupCustomVIM");
static_assert(offsetof(FortAIController_SetupCustomVIM, VIM) == 0x000000, "Member 'FortAIController_SetupCustomVIM::VIM' has a wrong offset!");

// Function FortniteGame.FortAIController.GetEncounterInfo
// 0x0008 (0x0008 - 0x0000)
struct FortAIController_GetEncounterInfo final
{
public:
	class UFortAIEncounterInfo*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIController_GetEncounterInfo) == 0x000008, "Wrong alignment on FortAIController_GetEncounterInfo");
static_assert(sizeof(FortAIController_GetEncounterInfo) == 0x000008, "Wrong size on FortAIController_GetEncounterInfo");
static_assert(offsetof(FortAIController_GetEncounterInfo, ReturnValue) == 0x000000, "Member 'FortAIController_GetEncounterInfo::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIController.GetGoalActor
// 0x0008 (0x0008 - 0x0000)
struct FortAIController_GetGoalActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIController_GetGoalActor) == 0x000008, "Wrong alignment on FortAIController_GetGoalActor");
static_assert(sizeof(FortAIController_GetGoalActor) == 0x000008, "Wrong size on FortAIController_GetGoalActor");
static_assert(offsetof(FortAIController_GetGoalActor, ReturnValue) == 0x000000, "Member 'FortAIController_GetGoalActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDeployableBaseAnalytics.FireAnalyticsEvent_CombatZone_ConsoleOpened
// 0x0008 (0x0008 - 0x0000)
struct FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_ConsoleOpened final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_ConsoleOpened) == 0x000008, "Wrong alignment on FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_ConsoleOpened");
static_assert(sizeof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_ConsoleOpened) == 0x000008, "Wrong size on FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_ConsoleOpened");
static_assert(offsetof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_ConsoleOpened, FortPC) == 0x000000, "Member 'FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_ConsoleOpened::FortPC' has a wrong offset!");

// Function FortniteGame.FortDeployableBaseAnalytics.FireAnalyticsEvent_CombatZone_TierCompleted
// 0x0088 (0x0088 - 0x0000)
struct FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierCompleted final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Tier;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FinalWave;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfPlayers;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ADeployableBaseCore*>            TargetCores;                                       // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class ADeployableBaseCore*>            AllCores;                                          // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FFortTierCollectionLayoutOutput        CollectionData;                                    // 0x0038(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierCompleted) == 0x000008, "Wrong alignment on FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierCompleted");
static_assert(sizeof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierCompleted) == 0x000088, "Wrong size on FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierCompleted");
static_assert(offsetof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierCompleted, FortPC) == 0x000000, "Member 'FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierCompleted::FortPC' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierCompleted, Tier) == 0x000008, "Member 'FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierCompleted::Tier' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierCompleted, FinalWave) == 0x00000C, "Member 'FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierCompleted::FinalWave' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierCompleted, NumberOfPlayers) == 0x000010, "Member 'FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierCompleted::NumberOfPlayers' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierCompleted, TargetCores) == 0x000018, "Member 'FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierCompleted::TargetCores' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierCompleted, AllCores) == 0x000028, "Member 'FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierCompleted::AllCores' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierCompleted, CollectionData) == 0x000038, "Member 'FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierCompleted::CollectionData' has a wrong offset!");

// Function FortniteGame.FortDeployableBaseAnalytics.FireAnalyticsEvent_CombatZone_TierFailed
// 0x0068 (0x0068 - 0x0000)
struct FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierFailed final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Tier;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Wave;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfPlayers;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortTierCollectionLayoutOutput        CollectionData;                                    // 0x0018(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierFailed) == 0x000008, "Wrong alignment on FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierFailed");
static_assert(sizeof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierFailed) == 0x000068, "Wrong size on FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierFailed");
static_assert(offsetof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierFailed, FortPC) == 0x000000, "Member 'FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierFailed::FortPC' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierFailed, Tier) == 0x000008, "Member 'FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierFailed::Tier' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierFailed, Wave) == 0x00000C, "Member 'FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierFailed::Wave' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierFailed, NumberOfPlayers) == 0x000010, "Member 'FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierFailed::NumberOfPlayers' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierFailed, CollectionData) == 0x000018, "Member 'FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierFailed::CollectionData' has a wrong offset!");

// Function FortniteGame.FortDeployableBaseAnalytics.FireAnalyticsEvent_CombatZone_TierStarted
// 0x0060 (0x0060 - 0x0000)
struct FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierStarted final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Tier;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfPlayers;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortTierCollectionLayoutOutput        CollectionData;                                    // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierStarted) == 0x000008, "Wrong alignment on FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierStarted");
static_assert(sizeof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierStarted) == 0x000060, "Wrong size on FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierStarted");
static_assert(offsetof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierStarted, FortPC) == 0x000000, "Member 'FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierStarted::FortPC' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierStarted, Tier) == 0x000008, "Member 'FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierStarted::Tier' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierStarted, NumberOfPlayers) == 0x00000C, "Member 'FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierStarted::NumberOfPlayers' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierStarted, CollectionData) == 0x000010, "Member 'FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_TierStarted::CollectionData' has a wrong offset!");

// Function FortniteGame.FortDeployableBaseAnalytics.FireAnalyticsEvent_CombatZone_WaveFailed
// 0x0088 (0x0088 - 0x0000)
struct FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_WaveFailed final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Tier;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Wave;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfPlayers;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ADeployableBaseCore*>            TargetCores;                                       // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class ADeployableBaseCore*>            AllCores;                                          // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FFortTierCollectionLayoutOutput        CollectionData;                                    // 0x0038(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_WaveFailed) == 0x000008, "Wrong alignment on FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_WaveFailed");
static_assert(sizeof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_WaveFailed) == 0x000088, "Wrong size on FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_WaveFailed");
static_assert(offsetof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_WaveFailed, FortPC) == 0x000000, "Member 'FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_WaveFailed::FortPC' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_WaveFailed, Tier) == 0x000008, "Member 'FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_WaveFailed::Tier' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_WaveFailed, Wave) == 0x00000C, "Member 'FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_WaveFailed::Wave' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_WaveFailed, NumberOfPlayers) == 0x000010, "Member 'FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_WaveFailed::NumberOfPlayers' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_WaveFailed, TargetCores) == 0x000018, "Member 'FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_WaveFailed::TargetCores' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_WaveFailed, AllCores) == 0x000028, "Member 'FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_WaveFailed::AllCores' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_WaveFailed, CollectionData) == 0x000038, "Member 'FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_WaveFailed::CollectionData' has a wrong offset!");

// Function FortniteGame.FortDeployableBaseAnalytics.FireAnalyticsEvent_CombatZone_WaveStarted
// 0x0088 (0x0088 - 0x0000)
struct FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_WaveStarted final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Tier;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Wave;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfPlayers;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ADeployableBaseCore*>            TargetCores;                                       // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class ADeployableBaseCore*>            AllCores;                                          // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FFortTierCollectionLayoutOutput        CollectionData;                                    // 0x0038(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_WaveStarted) == 0x000008, "Wrong alignment on FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_WaveStarted");
static_assert(sizeof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_WaveStarted) == 0x000088, "Wrong size on FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_WaveStarted");
static_assert(offsetof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_WaveStarted, FortPC) == 0x000000, "Member 'FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_WaveStarted::FortPC' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_WaveStarted, Tier) == 0x000008, "Member 'FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_WaveStarted::Tier' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_WaveStarted, Wave) == 0x00000C, "Member 'FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_WaveStarted::Wave' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_WaveStarted, NumberOfPlayers) == 0x000010, "Member 'FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_WaveStarted::NumberOfPlayers' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_WaveStarted, TargetCores) == 0x000018, "Member 'FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_WaveStarted::TargetCores' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_WaveStarted, AllCores) == 0x000028, "Member 'FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_WaveStarted::AllCores' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_WaveStarted, CollectionData) == 0x000038, "Member 'FortDeployableBaseAnalytics_FireAnalyticsEvent_CombatZone_WaveStarted::CollectionData' has a wrong offset!");

// Function FortniteGame.FortDeployableBaseAnalytics.FireAnalyticsEvent_Neighborhood_ConsoleOpened
// 0x0030 (0x0030 - 0x0000)
struct FortDeployableBaseAnalytics_FireAnalyticsEvent_Neighborhood_ConsoleOpened final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       OwnerId;                                           // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDeployableBaseAnalytics_FireAnalyticsEvent_Neighborhood_ConsoleOpened) == 0x000008, "Wrong alignment on FortDeployableBaseAnalytics_FireAnalyticsEvent_Neighborhood_ConsoleOpened");
static_assert(sizeof(FortDeployableBaseAnalytics_FireAnalyticsEvent_Neighborhood_ConsoleOpened) == 0x000030, "Wrong size on FortDeployableBaseAnalytics_FireAnalyticsEvent_Neighborhood_ConsoleOpened");
static_assert(offsetof(FortDeployableBaseAnalytics_FireAnalyticsEvent_Neighborhood_ConsoleOpened, FortPC) == 0x000000, "Member 'FortDeployableBaseAnalytics_FireAnalyticsEvent_Neighborhood_ConsoleOpened::FortPC' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseAnalytics_FireAnalyticsEvent_Neighborhood_ConsoleOpened, OwnerId) == 0x000008, "Member 'FortDeployableBaseAnalytics_FireAnalyticsEvent_Neighborhood_ConsoleOpened::OwnerId' has a wrong offset!");

// Function FortniteGame.FortAIDirector.ConvertInvalidDirectionsToValidDirections
// 0x0020 (0x0020 - 0x0000)
struct FortAIDirector_ConvertInvalidDirectionsToValidDirections final
{
public:
	TArray<EFortEncounterDirection>               InvalidDirections;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EFortEncounterDirection>               ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirector_ConvertInvalidDirectionsToValidDirections) == 0x000008, "Wrong alignment on FortAIDirector_ConvertInvalidDirectionsToValidDirections");
static_assert(sizeof(FortAIDirector_ConvertInvalidDirectionsToValidDirections) == 0x000020, "Wrong size on FortAIDirector_ConvertInvalidDirectionsToValidDirections");
static_assert(offsetof(FortAIDirector_ConvertInvalidDirectionsToValidDirections, InvalidDirections) == 0x000000, "Member 'FortAIDirector_ConvertInvalidDirectionsToValidDirections::InvalidDirections' has a wrong offset!");
static_assert(offsetof(FortAIDirector_ConvertInvalidDirectionsToValidDirections, ReturnValue) == 0x000010, "Member 'FortAIDirector_ConvertInvalidDirectionsToValidDirections::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIDirector.GetEncounterDirectionFromVector
// 0x0010 (0x0010 - 0x0000)
struct FortAIDirector_GetEncounterDirectionFromVector final
{
public:
	struct FVector                                DirectionVector;                                   // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortEncounterDirection                       ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIDirector_GetEncounterDirectionFromVector) == 0x000004, "Wrong alignment on FortAIDirector_GetEncounterDirectionFromVector");
static_assert(sizeof(FortAIDirector_GetEncounterDirectionFromVector) == 0x000010, "Wrong size on FortAIDirector_GetEncounterDirectionFromVector");
static_assert(offsetof(FortAIDirector_GetEncounterDirectionFromVector, DirectionVector) == 0x000000, "Member 'FortAIDirector_GetEncounterDirectionFromVector::DirectionVector' has a wrong offset!");
static_assert(offsetof(FortAIDirector_GetEncounterDirectionFromVector, ReturnValue) == 0x00000C, "Member 'FortAIDirector_GetEncounterDirectionFromVector::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIDirector.GetVectorFromEncounterDirection
// 0x0010 (0x0010 - 0x0000)
struct FortAIDirector_GetVectorFromEncounterDirection final
{
public:
	EFortEncounterDirection                       Direction;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirector_GetVectorFromEncounterDirection) == 0x000004, "Wrong alignment on FortAIDirector_GetVectorFromEncounterDirection");
static_assert(sizeof(FortAIDirector_GetVectorFromEncounterDirection) == 0x000010, "Wrong size on FortAIDirector_GetVectorFromEncounterDirection");
static_assert(offsetof(FortAIDirector_GetVectorFromEncounterDirection, Direction) == 0x000000, "Member 'FortAIDirector_GetVectorFromEncounterDirection::Direction' has a wrong offset!");
static_assert(offsetof(FortAIDirector_GetVectorFromEncounterDirection, ReturnValue) == 0x000004, "Member 'FortAIDirector_GetVectorFromEncounterDirection::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIDirector.GetNumPlayers
// 0x0004 (0x0004 - 0x0000)
struct FortAIDirector_GetNumPlayers final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirector_GetNumPlayers) == 0x000004, "Wrong alignment on FortAIDirector_GetNumPlayers");
static_assert(sizeof(FortAIDirector_GetNumPlayers) == 0x000004, "Wrong size on FortAIDirector_GetNumPlayers");
static_assert(offsetof(FortAIDirector_GetNumPlayers, ReturnValue) == 0x000000, "Member 'FortAIDirector_GetNumPlayers::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIDirector.OnDayPhaseChanged
// 0x0003 (0x0003 - 0x0000)
struct FortAIDirector_OnDayPhaseChanged final
{
public:
	EFortDayPhase                                 CurrentDayPhase;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDayPhase                                 PreviousDayPhase;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAtCreation;                                       // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirector_OnDayPhaseChanged) == 0x000001, "Wrong alignment on FortAIDirector_OnDayPhaseChanged");
static_assert(sizeof(FortAIDirector_OnDayPhaseChanged) == 0x000003, "Wrong size on FortAIDirector_OnDayPhaseChanged");
static_assert(offsetof(FortAIDirector_OnDayPhaseChanged, CurrentDayPhase) == 0x000000, "Member 'FortAIDirector_OnDayPhaseChanged::CurrentDayPhase' has a wrong offset!");
static_assert(offsetof(FortAIDirector_OnDayPhaseChanged, PreviousDayPhase) == 0x000001, "Member 'FortAIDirector_OnDayPhaseChanged::PreviousDayPhase' has a wrong offset!");
static_assert(offsetof(FortAIDirector_OnDayPhaseChanged, bAtCreation) == 0x000002, "Member 'FortAIDirector_OnDayPhaseChanged::bAtCreation' has a wrong offset!");

// Function FortniteGame.FortAIDirector.OnPawnDied
// 0x0008 (0x0008 - 0x0000)
struct FortAIDirector_OnPawnDied final
{
public:
	class AFortAIPawn*                            KilledPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirector_OnPawnDied) == 0x000008, "Wrong alignment on FortAIDirector_OnPawnDied");
static_assert(sizeof(FortAIDirector_OnPawnDied) == 0x000008, "Wrong size on FortAIDirector_OnPawnDied");
static_assert(offsetof(FortAIDirector_OnPawnDied, KilledPawn) == 0x000000, "Member 'FortAIDirector_OnPawnDied::KilledPawn' has a wrong offset!");

// Function FortniteGame.FortAIDirector.OnPlayerDied
// 0x0008 (0x0008 - 0x0000)
struct FortAIDirector_OnPlayerDied final
{
public:
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirector_OnPlayerDied) == 0x000008, "Wrong alignment on FortAIDirector_OnPlayerDied");
static_assert(sizeof(FortAIDirector_OnPlayerDied) == 0x000008, "Wrong size on FortAIDirector_OnPlayerDied");
static_assert(offsetof(FortAIDirector_OnPlayerDied, PlayerPawn) == 0x000000, "Member 'FortAIDirector_OnPlayerDied::PlayerPawn' has a wrong offset!");

// Function FortniteGame.FortAIDirector.OnPlayerSpawn
// 0x0008 (0x0008 - 0x0000)
struct FortAIDirector_OnPlayerSpawn final
{
public:
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirector_OnPlayerSpawn) == 0x000008, "Wrong alignment on FortAIDirector_OnPlayerSpawn");
static_assert(sizeof(FortAIDirector_OnPlayerSpawn) == 0x000008, "Wrong size on FortAIDirector_OnPlayerSpawn");
static_assert(offsetof(FortAIDirector_OnPlayerSpawn, PlayerPawn) == 0x000000, "Member 'FortAIDirector_OnPlayerSpawn::PlayerPawn' has a wrong offset!");

// Function FortniteGame.FortAIDirector.PostDayPhaseChanged
// 0x0003 (0x0003 - 0x0000)
struct FortAIDirector_PostDayPhaseChanged final
{
public:
	EFortDayPhase                                 CurrentDayPhase;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDayPhase                                 PreviousDayPhase;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAtCreation;                                       // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirector_PostDayPhaseChanged) == 0x000001, "Wrong alignment on FortAIDirector_PostDayPhaseChanged");
static_assert(sizeof(FortAIDirector_PostDayPhaseChanged) == 0x000003, "Wrong size on FortAIDirector_PostDayPhaseChanged");
static_assert(offsetof(FortAIDirector_PostDayPhaseChanged, CurrentDayPhase) == 0x000000, "Member 'FortAIDirector_PostDayPhaseChanged::CurrentDayPhase' has a wrong offset!");
static_assert(offsetof(FortAIDirector_PostDayPhaseChanged, PreviousDayPhase) == 0x000001, "Member 'FortAIDirector_PostDayPhaseChanged::PreviousDayPhase' has a wrong offset!");
static_assert(offsetof(FortAIDirector_PostDayPhaseChanged, bAtCreation) == 0x000002, "Member 'FortAIDirector_PostDayPhaseChanged::bAtCreation' has a wrong offset!");

// Function FortniteGame.FortAIDirector.ReceivePawnSpawned
// 0x0008 (0x0008 - 0x0000)
struct FortAIDirector_ReceivePawnSpawned final
{
public:
	class AFortPawn*                              SpawnedPawn;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirector_ReceivePawnSpawned) == 0x000008, "Wrong alignment on FortAIDirector_ReceivePawnSpawned");
static_assert(sizeof(FortAIDirector_ReceivePawnSpawned) == 0x000008, "Wrong size on FortAIDirector_ReceivePawnSpawned");
static_assert(offsetof(FortAIDirector_ReceivePawnSpawned, SpawnedPawn) == 0x000000, "Member 'FortAIDirector_ReceivePawnSpawned::SpawnedPawn' has a wrong offset!");

// Function FortniteGame.FortAIDirector.RegisterPatrolWard
// 0x0010 (0x0010 - 0x0000)
struct FortAIDirector_RegisterPatrolWard final
{
public:
	TScriptInterface<class IFortPatrolWardInterface> PatrolWard;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirector_RegisterPatrolWard) == 0x000008, "Wrong alignment on FortAIDirector_RegisterPatrolWard");
static_assert(sizeof(FortAIDirector_RegisterPatrolWard) == 0x000010, "Wrong size on FortAIDirector_RegisterPatrolWard");
static_assert(offsetof(FortAIDirector_RegisterPatrolWard, PatrolWard) == 0x000000, "Member 'FortAIDirector_RegisterPatrolWard::PatrolWard' has a wrong offset!");

// Function FortniteGame.FortAIDirector.UnregisterPatrolWard
// 0x0010 (0x0010 - 0x0000)
struct FortAIDirector_UnregisterPatrolWard final
{
public:
	TScriptInterface<class IFortPatrolWardInterface> PatrolWard;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirector_UnregisterPatrolWard) == 0x000008, "Wrong alignment on FortAIDirector_UnregisterPatrolWard");
static_assert(sizeof(FortAIDirector_UnregisterPatrolWard) == 0x000010, "Wrong size on FortAIDirector_UnregisterPatrolWard");
static_assert(offsetof(FortAIDirector_UnregisterPatrolWard, PatrolWard) == 0x000000, "Member 'FortAIDirector_UnregisterPatrolWard::PatrolWard' has a wrong offset!");

// Function FortniteGame.FortAIDirector.GetAmbientThreatEncounterSpawnLocations
// 0x0010 (0x0010 - 0x0000)
struct FortAIDirector_GetAmbientThreatEncounterSpawnLocations final
{
public:
	TArray<struct FVector>                        AmbientThreatEncounterSpawnLocations;              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirector_GetAmbientThreatEncounterSpawnLocations) == 0x000008, "Wrong alignment on FortAIDirector_GetAmbientThreatEncounterSpawnLocations");
static_assert(sizeof(FortAIDirector_GetAmbientThreatEncounterSpawnLocations) == 0x000010, "Wrong size on FortAIDirector_GetAmbientThreatEncounterSpawnLocations");
static_assert(offsetof(FortAIDirector_GetAmbientThreatEncounterSpawnLocations, AmbientThreatEncounterSpawnLocations) == 0x000000, "Member 'FortAIDirector_GetAmbientThreatEncounterSpawnLocations::AmbientThreatEncounterSpawnLocations' has a wrong offset!");

// Function FortniteGame.FortAIDirector.GetRiftsFromClosestActiveEncounterTo
// 0x0018 (0x0018 - 0x0000)
struct FortAIDirector_GetRiftsFromClosestActiveEncounterTo final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ABuildingRift*>                  ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirector_GetRiftsFromClosestActiveEncounterTo) == 0x000008, "Wrong alignment on FortAIDirector_GetRiftsFromClosestActiveEncounterTo");
static_assert(sizeof(FortAIDirector_GetRiftsFromClosestActiveEncounterTo) == 0x000018, "Wrong size on FortAIDirector_GetRiftsFromClosestActiveEncounterTo");
static_assert(offsetof(FortAIDirector_GetRiftsFromClosestActiveEncounterTo, Target) == 0x000000, "Member 'FortAIDirector_GetRiftsFromClosestActiveEncounterTo::Target' has a wrong offset!");
static_assert(offsetof(FortAIDirector_GetRiftsFromClosestActiveEncounterTo, ReturnValue) == 0x000008, "Member 'FortAIDirector_GetRiftsFromClosestActiveEncounterTo::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIDirector.IsAnyActiveEncounterRelevantToDefender
// 0x0010 (0x0010 - 0x0000)
struct FortAIDirector_IsAnyActiveEncounterRelevantToDefender final
{
public:
	class AFortAIPawn*                            Defender;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIDirector_IsAnyActiveEncounterRelevantToDefender) == 0x000008, "Wrong alignment on FortAIDirector_IsAnyActiveEncounterRelevantToDefender");
static_assert(sizeof(FortAIDirector_IsAnyActiveEncounterRelevantToDefender) == 0x000010, "Wrong size on FortAIDirector_IsAnyActiveEncounterRelevantToDefender");
static_assert(offsetof(FortAIDirector_IsAnyActiveEncounterRelevantToDefender, Defender) == 0x000000, "Member 'FortAIDirector_IsAnyActiveEncounterRelevantToDefender::Defender' has a wrong offset!");
static_assert(offsetof(FortAIDirector_IsAnyActiveEncounterRelevantToDefender, ReturnValue) == 0x000008, "Member 'FortAIDirector_IsAnyActiveEncounterRelevantToDefender::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIDirector.IsAnyActiveEncounterRelevantToPlayer
// 0x0010 (0x0010 - 0x0000)
struct FortAIDirector_IsAnyActiveEncounterRelevantToPlayer final
{
public:
	class AFortPlayerPawn*                        Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIDirector_IsAnyActiveEncounterRelevantToPlayer) == 0x000008, "Wrong alignment on FortAIDirector_IsAnyActiveEncounterRelevantToPlayer");
static_assert(sizeof(FortAIDirector_IsAnyActiveEncounterRelevantToPlayer) == 0x000010, "Wrong size on FortAIDirector_IsAnyActiveEncounterRelevantToPlayer");
static_assert(offsetof(FortAIDirector_IsAnyActiveEncounterRelevantToPlayer, Player) == 0x000000, "Member 'FortAIDirector_IsAnyActiveEncounterRelevantToPlayer::Player' has a wrong offset!");
static_assert(offsetof(FortAIDirector_IsAnyActiveEncounterRelevantToPlayer, ReturnValue) == 0x000008, "Member 'FortAIDirector_IsAnyActiveEncounterRelevantToPlayer::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIDirector.IsAnyAIRelevantToPlayer
// 0x0010 (0x0010 - 0x0000)
struct FortAIDirector_IsAnyAIRelevantToPlayer final
{
public:
	class AFortPlayerPawn*                        Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIDirector_IsAnyAIRelevantToPlayer) == 0x000008, "Wrong alignment on FortAIDirector_IsAnyAIRelevantToPlayer");
static_assert(sizeof(FortAIDirector_IsAnyAIRelevantToPlayer) == 0x000010, "Wrong size on FortAIDirector_IsAnyAIRelevantToPlayer");
static_assert(offsetof(FortAIDirector_IsAnyAIRelevantToPlayer, Player) == 0x000000, "Member 'FortAIDirector_IsAnyAIRelevantToPlayer::Player' has a wrong offset!");
static_assert(offsetof(FortAIDirector_IsAnyAIRelevantToPlayer, ReturnValue) == 0x000008, "Member 'FortAIDirector_IsAnyAIRelevantToPlayer::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIDirector.IsAnyEncounterGoalWithinDistanceOfPoint
// 0x0014 (0x0014 - 0x0000)
struct FortAIDirector_IsAnyEncounterGoalWithinDistanceOfPoint final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyActiveEncounters;                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIDirector_IsAnyEncounterGoalWithinDistanceOfPoint) == 0x000004, "Wrong alignment on FortAIDirector_IsAnyEncounterGoalWithinDistanceOfPoint");
static_assert(sizeof(FortAIDirector_IsAnyEncounterGoalWithinDistanceOfPoint) == 0x000014, "Wrong size on FortAIDirector_IsAnyEncounterGoalWithinDistanceOfPoint");
static_assert(offsetof(FortAIDirector_IsAnyEncounterGoalWithinDistanceOfPoint, Point) == 0x000000, "Member 'FortAIDirector_IsAnyEncounterGoalWithinDistanceOfPoint::Point' has a wrong offset!");
static_assert(offsetof(FortAIDirector_IsAnyEncounterGoalWithinDistanceOfPoint, Distance) == 0x00000C, "Member 'FortAIDirector_IsAnyEncounterGoalWithinDistanceOfPoint::Distance' has a wrong offset!");
static_assert(offsetof(FortAIDirector_IsAnyEncounterGoalWithinDistanceOfPoint, bOnlyActiveEncounters) == 0x000010, "Member 'FortAIDirector_IsAnyEncounterGoalWithinDistanceOfPoint::bOnlyActiveEncounters' has a wrong offset!");
static_assert(offsetof(FortAIDirector_IsAnyEncounterGoalWithinDistanceOfPoint, ReturnValue) == 0x000011, "Member 'FortAIDirector_IsAnyEncounterGoalWithinDistanceOfPoint::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIDirector.IsLineTooCloseToPatrolWards
// 0x001C (0x001C - 0x0000)
struct FortAIDirector_IsLineTooCloseToPatrolWards final
{
public:
	struct FVector                                LineStart;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LineEnd;                                           // 0x000C(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIDirector_IsLineTooCloseToPatrolWards) == 0x000004, "Wrong alignment on FortAIDirector_IsLineTooCloseToPatrolWards");
static_assert(sizeof(FortAIDirector_IsLineTooCloseToPatrolWards) == 0x00001C, "Wrong size on FortAIDirector_IsLineTooCloseToPatrolWards");
static_assert(offsetof(FortAIDirector_IsLineTooCloseToPatrolWards, LineStart) == 0x000000, "Member 'FortAIDirector_IsLineTooCloseToPatrolWards::LineStart' has a wrong offset!");
static_assert(offsetof(FortAIDirector_IsLineTooCloseToPatrolWards, LineEnd) == 0x00000C, "Member 'FortAIDirector_IsLineTooCloseToPatrolWards::LineEnd' has a wrong offset!");
static_assert(offsetof(FortAIDirector_IsLineTooCloseToPatrolWards, ReturnValue) == 0x000018, "Member 'FortAIDirector_IsLineTooCloseToPatrolWards::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIDirector.IsPointTooCloseToPatrolWards
// 0x0010 (0x0010 - 0x0000)
struct FortAIDirector_IsPointTooCloseToPatrolWards final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWardAffectType                               WardEffectTypeFilter;                              // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIDirector_IsPointTooCloseToPatrolWards) == 0x000004, "Wrong alignment on FortAIDirector_IsPointTooCloseToPatrolWards");
static_assert(sizeof(FortAIDirector_IsPointTooCloseToPatrolWards) == 0x000010, "Wrong size on FortAIDirector_IsPointTooCloseToPatrolWards");
static_assert(offsetof(FortAIDirector_IsPointTooCloseToPatrolWards, Point) == 0x000000, "Member 'FortAIDirector_IsPointTooCloseToPatrolWards::Point' has a wrong offset!");
static_assert(offsetof(FortAIDirector_IsPointTooCloseToPatrolWards, WardEffectTypeFilter) == 0x00000C, "Member 'FortAIDirector_IsPointTooCloseToPatrolWards::WardEffectTypeFilter' has a wrong offset!");
static_assert(offsetof(FortAIDirector_IsPointTooCloseToPatrolWards, ReturnValue) == 0x00000D, "Member 'FortAIDirector_IsPointTooCloseToPatrolWards::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIDirectorDataManager.TriggerEvent
// 0x0020 (0x0020 - 0x0000)
struct FortAIDirectorDataManager_TriggerEvent final
{
public:
	struct FFortAIDirectorEvent                   TriggeredEvent;                                    // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirectorDataManager_TriggerEvent) == 0x000008, "Wrong alignment on FortAIDirectorDataManager_TriggerEvent");
static_assert(sizeof(FortAIDirectorDataManager_TriggerEvent) == 0x000020, "Wrong size on FortAIDirectorDataManager_TriggerEvent");
static_assert(offsetof(FortAIDirectorDataManager_TriggerEvent, TriggeredEvent) == 0x000000, "Member 'FortAIDirectorDataManager_TriggerEvent::TriggeredEvent' has a wrong offset!");

// Function FortniteGame.FortAIDirectorDataManager.GetAIDirectorFactorValue
// 0x0008 (0x0008 - 0x0000)
struct FortAIDirectorDataManager_GetAIDirectorFactorValue final
{
public:
	EFortAIDirectorFactor                         AIDirectorFactor;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirectorDataManager_GetAIDirectorFactorValue) == 0x000004, "Wrong alignment on FortAIDirectorDataManager_GetAIDirectorFactorValue");
static_assert(sizeof(FortAIDirectorDataManager_GetAIDirectorFactorValue) == 0x000008, "Wrong size on FortAIDirectorDataManager_GetAIDirectorFactorValue");
static_assert(offsetof(FortAIDirectorDataManager_GetAIDirectorFactorValue, AIDirectorFactor) == 0x000000, "Member 'FortAIDirectorDataManager_GetAIDirectorFactorValue::AIDirectorFactor' has a wrong offset!");
static_assert(offsetof(FortAIDirectorDataManager_GetAIDirectorFactorValue, ReturnValue) == 0x000004, "Member 'FortAIDirectorDataManager_GetAIDirectorFactorValue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTrapItemDefinitionTooltip.GetNumericValue
// 0x0028 (0x0028 - 0x0000)
struct FortTrapItemDefinitionTooltip_GetNumericValue final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVal;                                            // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTrapItemDefinitionTooltip_GetNumericValue) == 0x000008, "Wrong alignment on FortTrapItemDefinitionTooltip_GetNumericValue");
static_assert(sizeof(FortTrapItemDefinitionTooltip_GetNumericValue) == 0x000028, "Wrong size on FortTrapItemDefinitionTooltip_GetNumericValue");
static_assert(offsetof(FortTrapItemDefinitionTooltip_GetNumericValue, ObjectToDescribe) == 0x000000, "Member 'FortTrapItemDefinitionTooltip_GetNumericValue::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortTrapItemDefinitionTooltip_GetNumericValue, Tag) == 0x000008, "Member 'FortTrapItemDefinitionTooltip_GetNumericValue::Tag' has a wrong offset!");
static_assert(offsetof(FortTrapItemDefinitionTooltip_GetNumericValue, Context) == 0x000010, "Member 'FortTrapItemDefinitionTooltip_GetNumericValue::Context' has a wrong offset!");
static_assert(offsetof(FortTrapItemDefinitionTooltip_GetNumericValue, Token) == 0x000018, "Member 'FortTrapItemDefinitionTooltip_GetNumericValue::Token' has a wrong offset!");
static_assert(offsetof(FortTrapItemDefinitionTooltip_GetNumericValue, OutVal) == 0x000020, "Member 'FortTrapItemDefinitionTooltip_GetNumericValue::OutVal' has a wrong offset!");
static_assert(offsetof(FortTrapItemDefinitionTooltip_GetNumericValue, ReturnValue) == 0x000024, "Member 'FortTrapItemDefinitionTooltip_GetNumericValue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTrapItemDefinitionTooltip.GetTextForToken
// 0x0040 (0x0040 - 0x0000)
struct FortTrapItemDefinitionTooltip_GetTextForToken final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTrapItemDefinitionTooltip_GetTextForToken) == 0x000008, "Wrong alignment on FortTrapItemDefinitionTooltip_GetTextForToken");
static_assert(sizeof(FortTrapItemDefinitionTooltip_GetTextForToken) == 0x000040, "Wrong size on FortTrapItemDefinitionTooltip_GetTextForToken");
static_assert(offsetof(FortTrapItemDefinitionTooltip_GetTextForToken, ObjectToDescribe) == 0x000000, "Member 'FortTrapItemDefinitionTooltip_GetTextForToken::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortTrapItemDefinitionTooltip_GetTextForToken, Tag) == 0x000008, "Member 'FortTrapItemDefinitionTooltip_GetTextForToken::Tag' has a wrong offset!");
static_assert(offsetof(FortTrapItemDefinitionTooltip_GetTextForToken, Context) == 0x000010, "Member 'FortTrapItemDefinitionTooltip_GetTextForToken::Context' has a wrong offset!");
static_assert(offsetof(FortTrapItemDefinitionTooltip_GetTextForToken, Token) == 0x000018, "Member 'FortTrapItemDefinitionTooltip_GetTextForToken::Token' has a wrong offset!");
static_assert(offsetof(FortTrapItemDefinitionTooltip_GetTextForToken, OutText) == 0x000020, "Member 'FortTrapItemDefinitionTooltip_GetTextForToken::OutText' has a wrong offset!");
static_assert(offsetof(FortTrapItemDefinitionTooltip_GetTextForToken, ReturnValue) == 0x000038, "Member 'FortTrapItemDefinitionTooltip_GetTextForToken::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTrapItemDefinitionTooltip.GetTokenizedDescriptionText
// 0x0030 (0x0030 - 0x0000)
struct FortTrapItemDefinitionTooltip_GetTokenizedDescriptionText final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           OutDescription;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTrapItemDefinitionTooltip_GetTokenizedDescriptionText) == 0x000008, "Wrong alignment on FortTrapItemDefinitionTooltip_GetTokenizedDescriptionText");
static_assert(sizeof(FortTrapItemDefinitionTooltip_GetTokenizedDescriptionText) == 0x000030, "Wrong size on FortTrapItemDefinitionTooltip_GetTokenizedDescriptionText");
static_assert(offsetof(FortTrapItemDefinitionTooltip_GetTokenizedDescriptionText, ObjectToDescribe) == 0x000000, "Member 'FortTrapItemDefinitionTooltip_GetTokenizedDescriptionText::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortTrapItemDefinitionTooltip_GetTokenizedDescriptionText, Tag) == 0x000008, "Member 'FortTrapItemDefinitionTooltip_GetTokenizedDescriptionText::Tag' has a wrong offset!");
static_assert(offsetof(FortTrapItemDefinitionTooltip_GetTokenizedDescriptionText, Context) == 0x000010, "Member 'FortTrapItemDefinitionTooltip_GetTokenizedDescriptionText::Context' has a wrong offset!");
static_assert(offsetof(FortTrapItemDefinitionTooltip_GetTokenizedDescriptionText, OutDescription) == 0x000018, "Member 'FortTrapItemDefinitionTooltip_GetTokenizedDescriptionText::OutDescription' has a wrong offset!");
static_assert(offsetof(FortTrapItemDefinitionTooltip_GetTokenizedDescriptionText, ReturnValue) == 0x000028, "Member 'FortTrapItemDefinitionTooltip_GetTokenizedDescriptionText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterInfo.CreateEncounterAssignment
// 0x0018 (0x0018 - 0x0000)
struct FortAIEncounterInfo_CreateEncounterAssignment final
{
public:
	class UFortAIAssignmentSettings*              AssignmentSettings;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 GoalActor;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAIAssignment*                      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfo_CreateEncounterAssignment) == 0x000008, "Wrong alignment on FortAIEncounterInfo_CreateEncounterAssignment");
static_assert(sizeof(FortAIEncounterInfo_CreateEncounterAssignment) == 0x000018, "Wrong size on FortAIEncounterInfo_CreateEncounterAssignment");
static_assert(offsetof(FortAIEncounterInfo_CreateEncounterAssignment, AssignmentSettings) == 0x000000, "Member 'FortAIEncounterInfo_CreateEncounterAssignment::AssignmentSettings' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_CreateEncounterAssignment, GoalActor) == 0x000008, "Member 'FortAIEncounterInfo_CreateEncounterAssignment::GoalActor' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_CreateEncounterAssignment, ReturnValue) == 0x000010, "Member 'FortAIEncounterInfo_CreateEncounterAssignment::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterInfo.GetEncounterDataManager
// 0x0008 (0x0008 - 0x0000)
struct FortAIEncounterInfo_GetEncounterDataManager final
{
public:
	class AFortAIDirectorDataManager*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfo_GetEncounterDataManager) == 0x000008, "Wrong alignment on FortAIEncounterInfo_GetEncounterDataManager");
static_assert(sizeof(FortAIEncounterInfo_GetEncounterDataManager) == 0x000008, "Wrong size on FortAIEncounterInfo_GetEncounterDataManager");
static_assert(offsetof(FortAIEncounterInfo_GetEncounterDataManager, ReturnValue) == 0x000000, "Member 'FortAIEncounterInfo_GetEncounterDataManager::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterInfo.GetEncounterTimeSeconds
// 0x0004 (0x0004 - 0x0000)
struct FortAIEncounterInfo_GetEncounterTimeSeconds final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfo_GetEncounterTimeSeconds) == 0x000004, "Wrong alignment on FortAIEncounterInfo_GetEncounterTimeSeconds");
static_assert(sizeof(FortAIEncounterInfo_GetEncounterTimeSeconds) == 0x000004, "Wrong size on FortAIEncounterInfo_GetEncounterTimeSeconds");
static_assert(offsetof(FortAIEncounterInfo_GetEncounterTimeSeconds, ReturnValue) == 0x000000, "Member 'FortAIEncounterInfo_GetEncounterTimeSeconds::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterInfo.GroupHasAIRemainingToSpawn
// 0x0068 (0x0068 - 0x0000)
struct FortAIEncounterInfo_GroupHasAIRemainingToSpawn final
{
public:
	struct FFortAISpawnerData                     FortAISpawnerData;                                 // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIEncounterInfo_GroupHasAIRemainingToSpawn) == 0x000008, "Wrong alignment on FortAIEncounterInfo_GroupHasAIRemainingToSpawn");
static_assert(sizeof(FortAIEncounterInfo_GroupHasAIRemainingToSpawn) == 0x000068, "Wrong size on FortAIEncounterInfo_GroupHasAIRemainingToSpawn");
static_assert(offsetof(FortAIEncounterInfo_GroupHasAIRemainingToSpawn, FortAISpawnerData) == 0x000000, "Member 'FortAIEncounterInfo_GroupHasAIRemainingToSpawn::FortAISpawnerData' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_GroupHasAIRemainingToSpawn, ReturnValue) == 0x000060, "Member 'FortAIEncounterInfo_GroupHasAIRemainingToSpawn::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterInfo.OnEncounterPawnDamaged
// 0x0050 (0x0050 - 0x0000)
struct FortAIEncounterInfo_OnEncounterPawnDamaged final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0030(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Momentum;                                          // 0x0040(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIEncounterInfo_OnEncounterPawnDamaged) == 0x000008, "Wrong alignment on FortAIEncounterInfo_OnEncounterPawnDamaged");
static_assert(sizeof(FortAIEncounterInfo_OnEncounterPawnDamaged) == 0x000050, "Wrong size on FortAIEncounterInfo_OnEncounterPawnDamaged");
static_assert(offsetof(FortAIEncounterInfo_OnEncounterPawnDamaged, DamagedActor) == 0x000000, "Member 'FortAIEncounterInfo_OnEncounterPawnDamaged::DamagedActor' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_OnEncounterPawnDamaged, Damage) == 0x000008, "Member 'FortAIEncounterInfo_OnEncounterPawnDamaged::Damage' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_OnEncounterPawnDamaged, InstigatedBy) == 0x000010, "Member 'FortAIEncounterInfo_OnEncounterPawnDamaged::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_OnEncounterPawnDamaged, DamageCauser) == 0x000018, "Member 'FortAIEncounterInfo_OnEncounterPawnDamaged::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_OnEncounterPawnDamaged, HitLocation) == 0x000020, "Member 'FortAIEncounterInfo_OnEncounterPawnDamaged::HitLocation' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_OnEncounterPawnDamaged, FHitComponent) == 0x000030, "Member 'FortAIEncounterInfo_OnEncounterPawnDamaged::FHitComponent' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_OnEncounterPawnDamaged, BoneName) == 0x000038, "Member 'FortAIEncounterInfo_OnEncounterPawnDamaged::BoneName' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_OnEncounterPawnDamaged, Momentum) == 0x000040, "Member 'FortAIEncounterInfo_OnEncounterPawnDamaged::Momentum' has a wrong offset!");

// Function FortniteGame.FortAIEncounterInfo.OnGoalTakeDamage
// 0x0050 (0x0050 - 0x0000)
struct FortAIEncounterInfo_OnGoalTakeDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0030(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Momentum;                                          // 0x0040(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIEncounterInfo_OnGoalTakeDamage) == 0x000008, "Wrong alignment on FortAIEncounterInfo_OnGoalTakeDamage");
static_assert(sizeof(FortAIEncounterInfo_OnGoalTakeDamage) == 0x000050, "Wrong size on FortAIEncounterInfo_OnGoalTakeDamage");
static_assert(offsetof(FortAIEncounterInfo_OnGoalTakeDamage, DamagedActor) == 0x000000, "Member 'FortAIEncounterInfo_OnGoalTakeDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_OnGoalTakeDamage, Damage) == 0x000008, "Member 'FortAIEncounterInfo_OnGoalTakeDamage::Damage' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_OnGoalTakeDamage, InstigatedBy) == 0x000010, "Member 'FortAIEncounterInfo_OnGoalTakeDamage::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_OnGoalTakeDamage, DamageCauser) == 0x000018, "Member 'FortAIEncounterInfo_OnGoalTakeDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_OnGoalTakeDamage, HitLocation) == 0x000020, "Member 'FortAIEncounterInfo_OnGoalTakeDamage::HitLocation' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_OnGoalTakeDamage, FHitComponent) == 0x000030, "Member 'FortAIEncounterInfo_OnGoalTakeDamage::FHitComponent' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_OnGoalTakeDamage, BoneName) == 0x000038, "Member 'FortAIEncounterInfo_OnGoalTakeDamage::BoneName' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_OnGoalTakeDamage, Momentum) == 0x000040, "Member 'FortAIEncounterInfo_OnGoalTakeDamage::Momentum' has a wrong offset!");

// Function FortniteGame.FortAIEncounterInfo.RegisterAISpawner
// 0x0008 (0x0008 - 0x0000)
struct FortAIEncounterInfo_RegisterAISpawner final
{
public:
	class AActor*                                 InAISpawner;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfo_RegisterAISpawner) == 0x000008, "Wrong alignment on FortAIEncounterInfo_RegisterAISpawner");
static_assert(sizeof(FortAIEncounterInfo_RegisterAISpawner) == 0x000008, "Wrong size on FortAIEncounterInfo_RegisterAISpawner");
static_assert(offsetof(FortAIEncounterInfo_RegisterAISpawner, InAISpawner) == 0x000000, "Member 'FortAIEncounterInfo_RegisterAISpawner::InAISpawner' has a wrong offset!");

// Function FortniteGame.FortAIEncounterInfo.RequestActivation
// 0x0004 (0x0004 - 0x0000)
struct FortAIEncounterInfo_RequestActivation final
{
public:
	int32                                         ActivationDelay;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfo_RequestActivation) == 0x000004, "Wrong alignment on FortAIEncounterInfo_RequestActivation");
static_assert(sizeof(FortAIEncounterInfo_RequestActivation) == 0x000004, "Wrong size on FortAIEncounterInfo_RequestActivation");
static_assert(offsetof(FortAIEncounterInfo_RequestActivation, ActivationDelay) == 0x000000, "Member 'FortAIEncounterInfo_RequestActivation::ActivationDelay' has a wrong offset!");

// Function FortniteGame.FortAIEncounterInfo.SetEncounterActivationState
// 0x0001 (0x0001 - 0x0000)
struct FortAIEncounterInfo_SetEncounterActivationState final
{
public:
	bool                                          bEncounterActivityState;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfo_SetEncounterActivationState) == 0x000001, "Wrong alignment on FortAIEncounterInfo_SetEncounterActivationState");
static_assert(sizeof(FortAIEncounterInfo_SetEncounterActivationState) == 0x000001, "Wrong size on FortAIEncounterInfo_SetEncounterActivationState");
static_assert(offsetof(FortAIEncounterInfo_SetEncounterActivationState, bEncounterActivityState) == 0x000000, "Member 'FortAIEncounterInfo_SetEncounterActivationState::bEncounterActivityState' has a wrong offset!");

// Function FortniteGame.FortAIEncounterInfo.SetPawnNumberLimit
// 0x0004 (0x0004 - 0x0000)
struct FortAIEncounterInfo_SetPawnNumberLimit final
{
public:
	int32                                         InPawnNumberLimit;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfo_SetPawnNumberLimit) == 0x000004, "Wrong alignment on FortAIEncounterInfo_SetPawnNumberLimit");
static_assert(sizeof(FortAIEncounterInfo_SetPawnNumberLimit) == 0x000004, "Wrong size on FortAIEncounterInfo_SetPawnNumberLimit");
static_assert(offsetof(FortAIEncounterInfo_SetPawnNumberLimit, InPawnNumberLimit) == 0x000000, "Member 'FortAIEncounterInfo_SetPawnNumberLimit::InPawnNumberLimit' has a wrong offset!");

// Function FortniteGame.FortAIEncounterInfo.SpawnAIPawnReservedForEnemySpawner
// 0x0028 (0x0028 - 0x0000)
struct FortAIEncounterInfo_SpawnAIPawnReservedForEnemySpawner final
{
public:
	class AActor*                                 EnemySpawner;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation;                                     // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnRotation;                                     // 0x0014(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AFortAIPawn*                            ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfo_SpawnAIPawnReservedForEnemySpawner) == 0x000008, "Wrong alignment on FortAIEncounterInfo_SpawnAIPawnReservedForEnemySpawner");
static_assert(sizeof(FortAIEncounterInfo_SpawnAIPawnReservedForEnemySpawner) == 0x000028, "Wrong size on FortAIEncounterInfo_SpawnAIPawnReservedForEnemySpawner");
static_assert(offsetof(FortAIEncounterInfo_SpawnAIPawnReservedForEnemySpawner, EnemySpawner) == 0x000000, "Member 'FortAIEncounterInfo_SpawnAIPawnReservedForEnemySpawner::EnemySpawner' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_SpawnAIPawnReservedForEnemySpawner, SpawnLocation) == 0x000008, "Member 'FortAIEncounterInfo_SpawnAIPawnReservedForEnemySpawner::SpawnLocation' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_SpawnAIPawnReservedForEnemySpawner, SpawnRotation) == 0x000014, "Member 'FortAIEncounterInfo_SpawnAIPawnReservedForEnemySpawner::SpawnRotation' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_SpawnAIPawnReservedForEnemySpawner, ReturnValue) == 0x000020, "Member 'FortAIEncounterInfo_SpawnAIPawnReservedForEnemySpawner::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterInfo.UnRegisterAISpawner
// 0x0008 (0x0008 - 0x0000)
struct FortAIEncounterInfo_UnRegisterAISpawner final
{
public:
	class AActor*                                 InAISpawner;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfo_UnRegisterAISpawner) == 0x000008, "Wrong alignment on FortAIEncounterInfo_UnRegisterAISpawner");
static_assert(sizeof(FortAIEncounterInfo_UnRegisterAISpawner) == 0x000008, "Wrong size on FortAIEncounterInfo_UnRegisterAISpawner");
static_assert(offsetof(FortAIEncounterInfo_UnRegisterAISpawner, InAISpawner) == 0x000000, "Member 'FortAIEncounterInfo_UnRegisterAISpawner::InAISpawner' has a wrong offset!");

// Function FortniteGame.FortAIEncounterInfo.EncounterHasReservedSpawnRequestForEnemySpawner
// 0x0010 (0x0010 - 0x0000)
struct FortAIEncounterInfo_EncounterHasReservedSpawnRequestForEnemySpawner final
{
public:
	class AActor*                                 EnemySpawner;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIEncounterInfo_EncounterHasReservedSpawnRequestForEnemySpawner) == 0x000008, "Wrong alignment on FortAIEncounterInfo_EncounterHasReservedSpawnRequestForEnemySpawner");
static_assert(sizeof(FortAIEncounterInfo_EncounterHasReservedSpawnRequestForEnemySpawner) == 0x000010, "Wrong size on FortAIEncounterInfo_EncounterHasReservedSpawnRequestForEnemySpawner");
static_assert(offsetof(FortAIEncounterInfo_EncounterHasReservedSpawnRequestForEnemySpawner, EnemySpawner) == 0x000000, "Member 'FortAIEncounterInfo_EncounterHasReservedSpawnRequestForEnemySpawner::EnemySpawner' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_EncounterHasReservedSpawnRequestForEnemySpawner, ReturnValue) == 0x000008, "Member 'FortAIEncounterInfo_EncounterHasReservedSpawnRequestForEnemySpawner::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterInfo.GetCurrentSpawnAreaDirections
// 0x0018 (0x0018 - 0x0000)
struct FortAIEncounterInfo_GetCurrentSpawnAreaDirections final
{
public:
	TArray<EFortEncounterDirection>               OutDirections;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIEncounterInfo_GetCurrentSpawnAreaDirections) == 0x000008, "Wrong alignment on FortAIEncounterInfo_GetCurrentSpawnAreaDirections");
static_assert(sizeof(FortAIEncounterInfo_GetCurrentSpawnAreaDirections) == 0x000018, "Wrong size on FortAIEncounterInfo_GetCurrentSpawnAreaDirections");
static_assert(offsetof(FortAIEncounterInfo_GetCurrentSpawnAreaDirections, OutDirections) == 0x000000, "Member 'FortAIEncounterInfo_GetCurrentSpawnAreaDirections::OutDirections' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_GetCurrentSpawnAreaDirections, ReturnValue) == 0x000010, "Member 'FortAIEncounterInfo_GetCurrentSpawnAreaDirections::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterInfo.GetPawnNumberLimit
// 0x0004 (0x0004 - 0x0000)
struct FortAIEncounterInfo_GetPawnNumberLimit final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfo_GetPawnNumberLimit) == 0x000004, "Wrong alignment on FortAIEncounterInfo_GetPawnNumberLimit");
static_assert(sizeof(FortAIEncounterInfo_GetPawnNumberLimit) == 0x000004, "Wrong size on FortAIEncounterInfo_GetPawnNumberLimit");
static_assert(offsetof(FortAIEncounterInfo_GetPawnNumberLimit, ReturnValue) == 0x000000, "Member 'FortAIEncounterInfo_GetPawnNumberLimit::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterInfoOwnerInterface.GetEncounterInfo
// 0x0008 (0x0008 - 0x0000)
struct FortAIEncounterInfoOwnerInterface_GetEncounterInfo final
{
public:
	class UFortAIEncounterInfo*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfoOwnerInterface_GetEncounterInfo) == 0x000008, "Wrong alignment on FortAIEncounterInfoOwnerInterface_GetEncounterInfo");
static_assert(sizeof(FortAIEncounterInfoOwnerInterface_GetEncounterInfo) == 0x000008, "Wrong size on FortAIEncounterInfoOwnerInterface_GetEncounterInfo");
static_assert(offsetof(FortAIEncounterInfoOwnerInterface_GetEncounterInfo, ReturnValue) == 0x000000, "Member 'FortAIEncounterInfoOwnerInterface_GetEncounterInfo::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTimeOfDayManager.BreakExponentialHeightFogValues
// 0x0088 (0x0088 - 0x0000)
struct FortTimeOfDayManager_BreakExponentialHeightFogValues final
{
public:
	struct FExponentialHeightFogValues            HeightFogValues;                                   // 0x0000(0x0044)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         FogDensity;                                        // 0x0044(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogHeightFalloff;                                  // 0x0048(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogMaxOpacity;                                     // 0x004C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDistance;                                     // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringExponent;                   // 0x0054(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringStartDistance;              // 0x0058(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DirectionalInscatteringColor;                      // 0x005C(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogInscatteringColor;                              // 0x006C(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogScatteringDistribution;               // 0x007C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogExtinctionScale;                      // 0x0080(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogDistance;                             // 0x0084(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTimeOfDayManager_BreakExponentialHeightFogValues) == 0x000004, "Wrong alignment on FortTimeOfDayManager_BreakExponentialHeightFogValues");
static_assert(sizeof(FortTimeOfDayManager_BreakExponentialHeightFogValues) == 0x000088, "Wrong size on FortTimeOfDayManager_BreakExponentialHeightFogValues");
static_assert(offsetof(FortTimeOfDayManager_BreakExponentialHeightFogValues, HeightFogValues) == 0x000000, "Member 'FortTimeOfDayManager_BreakExponentialHeightFogValues::HeightFogValues' has a wrong offset!");
static_assert(offsetof(FortTimeOfDayManager_BreakExponentialHeightFogValues, FogDensity) == 0x000044, "Member 'FortTimeOfDayManager_BreakExponentialHeightFogValues::FogDensity' has a wrong offset!");
static_assert(offsetof(FortTimeOfDayManager_BreakExponentialHeightFogValues, FogHeightFalloff) == 0x000048, "Member 'FortTimeOfDayManager_BreakExponentialHeightFogValues::FogHeightFalloff' has a wrong offset!");
static_assert(offsetof(FortTimeOfDayManager_BreakExponentialHeightFogValues, FogMaxOpacity) == 0x00004C, "Member 'FortTimeOfDayManager_BreakExponentialHeightFogValues::FogMaxOpacity' has a wrong offset!");
static_assert(offsetof(FortTimeOfDayManager_BreakExponentialHeightFogValues, StartDistance) == 0x000050, "Member 'FortTimeOfDayManager_BreakExponentialHeightFogValues::StartDistance' has a wrong offset!");
static_assert(offsetof(FortTimeOfDayManager_BreakExponentialHeightFogValues, DirectionalInscatteringExponent) == 0x000054, "Member 'FortTimeOfDayManager_BreakExponentialHeightFogValues::DirectionalInscatteringExponent' has a wrong offset!");
static_assert(offsetof(FortTimeOfDayManager_BreakExponentialHeightFogValues, DirectionalInscatteringStartDistance) == 0x000058, "Member 'FortTimeOfDayManager_BreakExponentialHeightFogValues::DirectionalInscatteringStartDistance' has a wrong offset!");
static_assert(offsetof(FortTimeOfDayManager_BreakExponentialHeightFogValues, DirectionalInscatteringColor) == 0x00005C, "Member 'FortTimeOfDayManager_BreakExponentialHeightFogValues::DirectionalInscatteringColor' has a wrong offset!");
static_assert(offsetof(FortTimeOfDayManager_BreakExponentialHeightFogValues, FogInscatteringColor) == 0x00006C, "Member 'FortTimeOfDayManager_BreakExponentialHeightFogValues::FogInscatteringColor' has a wrong offset!");
static_assert(offsetof(FortTimeOfDayManager_BreakExponentialHeightFogValues, VolumetricFogScatteringDistribution) == 0x00007C, "Member 'FortTimeOfDayManager_BreakExponentialHeightFogValues::VolumetricFogScatteringDistribution' has a wrong offset!");
static_assert(offsetof(FortTimeOfDayManager_BreakExponentialHeightFogValues, VolumetricFogExtinctionScale) == 0x000080, "Member 'FortTimeOfDayManager_BreakExponentialHeightFogValues::VolumetricFogExtinctionScale' has a wrong offset!");
static_assert(offsetof(FortTimeOfDayManager_BreakExponentialHeightFogValues, VolumetricFogDistance) == 0x000084, "Member 'FortTimeOfDayManager_BreakExponentialHeightFogValues::VolumetricFogDistance' has a wrong offset!");

// Function FortniteGame.FortTimeOfDayManager.GetTimeOfDayManagerFromContext
// 0x0010 (0x0010 - 0x0000)
struct FortTimeOfDayManager_GetTimeOfDayManagerFromContext final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortTimeOfDayManager*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTimeOfDayManager_GetTimeOfDayManagerFromContext) == 0x000008, "Wrong alignment on FortTimeOfDayManager_GetTimeOfDayManagerFromContext");
static_assert(sizeof(FortTimeOfDayManager_GetTimeOfDayManagerFromContext) == 0x000010, "Wrong size on FortTimeOfDayManager_GetTimeOfDayManagerFromContext");
static_assert(offsetof(FortTimeOfDayManager_GetTimeOfDayManagerFromContext, WorldContextObject) == 0x000000, "Member 'FortTimeOfDayManager_GetTimeOfDayManagerFromContext::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortTimeOfDayManager_GetTimeOfDayManagerFromContext, ReturnValue) == 0x000008, "Member 'FortTimeOfDayManager_GetTimeOfDayManagerFromContext::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTimeOfDayManager.MakeExponentialHeightFogValues
// 0x0088 (0x0088 - 0x0000)
struct FortTimeOfDayManager_MakeExponentialHeightFogValues final
{
public:
	float                                         FogDensity;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogHeightFalloff;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogMaxOpacity;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDistance;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringExponent;                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringStartDistance;              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DirectionalInscatteringColor;                      // 0x0018(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogInscatteringColor;                              // 0x0028(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogScatteringDistribution;               // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogExtinctionScale;                      // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogDistance;                             // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FExponentialHeightFogValues            ReturnValue;                                       // 0x0044(0x0044)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTimeOfDayManager_MakeExponentialHeightFogValues) == 0x000004, "Wrong alignment on FortTimeOfDayManager_MakeExponentialHeightFogValues");
static_assert(sizeof(FortTimeOfDayManager_MakeExponentialHeightFogValues) == 0x000088, "Wrong size on FortTimeOfDayManager_MakeExponentialHeightFogValues");
static_assert(offsetof(FortTimeOfDayManager_MakeExponentialHeightFogValues, FogDensity) == 0x000000, "Member 'FortTimeOfDayManager_MakeExponentialHeightFogValues::FogDensity' has a wrong offset!");
static_assert(offsetof(FortTimeOfDayManager_MakeExponentialHeightFogValues, FogHeightFalloff) == 0x000004, "Member 'FortTimeOfDayManager_MakeExponentialHeightFogValues::FogHeightFalloff' has a wrong offset!");
static_assert(offsetof(FortTimeOfDayManager_MakeExponentialHeightFogValues, FogMaxOpacity) == 0x000008, "Member 'FortTimeOfDayManager_MakeExponentialHeightFogValues::FogMaxOpacity' has a wrong offset!");
static_assert(offsetof(FortTimeOfDayManager_MakeExponentialHeightFogValues, StartDistance) == 0x00000C, "Member 'FortTimeOfDayManager_MakeExponentialHeightFogValues::StartDistance' has a wrong offset!");
static_assert(offsetof(FortTimeOfDayManager_MakeExponentialHeightFogValues, DirectionalInscatteringExponent) == 0x000010, "Member 'FortTimeOfDayManager_MakeExponentialHeightFogValues::DirectionalInscatteringExponent' has a wrong offset!");
static_assert(offsetof(FortTimeOfDayManager_MakeExponentialHeightFogValues, DirectionalInscatteringStartDistance) == 0x000014, "Member 'FortTimeOfDayManager_MakeExponentialHeightFogValues::DirectionalInscatteringStartDistance' has a wrong offset!");
static_assert(offsetof(FortTimeOfDayManager_MakeExponentialHeightFogValues, DirectionalInscatteringColor) == 0x000018, "Member 'FortTimeOfDayManager_MakeExponentialHeightFogValues::DirectionalInscatteringColor' has a wrong offset!");
static_assert(offsetof(FortTimeOfDayManager_MakeExponentialHeightFogValues, FogInscatteringColor) == 0x000028, "Member 'FortTimeOfDayManager_MakeExponentialHeightFogValues::FogInscatteringColor' has a wrong offset!");
static_assert(offsetof(FortTimeOfDayManager_MakeExponentialHeightFogValues, VolumetricFogScatteringDistribution) == 0x000038, "Member 'FortTimeOfDayManager_MakeExponentialHeightFogValues::VolumetricFogScatteringDistribution' has a wrong offset!");
static_assert(offsetof(FortTimeOfDayManager_MakeExponentialHeightFogValues, VolumetricFogExtinctionScale) == 0x00003C, "Member 'FortTimeOfDayManager_MakeExponentialHeightFogValues::VolumetricFogExtinctionScale' has a wrong offset!");
static_assert(offsetof(FortTimeOfDayManager_MakeExponentialHeightFogValues, VolumetricFogDistance) == 0x000040, "Member 'FortTimeOfDayManager_MakeExponentialHeightFogValues::VolumetricFogDistance' has a wrong offset!");
static_assert(offsetof(FortTimeOfDayManager_MakeExponentialHeightFogValues, ReturnValue) == 0x000044, "Member 'FortTimeOfDayManager_MakeExponentialHeightFogValues::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTimeOfDayManager.FFToTimeOfDay
// 0x0008 (0x0008 - 0x0000)
struct FortTimeOfDayManager_FFToTimeOfDay final
{
public:
	float                                         FastForwardTime;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FastForwardSpeed;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTimeOfDayManager_FFToTimeOfDay) == 0x000004, "Wrong alignment on FortTimeOfDayManager_FFToTimeOfDay");
static_assert(sizeof(FortTimeOfDayManager_FFToTimeOfDay) == 0x000008, "Wrong size on FortTimeOfDayManager_FFToTimeOfDay");
static_assert(offsetof(FortTimeOfDayManager_FFToTimeOfDay, FastForwardTime) == 0x000000, "Member 'FortTimeOfDayManager_FFToTimeOfDay::FastForwardTime' has a wrong offset!");
static_assert(offsetof(FortTimeOfDayManager_FFToTimeOfDay, FastForwardSpeed) == 0x000004, "Member 'FortTimeOfDayManager_FFToTimeOfDay::FastForwardSpeed' has a wrong offset!");

// Function FortniteGame.FortTimeOfDayManager.OnUpdateDirectionalLightForTimeOfDay
// 0x0010 (0x0010 - 0x0000)
struct FortTimeOfDayManager_OnUpdateDirectionalLightForTimeOfDay final
{
public:
	struct FLinearColor                           AboutToApplyDirectionalLightColor;                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTimeOfDayManager_OnUpdateDirectionalLightForTimeOfDay) == 0x000004, "Wrong alignment on FortTimeOfDayManager_OnUpdateDirectionalLightForTimeOfDay");
static_assert(sizeof(FortTimeOfDayManager_OnUpdateDirectionalLightForTimeOfDay) == 0x000010, "Wrong size on FortTimeOfDayManager_OnUpdateDirectionalLightForTimeOfDay");
static_assert(offsetof(FortTimeOfDayManager_OnUpdateDirectionalLightForTimeOfDay, AboutToApplyDirectionalLightColor) == 0x000000, "Member 'FortTimeOfDayManager_OnUpdateDirectionalLightForTimeOfDay::AboutToApplyDirectionalLightColor' has a wrong offset!");

// Function FortniteGame.FortTimeOfDayManager.SetDayPhase
// 0x0010 (0x0010 - 0x0000)
struct FortTimeOfDayManager_SetDayPhase final
{
public:
	class FString                                 DayPhase;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTimeOfDayManager_SetDayPhase) == 0x000008, "Wrong alignment on FortTimeOfDayManager_SetDayPhase");
static_assert(sizeof(FortTimeOfDayManager_SetDayPhase) == 0x000010, "Wrong size on FortTimeOfDayManager_SetDayPhase");
static_assert(offsetof(FortTimeOfDayManager_SetDayPhase, DayPhase) == 0x000000, "Member 'FortTimeOfDayManager_SetDayPhase::DayPhase' has a wrong offset!");

// Function FortniteGame.FortTimeOfDayManager.SetDirectionalLightColorMultiplier
// 0x0004 (0x0004 - 0x0000)
struct FortTimeOfDayManager_SetDirectionalLightColorMultiplier final
{
public:
	float                                         NewDirectionalLightColorMultiplier;                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTimeOfDayManager_SetDirectionalLightColorMultiplier) == 0x000004, "Wrong alignment on FortTimeOfDayManager_SetDirectionalLightColorMultiplier");
static_assert(sizeof(FortTimeOfDayManager_SetDirectionalLightColorMultiplier) == 0x000004, "Wrong size on FortTimeOfDayManager_SetDirectionalLightColorMultiplier");
static_assert(offsetof(FortTimeOfDayManager_SetDirectionalLightColorMultiplier, NewDirectionalLightColorMultiplier) == 0x000000, "Member 'FortTimeOfDayManager_SetDirectionalLightColorMultiplier::NewDirectionalLightColorMultiplier' has a wrong offset!");

// Function FortniteGame.FortTimeOfDayManager.SetFogDirectionalInscatteringMultiplier
// 0x0004 (0x0004 - 0x0000)
struct FortTimeOfDayManager_SetFogDirectionalInscatteringMultiplier final
{
public:
	float                                         NewFogDirectionalInscatteringMultiplier;           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTimeOfDayManager_SetFogDirectionalInscatteringMultiplier) == 0x000004, "Wrong alignment on FortTimeOfDayManager_SetFogDirectionalInscatteringMultiplier");
static_assert(sizeof(FortTimeOfDayManager_SetFogDirectionalInscatteringMultiplier) == 0x000004, "Wrong size on FortTimeOfDayManager_SetFogDirectionalInscatteringMultiplier");
static_assert(offsetof(FortTimeOfDayManager_SetFogDirectionalInscatteringMultiplier, NewFogDirectionalInscatteringMultiplier) == 0x000000, "Member 'FortTimeOfDayManager_SetFogDirectionalInscatteringMultiplier::NewFogDirectionalInscatteringMultiplier' has a wrong offset!");

// Function FortniteGame.FortTimeOfDayManager.SetSpecificTimeOfDayInEditor
// 0x0004 (0x0004 - 0x0000)
struct FortTimeOfDayManager_SetSpecificTimeOfDayInEditor final
{
public:
	float                                         NewTimeOfDayInEditor;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTimeOfDayManager_SetSpecificTimeOfDayInEditor) == 0x000004, "Wrong alignment on FortTimeOfDayManager_SetSpecificTimeOfDayInEditor");
static_assert(sizeof(FortTimeOfDayManager_SetSpecificTimeOfDayInEditor) == 0x000004, "Wrong size on FortTimeOfDayManager_SetSpecificTimeOfDayInEditor");
static_assert(offsetof(FortTimeOfDayManager_SetSpecificTimeOfDayInEditor, NewTimeOfDayInEditor) == 0x000000, "Member 'FortTimeOfDayManager_SetSpecificTimeOfDayInEditor::NewTimeOfDayInEditor' has a wrong offset!");

// Function FortniteGame.FortTimeOfDayManager.SetStormStrength
// 0x0004 (0x0004 - 0x0000)
struct FortTimeOfDayManager_SetStormStrength final
{
public:
	float                                         NewStormStrength;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTimeOfDayManager_SetStormStrength) == 0x000004, "Wrong alignment on FortTimeOfDayManager_SetStormStrength");
static_assert(sizeof(FortTimeOfDayManager_SetStormStrength) == 0x000004, "Wrong size on FortTimeOfDayManager_SetStormStrength");
static_assert(offsetof(FortTimeOfDayManager_SetStormStrength, NewStormStrength) == 0x000000, "Member 'FortTimeOfDayManager_SetStormStrength::NewStormStrength' has a wrong offset!");

// Function FortniteGame.FortTimeOfDayManager.SetTimeOfDay
// 0x0010 (0x0010 - 0x0000)
struct FortTimeOfDayManager_SetTimeOfDay final
{
public:
	class FString                                 NewTimeOfDay;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTimeOfDayManager_SetTimeOfDay) == 0x000008, "Wrong alignment on FortTimeOfDayManager_SetTimeOfDay");
static_assert(sizeof(FortTimeOfDayManager_SetTimeOfDay) == 0x000010, "Wrong size on FortTimeOfDayManager_SetTimeOfDay");
static_assert(offsetof(FortTimeOfDayManager_SetTimeOfDay, NewTimeOfDay) == 0x000000, "Member 'FortTimeOfDayManager_SetTimeOfDay::NewTimeOfDay' has a wrong offset!");

// Function FortniteGame.FortTimeOfDayManager.SetTimeOfDayAbsoluteSpeed
// 0x0004 (0x0004 - 0x0000)
struct FortTimeOfDayManager_SetTimeOfDayAbsoluteSpeed final
{
public:
	float                                         NewTimeOfDaySpeed;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTimeOfDayManager_SetTimeOfDayAbsoluteSpeed) == 0x000004, "Wrong alignment on FortTimeOfDayManager_SetTimeOfDayAbsoluteSpeed");
static_assert(sizeof(FortTimeOfDayManager_SetTimeOfDayAbsoluteSpeed) == 0x000004, "Wrong size on FortTimeOfDayManager_SetTimeOfDayAbsoluteSpeed");
static_assert(offsetof(FortTimeOfDayManager_SetTimeOfDayAbsoluteSpeed, NewTimeOfDaySpeed) == 0x000000, "Member 'FortTimeOfDayManager_SetTimeOfDayAbsoluteSpeed::NewTimeOfDaySpeed' has a wrong offset!");

// Function FortniteGame.FortTimeOfDayManager.SetTimeOfDayFloat
// 0x0004 (0x0004 - 0x0000)
struct FortTimeOfDayManager_SetTimeOfDayFloat final
{
public:
	float                                         TimeOfDayInHours;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTimeOfDayManager_SetTimeOfDayFloat) == 0x000004, "Wrong alignment on FortTimeOfDayManager_SetTimeOfDayFloat");
static_assert(sizeof(FortTimeOfDayManager_SetTimeOfDayFloat) == 0x000004, "Wrong size on FortTimeOfDayManager_SetTimeOfDayFloat");
static_assert(offsetof(FortTimeOfDayManager_SetTimeOfDayFloat, TimeOfDayInHours) == 0x000000, "Member 'FortTimeOfDayManager_SetTimeOfDayFloat::TimeOfDayInHours' has a wrong offset!");

// Function FortniteGame.FortTimeOfDayManager.SetTimeOfDayInHours
// 0x0004 (0x0004 - 0x0000)
struct FortTimeOfDayManager_SetTimeOfDayInHours final
{
public:
	float                                         TimeOfDayInHours;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTimeOfDayManager_SetTimeOfDayInHours) == 0x000004, "Wrong alignment on FortTimeOfDayManager_SetTimeOfDayInHours");
static_assert(sizeof(FortTimeOfDayManager_SetTimeOfDayInHours) == 0x000004, "Wrong size on FortTimeOfDayManager_SetTimeOfDayInHours");
static_assert(offsetof(FortTimeOfDayManager_SetTimeOfDayInHours, TimeOfDayInHours) == 0x000000, "Member 'FortTimeOfDayManager_SetTimeOfDayInHours::TimeOfDayInHours' has a wrong offset!");

// Function FortniteGame.FortTimeOfDayManager.SetTimeOfDayManagerVisibility
// 0x0001 (0x0001 - 0x0000)
struct FortTimeOfDayManager_SetTimeOfDayManagerVisibility final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTimeOfDayManager_SetTimeOfDayManagerVisibility) == 0x000001, "Wrong alignment on FortTimeOfDayManager_SetTimeOfDayManagerVisibility");
static_assert(sizeof(FortTimeOfDayManager_SetTimeOfDayManagerVisibility) == 0x000001, "Wrong size on FortTimeOfDayManager_SetTimeOfDayManagerVisibility");
static_assert(offsetof(FortTimeOfDayManager_SetTimeOfDayManagerVisibility, bVisible) == 0x000000, "Member 'FortTimeOfDayManager_SetTimeOfDayManagerVisibility::bVisible' has a wrong offset!");

// Function FortniteGame.FortTimeOfDayManager.SetTimeOfDaySpeed
// 0x0004 (0x0004 - 0x0000)
struct FortTimeOfDayManager_SetTimeOfDaySpeed final
{
public:
	float                                         TimeOfDaySpeedFactor;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTimeOfDayManager_SetTimeOfDaySpeed) == 0x000004, "Wrong alignment on FortTimeOfDayManager_SetTimeOfDaySpeed");
static_assert(sizeof(FortTimeOfDayManager_SetTimeOfDaySpeed) == 0x000004, "Wrong size on FortTimeOfDayManager_SetTimeOfDaySpeed");
static_assert(offsetof(FortTimeOfDayManager_SetTimeOfDaySpeed, TimeOfDaySpeedFactor) == 0x000000, "Member 'FortTimeOfDayManager_SetTimeOfDaySpeed::TimeOfDaySpeedFactor' has a wrong offset!");

// Function FortniteGame.FortTimeOfDayManager.SetTimeOfDaySpeedFloat
// 0x0004 (0x0004 - 0x0000)
struct FortTimeOfDayManager_SetTimeOfDaySpeedFloat final
{
public:
	float                                         InTimeOfDaySpeed;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTimeOfDayManager_SetTimeOfDaySpeedFloat) == 0x000004, "Wrong alignment on FortTimeOfDayManager_SetTimeOfDaySpeedFloat");
static_assert(sizeof(FortTimeOfDayManager_SetTimeOfDaySpeedFloat) == 0x000004, "Wrong size on FortTimeOfDayManager_SetTimeOfDaySpeedFloat");
static_assert(offsetof(FortTimeOfDayManager_SetTimeOfDaySpeedFloat, InTimeOfDaySpeed) == 0x000000, "Member 'FortTimeOfDayManager_SetTimeOfDaySpeedFloat::InTimeOfDaySpeed' has a wrong offset!");

// Function FortniteGame.FortTimeOfDayManager.SetUseSpecificTimeOfDayEditing
// 0x0001 (0x0001 - 0x0000)
struct FortTimeOfDayManager_SetUseSpecificTimeOfDayEditing final
{
public:
	bool                                          bShouldUseSpecificTimeOfDay;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTimeOfDayManager_SetUseSpecificTimeOfDayEditing) == 0x000001, "Wrong alignment on FortTimeOfDayManager_SetUseSpecificTimeOfDayEditing");
static_assert(sizeof(FortTimeOfDayManager_SetUseSpecificTimeOfDayEditing) == 0x000001, "Wrong size on FortTimeOfDayManager_SetUseSpecificTimeOfDayEditing");
static_assert(offsetof(FortTimeOfDayManager_SetUseSpecificTimeOfDayEditing, bShouldUseSpecificTimeOfDay) == 0x000000, "Member 'FortTimeOfDayManager_SetUseSpecificTimeOfDayEditing::bShouldUseSpecificTimeOfDay' has a wrong offset!");

// Function FortniteGame.FortTimeOfDayManager.GetPreviousDayPhase
// 0x0001 (0x0001 - 0x0000)
struct FortTimeOfDayManager_GetPreviousDayPhase final
{
public:
	EFortDayPhase                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTimeOfDayManager_GetPreviousDayPhase) == 0x000001, "Wrong alignment on FortTimeOfDayManager_GetPreviousDayPhase");
static_assert(sizeof(FortTimeOfDayManager_GetPreviousDayPhase) == 0x000001, "Wrong size on FortTimeOfDayManager_GetPreviousDayPhase");
static_assert(offsetof(FortTimeOfDayManager_GetPreviousDayPhase, ReturnValue) == 0x000000, "Member 'FortTimeOfDayManager_GetPreviousDayPhase::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTimeOfDayManager.GetStormStrength
// 0x0004 (0x0004 - 0x0000)
struct FortTimeOfDayManager_GetStormStrength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTimeOfDayManager_GetStormStrength) == 0x000004, "Wrong alignment on FortTimeOfDayManager_GetStormStrength");
static_assert(sizeof(FortTimeOfDayManager_GetStormStrength) == 0x000004, "Wrong size on FortTimeOfDayManager_GetStormStrength");
static_assert(offsetof(FortTimeOfDayManager_GetStormStrength, ReturnValue) == 0x000000, "Member 'FortTimeOfDayManager_GetStormStrength::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTimeOfDayManager.GetThreatClouds
// 0x0010 (0x0010 - 0x0000)
struct FortTimeOfDayManager_GetThreatClouds final
{
public:
	TArray<struct FThreatLocationInfo>            ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTimeOfDayManager_GetThreatClouds) == 0x000008, "Wrong alignment on FortTimeOfDayManager_GetThreatClouds");
static_assert(sizeof(FortTimeOfDayManager_GetThreatClouds) == 0x000010, "Wrong size on FortTimeOfDayManager_GetThreatClouds");
static_assert(offsetof(FortTimeOfDayManager_GetThreatClouds, ReturnValue) == 0x000000, "Member 'FortTimeOfDayManager_GetThreatClouds::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterRiftManager.GetAssociatedMission
// 0x0008 (0x0008 - 0x0000)
struct FortAIEncounterRiftManager_GetAssociatedMission final
{
public:
	class AFortMission*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterRiftManager_GetAssociatedMission) == 0x000008, "Wrong alignment on FortAIEncounterRiftManager_GetAssociatedMission");
static_assert(sizeof(FortAIEncounterRiftManager_GetAssociatedMission) == 0x000008, "Wrong size on FortAIEncounterRiftManager_GetAssociatedMission");
static_assert(offsetof(FortAIEncounterRiftManager_GetAssociatedMission, ReturnValue) == 0x000000, "Member 'FortAIEncounterRiftManager_GetAssociatedMission::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterSequence.Next
// 0x0001 (0x0001 - 0x0000)
struct FortAIEncounterSequence_Next final
{
public:
	EFortEncounterSequenceResult                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterSequence_Next) == 0x000001, "Wrong alignment on FortAIEncounterSequence_Next");
static_assert(sizeof(FortAIEncounterSequence_Next) == 0x000001, "Wrong size on FortAIEncounterSequence_Next");
static_assert(offsetof(FortAIEncounterSequence_Next, ReturnValue) == 0x000000, "Member 'FortAIEncounterSequence_Next::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterSequence.Previous
// 0x0001 (0x0001 - 0x0000)
struct FortAIEncounterSequence_Previous final
{
public:
	EFortEncounterSequenceResult                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterSequence_Previous) == 0x000001, "Wrong alignment on FortAIEncounterSequence_Previous");
static_assert(sizeof(FortAIEncounterSequence_Previous) == 0x000001, "Wrong size on FortAIEncounterSequence_Previous");
static_assert(offsetof(FortAIEncounterSequence_Previous, ReturnValue) == 0x000000, "Member 'FortAIEncounterSequence_Previous::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterSequence.StartCurrentEncounter
// 0x00D8 (0x00D8 - 0x0000)
struct FortAIEncounterSequence_StartCurrentEncounter final
{
public:
	EFortEncounterSequenceResult                  OutRequestResult;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         TargetActors;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UFortAIAssignmentSettings*              AssignmentSettings;                                // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEncounterEnvironmentQueryInfo         OverrideEnvironmentQueryInfo;                      // 0x0020(0x0028)(Parm, NativeAccessSpecifierPublic)
	class AActor*                                 OptionalQueryActor;                                // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  InjectedTags;                                      // 0x0050(0x0020)(Parm, NativeAccessSpecifierPublic)
	struct FFortEncounterSettings                 EncounterSettings;                                 // 0x0070(0x0058)(Parm, NativeAccessSpecifierPublic)
	int32                                         ActivationDelay;                                   // 0x00C8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAIEncounterInfo*                   ReturnValue;                                       // 0x00D0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterSequence_StartCurrentEncounter) == 0x000008, "Wrong alignment on FortAIEncounterSequence_StartCurrentEncounter");
static_assert(sizeof(FortAIEncounterSequence_StartCurrentEncounter) == 0x0000D8, "Wrong size on FortAIEncounterSequence_StartCurrentEncounter");
static_assert(offsetof(FortAIEncounterSequence_StartCurrentEncounter, OutRequestResult) == 0x000000, "Member 'FortAIEncounterSequence_StartCurrentEncounter::OutRequestResult' has a wrong offset!");
static_assert(offsetof(FortAIEncounterSequence_StartCurrentEncounter, TargetActors) == 0x000008, "Member 'FortAIEncounterSequence_StartCurrentEncounter::TargetActors' has a wrong offset!");
static_assert(offsetof(FortAIEncounterSequence_StartCurrentEncounter, AssignmentSettings) == 0x000018, "Member 'FortAIEncounterSequence_StartCurrentEncounter::AssignmentSettings' has a wrong offset!");
static_assert(offsetof(FortAIEncounterSequence_StartCurrentEncounter, OverrideEnvironmentQueryInfo) == 0x000020, "Member 'FortAIEncounterSequence_StartCurrentEncounter::OverrideEnvironmentQueryInfo' has a wrong offset!");
static_assert(offsetof(FortAIEncounterSequence_StartCurrentEncounter, OptionalQueryActor) == 0x000048, "Member 'FortAIEncounterSequence_StartCurrentEncounter::OptionalQueryActor' has a wrong offset!");
static_assert(offsetof(FortAIEncounterSequence_StartCurrentEncounter, InjectedTags) == 0x000050, "Member 'FortAIEncounterSequence_StartCurrentEncounter::InjectedTags' has a wrong offset!");
static_assert(offsetof(FortAIEncounterSequence_StartCurrentEncounter, EncounterSettings) == 0x000070, "Member 'FortAIEncounterSequence_StartCurrentEncounter::EncounterSettings' has a wrong offset!");
static_assert(offsetof(FortAIEncounterSequence_StartCurrentEncounter, ActivationDelay) == 0x0000C8, "Member 'FortAIEncounterSequence_StartCurrentEncounter::ActivationDelay' has a wrong offset!");
static_assert(offsetof(FortAIEncounterSequence_StartCurrentEncounter, ReturnValue) == 0x0000D0, "Member 'FortAIEncounterSequence_StartCurrentEncounter::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterSequence.EncounterBelongsToSequence
// 0x0010 (0x0010 - 0x0000)
struct FortAIEncounterSequence_EncounterBelongsToSequence final
{
public:
	class UFortAIEncounterInfo*                   InEncounter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIEncounterSequence_EncounterBelongsToSequence) == 0x000008, "Wrong alignment on FortAIEncounterSequence_EncounterBelongsToSequence");
static_assert(sizeof(FortAIEncounterSequence_EncounterBelongsToSequence) == 0x000010, "Wrong size on FortAIEncounterSequence_EncounterBelongsToSequence");
static_assert(offsetof(FortAIEncounterSequence_EncounterBelongsToSequence, InEncounter) == 0x000000, "Member 'FortAIEncounterSequence_EncounterBelongsToSequence::InEncounter' has a wrong offset!");
static_assert(offsetof(FortAIEncounterSequence_EncounterBelongsToSequence, ReturnValue) == 0x000008, "Member 'FortAIEncounterSequence_EncounterBelongsToSequence::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterSequence.GetCurrentEncounter
// 0x0008 (0x0008 - 0x0000)
struct FortAIEncounterSequence_GetCurrentEncounter final
{
public:
	class UFortAIEncounterInfo*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterSequence_GetCurrentEncounter) == 0x000008, "Wrong alignment on FortAIEncounterSequence_GetCurrentEncounter");
static_assert(sizeof(FortAIEncounterSequence_GetCurrentEncounter) == 0x000008, "Wrong size on FortAIEncounterSequence_GetCurrentEncounter");
static_assert(offsetof(FortAIEncounterSequence_GetCurrentEncounter, ReturnValue) == 0x000000, "Member 'FortAIEncounterSequence_GetCurrentEncounter::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterSequence.GetEncounterIndexInSequence
// 0x0004 (0x0004 - 0x0000)
struct FortAIEncounterSequence_GetEncounterIndexInSequence final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterSequence_GetEncounterIndexInSequence) == 0x000004, "Wrong alignment on FortAIEncounterSequence_GetEncounterIndexInSequence");
static_assert(sizeof(FortAIEncounterSequence_GetEncounterIndexInSequence) == 0x000004, "Wrong size on FortAIEncounterSequence_GetEncounterIndexInSequence");
static_assert(offsetof(FortAIEncounterSequence_GetEncounterIndexInSequence, ReturnValue) == 0x000000, "Member 'FortAIEncounterSequence_GetEncounterIndexInSequence::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterSequence.GetNumEncountersInSequence
// 0x0004 (0x0004 - 0x0000)
struct FortAIEncounterSequence_GetNumEncountersInSequence final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterSequence_GetNumEncountersInSequence) == 0x000004, "Wrong alignment on FortAIEncounterSequence_GetNumEncountersInSequence");
static_assert(sizeof(FortAIEncounterSequence_GetNumEncountersInSequence) == 0x000004, "Wrong size on FortAIEncounterSequence_GetNumEncountersInSequence");
static_assert(offsetof(FortAIEncounterSequence_GetNumEncountersInSequence, ReturnValue) == 0x000000, "Member 'FortAIEncounterSequence_GetNumEncountersInSequence::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterSequence.HasEncounter
// 0x0001 (0x0001 - 0x0000)
struct FortAIEncounterSequence_HasEncounter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterSequence_HasEncounter) == 0x000001, "Wrong alignment on FortAIEncounterSequence_HasEncounter");
static_assert(sizeof(FortAIEncounterSequence_HasEncounter) == 0x000001, "Wrong size on FortAIEncounterSequence_HasEncounter");
static_assert(offsetof(FortAIEncounterSequence_HasEncounter, ReturnValue) == 0x000000, "Member 'FortAIEncounterSequence_HasEncounter::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterSequence.IsOnFinalIndexInSequence
// 0x0001 (0x0001 - 0x0000)
struct FortAIEncounterSequence_IsOnFinalIndexInSequence final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterSequence_IsOnFinalIndexInSequence) == 0x000001, "Wrong alignment on FortAIEncounterSequence_IsOnFinalIndexInSequence");
static_assert(sizeof(FortAIEncounterSequence_IsOnFinalIndexInSequence) == 0x000001, "Wrong size on FortAIEncounterSequence_IsOnFinalIndexInSequence");
static_assert(offsetof(FortAIEncounterSequence_IsOnFinalIndexInSequence, ReturnValue) == 0x000000, "Member 'FortAIEncounterSequence_IsOnFinalIndexInSequence::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAlterationFunctionLibrary.GetAlterationImpactPhysicalSurfaceEffects
// 0x0B30 (0x0B30 - 0x0000)
struct FortAlterationFunctionLibrary_GetAlterationImpactPhysicalSurfaceEffects final
{
public:
	EPhysicalSurface                              HitSurface;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortCosmeticModification              CosmeticMod;                                       // 0x0008(0x0B20)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UParticleSystem*                        ReturnValue;                                       // 0x0B28(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationFunctionLibrary_GetAlterationImpactPhysicalSurfaceEffects) == 0x000008, "Wrong alignment on FortAlterationFunctionLibrary_GetAlterationImpactPhysicalSurfaceEffects");
static_assert(sizeof(FortAlterationFunctionLibrary_GetAlterationImpactPhysicalSurfaceEffects) == 0x000B30, "Wrong size on FortAlterationFunctionLibrary_GetAlterationImpactPhysicalSurfaceEffects");
static_assert(offsetof(FortAlterationFunctionLibrary_GetAlterationImpactPhysicalSurfaceEffects, HitSurface) == 0x000000, "Member 'FortAlterationFunctionLibrary_GetAlterationImpactPhysicalSurfaceEffects::HitSurface' has a wrong offset!");
static_assert(offsetof(FortAlterationFunctionLibrary_GetAlterationImpactPhysicalSurfaceEffects, CosmeticMod) == 0x000008, "Member 'FortAlterationFunctionLibrary_GetAlterationImpactPhysicalSurfaceEffects::CosmeticMod' has a wrong offset!");
static_assert(offsetof(FortAlterationFunctionLibrary_GetAlterationImpactPhysicalSurfaceEffects, ReturnValue) == 0x000B28, "Member 'FortAlterationFunctionLibrary_GetAlterationImpactPhysicalSurfaceEffects::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterTargetInterface.GetObjectiveCompletionPercentage
// 0x0004 (0x0004 - 0x0000)
struct FortAIEncounterTargetInterface_GetObjectiveCompletionPercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterTargetInterface_GetObjectiveCompletionPercentage) == 0x000004, "Wrong alignment on FortAIEncounterTargetInterface_GetObjectiveCompletionPercentage");
static_assert(sizeof(FortAIEncounterTargetInterface_GetObjectiveCompletionPercentage) == 0x000004, "Wrong size on FortAIEncounterTargetInterface_GetObjectiveCompletionPercentage");
static_assert(offsetof(FortAIEncounterTargetInterface_GetObjectiveCompletionPercentage, ReturnValue) == 0x000000, "Member 'FortAIEncounterTargetInterface_GetObjectiveCompletionPercentage::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterTargetInterface.IsFloatingTarget
// 0x0001 (0x0001 - 0x0000)
struct FortAIEncounterTargetInterface_IsFloatingTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterTargetInterface_IsFloatingTarget) == 0x000001, "Wrong alignment on FortAIEncounterTargetInterface_IsFloatingTarget");
static_assert(sizeof(FortAIEncounterTargetInterface_IsFloatingTarget) == 0x000001, "Wrong size on FortAIEncounterTargetInterface_IsFloatingTarget");
static_assert(offsetof(FortAIEncounterTargetInterface_IsFloatingTarget, ReturnValue) == 0x000000, "Member 'FortAIEncounterTargetInterface_IsFloatingTarget::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIFunctionLibrary.MakeNoiseEvent
// 0x0010 (0x0010 - 0x0000)
struct FortAIFunctionLibrary_MakeNoiseEvent final
{
public:
	class AActor*                                 NoiseMaker;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRange;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIFunctionLibrary_MakeNoiseEvent) == 0x000008, "Wrong alignment on FortAIFunctionLibrary_MakeNoiseEvent");
static_assert(sizeof(FortAIFunctionLibrary_MakeNoiseEvent) == 0x000010, "Wrong size on FortAIFunctionLibrary_MakeNoiseEvent");
static_assert(offsetof(FortAIFunctionLibrary_MakeNoiseEvent, NoiseMaker) == 0x000000, "Member 'FortAIFunctionLibrary_MakeNoiseEvent::NoiseMaker' has a wrong offset!");
static_assert(offsetof(FortAIFunctionLibrary_MakeNoiseEvent, MaxRange) == 0x000008, "Member 'FortAIFunctionLibrary_MakeNoiseEvent::MaxRange' has a wrong offset!");

// Function FortniteGame.FortAIFunctionLibrary.MakeNoiseEventAtLocation
// 0x0018 (0x0018 - 0x0000)
struct FortAIFunctionLibrary_MakeNoiseEventAtLocation final
{
public:
	class AActor*                                 NoiseMaker;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRange;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NoiseLocation;                                     // 0x000C(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIFunctionLibrary_MakeNoiseEventAtLocation) == 0x000008, "Wrong alignment on FortAIFunctionLibrary_MakeNoiseEventAtLocation");
static_assert(sizeof(FortAIFunctionLibrary_MakeNoiseEventAtLocation) == 0x000018, "Wrong size on FortAIFunctionLibrary_MakeNoiseEventAtLocation");
static_assert(offsetof(FortAIFunctionLibrary_MakeNoiseEventAtLocation, NoiseMaker) == 0x000000, "Member 'FortAIFunctionLibrary_MakeNoiseEventAtLocation::NoiseMaker' has a wrong offset!");
static_assert(offsetof(FortAIFunctionLibrary_MakeNoiseEventAtLocation, MaxRange) == 0x000008, "Member 'FortAIFunctionLibrary_MakeNoiseEventAtLocation::MaxRange' has a wrong offset!");
static_assert(offsetof(FortAIFunctionLibrary_MakeNoiseEventAtLocation, NoiseLocation) == 0x00000C, "Member 'FortAIFunctionLibrary_MakeNoiseEventAtLocation::NoiseLocation' has a wrong offset!");

// Function FortniteGame.FortAIGoalManager.AddGoalsToWorldAssignment
// 0x0048 (0x0048 - 0x0000)
struct FortAIGoalManager_AddGoalsToWorldAssignment final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAIAssignmentIdentifier            AssignmentIdentifier;                              // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FFortAIGoalInfo>                GoalInfos;                                         // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIGoalManager_AddGoalsToWorldAssignment) == 0x000008, "Wrong alignment on FortAIGoalManager_AddGoalsToWorldAssignment");
static_assert(sizeof(FortAIGoalManager_AddGoalsToWorldAssignment) == 0x000048, "Wrong size on FortAIGoalManager_AddGoalsToWorldAssignment");
static_assert(offsetof(FortAIGoalManager_AddGoalsToWorldAssignment, WorldContextObject) == 0x000000, "Member 'FortAIGoalManager_AddGoalsToWorldAssignment::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_AddGoalsToWorldAssignment, AssignmentIdentifier) == 0x000008, "Member 'FortAIGoalManager_AddGoalsToWorldAssignment::AssignmentIdentifier' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_AddGoalsToWorldAssignment, GoalInfos) == 0x000038, "Member 'FortAIGoalManager_AddGoalsToWorldAssignment::GoalInfos' has a wrong offset!");

// Function FortniteGame.FortAIGoalManager.AddGoalToWorldAssignment
// 0x0050 (0x0050 - 0x0000)
struct FortAIGoalManager_AddGoalToWorldAssignment final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAIAssignmentIdentifier            AssignmentIdentifier;                              // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FFortAIGoalInfo                        GoalInfo;                                          // 0x0038(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIGoalManager_AddGoalToWorldAssignment) == 0x000008, "Wrong alignment on FortAIGoalManager_AddGoalToWorldAssignment");
static_assert(sizeof(FortAIGoalManager_AddGoalToWorldAssignment) == 0x000050, "Wrong size on FortAIGoalManager_AddGoalToWorldAssignment");
static_assert(offsetof(FortAIGoalManager_AddGoalToWorldAssignment, WorldContextObject) == 0x000000, "Member 'FortAIGoalManager_AddGoalToWorldAssignment::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_AddGoalToWorldAssignment, AssignmentIdentifier) == 0x000008, "Member 'FortAIGoalManager_AddGoalToWorldAssignment::AssignmentIdentifier' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_AddGoalToWorldAssignment, GoalInfo) == 0x000038, "Member 'FortAIGoalManager_AddGoalToWorldAssignment::GoalInfo' has a wrong offset!");

// Function FortniteGame.FortAIGoalManager.CreateWorldAssignment
// 0x0080 (0x0080 - 0x0000)
struct FortAIGoalManager_CreateWorldAssignment final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAIAssignmentIdentifier            WorldAssignmentIdentifier;                         // 0x0008(0x0030)(Parm, NativeAccessSpecifierPublic)
	class UFortAIAssignmentSettings*              AssignmentSettings;                                // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortAIGoalProvider>        GoalProvider;                                      // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAIAssignmentIdentifier            AssignmentIdentifier;                              // 0x0048(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
	EAssignmentCreationResult                     CreationResult;                                    // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIGoalManager_CreateWorldAssignment) == 0x000008, "Wrong alignment on FortAIGoalManager_CreateWorldAssignment");
static_assert(sizeof(FortAIGoalManager_CreateWorldAssignment) == 0x000080, "Wrong size on FortAIGoalManager_CreateWorldAssignment");
static_assert(offsetof(FortAIGoalManager_CreateWorldAssignment, WorldContextObject) == 0x000000, "Member 'FortAIGoalManager_CreateWorldAssignment::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_CreateWorldAssignment, WorldAssignmentIdentifier) == 0x000008, "Member 'FortAIGoalManager_CreateWorldAssignment::WorldAssignmentIdentifier' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_CreateWorldAssignment, AssignmentSettings) == 0x000038, "Member 'FortAIGoalManager_CreateWorldAssignment::AssignmentSettings' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_CreateWorldAssignment, GoalProvider) == 0x000040, "Member 'FortAIGoalManager_CreateWorldAssignment::GoalProvider' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_CreateWorldAssignment, AssignmentIdentifier) == 0x000048, "Member 'FortAIGoalManager_CreateWorldAssignment::AssignmentIdentifier' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_CreateWorldAssignment, CreationResult) == 0x000078, "Member 'FortAIGoalManager_CreateWorldAssignment::CreationResult' has a wrong offset!");

// Function FortniteGame.FortAIGoalManager.MakeGoalFromActor
// 0x0030 (0x0030 - 0x0000)
struct FortAIGoalManager_MakeGoalFromActor final
{
public:
	struct FFortAIGoalInfo                        Goal;                                              // 0x0000(0x0018)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 GoalActor;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActorAlwaysPerceived;                             // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGoalActorAllowsUndermining;                       // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIGoalManager_MakeGoalFromActor) == 0x000008, "Wrong alignment on FortAIGoalManager_MakeGoalFromActor");
static_assert(sizeof(FortAIGoalManager_MakeGoalFromActor) == 0x000030, "Wrong size on FortAIGoalManager_MakeGoalFromActor");
static_assert(offsetof(FortAIGoalManager_MakeGoalFromActor, Goal) == 0x000000, "Member 'FortAIGoalManager_MakeGoalFromActor::Goal' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalFromActor, WorldContextObject) == 0x000018, "Member 'FortAIGoalManager_MakeGoalFromActor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalFromActor, GoalActor) == 0x000020, "Member 'FortAIGoalManager_MakeGoalFromActor::GoalActor' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalFromActor, bActorAlwaysPerceived) == 0x000028, "Member 'FortAIGoalManager_MakeGoalFromActor::bActorAlwaysPerceived' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalFromActor, bGoalActorAllowsUndermining) == 0x000029, "Member 'FortAIGoalManager_MakeGoalFromActor::bGoalActorAllowsUndermining' has a wrong offset!");

// Function FortniteGame.FortAIGoalManager.MakeGoalFromLocation
// 0x0030 (0x0030 - 0x0000)
struct FortAIGoalManager_MakeGoalFromLocation final
{
public:
	struct FFortAIGoalInfo                        Goal;                                              // 0x0000(0x0018)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GoalLocation;                                      // 0x0020(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIGoalManager_MakeGoalFromLocation) == 0x000008, "Wrong alignment on FortAIGoalManager_MakeGoalFromLocation");
static_assert(sizeof(FortAIGoalManager_MakeGoalFromLocation) == 0x000030, "Wrong size on FortAIGoalManager_MakeGoalFromLocation");
static_assert(offsetof(FortAIGoalManager_MakeGoalFromLocation, Goal) == 0x000000, "Member 'FortAIGoalManager_MakeGoalFromLocation::Goal' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalFromLocation, WorldContextObject) == 0x000018, "Member 'FortAIGoalManager_MakeGoalFromLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalFromLocation, GoalLocation) == 0x000020, "Member 'FortAIGoalManager_MakeGoalFromLocation::GoalLocation' has a wrong offset!");

// Function FortniteGame.FortAIGoalManager.MakeGoalsFromActors
// 0x0030 (0x0030 - 0x0000)
struct FortAIGoalManager_MakeGoalsFromActors final
{
public:
	TArray<struct FFortAIGoalInfo>                Goals;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         GoalActors;                                        // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bActorsAlwaysPerceived;                            // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGoalActorsAllowUndermining;                       // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIGoalManager_MakeGoalsFromActors) == 0x000008, "Wrong alignment on FortAIGoalManager_MakeGoalsFromActors");
static_assert(sizeof(FortAIGoalManager_MakeGoalsFromActors) == 0x000030, "Wrong size on FortAIGoalManager_MakeGoalsFromActors");
static_assert(offsetof(FortAIGoalManager_MakeGoalsFromActors, Goals) == 0x000000, "Member 'FortAIGoalManager_MakeGoalsFromActors::Goals' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalsFromActors, WorldContextObject) == 0x000010, "Member 'FortAIGoalManager_MakeGoalsFromActors::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalsFromActors, GoalActors) == 0x000018, "Member 'FortAIGoalManager_MakeGoalsFromActors::GoalActors' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalsFromActors, bActorsAlwaysPerceived) == 0x000028, "Member 'FortAIGoalManager_MakeGoalsFromActors::bActorsAlwaysPerceived' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalsFromActors, bGoalActorsAllowUndermining) == 0x000029, "Member 'FortAIGoalManager_MakeGoalsFromActors::bGoalActorsAllowUndermining' has a wrong offset!");

// Function FortniteGame.FortAIGoalManager.MakeGoalsFromLocations
// 0x0028 (0x0028 - 0x0000)
struct FortAIGoalManager_MakeGoalsFromLocations final
{
public:
	TArray<struct FFortAIGoalInfo>                Goals;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        GoalLocations;                                     // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIGoalManager_MakeGoalsFromLocations) == 0x000008, "Wrong alignment on FortAIGoalManager_MakeGoalsFromLocations");
static_assert(sizeof(FortAIGoalManager_MakeGoalsFromLocations) == 0x000028, "Wrong size on FortAIGoalManager_MakeGoalsFromLocations");
static_assert(offsetof(FortAIGoalManager_MakeGoalsFromLocations, Goals) == 0x000000, "Member 'FortAIGoalManager_MakeGoalsFromLocations::Goals' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalsFromLocations, WorldContextObject) == 0x000010, "Member 'FortAIGoalManager_MakeGoalsFromLocations::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalsFromLocations, GoalLocations) == 0x000018, "Member 'FortAIGoalManager_MakeGoalsFromLocations::GoalLocations' has a wrong offset!");

// Function FortniteGame.FortAIGoalManager.MakeGoalsFromLocationsAndActor
// 0x0030 (0x0030 - 0x0000)
struct FortAIGoalManager_MakeGoalsFromLocationsAndActor final
{
public:
	TArray<struct FFortAIGoalInfo>                Goals;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        GoalLocations;                                     // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	const class AActor*                           GoalActor;                                         // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIGoalManager_MakeGoalsFromLocationsAndActor) == 0x000008, "Wrong alignment on FortAIGoalManager_MakeGoalsFromLocationsAndActor");
static_assert(sizeof(FortAIGoalManager_MakeGoalsFromLocationsAndActor) == 0x000030, "Wrong size on FortAIGoalManager_MakeGoalsFromLocationsAndActor");
static_assert(offsetof(FortAIGoalManager_MakeGoalsFromLocationsAndActor, Goals) == 0x000000, "Member 'FortAIGoalManager_MakeGoalsFromLocationsAndActor::Goals' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalsFromLocationsAndActor, WorldContextObject) == 0x000010, "Member 'FortAIGoalManager_MakeGoalsFromLocationsAndActor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalsFromLocationsAndActor, GoalLocations) == 0x000018, "Member 'FortAIGoalManager_MakeGoalsFromLocationsAndActor::GoalLocations' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalsFromLocationsAndActor, GoalActor) == 0x000028, "Member 'FortAIGoalManager_MakeGoalsFromLocationsAndActor::GoalActor' has a wrong offset!");

// Function FortniteGame.FortAIGoalManager.RemoveGoalFromWorldAssignment
// 0x0050 (0x0050 - 0x0000)
struct FortAIGoalManager_RemoveGoalFromWorldAssignment final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAIAssignmentIdentifier            AssignmentIdentifier;                              // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FFortAIGoalInfo                        GoalInfo;                                          // 0x0038(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIGoalManager_RemoveGoalFromWorldAssignment) == 0x000008, "Wrong alignment on FortAIGoalManager_RemoveGoalFromWorldAssignment");
static_assert(sizeof(FortAIGoalManager_RemoveGoalFromWorldAssignment) == 0x000050, "Wrong size on FortAIGoalManager_RemoveGoalFromWorldAssignment");
static_assert(offsetof(FortAIGoalManager_RemoveGoalFromWorldAssignment, WorldContextObject) == 0x000000, "Member 'FortAIGoalManager_RemoveGoalFromWorldAssignment::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_RemoveGoalFromWorldAssignment, AssignmentIdentifier) == 0x000008, "Member 'FortAIGoalManager_RemoveGoalFromWorldAssignment::AssignmentIdentifier' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_RemoveGoalFromWorldAssignment, GoalInfo) == 0x000038, "Member 'FortAIGoalManager_RemoveGoalFromWorldAssignment::GoalInfo' has a wrong offset!");

// Function FortniteGame.FortAIGoalManager.RemoveGoalsFromWorldAssignment
// 0x0048 (0x0048 - 0x0000)
struct FortAIGoalManager_RemoveGoalsFromWorldAssignment final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAIAssignmentIdentifier            AssignmentIdentifier;                              // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FFortAIGoalInfo>                GoalInfos;                                         // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIGoalManager_RemoveGoalsFromWorldAssignment) == 0x000008, "Wrong alignment on FortAIGoalManager_RemoveGoalsFromWorldAssignment");
static_assert(sizeof(FortAIGoalManager_RemoveGoalsFromWorldAssignment) == 0x000048, "Wrong size on FortAIGoalManager_RemoveGoalsFromWorldAssignment");
static_assert(offsetof(FortAIGoalManager_RemoveGoalsFromWorldAssignment, WorldContextObject) == 0x000000, "Member 'FortAIGoalManager_RemoveGoalsFromWorldAssignment::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_RemoveGoalsFromWorldAssignment, AssignmentIdentifier) == 0x000008, "Member 'FortAIGoalManager_RemoveGoalsFromWorldAssignment::AssignmentIdentifier' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_RemoveGoalsFromWorldAssignment, GoalInfos) == 0x000038, "Member 'FortAIGoalManager_RemoveGoalsFromWorldAssignment::GoalInfos' has a wrong offset!");

// Function FortniteGame.FortAIGoalManager.RemoveWorldAssignment
// 0x0038 (0x0038 - 0x0000)
struct FortAIGoalManager_RemoveWorldAssignment final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAIAssignmentIdentifier            AssignmentIdentifier;                              // 0x0008(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIGoalManager_RemoveWorldAssignment) == 0x000008, "Wrong alignment on FortAIGoalManager_RemoveWorldAssignment");
static_assert(sizeof(FortAIGoalManager_RemoveWorldAssignment) == 0x000038, "Wrong size on FortAIGoalManager_RemoveWorldAssignment");
static_assert(offsetof(FortAIGoalManager_RemoveWorldAssignment, WorldContextObject) == 0x000000, "Member 'FortAIGoalManager_RemoveWorldAssignment::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_RemoveWorldAssignment, AssignmentIdentifier) == 0x000008, "Member 'FortAIGoalManager_RemoveWorldAssignment::AssignmentIdentifier' has a wrong offset!");

// Function FortniteGame.FortAIGoalManager.SetCurrentGoalDiscouragement
// 0x0010 (0x0010 - 0x0000)
struct FortAIGoalManager_SetCurrentGoalDiscouragement final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortAIController*                      AI;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIGoalManager_SetCurrentGoalDiscouragement) == 0x000008, "Wrong alignment on FortAIGoalManager_SetCurrentGoalDiscouragement");
static_assert(sizeof(FortAIGoalManager_SetCurrentGoalDiscouragement) == 0x000010, "Wrong size on FortAIGoalManager_SetCurrentGoalDiscouragement");
static_assert(offsetof(FortAIGoalManager_SetCurrentGoalDiscouragement, WorldContext) == 0x000000, "Member 'FortAIGoalManager_SetCurrentGoalDiscouragement::WorldContext' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_SetCurrentGoalDiscouragement, AI) == 0x000008, "Member 'FortAIGoalManager_SetCurrentGoalDiscouragement::AI' has a wrong offset!");

// Function FortniteGame.FortAIGoalManager.AddGoal
// 0x0010 (0x0010 - 0x0000)
struct FortAIGoalManager_AddGoal final
{
public:
	class AActor*                                 GoalActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAIAssignmentSettings*              GoalSettings;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIGoalManager_AddGoal) == 0x000008, "Wrong alignment on FortAIGoalManager_AddGoal");
static_assert(sizeof(FortAIGoalManager_AddGoal) == 0x000010, "Wrong size on FortAIGoalManager_AddGoal");
static_assert(offsetof(FortAIGoalManager_AddGoal, GoalActor) == 0x000000, "Member 'FortAIGoalManager_AddGoal::GoalActor' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_AddGoal, GoalSettings) == 0x000008, "Member 'FortAIGoalManager_AddGoal::GoalSettings' has a wrong offset!");

// Function FortniteGame.FortAIGoalManager.AddGoalActorToAssignment
// 0x0010 (0x0010 - 0x0000)
struct FortAIGoalManager_AddGoalActorToAssignment final
{
public:
	class UFortAIAssignment*                      Assignment;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 GoalActor;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIGoalManager_AddGoalActorToAssignment) == 0x000008, "Wrong alignment on FortAIGoalManager_AddGoalActorToAssignment");
static_assert(sizeof(FortAIGoalManager_AddGoalActorToAssignment) == 0x000010, "Wrong size on FortAIGoalManager_AddGoalActorToAssignment");
static_assert(offsetof(FortAIGoalManager_AddGoalActorToAssignment, Assignment) == 0x000000, "Member 'FortAIGoalManager_AddGoalActorToAssignment::Assignment' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_AddGoalActorToAssignment, GoalActor) == 0x000008, "Member 'FortAIGoalManager_AddGoalActorToAssignment::GoalActor' has a wrong offset!");

// Function FortniteGame.FortAIGoalManager.AddWorldAssignment
// 0x0018 (0x0018 - 0x0000)
struct FortAIGoalManager_AddWorldAssignment final
{
public:
	class UFortAIAssignmentSettings*              AssignmentSettings;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 GoalActor;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAIAssignment*                      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIGoalManager_AddWorldAssignment) == 0x000008, "Wrong alignment on FortAIGoalManager_AddWorldAssignment");
static_assert(sizeof(FortAIGoalManager_AddWorldAssignment) == 0x000018, "Wrong size on FortAIGoalManager_AddWorldAssignment");
static_assert(offsetof(FortAIGoalManager_AddWorldAssignment, AssignmentSettings) == 0x000000, "Member 'FortAIGoalManager_AddWorldAssignment::AssignmentSettings' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_AddWorldAssignment, GoalActor) == 0x000008, "Member 'FortAIGoalManager_AddWorldAssignment::GoalActor' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_AddWorldAssignment, ReturnValue) == 0x000010, "Member 'FortAIGoalManager_AddWorldAssignment::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIGoalProvider.InitializeGoalProvider
// 0x0018 (0x0018 - 0x0000)
struct FortAIGoalProvider_InitializeGoalProvider final
{
public:
	class UWorld*                                 ContextWorld;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAIAssignment*                      Assignment;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIGoalProvider_InitializeGoalProvider) == 0x000008, "Wrong alignment on FortAIGoalProvider_InitializeGoalProvider");
static_assert(sizeof(FortAIGoalProvider_InitializeGoalProvider) == 0x000018, "Wrong size on FortAIGoalProvider_InitializeGoalProvider");
static_assert(offsetof(FortAIGoalProvider_InitializeGoalProvider, ContextWorld) == 0x000000, "Member 'FortAIGoalProvider_InitializeGoalProvider::ContextWorld' has a wrong offset!");
static_assert(offsetof(FortAIGoalProvider_InitializeGoalProvider, Assignment) == 0x000008, "Member 'FortAIGoalProvider_InitializeGoalProvider::Assignment' has a wrong offset!");
static_assert(offsetof(FortAIGoalProvider_InitializeGoalProvider, ReturnValue) == 0x000010, "Member 'FortAIGoalProvider_InitializeGoalProvider::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIGoalProvider.GetEncounterInfo
// 0x0008 (0x0008 - 0x0000)
struct FortAIGoalProvider_GetEncounterInfo final
{
public:
	class UFortAIEncounterInfo*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIGoalProvider_GetEncounterInfo) == 0x000008, "Wrong alignment on FortAIGoalProvider_GetEncounterInfo");
static_assert(sizeof(FortAIGoalProvider_GetEncounterInfo) == 0x000008, "Wrong size on FortAIGoalProvider_GetEncounterInfo");
static_assert(offsetof(FortAIGoalProvider_GetEncounterInfo, ReturnValue) == 0x000000, "Member 'FortAIGoalProvider_GetEncounterInfo::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTracerBase.Init
// 0x0018 (0x0018 - 0x0000)
struct FortTracerBase_Init final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x000C(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTracerBase_Init) == 0x000004, "Wrong alignment on FortTracerBase_Init");
static_assert(sizeof(FortTracerBase_Init) == 0x000018, "Wrong size on FortTracerBase_Init");
static_assert(offsetof(FortTracerBase_Init, Start) == 0x000000, "Member 'FortTracerBase_Init::Start' has a wrong offset!");
static_assert(offsetof(FortTracerBase_Init, End) == 0x00000C, "Member 'FortTracerBase_Init::End' has a wrong offset!");

// Function FortniteGame.FortTracerBase.OnInit
// 0x0018 (0x0018 - 0x0000)
struct FortTracerBase_OnInit final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x000C(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTracerBase_OnInit) == 0x000004, "Wrong alignment on FortTracerBase_OnInit");
static_assert(sizeof(FortTracerBase_OnInit) == 0x000018, "Wrong size on FortTracerBase_OnInit");
static_assert(offsetof(FortTracerBase_OnInit, Start) == 0x000000, "Member 'FortTracerBase_OnInit::Start' has a wrong offset!");
static_assert(offsetof(FortTracerBase_OnInit, End) == 0x00000C, "Member 'FortTracerBase_OnInit::End' has a wrong offset!");

// Function FortniteGame.FortItemDroppedParams.BreakParams
// 0x0018 (0x0018 - 0x0000)
struct FortItemDroppedParams_BreakParams final
{
public:
	class UFortWorldItemDefinition*               _DroppedItemDefinition;                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  _DroppedBy;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _AmountCollected;                                  // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemDroppedParams_BreakParams) == 0x000008, "Wrong alignment on FortItemDroppedParams_BreakParams");
static_assert(sizeof(FortItemDroppedParams_BreakParams) == 0x000018, "Wrong size on FortItemDroppedParams_BreakParams");
static_assert(offsetof(FortItemDroppedParams_BreakParams, _DroppedItemDefinition) == 0x000000, "Member 'FortItemDroppedParams_BreakParams::_DroppedItemDefinition' has a wrong offset!");
static_assert(offsetof(FortItemDroppedParams_BreakParams, _DroppedBy) == 0x000008, "Member 'FortItemDroppedParams_BreakParams::_DroppedBy' has a wrong offset!");
static_assert(offsetof(FortItemDroppedParams_BreakParams, _AmountCollected) == 0x000010, "Member 'FortItemDroppedParams_BreakParams::_AmountCollected' has a wrong offset!");

// Function FortniteGame.FortItemDroppedParams.SetParams
// 0x0020 (0x0020 - 0x0000)
struct FortItemDroppedParams_SetParams final
{
public:
	const class UFortWorldItemDefinition*         _DroppedItemDefinition;                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  _DroppedBy;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _AmountCollected;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItemDroppedParams*                 ThisParam;                                         // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDroppedParams_SetParams) == 0x000008, "Wrong alignment on FortItemDroppedParams_SetParams");
static_assert(sizeof(FortItemDroppedParams_SetParams) == 0x000020, "Wrong size on FortItemDroppedParams_SetParams");
static_assert(offsetof(FortItemDroppedParams_SetParams, _DroppedItemDefinition) == 0x000000, "Member 'FortItemDroppedParams_SetParams::_DroppedItemDefinition' has a wrong offset!");
static_assert(offsetof(FortItemDroppedParams_SetParams, _DroppedBy) == 0x000008, "Member 'FortItemDroppedParams_SetParams::_DroppedBy' has a wrong offset!");
static_assert(offsetof(FortItemDroppedParams_SetParams, _AmountCollected) == 0x000010, "Member 'FortItemDroppedParams_SetParams::_AmountCollected' has a wrong offset!");
static_assert(offsetof(FortItemDroppedParams_SetParams, ThisParam) == 0x000018, "Member 'FortItemDroppedParams_SetParams::ThisParam' has a wrong offset!");

// Function FortniteGame.FortAIRootAssignmentProviderInterface.GetRootAssignmentIdentifier
// 0x0030 (0x0030 - 0x0000)
struct FortAIRootAssignmentProviderInterface_GetRootAssignmentIdentifier final
{
public:
	struct FFortAIAssignmentIdentifier            ReturnValue;                                       // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIRootAssignmentProviderInterface_GetRootAssignmentIdentifier) == 0x000008, "Wrong alignment on FortAIRootAssignmentProviderInterface_GetRootAssignmentIdentifier");
static_assert(sizeof(FortAIRootAssignmentProviderInterface_GetRootAssignmentIdentifier) == 0x000030, "Wrong size on FortAIRootAssignmentProviderInterface_GetRootAssignmentIdentifier");
static_assert(offsetof(FortAIRootAssignmentProviderInterface_GetRootAssignmentIdentifier, ReturnValue) == 0x000000, "Member 'FortAIRootAssignmentProviderInterface_GetRootAssignmentIdentifier::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAISpawnGroup.GetEnemy
// 0x0010 (0x0010 - 0x0000)
struct FortAISpawnGroup_GetEnemy final
{
public:
	int32                                         EnemyIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortAIPawnVariant>         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAISpawnGroup_GetEnemy) == 0x000008, "Wrong alignment on FortAISpawnGroup_GetEnemy");
static_assert(sizeof(FortAISpawnGroup_GetEnemy) == 0x000010, "Wrong size on FortAISpawnGroup_GetEnemy");
static_assert(offsetof(FortAISpawnGroup_GetEnemy, EnemyIndex) == 0x000000, "Member 'FortAISpawnGroup_GetEnemy::EnemyIndex' has a wrong offset!");
static_assert(offsetof(FortAISpawnGroup_GetEnemy, ReturnValue) == 0x000008, "Member 'FortAISpawnGroup_GetEnemy::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAISpawnGroup.GetNumberOfEnemies
// 0x0004 (0x0004 - 0x0000)
struct FortAISpawnGroup_GetNumberOfEnemies final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAISpawnGroup_GetNumberOfEnemies) == 0x000004, "Wrong alignment on FortAISpawnGroup_GetNumberOfEnemies");
static_assert(sizeof(FortAISpawnGroup_GetNumberOfEnemies) == 0x000004, "Wrong size on FortAISpawnGroup_GetNumberOfEnemies");
static_assert(offsetof(FortAISpawnGroup_GetNumberOfEnemies, ReturnValue) == 0x000000, "Member 'FortAISpawnGroup_GetNumberOfEnemies::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAISpawnGroup.IsLargeSpawnGroup
// 0x0001 (0x0001 - 0x0000)
struct FortAISpawnGroup_IsLargeSpawnGroup final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAISpawnGroup_IsLargeSpawnGroup) == 0x000001, "Wrong alignment on FortAISpawnGroup_IsLargeSpawnGroup");
static_assert(sizeof(FortAISpawnGroup_IsLargeSpawnGroup) == 0x000001, "Wrong size on FortAISpawnGroup_IsLargeSpawnGroup");
static_assert(offsetof(FortAISpawnGroup_IsLargeSpawnGroup, ReturnValue) == 0x000000, "Member 'FortAISpawnGroup_IsLargeSpawnGroup::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAISpawnGroup.IsPrototype
// 0x0001 (0x0001 - 0x0000)
struct FortAISpawnGroup_IsPrototype final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAISpawnGroup_IsPrototype) == 0x000001, "Wrong alignment on FortAISpawnGroup_IsPrototype");
static_assert(sizeof(FortAISpawnGroup_IsPrototype) == 0x000001, "Wrong size on FortAISpawnGroup_IsPrototype");
static_assert(offsetof(FortAISpawnGroup_IsPrototype, ReturnValue) == 0x000000, "Member 'FortAISpawnGroup_IsPrototype::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAISpawnGroup.IsValidForEnemySpawners
// 0x0001 (0x0001 - 0x0000)
struct FortAISpawnGroup_IsValidForEnemySpawners final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAISpawnGroup_IsValidForEnemySpawners) == 0x000001, "Wrong alignment on FortAISpawnGroup_IsValidForEnemySpawners");
static_assert(sizeof(FortAISpawnGroup_IsValidForEnemySpawners) == 0x000001, "Wrong size on FortAISpawnGroup_IsValidForEnemySpawners");
static_assert(offsetof(FortAISpawnGroup_IsValidForEnemySpawners, ReturnValue) == 0x000000, "Member 'FortAISpawnGroup_IsValidForEnemySpawners::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAsyncAction_HomebaseContextPurchaseNode.PurchaseNode
// 0x0018 (0x0018 - 0x0000)
struct FortAsyncAction_HomebaseContextPurchaseNode_PurchaseNode final
{
public:
	const class UHomeBaseContext*                 Param_HomeBaseContext;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Param_IdOfNodeToPurchase;                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAsyncAction_HomebaseContextPurchaseNode* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAsyncAction_HomebaseContextPurchaseNode_PurchaseNode) == 0x000008, "Wrong alignment on FortAsyncAction_HomebaseContextPurchaseNode_PurchaseNode");
static_assert(sizeof(FortAsyncAction_HomebaseContextPurchaseNode_PurchaseNode) == 0x000018, "Wrong size on FortAsyncAction_HomebaseContextPurchaseNode_PurchaseNode");
static_assert(offsetof(FortAsyncAction_HomebaseContextPurchaseNode_PurchaseNode, Param_HomeBaseContext) == 0x000000, "Member 'FortAsyncAction_HomebaseContextPurchaseNode_PurchaseNode::Param_HomeBaseContext' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_HomebaseContextPurchaseNode_PurchaseNode, Param_IdOfNodeToPurchase) == 0x000008, "Member 'FortAsyncAction_HomebaseContextPurchaseNode_PurchaseNode::Param_IdOfNodeToPurchase' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_HomebaseContextPurchaseNode_PurchaseNode, ReturnValue) == 0x000010, "Member 'FortAsyncAction_HomebaseContextPurchaseNode_PurchaseNode::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAITetheringBoxBoundsInterface.GetTetheredBoxBoundsCenter
// 0x000C (0x000C - 0x0000)
struct FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsCenter final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsCenter) == 0x000004, "Wrong alignment on FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsCenter");
static_assert(sizeof(FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsCenter) == 0x00000C, "Wrong size on FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsCenter");
static_assert(offsetof(FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsCenter, ReturnValue) == 0x000000, "Member 'FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsCenter::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAITetheringBoxBoundsInterface.GetTetheredBoxBoundsEQSGridSize
// 0x0004 (0x0004 - 0x0000)
struct FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsEQSGridSize final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsEQSGridSize) == 0x000004, "Wrong alignment on FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsEQSGridSize");
static_assert(sizeof(FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsEQSGridSize) == 0x000004, "Wrong size on FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsEQSGridSize");
static_assert(offsetof(FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsEQSGridSize, ReturnValue) == 0x000000, "Member 'FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsEQSGridSize::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAITetheringBoxBoundsInterface.GetTetheredBoxBoundsEQSSpaceBetween
// 0x0004 (0x0004 - 0x0000)
struct FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsEQSSpaceBetween final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsEQSSpaceBetween) == 0x000004, "Wrong alignment on FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsEQSSpaceBetween");
static_assert(sizeof(FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsEQSSpaceBetween) == 0x000004, "Wrong size on FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsEQSSpaceBetween");
static_assert(offsetof(FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsEQSSpaceBetween, ReturnValue) == 0x000000, "Member 'FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsEQSSpaceBetween::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAITetheringBoxBoundsInterface.GetTetheredBoxBoundsHeight
// 0x0004 (0x0004 - 0x0000)
struct FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsHeight) == 0x000004, "Wrong alignment on FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsHeight");
static_assert(sizeof(FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsHeight) == 0x000004, "Wrong size on FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsHeight");
static_assert(offsetof(FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsHeight, ReturnValue) == 0x000000, "Member 'FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsHeight::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAITetheringBoxBoundsInterface.GetTetheredBoxBoundsWidth
// 0x0004 (0x0004 - 0x0000)
struct FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsWidth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsWidth) == 0x000004, "Wrong alignment on FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsWidth");
static_assert(sizeof(FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsWidth) == 0x000004, "Wrong size on FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsWidth");
static_assert(offsetof(FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsWidth, ReturnValue) == 0x000000, "Member 'FortAITetheringBoxBoundsInterface_GetTetheredBoxBoundsWidth::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayMutator.IsMutatorActive
// 0x0001 (0x0001 - 0x0000)
struct FortGameplayMutator_IsMutatorActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayMutator_IsMutatorActive) == 0x000001, "Wrong alignment on FortGameplayMutator_IsMutatorActive");
static_assert(sizeof(FortGameplayMutator_IsMutatorActive) == 0x000001, "Wrong size on FortGameplayMutator_IsMutatorActive");
static_assert(offsetof(FortGameplayMutator_IsMutatorActive, ReturnValue) == 0x000000, "Member 'FortGameplayMutator_IsMutatorActive::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortFXManager.AddLightAnimationIntensity
// 0x0030 (0x0030 - 0x0000)
struct FortFXManager_AddLightAnimationIntensity final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULightComponent*                        LightComp;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartValue;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            LerpCurve;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOneMinusLerpValue;                                // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayReverse;                                      // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortFXManager_AddLightAnimationIntensity) == 0x000008, "Wrong alignment on FortFXManager_AddLightAnimationIntensity");
static_assert(sizeof(FortFXManager_AddLightAnimationIntensity) == 0x000030, "Wrong size on FortFXManager_AddLightAnimationIntensity");
static_assert(offsetof(FortFXManager_AddLightAnimationIntensity, WorldContextObject) == 0x000000, "Member 'FortFXManager_AddLightAnimationIntensity::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddLightAnimationIntensity, LightComp) == 0x000008, "Member 'FortFXManager_AddLightAnimationIntensity::LightComp' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddLightAnimationIntensity, StartValue) == 0x000010, "Member 'FortFXManager_AddLightAnimationIntensity::StartValue' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddLightAnimationIntensity, EndValue) == 0x000014, "Member 'FortFXManager_AddLightAnimationIntensity::EndValue' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddLightAnimationIntensity, LerpCurve) == 0x000018, "Member 'FortFXManager_AddLightAnimationIntensity::LerpCurve' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddLightAnimationIntensity, bOneMinusLerpValue) == 0x000020, "Member 'FortFXManager_AddLightAnimationIntensity::bOneMinusLerpValue' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddLightAnimationIntensity, Duration) == 0x000024, "Member 'FortFXManager_AddLightAnimationIntensity::Duration' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddLightAnimationIntensity, bPlayReverse) == 0x000028, "Member 'FortFXManager_AddLightAnimationIntensity::bPlayReverse' has a wrong offset!");

// Function FortniteGame.FortFXManager.AddMIDAnimationColor
// 0x0050 (0x0050 - 0x0000)
struct FortFXManager_AddMIDAnimationColor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParamName;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           StartValue;                                        // 0x0018(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           EndValue;                                          // 0x0028(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            LerpCurve;                                         // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOneMinusLerpValue;                                // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayReverse;                                      // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortFXManager_AddMIDAnimationColor) == 0x000008, "Wrong alignment on FortFXManager_AddMIDAnimationColor");
static_assert(sizeof(FortFXManager_AddMIDAnimationColor) == 0x000050, "Wrong size on FortFXManager_AddMIDAnimationColor");
static_assert(offsetof(FortFXManager_AddMIDAnimationColor, WorldContextObject) == 0x000000, "Member 'FortFXManager_AddMIDAnimationColor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddMIDAnimationColor, Mid) == 0x000008, "Member 'FortFXManager_AddMIDAnimationColor::Mid' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddMIDAnimationColor, ParamName) == 0x000010, "Member 'FortFXManager_AddMIDAnimationColor::ParamName' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddMIDAnimationColor, StartValue) == 0x000018, "Member 'FortFXManager_AddMIDAnimationColor::StartValue' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddMIDAnimationColor, EndValue) == 0x000028, "Member 'FortFXManager_AddMIDAnimationColor::EndValue' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddMIDAnimationColor, LerpCurve) == 0x000038, "Member 'FortFXManager_AddMIDAnimationColor::LerpCurve' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddMIDAnimationColor, bOneMinusLerpValue) == 0x000040, "Member 'FortFXManager_AddMIDAnimationColor::bOneMinusLerpValue' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddMIDAnimationColor, Duration) == 0x000044, "Member 'FortFXManager_AddMIDAnimationColor::Duration' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddMIDAnimationColor, bPlayReverse) == 0x000048, "Member 'FortFXManager_AddMIDAnimationColor::bPlayReverse' has a wrong offset!");

// Function FortniteGame.FortFXManager.AddMIDAnimationColorCurve
// 0x0028 (0x0028 - 0x0000)
struct FortFXManager_AddMIDAnimationColorCurve final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParamName;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveLinearColor*                      ColorCurve;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayReverse;                                      // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortFXManager_AddMIDAnimationColorCurve) == 0x000008, "Wrong alignment on FortFXManager_AddMIDAnimationColorCurve");
static_assert(sizeof(FortFXManager_AddMIDAnimationColorCurve) == 0x000028, "Wrong size on FortFXManager_AddMIDAnimationColorCurve");
static_assert(offsetof(FortFXManager_AddMIDAnimationColorCurve, WorldContextObject) == 0x000000, "Member 'FortFXManager_AddMIDAnimationColorCurve::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddMIDAnimationColorCurve, Mid) == 0x000008, "Member 'FortFXManager_AddMIDAnimationColorCurve::Mid' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddMIDAnimationColorCurve, ParamName) == 0x000010, "Member 'FortFXManager_AddMIDAnimationColorCurve::ParamName' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddMIDAnimationColorCurve, ColorCurve) == 0x000018, "Member 'FortFXManager_AddMIDAnimationColorCurve::ColorCurve' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddMIDAnimationColorCurve, Duration) == 0x000020, "Member 'FortFXManager_AddMIDAnimationColorCurve::Duration' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddMIDAnimationColorCurve, bPlayReverse) == 0x000024, "Member 'FortFXManager_AddMIDAnimationColorCurve::bPlayReverse' has a wrong offset!");

// Function FortniteGame.FortFXManager.AddMIDAnimationFloat
// 0x0038 (0x0038 - 0x0000)
struct FortFXManager_AddMIDAnimationFloat final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParamName;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartValue;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            LerpCurve;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOneMinusLerpValue;                                // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayReverse;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortFXManager_AddMIDAnimationFloat) == 0x000008, "Wrong alignment on FortFXManager_AddMIDAnimationFloat");
static_assert(sizeof(FortFXManager_AddMIDAnimationFloat) == 0x000038, "Wrong size on FortFXManager_AddMIDAnimationFloat");
static_assert(offsetof(FortFXManager_AddMIDAnimationFloat, WorldContextObject) == 0x000000, "Member 'FortFXManager_AddMIDAnimationFloat::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddMIDAnimationFloat, Mid) == 0x000008, "Member 'FortFXManager_AddMIDAnimationFloat::Mid' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddMIDAnimationFloat, ParamName) == 0x000010, "Member 'FortFXManager_AddMIDAnimationFloat::ParamName' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddMIDAnimationFloat, StartValue) == 0x000018, "Member 'FortFXManager_AddMIDAnimationFloat::StartValue' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddMIDAnimationFloat, EndValue) == 0x00001C, "Member 'FortFXManager_AddMIDAnimationFloat::EndValue' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddMIDAnimationFloat, LerpCurve) == 0x000020, "Member 'FortFXManager_AddMIDAnimationFloat::LerpCurve' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddMIDAnimationFloat, bOneMinusLerpValue) == 0x000028, "Member 'FortFXManager_AddMIDAnimationFloat::bOneMinusLerpValue' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddMIDAnimationFloat, Duration) == 0x00002C, "Member 'FortFXManager_AddMIDAnimationFloat::Duration' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddMIDAnimationFloat, bPlayReverse) == 0x000030, "Member 'FortFXManager_AddMIDAnimationFloat::bPlayReverse' has a wrong offset!");

// Function FortniteGame.FortFXManager.AddParticleAnimationFloat
// 0x0038 (0x0038 - 0x0000)
struct FortFXManager_AddParticleAnimationFloat final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystemComponent*               ParticleSystemComp;                                // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParamName;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartValue;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            LerpCurve;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOneMinusLerpValue;                                // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayReverse;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortFXManager_AddParticleAnimationFloat) == 0x000008, "Wrong alignment on FortFXManager_AddParticleAnimationFloat");
static_assert(sizeof(FortFXManager_AddParticleAnimationFloat) == 0x000038, "Wrong size on FortFXManager_AddParticleAnimationFloat");
static_assert(offsetof(FortFXManager_AddParticleAnimationFloat, WorldContextObject) == 0x000000, "Member 'FortFXManager_AddParticleAnimationFloat::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddParticleAnimationFloat, ParticleSystemComp) == 0x000008, "Member 'FortFXManager_AddParticleAnimationFloat::ParticleSystemComp' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddParticleAnimationFloat, ParamName) == 0x000010, "Member 'FortFXManager_AddParticleAnimationFloat::ParamName' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddParticleAnimationFloat, StartValue) == 0x000018, "Member 'FortFXManager_AddParticleAnimationFloat::StartValue' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddParticleAnimationFloat, EndValue) == 0x00001C, "Member 'FortFXManager_AddParticleAnimationFloat::EndValue' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddParticleAnimationFloat, LerpCurve) == 0x000020, "Member 'FortFXManager_AddParticleAnimationFloat::LerpCurve' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddParticleAnimationFloat, bOneMinusLerpValue) == 0x000028, "Member 'FortFXManager_AddParticleAnimationFloat::bOneMinusLerpValue' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddParticleAnimationFloat, Duration) == 0x00002C, "Member 'FortFXManager_AddParticleAnimationFloat::Duration' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddParticleAnimationFloat, bPlayReverse) == 0x000030, "Member 'FortFXManager_AddParticleAnimationFloat::bPlayReverse' has a wrong offset!");

// Function FortniteGame.FortFXManager.AddSplineMeshScaleAnimation
// 0x0038 (0x0038 - 0x0000)
struct FortFXManager_AddSplineMeshScaleAnimation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineMeshComponent*                   SplineMesh;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartScaleStart;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartScaleEnd;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndScaleStart;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndScaleEnd;                                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            LerpCurve;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOneMinusLerpValue;                                // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayReverse;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortFXManager_AddSplineMeshScaleAnimation) == 0x000008, "Wrong alignment on FortFXManager_AddSplineMeshScaleAnimation");
static_assert(sizeof(FortFXManager_AddSplineMeshScaleAnimation) == 0x000038, "Wrong size on FortFXManager_AddSplineMeshScaleAnimation");
static_assert(offsetof(FortFXManager_AddSplineMeshScaleAnimation, WorldContextObject) == 0x000000, "Member 'FortFXManager_AddSplineMeshScaleAnimation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddSplineMeshScaleAnimation, SplineMesh) == 0x000008, "Member 'FortFXManager_AddSplineMeshScaleAnimation::SplineMesh' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddSplineMeshScaleAnimation, StartScaleStart) == 0x000010, "Member 'FortFXManager_AddSplineMeshScaleAnimation::StartScaleStart' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddSplineMeshScaleAnimation, StartScaleEnd) == 0x000014, "Member 'FortFXManager_AddSplineMeshScaleAnimation::StartScaleEnd' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddSplineMeshScaleAnimation, EndScaleStart) == 0x000018, "Member 'FortFXManager_AddSplineMeshScaleAnimation::EndScaleStart' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddSplineMeshScaleAnimation, EndScaleEnd) == 0x00001C, "Member 'FortFXManager_AddSplineMeshScaleAnimation::EndScaleEnd' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddSplineMeshScaleAnimation, LerpCurve) == 0x000020, "Member 'FortFXManager_AddSplineMeshScaleAnimation::LerpCurve' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddSplineMeshScaleAnimation, bOneMinusLerpValue) == 0x000028, "Member 'FortFXManager_AddSplineMeshScaleAnimation::bOneMinusLerpValue' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddSplineMeshScaleAnimation, Duration) == 0x00002C, "Member 'FortFXManager_AddSplineMeshScaleAnimation::Duration' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddSplineMeshScaleAnimation, bPlayReverse) == 0x000030, "Member 'FortFXManager_AddSplineMeshScaleAnimation::bPlayReverse' has a wrong offset!");

// Function FortniteGame.FortFXManager.AddSplineMeshSnapAnimation
// 0x0030 (0x0030 - 0x0000)
struct FortFXManager_AddSplineMeshSnapAnimation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USplineMeshComponent*>           SplineMeshes;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class USplineComponent*                       TargetSpline;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            GrowthCurve;                                       // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayGrowthReverse;                                // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortFXManager_AddSplineMeshSnapAnimation) == 0x000008, "Wrong alignment on FortFXManager_AddSplineMeshSnapAnimation");
static_assert(sizeof(FortFXManager_AddSplineMeshSnapAnimation) == 0x000030, "Wrong size on FortFXManager_AddSplineMeshSnapAnimation");
static_assert(offsetof(FortFXManager_AddSplineMeshSnapAnimation, WorldContextObject) == 0x000000, "Member 'FortFXManager_AddSplineMeshSnapAnimation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddSplineMeshSnapAnimation, SplineMeshes) == 0x000008, "Member 'FortFXManager_AddSplineMeshSnapAnimation::SplineMeshes' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddSplineMeshSnapAnimation, TargetSpline) == 0x000018, "Member 'FortFXManager_AddSplineMeshSnapAnimation::TargetSpline' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddSplineMeshSnapAnimation, GrowthCurve) == 0x000020, "Member 'FortFXManager_AddSplineMeshSnapAnimation::GrowthCurve' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddSplineMeshSnapAnimation, Duration) == 0x000028, "Member 'FortFXManager_AddSplineMeshSnapAnimation::Duration' has a wrong offset!");
static_assert(offsetof(FortFXManager_AddSplineMeshSnapAnimation, bPlayGrowthReverse) == 0x00002C, "Member 'FortFXManager_AddSplineMeshSnapAnimation::bPlayGrowthReverse' has a wrong offset!");

// Function FortniteGame.FortFXManager.RemoveLightAnimations
// 0x0010 (0x0010 - 0x0000)
struct FortFXManager_RemoveLightAnimations final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULightComponent*                        LightComp;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFXManager_RemoveLightAnimations) == 0x000008, "Wrong alignment on FortFXManager_RemoveLightAnimations");
static_assert(sizeof(FortFXManager_RemoveLightAnimations) == 0x000010, "Wrong size on FortFXManager_RemoveLightAnimations");
static_assert(offsetof(FortFXManager_RemoveLightAnimations, WorldContextObject) == 0x000000, "Member 'FortFXManager_RemoveLightAnimations::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortFXManager_RemoveLightAnimations, LightComp) == 0x000008, "Member 'FortFXManager_RemoveLightAnimations::LightComp' has a wrong offset!");

// Function FortniteGame.FortFXManager.RemoveMIDAnimations
// 0x0010 (0x0010 - 0x0000)
struct FortFXManager_RemoveMIDAnimations final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFXManager_RemoveMIDAnimations) == 0x000008, "Wrong alignment on FortFXManager_RemoveMIDAnimations");
static_assert(sizeof(FortFXManager_RemoveMIDAnimations) == 0x000010, "Wrong size on FortFXManager_RemoveMIDAnimations");
static_assert(offsetof(FortFXManager_RemoveMIDAnimations, WorldContextObject) == 0x000000, "Member 'FortFXManager_RemoveMIDAnimations::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortFXManager_RemoveMIDAnimations, Mid) == 0x000008, "Member 'FortFXManager_RemoveMIDAnimations::Mid' has a wrong offset!");

// Function FortniteGame.FortFXManager.RemoveParticleAnimations
// 0x0010 (0x0010 - 0x0000)
struct FortFXManager_RemoveParticleAnimations final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystemComponent*               ParticleSystemComp;                                // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFXManager_RemoveParticleAnimations) == 0x000008, "Wrong alignment on FortFXManager_RemoveParticleAnimations");
static_assert(sizeof(FortFXManager_RemoveParticleAnimations) == 0x000010, "Wrong size on FortFXManager_RemoveParticleAnimations");
static_assert(offsetof(FortFXManager_RemoveParticleAnimations, WorldContextObject) == 0x000000, "Member 'FortFXManager_RemoveParticleAnimations::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortFXManager_RemoveParticleAnimations, ParticleSystemComp) == 0x000008, "Member 'FortFXManager_RemoveParticleAnimations::ParticleSystemComp' has a wrong offset!");

// Function FortniteGame.FortFXManager.RemoveSplineMeshAnimations
// 0x0010 (0x0010 - 0x0000)
struct FortFXManager_RemoveSplineMeshAnimations final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineMeshComponent*                   SplineMesh;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFXManager_RemoveSplineMeshAnimations) == 0x000008, "Wrong alignment on FortFXManager_RemoveSplineMeshAnimations");
static_assert(sizeof(FortFXManager_RemoveSplineMeshAnimations) == 0x000010, "Wrong size on FortFXManager_RemoveSplineMeshAnimations");
static_assert(offsetof(FortFXManager_RemoveSplineMeshAnimations, WorldContextObject) == 0x000000, "Member 'FortFXManager_RemoveSplineMeshAnimations::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortFXManager_RemoveSplineMeshAnimations, SplineMesh) == 0x000008, "Member 'FortFXManager_RemoveSplineMeshAnimations::SplineMesh' has a wrong offset!");

// Function FortniteGame.FortFXManager.ReturnFXActorToPool
// 0x0010 (0x0010 - 0x0000)
struct FortFXManager_ReturnFXActorToPool final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 FXActor;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFXManager_ReturnFXActorToPool) == 0x000008, "Wrong alignment on FortFXManager_ReturnFXActorToPool");
static_assert(sizeof(FortFXManager_ReturnFXActorToPool) == 0x000010, "Wrong size on FortFXManager_ReturnFXActorToPool");
static_assert(offsetof(FortFXManager_ReturnFXActorToPool, WorldContextObject) == 0x000000, "Member 'FortFXManager_ReturnFXActorToPool::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortFXManager_ReturnFXActorToPool, FXActor) == 0x000008, "Member 'FortFXManager_ReturnFXActorToPool::FXActor' has a wrong offset!");

// Function FortniteGame.FortFXManager.SpawnPooledFXActor
// 0x0050 (0x0050 - 0x0000)
struct FortFXManager_SpawnPooledFXActor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     FXActorClass;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortFXManager_SpawnPooledFXActor) == 0x000010, "Wrong alignment on FortFXManager_SpawnPooledFXActor");
static_assert(sizeof(FortFXManager_SpawnPooledFXActor) == 0x000050, "Wrong size on FortFXManager_SpawnPooledFXActor");
static_assert(offsetof(FortFXManager_SpawnPooledFXActor, WorldContextObject) == 0x000000, "Member 'FortFXManager_SpawnPooledFXActor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortFXManager_SpawnPooledFXActor, FXActorClass) == 0x000008, "Member 'FortFXManager_SpawnPooledFXActor::FXActorClass' has a wrong offset!");
static_assert(offsetof(FortFXManager_SpawnPooledFXActor, SpawnTransform) == 0x000010, "Member 'FortFXManager_SpawnPooledFXActor::SpawnTransform' has a wrong offset!");
static_assert(offsetof(FortFXManager_SpawnPooledFXActor, ReturnValue) == 0x000040, "Member 'FortFXManager_SpawnPooledFXActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameData.GetPersonalXpBoost
// 0x0004 (0x0004 - 0x0000)
struct FortGameData_GetPersonalXpBoost final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameData_GetPersonalXpBoost) == 0x000004, "Wrong alignment on FortGameData_GetPersonalXpBoost");
static_assert(sizeof(FortGameData_GetPersonalXpBoost) == 0x000004, "Wrong size on FortGameData_GetPersonalXpBoost");
static_assert(offsetof(FortGameData_GetPersonalXpBoost, ReturnValue) == 0x000000, "Member 'FortGameData_GetPersonalXpBoost::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameData.GetTeamXpBoost
// 0x0004 (0x0004 - 0x0000)
struct FortGameData_GetTeamXpBoost final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameData_GetTeamXpBoost) == 0x000004, "Wrong alignment on FortGameData_GetTeamXpBoost");
static_assert(sizeof(FortGameData_GetTeamXpBoost) == 0x000004, "Wrong size on FortGameData_GetTeamXpBoost");
static_assert(offsetof(FortGameData_GetTeamXpBoost, ReturnValue) == 0x000000, "Member 'FortGameData_GetTeamXpBoost::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAsyncAction_AbandonSession.AbandonSession
// 0x0010 (0x0010 - 0x0000)
struct FortAsyncAction_AbandonSession_AbandonSession final
{
public:
	class AFortPlayerController*                  Param_PlayerController;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAsyncAction_AbandonSession*        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAsyncAction_AbandonSession_AbandonSession) == 0x000008, "Wrong alignment on FortAsyncAction_AbandonSession_AbandonSession");
static_assert(sizeof(FortAsyncAction_AbandonSession_AbandonSession) == 0x000010, "Wrong size on FortAsyncAction_AbandonSession_AbandonSession");
static_assert(offsetof(FortAsyncAction_AbandonSession_AbandonSession, Param_PlayerController) == 0x000000, "Member 'FortAsyncAction_AbandonSession_AbandonSession::Param_PlayerController' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_AbandonSession_AbandonSession, ReturnValue) == 0x000008, "Member 'FortAsyncAction_AbandonSession_AbandonSession::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAsyncAction_EnsureClientQuestLogin.SendEnsureClientQuestLogin
// 0x0010 (0x0010 - 0x0000)
struct FortAsyncAction_EnsureClientQuestLogin_SendEnsureClientQuestLogin final
{
public:
	class UFortQuestManager*                      Param_QuestManager;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAsyncAction_EnsureClientQuestLogin* ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAsyncAction_EnsureClientQuestLogin_SendEnsureClientQuestLogin) == 0x000008, "Wrong alignment on FortAsyncAction_EnsureClientQuestLogin_SendEnsureClientQuestLogin");
static_assert(sizeof(FortAsyncAction_EnsureClientQuestLogin_SendEnsureClientQuestLogin) == 0x000010, "Wrong size on FortAsyncAction_EnsureClientQuestLogin_SendEnsureClientQuestLogin");
static_assert(offsetof(FortAsyncAction_EnsureClientQuestLogin_SendEnsureClientQuestLogin, Param_QuestManager) == 0x000000, "Member 'FortAsyncAction_EnsureClientQuestLogin_SendEnsureClientQuestLogin::Param_QuestManager' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_EnsureClientQuestLogin_SendEnsureClientQuestLogin, ReturnValue) == 0x000008, "Member 'FortAsyncAction_EnsureClientQuestLogin_SendEnsureClientQuestLogin::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAsyncAction_OpenChoiceUI.OpenChoiceUI
// 0x0040 (0x0040 - 0x0000)
struct FortAsyncAction_OpenChoiceUI_OpenChoiceUI final
{
public:
	class AFortPlayerController*                  Param_PlayerController;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FChoiceData                            Param_ChoiceItems;                                 // 0x0008(0x0030)(Parm, NativeAccessSpecifierPublic)
	class UFortAsyncAction_OpenChoiceUI*          ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAsyncAction_OpenChoiceUI_OpenChoiceUI) == 0x000008, "Wrong alignment on FortAsyncAction_OpenChoiceUI_OpenChoiceUI");
static_assert(sizeof(FortAsyncAction_OpenChoiceUI_OpenChoiceUI) == 0x000040, "Wrong size on FortAsyncAction_OpenChoiceUI_OpenChoiceUI");
static_assert(offsetof(FortAsyncAction_OpenChoiceUI_OpenChoiceUI, Param_PlayerController) == 0x000000, "Member 'FortAsyncAction_OpenChoiceUI_OpenChoiceUI::Param_PlayerController' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_OpenChoiceUI_OpenChoiceUI, Param_ChoiceItems) == 0x000008, "Member 'FortAsyncAction_OpenChoiceUI_OpenChoiceUI::Param_ChoiceItems' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_OpenChoiceUI_OpenChoiceUI, ReturnValue) == 0x000038, "Member 'FortAsyncAction_OpenChoiceUI_OpenChoiceUI::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTrackPreview.InitializeTrackPreview
// 0x0008 (0x0008 - 0x0000)
struct FortTrackPreview_InitializeTrackPreview final
{
public:
	class UStaticMeshComponent*                   InTrackMeshComp;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTrackPreview_InitializeTrackPreview) == 0x000008, "Wrong alignment on FortTrackPreview_InitializeTrackPreview");
static_assert(sizeof(FortTrackPreview_InitializeTrackPreview) == 0x000008, "Wrong size on FortTrackPreview_InitializeTrackPreview");
static_assert(offsetof(FortTrackPreview_InitializeTrackPreview, InTrackMeshComp) == 0x000000, "Member 'FortTrackPreview_InitializeTrackPreview::InTrackMeshComp' has a wrong offset!");

// Function FortniteGame.FortAsyncAction_PlayConversation.PlayConversation
// 0x0018 (0x0018 - 0x0000)
struct FortAsyncAction_PlayConversation_PlayConversation final
{
public:
	class AFortPawn*                              Param_Pawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortConversation*                      Param_ConversationToPlay;                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAsyncAction_PlayConversation*      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAsyncAction_PlayConversation_PlayConversation) == 0x000008, "Wrong alignment on FortAsyncAction_PlayConversation_PlayConversation");
static_assert(sizeof(FortAsyncAction_PlayConversation_PlayConversation) == 0x000018, "Wrong size on FortAsyncAction_PlayConversation_PlayConversation");
static_assert(offsetof(FortAsyncAction_PlayConversation_PlayConversation, Param_Pawn) == 0x000000, "Member 'FortAsyncAction_PlayConversation_PlayConversation::Param_Pawn' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_PlayConversation_PlayConversation, Param_ConversationToPlay) == 0x000008, "Member 'FortAsyncAction_PlayConversation_PlayConversation::Param_ConversationToPlay' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_PlayConversation_PlayConversation, ReturnValue) == 0x000010, "Member 'FortAsyncAction_PlayConversation_PlayConversation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAsyncAction_RejoinSession.RejoinSession
// 0x0010 (0x0010 - 0x0000)
struct FortAsyncAction_RejoinSession_RejoinSession final
{
public:
	class AFortPlayerController*                  Param_PlayerController;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAsyncAction_RejoinSession*         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAsyncAction_RejoinSession_RejoinSession) == 0x000008, "Wrong alignment on FortAsyncAction_RejoinSession_RejoinSession");
static_assert(sizeof(FortAsyncAction_RejoinSession_RejoinSession) == 0x000010, "Wrong size on FortAsyncAction_RejoinSession_RejoinSession");
static_assert(offsetof(FortAsyncAction_RejoinSession_RejoinSession, Param_PlayerController) == 0x000000, "Member 'FortAsyncAction_RejoinSession_RejoinSession::Param_PlayerController' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_RejoinSession_RejoinSession, ReturnValue) == 0x000008, "Member 'FortAsyncAction_RejoinSession_RejoinSession::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAsyncAction_TriggerNotification.TriggerNotification
// 0x0170 (0x0170 - 0x0000)
struct FortAsyncAction_TriggerNotification_TriggerNotification final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortNotificationQueueType                    Param_NotificationType;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortDialogDescription                 NotificationDescription;                           // 0x0010(0x0150)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UFortAsyncAction_TriggerNotification*   ReturnValue;                                       // 0x0160(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_168[0x8];                                      // 0x0168(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAsyncAction_TriggerNotification_TriggerNotification) == 0x000010, "Wrong alignment on FortAsyncAction_TriggerNotification_TriggerNotification");
static_assert(sizeof(FortAsyncAction_TriggerNotification_TriggerNotification) == 0x000170, "Wrong size on FortAsyncAction_TriggerNotification_TriggerNotification");
static_assert(offsetof(FortAsyncAction_TriggerNotification_TriggerNotification, InWorldContextObject) == 0x000000, "Member 'FortAsyncAction_TriggerNotification_TriggerNotification::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_TriggerNotification_TriggerNotification, Param_NotificationType) == 0x000008, "Member 'FortAsyncAction_TriggerNotification_TriggerNotification::Param_NotificationType' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_TriggerNotification_TriggerNotification, NotificationDescription) == 0x000010, "Member 'FortAsyncAction_TriggerNotification_TriggerNotification::NotificationDescription' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_TriggerNotification_TriggerNotification, ReturnValue) == 0x000160, "Member 'FortAsyncAction_TriggerNotification_TriggerNotification::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAthenaAircraft.GetDropEndTime
// 0x0004 (0x0004 - 0x0000)
struct FortAthenaAircraft_GetDropEndTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAircraft_GetDropEndTime) == 0x000004, "Wrong alignment on FortAthenaAircraft_GetDropEndTime");
static_assert(sizeof(FortAthenaAircraft_GetDropEndTime) == 0x000004, "Wrong size on FortAthenaAircraft_GetDropEndTime");
static_assert(offsetof(FortAthenaAircraft_GetDropEndTime, ReturnValue) == 0x000000, "Member 'FortAthenaAircraft_GetDropEndTime::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAthenaAircraft.GetDropStartTime
// 0x0004 (0x0004 - 0x0000)
struct FortAthenaAircraft_GetDropStartTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaAircraft_GetDropStartTime) == 0x000004, "Wrong alignment on FortAthenaAircraft_GetDropStartTime");
static_assert(sizeof(FortAthenaAircraft_GetDropStartTime) == 0x000004, "Wrong size on FortAthenaAircraft_GetDropStartTime");
static_assert(offsetof(FortAthenaAircraft_GetDropStartTime, ReturnValue) == 0x000000, "Member 'FortAthenaAircraft_GetDropStartTime::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTrack.GetOutgoingNeighborFromSpline
// 0x0018 (0x0018 - 0x0000)
struct FortTrack_GetOutgoingNeighborFromSpline final
{
public:
	class USplineComponent*                       InSpline;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InReverseDirection;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortTrack*                             OutNeighbor;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTrack_GetOutgoingNeighborFromSpline) == 0x000008, "Wrong alignment on FortTrack_GetOutgoingNeighborFromSpline");
static_assert(sizeof(FortTrack_GetOutgoingNeighborFromSpline) == 0x000018, "Wrong size on FortTrack_GetOutgoingNeighborFromSpline");
static_assert(offsetof(FortTrack_GetOutgoingNeighborFromSpline, InSpline) == 0x000000, "Member 'FortTrack_GetOutgoingNeighborFromSpline::InSpline' has a wrong offset!");
static_assert(offsetof(FortTrack_GetOutgoingNeighborFromSpline, InReverseDirection) == 0x000008, "Member 'FortTrack_GetOutgoingNeighborFromSpline::InReverseDirection' has a wrong offset!");
static_assert(offsetof(FortTrack_GetOutgoingNeighborFromSpline, OutNeighbor) == 0x000010, "Member 'FortTrack_GetOutgoingNeighborFromSpline::OutNeighbor' has a wrong offset!");

// Function FortniteGame.FortTrack.GetPathDistanceToTrack
// 0x0020 (0x0020 - 0x0000)
struct FortTrack_GetPathDistanceToTrack final
{
public:
	class AFortTrack*                             TargetTrack;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       InCurrentSpline;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentDistanceAlongSpline;                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InReverseDirection;                                // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTrack_GetPathDistanceToTrack) == 0x000008, "Wrong alignment on FortTrack_GetPathDistanceToTrack");
static_assert(sizeof(FortTrack_GetPathDistanceToTrack) == 0x000020, "Wrong size on FortTrack_GetPathDistanceToTrack");
static_assert(offsetof(FortTrack_GetPathDistanceToTrack, TargetTrack) == 0x000000, "Member 'FortTrack_GetPathDistanceToTrack::TargetTrack' has a wrong offset!");
static_assert(offsetof(FortTrack_GetPathDistanceToTrack, InCurrentSpline) == 0x000008, "Member 'FortTrack_GetPathDistanceToTrack::InCurrentSpline' has a wrong offset!");
static_assert(offsetof(FortTrack_GetPathDistanceToTrack, CurrentDistanceAlongSpline) == 0x000010, "Member 'FortTrack_GetPathDistanceToTrack::CurrentDistanceAlongSpline' has a wrong offset!");
static_assert(offsetof(FortTrack_GetPathDistanceToTrack, InReverseDirection) == 0x000014, "Member 'FortTrack_GetPathDistanceToTrack::InReverseDirection' has a wrong offset!");
static_assert(offsetof(FortTrack_GetPathDistanceToTrack, ReturnValue) == 0x000018, "Member 'FortTrack_GetPathDistanceToTrack::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTrack.GetSplineFromIncomingNeighbor
// 0x0018 (0x0018 - 0x0000)
struct FortTrack_GetSplineFromIncomingNeighbor final
{
public:
	class AFortTrack*                             InNeighbor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       OutSpline;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutReverseDirection;                               // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTrack_GetSplineFromIncomingNeighbor) == 0x000008, "Wrong alignment on FortTrack_GetSplineFromIncomingNeighbor");
static_assert(sizeof(FortTrack_GetSplineFromIncomingNeighbor) == 0x000018, "Wrong size on FortTrack_GetSplineFromIncomingNeighbor");
static_assert(offsetof(FortTrack_GetSplineFromIncomingNeighbor, InNeighbor) == 0x000000, "Member 'FortTrack_GetSplineFromIncomingNeighbor::InNeighbor' has a wrong offset!");
static_assert(offsetof(FortTrack_GetSplineFromIncomingNeighbor, OutSpline) == 0x000008, "Member 'FortTrack_GetSplineFromIncomingNeighbor::OutSpline' has a wrong offset!");
static_assert(offsetof(FortTrack_GetSplineFromIncomingNeighbor, OutReverseDirection) == 0x000010, "Member 'FortTrack_GetSplineFromIncomingNeighbor::OutReverseDirection' has a wrong offset!");

// Function FortniteGame.FortTrack.GetSplineFromPositionAndOrientation
// 0x0028 (0x0028 - 0x0000)
struct FortTrack_GetSplineFromPositionAndOrientation final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRotation;                                        // 0x000C(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class USplineComponent*                       OutSpline;                                         // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutDistanceAlongSpline;                            // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutReverseDirection;                               // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTrack_GetSplineFromPositionAndOrientation) == 0x000008, "Wrong alignment on FortTrack_GetSplineFromPositionAndOrientation");
static_assert(sizeof(FortTrack_GetSplineFromPositionAndOrientation) == 0x000028, "Wrong size on FortTrack_GetSplineFromPositionAndOrientation");
static_assert(offsetof(FortTrack_GetSplineFromPositionAndOrientation, InLocation) == 0x000000, "Member 'FortTrack_GetSplineFromPositionAndOrientation::InLocation' has a wrong offset!");
static_assert(offsetof(FortTrack_GetSplineFromPositionAndOrientation, InRotation) == 0x00000C, "Member 'FortTrack_GetSplineFromPositionAndOrientation::InRotation' has a wrong offset!");
static_assert(offsetof(FortTrack_GetSplineFromPositionAndOrientation, OutSpline) == 0x000018, "Member 'FortTrack_GetSplineFromPositionAndOrientation::OutSpline' has a wrong offset!");
static_assert(offsetof(FortTrack_GetSplineFromPositionAndOrientation, OutDistanceAlongSpline) == 0x000020, "Member 'FortTrack_GetSplineFromPositionAndOrientation::OutDistanceAlongSpline' has a wrong offset!");
static_assert(offsetof(FortTrack_GetSplineFromPositionAndOrientation, OutReverseDirection) == 0x000024, "Member 'FortTrack_GetSplineFromPositionAndOrientation::OutReverseDirection' has a wrong offset!");

// Function FortniteGame.FortTrack.InitializeTrack
// 0x0008 (0x0008 - 0x0000)
struct FortTrack_InitializeTrack final
{
public:
	class UPrimitiveComponent*                    InSwitchComp;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTrack_InitializeTrack) == 0x000008, "Wrong alignment on FortTrack_InitializeTrack");
static_assert(sizeof(FortTrack_InitializeTrack) == 0x000008, "Wrong size on FortTrack_InitializeTrack");
static_assert(offsetof(FortTrack_InitializeTrack, InSwitchComp) == 0x000000, "Member 'FortTrack_InitializeTrack::InSwitchComp' has a wrong offset!");

// Function FortniteGame.FortTrack.IsConnectedToTrack
// 0x0010 (0x0010 - 0x0000)
struct FortTrack_IsConnectedToTrack final
{
public:
	class AFortTrack*                             TargetTrack;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTrack_IsConnectedToTrack) == 0x000008, "Wrong alignment on FortTrack_IsConnectedToTrack");
static_assert(sizeof(FortTrack_IsConnectedToTrack) == 0x000010, "Wrong size on FortTrack_IsConnectedToTrack");
static_assert(offsetof(FortTrack_IsConnectedToTrack, TargetTrack) == 0x000000, "Member 'FortTrack_IsConnectedToTrack::TargetTrack' has a wrong offset!");
static_assert(offsetof(FortTrack_IsConnectedToTrack, ReturnValue) == 0x000008, "Member 'FortTrack_IsConnectedToTrack::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTrack.IsConnectedToTrackList
// 0x0018 (0x0018 - 0x0000)
struct FortTrack_IsConnectedToTrackList final
{
public:
	TArray<class AFortTrack*>                     TargetTracks;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTrack_IsConnectedToTrackList) == 0x000008, "Wrong alignment on FortTrack_IsConnectedToTrackList");
static_assert(sizeof(FortTrack_IsConnectedToTrackList) == 0x000018, "Wrong size on FortTrack_IsConnectedToTrackList");
static_assert(offsetof(FortTrack_IsConnectedToTrackList, TargetTracks) == 0x000000, "Member 'FortTrack_IsConnectedToTrackList::TargetTracks' has a wrong offset!");
static_assert(offsetof(FortTrack_IsConnectedToTrackList, ReturnValue) == 0x000010, "Member 'FortTrack_IsConnectedToTrackList::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTrack.OnConfigurationChanged
// 0x0008 (0x0008 - 0x0000)
struct FortTrack_OnConfigurationChanged final
{
public:
	int32                                         NewConfigurationIdx;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldConfigurationIdx;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTrack_OnConfigurationChanged) == 0x000004, "Wrong alignment on FortTrack_OnConfigurationChanged");
static_assert(sizeof(FortTrack_OnConfigurationChanged) == 0x000008, "Wrong size on FortTrack_OnConfigurationChanged");
static_assert(offsetof(FortTrack_OnConfigurationChanged, NewConfigurationIdx) == 0x000000, "Member 'FortTrack_OnConfigurationChanged::NewConfigurationIdx' has a wrong offset!");
static_assert(offsetof(FortTrack_OnConfigurationChanged, OldConfigurationIdx) == 0x000004, "Member 'FortTrack_OnConfigurationChanged::OldConfigurationIdx' has a wrong offset!");

// Function FortniteGame.FortTrack.OnSwitchStateChanged
// 0x000C (0x000C - 0x0000)
struct FortTrack_OnSwitchStateChanged final
{
public:
	int32                                         NewSwitchState;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldSwitchState;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSwitchStates;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTrack_OnSwitchStateChanged) == 0x000004, "Wrong alignment on FortTrack_OnSwitchStateChanged");
static_assert(sizeof(FortTrack_OnSwitchStateChanged) == 0x00000C, "Wrong size on FortTrack_OnSwitchStateChanged");
static_assert(offsetof(FortTrack_OnSwitchStateChanged, NewSwitchState) == 0x000000, "Member 'FortTrack_OnSwitchStateChanged::NewSwitchState' has a wrong offset!");
static_assert(offsetof(FortTrack_OnSwitchStateChanged, OldSwitchState) == 0x000004, "Member 'FortTrack_OnSwitchStateChanged::OldSwitchState' has a wrong offset!");
static_assert(offsetof(FortTrack_OnSwitchStateChanged, NumSwitchStates) == 0x000008, "Member 'FortTrack_OnSwitchStateChanged::NumSwitchStates' has a wrong offset!");

// Function FortniteGame.FortWorker.GetSecondaryCategory
// 0x0098 (0x0098 - 0x0000)
struct FortWorker_GetSecondaryCategory final
{
public:
	class FText                                   ItemCategoryText;                                  // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ItemCategoryBrush;                                 // 0x0018(0x0078)(Parm, OutParm, NativeAccessSpecifierPublic)
	EFortBrushSize                                BrushSize;                                         // 0x0090(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0091(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortWorker_GetSecondaryCategory) == 0x000008, "Wrong alignment on FortWorker_GetSecondaryCategory");
static_assert(sizeof(FortWorker_GetSecondaryCategory) == 0x000098, "Wrong size on FortWorker_GetSecondaryCategory");
static_assert(offsetof(FortWorker_GetSecondaryCategory, ItemCategoryText) == 0x000000, "Member 'FortWorker_GetSecondaryCategory::ItemCategoryText' has a wrong offset!");
static_assert(offsetof(FortWorker_GetSecondaryCategory, ItemCategoryBrush) == 0x000018, "Member 'FortWorker_GetSecondaryCategory::ItemCategoryBrush' has a wrong offset!");
static_assert(offsetof(FortWorker_GetSecondaryCategory, BrushSize) == 0x000090, "Member 'FortWorker_GetSecondaryCategory::BrushSize' has a wrong offset!");
static_assert(offsetof(FortWorker_GetSecondaryCategory, ReturnValue) == 0x000091, "Member 'FortWorker_GetSecondaryCategory::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWorker.GetTertiaryCategory
// 0x0098 (0x0098 - 0x0000)
struct FortWorker_GetTertiaryCategory final
{
public:
	class FText                                   ItemCategoryText;                                  // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ItemCategoryBrush;                                 // 0x0018(0x0078)(Parm, OutParm, NativeAccessSpecifierPublic)
	EFortBrushSize                                BrushSize;                                         // 0x0090(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0091(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortWorker_GetTertiaryCategory) == 0x000008, "Wrong alignment on FortWorker_GetTertiaryCategory");
static_assert(sizeof(FortWorker_GetTertiaryCategory) == 0x000098, "Wrong size on FortWorker_GetTertiaryCategory");
static_assert(offsetof(FortWorker_GetTertiaryCategory, ItemCategoryText) == 0x000000, "Member 'FortWorker_GetTertiaryCategory::ItemCategoryText' has a wrong offset!");
static_assert(offsetof(FortWorker_GetTertiaryCategory, ItemCategoryBrush) == 0x000018, "Member 'FortWorker_GetTertiaryCategory::ItemCategoryBrush' has a wrong offset!");
static_assert(offsetof(FortWorker_GetTertiaryCategory, BrushSize) == 0x000090, "Member 'FortWorker_GetTertiaryCategory::BrushSize' has a wrong offset!");
static_assert(offsetof(FortWorker_GetTertiaryCategory, ReturnValue) == 0x000091, "Member 'FortWorker_GetTertiaryCategory::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWorker.GetWorkerTypeBP
// 0x0008 (0x0008 - 0x0000)
struct FortWorker_GetWorkerTypeBP final
{
public:
	class UFortWorkerType*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWorker_GetWorkerTypeBP) == 0x000008, "Wrong alignment on FortWorker_GetWorkerTypeBP");
static_assert(sizeof(FortWorker_GetWorkerTypeBP) == 0x000008, "Wrong size on FortWorker_GetWorkerTypeBP");
static_assert(offsetof(FortWorker_GetWorkerTypeBP, ReturnValue) == 0x000000, "Member 'FortWorker_GetWorkerTypeBP::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAthenaHoverCarMovementComponent.ServerUpdateAthenaState
// 0x0014 (0x0014 - 0x0000)
struct FortAthenaHoverCarMovementComponent_ServerUpdateAthenaState final
{
public:
	float                                         InThrottleInput;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSteeringInput;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InForwardVectorTarget;                             // 0x0008(0x000C)(ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaHoverCarMovementComponent_ServerUpdateAthenaState) == 0x000004, "Wrong alignment on FortAthenaHoverCarMovementComponent_ServerUpdateAthenaState");
static_assert(sizeof(FortAthenaHoverCarMovementComponent_ServerUpdateAthenaState) == 0x000014, "Wrong size on FortAthenaHoverCarMovementComponent_ServerUpdateAthenaState");
static_assert(offsetof(FortAthenaHoverCarMovementComponent_ServerUpdateAthenaState, InThrottleInput) == 0x000000, "Member 'FortAthenaHoverCarMovementComponent_ServerUpdateAthenaState::InThrottleInput' has a wrong offset!");
static_assert(offsetof(FortAthenaHoverCarMovementComponent_ServerUpdateAthenaState, InSteeringInput) == 0x000004, "Member 'FortAthenaHoverCarMovementComponent_ServerUpdateAthenaState::InSteeringInput' has a wrong offset!");
static_assert(offsetof(FortAthenaHoverCarMovementComponent_ServerUpdateAthenaState, InForwardVectorTarget) == 0x000008, "Member 'FortAthenaHoverCarMovementComponent_ServerUpdateAthenaState::InForwardVectorTarget' has a wrong offset!");

// Function FortniteGame.FortLobbyBeaconClient.ClientCreateOrJoinChatRoom
// 0x0010 (0x0010 - 0x0000)
struct FortLobbyBeaconClient_ClientCreateOrJoinChatRoom final
{
public:
	class FString                                 ChatRoomId;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLobbyBeaconClient_ClientCreateOrJoinChatRoom) == 0x000008, "Wrong alignment on FortLobbyBeaconClient_ClientCreateOrJoinChatRoom");
static_assert(sizeof(FortLobbyBeaconClient_ClientCreateOrJoinChatRoom) == 0x000010, "Wrong size on FortLobbyBeaconClient_ClientCreateOrJoinChatRoom");
static_assert(offsetof(FortLobbyBeaconClient_ClientCreateOrJoinChatRoom, ChatRoomId) == 0x000000, "Member 'FortLobbyBeaconClient_ClientCreateOrJoinChatRoom::ChatRoomId' has a wrong offset!");

// Function FortniteGame.FortLobbyBeaconClient.ServerIncrementHomeBaseVersion
// 0x0028 (0x0028 - 0x0000)
struct FortLobbyBeaconClient_ServerIncrementHomeBaseVersion final
{
public:
	struct FUniqueNetIdRepl                       InUniqueId;                                        // 0x0000(0x0028)(ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLobbyBeaconClient_ServerIncrementHomeBaseVersion) == 0x000008, "Wrong alignment on FortLobbyBeaconClient_ServerIncrementHomeBaseVersion");
static_assert(sizeof(FortLobbyBeaconClient_ServerIncrementHomeBaseVersion) == 0x000028, "Wrong size on FortLobbyBeaconClient_ServerIncrementHomeBaseVersion");
static_assert(offsetof(FortLobbyBeaconClient_ServerIncrementHomeBaseVersion, InUniqueId) == 0x000000, "Member 'FortLobbyBeaconClient_ServerIncrementHomeBaseVersion::InUniqueId' has a wrong offset!");

// Function FortniteGame.FortLobbyBeaconClient.ServerSetCharacterGender
// 0x0030 (0x0030 - 0x0000)
struct FortLobbyBeaconClient_ServerSetCharacterGender final
{
public:
	struct FUniqueNetIdRepl                       InUniqueId;                                        // 0x0000(0x0028)(ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCustomGender                             GenderType;                                        // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortLobbyBeaconClient_ServerSetCharacterGender) == 0x000008, "Wrong alignment on FortLobbyBeaconClient_ServerSetCharacterGender");
static_assert(sizeof(FortLobbyBeaconClient_ServerSetCharacterGender) == 0x000030, "Wrong size on FortLobbyBeaconClient_ServerSetCharacterGender");
static_assert(offsetof(FortLobbyBeaconClient_ServerSetCharacterGender, InUniqueId) == 0x000000, "Member 'FortLobbyBeaconClient_ServerSetCharacterGender::InUniqueId' has a wrong offset!");
static_assert(offsetof(FortLobbyBeaconClient_ServerSetCharacterGender, GenderType) == 0x000028, "Member 'FortLobbyBeaconClient_ServerSetCharacterGender::GenderType' has a wrong offset!");

// Function FortniteGame.FortLobbyBeaconClient.ServerSetConsoleUniqueNetId
// 0x0058 (0x0058 - 0x0000)
struct FortLobbyBeaconClient_ServerSetConsoleUniqueNetId final
{
public:
	struct FUniqueNetIdRepl                       InUniqueId;                                        // 0x0000(0x0028)(ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NewConsoleOSS;                                     // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       NewConsoleNetId;                                   // 0x0030(0x0028)(ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLobbyBeaconClient_ServerSetConsoleUniqueNetId) == 0x000008, "Wrong alignment on FortLobbyBeaconClient_ServerSetConsoleUniqueNetId");
static_assert(sizeof(FortLobbyBeaconClient_ServerSetConsoleUniqueNetId) == 0x000058, "Wrong size on FortLobbyBeaconClient_ServerSetConsoleUniqueNetId");
static_assert(offsetof(FortLobbyBeaconClient_ServerSetConsoleUniqueNetId, InUniqueId) == 0x000000, "Member 'FortLobbyBeaconClient_ServerSetConsoleUniqueNetId::InUniqueId' has a wrong offset!");
static_assert(offsetof(FortLobbyBeaconClient_ServerSetConsoleUniqueNetId, NewConsoleOSS) == 0x000028, "Member 'FortLobbyBeaconClient_ServerSetConsoleUniqueNetId::NewConsoleOSS' has a wrong offset!");
static_assert(offsetof(FortLobbyBeaconClient_ServerSetConsoleUniqueNetId, NewConsoleNetId) == 0x000030, "Member 'FortLobbyBeaconClient_ServerSetConsoleUniqueNetId::NewConsoleNetId' has a wrong offset!");

// Function FortniteGame.FortLobbyBeaconClient.ServerSetCurrentCharacterXp
// 0x0030 (0x0030 - 0x0000)
struct FortLobbyBeaconClient_ServerSetCurrentCharacterXp final
{
public:
	struct FUniqueNetIdRepl                       InUniqueId;                                        // 0x0000(0x0028)(ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentCharacterXp;                                // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortLobbyBeaconClient_ServerSetCurrentCharacterXp) == 0x000008, "Wrong alignment on FortLobbyBeaconClient_ServerSetCurrentCharacterXp");
static_assert(sizeof(FortLobbyBeaconClient_ServerSetCurrentCharacterXp) == 0x000030, "Wrong size on FortLobbyBeaconClient_ServerSetCurrentCharacterXp");
static_assert(offsetof(FortLobbyBeaconClient_ServerSetCurrentCharacterXp, InUniqueId) == 0x000000, "Member 'FortLobbyBeaconClient_ServerSetCurrentCharacterXp::InUniqueId' has a wrong offset!");
static_assert(offsetof(FortLobbyBeaconClient_ServerSetCurrentCharacterXp, CurrentCharacterXp) == 0x000028, "Member 'FortLobbyBeaconClient_ServerSetCurrentCharacterXp::CurrentCharacterXp' has a wrong offset!");

// Function FortniteGame.FortLobbyBeaconClient.ServerSetGadget
// 0x0040 (0x0040 - 0x0000)
struct FortLobbyBeaconClient_ServerSetGadget final
{
public:
	struct FUniqueNetIdRepl                       InUniqueId;                                        // 0x0000(0x0028)(ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GadgetPersistentName;                              // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLobbyBeaconClient_ServerSetGadget) == 0x000008, "Wrong alignment on FortLobbyBeaconClient_ServerSetGadget");
static_assert(sizeof(FortLobbyBeaconClient_ServerSetGadget) == 0x000040, "Wrong size on FortLobbyBeaconClient_ServerSetGadget");
static_assert(offsetof(FortLobbyBeaconClient_ServerSetGadget, InUniqueId) == 0x000000, "Member 'FortLobbyBeaconClient_ServerSetGadget::InUniqueId' has a wrong offset!");
static_assert(offsetof(FortLobbyBeaconClient_ServerSetGadget, Param_Index) == 0x000028, "Member 'FortLobbyBeaconClient_ServerSetGadget::Param_Index' has a wrong offset!");
static_assert(offsetof(FortLobbyBeaconClient_ServerSetGadget, GadgetPersistentName) == 0x000030, "Member 'FortLobbyBeaconClient_ServerSetGadget::GadgetPersistentName' has a wrong offset!");

// Function FortniteGame.FortLobbyBeaconClient.ServerSetHeroId
// 0x0038 (0x0038 - 0x0000)
struct FortLobbyBeaconClient_ServerSetHeroId final
{
public:
	struct FUniqueNetIdRepl                       InUniqueId;                                        // 0x0000(0x0028)(ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InHeroId;                                          // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLobbyBeaconClient_ServerSetHeroId) == 0x000008, "Wrong alignment on FortLobbyBeaconClient_ServerSetHeroId");
static_assert(sizeof(FortLobbyBeaconClient_ServerSetHeroId) == 0x000038, "Wrong size on FortLobbyBeaconClient_ServerSetHeroId");
static_assert(offsetof(FortLobbyBeaconClient_ServerSetHeroId, InUniqueId) == 0x000000, "Member 'FortLobbyBeaconClient_ServerSetHeroId::InUniqueId' has a wrong offset!");
static_assert(offsetof(FortLobbyBeaconClient_ServerSetHeroId, InHeroId) == 0x000028, "Member 'FortLobbyBeaconClient_ServerSetHeroId::InHeroId' has a wrong offset!");

// Function FortniteGame.FortLobbyBeaconClient.ServerSetHeroSquadId
// 0x0030 (0x0030 - 0x0000)
struct FortLobbyBeaconClient_ServerSetHeroSquadId final
{
public:
	struct FUniqueNetIdRepl                       InUniqueId;                                        // 0x0000(0x0028)(ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InHeroSquadId;                                     // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLobbyBeaconClient_ServerSetHeroSquadId) == 0x000008, "Wrong alignment on FortLobbyBeaconClient_ServerSetHeroSquadId");
static_assert(sizeof(FortLobbyBeaconClient_ServerSetHeroSquadId) == 0x000030, "Wrong size on FortLobbyBeaconClient_ServerSetHeroSquadId");
static_assert(offsetof(FortLobbyBeaconClient_ServerSetHeroSquadId, InUniqueId) == 0x000000, "Member 'FortLobbyBeaconClient_ServerSetHeroSquadId::InUniqueId' has a wrong offset!");
static_assert(offsetof(FortLobbyBeaconClient_ServerSetHeroSquadId, InHeroSquadId) == 0x000028, "Member 'FortLobbyBeaconClient_ServerSetHeroSquadId::InHeroSquadId' has a wrong offset!");

// Function FortniteGame.FortLobbyBeaconClient.ServerSetHeroType
// 0x0030 (0x0030 - 0x0000)
struct FortLobbyBeaconClient_ServerSetHeroType final
{
public:
	struct FUniqueNetIdRepl                       InUniqueId;                                        // 0x0000(0x0028)(ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortHeroType*                    InHeroType;                                        // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLobbyBeaconClient_ServerSetHeroType) == 0x000008, "Wrong alignment on FortLobbyBeaconClient_ServerSetHeroType");
static_assert(sizeof(FortLobbyBeaconClient_ServerSetHeroType) == 0x000030, "Wrong size on FortLobbyBeaconClient_ServerSetHeroType");
static_assert(offsetof(FortLobbyBeaconClient_ServerSetHeroType, InUniqueId) == 0x000000, "Member 'FortLobbyBeaconClient_ServerSetHeroType::InUniqueId' has a wrong offset!");
static_assert(offsetof(FortLobbyBeaconClient_ServerSetHeroType, InHeroType) == 0x000028, "Member 'FortLobbyBeaconClient_ServerSetHeroType::InHeroType' has a wrong offset!");

// Function FortniteGame.FortLobbyBeaconClient.ServerSetMatchmakingLevel
// 0x0030 (0x0030 - 0x0000)
struct FortLobbyBeaconClient_ServerSetMatchmakingLevel final
{
public:
	struct FUniqueNetIdRepl                       InUniqueId;                                        // 0x0000(0x0028)(ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MatchmakingLevel;                                  // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortLobbyBeaconClient_ServerSetMatchmakingLevel) == 0x000008, "Wrong alignment on FortLobbyBeaconClient_ServerSetMatchmakingLevel");
static_assert(sizeof(FortLobbyBeaconClient_ServerSetMatchmakingLevel) == 0x000030, "Wrong size on FortLobbyBeaconClient_ServerSetMatchmakingLevel");
static_assert(offsetof(FortLobbyBeaconClient_ServerSetMatchmakingLevel, InUniqueId) == 0x000000, "Member 'FortLobbyBeaconClient_ServerSetMatchmakingLevel::InUniqueId' has a wrong offset!");
static_assert(offsetof(FortLobbyBeaconClient_ServerSetMatchmakingLevel, MatchmakingLevel) == 0x000028, "Member 'FortLobbyBeaconClient_ServerSetMatchmakingLevel::MatchmakingLevel' has a wrong offset!");

// Function FortniteGame.FortLobbyBeaconClient.ServerTeamChatRoomReady
// 0x0010 (0x0010 - 0x0000)
struct FortLobbyBeaconClient_ServerTeamChatRoomReady final
{
public:
	class FString                                 ChatRoomId;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLobbyBeaconClient_ServerTeamChatRoomReady) == 0x000008, "Wrong alignment on FortLobbyBeaconClient_ServerTeamChatRoomReady");
static_assert(sizeof(FortLobbyBeaconClient_ServerTeamChatRoomReady) == 0x000010, "Wrong size on FortLobbyBeaconClient_ServerTeamChatRoomReady");
static_assert(offsetof(FortLobbyBeaconClient_ServerTeamChatRoomReady, ChatRoomId) == 0x000000, "Member 'FortLobbyBeaconClient_ServerTeamChatRoomReady::ChatRoomId' has a wrong offset!");

// Function FortniteGame.FortBadgeItemDefinition.GetBadgeScoreCategory
// 0x0001 (0x0001 - 0x0000)
struct FortBadgeItemDefinition_GetBadgeScoreCategory final
{
public:
	EStatCategory                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBadgeItemDefinition_GetBadgeScoreCategory) == 0x000001, "Wrong alignment on FortBadgeItemDefinition_GetBadgeScoreCategory");
static_assert(sizeof(FortBadgeItemDefinition_GetBadgeScoreCategory) == 0x000001, "Wrong size on FortBadgeItemDefinition_GetBadgeScoreCategory");
static_assert(offsetof(FortBadgeItemDefinition_GetBadgeScoreCategory, ReturnValue) == 0x000000, "Member 'FortBadgeItemDefinition_GetBadgeScoreCategory::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortBadgeItemDefinition.GetBadgeScoreThreshold
// 0x0004 (0x0004 - 0x0000)
struct FortBadgeItemDefinition_GetBadgeScoreThreshold final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBadgeItemDefinition_GetBadgeScoreThreshold) == 0x000004, "Wrong alignment on FortBadgeItemDefinition_GetBadgeScoreThreshold");
static_assert(sizeof(FortBadgeItemDefinition_GetBadgeScoreThreshold) == 0x000004, "Wrong size on FortBadgeItemDefinition_GetBadgeScoreThreshold");
static_assert(offsetof(FortBadgeItemDefinition_GetBadgeScoreThreshold, ReturnValue) == 0x000000, "Member 'FortBadgeItemDefinition_GetBadgeScoreThreshold::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortBadgeItemDefinition.GetMissionPoints
// 0x0004 (0x0004 - 0x0000)
struct FortBadgeItemDefinition_GetMissionPoints final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBadgeItemDefinition_GetMissionPoints) == 0x000004, "Wrong alignment on FortBadgeItemDefinition_GetMissionPoints");
static_assert(sizeof(FortBadgeItemDefinition_GetMissionPoints) == 0x000004, "Wrong size on FortBadgeItemDefinition_GetMissionPoints");
static_assert(offsetof(FortBadgeItemDefinition_GetMissionPoints, ReturnValue) == 0x000000, "Member 'FortBadgeItemDefinition_GetMissionPoints::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortBadgeItemDefinition.GetScoreAwarded
// 0x0010 (0x0010 - 0x0000)
struct FortBadgeItemDefinition_GetScoreAwarded final
{
public:
	const class APlayerController*                PlayerController;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortBadgeItemDefinition_GetScoreAwarded) == 0x000008, "Wrong alignment on FortBadgeItemDefinition_GetScoreAwarded");
static_assert(sizeof(FortBadgeItemDefinition_GetScoreAwarded) == 0x000010, "Wrong size on FortBadgeItemDefinition_GetScoreAwarded");
static_assert(offsetof(FortBadgeItemDefinition_GetScoreAwarded, PlayerController) == 0x000000, "Member 'FortBadgeItemDefinition_GetScoreAwarded::PlayerController' has a wrong offset!");
static_assert(offsetof(FortBadgeItemDefinition_GetScoreAwarded, ReturnValue) == 0x000008, "Member 'FortBadgeItemDefinition_GetScoreAwarded::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortBannerUtilities.GetBannerColor
// 0x0028 (0x0028 - 0x0000)
struct FortBannerUtilities_GetBannerColor final
{
public:
	class UFortHomebaseBannerColorItem*           BannerColor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHomebaseBannerColor                   ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBannerUtilities_GetBannerColor) == 0x000008, "Wrong alignment on FortBannerUtilities_GetBannerColor");
static_assert(sizeof(FortBannerUtilities_GetBannerColor) == 0x000028, "Wrong size on FortBannerUtilities_GetBannerColor");
static_assert(offsetof(FortBannerUtilities_GetBannerColor, BannerColor) == 0x000000, "Member 'FortBannerUtilities_GetBannerColor::BannerColor' has a wrong offset!");
static_assert(offsetof(FortBannerUtilities_GetBannerColor, ReturnValue) == 0x000008, "Member 'FortBannerUtilities_GetBannerColor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortBannerUtilities.GetBannerColorCategoryName
// 0x0020 (0x0020 - 0x0000)
struct FortBannerUtilities_GetBannerColorCategoryName final
{
public:
	class FName                                   CategoryRowName;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBannerUtilities_GetBannerColorCategoryName) == 0x000008, "Wrong alignment on FortBannerUtilities_GetBannerColorCategoryName");
static_assert(sizeof(FortBannerUtilities_GetBannerColorCategoryName) == 0x000020, "Wrong size on FortBannerUtilities_GetBannerColorCategoryName");
static_assert(offsetof(FortBannerUtilities_GetBannerColorCategoryName, CategoryRowName) == 0x000000, "Member 'FortBannerUtilities_GetBannerColorCategoryName::CategoryRowName' has a wrong offset!");
static_assert(offsetof(FortBannerUtilities_GetBannerColorCategoryName, ReturnValue) == 0x000008, "Member 'FortBannerUtilities_GetBannerColorCategoryName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortBannerUtilities.GetBannerColorCategoryRowName
// 0x0010 (0x0010 - 0x0000)
struct FortBannerUtilities_GetBannerColorCategoryRowName final
{
public:
	class FName                                   BannerColorRowName;                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBannerUtilities_GetBannerColorCategoryRowName) == 0x000004, "Wrong alignment on FortBannerUtilities_GetBannerColorCategoryRowName");
static_assert(sizeof(FortBannerUtilities_GetBannerColorCategoryRowName) == 0x000010, "Wrong size on FortBannerUtilities_GetBannerColorCategoryRowName");
static_assert(offsetof(FortBannerUtilities_GetBannerColorCategoryRowName, BannerColorRowName) == 0x000000, "Member 'FortBannerUtilities_GetBannerColorCategoryRowName::BannerColorRowName' has a wrong offset!");
static_assert(offsetof(FortBannerUtilities_GetBannerColorCategoryRowName, ReturnValue) == 0x000008, "Member 'FortBannerUtilities_GetBannerColorCategoryRowName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortBannerUtilities.GetBannerColorFromRowName
// 0x0028 (0x0028 - 0x0000)
struct FortBannerUtilities_GetBannerColorFromRowName final
{
public:
	class FName                                   BannerColorRowName;                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHomebaseBannerColor                   ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBannerUtilities_GetBannerColorFromRowName) == 0x000004, "Wrong alignment on FortBannerUtilities_GetBannerColorFromRowName");
static_assert(sizeof(FortBannerUtilities_GetBannerColorFromRowName) == 0x000028, "Wrong size on FortBannerUtilities_GetBannerColorFromRowName");
static_assert(offsetof(FortBannerUtilities_GetBannerColorFromRowName, BannerColorRowName) == 0x000000, "Member 'FortBannerUtilities_GetBannerColorFromRowName::BannerColorRowName' has a wrong offset!");
static_assert(offsetof(FortBannerUtilities_GetBannerColorFromRowName, ReturnValue) == 0x000008, "Member 'FortBannerUtilities_GetBannerColorFromRowName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortBannerUtilities.GetBannerColorItemFromRowName
// 0x0018 (0x0018 - 0x0000)
struct FortBannerUtilities_GetBannerColorItemFromRowName final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BannerColorRowName;                                // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortHomebaseBannerColorItem*           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBannerUtilities_GetBannerColorItemFromRowName) == 0x000008, "Wrong alignment on FortBannerUtilities_GetBannerColorItemFromRowName");
static_assert(sizeof(FortBannerUtilities_GetBannerColorItemFromRowName) == 0x000018, "Wrong size on FortBannerUtilities_GetBannerColorItemFromRowName");
static_assert(offsetof(FortBannerUtilities_GetBannerColorItemFromRowName, FortPC) == 0x000000, "Member 'FortBannerUtilities_GetBannerColorItemFromRowName::FortPC' has a wrong offset!");
static_assert(offsetof(FortBannerUtilities_GetBannerColorItemFromRowName, BannerColorRowName) == 0x000008, "Member 'FortBannerUtilities_GetBannerColorItemFromRowName::BannerColorRowName' has a wrong offset!");
static_assert(offsetof(FortBannerUtilities_GetBannerColorItemFromRowName, ReturnValue) == 0x000010, "Member 'FortBannerUtilities_GetBannerColorItemFromRowName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortBannerUtilities.GetBannerColorPrimaryColor
// 0x0018 (0x0018 - 0x0000)
struct FortBannerUtilities_GetBannerColorPrimaryColor final
{
public:
	const class UFortHomebaseBannerColorItem*     BannerColor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBannerUtilities_GetBannerColorPrimaryColor) == 0x000008, "Wrong alignment on FortBannerUtilities_GetBannerColorPrimaryColor");
static_assert(sizeof(FortBannerUtilities_GetBannerColorPrimaryColor) == 0x000018, "Wrong size on FortBannerUtilities_GetBannerColorPrimaryColor");
static_assert(offsetof(FortBannerUtilities_GetBannerColorPrimaryColor, BannerColor) == 0x000000, "Member 'FortBannerUtilities_GetBannerColorPrimaryColor::BannerColor' has a wrong offset!");
static_assert(offsetof(FortBannerUtilities_GetBannerColorPrimaryColor, ReturnValue) == 0x000008, "Member 'FortBannerUtilities_GetBannerColorPrimaryColor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortBannerUtilities.GetBannerColorPrimaryColorFromRowName
// 0x0018 (0x0018 - 0x0000)
struct FortBannerUtilities_GetBannerColorPrimaryColorFromRowName final
{
public:
	class FName                                   BannerColorRowName;                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBannerUtilities_GetBannerColorPrimaryColorFromRowName) == 0x000004, "Wrong alignment on FortBannerUtilities_GetBannerColorPrimaryColorFromRowName");
static_assert(sizeof(FortBannerUtilities_GetBannerColorPrimaryColorFromRowName) == 0x000018, "Wrong size on FortBannerUtilities_GetBannerColorPrimaryColorFromRowName");
static_assert(offsetof(FortBannerUtilities_GetBannerColorPrimaryColorFromRowName, BannerColorRowName) == 0x000000, "Member 'FortBannerUtilities_GetBannerColorPrimaryColorFromRowName::BannerColorRowName' has a wrong offset!");
static_assert(offsetof(FortBannerUtilities_GetBannerColorPrimaryColorFromRowName, ReturnValue) == 0x000008, "Member 'FortBannerUtilities_GetBannerColorPrimaryColorFromRowName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortBannerUtilities.GetBannerColorSecondaryColor
// 0x0018 (0x0018 - 0x0000)
struct FortBannerUtilities_GetBannerColorSecondaryColor final
{
public:
	const class UFortHomebaseBannerColorItem*     BannerColor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBannerUtilities_GetBannerColorSecondaryColor) == 0x000008, "Wrong alignment on FortBannerUtilities_GetBannerColorSecondaryColor");
static_assert(sizeof(FortBannerUtilities_GetBannerColorSecondaryColor) == 0x000018, "Wrong size on FortBannerUtilities_GetBannerColorSecondaryColor");
static_assert(offsetof(FortBannerUtilities_GetBannerColorSecondaryColor, BannerColor) == 0x000000, "Member 'FortBannerUtilities_GetBannerColorSecondaryColor::BannerColor' has a wrong offset!");
static_assert(offsetof(FortBannerUtilities_GetBannerColorSecondaryColor, ReturnValue) == 0x000008, "Member 'FortBannerUtilities_GetBannerColorSecondaryColor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortBannerUtilities.GetBannerColorSecondaryColorFromRowName
// 0x0018 (0x0018 - 0x0000)
struct FortBannerUtilities_GetBannerColorSecondaryColorFromRowName final
{
public:
	class FName                                   BannerColorRowName;                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBannerUtilities_GetBannerColorSecondaryColorFromRowName) == 0x000004, "Wrong alignment on FortBannerUtilities_GetBannerColorSecondaryColorFromRowName");
static_assert(sizeof(FortBannerUtilities_GetBannerColorSecondaryColorFromRowName) == 0x000018, "Wrong size on FortBannerUtilities_GetBannerColorSecondaryColorFromRowName");
static_assert(offsetof(FortBannerUtilities_GetBannerColorSecondaryColorFromRowName, BannerColorRowName) == 0x000000, "Member 'FortBannerUtilities_GetBannerColorSecondaryColorFromRowName::BannerColorRowName' has a wrong offset!");
static_assert(offsetof(FortBannerUtilities_GetBannerColorSecondaryColorFromRowName, ReturnValue) == 0x000008, "Member 'FortBannerUtilities_GetBannerColorSecondaryColorFromRowName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortBannerUtilities.GetBannerColorsForCategory
// 0x0020 (0x0020 - 0x0000)
struct FortBannerUtilities_GetBannerColorsForCategory final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CategoryRowName;                                   // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortAccountItem*>               BannerColors;                                      // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBannerUtilities_GetBannerColorsForCategory) == 0x000008, "Wrong alignment on FortBannerUtilities_GetBannerColorsForCategory");
static_assert(sizeof(FortBannerUtilities_GetBannerColorsForCategory) == 0x000020, "Wrong size on FortBannerUtilities_GetBannerColorsForCategory");
static_assert(offsetof(FortBannerUtilities_GetBannerColorsForCategory, FortPC) == 0x000000, "Member 'FortBannerUtilities_GetBannerColorsForCategory::FortPC' has a wrong offset!");
static_assert(offsetof(FortBannerUtilities_GetBannerColorsForCategory, CategoryRowName) == 0x000008, "Member 'FortBannerUtilities_GetBannerColorsForCategory::CategoryRowName' has a wrong offset!");
static_assert(offsetof(FortBannerUtilities_GetBannerColorsForCategory, BannerColors) == 0x000010, "Member 'FortBannerUtilities_GetBannerColorsForCategory::BannerColors' has a wrong offset!");

// Function FortniteGame.FortBannerUtilities.GetBannerIconCategoryName
// 0x0020 (0x0020 - 0x0000)
struct FortBannerUtilities_GetBannerIconCategoryName final
{
public:
	class FName                                   CategoryRowName;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBannerUtilities_GetBannerIconCategoryName) == 0x000008, "Wrong alignment on FortBannerUtilities_GetBannerIconCategoryName");
static_assert(sizeof(FortBannerUtilities_GetBannerIconCategoryName) == 0x000020, "Wrong size on FortBannerUtilities_GetBannerIconCategoryName");
static_assert(offsetof(FortBannerUtilities_GetBannerIconCategoryName, CategoryRowName) == 0x000000, "Member 'FortBannerUtilities_GetBannerIconCategoryName::CategoryRowName' has a wrong offset!");
static_assert(offsetof(FortBannerUtilities_GetBannerIconCategoryName, ReturnValue) == 0x000008, "Member 'FortBannerUtilities_GetBannerIconCategoryName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortBannerUtilities.GetBannerIconCategoryRowName
// 0x0010 (0x0010 - 0x0000)
struct FortBannerUtilities_GetBannerIconCategoryRowName final
{
public:
	class FName                                   BannerIconRowName;                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBannerUtilities_GetBannerIconCategoryRowName) == 0x000004, "Wrong alignment on FortBannerUtilities_GetBannerIconCategoryRowName");
static_assert(sizeof(FortBannerUtilities_GetBannerIconCategoryRowName) == 0x000010, "Wrong size on FortBannerUtilities_GetBannerIconCategoryRowName");
static_assert(offsetof(FortBannerUtilities_GetBannerIconCategoryRowName, BannerIconRowName) == 0x000000, "Member 'FortBannerUtilities_GetBannerIconCategoryRowName::BannerIconRowName' has a wrong offset!");
static_assert(offsetof(FortBannerUtilities_GetBannerIconCategoryRowName, ReturnValue) == 0x000008, "Member 'FortBannerUtilities_GetBannerIconCategoryRowName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortBannerUtilities.GetBannerIconItemFromRowName
// 0x0018 (0x0018 - 0x0000)
struct FortBannerUtilities_GetBannerIconItemFromRowName final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BannerIconRowName;                                 // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortHomebaseBannerIconItem*            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBannerUtilities_GetBannerIconItemFromRowName) == 0x000008, "Wrong alignment on FortBannerUtilities_GetBannerIconItemFromRowName");
static_assert(sizeof(FortBannerUtilities_GetBannerIconItemFromRowName) == 0x000018, "Wrong size on FortBannerUtilities_GetBannerIconItemFromRowName");
static_assert(offsetof(FortBannerUtilities_GetBannerIconItemFromRowName, FortPC) == 0x000000, "Member 'FortBannerUtilities_GetBannerIconItemFromRowName::FortPC' has a wrong offset!");
static_assert(offsetof(FortBannerUtilities_GetBannerIconItemFromRowName, BannerIconRowName) == 0x000008, "Member 'FortBannerUtilities_GetBannerIconItemFromRowName::BannerIconRowName' has a wrong offset!");
static_assert(offsetof(FortBannerUtilities_GetBannerIconItemFromRowName, ReturnValue) == 0x000010, "Member 'FortBannerUtilities_GetBannerIconItemFromRowName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortBannerUtilities.GetBannerIconsForCategory
// 0x0020 (0x0020 - 0x0000)
struct FortBannerUtilities_GetBannerIconsForCategory final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CategoryRowName;                                   // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortAccountItem*>               BannerIcons;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBannerUtilities_GetBannerIconsForCategory) == 0x000008, "Wrong alignment on FortBannerUtilities_GetBannerIconsForCategory");
static_assert(sizeof(FortBannerUtilities_GetBannerIconsForCategory) == 0x000020, "Wrong size on FortBannerUtilities_GetBannerIconsForCategory");
static_assert(offsetof(FortBannerUtilities_GetBannerIconsForCategory, FortPC) == 0x000000, "Member 'FortBannerUtilities_GetBannerIconsForCategory::FortPC' has a wrong offset!");
static_assert(offsetof(FortBannerUtilities_GetBannerIconsForCategory, CategoryRowName) == 0x000008, "Member 'FortBannerUtilities_GetBannerIconsForCategory::CategoryRowName' has a wrong offset!");
static_assert(offsetof(FortBannerUtilities_GetBannerIconsForCategory, BannerIcons) == 0x000010, "Member 'FortBannerUtilities_GetBannerIconsForCategory::BannerIcons' has a wrong offset!");

// Function FortniteGame.FortBannerUtilities.GetBannerLargeIconAsset
// 0x0030 (0x0030 - 0x0000)
struct FortBannerUtilities_GetBannerLargeIconAsset final
{
public:
	class UFortHomebaseBannerIconItem*            BannerIcon;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBannerUtilities_GetBannerLargeIconAsset) == 0x000008, "Wrong alignment on FortBannerUtilities_GetBannerLargeIconAsset");
static_assert(sizeof(FortBannerUtilities_GetBannerLargeIconAsset) == 0x000030, "Wrong size on FortBannerUtilities_GetBannerLargeIconAsset");
static_assert(offsetof(FortBannerUtilities_GetBannerLargeIconAsset, BannerIcon) == 0x000000, "Member 'FortBannerUtilities_GetBannerLargeIconAsset::BannerIcon' has a wrong offset!");
static_assert(offsetof(FortBannerUtilities_GetBannerLargeIconAsset, ReturnValue) == 0x000008, "Member 'FortBannerUtilities_GetBannerLargeIconAsset::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortBannerUtilities.GetBannerLargeIconAssetFromRowName
// 0x0030 (0x0030 - 0x0000)
struct FortBannerUtilities_GetBannerLargeIconAssetFromRowName final
{
public:
	class FName                                   BannerIconRowName;                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBannerUtilities_GetBannerLargeIconAssetFromRowName) == 0x000008, "Wrong alignment on FortBannerUtilities_GetBannerLargeIconAssetFromRowName");
static_assert(sizeof(FortBannerUtilities_GetBannerLargeIconAssetFromRowName) == 0x000030, "Wrong size on FortBannerUtilities_GetBannerLargeIconAssetFromRowName");
static_assert(offsetof(FortBannerUtilities_GetBannerLargeIconAssetFromRowName, BannerIconRowName) == 0x000000, "Member 'FortBannerUtilities_GetBannerLargeIconAssetFromRowName::BannerIconRowName' has a wrong offset!");
static_assert(offsetof(FortBannerUtilities_GetBannerLargeIconAssetFromRowName, ReturnValue) == 0x000008, "Member 'FortBannerUtilities_GetBannerLargeIconAssetFromRowName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortBannerUtilities.GetBannerSmallIconAsset
// 0x0030 (0x0030 - 0x0000)
struct FortBannerUtilities_GetBannerSmallIconAsset final
{
public:
	class UFortHomebaseBannerIconItem*            BannerIcon;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBannerUtilities_GetBannerSmallIconAsset) == 0x000008, "Wrong alignment on FortBannerUtilities_GetBannerSmallIconAsset");
static_assert(sizeof(FortBannerUtilities_GetBannerSmallIconAsset) == 0x000030, "Wrong size on FortBannerUtilities_GetBannerSmallIconAsset");
static_assert(offsetof(FortBannerUtilities_GetBannerSmallIconAsset, BannerIcon) == 0x000000, "Member 'FortBannerUtilities_GetBannerSmallIconAsset::BannerIcon' has a wrong offset!");
static_assert(offsetof(FortBannerUtilities_GetBannerSmallIconAsset, ReturnValue) == 0x000008, "Member 'FortBannerUtilities_GetBannerSmallIconAsset::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortBannerUtilities.GetBannerSmallIconAssetFromRowName
// 0x0030 (0x0030 - 0x0000)
struct FortBannerUtilities_GetBannerSmallIconAssetFromRowName final
{
public:
	class FName                                   BannerIconRowName;                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBannerUtilities_GetBannerSmallIconAssetFromRowName) == 0x000008, "Wrong alignment on FortBannerUtilities_GetBannerSmallIconAssetFromRowName");
static_assert(sizeof(FortBannerUtilities_GetBannerSmallIconAssetFromRowName) == 0x000030, "Wrong size on FortBannerUtilities_GetBannerSmallIconAssetFromRowName");
static_assert(offsetof(FortBannerUtilities_GetBannerSmallIconAssetFromRowName, BannerIconRowName) == 0x000000, "Member 'FortBannerUtilities_GetBannerSmallIconAssetFromRowName::BannerIconRowName' has a wrong offset!");
static_assert(offsetof(FortBannerUtilities_GetBannerSmallIconAssetFromRowName, ReturnValue) == 0x000008, "Member 'FortBannerUtilities_GetBannerSmallIconAssetFromRowName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortBannerUtilities.GetPrimaryColor
// 0x0030 (0x0030 - 0x0000)
struct FortBannerUtilities_GetPrimaryColor final
{
public:
	struct FHomebaseBannerColor                   BannerColor;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBannerUtilities_GetPrimaryColor) == 0x000004, "Wrong alignment on FortBannerUtilities_GetPrimaryColor");
static_assert(sizeof(FortBannerUtilities_GetPrimaryColor) == 0x000030, "Wrong size on FortBannerUtilities_GetPrimaryColor");
static_assert(offsetof(FortBannerUtilities_GetPrimaryColor, BannerColor) == 0x000000, "Member 'FortBannerUtilities_GetPrimaryColor::BannerColor' has a wrong offset!");
static_assert(offsetof(FortBannerUtilities_GetPrimaryColor, ReturnValue) == 0x000020, "Member 'FortBannerUtilities_GetPrimaryColor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortBannerUtilities.GetRowNameForBannerColorItem
// 0x0010 (0x0010 - 0x0000)
struct FortBannerUtilities_GetRowNameForBannerColorItem final
{
public:
	class UFortHomebaseBannerColorItem*           BannerColor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBannerUtilities_GetRowNameForBannerColorItem) == 0x000008, "Wrong alignment on FortBannerUtilities_GetRowNameForBannerColorItem");
static_assert(sizeof(FortBannerUtilities_GetRowNameForBannerColorItem) == 0x000010, "Wrong size on FortBannerUtilities_GetRowNameForBannerColorItem");
static_assert(offsetof(FortBannerUtilities_GetRowNameForBannerColorItem, BannerColor) == 0x000000, "Member 'FortBannerUtilities_GetRowNameForBannerColorItem::BannerColor' has a wrong offset!");
static_assert(offsetof(FortBannerUtilities_GetRowNameForBannerColorItem, ReturnValue) == 0x000008, "Member 'FortBannerUtilities_GetRowNameForBannerColorItem::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortBannerUtilities.GetRowNameForBannerIconItem
// 0x0010 (0x0010 - 0x0000)
struct FortBannerUtilities_GetRowNameForBannerIconItem final
{
public:
	class UFortHomebaseBannerIconItem*            BannerIcon;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBannerUtilities_GetRowNameForBannerIconItem) == 0x000008, "Wrong alignment on FortBannerUtilities_GetRowNameForBannerIconItem");
static_assert(sizeof(FortBannerUtilities_GetRowNameForBannerIconItem) == 0x000010, "Wrong size on FortBannerUtilities_GetRowNameForBannerIconItem");
static_assert(offsetof(FortBannerUtilities_GetRowNameForBannerIconItem, BannerIcon) == 0x000000, "Member 'FortBannerUtilities_GetRowNameForBannerIconItem::BannerIcon' has a wrong offset!");
static_assert(offsetof(FortBannerUtilities_GetRowNameForBannerIconItem, ReturnValue) == 0x000008, "Member 'FortBannerUtilities_GetRowNameForBannerIconItem::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortBannerUtilities.GetSecondaryColor
// 0x0030 (0x0030 - 0x0000)
struct FortBannerUtilities_GetSecondaryColor final
{
public:
	struct FHomebaseBannerColor                   BannerColor;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBannerUtilities_GetSecondaryColor) == 0x000004, "Wrong alignment on FortBannerUtilities_GetSecondaryColor");
static_assert(sizeof(FortBannerUtilities_GetSecondaryColor) == 0x000030, "Wrong size on FortBannerUtilities_GetSecondaryColor");
static_assert(offsetof(FortBannerUtilities_GetSecondaryColor, BannerColor) == 0x000000, "Member 'FortBannerUtilities_GetSecondaryColor::BannerColor' has a wrong offset!");
static_assert(offsetof(FortBannerUtilities_GetSecondaryColor, ReturnValue) == 0x000020, "Member 'FortBannerUtilities_GetSecondaryColor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortBannerUtilities.LoadAndGetBannerLargeIconFromRowName
// 0x0010 (0x0010 - 0x0000)
struct FortBannerUtilities_LoadAndGetBannerLargeIconFromRowName final
{
public:
	class FName                                   BannerIconRowName;                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBannerUtilities_LoadAndGetBannerLargeIconFromRowName) == 0x000008, "Wrong alignment on FortBannerUtilities_LoadAndGetBannerLargeIconFromRowName");
static_assert(sizeof(FortBannerUtilities_LoadAndGetBannerLargeIconFromRowName) == 0x000010, "Wrong size on FortBannerUtilities_LoadAndGetBannerLargeIconFromRowName");
static_assert(offsetof(FortBannerUtilities_LoadAndGetBannerLargeIconFromRowName, BannerIconRowName) == 0x000000, "Member 'FortBannerUtilities_LoadAndGetBannerLargeIconFromRowName::BannerIconRowName' has a wrong offset!");
static_assert(offsetof(FortBannerUtilities_LoadAndGetBannerLargeIconFromRowName, ReturnValue) == 0x000008, "Member 'FortBannerUtilities_LoadAndGetBannerLargeIconFromRowName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortBlueprintAnalytics.ConstructAnalyticsAttribute
// 0x0060 (0x0060 - 0x0000)
struct FortBlueprintAnalytics_ConstructAnalyticsAttribute final
{
public:
	class FString                                 AttributeName;                                     // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringValue;                                       // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  FGuidValue;                                        // 0x0020(0x0010)(ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntValue;                                          // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatValue;                                        // 0x0034(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BoolValue;                                         // 0x0038(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortAnalyticsEventAttribute           ReturnValue;                                       // 0x0040(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBlueprintAnalytics_ConstructAnalyticsAttribute) == 0x000008, "Wrong alignment on FortBlueprintAnalytics_ConstructAnalyticsAttribute");
static_assert(sizeof(FortBlueprintAnalytics_ConstructAnalyticsAttribute) == 0x000060, "Wrong size on FortBlueprintAnalytics_ConstructAnalyticsAttribute");
static_assert(offsetof(FortBlueprintAnalytics_ConstructAnalyticsAttribute, AttributeName) == 0x000000, "Member 'FortBlueprintAnalytics_ConstructAnalyticsAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_ConstructAnalyticsAttribute, StringValue) == 0x000010, "Member 'FortBlueprintAnalytics_ConstructAnalyticsAttribute::StringValue' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_ConstructAnalyticsAttribute, FGuidValue) == 0x000020, "Member 'FortBlueprintAnalytics_ConstructAnalyticsAttribute::FGuidValue' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_ConstructAnalyticsAttribute, IntValue) == 0x000030, "Member 'FortBlueprintAnalytics_ConstructAnalyticsAttribute::IntValue' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_ConstructAnalyticsAttribute, FloatValue) == 0x000034, "Member 'FortBlueprintAnalytics_ConstructAnalyticsAttribute::FloatValue' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_ConstructAnalyticsAttribute, BoolValue) == 0x000038, "Member 'FortBlueprintAnalytics_ConstructAnalyticsAttribute::BoolValue' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_ConstructAnalyticsAttribute, ReturnValue) == 0x000040, "Member 'FortBlueprintAnalytics_ConstructAnalyticsAttribute::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortBlueprintAnalytics.FireAnalyticsEvent_Blueprint
// 0x0038 (0x0038 - 0x0000)
struct FortBlueprintAnalytics_FireAnalyticsEvent_Blueprint final
{
public:
	const class UObject*                          SourceBp;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAnalyticsEventAttribute           Attribute;                                         // 0x0018(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBlueprintAnalytics_FireAnalyticsEvent_Blueprint) == 0x000008, "Wrong alignment on FortBlueprintAnalytics_FireAnalyticsEvent_Blueprint");
static_assert(sizeof(FortBlueprintAnalytics_FireAnalyticsEvent_Blueprint) == 0x000038, "Wrong size on FortBlueprintAnalytics_FireAnalyticsEvent_Blueprint");
static_assert(offsetof(FortBlueprintAnalytics_FireAnalyticsEvent_Blueprint, SourceBp) == 0x000000, "Member 'FortBlueprintAnalytics_FireAnalyticsEvent_Blueprint::SourceBp' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_FireAnalyticsEvent_Blueprint, EventName) == 0x000008, "Member 'FortBlueprintAnalytics_FireAnalyticsEvent_Blueprint::EventName' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_FireAnalyticsEvent_Blueprint, Attribute) == 0x000018, "Member 'FortBlueprintAnalytics_FireAnalyticsEvent_Blueprint::Attribute' has a wrong offset!");

// Function FortniteGame.FortBlueprintAnalytics.FireAnalyticsEvent_BlueprintArray
// 0x0028 (0x0028 - 0x0000)
struct FortBlueprintAnalytics_FireAnalyticsEvent_BlueprintArray final
{
public:
	const class UObject*                          SourceBp;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortAnalyticsEventAttribute>   Attributes;                                        // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBlueprintAnalytics_FireAnalyticsEvent_BlueprintArray) == 0x000008, "Wrong alignment on FortBlueprintAnalytics_FireAnalyticsEvent_BlueprintArray");
static_assert(sizeof(FortBlueprintAnalytics_FireAnalyticsEvent_BlueprintArray) == 0x000028, "Wrong size on FortBlueprintAnalytics_FireAnalyticsEvent_BlueprintArray");
static_assert(offsetof(FortBlueprintAnalytics_FireAnalyticsEvent_BlueprintArray, SourceBp) == 0x000000, "Member 'FortBlueprintAnalytics_FireAnalyticsEvent_BlueprintArray::SourceBp' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_FireAnalyticsEvent_BlueprintArray, EventName) == 0x000008, "Member 'FortBlueprintAnalytics_FireAnalyticsEvent_BlueprintArray::EventName' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_FireAnalyticsEvent_BlueprintArray, Attributes) == 0x000018, "Member 'FortBlueprintAnalytics_FireAnalyticsEvent_BlueprintArray::Attributes' has a wrong offset!");

// Function FortniteGame.FortBlueprintAnalytics.FireEvent_BuildLimitProgressDecremented
// 0x0028 (0x0028 - 0x0000)
struct FortBlueprintAnalytics_FireEvent_BuildLimitProgressDecremented final
{
public:
	const class UObject*                          SourceBp;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            Destroyer;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortMission*                           Mission;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuildingType                             BuildingType;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BuildLimitProgress;                                // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuildLimit;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortBlueprintAnalytics_FireEvent_BuildLimitProgressDecremented) == 0x000008, "Wrong alignment on FortBlueprintAnalytics_FireEvent_BuildLimitProgressDecremented");
static_assert(sizeof(FortBlueprintAnalytics_FireEvent_BuildLimitProgressDecremented) == 0x000028, "Wrong size on FortBlueprintAnalytics_FireEvent_BuildLimitProgressDecremented");
static_assert(offsetof(FortBlueprintAnalytics_FireEvent_BuildLimitProgressDecremented, SourceBp) == 0x000000, "Member 'FortBlueprintAnalytics_FireEvent_BuildLimitProgressDecremented::SourceBp' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_FireEvent_BuildLimitProgressDecremented, Destroyer) == 0x000008, "Member 'FortBlueprintAnalytics_FireEvent_BuildLimitProgressDecremented::Destroyer' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_FireEvent_BuildLimitProgressDecremented, Mission) == 0x000010, "Member 'FortBlueprintAnalytics_FireEvent_BuildLimitProgressDecremented::Mission' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_FireEvent_BuildLimitProgressDecremented, BuildingType) == 0x000018, "Member 'FortBlueprintAnalytics_FireEvent_BuildLimitProgressDecremented::BuildingType' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_FireEvent_BuildLimitProgressDecremented, BuildLimitProgress) == 0x00001C, "Member 'FortBlueprintAnalytics_FireEvent_BuildLimitProgressDecremented::BuildLimitProgress' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_FireEvent_BuildLimitProgressDecremented, BuildLimit) == 0x000020, "Member 'FortBlueprintAnalytics_FireEvent_BuildLimitProgressDecremented::BuildLimit' has a wrong offset!");

// Function FortniteGame.FortBlueprintAnalytics.FireEvent_BuildLimitProgressIncremented
// 0x0028 (0x0028 - 0x0000)
struct FortBlueprintAnalytics_FireEvent_BuildLimitProgressIncremented final
{
public:
	const class UObject*                          SourceBp;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  FortPC;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortMission*                           Mission;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuildingType                             BuildingType;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BuildLimitProgress;                                // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuildLimit;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortBlueprintAnalytics_FireEvent_BuildLimitProgressIncremented) == 0x000008, "Wrong alignment on FortBlueprintAnalytics_FireEvent_BuildLimitProgressIncremented");
static_assert(sizeof(FortBlueprintAnalytics_FireEvent_BuildLimitProgressIncremented) == 0x000028, "Wrong size on FortBlueprintAnalytics_FireEvent_BuildLimitProgressIncremented");
static_assert(offsetof(FortBlueprintAnalytics_FireEvent_BuildLimitProgressIncremented, SourceBp) == 0x000000, "Member 'FortBlueprintAnalytics_FireEvent_BuildLimitProgressIncremented::SourceBp' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_FireEvent_BuildLimitProgressIncremented, FortPC) == 0x000008, "Member 'FortBlueprintAnalytics_FireEvent_BuildLimitProgressIncremented::FortPC' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_FireEvent_BuildLimitProgressIncremented, Mission) == 0x000010, "Member 'FortBlueprintAnalytics_FireEvent_BuildLimitProgressIncremented::Mission' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_FireEvent_BuildLimitProgressIncremented, BuildingType) == 0x000018, "Member 'FortBlueprintAnalytics_FireEvent_BuildLimitProgressIncremented::BuildingType' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_FireEvent_BuildLimitProgressIncremented, BuildLimitProgress) == 0x00001C, "Member 'FortBlueprintAnalytics_FireEvent_BuildLimitProgressIncremented::BuildLimitProgress' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_FireEvent_BuildLimitProgressIncremented, BuildLimit) == 0x000020, "Member 'FortBlueprintAnalytics_FireEvent_BuildLimitProgressIncremented::BuildLimit' has a wrong offset!");

// Function FortniteGame.FortBlueprintAnalytics.FireEvent_MatchmakingClientEnded
// 0x0010 (0x0010 - 0x0000)
struct FortBlueprintAnalytics_FireEvent_MatchmakingClientEnded final
{
public:
	const class UObject*                          SourceBp;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPartyStateIsWorldView;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPartyStateIsTheaterView;                          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPartyStateIsReturningToFrontEnd;                  // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchmakingComplete;                              // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLobbyStarted;                                     // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchmakingCancelled;                             // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortBlueprintAnalytics_FireEvent_MatchmakingClientEnded) == 0x000008, "Wrong alignment on FortBlueprintAnalytics_FireEvent_MatchmakingClientEnded");
static_assert(sizeof(FortBlueprintAnalytics_FireEvent_MatchmakingClientEnded) == 0x000010, "Wrong size on FortBlueprintAnalytics_FireEvent_MatchmakingClientEnded");
static_assert(offsetof(FortBlueprintAnalytics_FireEvent_MatchmakingClientEnded, SourceBp) == 0x000000, "Member 'FortBlueprintAnalytics_FireEvent_MatchmakingClientEnded::SourceBp' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_FireEvent_MatchmakingClientEnded, bPartyStateIsWorldView) == 0x000008, "Member 'FortBlueprintAnalytics_FireEvent_MatchmakingClientEnded::bPartyStateIsWorldView' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_FireEvent_MatchmakingClientEnded, bPartyStateIsTheaterView) == 0x000009, "Member 'FortBlueprintAnalytics_FireEvent_MatchmakingClientEnded::bPartyStateIsTheaterView' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_FireEvent_MatchmakingClientEnded, bPartyStateIsReturningToFrontEnd) == 0x00000A, "Member 'FortBlueprintAnalytics_FireEvent_MatchmakingClientEnded::bPartyStateIsReturningToFrontEnd' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_FireEvent_MatchmakingClientEnded, bMatchmakingComplete) == 0x00000B, "Member 'FortBlueprintAnalytics_FireEvent_MatchmakingClientEnded::bMatchmakingComplete' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_FireEvent_MatchmakingClientEnded, bLobbyStarted) == 0x00000C, "Member 'FortBlueprintAnalytics_FireEvent_MatchmakingClientEnded::bLobbyStarted' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_FireEvent_MatchmakingClientEnded, bMatchmakingCancelled) == 0x00000D, "Member 'FortBlueprintAnalytics_FireEvent_MatchmakingClientEnded::bMatchmakingCancelled' has a wrong offset!");

// Function FortniteGame.FortBlueprintAnalytics.FireEvent_MatchmakingClientStarted
// 0x0010 (0x0010 - 0x0000)
struct FortBlueprintAnalytics_FireEvent_MatchmakingClientStarted final
{
public:
	const class UObject*                          SourceBp;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchmakingStarted;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClientPartyStateMatchmaking;                      // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClientPartyStateChangedPostMatchmaking;           // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortBlueprintAnalytics_FireEvent_MatchmakingClientStarted) == 0x000008, "Wrong alignment on FortBlueprintAnalytics_FireEvent_MatchmakingClientStarted");
static_assert(sizeof(FortBlueprintAnalytics_FireEvent_MatchmakingClientStarted) == 0x000010, "Wrong size on FortBlueprintAnalytics_FireEvent_MatchmakingClientStarted");
static_assert(offsetof(FortBlueprintAnalytics_FireEvent_MatchmakingClientStarted, SourceBp) == 0x000000, "Member 'FortBlueprintAnalytics_FireEvent_MatchmakingClientStarted::SourceBp' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_FireEvent_MatchmakingClientStarted, bMatchmakingStarted) == 0x000008, "Member 'FortBlueprintAnalytics_FireEvent_MatchmakingClientStarted::bMatchmakingStarted' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_FireEvent_MatchmakingClientStarted, bClientPartyStateMatchmaking) == 0x000009, "Member 'FortBlueprintAnalytics_FireEvent_MatchmakingClientStarted::bClientPartyStateMatchmaking' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_FireEvent_MatchmakingClientStarted, bClientPartyStateChangedPostMatchmaking) == 0x00000A, "Member 'FortBlueprintAnalytics_FireEvent_MatchmakingClientStarted::bClientPartyStateChangedPostMatchmaking' has a wrong offset!");

// Function FortniteGame.FortBlueprintAnalytics.FireEvent_MatchmakingClientStatusTextChanged
// 0x0028 (0x0028 - 0x0000)
struct FortBlueprintAnalytics_FireEvent_MatchmakingClientStatusTextChanged final
{
public:
	const class UObject*                          SourceBp;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchmakingIsLocal;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUserIsMatchmaking;                                // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPartyIsPostMatchmaking;                           // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsStormShieldMission;                             // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 QueueState;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMatchmakingState                             MatchmakingState;                                  // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortBlueprintAnalytics_FireEvent_MatchmakingClientStatusTextChanged) == 0x000008, "Wrong alignment on FortBlueprintAnalytics_FireEvent_MatchmakingClientStatusTextChanged");
static_assert(sizeof(FortBlueprintAnalytics_FireEvent_MatchmakingClientStatusTextChanged) == 0x000028, "Wrong size on FortBlueprintAnalytics_FireEvent_MatchmakingClientStatusTextChanged");
static_assert(offsetof(FortBlueprintAnalytics_FireEvent_MatchmakingClientStatusTextChanged, SourceBp) == 0x000000, "Member 'FortBlueprintAnalytics_FireEvent_MatchmakingClientStatusTextChanged::SourceBp' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_FireEvent_MatchmakingClientStatusTextChanged, bMatchmakingIsLocal) == 0x000008, "Member 'FortBlueprintAnalytics_FireEvent_MatchmakingClientStatusTextChanged::bMatchmakingIsLocal' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_FireEvent_MatchmakingClientStatusTextChanged, bUserIsMatchmaking) == 0x000009, "Member 'FortBlueprintAnalytics_FireEvent_MatchmakingClientStatusTextChanged::bUserIsMatchmaking' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_FireEvent_MatchmakingClientStatusTextChanged, bPartyIsPostMatchmaking) == 0x00000A, "Member 'FortBlueprintAnalytics_FireEvent_MatchmakingClientStatusTextChanged::bPartyIsPostMatchmaking' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_FireEvent_MatchmakingClientStatusTextChanged, bIsStormShieldMission) == 0x00000B, "Member 'FortBlueprintAnalytics_FireEvent_MatchmakingClientStatusTextChanged::bIsStormShieldMission' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_FireEvent_MatchmakingClientStatusTextChanged, QueueState) == 0x000010, "Member 'FortBlueprintAnalytics_FireEvent_MatchmakingClientStatusTextChanged::QueueState' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_FireEvent_MatchmakingClientStatusTextChanged, MatchmakingState) == 0x000020, "Member 'FortBlueprintAnalytics_FireEvent_MatchmakingClientStatusTextChanged::MatchmakingState' has a wrong offset!");

// Function FortniteGame.FortBlueprintAnalytics.FireMissionAnalyticsEvent_Blueprint
// 0x0038 (0x0038 - 0x0000)
struct FortBlueprintAnalytics_FireMissionAnalyticsEvent_Blueprint final
{
public:
	const class UObject*                          SourceBp;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAnalyticsEventAttribute           Attribute;                                         // 0x0018(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBlueprintAnalytics_FireMissionAnalyticsEvent_Blueprint) == 0x000008, "Wrong alignment on FortBlueprintAnalytics_FireMissionAnalyticsEvent_Blueprint");
static_assert(sizeof(FortBlueprintAnalytics_FireMissionAnalyticsEvent_Blueprint) == 0x000038, "Wrong size on FortBlueprintAnalytics_FireMissionAnalyticsEvent_Blueprint");
static_assert(offsetof(FortBlueprintAnalytics_FireMissionAnalyticsEvent_Blueprint, SourceBp) == 0x000000, "Member 'FortBlueprintAnalytics_FireMissionAnalyticsEvent_Blueprint::SourceBp' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_FireMissionAnalyticsEvent_Blueprint, EventName) == 0x000008, "Member 'FortBlueprintAnalytics_FireMissionAnalyticsEvent_Blueprint::EventName' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_FireMissionAnalyticsEvent_Blueprint, Attribute) == 0x000018, "Member 'FortBlueprintAnalytics_FireMissionAnalyticsEvent_Blueprint::Attribute' has a wrong offset!");

// Function FortniteGame.FortBlueprintAnalytics.FireMissionAnalyticsEvent_BlueprintArray
// 0x0028 (0x0028 - 0x0000)
struct FortBlueprintAnalytics_FireMissionAnalyticsEvent_BlueprintArray final
{
public:
	const class UObject*                          SourceBp;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortAnalyticsEventAttribute>   Attributes;                                        // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBlueprintAnalytics_FireMissionAnalyticsEvent_BlueprintArray) == 0x000008, "Wrong alignment on FortBlueprintAnalytics_FireMissionAnalyticsEvent_BlueprintArray");
static_assert(sizeof(FortBlueprintAnalytics_FireMissionAnalyticsEvent_BlueprintArray) == 0x000028, "Wrong size on FortBlueprintAnalytics_FireMissionAnalyticsEvent_BlueprintArray");
static_assert(offsetof(FortBlueprintAnalytics_FireMissionAnalyticsEvent_BlueprintArray, SourceBp) == 0x000000, "Member 'FortBlueprintAnalytics_FireMissionAnalyticsEvent_BlueprintArray::SourceBp' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_FireMissionAnalyticsEvent_BlueprintArray, EventName) == 0x000008, "Member 'FortBlueprintAnalytics_FireMissionAnalyticsEvent_BlueprintArray::EventName' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_FireMissionAnalyticsEvent_BlueprintArray, Attributes) == 0x000018, "Member 'FortBlueprintAnalytics_FireMissionAnalyticsEvent_BlueprintArray::Attributes' has a wrong offset!");

// Function FortniteGame.FortBlueprintAnalytics.FireQuestAnalyticsEvent_Blueprint
// 0x0020 (0x0020 - 0x0000)
struct FortBlueprintAnalytics_FireQuestAnalyticsEvent_Blueprint final
{
public:
	const class UObject*                          SourceBp;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortQuestItem*                   Quest;                                             // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBlueprintAnalytics_FireQuestAnalyticsEvent_Blueprint) == 0x000008, "Wrong alignment on FortBlueprintAnalytics_FireQuestAnalyticsEvent_Blueprint");
static_assert(sizeof(FortBlueprintAnalytics_FireQuestAnalyticsEvent_Blueprint) == 0x000020, "Wrong size on FortBlueprintAnalytics_FireQuestAnalyticsEvent_Blueprint");
static_assert(offsetof(FortBlueprintAnalytics_FireQuestAnalyticsEvent_Blueprint, SourceBp) == 0x000000, "Member 'FortBlueprintAnalytics_FireQuestAnalyticsEvent_Blueprint::SourceBp' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_FireQuestAnalyticsEvent_Blueprint, EventName) == 0x000008, "Member 'FortBlueprintAnalytics_FireQuestAnalyticsEvent_Blueprint::EventName' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_FireQuestAnalyticsEvent_Blueprint, Quest) == 0x000018, "Member 'FortBlueprintAnalytics_FireQuestAnalyticsEvent_Blueprint::Quest' has a wrong offset!");

// Function FortniteGame.FortBlueprintAnalytics.FireQuestAnalyticsEvent_BlueprintArray
// 0x0030 (0x0030 - 0x0000)
struct FortBlueprintAnalytics_FireQuestAnalyticsEvent_BlueprintArray final
{
public:
	const class UObject*                          SourceBp;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortQuestItem*                   Quest;                                             // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortAnalyticsEventAttribute>   Attributes;                                        // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBlueprintAnalytics_FireQuestAnalyticsEvent_BlueprintArray) == 0x000008, "Wrong alignment on FortBlueprintAnalytics_FireQuestAnalyticsEvent_BlueprintArray");
static_assert(sizeof(FortBlueprintAnalytics_FireQuestAnalyticsEvent_BlueprintArray) == 0x000030, "Wrong size on FortBlueprintAnalytics_FireQuestAnalyticsEvent_BlueprintArray");
static_assert(offsetof(FortBlueprintAnalytics_FireQuestAnalyticsEvent_BlueprintArray, SourceBp) == 0x000000, "Member 'FortBlueprintAnalytics_FireQuestAnalyticsEvent_BlueprintArray::SourceBp' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_FireQuestAnalyticsEvent_BlueprintArray, EventName) == 0x000008, "Member 'FortBlueprintAnalytics_FireQuestAnalyticsEvent_BlueprintArray::EventName' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_FireQuestAnalyticsEvent_BlueprintArray, Quest) == 0x000018, "Member 'FortBlueprintAnalytics_FireQuestAnalyticsEvent_BlueprintArray::Quest' has a wrong offset!");
static_assert(offsetof(FortBlueprintAnalytics_FireQuestAnalyticsEvent_BlueprintArray, Attributes) == 0x000020, "Member 'FortBlueprintAnalytics_FireQuestAnalyticsEvent_BlueprintArray::Attributes' has a wrong offset!");

// Function FortniteGame.FortOutpostAnalytics.FireAnalyticsEvent_OutpostAttackWaveCompleted
// 0x0038 (0x0038 - 0x0000)
struct FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveCompleted final
{
public:
	const class UObject*                          SourceBp;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BuildingType;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumWavesCompleted;                                 // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Succeeded;                                         // 0x001C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Direction;                                         // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefenseLeg;                                        // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveCompleted) == 0x000008, "Wrong alignment on FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveCompleted");
static_assert(sizeof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveCompleted) == 0x000038, "Wrong size on FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveCompleted");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveCompleted, SourceBp) == 0x000000, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveCompleted::SourceBp' has a wrong offset!");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveCompleted, BuildingType) == 0x000008, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveCompleted::BuildingType' has a wrong offset!");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveCompleted, NumWavesCompleted) == 0x000018, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveCompleted::NumWavesCompleted' has a wrong offset!");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveCompleted, Succeeded) == 0x00001C, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveCompleted::Succeeded' has a wrong offset!");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveCompleted, Direction) == 0x000020, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveCompleted::Direction' has a wrong offset!");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveCompleted, DefenseLeg) == 0x000030, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveCompleted::DefenseLeg' has a wrong offset!");

// Function FortniteGame.FortOutpostAnalytics.FireAnalyticsEvent_OutpostAttackWaveStarted
// 0x0038 (0x0038 - 0x0000)
struct FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveStarted final
{
public:
	const class UObject*                          SourceBp;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BuildingType;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumWavesStarted;                                   // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Direction;                                         // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefenseLeg;                                        // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveStarted) == 0x000008, "Wrong alignment on FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveStarted");
static_assert(sizeof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveStarted) == 0x000038, "Wrong size on FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveStarted");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveStarted, SourceBp) == 0x000000, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveStarted::SourceBp' has a wrong offset!");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveStarted, BuildingType) == 0x000008, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveStarted::BuildingType' has a wrong offset!");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveStarted, NumWavesStarted) == 0x000018, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveStarted::NumWavesStarted' has a wrong offset!");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveStarted, Direction) == 0x000020, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveStarted::Direction' has a wrong offset!");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveStarted, DefenseLeg) == 0x000030, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveStarted::DefenseLeg' has a wrong offset!");

// Function FortniteGame.FortOutpostAnalytics.FireAnalyticsEvent_OutpostBuildingActivated
// 0x0020 (0x0020 - 0x0000)
struct FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingActivated final
{
public:
	const class UObject*                          SourceBp;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BuildingType;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumMissionsCompleted;                              // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingActivated) == 0x000008, "Wrong alignment on FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingActivated");
static_assert(sizeof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingActivated) == 0x000020, "Wrong size on FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingActivated");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingActivated, SourceBp) == 0x000000, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingActivated::SourceBp' has a wrong offset!");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingActivated, BuildingType) == 0x000008, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingActivated::BuildingType' has a wrong offset!");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingActivated, NumMissionsCompleted) == 0x000018, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingActivated::NumMissionsCompleted' has a wrong offset!");

// Function FortniteGame.FortOutpostAnalytics.FireAnalyticsEvent_OutpostBuildingDefended
// 0x0020 (0x0020 - 0x0000)
struct FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingDefended final
{
public:
	const class UObject*                          SourceBp;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BuildingType;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumMissionsCompleted;                              // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingDefended) == 0x000008, "Wrong alignment on FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingDefended");
static_assert(sizeof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingDefended) == 0x000020, "Wrong size on FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingDefended");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingDefended, SourceBp) == 0x000000, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingDefended::SourceBp' has a wrong offset!");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingDefended, BuildingType) == 0x000008, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingDefended::BuildingType' has a wrong offset!");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingDefended, NumMissionsCompleted) == 0x000018, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingDefended::NumMissionsCompleted' has a wrong offset!");

// Function FortniteGame.FortOutpostAnalytics.FireAnalyticsEvent_OutpostDefenseEnd
// 0x0018 (0x0018 - 0x0000)
struct FortOutpostAnalytics_FireAnalyticsEvent_OutpostDefenseEnd final
{
public:
	const class UObject*                          SourceBp;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumWavesStarted;                                   // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumWavesTotal;                                     // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSucceeded;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAbandoned;                                        // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DefenseLeg;                                        // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostDefenseEnd) == 0x000008, "Wrong alignment on FortOutpostAnalytics_FireAnalyticsEvent_OutpostDefenseEnd");
static_assert(sizeof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostDefenseEnd) == 0x000018, "Wrong size on FortOutpostAnalytics_FireAnalyticsEvent_OutpostDefenseEnd");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostDefenseEnd, SourceBp) == 0x000000, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostDefenseEnd::SourceBp' has a wrong offset!");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostDefenseEnd, NumWavesStarted) == 0x000008, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostDefenseEnd::NumWavesStarted' has a wrong offset!");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostDefenseEnd, NumWavesTotal) == 0x00000C, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostDefenseEnd::NumWavesTotal' has a wrong offset!");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostDefenseEnd, bSucceeded) == 0x000010, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostDefenseEnd::bSucceeded' has a wrong offset!");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostDefenseEnd, bAbandoned) == 0x000011, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostDefenseEnd::bAbandoned' has a wrong offset!");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostDefenseEnd, DefenseLeg) == 0x000014, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostDefenseEnd::DefenseLeg' has a wrong offset!");

// Function FortniteGame.FortOutpostAnalytics.FireAnalyticsEvent_OutpostDefenseStart
// 0x0010 (0x0010 - 0x0000)
struct FortOutpostAnalytics_FireAnalyticsEvent_OutpostDefenseStart final
{
public:
	const class UObject*                          SourceBp;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumWavesTotal;                                     // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefenseLeg;                                        // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostDefenseStart) == 0x000008, "Wrong alignment on FortOutpostAnalytics_FireAnalyticsEvent_OutpostDefenseStart");
static_assert(sizeof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostDefenseStart) == 0x000010, "Wrong size on FortOutpostAnalytics_FireAnalyticsEvent_OutpostDefenseStart");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostDefenseStart, SourceBp) == 0x000000, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostDefenseStart::SourceBp' has a wrong offset!");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostDefenseStart, NumWavesTotal) == 0x000008, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostDefenseStart::NumWavesTotal' has a wrong offset!");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostDefenseStart, DefenseLeg) == 0x00000C, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostDefenseStart::DefenseLeg' has a wrong offset!");

// Function FortniteGame.FortOutpostAnalytics.FireAnalyticsEvent_OutpostLeaveOutpost
// 0x0020 (0x0020 - 0x0000)
struct FortOutpostAnalytics_FireAnalyticsEvent_OutpostLeaveOutpost final
{
public:
	const class UObject*                          SourceBp;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BuildingType;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumWavesStarted;                                   // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefenseLeg;                                        // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostLeaveOutpost) == 0x000008, "Wrong alignment on FortOutpostAnalytics_FireAnalyticsEvent_OutpostLeaveOutpost");
static_assert(sizeof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostLeaveOutpost) == 0x000020, "Wrong size on FortOutpostAnalytics_FireAnalyticsEvent_OutpostLeaveOutpost");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostLeaveOutpost, SourceBp) == 0x000000, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostLeaveOutpost::SourceBp' has a wrong offset!");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostLeaveOutpost, BuildingType) == 0x000008, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostLeaveOutpost::BuildingType' has a wrong offset!");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostLeaveOutpost, NumWavesStarted) == 0x000018, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostLeaveOutpost::NumWavesStarted' has a wrong offset!");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostLeaveOutpost, DefenseLeg) == 0x00001C, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostLeaveOutpost::DefenseLeg' has a wrong offset!");

// Function FortniteGame.FortOutpostAnalytics.FireAnalyticsEvent_OutpostLoaded
// 0x0010 (0x0010 - 0x0000)
struct FortOutpostAnalytics_FireAnalyticsEvent_OutpostLoaded final
{
public:
	const class UObject*                          SourceBp;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefenseLeg;                                        // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostLoaded) == 0x000008, "Wrong alignment on FortOutpostAnalytics_FireAnalyticsEvent_OutpostLoaded");
static_assert(sizeof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostLoaded) == 0x000010, "Wrong size on FortOutpostAnalytics_FireAnalyticsEvent_OutpostLoaded");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostLoaded, SourceBp) == 0x000000, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostLoaded::SourceBp' has a wrong offset!");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostLoaded, DefenseLeg) == 0x000008, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostLoaded::DefenseLeg' has a wrong offset!");

// Function FortniteGame.FortOutpostAnalytics.FireAnalyticsEvent_OutpostSupplyDropPickedUp
// 0x0018 (0x0018 - 0x0000)
struct FortOutpostAnalytics_FireAnalyticsEvent_OutpostSupplyDropPickedUp final
{
public:
	const class UObject*                          SourceBp;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortAnalyticsEventAttribute>   Resourcees;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostSupplyDropPickedUp) == 0x000008, "Wrong alignment on FortOutpostAnalytics_FireAnalyticsEvent_OutpostSupplyDropPickedUp");
static_assert(sizeof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostSupplyDropPickedUp) == 0x000018, "Wrong size on FortOutpostAnalytics_FireAnalyticsEvent_OutpostSupplyDropPickedUp");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostSupplyDropPickedUp, SourceBp) == 0x000000, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostSupplyDropPickedUp::SourceBp' has a wrong offset!");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostSupplyDropPickedUp, Resourcees) == 0x000008, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostSupplyDropPickedUp::Resourcees' has a wrong offset!");

// Function FortniteGame.FortBluGloManager.GetBluGloItemDefinition
// 0x0008 (0x0008 - 0x0000)
struct FortBluGloManager_GetBluGloItemDefinition final
{
public:
	class UFortItemDefinition*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBluGloManager_GetBluGloItemDefinition) == 0x000008, "Wrong alignment on FortBluGloManager_GetBluGloItemDefinition");
static_assert(sizeof(FortBluGloManager_GetBluGloItemDefinition) == 0x000008, "Wrong size on FortBluGloManager_GetBluGloItemDefinition");
static_assert(offsetof(FortBluGloManager_GetBluGloItemDefinition, ReturnValue) == 0x000000, "Member 'FortBluGloManager_GetBluGloItemDefinition::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortBotMissionLogic.MarkSingleLocator
// 0x0008 (0x0008 - 0x0000)
struct FortBotMissionLogic_MarkSingleLocator final
{
public:
	const class AActor*                           LocatorActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBotMissionLogic_MarkSingleLocator) == 0x000008, "Wrong alignment on FortBotMissionLogic_MarkSingleLocator");
static_assert(sizeof(FortBotMissionLogic_MarkSingleLocator) == 0x000008, "Wrong size on FortBotMissionLogic_MarkSingleLocator");
static_assert(offsetof(FortBotMissionLogic_MarkSingleLocator, LocatorActor) == 0x000000, "Member 'FortBotMissionLogic_MarkSingleLocator::LocatorActor' has a wrong offset!");

// Function FortniteGame.FortBotMissionLogic.OnAssignedBehavior
// 0x0008 (0x0008 - 0x0000)
struct FortBotMissionLogic_OnAssignedBehavior final
{
public:
	class AFortAIController*                      BotAI;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBotMissionLogic_OnAssignedBehavior) == 0x000008, "Wrong alignment on FortBotMissionLogic_OnAssignedBehavior");
static_assert(sizeof(FortBotMissionLogic_OnAssignedBehavior) == 0x000008, "Wrong size on FortBotMissionLogic_OnAssignedBehavior");
static_assert(offsetof(FortBotMissionLogic_OnAssignedBehavior, BotAI) == 0x000000, "Member 'FortBotMissionLogic_OnAssignedBehavior::BotAI' has a wrong offset!");

// Function FortniteGame.FortBotMissionLogic.OnCanStartOtherMission
// 0x0018 (0x0018 - 0x0000)
struct FortBotMissionLogic_OnCanStartOtherMission final
{
public:
	class AFortAIController*                      BotAI;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortMission*                           OtherMission;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortBotMissionLogic_OnCanStartOtherMission) == 0x000008, "Wrong alignment on FortBotMissionLogic_OnCanStartOtherMission");
static_assert(sizeof(FortBotMissionLogic_OnCanStartOtherMission) == 0x000018, "Wrong size on FortBotMissionLogic_OnCanStartOtherMission");
static_assert(offsetof(FortBotMissionLogic_OnCanStartOtherMission, BotAI) == 0x000000, "Member 'FortBotMissionLogic_OnCanStartOtherMission::BotAI' has a wrong offset!");
static_assert(offsetof(FortBotMissionLogic_OnCanStartOtherMission, OtherMission) == 0x000008, "Member 'FortBotMissionLogic_OnCanStartOtherMission::OtherMission' has a wrong offset!");
static_assert(offsetof(FortBotMissionLogic_OnCanStartOtherMission, ReturnValue) == 0x000010, "Member 'FortBotMissionLogic_OnCanStartOtherMission::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortBotMissionLogic.OnInteractWithMissionGoal
// 0x0018 (0x0018 - 0x0000)
struct FortBotMissionLogic_OnInteractWithMissionGoal final
{
public:
	class AFortAIController*                      BotAI;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 MissionGoal;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortBotMissionLogic_OnInteractWithMissionGoal) == 0x000008, "Wrong alignment on FortBotMissionLogic_OnInteractWithMissionGoal");
static_assert(sizeof(FortBotMissionLogic_OnInteractWithMissionGoal) == 0x000018, "Wrong size on FortBotMissionLogic_OnInteractWithMissionGoal");
static_assert(offsetof(FortBotMissionLogic_OnInteractWithMissionGoal, BotAI) == 0x000000, "Member 'FortBotMissionLogic_OnInteractWithMissionGoal::BotAI' has a wrong offset!");
static_assert(offsetof(FortBotMissionLogic_OnInteractWithMissionGoal, MissionGoal) == 0x000008, "Member 'FortBotMissionLogic_OnInteractWithMissionGoal::MissionGoal' has a wrong offset!");
static_assert(offsetof(FortBotMissionLogic_OnInteractWithMissionGoal, ReturnValue) == 0x000010, "Member 'FortBotMissionLogic_OnInteractWithMissionGoal::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortBotMissionLogic.SetCurrentBehavior
// 0x0008 (0x0008 - 0x0000)
struct FortBotMissionLogic_SetCurrentBehavior final
{
public:
	class UBehaviorTree*                          Behavior;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBotMissionLogic_SetCurrentBehavior) == 0x000008, "Wrong alignment on FortBotMissionLogic_SetCurrentBehavior");
static_assert(sizeof(FortBotMissionLogic_SetCurrentBehavior) == 0x000008, "Wrong size on FortBotMissionLogic_SetCurrentBehavior");
static_assert(offsetof(FortBotMissionLogic_SetCurrentBehavior, Behavior) == 0x000000, "Member 'FortBotMissionLogic_SetCurrentBehavior::Behavior' has a wrong offset!");

// Function FortniteGame.FortBotMissionLogic.SetGoalsInvulnerable
// 0x0001 (0x0001 - 0x0000)
struct FortBotMissionLogic_SetGoalsInvulnerable final
{
public:
	bool                                          bGodMode;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBotMissionLogic_SetGoalsInvulnerable) == 0x000001, "Wrong alignment on FortBotMissionLogic_SetGoalsInvulnerable");
static_assert(sizeof(FortBotMissionLogic_SetGoalsInvulnerable) == 0x000001, "Wrong size on FortBotMissionLogic_SetGoalsInvulnerable");
static_assert(offsetof(FortBotMissionLogic_SetGoalsInvulnerable, bGodMode) == 0x000000, "Member 'FortBotMissionLogic_SetGoalsInvulnerable::bGodMode' has a wrong offset!");

// Function FortniteGame.FortBotMissionLogic.SpawnStructureBuilder
// 0x0018 (0x0018 - 0x0000)
struct FortBotMissionLogic_SpawnStructureBuilder final
{
public:
	class AActor*                                 MissionGoal;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortBuildingInstructions*              BuildingInstructions;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortBotStructureBuilder*               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBotMissionLogic_SpawnStructureBuilder) == 0x000008, "Wrong alignment on FortBotMissionLogic_SpawnStructureBuilder");
static_assert(sizeof(FortBotMissionLogic_SpawnStructureBuilder) == 0x000018, "Wrong size on FortBotMissionLogic_SpawnStructureBuilder");
static_assert(offsetof(FortBotMissionLogic_SpawnStructureBuilder, MissionGoal) == 0x000000, "Member 'FortBotMissionLogic_SpawnStructureBuilder::MissionGoal' has a wrong offset!");
static_assert(offsetof(FortBotMissionLogic_SpawnStructureBuilder, BuildingInstructions) == 0x000008, "Member 'FortBotMissionLogic_SpawnStructureBuilder::BuildingInstructions' has a wrong offset!");
static_assert(offsetof(FortBotMissionLogic_SpawnStructureBuilder, ReturnValue) == 0x000010, "Member 'FortBotMissionLogic_SpawnStructureBuilder::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortBotStructureBuilder.OnBuildingDied
// 0x0050 (0x0050 - 0x0000)
struct FortBotStructureBuilder_OnBuildingDied final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0030(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Momentum;                                          // 0x0040(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortBotStructureBuilder_OnBuildingDied) == 0x000008, "Wrong alignment on FortBotStructureBuilder_OnBuildingDied");
static_assert(sizeof(FortBotStructureBuilder_OnBuildingDied) == 0x000050, "Wrong size on FortBotStructureBuilder_OnBuildingDied");
static_assert(offsetof(FortBotStructureBuilder_OnBuildingDied, DamagedActor) == 0x000000, "Member 'FortBotStructureBuilder_OnBuildingDied::DamagedActor' has a wrong offset!");
static_assert(offsetof(FortBotStructureBuilder_OnBuildingDied, Damage) == 0x000008, "Member 'FortBotStructureBuilder_OnBuildingDied::Damage' has a wrong offset!");
static_assert(offsetof(FortBotStructureBuilder_OnBuildingDied, InstigatedBy) == 0x000010, "Member 'FortBotStructureBuilder_OnBuildingDied::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortBotStructureBuilder_OnBuildingDied, DamageCauser) == 0x000018, "Member 'FortBotStructureBuilder_OnBuildingDied::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortBotStructureBuilder_OnBuildingDied, HitLocation) == 0x000020, "Member 'FortBotStructureBuilder_OnBuildingDied::HitLocation' has a wrong offset!");
static_assert(offsetof(FortBotStructureBuilder_OnBuildingDied, FHitComponent) == 0x000030, "Member 'FortBotStructureBuilder_OnBuildingDied::FHitComponent' has a wrong offset!");
static_assert(offsetof(FortBotStructureBuilder_OnBuildingDied, BoneName) == 0x000038, "Member 'FortBotStructureBuilder_OnBuildingDied::BoneName' has a wrong offset!");
static_assert(offsetof(FortBotStructureBuilder_OnBuildingDied, Momentum) == 0x000040, "Member 'FortBotStructureBuilder_OnBuildingDied::Momentum' has a wrong offset!");

// Function FortniteGame.FortGameState.Client_InitiateEndOfDayRecap
// 0x0020 (0x0020 - 0x0000)
struct FortGameState_Client_InitiateEndOfDayRecap final
{
public:
	struct FEndOfDayRecap                         EndOfDayRecap;                                     // 0x0000(0x0020)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameState_Client_InitiateEndOfDayRecap) == 0x000008, "Wrong alignment on FortGameState_Client_InitiateEndOfDayRecap");
static_assert(sizeof(FortGameState_Client_InitiateEndOfDayRecap) == 0x000020, "Wrong size on FortGameState_Client_InitiateEndOfDayRecap");
static_assert(offsetof(FortGameState_Client_InitiateEndOfDayRecap, EndOfDayRecap) == 0x000000, "Member 'FortGameState_Client_InitiateEndOfDayRecap::EndOfDayRecap' has a wrong offset!");

// Function FortniteGame.FortGameState.GetGameplayState
// 0x0001 (0x0001 - 0x0000)
struct FortGameState_GetGameplayState final
{
public:
	EFortGameplayState                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameState_GetGameplayState) == 0x000001, "Wrong alignment on FortGameState_GetGameplayState");
static_assert(sizeof(FortGameState_GetGameplayState) == 0x000001, "Wrong size on FortGameState_GetGameplayState");
static_assert(offsetof(FortGameState_GetGameplayState, ReturnValue) == 0x000000, "Member 'FortGameState_GetGameplayState::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameState.GetTimeOfDayManager
// 0x0008 (0x0008 - 0x0000)
struct FortGameState_GetTimeOfDayManager final
{
public:
	class AFortTimeOfDayManager*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameState_GetTimeOfDayManager) == 0x000008, "Wrong alignment on FortGameState_GetTimeOfDayManager");
static_assert(sizeof(FortGameState_GetTimeOfDayManager) == 0x000008, "Wrong size on FortGameState_GetTimeOfDayManager");
static_assert(offsetof(FortGameState_GetTimeOfDayManager, ReturnValue) == 0x000000, "Member 'FortGameState_GetTimeOfDayManager::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameState.GetWorldDaysElapsed
// 0x0004 (0x0004 - 0x0000)
struct FortGameState_GetWorldDaysElapsed final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameState_GetWorldDaysElapsed) == 0x000004, "Wrong alignment on FortGameState_GetWorldDaysElapsed");
static_assert(sizeof(FortGameState_GetWorldDaysElapsed) == 0x000004, "Wrong size on FortGameState_GetWorldDaysElapsed");
static_assert(offsetof(FortGameState_GetWorldDaysElapsed, ReturnValue) == 0x000000, "Member 'FortGameState_GetWorldDaysElapsed::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStateZone.EndGameplayVote
// 0x0004 (0x0004 - 0x0000)
struct FortGameStateZone_EndGameplayVote final
{
public:
	int32                                         VoteResult;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateZone_EndGameplayVote) == 0x000004, "Wrong alignment on FortGameStateZone_EndGameplayVote");
static_assert(sizeof(FortGameStateZone_EndGameplayVote) == 0x000004, "Wrong size on FortGameStateZone_EndGameplayVote");
static_assert(offsetof(FortGameStateZone_EndGameplayVote, VoteResult) == 0x000000, "Member 'FortGameStateZone_EndGameplayVote::VoteResult' has a wrong offset!");

// Function FortniteGame.FortGameStateZone.GetUIMapManager
// 0x0008 (0x0008 - 0x0000)
struct FortGameStateZone_GetUIMapManager final
{
public:
	class AFortInGameMapManager*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateZone_GetUIMapManager) == 0x000008, "Wrong alignment on FortGameStateZone_GetUIMapManager");
static_assert(sizeof(FortGameStateZone_GetUIMapManager) == 0x000008, "Wrong size on FortGameStateZone_GetUIMapManager");
static_assert(offsetof(FortGameStateZone_GetUIMapManager, ReturnValue) == 0x000000, "Member 'FortGameStateZone_GetUIMapManager::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStateZone.GloballyBlockAbilitiesWithTags
// 0x0020 (0x0020 - 0x0000)
struct FortGameStateZone_GloballyBlockAbilitiesWithTags final
{
public:
	struct FGameplayTagContainer                  TagsToBlock;                                       // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateZone_GloballyBlockAbilitiesWithTags) == 0x000008, "Wrong alignment on FortGameStateZone_GloballyBlockAbilitiesWithTags");
static_assert(sizeof(FortGameStateZone_GloballyBlockAbilitiesWithTags) == 0x000020, "Wrong size on FortGameStateZone_GloballyBlockAbilitiesWithTags");
static_assert(offsetof(FortGameStateZone_GloballyBlockAbilitiesWithTags, TagsToBlock) == 0x000000, "Member 'FortGameStateZone_GloballyBlockAbilitiesWithTags::TagsToBlock' has a wrong offset!");

// Function FortniteGame.FortGameStateZone.GloballyUnblockAbilitiesWithTags
// 0x0020 (0x0020 - 0x0000)
struct FortGameStateZone_GloballyUnblockAbilitiesWithTags final
{
public:
	struct FGameplayTagContainer                  TagsToUnblock;                                     // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateZone_GloballyUnblockAbilitiesWithTags) == 0x000008, "Wrong alignment on FortGameStateZone_GloballyUnblockAbilitiesWithTags");
static_assert(sizeof(FortGameStateZone_GloballyUnblockAbilitiesWithTags) == 0x000020, "Wrong size on FortGameStateZone_GloballyUnblockAbilitiesWithTags");
static_assert(offsetof(FortGameStateZone_GloballyUnblockAbilitiesWithTags, TagsToUnblock) == 0x000000, "Member 'FortGameStateZone_GloballyUnblockAbilitiesWithTags::TagsToUnblock' has a wrong offset!");

// Function FortniteGame.FortGameStateZone.NotifyEndGameplayVote
// 0x0004 (0x0004 - 0x0000)
struct FortGameStateZone_NotifyEndGameplayVote final
{
public:
	int32                                         VoteResult;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateZone_NotifyEndGameplayVote) == 0x000004, "Wrong alignment on FortGameStateZone_NotifyEndGameplayVote");
static_assert(sizeof(FortGameStateZone_NotifyEndGameplayVote) == 0x000004, "Wrong size on FortGameStateZone_NotifyEndGameplayVote");
static_assert(offsetof(FortGameStateZone_NotifyEndGameplayVote, VoteResult) == 0x000000, "Member 'FortGameStateZone_NotifyEndGameplayVote::VoteResult' has a wrong offset!");

// Function FortniteGame.FortGameStateZone.NotifySurvivorRescued
// 0x0018 (0x0018 - 0x0000)
struct FortGameStateZone_NotifySurvivorRescued final
{
public:
	class AFortPlayerController*                  Rescuer;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SurvivorName;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateZone_NotifySurvivorRescued) == 0x000008, "Wrong alignment on FortGameStateZone_NotifySurvivorRescued");
static_assert(sizeof(FortGameStateZone_NotifySurvivorRescued) == 0x000018, "Wrong size on FortGameStateZone_NotifySurvivorRescued");
static_assert(offsetof(FortGameStateZone_NotifySurvivorRescued, Rescuer) == 0x000000, "Member 'FortGameStateZone_NotifySurvivorRescued::Rescuer' has a wrong offset!");
static_assert(offsetof(FortGameStateZone_NotifySurvivorRescued, SurvivorName) == 0x000008, "Member 'FortGameStateZone_NotifySurvivorRescued::SurvivorName' has a wrong offset!");

// Function FortniteGame.FortGameStateZone.OnDefenderDeployed
// 0x0008 (0x0008 - 0x0000)
struct FortGameStateZone_OnDefenderDeployed final
{
public:
	class AFortAIPawn*                            Defender;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateZone_OnDefenderDeployed) == 0x000008, "Wrong alignment on FortGameStateZone_OnDefenderDeployed");
static_assert(sizeof(FortGameStateZone_OnDefenderDeployed) == 0x000008, "Wrong size on FortGameStateZone_OnDefenderDeployed");
static_assert(offsetof(FortGameStateZone_OnDefenderDeployed, Defender) == 0x000000, "Member 'FortGameStateZone_OnDefenderDeployed::Defender' has a wrong offset!");

// Function FortniteGame.FortGameStateZone.OnDefenderRemoved
// 0x0008 (0x0008 - 0x0000)
struct FortGameStateZone_OnDefenderRemoved final
{
public:
	class AFortAIPawn*                            Defender;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateZone_OnDefenderRemoved) == 0x000008, "Wrong alignment on FortGameStateZone_OnDefenderRemoved");
static_assert(sizeof(FortGameStateZone_OnDefenderRemoved) == 0x000008, "Wrong size on FortGameStateZone_OnDefenderRemoved");
static_assert(offsetof(FortGameStateZone_OnDefenderRemoved, Defender) == 0x000000, "Member 'FortGameStateZone_OnDefenderRemoved::Defender' has a wrong offset!");

// Function FortniteGame.FortGameStateZone.OnWaveBasedModifiersAppliedMulticast
// 0x0010 (0x0010 - 0x0000)
struct FortGameStateZone_OnWaveBasedModifiersAppliedMulticast final
{
public:
	TArray<class UFortGameplayModifierItemDefinition*> ModifiersApplied;                                  // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateZone_OnWaveBasedModifiersAppliedMulticast) == 0x000008, "Wrong alignment on FortGameStateZone_OnWaveBasedModifiersAppliedMulticast");
static_assert(sizeof(FortGameStateZone_OnWaveBasedModifiersAppliedMulticast) == 0x000010, "Wrong size on FortGameStateZone_OnWaveBasedModifiersAppliedMulticast");
static_assert(offsetof(FortGameStateZone_OnWaveBasedModifiersAppliedMulticast, ModifiersApplied) == 0x000000, "Member 'FortGameStateZone_OnWaveBasedModifiersAppliedMulticast::ModifiersApplied' has a wrong offset!");

// Function FortniteGame.FortGameStateZone.OnWaveEncounterStarted
// 0x01A0 (0x01A0 - 0x0000)
struct FortGameStateZone_OnWaveEncounterStarted final
{
public:
	struct FTieredWaveSetData                     WaveData;                                          // 0x0000(0x0160)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   LevelText;                                         // 0x0160(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0178(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   WaveText;                                          // 0x0180(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         WaveNum;                                           // 0x0198(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19C[0x4];                                      // 0x019C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameStateZone_OnWaveEncounterStarted) == 0x000008, "Wrong alignment on FortGameStateZone_OnWaveEncounterStarted");
static_assert(sizeof(FortGameStateZone_OnWaveEncounterStarted) == 0x0001A0, "Wrong size on FortGameStateZone_OnWaveEncounterStarted");
static_assert(offsetof(FortGameStateZone_OnWaveEncounterStarted, WaveData) == 0x000000, "Member 'FortGameStateZone_OnWaveEncounterStarted::WaveData' has a wrong offset!");
static_assert(offsetof(FortGameStateZone_OnWaveEncounterStarted, LevelText) == 0x000160, "Member 'FortGameStateZone_OnWaveEncounterStarted::LevelText' has a wrong offset!");
static_assert(offsetof(FortGameStateZone_OnWaveEncounterStarted, Level) == 0x000178, "Member 'FortGameStateZone_OnWaveEncounterStarted::Level' has a wrong offset!");
static_assert(offsetof(FortGameStateZone_OnWaveEncounterStarted, WaveText) == 0x000180, "Member 'FortGameStateZone_OnWaveEncounterStarted::WaveText' has a wrong offset!");
static_assert(offsetof(FortGameStateZone_OnWaveEncounterStarted, WaveNum) == 0x000198, "Member 'FortGameStateZone_OnWaveEncounterStarted::WaveNum' has a wrong offset!");

// Function FortniteGame.FortGameStateZone.OnWaveStart
// 0x0040 (0x0040 - 0x0000)
struct FortGameStateZone_OnWaveStart final
{
public:
	class FText                                   LevelText;                                         // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   WaveText;                                          // 0x0020(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         WaveNum;                                           // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameStateZone_OnWaveStart) == 0x000008, "Wrong alignment on FortGameStateZone_OnWaveStart");
static_assert(sizeof(FortGameStateZone_OnWaveStart) == 0x000040, "Wrong size on FortGameStateZone_OnWaveStart");
static_assert(offsetof(FortGameStateZone_OnWaveStart, LevelText) == 0x000000, "Member 'FortGameStateZone_OnWaveStart::LevelText' has a wrong offset!");
static_assert(offsetof(FortGameStateZone_OnWaveStart, Level) == 0x000018, "Member 'FortGameStateZone_OnWaveStart::Level' has a wrong offset!");
static_assert(offsetof(FortGameStateZone_OnWaveStart, WaveText) == 0x000020, "Member 'FortGameStateZone_OnWaveStart::WaveText' has a wrong offset!");
static_assert(offsetof(FortGameStateZone_OnWaveStart, WaveNum) == 0x000038, "Member 'FortGameStateZone_OnWaveStart::WaveNum' has a wrong offset!");

// Function FortniteGame.FortGameStateZone.RegisterGameplayModifier
// 0x0010 (0x0010 - 0x0000)
struct FortGameStateZone_RegisterGameplayModifier final
{
public:
	const class UFortGameplayModifierItemDefinition* InModifierToRegister;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Expiration;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActiveGameplayModifierHandle          ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateZone_RegisterGameplayModifier) == 0x000008, "Wrong alignment on FortGameStateZone_RegisterGameplayModifier");
static_assert(sizeof(FortGameStateZone_RegisterGameplayModifier) == 0x000010, "Wrong size on FortGameStateZone_RegisterGameplayModifier");
static_assert(offsetof(FortGameStateZone_RegisterGameplayModifier, InModifierToRegister) == 0x000000, "Member 'FortGameStateZone_RegisterGameplayModifier::InModifierToRegister' has a wrong offset!");
static_assert(offsetof(FortGameStateZone_RegisterGameplayModifier, Expiration) == 0x000008, "Member 'FortGameStateZone_RegisterGameplayModifier::Expiration' has a wrong offset!");
static_assert(offsetof(FortGameStateZone_RegisterGameplayModifier, ReturnValue) == 0x00000C, "Member 'FortGameStateZone_RegisterGameplayModifier::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStateZone.RunPerfMemCheatScript
// 0x0001 (0x0001 - 0x0000)
struct FortGameStateZone_RunPerfMemCheatScript final
{
public:
	bool                                          bStartStatFiles;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateZone_RunPerfMemCheatScript) == 0x000001, "Wrong alignment on FortGameStateZone_RunPerfMemCheatScript");
static_assert(sizeof(FortGameStateZone_RunPerfMemCheatScript) == 0x000001, "Wrong size on FortGameStateZone_RunPerfMemCheatScript");
static_assert(offsetof(FortGameStateZone_RunPerfMemCheatScript, bStartStatFiles) == 0x000000, "Member 'FortGameStateZone_RunPerfMemCheatScript::bStartStatFiles' has a wrong offset!");

// Function FortniteGame.FortGameStateZone.ServerFireAIDirectorEvent
// 0x0020 (0x0020 - 0x0000)
struct FortGameStateZone_ServerFireAIDirectorEvent final
{
public:
	EFortAIDirectorEvent                          Event;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                EventSource;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                EventTarget;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EventMultiplier;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameStateZone_ServerFireAIDirectorEvent) == 0x000008, "Wrong alignment on FortGameStateZone_ServerFireAIDirectorEvent");
static_assert(sizeof(FortGameStateZone_ServerFireAIDirectorEvent) == 0x000020, "Wrong size on FortGameStateZone_ServerFireAIDirectorEvent");
static_assert(offsetof(FortGameStateZone_ServerFireAIDirectorEvent, Event) == 0x000000, "Member 'FortGameStateZone_ServerFireAIDirectorEvent::Event' has a wrong offset!");
static_assert(offsetof(FortGameStateZone_ServerFireAIDirectorEvent, EventSource) == 0x000008, "Member 'FortGameStateZone_ServerFireAIDirectorEvent::EventSource' has a wrong offset!");
static_assert(offsetof(FortGameStateZone_ServerFireAIDirectorEvent, EventTarget) == 0x000010, "Member 'FortGameStateZone_ServerFireAIDirectorEvent::EventTarget' has a wrong offset!");
static_assert(offsetof(FortGameStateZone_ServerFireAIDirectorEvent, EventMultiplier) == 0x000018, "Member 'FortGameStateZone_ServerFireAIDirectorEvent::EventMultiplier' has a wrong offset!");

// Function FortniteGame.FortGameStateZone.ServerFireAIDirectorEventBatch
// 0x0010 (0x0010 - 0x0000)
struct FortGameStateZone_ServerFireAIDirectorEventBatch final
{
public:
	TArray<struct FFortAIDirectorEvent>           Payload;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateZone_ServerFireAIDirectorEventBatch) == 0x000008, "Wrong alignment on FortGameStateZone_ServerFireAIDirectorEventBatch");
static_assert(sizeof(FortGameStateZone_ServerFireAIDirectorEventBatch) == 0x000010, "Wrong size on FortGameStateZone_ServerFireAIDirectorEventBatch");
static_assert(offsetof(FortGameStateZone_ServerFireAIDirectorEventBatch, Payload) == 0x000000, "Member 'FortGameStateZone_ServerFireAIDirectorEventBatch::Payload' has a wrong offset!");

// Function FortniteGame.FortGameStateZone.SetBuildingAllowed
// 0x0002 (0x0002 - 0x0000)
struct FortGameStateZone_SetBuildingAllowed final
{
public:
	bool                                          bBuildingAtLayoutRequirementsAllowed;              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBuildingWithoutLayoutRequirementsAllowed;         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateZone_SetBuildingAllowed) == 0x000001, "Wrong alignment on FortGameStateZone_SetBuildingAllowed");
static_assert(sizeof(FortGameStateZone_SetBuildingAllowed) == 0x000002, "Wrong size on FortGameStateZone_SetBuildingAllowed");
static_assert(offsetof(FortGameStateZone_SetBuildingAllowed, bBuildingAtLayoutRequirementsAllowed) == 0x000000, "Member 'FortGameStateZone_SetBuildingAllowed::bBuildingAtLayoutRequirementsAllowed' has a wrong offset!");
static_assert(offsetof(FortGameStateZone_SetBuildingAllowed, bBuildingWithoutLayoutRequirementsAllowed) == 0x000001, "Member 'FortGameStateZone_SetBuildingAllowed::bBuildingWithoutLayoutRequirementsAllowed' has a wrong offset!");

// Function FortniteGame.FortGameStateZone.SubmitGameplayVote
// 0x0004 (0x0004 - 0x0000)
struct FortGameStateZone_SubmitGameplayVote final
{
public:
	int32                                         VoteDecision;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateZone_SubmitGameplayVote) == 0x000004, "Wrong alignment on FortGameStateZone_SubmitGameplayVote");
static_assert(sizeof(FortGameStateZone_SubmitGameplayVote) == 0x000004, "Wrong size on FortGameStateZone_SubmitGameplayVote");
static_assert(offsetof(FortGameStateZone_SubmitGameplayVote, VoteDecision) == 0x000000, "Member 'FortGameStateZone_SubmitGameplayVote::VoteDecision' has a wrong offset!");

// Function FortniteGame.FortGameStateZone.UnregisterGameplayModifier
// 0x0004 (0x0004 - 0x0000)
struct FortGameStateZone_UnregisterGameplayModifier final
{
public:
	struct FActiveGameplayModifierHandle          InHandleToUnregister;                              // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateZone_UnregisterGameplayModifier) == 0x000004, "Wrong alignment on FortGameStateZone_UnregisterGameplayModifier");
static_assert(sizeof(FortGameStateZone_UnregisterGameplayModifier) == 0x000004, "Wrong size on FortGameStateZone_UnregisterGameplayModifier");
static_assert(offsetof(FortGameStateZone_UnregisterGameplayModifier, InHandleToUnregister) == 0x000000, "Member 'FortGameStateZone_UnregisterGameplayModifier::InHandleToUnregister' has a wrong offset!");

// Function FortniteGame.FortGameStateZone.CanSpawnDefender
// 0x0020 (0x0020 - 0x0000)
struct FortGameStateZone_CanSpawnDefender final
{
public:
	class AFortPlayerStateZone*                   PlayerCausingRemoval;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RemoveFromDefenderSquadId;                         // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortAIPawn*                            OutDefenderToBeRemoved;                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameStateZone_CanSpawnDefender) == 0x000008, "Wrong alignment on FortGameStateZone_CanSpawnDefender");
static_assert(sizeof(FortGameStateZone_CanSpawnDefender) == 0x000020, "Wrong size on FortGameStateZone_CanSpawnDefender");
static_assert(offsetof(FortGameStateZone_CanSpawnDefender, PlayerCausingRemoval) == 0x000000, "Member 'FortGameStateZone_CanSpawnDefender::PlayerCausingRemoval' has a wrong offset!");
static_assert(offsetof(FortGameStateZone_CanSpawnDefender, RemoveFromDefenderSquadId) == 0x000008, "Member 'FortGameStateZone_CanSpawnDefender::RemoveFromDefenderSquadId' has a wrong offset!");
static_assert(offsetof(FortGameStateZone_CanSpawnDefender, OutDefenderToBeRemoved) == 0x000010, "Member 'FortGameStateZone_CanSpawnDefender::OutDefenderToBeRemoved' has a wrong offset!");
static_assert(offsetof(FortGameStateZone_CanSpawnDefender, ReturnValue) == 0x000018, "Member 'FortGameStateZone_CanSpawnDefender::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStateZone.GetActiveModifiers
// 0x0010 (0x0010 - 0x0000)
struct FortGameStateZone_GetActiveModifiers final
{
public:
	TArray<class UFortGameplayModifierItemDefinition*> OutActiveModifiers;                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateZone_GetActiveModifiers) == 0x000008, "Wrong alignment on FortGameStateZone_GetActiveModifiers");
static_assert(sizeof(FortGameStateZone_GetActiveModifiers) == 0x000010, "Wrong size on FortGameStateZone_GetActiveModifiers");
static_assert(offsetof(FortGameStateZone_GetActiveModifiers, OutActiveModifiers) == 0x000000, "Member 'FortGameStateZone_GetActiveModifiers::OutActiveModifiers' has a wrong offset!");

// Function FortniteGame.FortGameStateZone.GetDefenderToRemove
// 0x0020 (0x0020 - 0x0000)
struct FortGameStateZone_GetDefenderToRemove final
{
public:
	class AFortPlayerStateZone*                   PlayerCausingRemoval;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RemoveFromDefenderSquadId;                         // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SimulatedAdditionalDefenders;                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefenderRemovalCausedByPlayerJoin;                // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutCanSpawnDefender;                              // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortAIPawn*                            ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateZone_GetDefenderToRemove) == 0x000008, "Wrong alignment on FortGameStateZone_GetDefenderToRemove");
static_assert(sizeof(FortGameStateZone_GetDefenderToRemove) == 0x000020, "Wrong size on FortGameStateZone_GetDefenderToRemove");
static_assert(offsetof(FortGameStateZone_GetDefenderToRemove, PlayerCausingRemoval) == 0x000000, "Member 'FortGameStateZone_GetDefenderToRemove::PlayerCausingRemoval' has a wrong offset!");
static_assert(offsetof(FortGameStateZone_GetDefenderToRemove, RemoveFromDefenderSquadId) == 0x000008, "Member 'FortGameStateZone_GetDefenderToRemove::RemoveFromDefenderSquadId' has a wrong offset!");
static_assert(offsetof(FortGameStateZone_GetDefenderToRemove, SimulatedAdditionalDefenders) == 0x000010, "Member 'FortGameStateZone_GetDefenderToRemove::SimulatedAdditionalDefenders' has a wrong offset!");
static_assert(offsetof(FortGameStateZone_GetDefenderToRemove, bDefenderRemovalCausedByPlayerJoin) == 0x000014, "Member 'FortGameStateZone_GetDefenderToRemove::bDefenderRemovalCausedByPlayerJoin' has a wrong offset!");
static_assert(offsetof(FortGameStateZone_GetDefenderToRemove, bOutCanSpawnDefender) == 0x000015, "Member 'FortGameStateZone_GetDefenderToRemove::bOutCanSpawnDefender' has a wrong offset!");
static_assert(offsetof(FortGameStateZone_GetDefenderToRemove, ReturnValue) == 0x000018, "Member 'FortGameStateZone_GetDefenderToRemove::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStateZone.GetGameDifficulty
// 0x0004 (0x0004 - 0x0000)
struct FortGameStateZone_GetGameDifficulty final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateZone_GetGameDifficulty) == 0x000004, "Wrong alignment on FortGameStateZone_GetGameDifficulty");
static_assert(sizeof(FortGameStateZone_GetGameDifficulty) == 0x000004, "Wrong size on FortGameStateZone_GetGameDifficulty");
static_assert(offsetof(FortGameStateZone_GetGameDifficulty, ReturnValue) == 0x000000, "Member 'FortGameStateZone_GetGameDifficulty::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStateZone.GetGameplayVote
// 0x0038 (0x0038 - 0x0000)
struct FortGameStateZone_GetGameplayVote final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VoteDecision;                                      // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       PlayerNetId;                                       // 0x0008(0x0028)(Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameStateZone_GetGameplayVote) == 0x000008, "Wrong alignment on FortGameStateZone_GetGameplayVote");
static_assert(sizeof(FortGameStateZone_GetGameplayVote) == 0x000038, "Wrong size on FortGameStateZone_GetGameplayVote");
static_assert(offsetof(FortGameStateZone_GetGameplayVote, Param_Index) == 0x000000, "Member 'FortGameStateZone_GetGameplayVote::Param_Index' has a wrong offset!");
static_assert(offsetof(FortGameStateZone_GetGameplayVote, VoteDecision) == 0x000004, "Member 'FortGameStateZone_GetGameplayVote::VoteDecision' has a wrong offset!");
static_assert(offsetof(FortGameStateZone_GetGameplayVote, PlayerNetId) == 0x000008, "Member 'FortGameStateZone_GetGameplayVote::PlayerNetId' has a wrong offset!");
static_assert(offsetof(FortGameStateZone_GetGameplayVote, ReturnValue) == 0x000030, "Member 'FortGameStateZone_GetGameplayVote::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStateZone.GetGameplayVotesForChoice
// 0x0018 (0x0018 - 0x0000)
struct FortGameStateZone_GetGameplayVotesForChoice final
{
public:
	int32                                         VoteDecision;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FUniqueNetIdRepl>               ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateZone_GetGameplayVotesForChoice) == 0x000008, "Wrong alignment on FortGameStateZone_GetGameplayVotesForChoice");
static_assert(sizeof(FortGameStateZone_GetGameplayVotesForChoice) == 0x000018, "Wrong size on FortGameStateZone_GetGameplayVotesForChoice");
static_assert(offsetof(FortGameStateZone_GetGameplayVotesForChoice, VoteDecision) == 0x000000, "Member 'FortGameStateZone_GetGameplayVotesForChoice::VoteDecision' has a wrong offset!");
static_assert(offsetof(FortGameStateZone_GetGameplayVotesForChoice, ReturnValue) == 0x000008, "Member 'FortGameStateZone_GetGameplayVotesForChoice::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStateZone.GetNumGameplayVotes
// 0x0004 (0x0004 - 0x0000)
struct FortGameStateZone_GetNumGameplayVotes final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateZone_GetNumGameplayVotes) == 0x000004, "Wrong alignment on FortGameStateZone_GetNumGameplayVotes");
static_assert(sizeof(FortGameStateZone_GetNumGameplayVotes) == 0x000004, "Wrong size on FortGameStateZone_GetNumGameplayVotes");
static_assert(offsetof(FortGameStateZone_GetNumGameplayVotes, ReturnValue) == 0x000000, "Member 'FortGameStateZone_GetNumGameplayVotes::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStateZone.GetNumSurvivorsDead
// 0x0004 (0x0004 - 0x0000)
struct FortGameStateZone_GetNumSurvivorsDead final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateZone_GetNumSurvivorsDead) == 0x000004, "Wrong alignment on FortGameStateZone_GetNumSurvivorsDead");
static_assert(sizeof(FortGameStateZone_GetNumSurvivorsDead) == 0x000004, "Wrong size on FortGameStateZone_GetNumSurvivorsDead");
static_assert(offsetof(FortGameStateZone_GetNumSurvivorsDead, ReturnValue) == 0x000000, "Member 'FortGameStateZone_GetNumSurvivorsDead::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStateZone.GetNumSurvivorsRescued
// 0x0004 (0x0004 - 0x0000)
struct FortGameStateZone_GetNumSurvivorsRescued final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateZone_GetNumSurvivorsRescued) == 0x000004, "Wrong alignment on FortGameStateZone_GetNumSurvivorsRescued");
static_assert(sizeof(FortGameStateZone_GetNumSurvivorsRescued) == 0x000004, "Wrong size on FortGameStateZone_GetNumSurvivorsRescued");
static_assert(offsetof(FortGameStateZone_GetNumSurvivorsRescued, ReturnValue) == 0x000000, "Member 'FortGameStateZone_GetNumSurvivorsRescued::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStateZone.GetNumSurvivorsSpawned
// 0x0004 (0x0004 - 0x0000)
struct FortGameStateZone_GetNumSurvivorsSpawned final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateZone_GetNumSurvivorsSpawned) == 0x000004, "Wrong alignment on FortGameStateZone_GetNumSurvivorsSpawned");
static_assert(sizeof(FortGameStateZone_GetNumSurvivorsSpawned) == 0x000004, "Wrong size on FortGameStateZone_GetNumSurvivorsSpawned");
static_assert(offsetof(FortGameStateZone_GetNumSurvivorsSpawned, ReturnValue) == 0x000000, "Member 'FortGameStateZone_GetNumSurvivorsSpawned::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStateZone.GetTotalScore
// 0x0008 (0x0008 - 0x0000)
struct FortGameStateZone_GetTotalScore final
{
public:
	EStatCategory                                 ScoreCategory;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateZone_GetTotalScore) == 0x000004, "Wrong alignment on FortGameStateZone_GetTotalScore");
static_assert(sizeof(FortGameStateZone_GetTotalScore) == 0x000008, "Wrong size on FortGameStateZone_GetTotalScore");
static_assert(offsetof(FortGameStateZone_GetTotalScore, ScoreCategory) == 0x000000, "Member 'FortGameStateZone_GetTotalScore::ScoreCategory' has a wrong offset!");
static_assert(offsetof(FortGameStateZone_GetTotalScore, ReturnValue) == 0x000004, "Member 'FortGameStateZone_GetTotalScore::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStateZone.HasActiveGameplayModifiers
// 0x0001 (0x0001 - 0x0000)
struct FortGameStateZone_HasActiveGameplayModifiers final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateZone_HasActiveGameplayModifiers) == 0x000001, "Wrong alignment on FortGameStateZone_HasActiveGameplayModifiers");
static_assert(sizeof(FortGameStateZone_HasActiveGameplayModifiers) == 0x000001, "Wrong size on FortGameStateZone_HasActiveGameplayModifiers");
static_assert(offsetof(FortGameStateZone_HasActiveGameplayModifiers, ReturnValue) == 0x000000, "Member 'FortGameStateZone_HasActiveGameplayModifiers::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStateZone.IsBuildingAtLayoutRequirementsAllowed
// 0x0001 (0x0001 - 0x0000)
struct FortGameStateZone_IsBuildingAtLayoutRequirementsAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateZone_IsBuildingAtLayoutRequirementsAllowed) == 0x000001, "Wrong alignment on FortGameStateZone_IsBuildingAtLayoutRequirementsAllowed");
static_assert(sizeof(FortGameStateZone_IsBuildingAtLayoutRequirementsAllowed) == 0x000001, "Wrong size on FortGameStateZone_IsBuildingAtLayoutRequirementsAllowed");
static_assert(offsetof(FortGameStateZone_IsBuildingAtLayoutRequirementsAllowed, ReturnValue) == 0x000000, "Member 'FortGameStateZone_IsBuildingAtLayoutRequirementsAllowed::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStateZone.IsBuildingWithoutLayoutRequirementsAllowed
// 0x0001 (0x0001 - 0x0000)
struct FortGameStateZone_IsBuildingWithoutLayoutRequirementsAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateZone_IsBuildingWithoutLayoutRequirementsAllowed) == 0x000001, "Wrong alignment on FortGameStateZone_IsBuildingWithoutLayoutRequirementsAllowed");
static_assert(sizeof(FortGameStateZone_IsBuildingWithoutLayoutRequirementsAllowed) == 0x000001, "Wrong size on FortGameStateZone_IsBuildingWithoutLayoutRequirementsAllowed");
static_assert(offsetof(FortGameStateZone_IsBuildingWithoutLayoutRequirementsAllowed, ReturnValue) == 0x000000, "Member 'FortGameStateZone_IsBuildingWithoutLayoutRequirementsAllowed::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStateZone.IsDefenderItemDeployed
// 0x0018 (0x0018 - 0x0000)
struct FortGameStateZone_IsDefenderItemDeployed final
{
public:
	class UFortItem*                              DefenderItem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerStateZone*                   RequestingPlayer;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameStateZone_IsDefenderItemDeployed) == 0x000008, "Wrong alignment on FortGameStateZone_IsDefenderItemDeployed");
static_assert(sizeof(FortGameStateZone_IsDefenderItemDeployed) == 0x000018, "Wrong size on FortGameStateZone_IsDefenderItemDeployed");
static_assert(offsetof(FortGameStateZone_IsDefenderItemDeployed, DefenderItem) == 0x000000, "Member 'FortGameStateZone_IsDefenderItemDeployed::DefenderItem' has a wrong offset!");
static_assert(offsetof(FortGameStateZone_IsDefenderItemDeployed, RequestingPlayer) == 0x000008, "Member 'FortGameStateZone_IsDefenderItemDeployed::RequestingPlayer' has a wrong offset!");
static_assert(offsetof(FortGameStateZone_IsDefenderItemDeployed, ReturnValue) == 0x000010, "Member 'FortGameStateZone_IsDefenderItemDeployed::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStateZone.ShouldDisablePlayerTeleportingDuringMissionResults
// 0x0001 (0x0001 - 0x0000)
struct FortGameStateZone_ShouldDisablePlayerTeleportingDuringMissionResults final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateZone_ShouldDisablePlayerTeleportingDuringMissionResults) == 0x000001, "Wrong alignment on FortGameStateZone_ShouldDisablePlayerTeleportingDuringMissionResults");
static_assert(sizeof(FortGameStateZone_ShouldDisablePlayerTeleportingDuringMissionResults) == 0x000001, "Wrong size on FortGameStateZone_ShouldDisablePlayerTeleportingDuringMissionResults");
static_assert(offsetof(FortGameStateZone_ShouldDisablePlayerTeleportingDuringMissionResults, ReturnValue) == 0x000000, "Member 'FortGameStateZone_ShouldDisablePlayerTeleportingDuringMissionResults::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStatePvP.GetItemCollector
// 0x0008 (0x0008 - 0x0000)
struct FortGameStatePvP_GetItemCollector final
{
public:
	class ABuildingItemCollectorActor*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStatePvP_GetItemCollector) == 0x000008, "Wrong alignment on FortGameStatePvP_GetItemCollector");
static_assert(sizeof(FortGameStatePvP_GetItemCollector) == 0x000008, "Wrong size on FortGameStatePvP_GetItemCollector");
static_assert(offsetof(FortGameStatePvP_GetItemCollector, ReturnValue) == 0x000000, "Member 'FortGameStatePvP_GetItemCollector::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStatePvP.SetGameDifficultyRow
// 0x0010 (0x0010 - 0x0000)
struct FortGameStatePvP_SetGameDifficultyRow final
{
public:
	struct FDataTableRowHandle                    GameDifficultyInfo;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStatePvP_SetGameDifficultyRow) == 0x000008, "Wrong alignment on FortGameStatePvP_SetGameDifficultyRow");
static_assert(sizeof(FortGameStatePvP_SetGameDifficultyRow) == 0x000010, "Wrong size on FortGameStatePvP_SetGameDifficultyRow");
static_assert(offsetof(FortGameStatePvP_SetGameDifficultyRow, GameDifficultyInfo) == 0x000000, "Member 'FortGameStatePvP_SetGameDifficultyRow::GameDifficultyInfo' has a wrong offset!");

// Function FortniteGame.FortGameStatePvP.SetMatchLevel
// 0x0004 (0x0004 - 0x0000)
struct FortGameStatePvP_SetMatchLevel final
{
public:
	int32                                         InMatchLevel;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStatePvP_SetMatchLevel) == 0x000004, "Wrong alignment on FortGameStatePvP_SetMatchLevel");
static_assert(sizeof(FortGameStatePvP_SetMatchLevel) == 0x000004, "Wrong size on FortGameStatePvP_SetMatchLevel");
static_assert(offsetof(FortGameStatePvP_SetMatchLevel, InMatchLevel) == 0x000000, "Member 'FortGameStatePvP_SetMatchLevel::InMatchLevel' has a wrong offset!");

// Function FortniteGame.FortGameStatePvP.GetAverageHomebaseRating
// 0x0004 (0x0004 - 0x0000)
struct FortGameStatePvP_GetAverageHomebaseRating final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStatePvP_GetAverageHomebaseRating) == 0x000004, "Wrong alignment on FortGameStatePvP_GetAverageHomebaseRating");
static_assert(sizeof(FortGameStatePvP_GetAverageHomebaseRating) == 0x000004, "Wrong size on FortGameStatePvP_GetAverageHomebaseRating");
static_assert(offsetof(FortGameStatePvP_GetAverageHomebaseRating, ReturnValue) == 0x000000, "Member 'FortGameStatePvP_GetAverageHomebaseRating::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStatePvP.GetFOBFinalizationTimeRemaining
// 0x0004 (0x0004 - 0x0000)
struct FortGameStatePvP_GetFOBFinalizationTimeRemaining final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStatePvP_GetFOBFinalizationTimeRemaining) == 0x000004, "Wrong alignment on FortGameStatePvP_GetFOBFinalizationTimeRemaining");
static_assert(sizeof(FortGameStatePvP_GetFOBFinalizationTimeRemaining) == 0x000004, "Wrong size on FortGameStatePvP_GetFOBFinalizationTimeRemaining");
static_assert(offsetof(FortGameStatePvP_GetFOBFinalizationTimeRemaining, ReturnValue) == 0x000000, "Member 'FortGameStatePvP_GetFOBFinalizationTimeRemaining::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStatePvP.GetMatchLevel
// 0x0004 (0x0004 - 0x0000)
struct FortGameStatePvP_GetMatchLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStatePvP_GetMatchLevel) == 0x000004, "Wrong alignment on FortGameStatePvP_GetMatchLevel");
static_assert(sizeof(FortGameStatePvP_GetMatchLevel) == 0x000004, "Wrong size on FortGameStatePvP_GetMatchLevel");
static_assert(offsetof(FortGameStatePvP_GetMatchLevel, ReturnValue) == 0x000000, "Member 'FortGameStatePvP_GetMatchLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStatePvP.GetRoundTimeAccumulated
// 0x0004 (0x0004 - 0x0000)
struct FortGameStatePvP_GetRoundTimeAccumulated final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStatePvP_GetRoundTimeAccumulated) == 0x000004, "Wrong alignment on FortGameStatePvP_GetRoundTimeAccumulated");
static_assert(sizeof(FortGameStatePvP_GetRoundTimeAccumulated) == 0x000004, "Wrong size on FortGameStatePvP_GetRoundTimeAccumulated");
static_assert(offsetof(FortGameStatePvP_GetRoundTimeAccumulated, ReturnValue) == 0x000000, "Member 'FortGameStatePvP_GetRoundTimeAccumulated::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStatePvP.GetStartMatchDelayTimer
// 0x0004 (0x0004 - 0x0000)
struct FortGameStatePvP_GetStartMatchDelayTimer final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStatePvP_GetStartMatchDelayTimer) == 0x000004, "Wrong alignment on FortGameStatePvP_GetStartMatchDelayTimer");
static_assert(sizeof(FortGameStatePvP_GetStartMatchDelayTimer) == 0x000004, "Wrong size on FortGameStatePvP_GetStartMatchDelayTimer");
static_assert(offsetof(FortGameStatePvP_GetStartMatchDelayTimer, ReturnValue) == 0x000000, "Member 'FortGameStatePvP_GetStartMatchDelayTimer::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStatePvP.GetTotalHomebaseRating
// 0x0004 (0x0004 - 0x0000)
struct FortGameStatePvP_GetTotalHomebaseRating final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStatePvP_GetTotalHomebaseRating) == 0x000004, "Wrong alignment on FortGameStatePvP_GetTotalHomebaseRating");
static_assert(sizeof(FortGameStatePvP_GetTotalHomebaseRating) == 0x000004, "Wrong size on FortGameStatePvP_GetTotalHomebaseRating");
static_assert(offsetof(FortGameStatePvP_GetTotalHomebaseRating, ReturnValue) == 0x000000, "Member 'FortGameStatePvP_GetTotalHomebaseRating::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStatePvP.IsExperimentalCraftingFeatureActive
// 0x0001 (0x0001 - 0x0000)
struct FortGameStatePvP_IsExperimentalCraftingFeatureActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStatePvP_IsExperimentalCraftingFeatureActive) == 0x000001, "Wrong alignment on FortGameStatePvP_IsExperimentalCraftingFeatureActive");
static_assert(sizeof(FortGameStatePvP_IsExperimentalCraftingFeatureActive) == 0x000001, "Wrong size on FortGameStatePvP_IsExperimentalCraftingFeatureActive");
static_assert(offsetof(FortGameStatePvP_IsExperimentalCraftingFeatureActive, ReturnValue) == 0x000000, "Member 'FortGameStatePvP_IsExperimentalCraftingFeatureActive::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortLauncherAthena.TriggerLaunchEffects
// 0x0008 (0x0008 - 0x0000)
struct FortLauncherAthena_TriggerLaunchEffects final
{
public:
	class AFortPlayerPawnAthena*                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLauncherAthena_TriggerLaunchEffects) == 0x000008, "Wrong alignment on FortLauncherAthena_TriggerLaunchEffects");
static_assert(sizeof(FortLauncherAthena_TriggerLaunchEffects) == 0x000008, "Wrong size on FortLauncherAthena_TriggerLaunchEffects");
static_assert(offsetof(FortLauncherAthena_TriggerLaunchEffects, Pawn) == 0x000000, "Member 'FortLauncherAthena_TriggerLaunchEffects::Pawn' has a wrong offset!");

// Function FortniteGame.FortBuildingEditedParams.BreakParams
// 0x0020 (0x0020 - 0x0000)
struct FortBuildingEditedParams_BreakParams final
{
public:
	class ABuildingActor*                         _OriginalBuilding;                                 // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABuildingActor*                         _NewBuilding;                                      // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuildingType                             _BuildingType;                                     // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerController*                  _Editor;                                           // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBuildingEditedParams_BreakParams) == 0x000008, "Wrong alignment on FortBuildingEditedParams_BreakParams");
static_assert(sizeof(FortBuildingEditedParams_BreakParams) == 0x000020, "Wrong size on FortBuildingEditedParams_BreakParams");
static_assert(offsetof(FortBuildingEditedParams_BreakParams, _OriginalBuilding) == 0x000000, "Member 'FortBuildingEditedParams_BreakParams::_OriginalBuilding' has a wrong offset!");
static_assert(offsetof(FortBuildingEditedParams_BreakParams, _NewBuilding) == 0x000008, "Member 'FortBuildingEditedParams_BreakParams::_NewBuilding' has a wrong offset!");
static_assert(offsetof(FortBuildingEditedParams_BreakParams, _BuildingType) == 0x000010, "Member 'FortBuildingEditedParams_BreakParams::_BuildingType' has a wrong offset!");
static_assert(offsetof(FortBuildingEditedParams_BreakParams, _Editor) == 0x000018, "Member 'FortBuildingEditedParams_BreakParams::_Editor' has a wrong offset!");

// Function FortniteGame.FortBuildingEditedParams.SetParams
// 0x0028 (0x0028 - 0x0000)
struct FortBuildingEditedParams_SetParams final
{
public:
	class ABuildingActor*                         _OriginalBuilding;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABuildingActor*                         _NewBuilding;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuildingType                             _BuildingType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerController*                  _Editor;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortBuildingEditedParams*              ThisParam;                                         // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBuildingEditedParams_SetParams) == 0x000008, "Wrong alignment on FortBuildingEditedParams_SetParams");
static_assert(sizeof(FortBuildingEditedParams_SetParams) == 0x000028, "Wrong size on FortBuildingEditedParams_SetParams");
static_assert(offsetof(FortBuildingEditedParams_SetParams, _OriginalBuilding) == 0x000000, "Member 'FortBuildingEditedParams_SetParams::_OriginalBuilding' has a wrong offset!");
static_assert(offsetof(FortBuildingEditedParams_SetParams, _NewBuilding) == 0x000008, "Member 'FortBuildingEditedParams_SetParams::_NewBuilding' has a wrong offset!");
static_assert(offsetof(FortBuildingEditedParams_SetParams, _BuildingType) == 0x000010, "Member 'FortBuildingEditedParams_SetParams::_BuildingType' has a wrong offset!");
static_assert(offsetof(FortBuildingEditedParams_SetParams, _Editor) == 0x000018, "Member 'FortBuildingEditedParams_SetParams::_Editor' has a wrong offset!");
static_assert(offsetof(FortBuildingEditedParams_SetParams, ThisParam) == 0x000020, "Member 'FortBuildingEditedParams_SetParams::ThisParam' has a wrong offset!");

// Function FortniteGame.FortLightningActor.GenerateBoltLocations
// 0x0030 (0x0030 - 0x0000)
struct FortLightningActor_GenerateBoltLocations final
{
public:
	struct FVector                                StartLocation;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndLocation;                                       // 0x000C(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinLength;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLength;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomVectorContribution;                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSizeDecayRate;                                  // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSizeDecayRate;                                  // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FalloffMultiplier;                                 // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLightningActor_GenerateBoltLocations) == 0x000004, "Wrong alignment on FortLightningActor_GenerateBoltLocations");
static_assert(sizeof(FortLightningActor_GenerateBoltLocations) == 0x000030, "Wrong size on FortLightningActor_GenerateBoltLocations");
static_assert(offsetof(FortLightningActor_GenerateBoltLocations, StartLocation) == 0x000000, "Member 'FortLightningActor_GenerateBoltLocations::StartLocation' has a wrong offset!");
static_assert(offsetof(FortLightningActor_GenerateBoltLocations, EndLocation) == 0x00000C, "Member 'FortLightningActor_GenerateBoltLocations::EndLocation' has a wrong offset!");
static_assert(offsetof(FortLightningActor_GenerateBoltLocations, MinLength) == 0x000018, "Member 'FortLightningActor_GenerateBoltLocations::MinLength' has a wrong offset!");
static_assert(offsetof(FortLightningActor_GenerateBoltLocations, MaxLength) == 0x00001C, "Member 'FortLightningActor_GenerateBoltLocations::MaxLength' has a wrong offset!");
static_assert(offsetof(FortLightningActor_GenerateBoltLocations, RandomVectorContribution) == 0x000020, "Member 'FortLightningActor_GenerateBoltLocations::RandomVectorContribution' has a wrong offset!");
static_assert(offsetof(FortLightningActor_GenerateBoltLocations, MinSizeDecayRate) == 0x000024, "Member 'FortLightningActor_GenerateBoltLocations::MinSizeDecayRate' has a wrong offset!");
static_assert(offsetof(FortLightningActor_GenerateBoltLocations, MaxSizeDecayRate) == 0x000028, "Member 'FortLightningActor_GenerateBoltLocations::MaxSizeDecayRate' has a wrong offset!");
static_assert(offsetof(FortLightningActor_GenerateBoltLocations, FalloffMultiplier) == 0x00002C, "Member 'FortLightningActor_GenerateBoltLocations::FalloffMultiplier' has a wrong offset!");

// Function FortniteGame.FortLightningActor.InitializeLightning
// 0x0008 (0x0008 - 0x0000)
struct FortLightningActor_InitializeLightning final
{
public:
	class AActor*                                 InActorToNotify;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLightningActor_InitializeLightning) == 0x000008, "Wrong alignment on FortLightningActor_InitializeLightning");
static_assert(sizeof(FortLightningActor_InitializeLightning) == 0x000008, "Wrong size on FortLightningActor_InitializeLightning");
static_assert(offsetof(FortLightningActor_InitializeLightning, InActorToNotify) == 0x000000, "Member 'FortLightningActor_InitializeLightning::InActorToNotify' has a wrong offset!");

// Function FortniteGame.FortCameraBase.Exhibit
// 0x0008 (0x0008 - 0x0000)
struct FortCameraBase_Exhibit final
{
public:
	class AFortExhibitActor*                      TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCameraBase_Exhibit) == 0x000008, "Wrong alignment on FortCameraBase_Exhibit");
static_assert(sizeof(FortCameraBase_Exhibit) == 0x000008, "Wrong size on FortCameraBase_Exhibit");
static_assert(offsetof(FortCameraBase_Exhibit, TargetActor) == 0x000000, "Member 'FortCameraBase_Exhibit::TargetActor' has a wrong offset!");

// Function FortniteGame.FortCardPackItem.GetChoices
// 0x0010 (0x0010 - 0x0000)
struct FortCardPackItem_GetChoices final
{
public:
	TArray<class UFortAccountItemDefinition*>     Choices;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCardPackItem_GetChoices) == 0x000008, "Wrong alignment on FortCardPackItem_GetChoices");
static_assert(sizeof(FortCardPackItem_GetChoices) == 0x000010, "Wrong size on FortCardPackItem_GetChoices");
static_assert(offsetof(FortCardPackItem_GetChoices, Choices) == 0x000000, "Member 'FortCardPackItem_GetChoices::Choices' has a wrong offset!");

// Function FortniteGame.FortCardPackItem.CanStoreOpen
// 0x0001 (0x0001 - 0x0000)
struct FortCardPackItem_CanStoreOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCardPackItem_CanStoreOpen) == 0x000001, "Wrong alignment on FortCardPackItem_CanStoreOpen");
static_assert(sizeof(FortCardPackItem_CanStoreOpen) == 0x000001, "Wrong size on FortCardPackItem_CanStoreOpen");
static_assert(offsetof(FortCardPackItem_CanStoreOpen, ReturnValue) == 0x000000, "Member 'FortCardPackItem_CanStoreOpen::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCardPackItem.IsChoicePack
// 0x0001 (0x0001 - 0x0000)
struct FortCardPackItem_IsChoicePack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCardPackItem_IsChoicePack) == 0x000001, "Wrong alignment on FortCardPackItem_IsChoicePack");
static_assert(sizeof(FortCardPackItem_IsChoicePack) == 0x000001, "Wrong size on FortCardPackItem_IsChoicePack");
static_assert(offsetof(FortCardPackItem_IsChoicePack, ReturnValue) == 0x000000, "Member 'FortCardPackItem_IsChoicePack::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCardPackItemDefinition.GetPackColor
// 0x0010 (0x0010 - 0x0000)
struct FortCardPackItemDefinition_GetPackColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCardPackItemDefinition_GetPackColor) == 0x000004, "Wrong alignment on FortCardPackItemDefinition_GetPackColor");
static_assert(sizeof(FortCardPackItemDefinition_GetPackColor) == 0x000010, "Wrong size on FortCardPackItemDefinition_GetPackColor");
static_assert(offsetof(FortCardPackItemDefinition_GetPackColor, ReturnValue) == 0x000000, "Member 'FortCardPackItemDefinition_GetPackColor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCardPackItemDefinition.GetPackImage
// 0x0008 (0x0008 - 0x0000)
struct FortCardPackItemDefinition_GetPackImage final
{
public:
	class UTexture*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCardPackItemDefinition_GetPackImage) == 0x000008, "Wrong alignment on FortCardPackItemDefinition_GetPackImage");
static_assert(sizeof(FortCardPackItemDefinition_GetPackImage) == 0x000008, "Wrong size on FortCardPackItemDefinition_GetPackImage");
static_assert(offsetof(FortCardPackItemDefinition_GetPackImage, ReturnValue) == 0x000000, "Member 'FortCardPackItemDefinition_GetPackImage::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCardPackItemDefinition.GetPackPersonality
// 0x0008 (0x0008 - 0x0000)
struct FortCardPackItemDefinition_GetPackPersonality final
{
public:
	class UFortPackPersonality*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCardPackItemDefinition_GetPackPersonality) == 0x000008, "Wrong alignment on FortCardPackItemDefinition_GetPackPersonality");
static_assert(sizeof(FortCardPackItemDefinition_GetPackPersonality) == 0x000008, "Wrong size on FortCardPackItemDefinition_GetPackPersonality");
static_assert(offsetof(FortCardPackItemDefinition_GetPackPersonality, ReturnValue) == 0x000000, "Member 'FortCardPackItemDefinition_GetPackPersonality::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCardPackItemDefinition.IsChoicePack
// 0x0001 (0x0001 - 0x0000)
struct FortCardPackItemDefinition_IsChoicePack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCardPackItemDefinition_IsChoicePack) == 0x000001, "Wrong alignment on FortCardPackItemDefinition_IsChoicePack");
static_assert(sizeof(FortCardPackItemDefinition_IsChoicePack) == 0x000001, "Wrong size on FortCardPackItemDefinition_IsChoicePack");
static_assert(offsetof(FortCardPackItemDefinition_IsChoicePack, ReturnValue) == 0x000000, "Member 'FortCardPackItemDefinition_IsChoicePack::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCardPackItemDefinition.IsLlama
// 0x0001 (0x0001 - 0x0000)
struct FortCardPackItemDefinition_IsLlama final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCardPackItemDefinition_IsLlama) == 0x000001, "Wrong alignment on FortCardPackItemDefinition_IsLlama");
static_assert(sizeof(FortCardPackItemDefinition_IsLlama) == 0x000001, "Wrong size on FortCardPackItemDefinition_IsLlama");
static_assert(offsetof(FortCardPackItemDefinition_IsLlama, ReturnValue) == 0x000000, "Member 'FortCardPackItemDefinition_IsLlama::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCarriedObject.OnRep_HolderInfo
// 0x0028 (0x0028 - 0x0000)
struct FortCarriedObject_OnRep_HolderInfo final
{
public:
	struct FCarriedObjectAttachmentInfo           PreviousInfo;                                      // 0x0000(0x0028)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCarriedObject_OnRep_HolderInfo) == 0x000008, "Wrong alignment on FortCarriedObject_OnRep_HolderInfo");
static_assert(sizeof(FortCarriedObject_OnRep_HolderInfo) == 0x000028, "Wrong size on FortCarriedObject_OnRep_HolderInfo");
static_assert(offsetof(FortCarriedObject_OnRep_HolderInfo, PreviousInfo) == 0x000000, "Member 'FortCarriedObject_OnRep_HolderInfo::PreviousInfo' has a wrong offset!");

// Function FortniteGame.FortCarriedObject.GetHoldingActor
// 0x0008 (0x0008 - 0x0000)
struct FortCarriedObject_GetHoldingActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCarriedObject_GetHoldingActor) == 0x000008, "Wrong alignment on FortCarriedObject_GetHoldingActor");
static_assert(sizeof(FortCarriedObject_GetHoldingActor) == 0x000008, "Wrong size on FortCarriedObject_GetHoldingActor");
static_assert(offsetof(FortCarriedObject_GetHoldingActor, ReturnValue) == 0x000000, "Member 'FortCarriedObject_GetHoldingActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCarriedObjectHolderInterface.OnCarriedObjectAttach
// 0x0008 (0x0008 - 0x0000)
struct FortCarriedObjectHolderInterface_OnCarriedObjectAttach final
{
public:
	class AActor*                                 AttachedObject;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCarriedObjectHolderInterface_OnCarriedObjectAttach) == 0x000008, "Wrong alignment on FortCarriedObjectHolderInterface_OnCarriedObjectAttach");
static_assert(sizeof(FortCarriedObjectHolderInterface_OnCarriedObjectAttach) == 0x000008, "Wrong size on FortCarriedObjectHolderInterface_OnCarriedObjectAttach");
static_assert(offsetof(FortCarriedObjectHolderInterface_OnCarriedObjectAttach, AttachedObject) == 0x000000, "Member 'FortCarriedObjectHolderInterface_OnCarriedObjectAttach::AttachedObject' has a wrong offset!");

// Function FortniteGame.FortCarriedObjectHolderInterface.OnCarriedObjectDetach
// 0x0008 (0x0008 - 0x0000)
struct FortCarriedObjectHolderInterface_OnCarriedObjectDetach final
{
public:
	class AActor*                                 DetachedObject;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCarriedObjectHolderInterface_OnCarriedObjectDetach) == 0x000008, "Wrong alignment on FortCarriedObjectHolderInterface_OnCarriedObjectDetach");
static_assert(sizeof(FortCarriedObjectHolderInterface_OnCarriedObjectDetach) == 0x000008, "Wrong size on FortCarriedObjectHolderInterface_OnCarriedObjectDetach");
static_assert(offsetof(FortCarriedObjectHolderInterface_OnCarriedObjectDetach, DetachedObject) == 0x000000, "Member 'FortCarriedObjectHolderInterface_OnCarriedObjectDetach::DetachedObject' has a wrong offset!");

// Function FortniteGame.FortCarriedObjectHolderInterface.CanHoldObject
// 0x0010 (0x0010 - 0x0000)
struct FortCarriedObjectHolderInterface_CanHoldObject final
{
public:
	class AActor*                                 CarriableObject;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCarriedObjectHolderInterface_CanHoldObject) == 0x000008, "Wrong alignment on FortCarriedObjectHolderInterface_CanHoldObject");
static_assert(sizeof(FortCarriedObjectHolderInterface_CanHoldObject) == 0x000010, "Wrong size on FortCarriedObjectHolderInterface_CanHoldObject");
static_assert(offsetof(FortCarriedObjectHolderInterface_CanHoldObject, CarriableObject) == 0x000000, "Member 'FortCarriedObjectHolderInterface_CanHoldObject::CarriableObject' has a wrong offset!");
static_assert(offsetof(FortCarriedObjectHolderInterface_CanHoldObject, ReturnValue) == 0x000008, "Member 'FortCarriedObjectHolderInterface_CanHoldObject::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCarriedObjectHolderInterface.GetAttachmentComponent
// 0x0010 (0x0010 - 0x0000)
struct FortCarriedObjectHolderInterface_GetAttachmentComponent final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCarriedObjectHolderInterface_GetAttachmentComponent) == 0x000008, "Wrong alignment on FortCarriedObjectHolderInterface_GetAttachmentComponent");
static_assert(sizeof(FortCarriedObjectHolderInterface_GetAttachmentComponent) == 0x000010, "Wrong size on FortCarriedObjectHolderInterface_GetAttachmentComponent");
static_assert(offsetof(FortCarriedObjectHolderInterface_GetAttachmentComponent, SocketName) == 0x000000, "Member 'FortCarriedObjectHolderInterface_GetAttachmentComponent::SocketName' has a wrong offset!");
static_assert(offsetof(FortCarriedObjectHolderInterface_GetAttachmentComponent, ReturnValue) == 0x000008, "Member 'FortCarriedObjectHolderInterface_GetAttachmentComponent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCarriedObjectHolderInterface.GetCarriedObjectAttachmentInfo
// 0x0028 (0x0028 - 0x0000)
struct FortCarriedObjectHolderInterface_GetCarriedObjectAttachmentInfo final
{
public:
	struct FCarriedObjectAttachmentInfo           OutAttachInfo;                                     // 0x0000(0x0028)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCarriedObjectHolderInterface_GetCarriedObjectAttachmentInfo) == 0x000008, "Wrong alignment on FortCarriedObjectHolderInterface_GetCarriedObjectAttachmentInfo");
static_assert(sizeof(FortCarriedObjectHolderInterface_GetCarriedObjectAttachmentInfo) == 0x000028, "Wrong size on FortCarriedObjectHolderInterface_GetCarriedObjectAttachmentInfo");
static_assert(offsetof(FortCarriedObjectHolderInterface_GetCarriedObjectAttachmentInfo, OutAttachInfo) == 0x000000, "Member 'FortCarriedObjectHolderInterface_GetCarriedObjectAttachmentInfo::OutAttachInfo' has a wrong offset!");

// Function FortniteGame.FortQueryTwoPointSolver.AddNamedFloatParamA
// 0x0010 (0x0010 - 0x0000)
struct FortQueryTwoPointSolver_AddNamedFloatParamA final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQueryTwoPointSolver_AddNamedFloatParamA) == 0x000004, "Wrong alignment on FortQueryTwoPointSolver_AddNamedFloatParamA");
static_assert(sizeof(FortQueryTwoPointSolver_AddNamedFloatParamA) == 0x000010, "Wrong size on FortQueryTwoPointSolver_AddNamedFloatParamA");
static_assert(offsetof(FortQueryTwoPointSolver_AddNamedFloatParamA, ParamName) == 0x000000, "Member 'FortQueryTwoPointSolver_AddNamedFloatParamA::ParamName' has a wrong offset!");
static_assert(offsetof(FortQueryTwoPointSolver_AddNamedFloatParamA, Value) == 0x000008, "Member 'FortQueryTwoPointSolver_AddNamedFloatParamA::Value' has a wrong offset!");

// Function FortniteGame.FortQueryTwoPointSolver.AddNamedFloatParamB
// 0x0010 (0x0010 - 0x0000)
struct FortQueryTwoPointSolver_AddNamedFloatParamB final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQueryTwoPointSolver_AddNamedFloatParamB) == 0x000004, "Wrong alignment on FortQueryTwoPointSolver_AddNamedFloatParamB");
static_assert(sizeof(FortQueryTwoPointSolver_AddNamedFloatParamB) == 0x000010, "Wrong size on FortQueryTwoPointSolver_AddNamedFloatParamB");
static_assert(offsetof(FortQueryTwoPointSolver_AddNamedFloatParamB, ParamName) == 0x000000, "Member 'FortQueryTwoPointSolver_AddNamedFloatParamB::ParamName' has a wrong offset!");
static_assert(offsetof(FortQueryTwoPointSolver_AddNamedFloatParamB, Value) == 0x000008, "Member 'FortQueryTwoPointSolver_AddNamedFloatParamB::Value' has a wrong offset!");

// Function FortniteGame.FortQueryTwoPointSolver.OnCustomRotationMode
// 0x0018 (0x0018 - 0x0000)
struct FortQueryTwoPointSolver_OnCustomRotationMode final
{
public:
	struct FVector                                PointA;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Querier;                                           // 0x000C(0x000C)(ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQueryTwoPointSolver_OnCustomRotationMode) == 0x000004, "Wrong alignment on FortQueryTwoPointSolver_OnCustomRotationMode");
static_assert(sizeof(FortQueryTwoPointSolver_OnCustomRotationMode) == 0x000018, "Wrong size on FortQueryTwoPointSolver_OnCustomRotationMode");
static_assert(offsetof(FortQueryTwoPointSolver_OnCustomRotationMode, PointA) == 0x000000, "Member 'FortQueryTwoPointSolver_OnCustomRotationMode::PointA' has a wrong offset!");
static_assert(offsetof(FortQueryTwoPointSolver_OnCustomRotationMode, Querier) == 0x00000C, "Member 'FortQueryTwoPointSolver_OnCustomRotationMode::Querier' has a wrong offset!");

// Function FortniteGame.FortQueryTwoPointSolver.SetCustomRotationA
// 0x000C (0x000C - 0x0000)
struct FortQueryTwoPointSolver_SetCustomRotationA final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQueryTwoPointSolver_SetCustomRotationA) == 0x000004, "Wrong alignment on FortQueryTwoPointSolver_SetCustomRotationA");
static_assert(sizeof(FortQueryTwoPointSolver_SetCustomRotationA) == 0x00000C, "Wrong size on FortQueryTwoPointSolver_SetCustomRotationA");
static_assert(offsetof(FortQueryTwoPointSolver_SetCustomRotationA, Rotation) == 0x000000, "Member 'FortQueryTwoPointSolver_SetCustomRotationA::Rotation' has a wrong offset!");

// Function FortniteGame.FortQueryTwoPointSolver.Start
// 0x0008 (0x0008 - 0x0000)
struct FortQueryTwoPointSolver_Start final
{
public:
	class UObject*                                Querier;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQueryTwoPointSolver_Start) == 0x000008, "Wrong alignment on FortQueryTwoPointSolver_Start");
static_assert(sizeof(FortQueryTwoPointSolver_Start) == 0x000008, "Wrong size on FortQueryTwoPointSolver_Start");
static_assert(offsetof(FortQueryTwoPointSolver_Start, Querier) == 0x000000, "Member 'FortQueryTwoPointSolver_Start::Querier' has a wrong offset!");

// Function FortniteGame.FortQueryTwoPointSolver.GetRandomRotationOffset
// 0x000C (0x000C - 0x0000)
struct FortQueryTwoPointSolver_GetRandomRotationOffset final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQueryTwoPointSolver_GetRandomRotationOffset) == 0x000004, "Wrong alignment on FortQueryTwoPointSolver_GetRandomRotationOffset");
static_assert(sizeof(FortQueryTwoPointSolver_GetRandomRotationOffset) == 0x00000C, "Wrong size on FortQueryTwoPointSolver_GetRandomRotationOffset");
static_assert(offsetof(FortQueryTwoPointSolver_GetRandomRotationOffset, ReturnValue) == 0x000000, "Member 'FortQueryTwoPointSolver_GetRandomRotationOffset::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortClientAnnouncement_Basic.OnRep_BasicData
// 0x00D8 (0x00D8 - 0x0000)
struct FortClientAnnouncement_Basic_OnRep_BasicData final
{
public:
	struct FFortClientAnnouncementData_Basic      PreviousBasicData;                                 // 0x0000(0x00D8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortClientAnnouncement_Basic_OnRep_BasicData) == 0x000008, "Wrong alignment on FortClientAnnouncement_Basic_OnRep_BasicData");
static_assert(sizeof(FortClientAnnouncement_Basic_OnRep_BasicData) == 0x0000D8, "Wrong size on FortClientAnnouncement_Basic_OnRep_BasicData");
static_assert(offsetof(FortClientAnnouncement_Basic_OnRep_BasicData, PreviousBasicData) == 0x000000, "Member 'FortClientAnnouncement_Basic_OnRep_BasicData::PreviousBasicData' has a wrong offset!");

// Function FortniteGame.FortClientAnnouncement_Basic.SetDetailText
// 0x0018 (0x0018 - 0x0000)
struct FortClientAnnouncement_Basic_SetDetailText final
{
public:
	class FText                                   DetailText;                                        // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortClientAnnouncement_Basic_SetDetailText) == 0x000008, "Wrong alignment on FortClientAnnouncement_Basic_SetDetailText");
static_assert(sizeof(FortClientAnnouncement_Basic_SetDetailText) == 0x000018, "Wrong size on FortClientAnnouncement_Basic_SetDetailText");
static_assert(offsetof(FortClientAnnouncement_Basic_SetDetailText, DetailText) == 0x000000, "Member 'FortClientAnnouncement_Basic_SetDetailText::DetailText' has a wrong offset!");

// Function FortniteGame.FortClientAnnouncement_Basic.SetDisplayTime
// 0x0004 (0x0004 - 0x0000)
struct FortClientAnnouncement_Basic_SetDisplayTime final
{
public:
	float                                         DisplayTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortClientAnnouncement_Basic_SetDisplayTime) == 0x000004, "Wrong alignment on FortClientAnnouncement_Basic_SetDisplayTime");
static_assert(sizeof(FortClientAnnouncement_Basic_SetDisplayTime) == 0x000004, "Wrong size on FortClientAnnouncement_Basic_SetDisplayTime");
static_assert(offsetof(FortClientAnnouncement_Basic_SetDisplayTime, DisplayTime) == 0x000000, "Member 'FortClientAnnouncement_Basic_SetDisplayTime::DisplayTime' has a wrong offset!");

// Function FortniteGame.FortClientAnnouncement_Basic.SetIcon
// 0x0078 (0x0078 - 0x0000)
struct FortClientAnnouncement_Basic_SetIcon final
{
public:
	struct FSlateBrush                            Icon;                                              // 0x0000(0x0078)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortClientAnnouncement_Basic_SetIcon) == 0x000008, "Wrong alignment on FortClientAnnouncement_Basic_SetIcon");
static_assert(sizeof(FortClientAnnouncement_Basic_SetIcon) == 0x000078, "Wrong size on FortClientAnnouncement_Basic_SetIcon");
static_assert(offsetof(FortClientAnnouncement_Basic_SetIcon, Icon) == 0x000000, "Member 'FortClientAnnouncement_Basic_SetIcon::Icon' has a wrong offset!");

// Function FortniteGame.FortClientAnnouncement_Basic.SetTitleText
// 0x0018 (0x0018 - 0x0000)
struct FortClientAnnouncement_Basic_SetTitleText final
{
public:
	class FText                                   TitleText;                                         // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortClientAnnouncement_Basic_SetTitleText) == 0x000008, "Wrong alignment on FortClientAnnouncement_Basic_SetTitleText");
static_assert(sizeof(FortClientAnnouncement_Basic_SetTitleText) == 0x000018, "Wrong size on FortClientAnnouncement_Basic_SetTitleText");
static_assert(offsetof(FortClientAnnouncement_Basic_SetTitleText, TitleText) == 0x000000, "Member 'FortClientAnnouncement_Basic_SetTitleText::TitleText' has a wrong offset!");

// Function FortniteGame.KeepItemContainer.GetContainerNameAndLevelKey
// 0x0008 (0x0008 - 0x0000)
struct KeepItemContainer_GetContainerNameAndLevelKey final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepItemContainer_GetContainerNameAndLevelKey) == 0x000004, "Wrong alignment on KeepItemContainer_GetContainerNameAndLevelKey");
static_assert(sizeof(KeepItemContainer_GetContainerNameAndLevelKey) == 0x000008, "Wrong size on KeepItemContainer_GetContainerNameAndLevelKey");
static_assert(offsetof(KeepItemContainer_GetContainerNameAndLevelKey, ReturnValue) == 0x000000, "Member 'KeepItemContainer_GetContainerNameAndLevelKey::ReturnValue' has a wrong offset!");

// Function FortniteGame.KeepItemContainer.InitializeContainer
// 0x0004 (0x0004 - 0x0000)
struct KeepItemContainer_InitializeContainer final
{
public:
	int32                                         InitUpgradeLevel;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepItemContainer_InitializeContainer) == 0x000004, "Wrong alignment on KeepItemContainer_InitializeContainer");
static_assert(sizeof(KeepItemContainer_InitializeContainer) == 0x000004, "Wrong size on KeepItemContainer_InitializeContainer");
static_assert(offsetof(KeepItemContainer_InitializeContainer, InitUpgradeLevel) == 0x000000, "Member 'KeepItemContainer_InitializeContainer::InitUpgradeLevel' has a wrong offset!");

// Function FortniteGame.KeepItemContainer.ResetContainer
// 0x0008 (0x0008 - 0x0000)
struct KeepItemContainer_ResetContainer final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepItemContainer_ResetContainer) == 0x000008, "Wrong alignment on KeepItemContainer_ResetContainer");
static_assert(sizeof(KeepItemContainer_ResetContainer) == 0x000008, "Wrong size on KeepItemContainer_ResetContainer");
static_assert(offsetof(KeepItemContainer_ResetContainer, FortPC) == 0x000000, "Member 'KeepItemContainer_ResetContainer::FortPC' has a wrong offset!");

// Function FortniteGame.KeepItemContainer.GetLootTierOverride
// 0x0004 (0x0004 - 0x0000)
struct KeepItemContainer_GetLootTierOverride final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepItemContainer_GetLootTierOverride) == 0x000004, "Wrong alignment on KeepItemContainer_GetLootTierOverride");
static_assert(sizeof(KeepItemContainer_GetLootTierOverride) == 0x000004, "Wrong size on KeepItemContainer_GetLootTierOverride");
static_assert(offsetof(KeepItemContainer_GetLootTierOverride, ReturnValue) == 0x000000, "Member 'KeepItemContainer_GetLootTierOverride::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortClientAnnouncement_ConversationCodeInterface.PlayConversation
// 0x0001 (0x0001 - 0x0000)
struct FortClientAnnouncement_ConversationCodeInterface_PlayConversation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortClientAnnouncement_ConversationCodeInterface_PlayConversation) == 0x000001, "Wrong alignment on FortClientAnnouncement_ConversationCodeInterface_PlayConversation");
static_assert(sizeof(FortClientAnnouncement_ConversationCodeInterface_PlayConversation) == 0x000001, "Wrong size on FortClientAnnouncement_ConversationCodeInterface_PlayConversation");
static_assert(offsetof(FortClientAnnouncement_ConversationCodeInterface_PlayConversation, ReturnValue) == 0x000000, "Member 'FortClientAnnouncement_ConversationCodeInterface_PlayConversation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortClientAnnouncement_ConversationCodeInterface.PlayConversationFromSentence
// 0x00D0 (0x00D0 - 0x0000)
struct FortClientAnnouncement_ConversationCodeInterface_PlayConversationFromSentence final
{
public:
	struct FFortConversationSentence              StartingSentence;                                  // 0x0000(0x00C8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00C8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortClientAnnouncement_ConversationCodeInterface_PlayConversationFromSentence) == 0x000008, "Wrong alignment on FortClientAnnouncement_ConversationCodeInterface_PlayConversationFromSentence");
static_assert(sizeof(FortClientAnnouncement_ConversationCodeInterface_PlayConversationFromSentence) == 0x0000D0, "Wrong size on FortClientAnnouncement_ConversationCodeInterface_PlayConversationFromSentence");
static_assert(offsetof(FortClientAnnouncement_ConversationCodeInterface_PlayConversationFromSentence, StartingSentence) == 0x000000, "Member 'FortClientAnnouncement_ConversationCodeInterface_PlayConversationFromSentence::StartingSentence' has a wrong offset!");
static_assert(offsetof(FortClientAnnouncement_ConversationCodeInterface_PlayConversationFromSentence, ReturnValue) == 0x0000C8, "Member 'FortClientAnnouncement_ConversationCodeInterface_PlayConversationFromSentence::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortClientAnnouncement_ConversationCodeInterface.PlayConversationFromSentenceIndex
// 0x0008 (0x0008 - 0x0000)
struct FortClientAnnouncement_ConversationCodeInterface_PlayConversationFromSentenceIndex final
{
public:
	int32                                         StartingSentenceIndex;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortClientAnnouncement_ConversationCodeInterface_PlayConversationFromSentenceIndex) == 0x000004, "Wrong alignment on FortClientAnnouncement_ConversationCodeInterface_PlayConversationFromSentenceIndex");
static_assert(sizeof(FortClientAnnouncement_ConversationCodeInterface_PlayConversationFromSentenceIndex) == 0x000008, "Wrong size on FortClientAnnouncement_ConversationCodeInterface_PlayConversationFromSentenceIndex");
static_assert(offsetof(FortClientAnnouncement_ConversationCodeInterface_PlayConversationFromSentenceIndex, StartingSentenceIndex) == 0x000000, "Member 'FortClientAnnouncement_ConversationCodeInterface_PlayConversationFromSentenceIndex::StartingSentenceIndex' has a wrong offset!");
static_assert(offsetof(FortClientAnnouncement_ConversationCodeInterface_PlayConversationFromSentenceIndex, ReturnValue) == 0x000004, "Member 'FortClientAnnouncement_ConversationCodeInterface_PlayConversationFromSentenceIndex::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortClientAnnouncement_ConversationCodeInterface.IsPlayingConversation
// 0x0002 (0x0002 - 0x0000)
struct FortClientAnnouncement_ConversationCodeInterface_IsPlayingConversation final
{
public:
	bool                                          bCheckAudioComponent;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortClientAnnouncement_ConversationCodeInterface_IsPlayingConversation) == 0x000001, "Wrong alignment on FortClientAnnouncement_ConversationCodeInterface_IsPlayingConversation");
static_assert(sizeof(FortClientAnnouncement_ConversationCodeInterface_IsPlayingConversation) == 0x000002, "Wrong size on FortClientAnnouncement_ConversationCodeInterface_IsPlayingConversation");
static_assert(offsetof(FortClientAnnouncement_ConversationCodeInterface_IsPlayingConversation, bCheckAudioComponent) == 0x000000, "Member 'FortClientAnnouncement_ConversationCodeInterface_IsPlayingConversation::bCheckAudioComponent' has a wrong offset!");
static_assert(offsetof(FortClientAnnouncement_ConversationCodeInterface_IsPlayingConversation, ReturnValue) == 0x000001, "Member 'FortClientAnnouncement_ConversationCodeInterface_IsPlayingConversation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortClientAnnouncement_ConversationCodeInterface.IsPlayingSentence
// 0x00D0 (0x00D0 - 0x0000)
struct FortClientAnnouncement_ConversationCodeInterface_IsPlayingSentence final
{
public:
	struct FFortConversationSentence              Sentence;                                          // 0x0000(0x00C8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00C8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortClientAnnouncement_ConversationCodeInterface_IsPlayingSentence) == 0x000008, "Wrong alignment on FortClientAnnouncement_ConversationCodeInterface_IsPlayingSentence");
static_assert(sizeof(FortClientAnnouncement_ConversationCodeInterface_IsPlayingSentence) == 0x0000D0, "Wrong size on FortClientAnnouncement_ConversationCodeInterface_IsPlayingSentence");
static_assert(offsetof(FortClientAnnouncement_ConversationCodeInterface_IsPlayingSentence, Sentence) == 0x000000, "Member 'FortClientAnnouncement_ConversationCodeInterface_IsPlayingSentence::Sentence' has a wrong offset!");
static_assert(offsetof(FortClientAnnouncement_ConversationCodeInterface_IsPlayingSentence, ReturnValue) == 0x0000C8, "Member 'FortClientAnnouncement_ConversationCodeInterface_IsPlayingSentence::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortClientAnnouncement_ConversationCodeInterface.IsPlayingSentenceIndex
// 0x0008 (0x0008 - 0x0000)
struct FortClientAnnouncement_ConversationCodeInterface_IsPlayingSentenceIndex final
{
public:
	int32                                         SentenceIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortClientAnnouncement_ConversationCodeInterface_IsPlayingSentenceIndex) == 0x000004, "Wrong alignment on FortClientAnnouncement_ConversationCodeInterface_IsPlayingSentenceIndex");
static_assert(sizeof(FortClientAnnouncement_ConversationCodeInterface_IsPlayingSentenceIndex) == 0x000008, "Wrong size on FortClientAnnouncement_ConversationCodeInterface_IsPlayingSentenceIndex");
static_assert(offsetof(FortClientAnnouncement_ConversationCodeInterface_IsPlayingSentenceIndex, SentenceIndex) == 0x000000, "Member 'FortClientAnnouncement_ConversationCodeInterface_IsPlayingSentenceIndex::SentenceIndex' has a wrong offset!");
static_assert(offsetof(FortClientAnnouncement_ConversationCodeInterface_IsPlayingSentenceIndex, ReturnValue) == 0x000004, "Member 'FortClientAnnouncement_ConversationCodeInterface_IsPlayingSentenceIndex::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortClientAnnouncement_ConversationInterface.OnConversationFinished
// 0x00D0 (0x00D0 - 0x0000)
struct FortClientAnnouncement_ConversationInterface_OnConversationFinished final
{
public:
	struct FFortConversationSentence              FinishingSentence;                                 // 0x0000(0x00C8)(Parm, NativeAccessSpecifierPublic)
	int32                                         FinishingSentenceSentenceIndex;                    // 0x00C8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortClientAnnouncement_ConversationInterface_OnConversationFinished) == 0x000008, "Wrong alignment on FortClientAnnouncement_ConversationInterface_OnConversationFinished");
static_assert(sizeof(FortClientAnnouncement_ConversationInterface_OnConversationFinished) == 0x0000D0, "Wrong size on FortClientAnnouncement_ConversationInterface_OnConversationFinished");
static_assert(offsetof(FortClientAnnouncement_ConversationInterface_OnConversationFinished, FinishingSentence) == 0x000000, "Member 'FortClientAnnouncement_ConversationInterface_OnConversationFinished::FinishingSentence' has a wrong offset!");
static_assert(offsetof(FortClientAnnouncement_ConversationInterface_OnConversationFinished, FinishingSentenceSentenceIndex) == 0x0000C8, "Member 'FortClientAnnouncement_ConversationInterface_OnConversationFinished::FinishingSentenceSentenceIndex' has a wrong offset!");

// Function FortniteGame.FortClientAnnouncement_ConversationInterface.OnConversationStarted
// 0x00D0 (0x00D0 - 0x0000)
struct FortClientAnnouncement_ConversationInterface_OnConversationStarted final
{
public:
	struct FFortConversationSentence              StartingSentence;                                  // 0x0000(0x00C8)(Parm, NativeAccessSpecifierPublic)
	int32                                         StartingSentenceIndex;                             // 0x00C8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortClientAnnouncement_ConversationInterface_OnConversationStarted) == 0x000008, "Wrong alignment on FortClientAnnouncement_ConversationInterface_OnConversationStarted");
static_assert(sizeof(FortClientAnnouncement_ConversationInterface_OnConversationStarted) == 0x0000D0, "Wrong size on FortClientAnnouncement_ConversationInterface_OnConversationStarted");
static_assert(offsetof(FortClientAnnouncement_ConversationInterface_OnConversationStarted, StartingSentence) == 0x000000, "Member 'FortClientAnnouncement_ConversationInterface_OnConversationStarted::StartingSentence' has a wrong offset!");
static_assert(offsetof(FortClientAnnouncement_ConversationInterface_OnConversationStarted, StartingSentenceIndex) == 0x0000C8, "Member 'FortClientAnnouncement_ConversationInterface_OnConversationStarted::StartingSentenceIndex' has a wrong offset!");

// Function FortniteGame.FortClientAnnouncement_ConversationInterface.OnSentenceFinished
// 0x00D0 (0x00D0 - 0x0000)
struct FortClientAnnouncement_ConversationInterface_OnSentenceFinished final
{
public:
	struct FFortConversationSentence              Sentence;                                          // 0x0000(0x00C8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         SentenceIndex;                                     // 0x00C8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortClientAnnouncement_ConversationInterface_OnSentenceFinished) == 0x000008, "Wrong alignment on FortClientAnnouncement_ConversationInterface_OnSentenceFinished");
static_assert(sizeof(FortClientAnnouncement_ConversationInterface_OnSentenceFinished) == 0x0000D0, "Wrong size on FortClientAnnouncement_ConversationInterface_OnSentenceFinished");
static_assert(offsetof(FortClientAnnouncement_ConversationInterface_OnSentenceFinished, Sentence) == 0x000000, "Member 'FortClientAnnouncement_ConversationInterface_OnSentenceFinished::Sentence' has a wrong offset!");
static_assert(offsetof(FortClientAnnouncement_ConversationInterface_OnSentenceFinished, SentenceIndex) == 0x0000C8, "Member 'FortClientAnnouncement_ConversationInterface_OnSentenceFinished::SentenceIndex' has a wrong offset!");

// Function FortniteGame.FortClientAnnouncement_ConversationInterface.OnSentenceStarted
// 0x00D0 (0x00D0 - 0x0000)
struct FortClientAnnouncement_ConversationInterface_OnSentenceStarted final
{
public:
	struct FFortConversationSentence              Sentence;                                          // 0x0000(0x00C8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         SentenceIndex;                                     // 0x00C8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortClientAnnouncement_ConversationInterface_OnSentenceStarted) == 0x000008, "Wrong alignment on FortClientAnnouncement_ConversationInterface_OnSentenceStarted");
static_assert(sizeof(FortClientAnnouncement_ConversationInterface_OnSentenceStarted) == 0x0000D0, "Wrong size on FortClientAnnouncement_ConversationInterface_OnSentenceStarted");
static_assert(offsetof(FortClientAnnouncement_ConversationInterface_OnSentenceStarted, Sentence) == 0x000000, "Member 'FortClientAnnouncement_ConversationInterface_OnSentenceStarted::Sentence' has a wrong offset!");
static_assert(offsetof(FortClientAnnouncement_ConversationInterface_OnSentenceStarted, SentenceIndex) == 0x0000C8, "Member 'FortClientAnnouncement_ConversationInterface_OnSentenceStarted::SentenceIndex' has a wrong offset!");

// Function FortniteGame.FortClientAnnouncement_ConversationInterface.ShouldPlaySentence
// 0x00D0 (0x00D0 - 0x0000)
struct FortClientAnnouncement_ConversationInterface_ShouldPlaySentence final
{
public:
	struct FFortConversationSentence              NewSentence;                                       // 0x0000(0x00C8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00C8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortClientAnnouncement_ConversationInterface_ShouldPlaySentence) == 0x000008, "Wrong alignment on FortClientAnnouncement_ConversationInterface_ShouldPlaySentence");
static_assert(sizeof(FortClientAnnouncement_ConversationInterface_ShouldPlaySentence) == 0x0000D0, "Wrong size on FortClientAnnouncement_ConversationInterface_ShouldPlaySentence");
static_assert(offsetof(FortClientAnnouncement_ConversationInterface_ShouldPlaySentence, NewSentence) == 0x000000, "Member 'FortClientAnnouncement_ConversationInterface_ShouldPlaySentence::NewSentence' has a wrong offset!");
static_assert(offsetof(FortClientAnnouncement_ConversationInterface_ShouldPlaySentence, ReturnValue) == 0x0000C8, "Member 'FortClientAnnouncement_ConversationInterface_ShouldPlaySentence::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortClientAnnouncement_Tutorial.OnRep_TutorialData
// 0x0128 (0x0128 - 0x0000)
struct FortClientAnnouncement_Tutorial_OnRep_TutorialData final
{
public:
	struct FFortClientAnnouncementData_Tutorial   PreviousTutorialData;                              // 0x0000(0x0128)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortClientAnnouncement_Tutorial_OnRep_TutorialData) == 0x000008, "Wrong alignment on FortClientAnnouncement_Tutorial_OnRep_TutorialData");
static_assert(sizeof(FortClientAnnouncement_Tutorial_OnRep_TutorialData) == 0x000128, "Wrong size on FortClientAnnouncement_Tutorial_OnRep_TutorialData");
static_assert(offsetof(FortClientAnnouncement_Tutorial_OnRep_TutorialData, PreviousTutorialData) == 0x000000, "Member 'FortClientAnnouncement_Tutorial_OnRep_TutorialData::PreviousTutorialData' has a wrong offset!");

// Function FortniteGame.FortClientAnnouncement_TutorialConversation.OnRep_TutorialData
// 0x0128 (0x0128 - 0x0000)
struct FortClientAnnouncement_TutorialConversation_OnRep_TutorialData final
{
public:
	struct FFortClientAnnouncementData_Tutorial   PreviousTutorialData;                              // 0x0000(0x0128)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortClientAnnouncement_TutorialConversation_OnRep_TutorialData) == 0x000008, "Wrong alignment on FortClientAnnouncement_TutorialConversation_OnRep_TutorialData");
static_assert(sizeof(FortClientAnnouncement_TutorialConversation_OnRep_TutorialData) == 0x000128, "Wrong size on FortClientAnnouncement_TutorialConversation_OnRep_TutorialData");
static_assert(offsetof(FortClientAnnouncement_TutorialConversation_OnRep_TutorialData, PreviousTutorialData) == 0x000000, "Member 'FortClientAnnouncement_TutorialConversation_OnRep_TutorialData::PreviousTutorialData' has a wrong offset!");

// Function FortniteGame.FortClientAnnouncement_TutorialInterface.SetButtonEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortClientAnnouncement_TutorialInterface_SetButtonEnabled final
{
public:
	bool                                          bButtonEnabled;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortClientAnnouncement_TutorialInterface_SetButtonEnabled) == 0x000001, "Wrong alignment on FortClientAnnouncement_TutorialInterface_SetButtonEnabled");
static_assert(sizeof(FortClientAnnouncement_TutorialInterface_SetButtonEnabled) == 0x000001, "Wrong size on FortClientAnnouncement_TutorialInterface_SetButtonEnabled");
static_assert(offsetof(FortClientAnnouncement_TutorialInterface_SetButtonEnabled, bButtonEnabled) == 0x000000, "Member 'FortClientAnnouncement_TutorialInterface_SetButtonEnabled::bButtonEnabled' has a wrong offset!");

// Function FortniteGame.FortClientAnnouncement_TutorialInterface.SetDetailText
// 0x0018 (0x0018 - 0x0000)
struct FortClientAnnouncement_TutorialInterface_SetDetailText final
{
public:
	class FText                                   NameText;                                          // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortClientAnnouncement_TutorialInterface_SetDetailText) == 0x000008, "Wrong alignment on FortClientAnnouncement_TutorialInterface_SetDetailText");
static_assert(sizeof(FortClientAnnouncement_TutorialInterface_SetDetailText) == 0x000018, "Wrong size on FortClientAnnouncement_TutorialInterface_SetDetailText");
static_assert(offsetof(FortClientAnnouncement_TutorialInterface_SetDetailText, NameText) == 0x000000, "Member 'FortClientAnnouncement_TutorialInterface_SetDetailText::NameText' has a wrong offset!");

// Function FortniteGame.FortClientAnnouncement_TutorialInterface.SetHAlign
// 0x0001 (0x0001 - 0x0000)
struct FortClientAnnouncement_TutorialInterface_SetHAlign final
{
public:
	EHorizontalAlignment                          HAlign;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortClientAnnouncement_TutorialInterface_SetHAlign) == 0x000001, "Wrong alignment on FortClientAnnouncement_TutorialInterface_SetHAlign");
static_assert(sizeof(FortClientAnnouncement_TutorialInterface_SetHAlign) == 0x000001, "Wrong size on FortClientAnnouncement_TutorialInterface_SetHAlign");
static_assert(offsetof(FortClientAnnouncement_TutorialInterface_SetHAlign, HAlign) == 0x000000, "Member 'FortClientAnnouncement_TutorialInterface_SetHAlign::HAlign' has a wrong offset!");

// Function FortniteGame.FortClientAnnouncement_TutorialInterface.SetLightboxDisableInputOnly
// 0x0001 (0x0001 - 0x0000)
struct FortClientAnnouncement_TutorialInterface_SetLightboxDisableInputOnly final
{
public:
	bool                                          bLightboxDisableInputOnly;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortClientAnnouncement_TutorialInterface_SetLightboxDisableInputOnly) == 0x000001, "Wrong alignment on FortClientAnnouncement_TutorialInterface_SetLightboxDisableInputOnly");
static_assert(sizeof(FortClientAnnouncement_TutorialInterface_SetLightboxDisableInputOnly) == 0x000001, "Wrong size on FortClientAnnouncement_TutorialInterface_SetLightboxDisableInputOnly");
static_assert(offsetof(FortClientAnnouncement_TutorialInterface_SetLightboxDisableInputOnly, bLightboxDisableInputOnly) == 0x000000, "Member 'FortClientAnnouncement_TutorialInterface_SetLightboxDisableInputOnly::bLightboxDisableInputOnly' has a wrong offset!");

// Function FortniteGame.FortClientAnnouncement_TutorialInterface.SetLightboxEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortClientAnnouncement_TutorialInterface_SetLightboxEnabled final
{
public:
	bool                                          bLightboxEnabled;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortClientAnnouncement_TutorialInterface_SetLightboxEnabled) == 0x000001, "Wrong alignment on FortClientAnnouncement_TutorialInterface_SetLightboxEnabled");
static_assert(sizeof(FortClientAnnouncement_TutorialInterface_SetLightboxEnabled) == 0x000001, "Wrong size on FortClientAnnouncement_TutorialInterface_SetLightboxEnabled");
static_assert(offsetof(FortClientAnnouncement_TutorialInterface_SetLightboxEnabled, bLightboxEnabled) == 0x000000, "Member 'FortClientAnnouncement_TutorialInterface_SetLightboxEnabled::bLightboxEnabled' has a wrong offset!");

// Function FortniteGame.FortClientAnnouncement_TutorialInterface.SetNameText
// 0x0018 (0x0018 - 0x0000)
struct FortClientAnnouncement_TutorialInterface_SetNameText final
{
public:
	class FText                                   NameText;                                          // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortClientAnnouncement_TutorialInterface_SetNameText) == 0x000008, "Wrong alignment on FortClientAnnouncement_TutorialInterface_SetNameText");
static_assert(sizeof(FortClientAnnouncement_TutorialInterface_SetNameText) == 0x000018, "Wrong size on FortClientAnnouncement_TutorialInterface_SetNameText");
static_assert(offsetof(FortClientAnnouncement_TutorialInterface_SetNameText, NameText) == 0x000000, "Member 'FortClientAnnouncement_TutorialInterface_SetNameText::NameText' has a wrong offset!");

// Function FortniteGame.FortClientAnnouncement_TutorialInterface.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct FortClientAnnouncement_TutorialInterface_SetPadding final
{
public:
	struct FMargin                                Padding;                                           // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortClientAnnouncement_TutorialInterface_SetPadding) == 0x000004, "Wrong alignment on FortClientAnnouncement_TutorialInterface_SetPadding");
static_assert(sizeof(FortClientAnnouncement_TutorialInterface_SetPadding) == 0x000010, "Wrong size on FortClientAnnouncement_TutorialInterface_SetPadding");
static_assert(offsetof(FortClientAnnouncement_TutorialInterface_SetPadding, Padding) == 0x000000, "Member 'FortClientAnnouncement_TutorialInterface_SetPadding::Padding' has a wrong offset!");

// Function FortniteGame.FortClientAnnouncement_TutorialInterface.SetSystemText
// 0x0018 (0x0018 - 0x0000)
struct FortClientAnnouncement_TutorialInterface_SetSystemText final
{
public:
	class FText                                   SystemText;                                        // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortClientAnnouncement_TutorialInterface_SetSystemText) == 0x000008, "Wrong alignment on FortClientAnnouncement_TutorialInterface_SetSystemText");
static_assert(sizeof(FortClientAnnouncement_TutorialInterface_SetSystemText) == 0x000018, "Wrong size on FortClientAnnouncement_TutorialInterface_SetSystemText");
static_assert(offsetof(FortClientAnnouncement_TutorialInterface_SetSystemText, SystemText) == 0x000000, "Member 'FortClientAnnouncement_TutorialInterface_SetSystemText::SystemText' has a wrong offset!");

// Function FortniteGame.FortClientAnnouncement_TutorialInterface.SetTitleText
// 0x0018 (0x0018 - 0x0000)
struct FortClientAnnouncement_TutorialInterface_SetTitleText final
{
public:
	class FText                                   NameText;                                          // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortClientAnnouncement_TutorialInterface_SetTitleText) == 0x000008, "Wrong alignment on FortClientAnnouncement_TutorialInterface_SetTitleText");
static_assert(sizeof(FortClientAnnouncement_TutorialInterface_SetTitleText) == 0x000018, "Wrong size on FortClientAnnouncement_TutorialInterface_SetTitleText");
static_assert(offsetof(FortClientAnnouncement_TutorialInterface_SetTitleText, NameText) == 0x000000, "Member 'FortClientAnnouncement_TutorialInterface_SetTitleText::NameText' has a wrong offset!");

// Function FortniteGame.FortClientAnnouncement_TutorialInterface.SetVAlign
// 0x0001 (0x0001 - 0x0000)
struct FortClientAnnouncement_TutorialInterface_SetVAlign final
{
public:
	EVerticalAlignment                            VAlign;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortClientAnnouncement_TutorialInterface_SetVAlign) == 0x000001, "Wrong alignment on FortClientAnnouncement_TutorialInterface_SetVAlign");
static_assert(sizeof(FortClientAnnouncement_TutorialInterface_SetVAlign) == 0x000001, "Wrong size on FortClientAnnouncement_TutorialInterface_SetVAlign");
static_assert(offsetof(FortClientAnnouncement_TutorialInterface_SetVAlign, VAlign) == 0x000000, "Member 'FortClientAnnouncement_TutorialInterface_SetVAlign::VAlign' has a wrong offset!");

// Function FortniteGame.FortClientAnnouncement_TutorialInterface.WaitForContinue
// 0x0020 (0x0020 - 0x0000)
struct FortClientAnnouncement_TutorialInterface_WaitForContinue final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortClientAnnouncement_TutorialInterface_WaitForContinue) == 0x000008, "Wrong alignment on FortClientAnnouncement_TutorialInterface_WaitForContinue");
static_assert(sizeof(FortClientAnnouncement_TutorialInterface_WaitForContinue) == 0x000020, "Wrong size on FortClientAnnouncement_TutorialInterface_WaitForContinue");
static_assert(offsetof(FortClientAnnouncement_TutorialInterface_WaitForContinue, WorldContextObject) == 0x000000, "Member 'FortClientAnnouncement_TutorialInterface_WaitForContinue::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortClientAnnouncement_TutorialInterface_WaitForContinue, LatentInfo) == 0x000008, "Member 'FortClientAnnouncement_TutorialInterface_WaitForContinue::LatentInfo' has a wrong offset!");

// Function FortniteGame.FortClientAnnouncementManager.OnRep_ClientAnnouncements
// 0x0010 (0x0010 - 0x0000)
struct FortClientAnnouncementManager_OnRep_ClientAnnouncements final
{
public:
	TArray<class AFortClientAnnouncement*>        PreviousClientAnnouncements;                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortClientAnnouncementManager_OnRep_ClientAnnouncements) == 0x000008, "Wrong alignment on FortClientAnnouncementManager_OnRep_ClientAnnouncements");
static_assert(sizeof(FortClientAnnouncementManager_OnRep_ClientAnnouncements) == 0x000010, "Wrong size on FortClientAnnouncementManager_OnRep_ClientAnnouncements");
static_assert(offsetof(FortClientAnnouncementManager_OnRep_ClientAnnouncements, PreviousClientAnnouncements) == 0x000000, "Member 'FortClientAnnouncementManager_OnRep_ClientAnnouncements::PreviousClientAnnouncements' has a wrong offset!");

// Function FortniteGame.FortEmojiPreviewComponent.PushPreviewEmoji
// 0x0008 (0x0008 - 0x0000)
struct FortEmojiPreviewComponent_PushPreviewEmoji final
{
public:
	class UAthenaEmojiItemDefinition*             EmojiItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmojiPreviewComponent_PushPreviewEmoji) == 0x000008, "Wrong alignment on FortEmojiPreviewComponent_PushPreviewEmoji");
static_assert(sizeof(FortEmojiPreviewComponent_PushPreviewEmoji) == 0x000008, "Wrong size on FortEmojiPreviewComponent_PushPreviewEmoji");
static_assert(offsetof(FortEmojiPreviewComponent_PushPreviewEmoji, EmojiItem) == 0x000000, "Member 'FortEmojiPreviewComponent_PushPreviewEmoji::EmojiItem' has a wrong offset!");

// Function FortniteGame.LevelTestingActorBase.ExtractSkeletalMesh
// 0x0010 (0x0010 - 0x0000)
struct LevelTestingActorBase_ExtractSkeletalMesh final
{
public:
	TSubclassOf<class AActor>                     BlueprintClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelTestingActorBase_ExtractSkeletalMesh) == 0x000008, "Wrong alignment on LevelTestingActorBase_ExtractSkeletalMesh");
static_assert(sizeof(LevelTestingActorBase_ExtractSkeletalMesh) == 0x000010, "Wrong size on LevelTestingActorBase_ExtractSkeletalMesh");
static_assert(offsetof(LevelTestingActorBase_ExtractSkeletalMesh, BlueprintClass) == 0x000000, "Member 'LevelTestingActorBase_ExtractSkeletalMesh::BlueprintClass' has a wrong offset!");
static_assert(offsetof(LevelTestingActorBase_ExtractSkeletalMesh, ReturnValue) == 0x000008, "Member 'LevelTestingActorBase_ExtractSkeletalMesh::ReturnValue' has a wrong offset!");

// Function FortniteGame.LevelTestingActorBase.ExtractSkeletalMeshScale
// 0x0018 (0x0018 - 0x0000)
struct LevelTestingActorBase_ExtractSkeletalMeshScale final
{
public:
	TSubclassOf<class AActor>                     BlueprintClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LevelTestingActorBase_ExtractSkeletalMeshScale) == 0x000008, "Wrong alignment on LevelTestingActorBase_ExtractSkeletalMeshScale");
static_assert(sizeof(LevelTestingActorBase_ExtractSkeletalMeshScale) == 0x000018, "Wrong size on LevelTestingActorBase_ExtractSkeletalMeshScale");
static_assert(offsetof(LevelTestingActorBase_ExtractSkeletalMeshScale, BlueprintClass) == 0x000000, "Member 'LevelTestingActorBase_ExtractSkeletalMeshScale::BlueprintClass' has a wrong offset!");
static_assert(offsetof(LevelTestingActorBase_ExtractSkeletalMeshScale, ReturnValue) == 0x000008, "Member 'LevelTestingActorBase_ExtractSkeletalMeshScale::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortClientEventInterface.BlueprintCustomHandleClientEvent
// 0x0030 (0x0030 - 0x0000)
struct FortClientEventInterface_BlueprintCustomHandleClientEvent final
{
public:
	class UObject*                                EventSource;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                EventFocus;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortClientEvent                       ClientEvent;                                       // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortClientEventInterface_BlueprintCustomHandleClientEvent) == 0x000008, "Wrong alignment on FortClientEventInterface_BlueprintCustomHandleClientEvent");
static_assert(sizeof(FortClientEventInterface_BlueprintCustomHandleClientEvent) == 0x000030, "Wrong size on FortClientEventInterface_BlueprintCustomHandleClientEvent");
static_assert(offsetof(FortClientEventInterface_BlueprintCustomHandleClientEvent, EventSource) == 0x000000, "Member 'FortClientEventInterface_BlueprintCustomHandleClientEvent::EventSource' has a wrong offset!");
static_assert(offsetof(FortClientEventInterface_BlueprintCustomHandleClientEvent, EventFocus) == 0x000008, "Member 'FortClientEventInterface_BlueprintCustomHandleClientEvent::EventFocus' has a wrong offset!");
static_assert(offsetof(FortClientEventInterface_BlueprintCustomHandleClientEvent, ClientEvent) == 0x000010, "Member 'FortClientEventInterface_BlueprintCustomHandleClientEvent::ClientEvent' has a wrong offset!");

// Function FortniteGame.FortNotificationHandler.CreateWidget
// 0x0010 (0x0010 - 0x0000)
struct FortNotificationHandler_CreateWidget final
{
public:
	class APlayerController*                      OwningPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortNotificationHandler_CreateWidget) == 0x000008, "Wrong alignment on FortNotificationHandler_CreateWidget");
static_assert(sizeof(FortNotificationHandler_CreateWidget) == 0x000010, "Wrong size on FortNotificationHandler_CreateWidget");
static_assert(offsetof(FortNotificationHandler_CreateWidget, OwningPlayer) == 0x000000, "Member 'FortNotificationHandler_CreateWidget::OwningPlayer' has a wrong offset!");
static_assert(offsetof(FortNotificationHandler_CreateWidget, ReturnValue) == 0x000008, "Member 'FortNotificationHandler_CreateWidget::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortEmotePreviewActor.GetAthenaSlottedCharacter
// 0x0028 (0x0028 - 0x0000)
struct FortEmotePreviewActor_GetAthenaSlottedCharacter final
{
public:
	TSoftObjectPtr<class USkeletalMesh>           ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmotePreviewActor_GetAthenaSlottedCharacter) == 0x000008, "Wrong alignment on FortEmotePreviewActor_GetAthenaSlottedCharacter");
static_assert(sizeof(FortEmotePreviewActor_GetAthenaSlottedCharacter) == 0x000028, "Wrong size on FortEmotePreviewActor_GetAthenaSlottedCharacter");
static_assert(offsetof(FortEmotePreviewActor_GetAthenaSlottedCharacter, ReturnValue) == 0x000000, "Member 'FortEmotePreviewActor_GetAthenaSlottedCharacter::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortEmotePreviewActor.PreviewEmote
// 0x0008 (0x0008 - 0x0000)
struct FortEmotePreviewActor_PreviewEmote final
{
public:
	const class UFortMontageItemDefinitionBase*   Emote;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmotePreviewActor_PreviewEmote) == 0x000008, "Wrong alignment on FortEmotePreviewActor_PreviewEmote");
static_assert(sizeof(FortEmotePreviewActor_PreviewEmote) == 0x000008, "Wrong size on FortEmotePreviewActor_PreviewEmote");
static_assert(offsetof(FortEmotePreviewActor_PreviewEmote, Emote) == 0x000000, "Member 'FortEmotePreviewActor_PreviewEmote::Emote' has a wrong offset!");

// Function FortniteGame.FortCollectionBookData.GetPageIdsFromCategoryId
// 0x0018 (0x0018 - 0x0000)
struct FortCollectionBookData_GetPageIdsFromCategoryId final
{
public:
	class FName                                   CategoryId;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           PageIds;                                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookData_GetPageIdsFromCategoryId) == 0x000008, "Wrong alignment on FortCollectionBookData_GetPageIdsFromCategoryId");
static_assert(sizeof(FortCollectionBookData_GetPageIdsFromCategoryId) == 0x000018, "Wrong size on FortCollectionBookData_GetPageIdsFromCategoryId");
static_assert(offsetof(FortCollectionBookData_GetPageIdsFromCategoryId, CategoryId) == 0x000000, "Member 'FortCollectionBookData_GetPageIdsFromCategoryId::CategoryId' has a wrong offset!");
static_assert(offsetof(FortCollectionBookData_GetPageIdsFromCategoryId, PageIds) == 0x000008, "Member 'FortCollectionBookData_GetPageIdsFromCategoryId::PageIds' has a wrong offset!");

// Function FortniteGame.FortCollectionBookManager.ClaimReward
// 0x0078 (0x0078 - 0x0000)
struct FortCollectionBookManager_ClaimReward final
{
public:
	struct FFortCollectionBookRewards             RewardToClaim;                                     // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         RewardIndex;                                       // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCollectionBookManager_ClaimReward) == 0x000008, "Wrong alignment on FortCollectionBookManager_ClaimReward");
static_assert(sizeof(FortCollectionBookManager_ClaimReward) == 0x000078, "Wrong size on FortCollectionBookManager_ClaimReward");
static_assert(offsetof(FortCollectionBookManager_ClaimReward, RewardToClaim) == 0x000000, "Member 'FortCollectionBookManager_ClaimReward::RewardToClaim' has a wrong offset!");
static_assert(offsetof(FortCollectionBookManager_ClaimReward, RewardIndex) == 0x000070, "Member 'FortCollectionBookManager_ClaimReward::RewardIndex' has a wrong offset!");

// Function FortniteGame.FortCollectionBookManager.PopulateCollectionBookRewards
// 0x0010 (0x0010 - 0x0000)
struct FortCollectionBookManager_PopulateCollectionBookRewards final
{
public:
	TArray<struct FFortCollectionBookRewards>     OutAvailableRewards;                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookManager_PopulateCollectionBookRewards) == 0x000008, "Wrong alignment on FortCollectionBookManager_PopulateCollectionBookRewards");
static_assert(sizeof(FortCollectionBookManager_PopulateCollectionBookRewards) == 0x000010, "Wrong size on FortCollectionBookManager_PopulateCollectionBookRewards");
static_assert(offsetof(FortCollectionBookManager_PopulateCollectionBookRewards, OutAvailableRewards) == 0x000000, "Member 'FortCollectionBookManager_PopulateCollectionBookRewards::OutAvailableRewards' has a wrong offset!");

// Function FortniteGame.FortCollectionBookManager.SlotItem
// 0x0018 (0x0018 - 0x0000)
struct FortCollectionBookManager_SlotItem final
{
public:
	const class UFortAccountItem*                 Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotId;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCollectionBookManager_SlotItem) == 0x000008, "Wrong alignment on FortCollectionBookManager_SlotItem");
static_assert(sizeof(FortCollectionBookManager_SlotItem) == 0x000018, "Wrong size on FortCollectionBookManager_SlotItem");
static_assert(offsetof(FortCollectionBookManager_SlotItem, Item) == 0x000000, "Member 'FortCollectionBookManager_SlotItem::Item' has a wrong offset!");
static_assert(offsetof(FortCollectionBookManager_SlotItem, SlotId) == 0x000008, "Member 'FortCollectionBookManager_SlotItem::SlotId' has a wrong offset!");
static_assert(offsetof(FortCollectionBookManager_SlotItem, ReturnValue) == 0x000010, "Member 'FortCollectionBookManager_SlotItem::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCollectionBookManager.CalculateBookXp
// 0x0004 (0x0004 - 0x0000)
struct FortCollectionBookManager_CalculateBookXp final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookManager_CalculateBookXp) == 0x000004, "Wrong alignment on FortCollectionBookManager_CalculateBookXp");
static_assert(sizeof(FortCollectionBookManager_CalculateBookXp) == 0x000004, "Wrong size on FortCollectionBookManager_CalculateBookXp");
static_assert(offsetof(FortCollectionBookManager_CalculateBookXp, ReturnValue) == 0x000000, "Member 'FortCollectionBookManager_CalculateBookXp::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCollectionBookManager.CalculatePageXp
// 0x0010 (0x0010 - 0x0000)
struct FortCollectionBookManager_CalculatePageXp final
{
public:
	class FName                                   PageId;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCollectionBookManager_CalculatePageXp) == 0x000004, "Wrong alignment on FortCollectionBookManager_CalculatePageXp");
static_assert(sizeof(FortCollectionBookManager_CalculatePageXp) == 0x000010, "Wrong size on FortCollectionBookManager_CalculatePageXp");
static_assert(offsetof(FortCollectionBookManager_CalculatePageXp, PageId) == 0x000000, "Member 'FortCollectionBookManager_CalculatePageXp::PageId' has a wrong offset!");
static_assert(offsetof(FortCollectionBookManager_CalculatePageXp, ReturnValue) == 0x000008, "Member 'FortCollectionBookManager_CalculatePageXp::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCollectionBookManager.CanSlotItem
// 0x0010 (0x0010 - 0x0000)
struct FortCollectionBookManager_CanSlotItem final
{
public:
	const class UFortAccountItem*                 AccountItem;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCollectionBookManager_CanSlotItem) == 0x000008, "Wrong alignment on FortCollectionBookManager_CanSlotItem");
static_assert(sizeof(FortCollectionBookManager_CanSlotItem) == 0x000010, "Wrong size on FortCollectionBookManager_CanSlotItem");
static_assert(offsetof(FortCollectionBookManager_CanSlotItem, AccountItem) == 0x000000, "Member 'FortCollectionBookManager_CanSlotItem::AccountItem' has a wrong offset!");
static_assert(offsetof(FortCollectionBookManager_CanSlotItem, ReturnValue) == 0x000008, "Member 'FortCollectionBookManager_CanSlotItem::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCollectionBookManager.GetBookTotalXPToNextLevel
// 0x0008 (0x0008 - 0x0000)
struct FortCollectionBookManager_GetBookTotalXPToNextLevel final
{
public:
	int32                                         CurrentLevel;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookManager_GetBookTotalXPToNextLevel) == 0x000004, "Wrong alignment on FortCollectionBookManager_GetBookTotalXPToNextLevel");
static_assert(sizeof(FortCollectionBookManager_GetBookTotalXPToNextLevel) == 0x000008, "Wrong size on FortCollectionBookManager_GetBookTotalXPToNextLevel");
static_assert(offsetof(FortCollectionBookManager_GetBookTotalXPToNextLevel, CurrentLevel) == 0x000000, "Member 'FortCollectionBookManager_GetBookTotalXPToNextLevel::CurrentLevel' has a wrong offset!");
static_assert(offsetof(FortCollectionBookManager_GetBookTotalXPToNextLevel, ReturnValue) == 0x000004, "Member 'FortCollectionBookManager_GetBookTotalXPToNextLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCollectionBookManager.GetBookXPPercentToNextLevel
// 0x000C (0x000C - 0x0000)
struct FortCollectionBookManager_GetBookXPPercentToNextLevel final
{
public:
	int32                                         CurrentLevel;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewXP;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookManager_GetBookXPPercentToNextLevel) == 0x000004, "Wrong alignment on FortCollectionBookManager_GetBookXPPercentToNextLevel");
static_assert(sizeof(FortCollectionBookManager_GetBookXPPercentToNextLevel) == 0x00000C, "Wrong size on FortCollectionBookManager_GetBookXPPercentToNextLevel");
static_assert(offsetof(FortCollectionBookManager_GetBookXPPercentToNextLevel, CurrentLevel) == 0x000000, "Member 'FortCollectionBookManager_GetBookXPPercentToNextLevel::CurrentLevel' has a wrong offset!");
static_assert(offsetof(FortCollectionBookManager_GetBookXPPercentToNextLevel, NewXP) == 0x000004, "Member 'FortCollectionBookManager_GetBookXPPercentToNextLevel::NewXP' has a wrong offset!");
static_assert(offsetof(FortCollectionBookManager_GetBookXPPercentToNextLevel, ReturnValue) == 0x000008, "Member 'FortCollectionBookManager_GetBookXPPercentToNextLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCollectionBookManager.GetItemInSlot
// 0x0010 (0x0010 - 0x0000)
struct FortCollectionBookManager_GetItemInSlot final
{
public:
	class FName                                   SlotId;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItem*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCollectionBookManager_GetItemInSlot) == 0x000008, "Wrong alignment on FortCollectionBookManager_GetItemInSlot");
static_assert(sizeof(FortCollectionBookManager_GetItemInSlot) == 0x000010, "Wrong size on FortCollectionBookManager_GetItemInSlot");
static_assert(offsetof(FortCollectionBookManager_GetItemInSlot, SlotId) == 0x000000, "Member 'FortCollectionBookManager_GetItemInSlot::SlotId' has a wrong offset!");
static_assert(offsetof(FortCollectionBookManager_GetItemInSlot, ReturnValue) == 0x000008, "Member 'FortCollectionBookManager_GetItemInSlot::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortExpeditionItemDefinition.GetAllRewards
// 0x0010 (0x0010 - 0x0000)
struct FortExpeditionItemDefinition_GetAllRewards final
{
public:
	TArray<class UFortCardPackItemDefinition*>    OutRewards;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionItemDefinition_GetAllRewards) == 0x000008, "Wrong alignment on FortExpeditionItemDefinition_GetAllRewards");
static_assert(sizeof(FortExpeditionItemDefinition_GetAllRewards) == 0x000010, "Wrong size on FortExpeditionItemDefinition_GetAllRewards");
static_assert(offsetof(FortExpeditionItemDefinition_GetAllRewards, OutRewards) == 0x000000, "Member 'FortExpeditionItemDefinition_GetAllRewards::OutRewards' has a wrong offset!");

// Function FortniteGame.FortExpeditionItemDefinition.GetExpeditionCosts
// 0x0010 (0x0010 - 0x0000)
struct FortExpeditionItemDefinition_GetExpeditionCosts final
{
public:
	TArray<struct FItemAndCount>                  OutExpeditionCosts;                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionItemDefinition_GetExpeditionCosts) == 0x000008, "Wrong alignment on FortExpeditionItemDefinition_GetExpeditionCosts");
static_assert(sizeof(FortExpeditionItemDefinition_GetExpeditionCosts) == 0x000010, "Wrong size on FortExpeditionItemDefinition_GetExpeditionCosts");
static_assert(offsetof(FortExpeditionItemDefinition_GetExpeditionCosts, OutExpeditionCosts) == 0x000000, "Member 'FortExpeditionItemDefinition_GetExpeditionCosts::OutExpeditionCosts' has a wrong offset!");

// Function FortniteGame.FortExpeditionItemDefinition.GetRequiredTags
// 0x0020 (0x0020 - 0x0000)
struct FortExpeditionItemDefinition_GetRequiredTags final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionItemDefinition_GetRequiredTags) == 0x000008, "Wrong alignment on FortExpeditionItemDefinition_GetRequiredTags");
static_assert(sizeof(FortExpeditionItemDefinition_GetRequiredTags) == 0x000020, "Wrong size on FortExpeditionItemDefinition_GetRequiredTags");
static_assert(offsetof(FortExpeditionItemDefinition_GetRequiredTags, ReturnValue) == 0x000000, "Member 'FortExpeditionItemDefinition_GetRequiredTags::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCompendiumBundle.GetAchievedCount
// 0x0008 (0x0008 - 0x0000)
struct FortCompendiumBundle_GetAchievedCount final
{
public:
	int32                                         OutTotalAchievedCount;                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutTotalRequiredCount;                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCompendiumBundle_GetAchievedCount) == 0x000004, "Wrong alignment on FortCompendiumBundle_GetAchievedCount");
static_assert(sizeof(FortCompendiumBundle_GetAchievedCount) == 0x000008, "Wrong size on FortCompendiumBundle_GetAchievedCount");
static_assert(offsetof(FortCompendiumBundle_GetAchievedCount, OutTotalAchievedCount) == 0x000000, "Member 'FortCompendiumBundle_GetAchievedCount::OutTotalAchievedCount' has a wrong offset!");
static_assert(offsetof(FortCompendiumBundle_GetAchievedCount, OutTotalRequiredCount) == 0x000004, "Member 'FortCompendiumBundle_GetAchievedCount::OutTotalRequiredCount' has a wrong offset!");

// Function FortniteGame.FortCompendiumBundle.GetCompendiumBundleDefinitionBP
// 0x0008 (0x0008 - 0x0000)
struct FortCompendiumBundle_GetCompendiumBundleDefinitionBP final
{
public:
	class UFortCompendiumBundleDefinition*        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCompendiumBundle_GetCompendiumBundleDefinitionBP) == 0x000008, "Wrong alignment on FortCompendiumBundle_GetCompendiumBundleDefinitionBP");
static_assert(sizeof(FortCompendiumBundle_GetCompendiumBundleDefinitionBP) == 0x000008, "Wrong size on FortCompendiumBundle_GetCompendiumBundleDefinitionBP");
static_assert(offsetof(FortCompendiumBundle_GetCompendiumBundleDefinitionBP, ReturnValue) == 0x000000, "Member 'FortCompendiumBundle_GetCompendiumBundleDefinitionBP::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCompendiumBundle.GetPercentageComplete
// 0x0004 (0x0004 - 0x0000)
struct FortCompendiumBundle_GetPercentageComplete final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCompendiumBundle_GetPercentageComplete) == 0x000004, "Wrong alignment on FortCompendiumBundle_GetPercentageComplete");
static_assert(sizeof(FortCompendiumBundle_GetPercentageComplete) == 0x000004, "Wrong size on FortCompendiumBundle_GetPercentageComplete");
static_assert(offsetof(FortCompendiumBundle_GetPercentageComplete, ReturnValue) == 0x000000, "Member 'FortCompendiumBundle_GetPercentageComplete::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGadgetItemDefinition.GetDecoItemDefinition
// 0x0008 (0x0008 - 0x0000)
struct FortGadgetItemDefinition_GetDecoItemDefinition final
{
public:
	class UFortDecoItemDefinition*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGadgetItemDefinition_GetDecoItemDefinition) == 0x000008, "Wrong alignment on FortGadgetItemDefinition_GetDecoItemDefinition");
static_assert(sizeof(FortGadgetItemDefinition_GetDecoItemDefinition) == 0x000008, "Wrong size on FortGadgetItemDefinition_GetDecoItemDefinition");
static_assert(offsetof(FortGadgetItemDefinition_GetDecoItemDefinition, ReturnValue) == 0x000000, "Member 'FortGadgetItemDefinition_GetDecoItemDefinition::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGadgetItemDefinition.GetGameplayAbility
// 0x0008 (0x0008 - 0x0000)
struct FortGadgetItemDefinition_GetGameplayAbility final
{
public:
	TSubclassOf<class UFortGameplayAbility>       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGadgetItemDefinition_GetGameplayAbility) == 0x000008, "Wrong alignment on FortGadgetItemDefinition_GetGameplayAbility");
static_assert(sizeof(FortGadgetItemDefinition_GetGameplayAbility) == 0x000008, "Wrong size on FortGadgetItemDefinition_GetGameplayAbility");
static_assert(offsetof(FortGadgetItemDefinition_GetGameplayAbility, ReturnValue) == 0x000000, "Member 'FortGadgetItemDefinition_GetGameplayAbility::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGadgetItemDefinition.GetLevelAttribute
// 0x0020 (0x0020 - 0x0000)
struct FortGadgetItemDefinition_GetLevelAttribute final
{
public:
	struct FGameplayAttribute                     ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGadgetItemDefinition_GetLevelAttribute) == 0x000008, "Wrong alignment on FortGadgetItemDefinition_GetLevelAttribute");
static_assert(sizeof(FortGadgetItemDefinition_GetLevelAttribute) == 0x000020, "Wrong size on FortGadgetItemDefinition_GetLevelAttribute");
static_assert(offsetof(FortGadgetItemDefinition_GetLevelAttribute, ReturnValue) == 0x000000, "Member 'FortGadgetItemDefinition_GetLevelAttribute::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGadgetItemDefinition.HasChargeUp
// 0x0001 (0x0001 - 0x0000)
struct FortGadgetItemDefinition_HasChargeUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGadgetItemDefinition_HasChargeUp) == 0x000001, "Wrong alignment on FortGadgetItemDefinition_HasChargeUp");
static_assert(sizeof(FortGadgetItemDefinition_HasChargeUp) == 0x000001, "Wrong size on FortGadgetItemDefinition_HasChargeUp");
static_assert(offsetof(FortGadgetItemDefinition_HasChargeUp, ReturnValue) == 0x000000, "Member 'FortGadgetItemDefinition_HasChargeUp::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCompendiumItem.GetAchievedCount
// 0x0008 (0x0008 - 0x0000)
struct FortCompendiumItem_GetAchievedCount final
{
public:
	int32                                         OutTotalAchievedCount;                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutTotalRequiredCount;                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCompendiumItem_GetAchievedCount) == 0x000004, "Wrong alignment on FortCompendiumItem_GetAchievedCount");
static_assert(sizeof(FortCompendiumItem_GetAchievedCount) == 0x000008, "Wrong size on FortCompendiumItem_GetAchievedCount");
static_assert(offsetof(FortCompendiumItem_GetAchievedCount, OutTotalAchievedCount) == 0x000000, "Member 'FortCompendiumItem_GetAchievedCount::OutTotalAchievedCount' has a wrong offset!");
static_assert(offsetof(FortCompendiumItem_GetAchievedCount, OutTotalRequiredCount) == 0x000004, "Member 'FortCompendiumItem_GetAchievedCount::OutTotalRequiredCount' has a wrong offset!");

// Function FortniteGame.FortCompendiumItem.GetCompendiumDefinitionBP
// 0x0008 (0x0008 - 0x0000)
struct FortCompendiumItem_GetCompendiumDefinitionBP final
{
public:
	class UFortCompendiumItemDefinition*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCompendiumItem_GetCompendiumDefinitionBP) == 0x000008, "Wrong alignment on FortCompendiumItem_GetCompendiumDefinitionBP");
static_assert(sizeof(FortCompendiumItem_GetCompendiumDefinitionBP) == 0x000008, "Wrong size on FortCompendiumItem_GetCompendiumDefinitionBP");
static_assert(offsetof(FortCompendiumItem_GetCompendiumDefinitionBP, ReturnValue) == 0x000000, "Member 'FortCompendiumItem_GetCompendiumDefinitionBP::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCompendiumItem.GetPercentageComplete
// 0x0004 (0x0004 - 0x0000)
struct FortCompendiumItem_GetPercentageComplete final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCompendiumItem_GetPercentageComplete) == 0x000004, "Wrong alignment on FortCompendiumItem_GetPercentageComplete");
static_assert(sizeof(FortCompendiumItem_GetPercentageComplete) == 0x000004, "Wrong size on FortCompendiumItem_GetPercentageComplete");
static_assert(offsetof(FortCompendiumItem_GetPercentageComplete, ReturnValue) == 0x000000, "Member 'FortCompendiumItem_GetPercentageComplete::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortFootstepAudioBank.GetFootstepAttenuationAsset
// 0x0010 (0x0010 - 0x0000)
struct FortFootstepAudioBank_GetFootstepAttenuationAsset final
{
public:
	bool                                          bIsLocal;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFootstepAudioType                        StepType;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFootstepAudioBank_GetFootstepAttenuationAsset) == 0x000008, "Wrong alignment on FortFootstepAudioBank_GetFootstepAttenuationAsset");
static_assert(sizeof(FortFootstepAudioBank_GetFootstepAttenuationAsset) == 0x000010, "Wrong size on FortFootstepAudioBank_GetFootstepAttenuationAsset");
static_assert(offsetof(FortFootstepAudioBank_GetFootstepAttenuationAsset, bIsLocal) == 0x000000, "Member 'FortFootstepAudioBank_GetFootstepAttenuationAsset::bIsLocal' has a wrong offset!");
static_assert(offsetof(FortFootstepAudioBank_GetFootstepAttenuationAsset, StepType) == 0x000001, "Member 'FortFootstepAudioBank_GetFootstepAttenuationAsset::StepType' has a wrong offset!");
static_assert(offsetof(FortFootstepAudioBank_GetFootstepAttenuationAsset, ReturnValue) == 0x000008, "Member 'FortFootstepAudioBank_GetFootstepAttenuationAsset::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortFootstepAudioBank.GetFootstepSoundAsset
// 0x0010 (0x0010 - 0x0000)
struct FortFootstepAudioBank_GetFootstepSoundAsset final
{
public:
	bool                                          bIsLocal;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFootstepAudioType                        StepType;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFootstepSurfaceType                      SurfaceType;                                       // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFootstepAudioBank_GetFootstepSoundAsset) == 0x000008, "Wrong alignment on FortFootstepAudioBank_GetFootstepSoundAsset");
static_assert(sizeof(FortFootstepAudioBank_GetFootstepSoundAsset) == 0x000010, "Wrong size on FortFootstepAudioBank_GetFootstepSoundAsset");
static_assert(offsetof(FortFootstepAudioBank_GetFootstepSoundAsset, bIsLocal) == 0x000000, "Member 'FortFootstepAudioBank_GetFootstepSoundAsset::bIsLocal' has a wrong offset!");
static_assert(offsetof(FortFootstepAudioBank_GetFootstepSoundAsset, StepType) == 0x000001, "Member 'FortFootstepAudioBank_GetFootstepSoundAsset::StepType' has a wrong offset!");
static_assert(offsetof(FortFootstepAudioBank_GetFootstepSoundAsset, SurfaceType) == 0x000002, "Member 'FortFootstepAudioBank_GetFootstepSoundAsset::SurfaceType' has a wrong offset!");
static_assert(offsetof(FortFootstepAudioBank_GetFootstepSoundAsset, ReturnValue) == 0x000008, "Member 'FortFootstepAudioBank_GetFootstepSoundAsset::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortFootstepAudioBank.GetFootstepVolumeMultiplier
// 0x0008 (0x0008 - 0x0000)
struct FortFootstepAudioBank_GetFootstepVolumeMultiplier final
{
public:
	bool                                          bIsLocal;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyTeammateVolume;                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFootstepAudioType                        StepType;                                          // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFootstepAudioBank_GetFootstepVolumeMultiplier) == 0x000004, "Wrong alignment on FortFootstepAudioBank_GetFootstepVolumeMultiplier");
static_assert(sizeof(FortFootstepAudioBank_GetFootstepVolumeMultiplier) == 0x000008, "Wrong size on FortFootstepAudioBank_GetFootstepVolumeMultiplier");
static_assert(offsetof(FortFootstepAudioBank_GetFootstepVolumeMultiplier, bIsLocal) == 0x000000, "Member 'FortFootstepAudioBank_GetFootstepVolumeMultiplier::bIsLocal' has a wrong offset!");
static_assert(offsetof(FortFootstepAudioBank_GetFootstepVolumeMultiplier, bApplyTeammateVolume) == 0x000001, "Member 'FortFootstepAudioBank_GetFootstepVolumeMultiplier::bApplyTeammateVolume' has a wrong offset!");
static_assert(offsetof(FortFootstepAudioBank_GetFootstepVolumeMultiplier, StepType) == 0x000002, "Member 'FortFootstepAudioBank_GetFootstepVolumeMultiplier::StepType' has a wrong offset!");
static_assert(offsetof(FortFootstepAudioBank_GetFootstepVolumeMultiplier, ReturnValue) == 0x000004, "Member 'FortFootstepAudioBank_GetFootstepVolumeMultiplier::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortConstructorBASE.GetBuildingActorsInBase
// 0x0010 (0x0010 - 0x0000)
struct FortConstructorBASE_GetBuildingActorsInBase final
{
public:
	TArray<class ABuildingSMActor*>               ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortConstructorBASE_GetBuildingActorsInBase) == 0x000008, "Wrong alignment on FortConstructorBASE_GetBuildingActorsInBase");
static_assert(sizeof(FortConstructorBASE_GetBuildingActorsInBase) == 0x000010, "Wrong size on FortConstructorBASE_GetBuildingActorsInBase");
static_assert(offsetof(FortConstructorBASE_GetBuildingActorsInBase, ReturnValue) == 0x000000, "Member 'FortConstructorBASE_GetBuildingActorsInBase::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortConstructorBASE.OnBaseCollisionTouched
// 0x00A0 (0x00A0 - 0x0000)
struct FortConstructorBASE_OnBaseCollisionTouched final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortConstructorBASE_OnBaseCollisionTouched) == 0x000008, "Wrong alignment on FortConstructorBASE_OnBaseCollisionTouched");
static_assert(sizeof(FortConstructorBASE_OnBaseCollisionTouched) == 0x0000A0, "Wrong size on FortConstructorBASE_OnBaseCollisionTouched");
static_assert(offsetof(FortConstructorBASE_OnBaseCollisionTouched, OverlappedComp) == 0x000000, "Member 'FortConstructorBASE_OnBaseCollisionTouched::OverlappedComp' has a wrong offset!");
static_assert(offsetof(FortConstructorBASE_OnBaseCollisionTouched, OtherActor) == 0x000008, "Member 'FortConstructorBASE_OnBaseCollisionTouched::OtherActor' has a wrong offset!");
static_assert(offsetof(FortConstructorBASE_OnBaseCollisionTouched, OtherComp) == 0x000010, "Member 'FortConstructorBASE_OnBaseCollisionTouched::OtherComp' has a wrong offset!");
static_assert(offsetof(FortConstructorBASE_OnBaseCollisionTouched, OtherBodyIndex) == 0x000018, "Member 'FortConstructorBASE_OnBaseCollisionTouched::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(FortConstructorBASE_OnBaseCollisionTouched, bFromSweep) == 0x00001C, "Member 'FortConstructorBASE_OnBaseCollisionTouched::bFromSweep' has a wrong offset!");
static_assert(offsetof(FortConstructorBASE_OnBaseCollisionTouched, SweepResult) == 0x000020, "Member 'FortConstructorBASE_OnBaseCollisionTouched::SweepResult' has a wrong offset!");

// Function FortniteGame.FortConstructorBASE.OnBaseCollisionUnTouched
// 0x0020 (0x0020 - 0x0000)
struct FortConstructorBASE_OnBaseCollisionUnTouched final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortConstructorBASE_OnBaseCollisionUnTouched) == 0x000008, "Wrong alignment on FortConstructorBASE_OnBaseCollisionUnTouched");
static_assert(sizeof(FortConstructorBASE_OnBaseCollisionUnTouched) == 0x000020, "Wrong size on FortConstructorBASE_OnBaseCollisionUnTouched");
static_assert(offsetof(FortConstructorBASE_OnBaseCollisionUnTouched, OverlappedComp) == 0x000000, "Member 'FortConstructorBASE_OnBaseCollisionUnTouched::OverlappedComp' has a wrong offset!");
static_assert(offsetof(FortConstructorBASE_OnBaseCollisionUnTouched, OtherActor) == 0x000008, "Member 'FortConstructorBASE_OnBaseCollisionUnTouched::OtherActor' has a wrong offset!");
static_assert(offsetof(FortConstructorBASE_OnBaseCollisionUnTouched, OtherComp) == 0x000010, "Member 'FortConstructorBASE_OnBaseCollisionUnTouched::OtherComp' has a wrong offset!");
static_assert(offsetof(FortConstructorBASE_OnBaseCollisionUnTouched, OtherBodyIndex) == 0x000018, "Member 'FortConstructorBASE_OnBaseCollisionUnTouched::OtherBodyIndex' has a wrong offset!");

// Function FortniteGame.FortConstructorBASE.OnBasePawnDestroyed
// 0x0008 (0x0008 - 0x0000)
struct FortConstructorBASE_OnBasePawnDestroyed final
{
public:
	class AFortPawn*                              Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortConstructorBASE_OnBasePawnDestroyed) == 0x000008, "Wrong alignment on FortConstructorBASE_OnBasePawnDestroyed");
static_assert(sizeof(FortConstructorBASE_OnBasePawnDestroyed) == 0x000008, "Wrong size on FortConstructorBASE_OnBasePawnDestroyed");
static_assert(offsetof(FortConstructorBASE_OnBasePawnDestroyed, Pawn) == 0x000000, "Member 'FortConstructorBASE_OnBasePawnDestroyed::Pawn' has a wrong offset!");

// Function FortniteGame.FortConstructorBASE.OnBasePawnDied
// 0x0008 (0x0008 - 0x0000)
struct FortConstructorBASE_OnBasePawnDied final
{
public:
	class AFortPawn*                              Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortConstructorBASE_OnBasePawnDied) == 0x000008, "Wrong alignment on FortConstructorBASE_OnBasePawnDied");
static_assert(sizeof(FortConstructorBASE_OnBasePawnDied) == 0x000008, "Wrong size on FortConstructorBASE_OnBasePawnDied");
static_assert(offsetof(FortConstructorBASE_OnBasePawnDied, Pawn) == 0x000000, "Member 'FortConstructorBASE_OnBasePawnDied::Pawn' has a wrong offset!");

// Function FortniteGame.FortConstructorBASE.OnPawnAddedToBase
// 0x0008 (0x0008 - 0x0000)
struct FortConstructorBASE_OnPawnAddedToBase final
{
public:
	class AFortPawn*                              Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortConstructorBASE_OnPawnAddedToBase) == 0x000008, "Wrong alignment on FortConstructorBASE_OnPawnAddedToBase");
static_assert(sizeof(FortConstructorBASE_OnPawnAddedToBase) == 0x000008, "Wrong size on FortConstructorBASE_OnPawnAddedToBase");
static_assert(offsetof(FortConstructorBASE_OnPawnAddedToBase, Pawn) == 0x000000, "Member 'FortConstructorBASE_OnPawnAddedToBase::Pawn' has a wrong offset!");

// Function FortniteGame.FortConstructorBASE.OnPawnRemovedFromBase
// 0x0008 (0x0008 - 0x0000)
struct FortConstructorBASE_OnPawnRemovedFromBase final
{
public:
	class AFortPawn*                              Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortConstructorBASE_OnPawnRemovedFromBase) == 0x000008, "Wrong alignment on FortConstructorBASE_OnPawnRemovedFromBase");
static_assert(sizeof(FortConstructorBASE_OnPawnRemovedFromBase) == 0x000008, "Wrong size on FortConstructorBASE_OnPawnRemovedFromBase");
static_assert(offsetof(FortConstructorBASE_OnPawnRemovedFromBase, Pawn) == 0x000000, "Member 'FortConstructorBASE_OnPawnRemovedFromBase::Pawn' has a wrong offset!");

// Function FortniteGame.FortConstructorBASE.OnPlaced
// 0x0008 (0x0008 - 0x0000)
struct FortConstructorBASE_OnPlaced final
{
public:
	class UAbilitySystemComponent*                InstigatorAbilitySystemComponent;                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortConstructorBASE_OnPlaced) == 0x000008, "Wrong alignment on FortConstructorBASE_OnPlaced");
static_assert(sizeof(FortConstructorBASE_OnPlaced) == 0x000008, "Wrong size on FortConstructorBASE_OnPlaced");
static_assert(offsetof(FortConstructorBASE_OnPlaced, InstigatorAbilitySystemComponent) == 0x000000, "Member 'FortConstructorBASE_OnPlaced::InstigatorAbilitySystemComponent' has a wrong offset!");

// Function FortniteGame.FortConstructorBASE.StartBuildingActorVisuals
// 0x0010 (0x0010 - 0x0000)
struct FortConstructorBASE_StartBuildingActorVisuals final
{
public:
	class ABuildingSMActor*                       BuildingActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   EffectMeshComp;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortConstructorBASE_StartBuildingActorVisuals) == 0x000008, "Wrong alignment on FortConstructorBASE_StartBuildingActorVisuals");
static_assert(sizeof(FortConstructorBASE_StartBuildingActorVisuals) == 0x000010, "Wrong size on FortConstructorBASE_StartBuildingActorVisuals");
static_assert(offsetof(FortConstructorBASE_StartBuildingActorVisuals, BuildingActor) == 0x000000, "Member 'FortConstructorBASE_StartBuildingActorVisuals::BuildingActor' has a wrong offset!");
static_assert(offsetof(FortConstructorBASE_StartBuildingActorVisuals, EffectMeshComp) == 0x000008, "Member 'FortConstructorBASE_StartBuildingActorVisuals::EffectMeshComp' has a wrong offset!");

// Function FortniteGame.FortConstructorBASE.StopBuildingActorVisuals
// 0x0010 (0x0010 - 0x0000)
struct FortConstructorBASE_StopBuildingActorVisuals final
{
public:
	class ABuildingSMActor*                       BuildingActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   EffectMeshComp;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortConstructorBASE_StopBuildingActorVisuals) == 0x000008, "Wrong alignment on FortConstructorBASE_StopBuildingActorVisuals");
static_assert(sizeof(FortConstructorBASE_StopBuildingActorVisuals) == 0x000010, "Wrong size on FortConstructorBASE_StopBuildingActorVisuals");
static_assert(offsetof(FortConstructorBASE_StopBuildingActorVisuals, BuildingActor) == 0x000000, "Member 'FortConstructorBASE_StopBuildingActorVisuals::BuildingActor' has a wrong offset!");
static_assert(offsetof(FortConstructorBASE_StopBuildingActorVisuals, EffectMeshComp) == 0x000008, "Member 'FortConstructorBASE_StopBuildingActorVisuals::EffectMeshComp' has a wrong offset!");

// Function FortniteGame.FortConsumableItemDefinition.ConsumeItem
// 0x00A8 (0x00A8 - 0x0000)
struct FortConsumableItemDefinition_ConsumeItem final
{
public:
	struct FGameplayEventData                     EventData;                                         // 0x0000(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortConsumableItemDefinition_ConsumeItem) == 0x000008, "Wrong alignment on FortConsumableItemDefinition_ConsumeItem");
static_assert(sizeof(FortConsumableItemDefinition_ConsumeItem) == 0x0000A8, "Wrong size on FortConsumableItemDefinition_ConsumeItem");
static_assert(offsetof(FortConsumableItemDefinition_ConsumeItem, EventData) == 0x000000, "Member 'FortConsumableItemDefinition_ConsumeItem::EventData' has a wrong offset!");

// Function FortniteGame.FortConsumableItemDefinition.GetAnimPlayRate
// 0x0004 (0x0004 - 0x0000)
struct FortConsumableItemDefinition_GetAnimPlayRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortConsumableItemDefinition_GetAnimPlayRate) == 0x000004, "Wrong alignment on FortConsumableItemDefinition_GetAnimPlayRate");
static_assert(sizeof(FortConsumableItemDefinition_GetAnimPlayRate) == 0x000004, "Wrong size on FortConsumableItemDefinition_GetAnimPlayRate");
static_assert(offsetof(FortConsumableItemDefinition_GetAnimPlayRate, ReturnValue) == 0x000000, "Member 'FortConsumableItemDefinition_GetAnimPlayRate::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortConsumableItemDefinition.GetHealthRestored
// 0x0008 (0x0008 - 0x0000)
struct FortConsumableItemDefinition_GetHealthRestored final
{
public:
	int32                                         ItemLevel;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortConsumableItemDefinition_GetHealthRestored) == 0x000004, "Wrong alignment on FortConsumableItemDefinition_GetHealthRestored");
static_assert(sizeof(FortConsumableItemDefinition_GetHealthRestored) == 0x000008, "Wrong size on FortConsumableItemDefinition_GetHealthRestored");
static_assert(offsetof(FortConsumableItemDefinition_GetHealthRestored, ItemLevel) == 0x000000, "Member 'FortConsumableItemDefinition_GetHealthRestored::ItemLevel' has a wrong offset!");
static_assert(offsetof(FortConsumableItemDefinition_GetHealthRestored, ReturnValue) == 0x000004, "Member 'FortConsumableItemDefinition_GetHealthRestored::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortConsumableItemDefinition.GetUseAnimation
// 0x0008 (0x0008 - 0x0000)
struct FortConsumableItemDefinition_GetUseAnimation final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortConsumableItemDefinition_GetUseAnimation) == 0x000008, "Wrong alignment on FortConsumableItemDefinition_GetUseAnimation");
static_assert(sizeof(FortConsumableItemDefinition_GetUseAnimation) == 0x000008, "Wrong size on FortConsumableItemDefinition_GetUseAnimation");
static_assert(offsetof(FortConsumableItemDefinition_GetUseAnimation, ReturnValue) == 0x000000, "Member 'FortConsumableItemDefinition_GetUseAnimation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHealthBarComponent.SetHealthBarDisplayText
// 0x0018 (0x0018 - 0x0000)
struct FortHealthBarComponent_SetHealthBarDisplayText final
{
public:
	class FText                                   NewDisplayText;                                    // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHealthBarComponent_SetHealthBarDisplayText) == 0x000008, "Wrong alignment on FortHealthBarComponent_SetHealthBarDisplayText");
static_assert(sizeof(FortHealthBarComponent_SetHealthBarDisplayText) == 0x000018, "Wrong size on FortHealthBarComponent_SetHealthBarDisplayText");
static_assert(offsetof(FortHealthBarComponent_SetHealthBarDisplayText, NewDisplayText) == 0x000000, "Member 'FortHealthBarComponent_SetHealthBarDisplayText::NewDisplayText' has a wrong offset!");

// Function FortniteGame.FortHealthBarComponent.SetHealthBarVisibility
// 0x0001 (0x0001 - 0x0000)
struct FortHealthBarComponent_SetHealthBarVisibility final
{
public:
	bool                                          bNewVisibleState;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHealthBarComponent_SetHealthBarVisibility) == 0x000001, "Wrong alignment on FortHealthBarComponent_SetHealthBarVisibility");
static_assert(sizeof(FortHealthBarComponent_SetHealthBarVisibility) == 0x000001, "Wrong size on FortHealthBarComponent_SetHealthBarVisibility");
static_assert(offsetof(FortHealthBarComponent_SetHealthBarVisibility, bNewVisibleState) == 0x000000, "Member 'FortHealthBarComponent_SetHealthBarVisibility::bNewVisibleState' has a wrong offset!");

// Function FortniteGame.FortHealthBarComponent.SetHealthBarWidgetVisibility
// 0x0001 (0x0001 - 0x0000)
struct FortHealthBarComponent_SetHealthBarWidgetVisibility final
{
public:
	bool                                          bIsVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHealthBarComponent_SetHealthBarWidgetVisibility) == 0x000001, "Wrong alignment on FortHealthBarComponent_SetHealthBarWidgetVisibility");
static_assert(sizeof(FortHealthBarComponent_SetHealthBarWidgetVisibility) == 0x000001, "Wrong size on FortHealthBarComponent_SetHealthBarWidgetVisibility");
static_assert(offsetof(FortHealthBarComponent_SetHealthBarWidgetVisibility, bIsVisible) == 0x000000, "Member 'FortHealthBarComponent_SetHealthBarWidgetVisibility::bIsVisible' has a wrong offset!");

// Function FortniteGame.FortHealthBarComponent.GetHealthBarDisplayText
// 0x0018 (0x0018 - 0x0000)
struct FortHealthBarComponent_GetHealthBarDisplayText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHealthBarComponent_GetHealthBarDisplayText) == 0x000008, "Wrong alignment on FortHealthBarComponent_GetHealthBarDisplayText");
static_assert(sizeof(FortHealthBarComponent_GetHealthBarDisplayText) == 0x000018, "Wrong size on FortHealthBarComponent_GetHealthBarDisplayText");
static_assert(offsetof(FortHealthBarComponent_GetHealthBarDisplayText, ReturnValue) == 0x000000, "Member 'FortHealthBarComponent_GetHealthBarDisplayText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortFeedbackManager.GetAnnouncerPawn
// 0x0010 (0x0010 - 0x0000)
struct FortFeedbackManager_GetAnnouncerPawn final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPawn_FeedbackAnnouncer*            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFeedbackManager_GetAnnouncerPawn) == 0x000008, "Wrong alignment on FortFeedbackManager_GetAnnouncerPawn");
static_assert(sizeof(FortFeedbackManager_GetAnnouncerPawn) == 0x000010, "Wrong size on FortFeedbackManager_GetAnnouncerPawn");
static_assert(offsetof(FortFeedbackManager_GetAnnouncerPawn, WorldContextObject) == 0x000000, "Member 'FortFeedbackManager_GetAnnouncerPawn::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortFeedbackManager_GetAnnouncerPawn, ReturnValue) == 0x000008, "Member 'FortFeedbackManager_GetAnnouncerPawn::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortFeedbackManager.GetFeedbackManager
// 0x0010 (0x0010 - 0x0000)
struct FortFeedbackManager_GetFeedbackManager final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortFeedbackManager*                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFeedbackManager_GetFeedbackManager) == 0x000008, "Wrong alignment on FortFeedbackManager_GetFeedbackManager");
static_assert(sizeof(FortFeedbackManager_GetFeedbackManager) == 0x000010, "Wrong size on FortFeedbackManager_GetFeedbackManager");
static_assert(offsetof(FortFeedbackManager_GetFeedbackManager, WorldContextObject) == 0x000000, "Member 'FortFeedbackManager_GetFeedbackManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortFeedbackManager_GetFeedbackManager, ReturnValue) == 0x000008, "Member 'FortFeedbackManager_GetFeedbackManager::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortFeedbackManager.SuppressProceduralFeedback
// 0x0010 (0x0010 - 0x0000)
struct FortFeedbackManager_SuppressProceduralFeedback final
{
public:
	TArray<class AController*>                    ControllersToSuppress;                             // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFeedbackManager_SuppressProceduralFeedback) == 0x000008, "Wrong alignment on FortFeedbackManager_SuppressProceduralFeedback");
static_assert(sizeof(FortFeedbackManager_SuppressProceduralFeedback) == 0x000010, "Wrong size on FortFeedbackManager_SuppressProceduralFeedback");
static_assert(offsetof(FortFeedbackManager_SuppressProceduralFeedback, ControllersToSuppress) == 0x000000, "Member 'FortFeedbackManager_SuppressProceduralFeedback::ControllersToSuppress' has a wrong offset!");

// Function FortniteGame.FortHero.GetDisplayName
// 0x0018 (0x0018 - 0x0000)
struct FortHero_GetDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHero_GetDisplayName) == 0x000008, "Wrong alignment on FortHero_GetDisplayName");
static_assert(sizeof(FortHero_GetDisplayName) == 0x000018, "Wrong size on FortHero_GetDisplayName");
static_assert(offsetof(FortHero_GetDisplayName, ReturnValue) == 0x000000, "Member 'FortHero_GetDisplayName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHero.GetHeroTypeBP
// 0x0008 (0x0008 - 0x0000)
struct FortHero_GetHeroTypeBP final
{
public:
	class UFortHeroType*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHero_GetHeroTypeBP) == 0x000008, "Wrong alignment on FortHero_GetHeroTypeBP");
static_assert(sizeof(FortHero_GetHeroTypeBP) == 0x000008, "Wrong size on FortHero_GetHeroTypeBP");
static_assert(offsetof(FortHero_GetHeroTypeBP, ReturnValue) == 0x000000, "Member 'FortHero_GetHeroTypeBP::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHero.GetUnclampedLevel
// 0x0004 (0x0004 - 0x0000)
struct FortHero_GetUnclampedLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHero_GetUnclampedLevel) == 0x000004, "Wrong alignment on FortHero_GetUnclampedLevel");
static_assert(sizeof(FortHero_GetUnclampedLevel) == 0x000004, "Wrong size on FortHero_GetUnclampedLevel");
static_assert(offsetof(FortHero_GetUnclampedLevel, ReturnValue) == 0x000000, "Member 'FortHero_GetUnclampedLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHero.IsLevelClamped
// 0x0001 (0x0001 - 0x0000)
struct FortHero_IsLevelClamped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHero_IsLevelClamped) == 0x000001, "Wrong alignment on FortHero_IsLevelClamped");
static_assert(sizeof(FortHero_IsLevelClamped) == 0x000001, "Wrong size on FortHero_IsLevelClamped");
static_assert(offsetof(FortHero_IsLevelClamped, ReturnValue) == 0x000000, "Member 'FortHero_IsLevelClamped::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCrackEffect.OnBounceAnimationUpdate
// 0x0030 (0x0030 - 0x0000)
struct FortCrackEffect_OnBounceAnimationUpdate final
{
public:
	struct FFortBounceData                        BounceData;                                        // 0x0000(0x0030)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCrackEffect_OnBounceAnimationUpdate) == 0x000004, "Wrong alignment on FortCrackEffect_OnBounceAnimationUpdate");
static_assert(sizeof(FortCrackEffect_OnBounceAnimationUpdate) == 0x000030, "Wrong size on FortCrackEffect_OnBounceAnimationUpdate");
static_assert(offsetof(FortCrackEffect_OnBounceAnimationUpdate, BounceData) == 0x000000, "Member 'FortCrackEffect_OnBounceAnimationUpdate::BounceData' has a wrong offset!");

// Function FortniteGame.FortCrackEffect.HasStartingPosition
// 0x0001 (0x0001 - 0x0000)
struct FortCrackEffect_HasStartingPosition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCrackEffect_HasStartingPosition) == 0x000001, "Wrong alignment on FortCrackEffect_HasStartingPosition");
static_assert(sizeof(FortCrackEffect_HasStartingPosition) == 0x000001, "Wrong size on FortCrackEffect_HasStartingPosition");
static_assert(offsetof(FortCrackEffect_HasStartingPosition, ReturnValue) == 0x000000, "Member 'FortCrackEffect_HasStartingPosition::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortFrontEndCameraManager.SetCamera
// 0x0001 (0x0001 - 0x0000)
struct FortFrontEndCameraManager_SetCamera final
{
public:
	EFrontEndCamera                               NewCamera;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndCameraManager_SetCamera) == 0x000001, "Wrong alignment on FortFrontEndCameraManager_SetCamera");
static_assert(sizeof(FortFrontEndCameraManager_SetCamera) == 0x000001, "Wrong size on FortFrontEndCameraManager_SetCamera");
static_assert(offsetof(FortFrontEndCameraManager_SetCamera, NewCamera) == 0x000000, "Member 'FortFrontEndCameraManager_SetCamera::NewCamera' has a wrong offset!");

// Function FortniteGame.FortFrontEndCameraManager.GetCamera
// 0x0001 (0x0001 - 0x0000)
struct FortFrontEndCameraManager_GetCamera final
{
public:
	EFrontEndCamera                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndCameraManager_GetCamera) == 0x000001, "Wrong alignment on FortFrontEndCameraManager_GetCamera");
static_assert(sizeof(FortFrontEndCameraManager_GetCamera) == 0x000001, "Wrong size on FortFrontEndCameraManager_GetCamera");
static_assert(offsetof(FortFrontEndCameraManager_GetCamera, ReturnValue) == 0x000000, "Member 'FortFrontEndCameraManager_GetCamera::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortFrontEndCameraManager.GetCameraActor
// 0x0008 (0x0008 - 0x0000)
struct FortFrontEndCameraManager_GetCameraActor final
{
public:
	class AFortCameraBase*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndCameraManager_GetCameraActor) == 0x000008, "Wrong alignment on FortFrontEndCameraManager_GetCameraActor");
static_assert(sizeof(FortFrontEndCameraManager_GetCameraActor) == 0x000008, "Wrong size on FortFrontEndCameraManager_GetCameraActor");
static_assert(offsetof(FortFrontEndCameraManager_GetCameraActor, ReturnValue) == 0x000000, "Member 'FortFrontEndCameraManager_GetCameraActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCustomizableAbilityDecoTool.BPOnEquip
// 0x0008 (0x0008 - 0x0000)
struct FortCustomizableAbilityDecoTool_BPOnEquip final
{
public:
	class AFortWeapon*                            OldWeapon;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCustomizableAbilityDecoTool_BPOnEquip) == 0x000008, "Wrong alignment on FortCustomizableAbilityDecoTool_BPOnEquip");
static_assert(sizeof(FortCustomizableAbilityDecoTool_BPOnEquip) == 0x000008, "Wrong size on FortCustomizableAbilityDecoTool_BPOnEquip");
static_assert(offsetof(FortCustomizableAbilityDecoTool_BPOnEquip, OldWeapon) == 0x000000, "Member 'FortCustomizableAbilityDecoTool_BPOnEquip::OldWeapon' has a wrong offset!");

// Function FortniteGame.FortCustomizableAbilityDecoTool.BPOnSetDecoObjectPreview
// 0x0008 (0x0008 - 0x0000)
struct FortCustomizableAbilityDecoTool_BPOnSetDecoObjectPreview final
{
public:
	class AFortDecoHelper*                        FortDecoHelper;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCustomizableAbilityDecoTool_BPOnSetDecoObjectPreview) == 0x000008, "Wrong alignment on FortCustomizableAbilityDecoTool_BPOnSetDecoObjectPreview");
static_assert(sizeof(FortCustomizableAbilityDecoTool_BPOnSetDecoObjectPreview) == 0x000008, "Wrong size on FortCustomizableAbilityDecoTool_BPOnSetDecoObjectPreview");
static_assert(offsetof(FortCustomizableAbilityDecoTool_BPOnSetDecoObjectPreview, FortDecoHelper) == 0x000000, "Member 'FortCustomizableAbilityDecoTool_BPOnSetDecoObjectPreview::FortDecoHelper' has a wrong offset!");

// Function FortniteGame.FortCustomizableAbilityDecoTool.BPPressSecondaryFire
// 0x0008 (0x0008 - 0x0000)
struct FortCustomizableAbilityDecoTool_BPPressSecondaryFire final
{
public:
	class AFortDecoHelper*                        FortDecoHelper;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCustomizableAbilityDecoTool_BPPressSecondaryFire) == 0x000008, "Wrong alignment on FortCustomizableAbilityDecoTool_BPPressSecondaryFire");
static_assert(sizeof(FortCustomizableAbilityDecoTool_BPPressSecondaryFire) == 0x000008, "Wrong size on FortCustomizableAbilityDecoTool_BPPressSecondaryFire");
static_assert(offsetof(FortCustomizableAbilityDecoTool_BPPressSecondaryFire, FortDecoHelper) == 0x000000, "Member 'FortCustomizableAbilityDecoTool_BPPressSecondaryFire::FortDecoHelper' has a wrong offset!");

// Function FortniteGame.FortCustomizableAbilityDecoTool.BPPressTrigger
// 0x0008 (0x0008 - 0x0000)
struct FortCustomizableAbilityDecoTool_BPPressTrigger final
{
public:
	class AFortDecoHelper*                        FortDecoHelper;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCustomizableAbilityDecoTool_BPPressTrigger) == 0x000008, "Wrong alignment on FortCustomizableAbilityDecoTool_BPPressTrigger");
static_assert(sizeof(FortCustomizableAbilityDecoTool_BPPressTrigger) == 0x000008, "Wrong size on FortCustomizableAbilityDecoTool_BPPressTrigger");
static_assert(offsetof(FortCustomizableAbilityDecoTool_BPPressTrigger, FortDecoHelper) == 0x000000, "Member 'FortCustomizableAbilityDecoTool_BPPressTrigger::FortDecoHelper' has a wrong offset!");

// Function FortniteGame.FortCustomizableAbilityDecoTool.BPReleaseSecondaryFire
// 0x0008 (0x0008 - 0x0000)
struct FortCustomizableAbilityDecoTool_BPReleaseSecondaryFire final
{
public:
	class AFortDecoHelper*                        FortDecoHelper;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCustomizableAbilityDecoTool_BPReleaseSecondaryFire) == 0x000008, "Wrong alignment on FortCustomizableAbilityDecoTool_BPReleaseSecondaryFire");
static_assert(sizeof(FortCustomizableAbilityDecoTool_BPReleaseSecondaryFire) == 0x000008, "Wrong size on FortCustomizableAbilityDecoTool_BPReleaseSecondaryFire");
static_assert(offsetof(FortCustomizableAbilityDecoTool_BPReleaseSecondaryFire, FortDecoHelper) == 0x000000, "Member 'FortCustomizableAbilityDecoTool_BPReleaseSecondaryFire::FortDecoHelper' has a wrong offset!");

// Function FortniteGame.FortCustomizableAbilityDecoTool.BPReleaseTrigger
// 0x0008 (0x0008 - 0x0000)
struct FortCustomizableAbilityDecoTool_BPReleaseTrigger final
{
public:
	class AFortDecoHelper*                        FortDecoHelper;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCustomizableAbilityDecoTool_BPReleaseTrigger) == 0x000008, "Wrong alignment on FortCustomizableAbilityDecoTool_BPReleaseTrigger");
static_assert(sizeof(FortCustomizableAbilityDecoTool_BPReleaseTrigger) == 0x000008, "Wrong size on FortCustomizableAbilityDecoTool_BPReleaseTrigger");
static_assert(offsetof(FortCustomizableAbilityDecoTool_BPReleaseTrigger, FortDecoHelper) == 0x000000, "Member 'FortCustomizableAbilityDecoTool_BPReleaseTrigger::FortDecoHelper' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.CalculateProjectileTrajectorySpline
// 0x0058 (0x0058 - 0x0000)
struct FortGameplayAbility_CalculateProjectileTrajectorySpline final
{
public:
	TArray<struct FVector>                        OutSplinePoints;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        OutSplineTangents;                                 // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	const class AActor*                           Instigator;                                        // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InitialLocation;                                   // 0x0028(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InitialVelocity;                                   // 0x0034(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Gravity;                                           // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Friction;                                          // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Bounciness;                                        // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeStep;                                          // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceExtent;                                       // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxBounces;                                        // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_CalculateProjectileTrajectorySpline) == 0x000008, "Wrong alignment on FortGameplayAbility_CalculateProjectileTrajectorySpline");
static_assert(sizeof(FortGameplayAbility_CalculateProjectileTrajectorySpline) == 0x000058, "Wrong size on FortGameplayAbility_CalculateProjectileTrajectorySpline");
static_assert(offsetof(FortGameplayAbility_CalculateProjectileTrajectorySpline, OutSplinePoints) == 0x000000, "Member 'FortGameplayAbility_CalculateProjectileTrajectorySpline::OutSplinePoints' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_CalculateProjectileTrajectorySpline, OutSplineTangents) == 0x000010, "Member 'FortGameplayAbility_CalculateProjectileTrajectorySpline::OutSplineTangents' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_CalculateProjectileTrajectorySpline, Instigator) == 0x000020, "Member 'FortGameplayAbility_CalculateProjectileTrajectorySpline::Instigator' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_CalculateProjectileTrajectorySpline, InitialLocation) == 0x000028, "Member 'FortGameplayAbility_CalculateProjectileTrajectorySpline::InitialLocation' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_CalculateProjectileTrajectorySpline, InitialVelocity) == 0x000034, "Member 'FortGameplayAbility_CalculateProjectileTrajectorySpline::InitialVelocity' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_CalculateProjectileTrajectorySpline, Gravity) == 0x000040, "Member 'FortGameplayAbility_CalculateProjectileTrajectorySpline::Gravity' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_CalculateProjectileTrajectorySpline, Friction) == 0x000044, "Member 'FortGameplayAbility_CalculateProjectileTrajectorySpline::Friction' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_CalculateProjectileTrajectorySpline, Bounciness) == 0x000048, "Member 'FortGameplayAbility_CalculateProjectileTrajectorySpline::Bounciness' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_CalculateProjectileTrajectorySpline, TimeStep) == 0x00004C, "Member 'FortGameplayAbility_CalculateProjectileTrajectorySpline::TimeStep' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_CalculateProjectileTrajectorySpline, TraceExtent) == 0x000050, "Member 'FortGameplayAbility_CalculateProjectileTrajectorySpline::TraceExtent' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_CalculateProjectileTrajectorySpline, MaxBounces) == 0x000054, "Member 'FortGameplayAbility_CalculateProjectileTrajectorySpline::MaxBounces' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.ApplyGameplayEffectContainer
// 0x0040 (0x0040 - 0x0000)
struct FortGameplayAbility_ApplyGameplayEffectContainer final
{
public:
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ApplicationTag;                                    // 0x0020(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameplayEffectLevel;                               // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FActiveGameplayEffectHandle>    ReturnValue;                                       // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_ApplyGameplayEffectContainer) == 0x000008, "Wrong alignment on FortGameplayAbility_ApplyGameplayEffectContainer");
static_assert(sizeof(FortGameplayAbility_ApplyGameplayEffectContainer) == 0x000040, "Wrong size on FortGameplayAbility_ApplyGameplayEffectContainer");
static_assert(offsetof(FortGameplayAbility_ApplyGameplayEffectContainer, TargetData) == 0x000000, "Member 'FortGameplayAbility_ApplyGameplayEffectContainer::TargetData' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_ApplyGameplayEffectContainer, ApplicationTag) == 0x000020, "Member 'FortGameplayAbility_ApplyGameplayEffectContainer::ApplicationTag' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_ApplyGameplayEffectContainer, GameplayEffectLevel) == 0x000028, "Member 'FortGameplayAbility_ApplyGameplayEffectContainer::GameplayEffectLevel' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_ApplyGameplayEffectContainer, ReturnValue) == 0x000030, "Member 'FortGameplayAbility_ApplyGameplayEffectContainer::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.BP_GetGameplayEffectContainer
// 0x0090 (0x0090 - 0x0000)
struct FortGameplayAbility_BP_GetGameplayEffectContainer final
{
public:
	struct FGameplayTag                           ApplicationTag;                                    // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortGameplayEffectContainer           ReturnValue;                                       // 0x0008(0x0088)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_BP_GetGameplayEffectContainer) == 0x000008, "Wrong alignment on FortGameplayAbility_BP_GetGameplayEffectContainer");
static_assert(sizeof(FortGameplayAbility_BP_GetGameplayEffectContainer) == 0x000090, "Wrong size on FortGameplayAbility_BP_GetGameplayEffectContainer");
static_assert(offsetof(FortGameplayAbility_BP_GetGameplayEffectContainer, ApplicationTag) == 0x000000, "Member 'FortGameplayAbility_BP_GetGameplayEffectContainer::ApplicationTag' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_BP_GetGameplayEffectContainer, ReturnValue) == 0x000008, "Member 'FortGameplayAbility_BP_GetGameplayEffectContainer::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.ClearAIFocalPoint
// 0x0001 (0x0001 - 0x0000)
struct FortGameplayAbility_ClearAIFocalPoint final
{
public:
	bool                                          bUseAttackingPriority;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_ClearAIFocalPoint) == 0x000001, "Wrong alignment on FortGameplayAbility_ClearAIFocalPoint");
static_assert(sizeof(FortGameplayAbility_ClearAIFocalPoint) == 0x000001, "Wrong size on FortGameplayAbility_ClearAIFocalPoint");
static_assert(offsetof(FortGameplayAbility_ClearAIFocalPoint, bUseAttackingPriority) == 0x000000, "Member 'FortGameplayAbility_ClearAIFocalPoint::bUseAttackingPriority' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.EquipAbilityWeapon
// 0x0010 (0x0010 - 0x0000)
struct FortGameplayAbility_EquipAbilityWeapon final
{
public:
	class UFortWeaponItemDefinition*              WeaponDefinition;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemLevel;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameplayAbility_EquipAbilityWeapon) == 0x000008, "Wrong alignment on FortGameplayAbility_EquipAbilityWeapon");
static_assert(sizeof(FortGameplayAbility_EquipAbilityWeapon) == 0x000010, "Wrong size on FortGameplayAbility_EquipAbilityWeapon");
static_assert(offsetof(FortGameplayAbility_EquipAbilityWeapon, WeaponDefinition) == 0x000000, "Member 'FortGameplayAbility_EquipAbilityWeapon::WeaponDefinition' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_EquipAbilityWeapon, ItemLevel) == 0x000008, "Member 'FortGameplayAbility_EquipAbilityWeapon::ItemLevel' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.GetAimLocationNearestPawn
// 0x0018 (0x0018 - 0x0000)
struct FortGameplayAbility_GetAimLocationNearestPawn final
{
public:
	class AFortPawn*                              Instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameplayAbility_GetAimLocationNearestPawn) == 0x000008, "Wrong alignment on FortGameplayAbility_GetAimLocationNearestPawn");
static_assert(sizeof(FortGameplayAbility_GetAimLocationNearestPawn) == 0x000018, "Wrong size on FortGameplayAbility_GetAimLocationNearestPawn");
static_assert(offsetof(FortGameplayAbility_GetAimLocationNearestPawn, Instigator) == 0x000000, "Member 'FortGameplayAbility_GetAimLocationNearestPawn::Instigator' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_GetAimLocationNearestPawn, ReturnValue) == 0x000008, "Member 'FortGameplayAbility_GetAimLocationNearestPawn::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.K2_TriggerFromAnimation
// 0x0008 (0x0008 - 0x0000)
struct FortGameplayAbility_K2_TriggerFromAnimation final
{
public:
	struct FGameplayTag                           ApplicationTag;                                    // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_K2_TriggerFromAnimation) == 0x000008, "Wrong alignment on FortGameplayAbility_K2_TriggerFromAnimation");
static_assert(sizeof(FortGameplayAbility_K2_TriggerFromAnimation) == 0x000008, "Wrong size on FortGameplayAbility_K2_TriggerFromAnimation");
static_assert(offsetof(FortGameplayAbility_K2_TriggerFromAnimation, ApplicationTag) == 0x000000, "Member 'FortGameplayAbility_K2_TriggerFromAnimation::ApplicationTag' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.MakeGameplayEffectContainerSpec
// 0x0090 (0x0090 - 0x0000)
struct FortGameplayAbility_MakeGameplayEffectContainerSpec final
{
public:
	struct FGameplayTag                           ApplicationTag;                                    // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameplayEffectLevel;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortGameplayEffectContainerSpec       ReturnValue;                                       // 0x0010(0x0080)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_MakeGameplayEffectContainerSpec) == 0x000008, "Wrong alignment on FortGameplayAbility_MakeGameplayEffectContainerSpec");
static_assert(sizeof(FortGameplayAbility_MakeGameplayEffectContainerSpec) == 0x000090, "Wrong size on FortGameplayAbility_MakeGameplayEffectContainerSpec");
static_assert(offsetof(FortGameplayAbility_MakeGameplayEffectContainerSpec, ApplicationTag) == 0x000000, "Member 'FortGameplayAbility_MakeGameplayEffectContainerSpec::ApplicationTag' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_MakeGameplayEffectContainerSpec, GameplayEffectLevel) == 0x000008, "Member 'FortGameplayAbility_MakeGameplayEffectContainerSpec::GameplayEffectLevel' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_MakeGameplayEffectContainerSpec, ReturnValue) == 0x000010, "Member 'FortGameplayAbility_MakeGameplayEffectContainerSpec::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.SetAIFocalPoint
// 0x0018 (0x0018 - 0x0000)
struct FortGameplayAbility_SetAIFocalPoint final
{
public:
	class AActor*                                 FocusTarget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FocalPoint;                                        // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAttackingPriority;                             // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameplayAbility_SetAIFocalPoint) == 0x000008, "Wrong alignment on FortGameplayAbility_SetAIFocalPoint");
static_assert(sizeof(FortGameplayAbility_SetAIFocalPoint) == 0x000018, "Wrong size on FortGameplayAbility_SetAIFocalPoint");
static_assert(offsetof(FortGameplayAbility_SetAIFocalPoint, FocusTarget) == 0x000000, "Member 'FortGameplayAbility_SetAIFocalPoint::FocusTarget' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_SetAIFocalPoint, FocalPoint) == 0x000008, "Member 'FortGameplayAbility_SetAIFocalPoint::FocalPoint' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_SetAIFocalPoint, bUseAttackingPriority) == 0x000014, "Member 'FortGameplayAbility_SetAIFocalPoint::bUseAttackingPriority' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.SetupPreviewImageOverride
// 0x0001 (0x0001 - 0x0000)
struct FortGameplayAbility_SetupPreviewImageOverride final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_SetupPreviewImageOverride) == 0x000001, "Wrong alignment on FortGameplayAbility_SetupPreviewImageOverride");
static_assert(sizeof(FortGameplayAbility_SetupPreviewImageOverride) == 0x000001, "Wrong size on FortGameplayAbility_SetupPreviewImageOverride");
static_assert(offsetof(FortGameplayAbility_SetupPreviewImageOverride, ReturnValue) == 0x000000, "Member 'FortGameplayAbility_SetupPreviewImageOverride::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.ApplyAccuracyToTargetLocation
// 0x0028 (0x0028 - 0x0000)
struct FortGameplayAbility_ApplyAccuracyToTargetLocation final
{
public:
	struct FVector                                SourceLocation;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x000C(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDesiredThrowAngle;                               // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x001C(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_ApplyAccuracyToTargetLocation) == 0x000004, "Wrong alignment on FortGameplayAbility_ApplyAccuracyToTargetLocation");
static_assert(sizeof(FortGameplayAbility_ApplyAccuracyToTargetLocation) == 0x000028, "Wrong size on FortGameplayAbility_ApplyAccuracyToTargetLocation");
static_assert(offsetof(FortGameplayAbility_ApplyAccuracyToTargetLocation, SourceLocation) == 0x000000, "Member 'FortGameplayAbility_ApplyAccuracyToTargetLocation::SourceLocation' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_ApplyAccuracyToTargetLocation, TargetLocation) == 0x00000C, "Member 'FortGameplayAbility_ApplyAccuracyToTargetLocation::TargetLocation' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_ApplyAccuracyToTargetLocation, InDesiredThrowAngle) == 0x000018, "Member 'FortGameplayAbility_ApplyAccuracyToTargetLocation::InDesiredThrowAngle' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_ApplyAccuracyToTargetLocation, ReturnValue) == 0x00001C, "Member 'FortGameplayAbility_ApplyAccuracyToTargetLocation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.DoesTargetHaveProhibitedTagsForAI
// 0x0010 (0x0010 - 0x0000)
struct FortGameplayAbility_DoesTargetHaveProhibitedTagsForAI final
{
public:
	const class AActor*                           Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameplayAbility_DoesTargetHaveProhibitedTagsForAI) == 0x000008, "Wrong alignment on FortGameplayAbility_DoesTargetHaveProhibitedTagsForAI");
static_assert(sizeof(FortGameplayAbility_DoesTargetHaveProhibitedTagsForAI) == 0x000010, "Wrong size on FortGameplayAbility_DoesTargetHaveProhibitedTagsForAI");
static_assert(offsetof(FortGameplayAbility_DoesTargetHaveProhibitedTagsForAI, Target) == 0x000000, "Member 'FortGameplayAbility_DoesTargetHaveProhibitedTagsForAI::Target' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_DoesTargetHaveProhibitedTagsForAI, ReturnValue) == 0x000008, "Member 'FortGameplayAbility_DoesTargetHaveProhibitedTagsForAI::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.DoesTargetHaveTags
// 0x0030 (0x0030 - 0x0000)
struct FortGameplayAbility_DoesTargetHaveTags final
{
public:
	const class AActor*                           Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Tags;                                              // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameplayAbility_DoesTargetHaveTags) == 0x000008, "Wrong alignment on FortGameplayAbility_DoesTargetHaveTags");
static_assert(sizeof(FortGameplayAbility_DoesTargetHaveTags) == 0x000030, "Wrong size on FortGameplayAbility_DoesTargetHaveTags");
static_assert(offsetof(FortGameplayAbility_DoesTargetHaveTags, Target) == 0x000000, "Member 'FortGameplayAbility_DoesTargetHaveTags::Target' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_DoesTargetHaveTags, Tags) == 0x000008, "Member 'FortGameplayAbility_DoesTargetHaveTags::Tags' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_DoesTargetHaveTags, ReturnValue) == 0x000028, "Member 'FortGameplayAbility_DoesTargetHaveTags::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.GetActivatingAbilityComponent
// 0x0008 (0x0008 - 0x0000)
struct FortGameplayAbility_GetActivatingAbilityComponent final
{
public:
	class UFortAbilitySystemComponent*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_GetActivatingAbilityComponent) == 0x000008, "Wrong alignment on FortGameplayAbility_GetActivatingAbilityComponent");
static_assert(sizeof(FortGameplayAbility_GetActivatingAbilityComponent) == 0x000008, "Wrong size on FortGameplayAbility_GetActivatingAbilityComponent");
static_assert(offsetof(FortGameplayAbility_GetActivatingAbilityComponent, ReturnValue) == 0x000000, "Member 'FortGameplayAbility_GetActivatingAbilityComponent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.GetActivatingPawn
// 0x0008 (0x0008 - 0x0000)
struct FortGameplayAbility_GetActivatingPawn final
{
public:
	class AFortPawn*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_GetActivatingPawn) == 0x000008, "Wrong alignment on FortGameplayAbility_GetActivatingPawn");
static_assert(sizeof(FortGameplayAbility_GetActivatingPawn) == 0x000008, "Wrong size on FortGameplayAbility_GetActivatingPawn");
static_assert(offsetof(FortGameplayAbility_GetActivatingPawn, ReturnValue) == 0x000000, "Member 'FortGameplayAbility_GetActivatingPawn::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.GetAIAbilityTarget
// 0x0008 (0x0008 - 0x0000)
struct FortGameplayAbility_GetAIAbilityTarget final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_GetAIAbilityTarget) == 0x000008, "Wrong alignment on FortGameplayAbility_GetAIAbilityTarget");
static_assert(sizeof(FortGameplayAbility_GetAIAbilityTarget) == 0x000008, "Wrong size on FortGameplayAbility_GetAIAbilityTarget");
static_assert(offsetof(FortGameplayAbility_GetAIAbilityTarget, ReturnValue) == 0x000000, "Member 'FortGameplayAbility_GetAIAbilityTarget::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.GetCurrentAbilitySourceLevel
// 0x0004 (0x0004 - 0x0000)
struct FortGameplayAbility_GetCurrentAbilitySourceLevel final
{
public:
	float                                         OutSourceLevel;                                    // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_GetCurrentAbilitySourceLevel) == 0x000004, "Wrong alignment on FortGameplayAbility_GetCurrentAbilitySourceLevel");
static_assert(sizeof(FortGameplayAbility_GetCurrentAbilitySourceLevel) == 0x000004, "Wrong size on FortGameplayAbility_GetCurrentAbilitySourceLevel");
static_assert(offsetof(FortGameplayAbility_GetCurrentAbilitySourceLevel, OutSourceLevel) == 0x000000, "Member 'FortGameplayAbility_GetCurrentAbilitySourceLevel::OutSourceLevel' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.GetCurrentSourceItemDefinition
// 0x0008 (0x0008 - 0x0000)
struct FortGameplayAbility_GetCurrentSourceItemDefinition final
{
public:
	class UFortWorldItemDefinition*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_GetCurrentSourceItemDefinition) == 0x000008, "Wrong alignment on FortGameplayAbility_GetCurrentSourceItemDefinition");
static_assert(sizeof(FortGameplayAbility_GetCurrentSourceItemDefinition) == 0x000008, "Wrong size on FortGameplayAbility_GetCurrentSourceItemDefinition");
static_assert(offsetof(FortGameplayAbility_GetCurrentSourceItemDefinition, ReturnValue) == 0x000000, "Member 'FortGameplayAbility_GetCurrentSourceItemDefinition::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.GetCurrentSourceWeapon
// 0x0008 (0x0008 - 0x0000)
struct FortGameplayAbility_GetCurrentSourceWeapon final
{
public:
	class AFortWeapon*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_GetCurrentSourceWeapon) == 0x000008, "Wrong alignment on FortGameplayAbility_GetCurrentSourceWeapon");
static_assert(sizeof(FortGameplayAbility_GetCurrentSourceWeapon) == 0x000008, "Wrong size on FortGameplayAbility_GetCurrentSourceWeapon");
static_assert(offsetof(FortGameplayAbility_GetCurrentSourceWeapon, ReturnValue) == 0x000000, "Member 'FortGameplayAbility_GetCurrentSourceWeapon::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.GetCustomAbilitySourceTransform
// 0x0030 (0x0030 - 0x0000)
struct FortGameplayAbility_GetCustomAbilitySourceTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_GetCustomAbilitySourceTransform) == 0x000010, "Wrong alignment on FortGameplayAbility_GetCustomAbilitySourceTransform");
static_assert(sizeof(FortGameplayAbility_GetCustomAbilitySourceTransform) == 0x000030, "Wrong size on FortGameplayAbility_GetCustomAbilitySourceTransform");
static_assert(offsetof(FortGameplayAbility_GetCustomAbilitySourceTransform, ReturnValue) == 0x000000, "Member 'FortGameplayAbility_GetCustomAbilitySourceTransform::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.GetDisplayStats
// 0x0008 (0x0008 - 0x0000)
struct FortGameplayAbility_GetDisplayStats final
{
public:
	class UFortTooltipDisplayStatsList*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_GetDisplayStats) == 0x000008, "Wrong alignment on FortGameplayAbility_GetDisplayStats");
static_assert(sizeof(FortGameplayAbility_GetDisplayStats) == 0x000008, "Wrong size on FortGameplayAbility_GetDisplayStats");
static_assert(offsetof(FortGameplayAbility_GetDisplayStats, ReturnValue) == 0x000000, "Member 'FortGameplayAbility_GetDisplayStats::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.GetFireLocation
// 0x000C (0x000C - 0x0000)
struct FortGameplayAbility_GetFireLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_GetFireLocation) == 0x000004, "Wrong alignment on FortGameplayAbility_GetFireLocation");
static_assert(sizeof(FortGameplayAbility_GetFireLocation) == 0x00000C, "Wrong size on FortGameplayAbility_GetFireLocation");
static_assert(offsetof(FortGameplayAbility_GetFireLocation, ReturnValue) == 0x000000, "Member 'FortGameplayAbility_GetFireLocation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.GetFireRotation
// 0x0010 (0x0010 - 0x0000)
struct FortGameplayAbility_GetFireRotation final
{
public:
	bool                                          bApplyLeading;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyInaccuracy;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyClampedMaxYawAngleToFire;                    // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_GetFireRotation) == 0x000004, "Wrong alignment on FortGameplayAbility_GetFireRotation");
static_assert(sizeof(FortGameplayAbility_GetFireRotation) == 0x000010, "Wrong size on FortGameplayAbility_GetFireRotation");
static_assert(offsetof(FortGameplayAbility_GetFireRotation, bApplyLeading) == 0x000000, "Member 'FortGameplayAbility_GetFireRotation::bApplyLeading' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_GetFireRotation, bApplyInaccuracy) == 0x000001, "Member 'FortGameplayAbility_GetFireRotation::bApplyInaccuracy' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_GetFireRotation, bApplyClampedMaxYawAngleToFire) == 0x000002, "Member 'FortGameplayAbility_GetFireRotation::bApplyClampedMaxYawAngleToFire' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_GetFireRotation, ReturnValue) == 0x000004, "Member 'FortGameplayAbility_GetFireRotation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.GetProjectileInitialValues
// 0x0028 (0x0028 - 0x0000)
struct FortGameplayAbility_GetProjectileInitialValues final
{
public:
	float                                         OutProjectileSpeed;                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OutSpawnDirection;                                 // 0x0004(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         OutProjectileGravity;                              // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 HomingTarget;                                      // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyInaccuracy;                                  // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyClampedMaxYawAngleToFire;                    // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyLeading;                                     // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameplayAbility_GetProjectileInitialValues) == 0x000008, "Wrong alignment on FortGameplayAbility_GetProjectileInitialValues");
static_assert(sizeof(FortGameplayAbility_GetProjectileInitialValues) == 0x000028, "Wrong size on FortGameplayAbility_GetProjectileInitialValues");
static_assert(offsetof(FortGameplayAbility_GetProjectileInitialValues, OutProjectileSpeed) == 0x000000, "Member 'FortGameplayAbility_GetProjectileInitialValues::OutProjectileSpeed' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_GetProjectileInitialValues, OutSpawnDirection) == 0x000004, "Member 'FortGameplayAbility_GetProjectileInitialValues::OutSpawnDirection' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_GetProjectileInitialValues, OutProjectileGravity) == 0x000010, "Member 'FortGameplayAbility_GetProjectileInitialValues::OutProjectileGravity' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_GetProjectileInitialValues, HomingTarget) == 0x000018, "Member 'FortGameplayAbility_GetProjectileInitialValues::HomingTarget' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_GetProjectileInitialValues, bApplyInaccuracy) == 0x000020, "Member 'FortGameplayAbility_GetProjectileInitialValues::bApplyInaccuracy' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_GetProjectileInitialValues, bApplyClampedMaxYawAngleToFire) == 0x000021, "Member 'FortGameplayAbility_GetProjectileInitialValues::bApplyClampedMaxYawAngleToFire' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_GetProjectileInitialValues, bApplyLeading) == 0x000022, "Member 'FortGameplayAbility_GetProjectileInitialValues::bApplyLeading' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.GetTooltip
// 0x0008 (0x0008 - 0x0000)
struct FortGameplayAbility_GetTooltip final
{
public:
	TSubclassOf<class UFortTooltip>               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_GetTooltip) == 0x000008, "Wrong alignment on FortGameplayAbility_GetTooltip");
static_assert(sizeof(FortGameplayAbility_GetTooltip) == 0x000008, "Wrong size on FortGameplayAbility_GetTooltip");
static_assert(offsetof(FortGameplayAbility_GetTooltip, ReturnValue) == 0x000000, "Member 'FortGameplayAbility_GetTooltip::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.IsTargetOutsideOfMaxYawRotation
// 0x0001 (0x0001 - 0x0000)
struct FortGameplayAbility_IsTargetOutsideOfMaxYawRotation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_IsTargetOutsideOfMaxYawRotation) == 0x000001, "Wrong alignment on FortGameplayAbility_IsTargetOutsideOfMaxYawRotation");
static_assert(sizeof(FortGameplayAbility_IsTargetOutsideOfMaxYawRotation) == 0x000001, "Wrong size on FortGameplayAbility_IsTargetOutsideOfMaxYawRotation");
static_assert(offsetof(FortGameplayAbility_IsTargetOutsideOfMaxYawRotation, ReturnValue) == 0x000000, "Member 'FortGameplayAbility_IsTargetOutsideOfMaxYawRotation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.K2_ShouldUseDecoTool
// 0x0048 (0x0048 - 0x0000)
struct FortGameplayAbility_K2_ShouldUseDecoTool final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0040)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameplayAbility_K2_ShouldUseDecoTool) == 0x000008, "Wrong alignment on FortGameplayAbility_K2_ShouldUseDecoTool");
static_assert(sizeof(FortGameplayAbility_K2_ShouldUseDecoTool) == 0x000048, "Wrong size on FortGameplayAbility_K2_ShouldUseDecoTool");
static_assert(offsetof(FortGameplayAbility_K2_ShouldUseDecoTool, ActorInfo) == 0x000000, "Member 'FortGameplayAbility_K2_ShouldUseDecoTool::ActorInfo' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_K2_ShouldUseDecoTool, ReturnValue) == 0x000040, "Member 'FortGameplayAbility_K2_ShouldUseDecoTool::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.QueryGameplayEffectContainerTargetExecutionModifiers
// 0x0070 (0x0070 - 0x0000)
struct FortGameplayAbility_QueryGameplayEffectContainerTargetExecutionModifiers final
{
public:
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	const class UFortAbilitySystemComponent*      SrcAbilitySystem;                                  // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ApplicationTag;                                    // 0x0028(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameplayEffectLevel;                               // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          SourceObject;                                      // 0x0038(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayEffectExecutionScopedModifierInfo> InScopedMods;                                      // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FActiveGameplayEffectHandle>    InIgnoreHandles;                                   // 0x0050(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGameplayModifierEvaluatedData> OutOutputModifiers;                                // 0x0060(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_QueryGameplayEffectContainerTargetExecutionModifiers) == 0x000008, "Wrong alignment on FortGameplayAbility_QueryGameplayEffectContainerTargetExecutionModifiers");
static_assert(sizeof(FortGameplayAbility_QueryGameplayEffectContainerTargetExecutionModifiers) == 0x000070, "Wrong size on FortGameplayAbility_QueryGameplayEffectContainerTargetExecutionModifiers");
static_assert(offsetof(FortGameplayAbility_QueryGameplayEffectContainerTargetExecutionModifiers, TargetData) == 0x000000, "Member 'FortGameplayAbility_QueryGameplayEffectContainerTargetExecutionModifiers::TargetData' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_QueryGameplayEffectContainerTargetExecutionModifiers, SrcAbilitySystem) == 0x000020, "Member 'FortGameplayAbility_QueryGameplayEffectContainerTargetExecutionModifiers::SrcAbilitySystem' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_QueryGameplayEffectContainerTargetExecutionModifiers, ApplicationTag) == 0x000028, "Member 'FortGameplayAbility_QueryGameplayEffectContainerTargetExecutionModifiers::ApplicationTag' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_QueryGameplayEffectContainerTargetExecutionModifiers, GameplayEffectLevel) == 0x000030, "Member 'FortGameplayAbility_QueryGameplayEffectContainerTargetExecutionModifiers::GameplayEffectLevel' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_QueryGameplayEffectContainerTargetExecutionModifiers, SourceObject) == 0x000038, "Member 'FortGameplayAbility_QueryGameplayEffectContainerTargetExecutionModifiers::SourceObject' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_QueryGameplayEffectContainerTargetExecutionModifiers, InScopedMods) == 0x000040, "Member 'FortGameplayAbility_QueryGameplayEffectContainerTargetExecutionModifiers::InScopedMods' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_QueryGameplayEffectContainerTargetExecutionModifiers, InIgnoreHandles) == 0x000050, "Member 'FortGameplayAbility_QueryGameplayEffectContainerTargetExecutionModifiers::InIgnoreHandles' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_QueryGameplayEffectContainerTargetExecutionModifiers, OutOutputModifiers) == 0x000060, "Member 'FortGameplayAbility_QueryGameplayEffectContainerTargetExecutionModifiers::OutOutputModifiers' has a wrong offset!");

// Function FortniteGame.FortDamageNumbersActor.OnNewDamageNumber
// 0x0068 (0x0068 - 0x0000)
struct FortDamageNumbersActor_OnNewDamageNumber final
{
public:
	struct FFortDamageNumberInfo                  NewDamageNumberInfo;                               // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDamageNumbersActor_OnNewDamageNumber) == 0x000008, "Wrong alignment on FortDamageNumbersActor_OnNewDamageNumber");
static_assert(sizeof(FortDamageNumbersActor_OnNewDamageNumber) == 0x000068, "Wrong size on FortDamageNumbersActor_OnNewDamageNumber");
static_assert(offsetof(FortDamageNumbersActor_OnNewDamageNumber, NewDamageNumberInfo) == 0x000000, "Member 'FortDamageNumbersActor_OnNewDamageNumber::NewDamageNumberInfo' has a wrong offset!");

// Function FortniteGame.FortDamageNumbersActor.SetMaterialParameters
// 0x00B0 (0x00B0 - 0x0000)
struct FortDamageNumbersActor_SetMaterialParameters final
{
public:
	struct FFortDamageNumberInfo                  NewDamageNumberInfo;                               // 0x0000(0x0068)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CameraTransform;                                   // 0x0070(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                NumberLocation;                                    // 0x00A0(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortDamageNumbersActor_SetMaterialParameters) == 0x000010, "Wrong alignment on FortDamageNumbersActor_SetMaterialParameters");
static_assert(sizeof(FortDamageNumbersActor_SetMaterialParameters) == 0x0000B0, "Wrong size on FortDamageNumbersActor_SetMaterialParameters");
static_assert(offsetof(FortDamageNumbersActor_SetMaterialParameters, NewDamageNumberInfo) == 0x000000, "Member 'FortDamageNumbersActor_SetMaterialParameters::NewDamageNumberInfo' has a wrong offset!");
static_assert(offsetof(FortDamageNumbersActor_SetMaterialParameters, CameraTransform) == 0x000070, "Member 'FortDamageNumbersActor_SetMaterialParameters::CameraTransform' has a wrong offset!");
static_assert(offsetof(FortDamageNumbersActor_SetMaterialParameters, NumberLocation) == 0x0000A0, "Member 'FortDamageNumbersActor_SetMaterialParameters::NumberLocation' has a wrong offset!");

// Function FortniteGame.FortDefenderItem.GetDefenderSubtype
// 0x0001 (0x0001 - 0x0000)
struct FortDefenderItem_GetDefenderSubtype final
{
public:
	EFortDefenderSubtype                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDefenderItem_GetDefenderSubtype) == 0x000001, "Wrong alignment on FortDefenderItem_GetDefenderSubtype");
static_assert(sizeof(FortDefenderItem_GetDefenderSubtype) == 0x000001, "Wrong size on FortDefenderItem_GetDefenderSubtype");
static_assert(offsetof(FortDefenderItem_GetDefenderSubtype, ReturnValue) == 0x000000, "Member 'FortDefenderItem_GetDefenderSubtype::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortFOBCoreDecoItemDefinition.GetMaximumHealth
// 0x0004 (0x0004 - 0x0000)
struct FortFOBCoreDecoItemDefinition_GetMaximumHealth final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFOBCoreDecoItemDefinition_GetMaximumHealth) == 0x000004, "Wrong alignment on FortFOBCoreDecoItemDefinition_GetMaximumHealth");
static_assert(sizeof(FortFOBCoreDecoItemDefinition_GetMaximumHealth) == 0x000004, "Wrong size on FortFOBCoreDecoItemDefinition_GetMaximumHealth");
static_assert(offsetof(FortFOBCoreDecoItemDefinition_GetMaximumHealth, ReturnValue) == 0x000000, "Member 'FortFOBCoreDecoItemDefinition_GetMaximumHealth::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDeployableBaseLibrary.ApplyTieredModifierSet
// 0x0030 (0x0030 - 0x0000)
struct FortDeployableBaseLibrary_ApplyTieredModifierSet final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTieredModifierSetData>         ModifierSetData;                                   // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Tier;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaveNum;                                           // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FActiveGameplayModifierHandle>  OutAppliedModifiers;                               // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDeployableBaseLibrary_ApplyTieredModifierSet) == 0x000008, "Wrong alignment on FortDeployableBaseLibrary_ApplyTieredModifierSet");
static_assert(sizeof(FortDeployableBaseLibrary_ApplyTieredModifierSet) == 0x000030, "Wrong size on FortDeployableBaseLibrary_ApplyTieredModifierSet");
static_assert(offsetof(FortDeployableBaseLibrary_ApplyTieredModifierSet, WorldContextObject) == 0x000000, "Member 'FortDeployableBaseLibrary_ApplyTieredModifierSet::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseLibrary_ApplyTieredModifierSet, ModifierSetData) == 0x000008, "Member 'FortDeployableBaseLibrary_ApplyTieredModifierSet::ModifierSetData' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseLibrary_ApplyTieredModifierSet, Tier) == 0x000018, "Member 'FortDeployableBaseLibrary_ApplyTieredModifierSet::Tier' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseLibrary_ApplyTieredModifierSet, WaveNum) == 0x00001C, "Member 'FortDeployableBaseLibrary_ApplyTieredModifierSet::WaveNum' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseLibrary_ApplyTieredModifierSet, OutAppliedModifiers) == 0x000020, "Member 'FortDeployableBaseLibrary_ApplyTieredModifierSet::OutAppliedModifiers' has a wrong offset!");

// Function FortniteGame.FortDeployableBaseLibrary.BroadcastHordeTierComplete
// 0x0010 (0x0010 - 0x0000)
struct FortDeployableBaseLibrary_BroadcastHordeTierComplete final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCompletionResult                         Result;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortDeployableBaseLibrary_BroadcastHordeTierComplete) == 0x000008, "Wrong alignment on FortDeployableBaseLibrary_BroadcastHordeTierComplete");
static_assert(sizeof(FortDeployableBaseLibrary_BroadcastHordeTierComplete) == 0x000010, "Wrong size on FortDeployableBaseLibrary_BroadcastHordeTierComplete");
static_assert(offsetof(FortDeployableBaseLibrary_BroadcastHordeTierComplete, WorldContextObject) == 0x000000, "Member 'FortDeployableBaseLibrary_BroadcastHordeTierComplete::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseLibrary_BroadcastHordeTierComplete, Result) == 0x000008, "Member 'FortDeployableBaseLibrary_BroadcastHordeTierComplete::Result' has a wrong offset!");

// Function FortniteGame.FortDeployableBaseLibrary.ForceClearAllDefenders
// 0x0008 (0x0008 - 0x0000)
struct FortDeployableBaseLibrary_ForceClearAllDefenders final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDeployableBaseLibrary_ForceClearAllDefenders) == 0x000008, "Wrong alignment on FortDeployableBaseLibrary_ForceClearAllDefenders");
static_assert(sizeof(FortDeployableBaseLibrary_ForceClearAllDefenders) == 0x000008, "Wrong size on FortDeployableBaseLibrary_ForceClearAllDefenders");
static_assert(offsetof(FortDeployableBaseLibrary_ForceClearAllDefenders, WorldContextObject) == 0x000000, "Member 'FortDeployableBaseLibrary_ForceClearAllDefenders::WorldContextObject' has a wrong offset!");

// Function FortniteGame.FortDeployableBaseLibrary.ForceDeployableBaseHordePlayersToResetAndRespawn
// 0x0008 (0x0008 - 0x0000)
struct FortDeployableBaseLibrary_ForceDeployableBaseHordePlayersToResetAndRespawn final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDeployableBaseLibrary_ForceDeployableBaseHordePlayersToResetAndRespawn) == 0x000008, "Wrong alignment on FortDeployableBaseLibrary_ForceDeployableBaseHordePlayersToResetAndRespawn");
static_assert(sizeof(FortDeployableBaseLibrary_ForceDeployableBaseHordePlayersToResetAndRespawn) == 0x000008, "Wrong size on FortDeployableBaseLibrary_ForceDeployableBaseHordePlayersToResetAndRespawn");
static_assert(offsetof(FortDeployableBaseLibrary_ForceDeployableBaseHordePlayersToResetAndRespawn, WorldContextObject) == 0x000000, "Member 'FortDeployableBaseLibrary_ForceDeployableBaseHordePlayersToResetAndRespawn::WorldContextObject' has a wrong offset!");

// Function FortniteGame.FortDeployableBaseLibrary.ForceRestartDeployableBasePlayers
// 0x0010 (0x0010 - 0x0000)
struct FortDeployableBaseLibrary_ForceRestartDeployableBasePlayers final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestartInvulnerable;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortDeployableBaseLibrary_ForceRestartDeployableBasePlayers) == 0x000008, "Wrong alignment on FortDeployableBaseLibrary_ForceRestartDeployableBasePlayers");
static_assert(sizeof(FortDeployableBaseLibrary_ForceRestartDeployableBasePlayers) == 0x000010, "Wrong size on FortDeployableBaseLibrary_ForceRestartDeployableBasePlayers");
static_assert(offsetof(FortDeployableBaseLibrary_ForceRestartDeployableBasePlayers, WorldContextObject) == 0x000000, "Member 'FortDeployableBaseLibrary_ForceRestartDeployableBasePlayers::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseLibrary_ForceRestartDeployableBasePlayers, bRestartInvulnerable) == 0x000008, "Member 'FortDeployableBaseLibrary_ForceRestartDeployableBasePlayers::bRestartInvulnerable' has a wrong offset!");

// Function FortniteGame.FortDeployableBaseLibrary.GetGameDifficultyInfo
// 0x0088 (0x0088 - 0x0000)
struct FortDeployableBaseLibrary_GetGameDifficultyInfo final
{
public:
	class FName                                   RowName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameDifficultyInfo                    ReturnValue;                                       // 0x0008(0x0080)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDeployableBaseLibrary_GetGameDifficultyInfo) == 0x000008, "Wrong alignment on FortDeployableBaseLibrary_GetGameDifficultyInfo");
static_assert(sizeof(FortDeployableBaseLibrary_GetGameDifficultyInfo) == 0x000088, "Wrong size on FortDeployableBaseLibrary_GetGameDifficultyInfo");
static_assert(offsetof(FortDeployableBaseLibrary_GetGameDifficultyInfo, RowName) == 0x000000, "Member 'FortDeployableBaseLibrary_GetGameDifficultyInfo::RowName' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseLibrary_GetGameDifficultyInfo, ReturnValue) == 0x000008, "Member 'FortDeployableBaseLibrary_GetGameDifficultyInfo::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDeployableBaseLibrary.GetHordeTierStartStatus
// 0x0010 (0x0010 - 0x0000)
struct FortDeployableBaseLibrary_GetHordeTierStartStatus final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHordeTierStartStatus                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortDeployableBaseLibrary_GetHordeTierStartStatus) == 0x000008, "Wrong alignment on FortDeployableBaseLibrary_GetHordeTierStartStatus");
static_assert(sizeof(FortDeployableBaseLibrary_GetHordeTierStartStatus) == 0x000010, "Wrong size on FortDeployableBaseLibrary_GetHordeTierStartStatus");
static_assert(offsetof(FortDeployableBaseLibrary_GetHordeTierStartStatus, WorldContextObject) == 0x000000, "Member 'FortDeployableBaseLibrary_GetHordeTierStartStatus::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseLibrary_GetHordeTierStartStatus, ReturnValue) == 0x000008, "Member 'FortDeployableBaseLibrary_GetHordeTierStartStatus::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDeployableBaseLibrary.GetPrimaryHordeMission
// 0x0010 (0x0010 - 0x0000)
struct FortDeployableBaseLibrary_GetPrimaryHordeMission final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortMission*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDeployableBaseLibrary_GetPrimaryHordeMission) == 0x000008, "Wrong alignment on FortDeployableBaseLibrary_GetPrimaryHordeMission");
static_assert(sizeof(FortDeployableBaseLibrary_GetPrimaryHordeMission) == 0x000010, "Wrong size on FortDeployableBaseLibrary_GetPrimaryHordeMission");
static_assert(offsetof(FortDeployableBaseLibrary_GetPrimaryHordeMission, WorldContextObject) == 0x000000, "Member 'FortDeployableBaseLibrary_GetPrimaryHordeMission::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseLibrary_GetPrimaryHordeMission, ReturnValue) == 0x000008, "Member 'FortDeployableBaseLibrary_GetPrimaryHordeMission::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDeployableBaseLibrary.GetTieredModifierSet
// 0x0018 (0x0018 - 0x0000)
struct FortDeployableBaseLibrary_GetTieredModifierSet final
{
public:
	class FName                                   TieredModifierSetName;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTieredModifierSetData>         OutModifierSetData;                                // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDeployableBaseLibrary_GetTieredModifierSet) == 0x000008, "Wrong alignment on FortDeployableBaseLibrary_GetTieredModifierSet");
static_assert(sizeof(FortDeployableBaseLibrary_GetTieredModifierSet) == 0x000018, "Wrong size on FortDeployableBaseLibrary_GetTieredModifierSet");
static_assert(offsetof(FortDeployableBaseLibrary_GetTieredModifierSet, TieredModifierSetName) == 0x000000, "Member 'FortDeployableBaseLibrary_GetTieredModifierSet::TieredModifierSetName' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseLibrary_GetTieredModifierSet, OutModifierSetData) == 0x000008, "Member 'FortDeployableBaseLibrary_GetTieredModifierSet::OutModifierSetData' has a wrong offset!");

// Function FortniteGame.FortDeployableBaseLibrary.GrantPlayersCompletedWaveRewards
// 0x0098 (0x0098 - 0x0000)
struct FortDeployableBaseLibrary_GrantPlayersCompletedWaveRewards final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Tier;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Wave;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfPlayers;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ADeployableBaseCore*>            TargetCores;                                       // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class ADeployableBaseCore*>            AllCores;                                          // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FFortTierCollectionLayoutOutput        CollectionData;                                    // 0x0038(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FName>                           TierGroups;                                        // 0x0088(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDeployableBaseLibrary_GrantPlayersCompletedWaveRewards) == 0x000008, "Wrong alignment on FortDeployableBaseLibrary_GrantPlayersCompletedWaveRewards");
static_assert(sizeof(FortDeployableBaseLibrary_GrantPlayersCompletedWaveRewards) == 0x000098, "Wrong size on FortDeployableBaseLibrary_GrantPlayersCompletedWaveRewards");
static_assert(offsetof(FortDeployableBaseLibrary_GrantPlayersCompletedWaveRewards, WorldContextObject) == 0x000000, "Member 'FortDeployableBaseLibrary_GrantPlayersCompletedWaveRewards::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseLibrary_GrantPlayersCompletedWaveRewards, Tier) == 0x000008, "Member 'FortDeployableBaseLibrary_GrantPlayersCompletedWaveRewards::Tier' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseLibrary_GrantPlayersCompletedWaveRewards, Wave) == 0x00000C, "Member 'FortDeployableBaseLibrary_GrantPlayersCompletedWaveRewards::Wave' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseLibrary_GrantPlayersCompletedWaveRewards, NumberOfPlayers) == 0x000010, "Member 'FortDeployableBaseLibrary_GrantPlayersCompletedWaveRewards::NumberOfPlayers' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseLibrary_GrantPlayersCompletedWaveRewards, TargetCores) == 0x000018, "Member 'FortDeployableBaseLibrary_GrantPlayersCompletedWaveRewards::TargetCores' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseLibrary_GrantPlayersCompletedWaveRewards, AllCores) == 0x000028, "Member 'FortDeployableBaseLibrary_GrantPlayersCompletedWaveRewards::AllCores' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseLibrary_GrantPlayersCompletedWaveRewards, CollectionData) == 0x000038, "Member 'FortDeployableBaseLibrary_GrantPlayersCompletedWaveRewards::CollectionData' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseLibrary_GrantPlayersCompletedWaveRewards, TierGroups) == 0x000088, "Member 'FortDeployableBaseLibrary_GrantPlayersCompletedWaveRewards::TierGroups' has a wrong offset!");

// Function FortniteGame.FortDeployableBaseLibrary.IsWorldItemDefValidToPersistForDeployableBasePlayerInventory
// 0x0010 (0x0010 - 0x0000)
struct FortDeployableBaseLibrary_IsWorldItemDefValidToPersistForDeployableBasePlayerInventory final
{
public:
	const class UFortWorldItemDefinition*         ItemDefinition;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortDeployableBaseLibrary_IsWorldItemDefValidToPersistForDeployableBasePlayerInventory) == 0x000008, "Wrong alignment on FortDeployableBaseLibrary_IsWorldItemDefValidToPersistForDeployableBasePlayerInventory");
static_assert(sizeof(FortDeployableBaseLibrary_IsWorldItemDefValidToPersistForDeployableBasePlayerInventory) == 0x000010, "Wrong size on FortDeployableBaseLibrary_IsWorldItemDefValidToPersistForDeployableBasePlayerInventory");
static_assert(offsetof(FortDeployableBaseLibrary_IsWorldItemDefValidToPersistForDeployableBasePlayerInventory, ItemDefinition) == 0x000000, "Member 'FortDeployableBaseLibrary_IsWorldItemDefValidToPersistForDeployableBasePlayerInventory::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseLibrary_IsWorldItemDefValidToPersistForDeployableBasePlayerInventory, ReturnValue) == 0x000008, "Member 'FortDeployableBaseLibrary_IsWorldItemDefValidToPersistForDeployableBasePlayerInventory::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDeployableBaseLibrary.OnPreHordeTierStart
// 0x0010 (0x0010 - 0x0000)
struct FortDeployableBaseLibrary_OnPreHordeTierStart final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Tier;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModifierRRVSeed;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDeployableBaseLibrary_OnPreHordeTierStart) == 0x000008, "Wrong alignment on FortDeployableBaseLibrary_OnPreHordeTierStart");
static_assert(sizeof(FortDeployableBaseLibrary_OnPreHordeTierStart) == 0x000010, "Wrong size on FortDeployableBaseLibrary_OnPreHordeTierStart");
static_assert(offsetof(FortDeployableBaseLibrary_OnPreHordeTierStart, WorldContextObject) == 0x000000, "Member 'FortDeployableBaseLibrary_OnPreHordeTierStart::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseLibrary_OnPreHordeTierStart, Tier) == 0x000008, "Member 'FortDeployableBaseLibrary_OnPreHordeTierStart::Tier' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseLibrary_OnPreHordeTierStart, ModifierRRVSeed) == 0x00000C, "Member 'FortDeployableBaseLibrary_OnPreHordeTierStart::ModifierRRVSeed' has a wrong offset!");

// Function FortniteGame.FortDeployableBaseLibrary.ResetDeployableBaseHordePlayerInventories
// 0x0008 (0x0008 - 0x0000)
struct FortDeployableBaseLibrary_ResetDeployableBaseHordePlayerInventories final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDeployableBaseLibrary_ResetDeployableBaseHordePlayerInventories) == 0x000008, "Wrong alignment on FortDeployableBaseLibrary_ResetDeployableBaseHordePlayerInventories");
static_assert(sizeof(FortDeployableBaseLibrary_ResetDeployableBaseHordePlayerInventories) == 0x000008, "Wrong size on FortDeployableBaseLibrary_ResetDeployableBaseHordePlayerInventories");
static_assert(offsetof(FortDeployableBaseLibrary_ResetDeployableBaseHordePlayerInventories, WorldContextObject) == 0x000000, "Member 'FortDeployableBaseLibrary_ResetDeployableBaseHordePlayerInventories::WorldContextObject' has a wrong offset!");

// Function FortniteGame.FortDeployableBaseLibrary.SetDeployableBaseMatchJoinability
// 0x0010 (0x0010 - 0x0000)
struct FortDeployableBaseLibrary_SetDeployableBaseMatchJoinability final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchJoinable;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortDeployableBaseLibrary_SetDeployableBaseMatchJoinability) == 0x000008, "Wrong alignment on FortDeployableBaseLibrary_SetDeployableBaseMatchJoinability");
static_assert(sizeof(FortDeployableBaseLibrary_SetDeployableBaseMatchJoinability) == 0x000010, "Wrong size on FortDeployableBaseLibrary_SetDeployableBaseMatchJoinability");
static_assert(offsetof(FortDeployableBaseLibrary_SetDeployableBaseMatchJoinability, WorldContextObject) == 0x000000, "Member 'FortDeployableBaseLibrary_SetDeployableBaseMatchJoinability::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseLibrary_SetDeployableBaseMatchJoinability, bMatchJoinable) == 0x000008, "Member 'FortDeployableBaseLibrary_SetDeployableBaseMatchJoinability::bMatchJoinable' has a wrong offset!");

// Function FortniteGame.FortDeployableBaseLibrary.SetupDeployableBaseCombatZoneInventoriesOnPlayers
// 0x0028 (0x0028 - 0x0000)
struct FortDeployableBaseLibrary_SetupDeployableBaseCombatZoneInventoriesOnPlayers final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           TierGroups;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AFortPlayerController*>          PlayerControllers;                                 // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDeployableBaseLibrary_SetupDeployableBaseCombatZoneInventoriesOnPlayers) == 0x000008, "Wrong alignment on FortDeployableBaseLibrary_SetupDeployableBaseCombatZoneInventoriesOnPlayers");
static_assert(sizeof(FortDeployableBaseLibrary_SetupDeployableBaseCombatZoneInventoriesOnPlayers) == 0x000028, "Wrong size on FortDeployableBaseLibrary_SetupDeployableBaseCombatZoneInventoriesOnPlayers");
static_assert(offsetof(FortDeployableBaseLibrary_SetupDeployableBaseCombatZoneInventoriesOnPlayers, WorldContextObject) == 0x000000, "Member 'FortDeployableBaseLibrary_SetupDeployableBaseCombatZoneInventoriesOnPlayers::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseLibrary_SetupDeployableBaseCombatZoneInventoriesOnPlayers, TierGroups) == 0x000008, "Member 'FortDeployableBaseLibrary_SetupDeployableBaseCombatZoneInventoriesOnPlayers::TierGroups' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseLibrary_SetupDeployableBaseCombatZoneInventoriesOnPlayers, PlayerControllers) == 0x000018, "Member 'FortDeployableBaseLibrary_SetupDeployableBaseCombatZoneInventoriesOnPlayers::PlayerControllers' has a wrong offset!");

// Function FortniteGame.FortDeployableBaseLibrary.UpdateDeployableBaseTierProgressionForPlayers
// 0x0018 (0x0018 - 0x0000)
struct FortDeployableBaseLibrary_UpdateDeployableBaseTierProgressionForPlayers final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTieredCollectionLayout*      CollectionLayout;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TierDefeated;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortDeployableBaseLibrary_UpdateDeployableBaseTierProgressionForPlayers) == 0x000008, "Wrong alignment on FortDeployableBaseLibrary_UpdateDeployableBaseTierProgressionForPlayers");
static_assert(sizeof(FortDeployableBaseLibrary_UpdateDeployableBaseTierProgressionForPlayers) == 0x000018, "Wrong size on FortDeployableBaseLibrary_UpdateDeployableBaseTierProgressionForPlayers");
static_assert(offsetof(FortDeployableBaseLibrary_UpdateDeployableBaseTierProgressionForPlayers, WorldContextObject) == 0x000000, "Member 'FortDeployableBaseLibrary_UpdateDeployableBaseTierProgressionForPlayers::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseLibrary_UpdateDeployableBaseTierProgressionForPlayers, CollectionLayout) == 0x000008, "Member 'FortDeployableBaseLibrary_UpdateDeployableBaseTierProgressionForPlayers::CollectionLayout' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseLibrary_UpdateDeployableBaseTierProgressionForPlayers, TierDefeated) == 0x000010, "Member 'FortDeployableBaseLibrary_UpdateDeployableBaseTierProgressionForPlayers::TierDefeated' has a wrong offset!");

// Function FortniteGame.FortDeployableBaseManager.GetCurrent
// 0x0010 (0x0010 - 0x0000)
struct FortDeployableBaseManager_GetCurrent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortDeployableBaseManager*             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDeployableBaseManager_GetCurrent) == 0x000008, "Wrong alignment on FortDeployableBaseManager_GetCurrent");
static_assert(sizeof(FortDeployableBaseManager_GetCurrent) == 0x000010, "Wrong size on FortDeployableBaseManager_GetCurrent");
static_assert(offsetof(FortDeployableBaseManager_GetCurrent, WorldContextObject) == 0x000000, "Member 'FortDeployableBaseManager_GetCurrent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseManager_GetCurrent, ReturnValue) == 0x000008, "Member 'FortDeployableBaseManager_GetCurrent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDeployableBaseManager.SetKeepDeployableBasesOnLogout
// 0x0001 (0x0001 - 0x0000)
struct FortDeployableBaseManager_SetKeepDeployableBasesOnLogout final
{
public:
	bool                                          bInKeepBasesOnLogout;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDeployableBaseManager_SetKeepDeployableBasesOnLogout) == 0x000001, "Wrong alignment on FortDeployableBaseManager_SetKeepDeployableBasesOnLogout");
static_assert(sizeof(FortDeployableBaseManager_SetKeepDeployableBasesOnLogout) == 0x000001, "Wrong size on FortDeployableBaseManager_SetKeepDeployableBasesOnLogout");
static_assert(offsetof(FortDeployableBaseManager_SetKeepDeployableBasesOnLogout, bInKeepBasesOnLogout) == 0x000000, "Member 'FortDeployableBaseManager_SetKeepDeployableBasesOnLogout::bInKeepBasesOnLogout' has a wrong offset!");

// Function FortniteGame.FortDeployableBaseManager.BroadcastHordeWaveStinger
// 0x0001 (0x0001 - 0x0000)
struct FortDeployableBaseManager_BroadcastHordeWaveStinger final
{
public:
	EHordeWaveStingerType                         StingerType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDeployableBaseManager_BroadcastHordeWaveStinger) == 0x000001, "Wrong alignment on FortDeployableBaseManager_BroadcastHordeWaveStinger");
static_assert(sizeof(FortDeployableBaseManager_BroadcastHordeWaveStinger) == 0x000001, "Wrong size on FortDeployableBaseManager_BroadcastHordeWaveStinger");
static_assert(offsetof(FortDeployableBaseManager_BroadcastHordeWaveStinger, StingerType) == 0x000000, "Member 'FortDeployableBaseManager_BroadcastHordeWaveStinger::StingerType' has a wrong offset!");

// Function FortniteGame.FortDeployableBaseManager.GetAllDeployableBasePlots
// 0x0010 (0x0010 - 0x0000)
struct FortDeployableBaseManager_GetAllDeployableBasePlots final
{
public:
	TArray<class ADeployableBasePlot*>            OutDeployableBasePlots;                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDeployableBaseManager_GetAllDeployableBasePlots) == 0x000008, "Wrong alignment on FortDeployableBaseManager_GetAllDeployableBasePlots");
static_assert(sizeof(FortDeployableBaseManager_GetAllDeployableBasePlots) == 0x000010, "Wrong size on FortDeployableBaseManager_GetAllDeployableBasePlots");
static_assert(offsetof(FortDeployableBaseManager_GetAllDeployableBasePlots, OutDeployableBasePlots) == 0x000000, "Member 'FortDeployableBaseManager_GetAllDeployableBasePlots::OutDeployableBasePlots' has a wrong offset!");

// Function FortniteGame.FortDeployableBaseManager.GetAvailableTiers
// 0x0010 (0x0010 - 0x0000)
struct FortDeployableBaseManager_GetAvailableTiers final
{
public:
	TArray<struct FAvailableTierLayout>           OutAvailableTiers;                                 // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDeployableBaseManager_GetAvailableTiers) == 0x000008, "Wrong alignment on FortDeployableBaseManager_GetAvailableTiers");
static_assert(sizeof(FortDeployableBaseManager_GetAvailableTiers) == 0x000010, "Wrong size on FortDeployableBaseManager_GetAvailableTiers");
static_assert(offsetof(FortDeployableBaseManager_GetAvailableTiers, OutAvailableTiers) == 0x000000, "Member 'FortDeployableBaseManager_GetAvailableTiers::OutAvailableTiers' has a wrong offset!");

// Function FortniteGame.FortDeployableBaseManager.GetDeployableBasePlotFromLocation
// 0x0018 (0x0018 - 0x0000)
struct FortDeployableBaseManager_GetDeployableBasePlotFromLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADeployableBasePlot*                    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDeployableBaseManager_GetDeployableBasePlotFromLocation) == 0x000008, "Wrong alignment on FortDeployableBaseManager_GetDeployableBasePlotFromLocation");
static_assert(sizeof(FortDeployableBaseManager_GetDeployableBasePlotFromLocation) == 0x000018, "Wrong size on FortDeployableBaseManager_GetDeployableBasePlotFromLocation");
static_assert(offsetof(FortDeployableBaseManager_GetDeployableBasePlotFromLocation, Location) == 0x000000, "Member 'FortDeployableBaseManager_GetDeployableBasePlotFromLocation::Location' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseManager_GetDeployableBasePlotFromLocation, ReturnValue) == 0x000010, "Member 'FortDeployableBaseManager_GetDeployableBasePlotFromLocation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDeployableBaseManager.GetDeployableBaseUseType
// 0x0001 (0x0001 - 0x0000)
struct FortDeployableBaseManager_GetDeployableBaseUseType final
{
public:
	EDeployableBaseUseType                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDeployableBaseManager_GetDeployableBaseUseType) == 0x000001, "Wrong alignment on FortDeployableBaseManager_GetDeployableBaseUseType");
static_assert(sizeof(FortDeployableBaseManager_GetDeployableBaseUseType) == 0x000001, "Wrong size on FortDeployableBaseManager_GetDeployableBaseUseType");
static_assert(offsetof(FortDeployableBaseManager_GetDeployableBaseUseType, ReturnValue) == 0x000000, "Member 'FortDeployableBaseManager_GetDeployableBaseUseType::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDeployableBaseManager.GetHighestDefeatedTierForPlayerAndLayout
// 0x0038 (0x0038 - 0x0000)
struct FortDeployableBaseManager_GetHighestDefeatedTierForPlayerAndLayout final
{
public:
	struct FUniqueNetIdRepl                       PlayerID;                                          // 0x0000(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTieredCollectionLayout*      Layout;                                            // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortDeployableBaseManager_GetHighestDefeatedTierForPlayerAndLayout) == 0x000008, "Wrong alignment on FortDeployableBaseManager_GetHighestDefeatedTierForPlayerAndLayout");
static_assert(sizeof(FortDeployableBaseManager_GetHighestDefeatedTierForPlayerAndLayout) == 0x000038, "Wrong size on FortDeployableBaseManager_GetHighestDefeatedTierForPlayerAndLayout");
static_assert(offsetof(FortDeployableBaseManager_GetHighestDefeatedTierForPlayerAndLayout, PlayerID) == 0x000000, "Member 'FortDeployableBaseManager_GetHighestDefeatedTierForPlayerAndLayout::PlayerID' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseManager_GetHighestDefeatedTierForPlayerAndLayout, Layout) == 0x000028, "Member 'FortDeployableBaseManager_GetHighestDefeatedTierForPlayerAndLayout::Layout' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseManager_GetHighestDefeatedTierForPlayerAndLayout, ReturnValue) == 0x000030, "Member 'FortDeployableBaseManager_GetHighestDefeatedTierForPlayerAndLayout::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDeployableBaseManager.GetTierOutputForSelectedTier
// 0x0068 (0x0068 - 0x0000)
struct FortDeployableBaseManager_GetTierOutputForSelectedTier final
{
public:
	int32                                         Tier;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UFortTieredCollectionLayout*      Layout;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortTierCollectionLayoutOutput        Output;                                            // 0x0010(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortDeployableBaseManager_GetTierOutputForSelectedTier) == 0x000008, "Wrong alignment on FortDeployableBaseManager_GetTierOutputForSelectedTier");
static_assert(sizeof(FortDeployableBaseManager_GetTierOutputForSelectedTier) == 0x000068, "Wrong size on FortDeployableBaseManager_GetTierOutputForSelectedTier");
static_assert(offsetof(FortDeployableBaseManager_GetTierOutputForSelectedTier, Tier) == 0x000000, "Member 'FortDeployableBaseManager_GetTierOutputForSelectedTier::Tier' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseManager_GetTierOutputForSelectedTier, Layout) == 0x000008, "Member 'FortDeployableBaseManager_GetTierOutputForSelectedTier::Layout' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseManager_GetTierOutputForSelectedTier, Output) == 0x000010, "Member 'FortDeployableBaseManager_GetTierOutputForSelectedTier::Output' has a wrong offset!");
static_assert(offsetof(FortDeployableBaseManager_GetTierOutputForSelectedTier, ReturnValue) == 0x000060, "Member 'FortDeployableBaseManager_GetTierOutputForSelectedTier::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDialogNotificationHandler.SetDialogDescription
// 0x0150 (0x0150 - 0x0000)
struct FortDialogNotificationHandler_SetDialogDescription final
{
public:
	struct FFortDialogDescription                 InDialogDescription;                               // 0x0000(0x0150)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDialogNotificationHandler_SetDialogDescription) == 0x000010, "Wrong alignment on FortDialogNotificationHandler_SetDialogDescription");
static_assert(sizeof(FortDialogNotificationHandler_SetDialogDescription) == 0x000150, "Wrong size on FortDialogNotificationHandler_SetDialogDescription");
static_assert(offsetof(FortDialogNotificationHandler_SetDialogDescription, InDialogDescription) == 0x000000, "Member 'FortDialogNotificationHandler_SetDialogDescription::InDialogDescription' has a wrong offset!");

// Function FortniteGame.FortEmoteItemDefinition.GetCommandName
// 0x0018 (0x0018 - 0x0000)
struct FortEmoteItemDefinition_GetCommandName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEmoteItemDefinition_GetCommandName) == 0x000008, "Wrong alignment on FortEmoteItemDefinition_GetCommandName");
static_assert(sizeof(FortEmoteItemDefinition_GetCommandName) == 0x000018, "Wrong size on FortEmoteItemDefinition_GetCommandName");
static_assert(offsetof(FortEmoteItemDefinition_GetCommandName, ReturnValue) == 0x000000, "Member 'FortEmoteItemDefinition_GetCommandName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortExpeditionItem.GetBonusCriteriaBP
// 0x0010 (0x0010 - 0x0000)
struct FortExpeditionItem_GetBonusCriteriaBP final
{
public:
	TArray<struct FFortCriteriaRequirementData>   OutBonusCriteria;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionItem_GetBonusCriteriaBP) == 0x000008, "Wrong alignment on FortExpeditionItem_GetBonusCriteriaBP");
static_assert(sizeof(FortExpeditionItem_GetBonusCriteriaBP) == 0x000010, "Wrong size on FortExpeditionItem_GetBonusCriteriaBP");
static_assert(offsetof(FortExpeditionItem_GetBonusCriteriaBP, OutBonusCriteria) == 0x000000, "Member 'FortExpeditionItem_GetBonusCriteriaBP::OutBonusCriteria' has a wrong offset!");

// Function FortniteGame.FortExpeditionItem.GetBonusCriteriaTags
// 0x0010 (0x0010 - 0x0000)
struct FortExpeditionItem_GetBonusCriteriaTags final
{
public:
	TArray<struct FGameplayTag>                   OutBonusCriteria;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionItem_GetBonusCriteriaTags) == 0x000008, "Wrong alignment on FortExpeditionItem_GetBonusCriteriaTags");
static_assert(sizeof(FortExpeditionItem_GetBonusCriteriaTags) == 0x000010, "Wrong size on FortExpeditionItem_GetBonusCriteriaTags");
static_assert(offsetof(FortExpeditionItem_GetBonusCriteriaTags, OutBonusCriteria) == 0x000000, "Member 'FortExpeditionItem_GetBonusCriteriaTags::OutBonusCriteria' has a wrong offset!");

// Function FortniteGame.FortExpeditionItem.GetExpeditionSquadId
// 0x0008 (0x0008 - 0x0000)
struct FortExpeditionItem_GetExpeditionSquadId final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionItem_GetExpeditionSquadId) == 0x000004, "Wrong alignment on FortExpeditionItem_GetExpeditionSquadId");
static_assert(sizeof(FortExpeditionItem_GetExpeditionSquadId) == 0x000008, "Wrong size on FortExpeditionItem_GetExpeditionSquadId");
static_assert(offsetof(FortExpeditionItem_GetExpeditionSquadId, ReturnValue) == 0x000000, "Member 'FortExpeditionItem_GetExpeditionSquadId::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortExpeditionItem.GetExpeditionSuccessChance
// 0x0004 (0x0004 - 0x0000)
struct FortExpeditionItem_GetExpeditionSuccessChance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionItem_GetExpeditionSuccessChance) == 0x000004, "Wrong alignment on FortExpeditionItem_GetExpeditionSuccessChance");
static_assert(sizeof(FortExpeditionItem_GetExpeditionSuccessChance) == 0x000004, "Wrong size on FortExpeditionItem_GetExpeditionSuccessChance");
static_assert(offsetof(FortExpeditionItem_GetExpeditionSuccessChance, ReturnValue) == 0x000000, "Member 'FortExpeditionItem_GetExpeditionSuccessChance::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortExpeditionItem.GetMinTargetPowerLevelToBegin
// 0x0004 (0x0004 - 0x0000)
struct FortExpeditionItem_GetMinTargetPowerLevelToBegin final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionItem_GetMinTargetPowerLevelToBegin) == 0x000004, "Wrong alignment on FortExpeditionItem_GetMinTargetPowerLevelToBegin");
static_assert(sizeof(FortExpeditionItem_GetMinTargetPowerLevelToBegin) == 0x000004, "Wrong size on FortExpeditionItem_GetMinTargetPowerLevelToBegin");
static_assert(offsetof(FortExpeditionItem_GetMinTargetPowerLevelToBegin, ReturnValue) == 0x000000, "Member 'FortExpeditionItem_GetMinTargetPowerLevelToBegin::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortExpeditionItem.GetRemainingExpeditionDuration
// 0x0010 (0x0010 - 0x0000)
struct FortExpeditionItem_GetRemainingExpeditionDuration final
{
public:
	struct FDateTime                              UtcNow;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionItem_GetRemainingExpeditionDuration) == 0x000008, "Wrong alignment on FortExpeditionItem_GetRemainingExpeditionDuration");
static_assert(sizeof(FortExpeditionItem_GetRemainingExpeditionDuration) == 0x000010, "Wrong size on FortExpeditionItem_GetRemainingExpeditionDuration");
static_assert(offsetof(FortExpeditionItem_GetRemainingExpeditionDuration, UtcNow) == 0x000000, "Member 'FortExpeditionItem_GetRemainingExpeditionDuration::UtcNow' has a wrong offset!");
static_assert(offsetof(FortExpeditionItem_GetRemainingExpeditionDuration, ReturnValue) == 0x000008, "Member 'FortExpeditionItem_GetRemainingExpeditionDuration::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortExpeditionItem.GetRemainingExpeditionExpirationDuration
// 0x0010 (0x0010 - 0x0000)
struct FortExpeditionItem_GetRemainingExpeditionExpirationDuration final
{
public:
	struct FDateTime                              UtcNow;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionItem_GetRemainingExpeditionExpirationDuration) == 0x000008, "Wrong alignment on FortExpeditionItem_GetRemainingExpeditionExpirationDuration");
static_assert(sizeof(FortExpeditionItem_GetRemainingExpeditionExpirationDuration) == 0x000010, "Wrong size on FortExpeditionItem_GetRemainingExpeditionExpirationDuration");
static_assert(offsetof(FortExpeditionItem_GetRemainingExpeditionExpirationDuration, UtcNow) == 0x000000, "Member 'FortExpeditionItem_GetRemainingExpeditionExpirationDuration::UtcNow' has a wrong offset!");
static_assert(offsetof(FortExpeditionItem_GetRemainingExpeditionExpirationDuration, ReturnValue) == 0x000008, "Member 'FortExpeditionItem_GetRemainingExpeditionExpirationDuration::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortExpeditionItem.GetTargetPowerLevel
// 0x0004 (0x0004 - 0x0000)
struct FortExpeditionItem_GetTargetPowerLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionItem_GetTargetPowerLevel) == 0x000004, "Wrong alignment on FortExpeditionItem_GetTargetPowerLevel");
static_assert(sizeof(FortExpeditionItem_GetTargetPowerLevel) == 0x000004, "Wrong size on FortExpeditionItem_GetTargetPowerLevel");
static_assert(offsetof(FortExpeditionItem_GetTargetPowerLevel, ReturnValue) == 0x000000, "Member 'FortExpeditionItem_GetTargetPowerLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortExpeditionItem.HasExpeditionExpired
// 0x0010 (0x0010 - 0x0000)
struct FortExpeditionItem_HasExpeditionExpired final
{
public:
	struct FDateTime                              UtcNow;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortExpeditionItem_HasExpeditionExpired) == 0x000008, "Wrong alignment on FortExpeditionItem_HasExpeditionExpired");
static_assert(sizeof(FortExpeditionItem_HasExpeditionExpired) == 0x000010, "Wrong size on FortExpeditionItem_HasExpeditionExpired");
static_assert(offsetof(FortExpeditionItem_HasExpeditionExpired, UtcNow) == 0x000000, "Member 'FortExpeditionItem_HasExpeditionExpired::UtcNow' has a wrong offset!");
static_assert(offsetof(FortExpeditionItem_HasExpeditionExpired, ReturnValue) == 0x000008, "Member 'FortExpeditionItem_HasExpeditionExpired::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortExpeditionItem.IsExpeditionCompleted
// 0x0010 (0x0010 - 0x0000)
struct FortExpeditionItem_IsExpeditionCompleted final
{
public:
	struct FDateTime                              UtcNow;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortExpeditionItem_IsExpeditionCompleted) == 0x000008, "Wrong alignment on FortExpeditionItem_IsExpeditionCompleted");
static_assert(sizeof(FortExpeditionItem_IsExpeditionCompleted) == 0x000010, "Wrong size on FortExpeditionItem_IsExpeditionCompleted");
static_assert(offsetof(FortExpeditionItem_IsExpeditionCompleted, UtcNow) == 0x000000, "Member 'FortExpeditionItem_IsExpeditionCompleted::UtcNow' has a wrong offset!");
static_assert(offsetof(FortExpeditionItem_IsExpeditionCompleted, ReturnValue) == 0x000008, "Member 'FortExpeditionItem_IsExpeditionCompleted::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortExpeditionItem.IsExpeditionInProgress
// 0x0001 (0x0001 - 0x0000)
struct FortExpeditionItem_IsExpeditionInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortExpeditionItem_IsExpeditionInProgress) == 0x000001, "Wrong alignment on FortExpeditionItem_IsExpeditionInProgress");
static_assert(sizeof(FortExpeditionItem_IsExpeditionInProgress) == 0x000001, "Wrong size on FortExpeditionItem_IsExpeditionInProgress");
static_assert(offsetof(FortExpeditionItem_IsExpeditionInProgress, ReturnValue) == 0x000000, "Member 'FortExpeditionItem_IsExpeditionInProgress::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGadgetItemDefinitionTooltip.GetNumericValue
// 0x0028 (0x0028 - 0x0000)
struct FortGadgetItemDefinitionTooltip_GetNumericValue final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVal;                                            // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGadgetItemDefinitionTooltip_GetNumericValue) == 0x000008, "Wrong alignment on FortGadgetItemDefinitionTooltip_GetNumericValue");
static_assert(sizeof(FortGadgetItemDefinitionTooltip_GetNumericValue) == 0x000028, "Wrong size on FortGadgetItemDefinitionTooltip_GetNumericValue");
static_assert(offsetof(FortGadgetItemDefinitionTooltip_GetNumericValue, ObjectToDescribe) == 0x000000, "Member 'FortGadgetItemDefinitionTooltip_GetNumericValue::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortGadgetItemDefinitionTooltip_GetNumericValue, Tag) == 0x000008, "Member 'FortGadgetItemDefinitionTooltip_GetNumericValue::Tag' has a wrong offset!");
static_assert(offsetof(FortGadgetItemDefinitionTooltip_GetNumericValue, Context) == 0x000010, "Member 'FortGadgetItemDefinitionTooltip_GetNumericValue::Context' has a wrong offset!");
static_assert(offsetof(FortGadgetItemDefinitionTooltip_GetNumericValue, Token) == 0x000018, "Member 'FortGadgetItemDefinitionTooltip_GetNumericValue::Token' has a wrong offset!");
static_assert(offsetof(FortGadgetItemDefinitionTooltip_GetNumericValue, OutVal) == 0x000020, "Member 'FortGadgetItemDefinitionTooltip_GetNumericValue::OutVal' has a wrong offset!");
static_assert(offsetof(FortGadgetItemDefinitionTooltip_GetNumericValue, ReturnValue) == 0x000024, "Member 'FortGadgetItemDefinitionTooltip_GetNumericValue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGadgetItemDefinitionTooltip.GetTextForToken
// 0x0040 (0x0040 - 0x0000)
struct FortGadgetItemDefinitionTooltip_GetTextForToken final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGadgetItemDefinitionTooltip_GetTextForToken) == 0x000008, "Wrong alignment on FortGadgetItemDefinitionTooltip_GetTextForToken");
static_assert(sizeof(FortGadgetItemDefinitionTooltip_GetTextForToken) == 0x000040, "Wrong size on FortGadgetItemDefinitionTooltip_GetTextForToken");
static_assert(offsetof(FortGadgetItemDefinitionTooltip_GetTextForToken, ObjectToDescribe) == 0x000000, "Member 'FortGadgetItemDefinitionTooltip_GetTextForToken::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortGadgetItemDefinitionTooltip_GetTextForToken, Tag) == 0x000008, "Member 'FortGadgetItemDefinitionTooltip_GetTextForToken::Tag' has a wrong offset!");
static_assert(offsetof(FortGadgetItemDefinitionTooltip_GetTextForToken, Context) == 0x000010, "Member 'FortGadgetItemDefinitionTooltip_GetTextForToken::Context' has a wrong offset!");
static_assert(offsetof(FortGadgetItemDefinitionTooltip_GetTextForToken, Token) == 0x000018, "Member 'FortGadgetItemDefinitionTooltip_GetTextForToken::Token' has a wrong offset!");
static_assert(offsetof(FortGadgetItemDefinitionTooltip_GetTextForToken, OutText) == 0x000020, "Member 'FortGadgetItemDefinitionTooltip_GetTextForToken::OutText' has a wrong offset!");
static_assert(offsetof(FortGadgetItemDefinitionTooltip_GetTextForToken, ReturnValue) == 0x000038, "Member 'FortGadgetItemDefinitionTooltip_GetTextForToken::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGadgetItemDefinitionTooltip.GetTokenizedDescriptionText
// 0x0030 (0x0030 - 0x0000)
struct FortGadgetItemDefinitionTooltip_GetTokenizedDescriptionText final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           OutDescription;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGadgetItemDefinitionTooltip_GetTokenizedDescriptionText) == 0x000008, "Wrong alignment on FortGadgetItemDefinitionTooltip_GetTokenizedDescriptionText");
static_assert(sizeof(FortGadgetItemDefinitionTooltip_GetTokenizedDescriptionText) == 0x000030, "Wrong size on FortGadgetItemDefinitionTooltip_GetTokenizedDescriptionText");
static_assert(offsetof(FortGadgetItemDefinitionTooltip_GetTokenizedDescriptionText, ObjectToDescribe) == 0x000000, "Member 'FortGadgetItemDefinitionTooltip_GetTokenizedDescriptionText::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortGadgetItemDefinitionTooltip_GetTokenizedDescriptionText, Tag) == 0x000008, "Member 'FortGadgetItemDefinitionTooltip_GetTokenizedDescriptionText::Tag' has a wrong offset!");
static_assert(offsetof(FortGadgetItemDefinitionTooltip_GetTokenizedDescriptionText, Context) == 0x000010, "Member 'FortGadgetItemDefinitionTooltip_GetTokenizedDescriptionText::Context' has a wrong offset!");
static_assert(offsetof(FortGadgetItemDefinitionTooltip_GetTokenizedDescriptionText, OutDescription) == 0x000018, "Member 'FortGadgetItemDefinitionTooltip_GetTokenizedDescriptionText::OutDescription' has a wrong offset!");
static_assert(offsetof(FortGadgetItemDefinitionTooltip_GetTokenizedDescriptionText, ReturnValue) == 0x000028, "Member 'FortGadgetItemDefinitionTooltip_GetTokenizedDescriptionText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGadgetItemTooltip.GetNumericValue
// 0x0028 (0x0028 - 0x0000)
struct FortGadgetItemTooltip_GetNumericValue final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVal;                                            // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGadgetItemTooltip_GetNumericValue) == 0x000008, "Wrong alignment on FortGadgetItemTooltip_GetNumericValue");
static_assert(sizeof(FortGadgetItemTooltip_GetNumericValue) == 0x000028, "Wrong size on FortGadgetItemTooltip_GetNumericValue");
static_assert(offsetof(FortGadgetItemTooltip_GetNumericValue, ObjectToDescribe) == 0x000000, "Member 'FortGadgetItemTooltip_GetNumericValue::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortGadgetItemTooltip_GetNumericValue, Tag) == 0x000008, "Member 'FortGadgetItemTooltip_GetNumericValue::Tag' has a wrong offset!");
static_assert(offsetof(FortGadgetItemTooltip_GetNumericValue, Context) == 0x000010, "Member 'FortGadgetItemTooltip_GetNumericValue::Context' has a wrong offset!");
static_assert(offsetof(FortGadgetItemTooltip_GetNumericValue, Token) == 0x000018, "Member 'FortGadgetItemTooltip_GetNumericValue::Token' has a wrong offset!");
static_assert(offsetof(FortGadgetItemTooltip_GetNumericValue, OutVal) == 0x000020, "Member 'FortGadgetItemTooltip_GetNumericValue::OutVal' has a wrong offset!");
static_assert(offsetof(FortGadgetItemTooltip_GetNumericValue, ReturnValue) == 0x000024, "Member 'FortGadgetItemTooltip_GetNumericValue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGadgetItemTooltip.GetTextForToken
// 0x0040 (0x0040 - 0x0000)
struct FortGadgetItemTooltip_GetTextForToken final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGadgetItemTooltip_GetTextForToken) == 0x000008, "Wrong alignment on FortGadgetItemTooltip_GetTextForToken");
static_assert(sizeof(FortGadgetItemTooltip_GetTextForToken) == 0x000040, "Wrong size on FortGadgetItemTooltip_GetTextForToken");
static_assert(offsetof(FortGadgetItemTooltip_GetTextForToken, ObjectToDescribe) == 0x000000, "Member 'FortGadgetItemTooltip_GetTextForToken::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortGadgetItemTooltip_GetTextForToken, Tag) == 0x000008, "Member 'FortGadgetItemTooltip_GetTextForToken::Tag' has a wrong offset!");
static_assert(offsetof(FortGadgetItemTooltip_GetTextForToken, Context) == 0x000010, "Member 'FortGadgetItemTooltip_GetTextForToken::Context' has a wrong offset!");
static_assert(offsetof(FortGadgetItemTooltip_GetTextForToken, Token) == 0x000018, "Member 'FortGadgetItemTooltip_GetTextForToken::Token' has a wrong offset!");
static_assert(offsetof(FortGadgetItemTooltip_GetTextForToken, OutText) == 0x000020, "Member 'FortGadgetItemTooltip_GetTextForToken::OutText' has a wrong offset!");
static_assert(offsetof(FortGadgetItemTooltip_GetTextForToken, ReturnValue) == 0x000038, "Member 'FortGadgetItemTooltip_GetTextForToken::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGadgetItemTooltip.GetTokenizedDescriptionText
// 0x0030 (0x0030 - 0x0000)
struct FortGadgetItemTooltip_GetTokenizedDescriptionText final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           OutDescription;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGadgetItemTooltip_GetTokenizedDescriptionText) == 0x000008, "Wrong alignment on FortGadgetItemTooltip_GetTokenizedDescriptionText");
static_assert(sizeof(FortGadgetItemTooltip_GetTokenizedDescriptionText) == 0x000030, "Wrong size on FortGadgetItemTooltip_GetTokenizedDescriptionText");
static_assert(offsetof(FortGadgetItemTooltip_GetTokenizedDescriptionText, ObjectToDescribe) == 0x000000, "Member 'FortGadgetItemTooltip_GetTokenizedDescriptionText::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortGadgetItemTooltip_GetTokenizedDescriptionText, Tag) == 0x000008, "Member 'FortGadgetItemTooltip_GetTokenizedDescriptionText::Tag' has a wrong offset!");
static_assert(offsetof(FortGadgetItemTooltip_GetTokenizedDescriptionText, Context) == 0x000010, "Member 'FortGadgetItemTooltip_GetTokenizedDescriptionText::Context' has a wrong offset!");
static_assert(offsetof(FortGadgetItemTooltip_GetTokenizedDescriptionText, OutDescription) == 0x000018, "Member 'FortGadgetItemTooltip_GetTokenizedDescriptionText::OutDescription' has a wrong offset!");
static_assert(offsetof(FortGadgetItemTooltip_GetTokenizedDescriptionText, ReturnValue) == 0x000028, "Member 'FortGadgetItemTooltip_GetTokenizedDescriptionText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameModeSurvival.FireEvent_SurvivalPeriodicReport
// 0x0018 (0x0018 - 0x0000)
struct FortGameModeSurvival_FireEvent_SurvivalPeriodicReport final
{
public:
	EFortReportDayPhase                           TimeOfReport;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABuildingActor*>                 ActorsBeingDefended;                               // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameModeSurvival_FireEvent_SurvivalPeriodicReport) == 0x000008, "Wrong alignment on FortGameModeSurvival_FireEvent_SurvivalPeriodicReport");
static_assert(sizeof(FortGameModeSurvival_FireEvent_SurvivalPeriodicReport) == 0x000018, "Wrong size on FortGameModeSurvival_FireEvent_SurvivalPeriodicReport");
static_assert(offsetof(FortGameModeSurvival_FireEvent_SurvivalPeriodicReport, TimeOfReport) == 0x000000, "Member 'FortGameModeSurvival_FireEvent_SurvivalPeriodicReport::TimeOfReport' has a wrong offset!");
static_assert(offsetof(FortGameModeSurvival_FireEvent_SurvivalPeriodicReport, ActorsBeingDefended) == 0x000008, "Member 'FortGameModeSurvival_FireEvent_SurvivalPeriodicReport::ActorsBeingDefended' has a wrong offset!");

// Function FortniteGame.FortGameModeSurvival.FireEvent_SurvivalVoteReport
// 0x0010 (0x0010 - 0x0000)
struct FortGameModeSurvival_FireEvent_SurvivalVoteReport final
{
public:
	TArray<class ABuildingActor*>                 ActorsBeingDefended;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameModeSurvival_FireEvent_SurvivalVoteReport) == 0x000008, "Wrong alignment on FortGameModeSurvival_FireEvent_SurvivalVoteReport");
static_assert(sizeof(FortGameModeSurvival_FireEvent_SurvivalVoteReport) == 0x000010, "Wrong size on FortGameModeSurvival_FireEvent_SurvivalVoteReport");
static_assert(offsetof(FortGameModeSurvival_FireEvent_SurvivalVoteReport, ActorsBeingDefended) == 0x000000, "Member 'FortGameModeSurvival_FireEvent_SurvivalVoteReport::ActorsBeingDefended' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility_AIPortal.GetPortalBuilding
// 0x0008 (0x0008 - 0x0000)
struct FortGameplayAbility_AIPortal_GetPortalBuilding final
{
public:
	class ABuildingSMActor*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_AIPortal_GetPortalBuilding) == 0x000008, "Wrong alignment on FortGameplayAbility_AIPortal_GetPortalBuilding");
static_assert(sizeof(FortGameplayAbility_AIPortal_GetPortalBuilding) == 0x000008, "Wrong size on FortGameplayAbility_AIPortal_GetPortalBuilding");
static_assert(offsetof(FortGameplayAbility_AIPortal_GetPortalBuilding, ReturnValue) == 0x000000, "Member 'FortGameplayAbility_AIPortal_GetPortalBuilding::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility_AIPortal.GetPortalInPoint
// 0x000C (0x000C - 0x0000)
struct FortGameplayAbility_AIPortal_GetPortalInPoint final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_AIPortal_GetPortalInPoint) == 0x000004, "Wrong alignment on FortGameplayAbility_AIPortal_GetPortalInPoint");
static_assert(sizeof(FortGameplayAbility_AIPortal_GetPortalInPoint) == 0x00000C, "Wrong size on FortGameplayAbility_AIPortal_GetPortalInPoint");
static_assert(offsetof(FortGameplayAbility_AIPortal_GetPortalInPoint, ReturnValue) == 0x000000, "Member 'FortGameplayAbility_AIPortal_GetPortalInPoint::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility_AIPortal.GetPortalOutPoint
// 0x000C (0x000C - 0x0000)
struct FortGameplayAbility_AIPortal_GetPortalOutPoint final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_AIPortal_GetPortalOutPoint) == 0x000004, "Wrong alignment on FortGameplayAbility_AIPortal_GetPortalOutPoint");
static_assert(sizeof(FortGameplayAbility_AIPortal_GetPortalOutPoint) == 0x00000C, "Wrong size on FortGameplayAbility_AIPortal_GetPortalOutPoint");
static_assert(offsetof(FortGameplayAbility_AIPortal_GetPortalOutPoint, ReturnValue) == 0x000000, "Member 'FortGameplayAbility_AIPortal_GetPortalOutPoint::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility_AIPortal.HasPortalOutPoint
// 0x0001 (0x0001 - 0x0000)
struct FortGameplayAbility_AIPortal_HasPortalOutPoint final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_AIPortal_HasPortalOutPoint) == 0x000001, "Wrong alignment on FortGameplayAbility_AIPortal_HasPortalOutPoint");
static_assert(sizeof(FortGameplayAbility_AIPortal_HasPortalOutPoint) == 0x000001, "Wrong size on FortGameplayAbility_AIPortal_HasPortalOutPoint");
static_assert(offsetof(FortGameplayAbility_AIPortal_HasPortalOutPoint, ReturnValue) == 0x000000, "Member 'FortGameplayAbility_AIPortal_HasPortalOutPoint::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility_AITurnTransition.GetTurnTransitionMontageSectionNameAndYawRotationRate
// 0x0010 (0x0010 - 0x0000)
struct FortGameplayAbility_AITurnTransition_GetTurnTransitionMontageSectionNameAndYawRotationRate final
{
public:
	class FName                                   MontageSectionName;                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnYawRotationRate;                               // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameplayAbility_AITurnTransition_GetTurnTransitionMontageSectionNameAndYawRotationRate) == 0x000004, "Wrong alignment on FortGameplayAbility_AITurnTransition_GetTurnTransitionMontageSectionNameAndYawRotationRate");
static_assert(sizeof(FortGameplayAbility_AITurnTransition_GetTurnTransitionMontageSectionNameAndYawRotationRate) == 0x000010, "Wrong size on FortGameplayAbility_AITurnTransition_GetTurnTransitionMontageSectionNameAndYawRotationRate");
static_assert(offsetof(FortGameplayAbility_AITurnTransition_GetTurnTransitionMontageSectionNameAndYawRotationRate, MontageSectionName) == 0x000000, "Member 'FortGameplayAbility_AITurnTransition_GetTurnTransitionMontageSectionNameAndYawRotationRate::MontageSectionName' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_AITurnTransition_GetTurnTransitionMontageSectionNameAndYawRotationRate, TurnYawRotationRate) == 0x000008, "Member 'FortGameplayAbility_AITurnTransition_GetTurnTransitionMontageSectionNameAndYawRotationRate::TurnYawRotationRate' has a wrong offset!");

// Function FortniteGame.FortGameplayAbilityTooltip.GetApplicationTag
// 0x0018 (0x0018 - 0x0000)
struct FortGameplayAbilityTooltip_GetApplicationTag final
{
public:
	const class UGameplayAbility*                 AbilityInstance;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           OutTag;                                            // 0x0008(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameplayAbilityTooltip_GetApplicationTag) == 0x000008, "Wrong alignment on FortGameplayAbilityTooltip_GetApplicationTag");
static_assert(sizeof(FortGameplayAbilityTooltip_GetApplicationTag) == 0x000018, "Wrong size on FortGameplayAbilityTooltip_GetApplicationTag");
static_assert(offsetof(FortGameplayAbilityTooltip_GetApplicationTag, AbilityInstance) == 0x000000, "Member 'FortGameplayAbilityTooltip_GetApplicationTag::AbilityInstance' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetApplicationTag, OutTag) == 0x000008, "Member 'FortGameplayAbilityTooltip_GetApplicationTag::OutTag' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetApplicationTag, ReturnValue) == 0x000010, "Member 'FortGameplayAbilityTooltip_GetApplicationTag::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbilityTooltip.GetNumericValue
// 0x0028 (0x0028 - 0x0000)
struct FortGameplayAbilityTooltip_GetNumericValue final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVal;                                            // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameplayAbilityTooltip_GetNumericValue) == 0x000008, "Wrong alignment on FortGameplayAbilityTooltip_GetNumericValue");
static_assert(sizeof(FortGameplayAbilityTooltip_GetNumericValue) == 0x000028, "Wrong size on FortGameplayAbilityTooltip_GetNumericValue");
static_assert(offsetof(FortGameplayAbilityTooltip_GetNumericValue, ObjectToDescribe) == 0x000000, "Member 'FortGameplayAbilityTooltip_GetNumericValue::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetNumericValue, Tag) == 0x000008, "Member 'FortGameplayAbilityTooltip_GetNumericValue::Tag' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetNumericValue, Context) == 0x000010, "Member 'FortGameplayAbilityTooltip_GetNumericValue::Context' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetNumericValue, Token) == 0x000018, "Member 'FortGameplayAbilityTooltip_GetNumericValue::Token' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetNumericValue, OutVal) == 0x000020, "Member 'FortGameplayAbilityTooltip_GetNumericValue::OutVal' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetNumericValue, ReturnValue) == 0x000024, "Member 'FortGameplayAbilityTooltip_GetNumericValue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbilityTooltip.GetTextForToken
// 0x0040 (0x0040 - 0x0000)
struct FortGameplayAbilityTooltip_GetTextForToken final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameplayAbilityTooltip_GetTextForToken) == 0x000008, "Wrong alignment on FortGameplayAbilityTooltip_GetTextForToken");
static_assert(sizeof(FortGameplayAbilityTooltip_GetTextForToken) == 0x000040, "Wrong size on FortGameplayAbilityTooltip_GetTextForToken");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForToken, ObjectToDescribe) == 0x000000, "Member 'FortGameplayAbilityTooltip_GetTextForToken::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForToken, Tag) == 0x000008, "Member 'FortGameplayAbilityTooltip_GetTextForToken::Tag' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForToken, Context) == 0x000010, "Member 'FortGameplayAbilityTooltip_GetTextForToken::Context' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForToken, Token) == 0x000018, "Member 'FortGameplayAbilityTooltip_GetTextForToken::Token' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForToken, OutText) == 0x000020, "Member 'FortGameplayAbilityTooltip_GetTextForToken::OutText' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForToken, ReturnValue) == 0x000038, "Member 'FortGameplayAbilityTooltip_GetTextForToken::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbilityTooltip.GetTextForTokenFromAbilityInstance
// 0x0040 (0x0040 - 0x0000)
struct FortGameplayAbilityTooltip_GetTextForTokenFromAbilityInstance final
{
public:
	const class UGameplayAbility*                 AbilityInstance;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilityInstance) == 0x000008, "Wrong alignment on FortGameplayAbilityTooltip_GetTextForTokenFromAbilityInstance");
static_assert(sizeof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilityInstance) == 0x000040, "Wrong size on FortGameplayAbilityTooltip_GetTextForTokenFromAbilityInstance");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilityInstance, AbilityInstance) == 0x000000, "Member 'FortGameplayAbilityTooltip_GetTextForTokenFromAbilityInstance::AbilityInstance' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilityInstance, Tag) == 0x000008, "Member 'FortGameplayAbilityTooltip_GetTextForTokenFromAbilityInstance::Tag' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilityInstance, Context) == 0x000010, "Member 'FortGameplayAbilityTooltip_GetTextForTokenFromAbilityInstance::Context' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilityInstance, Token) == 0x000018, "Member 'FortGameplayAbilityTooltip_GetTextForTokenFromAbilityInstance::Token' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilityInstance, OutText) == 0x000020, "Member 'FortGameplayAbilityTooltip_GetTextForTokenFromAbilityInstance::OutText' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilityInstance, ReturnValue) == 0x000038, "Member 'FortGameplayAbilityTooltip_GetTextForTokenFromAbilityInstance::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbilityTooltip.GetTextForTokenFromAbilityInstanceInternal
// 0x0040 (0x0040 - 0x0000)
struct FortGameplayAbilityTooltip_GetTextForTokenFromAbilityInstanceInternal final
{
public:
	const class UGameplayAbility*                 AbilityInstance;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilityInstanceInternal) == 0x000008, "Wrong alignment on FortGameplayAbilityTooltip_GetTextForTokenFromAbilityInstanceInternal");
static_assert(sizeof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilityInstanceInternal) == 0x000040, "Wrong size on FortGameplayAbilityTooltip_GetTextForTokenFromAbilityInstanceInternal");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilityInstanceInternal, AbilityInstance) == 0x000000, "Member 'FortGameplayAbilityTooltip_GetTextForTokenFromAbilityInstanceInternal::AbilityInstance' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilityInstanceInternal, Tag) == 0x000008, "Member 'FortGameplayAbilityTooltip_GetTextForTokenFromAbilityInstanceInternal::Tag' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilityInstanceInternal, Context) == 0x000010, "Member 'FortGameplayAbilityTooltip_GetTextForTokenFromAbilityInstanceInternal::Context' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilityInstanceInternal, Token) == 0x000018, "Member 'FortGameplayAbilityTooltip_GetTextForTokenFromAbilityInstanceInternal::Token' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilityInstanceInternal, OutText) == 0x000020, "Member 'FortGameplayAbilityTooltip_GetTextForTokenFromAbilityInstanceInternal::OutText' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilityInstanceInternal, ReturnValue) == 0x000038, "Member 'FortGameplayAbilityTooltip_GetTextForTokenFromAbilityInstanceInternal::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbilityTooltip.GetTextForTokenFromAbilitySpec
// 0x00B0 (0x00B0 - 0x0000)
struct FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpec final
{
public:
	struct FGameplayAbilitySpec                   Spec;                                              // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0078(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0080(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0088(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0090(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpec) == 0x000008, "Wrong alignment on FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpec");
static_assert(sizeof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpec) == 0x0000B0, "Wrong size on FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpec");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpec, Spec) == 0x000000, "Member 'FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpec::Spec' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpec, Tag) == 0x000078, "Member 'FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpec::Tag' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpec, Context) == 0x000080, "Member 'FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpec::Context' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpec, Token) == 0x000088, "Member 'FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpec::Token' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpec, OutText) == 0x000090, "Member 'FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpec::OutText' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpec, ReturnValue) == 0x0000A8, "Member 'FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpec::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbilityTooltip.GetTextForTokenFromAbilitySpecInternal
// 0x00B0 (0x00B0 - 0x0000)
struct FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpecInternal final
{
public:
	struct FGameplayAbilitySpec                   Spec;                                              // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0078(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0080(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0088(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0090(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpecInternal) == 0x000008, "Wrong alignment on FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpecInternal");
static_assert(sizeof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpecInternal) == 0x0000B0, "Wrong size on FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpecInternal");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpecInternal, Spec) == 0x000000, "Member 'FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpecInternal::Spec' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpecInternal, Tag) == 0x000078, "Member 'FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpecInternal::Tag' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpecInternal, Context) == 0x000080, "Member 'FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpecInternal::Context' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpecInternal, Token) == 0x000088, "Member 'FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpecInternal::Token' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpecInternal, OutText) == 0x000090, "Member 'FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpecInternal::OutText' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpecInternal, ReturnValue) == 0x0000A8, "Member 'FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpecInternal::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbilityTooltip.GetTokenizedDescriptionText
// 0x0030 (0x0030 - 0x0000)
struct FortGameplayAbilityTooltip_GetTokenizedDescriptionText final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           OutDescription;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameplayAbilityTooltip_GetTokenizedDescriptionText) == 0x000008, "Wrong alignment on FortGameplayAbilityTooltip_GetTokenizedDescriptionText");
static_assert(sizeof(FortGameplayAbilityTooltip_GetTokenizedDescriptionText) == 0x000030, "Wrong size on FortGameplayAbilityTooltip_GetTokenizedDescriptionText");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTokenizedDescriptionText, ObjectToDescribe) == 0x000000, "Member 'FortGameplayAbilityTooltip_GetTokenizedDescriptionText::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTokenizedDescriptionText, Tag) == 0x000008, "Member 'FortGameplayAbilityTooltip_GetTokenizedDescriptionText::Tag' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTokenizedDescriptionText, Context) == 0x000010, "Member 'FortGameplayAbilityTooltip_GetTokenizedDescriptionText::Context' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTokenizedDescriptionText, OutDescription) == 0x000018, "Member 'FortGameplayAbilityTooltip_GetTokenizedDescriptionText::OutDescription' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTokenizedDescriptionText, ReturnValue) == 0x000028, "Member 'FortGameplayAbilityTooltip_GetTokenizedDescriptionText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbilityTooltip.InitializeAbilityInstance
// 0x0010 (0x0010 - 0x0000)
struct FortGameplayAbilityTooltip_InitializeAbilityInstance final
{
public:
	const class UGameplayAbility*                 AbilityInstance;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbilityTooltip_InitializeAbilityInstance) == 0x000008, "Wrong alignment on FortGameplayAbilityTooltip_InitializeAbilityInstance");
static_assert(sizeof(FortGameplayAbilityTooltip_InitializeAbilityInstance) == 0x000010, "Wrong size on FortGameplayAbilityTooltip_InitializeAbilityInstance");
static_assert(offsetof(FortGameplayAbilityTooltip_InitializeAbilityInstance, AbilityInstance) == 0x000000, "Member 'FortGameplayAbilityTooltip_InitializeAbilityInstance::AbilityInstance' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_InitializeAbilityInstance, Context) == 0x000008, "Member 'FortGameplayAbilityTooltip_InitializeAbilityInstance::Context' has a wrong offset!");

// Function FortniteGame.FortGameplayAbilityTooltip.InitializeAbilityInstanceInternal
// 0x0010 (0x0010 - 0x0000)
struct FortGameplayAbilityTooltip_InitializeAbilityInstanceInternal final
{
public:
	const class UGameplayAbility*                 AbilityInstance;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbilityTooltip_InitializeAbilityInstanceInternal) == 0x000008, "Wrong alignment on FortGameplayAbilityTooltip_InitializeAbilityInstanceInternal");
static_assert(sizeof(FortGameplayAbilityTooltip_InitializeAbilityInstanceInternal) == 0x000010, "Wrong size on FortGameplayAbilityTooltip_InitializeAbilityInstanceInternal");
static_assert(offsetof(FortGameplayAbilityTooltip_InitializeAbilityInstanceInternal, AbilityInstance) == 0x000000, "Member 'FortGameplayAbilityTooltip_InitializeAbilityInstanceInternal::AbilityInstance' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_InitializeAbilityInstanceInternal, Context) == 0x000008, "Member 'FortGameplayAbilityTooltip_InitializeAbilityInstanceInternal::Context' has a wrong offset!");

// Function FortniteGame.FortGameplayCueNotify_Looping.OnStartParticleSystemSpawned
// 0x00C0 (0x00C0 - 0x0000)
struct FortGameplayCueNotify_Looping_OnStartParticleSystemSpawned final
{
public:
	class UParticleSystemComponent*               SpawnedParticleSysComponent;                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayCueNotify_Looping_OnStartParticleSystemSpawned) == 0x000008, "Wrong alignment on FortGameplayCueNotify_Looping_OnStartParticleSystemSpawned");
static_assert(sizeof(FortGameplayCueNotify_Looping_OnStartParticleSystemSpawned) == 0x0000C0, "Wrong size on FortGameplayCueNotify_Looping_OnStartParticleSystemSpawned");
static_assert(offsetof(FortGameplayCueNotify_Looping_OnStartParticleSystemSpawned, SpawnedParticleSysComponent) == 0x000000, "Member 'FortGameplayCueNotify_Looping_OnStartParticleSystemSpawned::SpawnedParticleSysComponent' has a wrong offset!");
static_assert(offsetof(FortGameplayCueNotify_Looping_OnStartParticleSystemSpawned, Parameters) == 0x000008, "Member 'FortGameplayCueNotify_Looping_OnStartParticleSystemSpawned::Parameters' has a wrong offset!");

// Function FortniteGame.FortGameplayCueNotify_Looping.OnStopParticleSystemSpawned
// 0x00C0 (0x00C0 - 0x0000)
struct FortGameplayCueNotify_Looping_OnStopParticleSystemSpawned final
{
public:
	class UParticleSystemComponent*               SpawnedParticleSysComponent;                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayCueNotify_Looping_OnStopParticleSystemSpawned) == 0x000008, "Wrong alignment on FortGameplayCueNotify_Looping_OnStopParticleSystemSpawned");
static_assert(sizeof(FortGameplayCueNotify_Looping_OnStopParticleSystemSpawned) == 0x0000C0, "Wrong size on FortGameplayCueNotify_Looping_OnStopParticleSystemSpawned");
static_assert(offsetof(FortGameplayCueNotify_Looping_OnStopParticleSystemSpawned, SpawnedParticleSysComponent) == 0x000000, "Member 'FortGameplayCueNotify_Looping_OnStopParticleSystemSpawned::SpawnedParticleSysComponent' has a wrong offset!");
static_assert(offsetof(FortGameplayCueNotify_Looping_OnStopParticleSystemSpawned, Parameters) == 0x000008, "Member 'FortGameplayCueNotify_Looping_OnStopParticleSystemSpawned::Parameters' has a wrong offset!");

// Function FortniteGame.FortGameplayCueNotify_Looping.OnWhileActiveParticleSystemActivate
// 0x00C0 (0x00C0 - 0x0000)
struct FortGameplayCueNotify_Looping_OnWhileActiveParticleSystemActivate final
{
public:
	class UParticleSystemComponent*               WhileActiveParticleSysComponent;                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayCueNotify_Looping_OnWhileActiveParticleSystemActivate) == 0x000008, "Wrong alignment on FortGameplayCueNotify_Looping_OnWhileActiveParticleSystemActivate");
static_assert(sizeof(FortGameplayCueNotify_Looping_OnWhileActiveParticleSystemActivate) == 0x0000C0, "Wrong size on FortGameplayCueNotify_Looping_OnWhileActiveParticleSystemActivate");
static_assert(offsetof(FortGameplayCueNotify_Looping_OnWhileActiveParticleSystemActivate, WhileActiveParticleSysComponent) == 0x000000, "Member 'FortGameplayCueNotify_Looping_OnWhileActiveParticleSystemActivate::WhileActiveParticleSysComponent' has a wrong offset!");
static_assert(offsetof(FortGameplayCueNotify_Looping_OnWhileActiveParticleSystemActivate, Parameters) == 0x000008, "Member 'FortGameplayCueNotify_Looping_OnWhileActiveParticleSystemActivate::Parameters' has a wrong offset!");

// Function FortniteGame.FortGameplayCueNotify_Looping.OnWhileActiveParticleSystemDeactivate
// 0x00C0 (0x00C0 - 0x0000)
struct FortGameplayCueNotify_Looping_OnWhileActiveParticleSystemDeactivate final
{
public:
	class UParticleSystemComponent*               WhileActiveParticleSysComponent;                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayCueNotify_Looping_OnWhileActiveParticleSystemDeactivate) == 0x000008, "Wrong alignment on FortGameplayCueNotify_Looping_OnWhileActiveParticleSystemDeactivate");
static_assert(sizeof(FortGameplayCueNotify_Looping_OnWhileActiveParticleSystemDeactivate) == 0x0000C0, "Wrong size on FortGameplayCueNotify_Looping_OnWhileActiveParticleSystemDeactivate");
static_assert(offsetof(FortGameplayCueNotify_Looping_OnWhileActiveParticleSystemDeactivate, WhileActiveParticleSysComponent) == 0x000000, "Member 'FortGameplayCueNotify_Looping_OnWhileActiveParticleSystemDeactivate::WhileActiveParticleSysComponent' has a wrong offset!");
static_assert(offsetof(FortGameplayCueNotify_Looping_OnWhileActiveParticleSystemDeactivate, Parameters) == 0x000008, "Member 'FortGameplayCueNotify_Looping_OnWhileActiveParticleSystemDeactivate::Parameters' has a wrong offset!");

// Function FortniteGame.FortGameplayCueNotify_Simple.OnStartParticleSystemSpawned
// 0x00C0 (0x00C0 - 0x0000)
struct FortGameplayCueNotify_Simple_OnStartParticleSystemSpawned final
{
public:
	class UParticleSystemComponent*               SpawnedParticleSysComponent;                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayCueNotify_Simple_OnStartParticleSystemSpawned) == 0x000008, "Wrong alignment on FortGameplayCueNotify_Simple_OnStartParticleSystemSpawned");
static_assert(sizeof(FortGameplayCueNotify_Simple_OnStartParticleSystemSpawned) == 0x0000C0, "Wrong size on FortGameplayCueNotify_Simple_OnStartParticleSystemSpawned");
static_assert(offsetof(FortGameplayCueNotify_Simple_OnStartParticleSystemSpawned, SpawnedParticleSysComponent) == 0x000000, "Member 'FortGameplayCueNotify_Simple_OnStartParticleSystemSpawned::SpawnedParticleSysComponent' has a wrong offset!");
static_assert(offsetof(FortGameplayCueNotify_Simple_OnStartParticleSystemSpawned, Parameters) == 0x000008, "Member 'FortGameplayCueNotify_Simple_OnStartParticleSystemSpawned::Parameters' has a wrong offset!");

// Function FortniteGame.FortGameStateAthena.OnRep_GamePhase
// 0x0001 (0x0001 - 0x0000)
struct FortGameStateAthena_OnRep_GamePhase final
{
public:
	EAthenaGamePhase                              OldGamePhase;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateAthena_OnRep_GamePhase) == 0x000001, "Wrong alignment on FortGameStateAthena_OnRep_GamePhase");
static_assert(sizeof(FortGameStateAthena_OnRep_GamePhase) == 0x000001, "Wrong size on FortGameStateAthena_OnRep_GamePhase");
static_assert(offsetof(FortGameStateAthena_OnRep_GamePhase, OldGamePhase) == 0x000000, "Member 'FortGameStateAthena_OnRep_GamePhase::OldGamePhase' has a wrong offset!");

// Function FortniteGame.FortGameStateAthena.GetAerialPhase
// 0x0010 (0x0010 - 0x0000)
struct FortGameStateAthena_GetAerialPhase final
{
public:
	class AFortPlayerControllerAthena*            PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAthenaAerialPhase                            ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameStateAthena_GetAerialPhase) == 0x000008, "Wrong alignment on FortGameStateAthena_GetAerialPhase");
static_assert(sizeof(FortGameStateAthena_GetAerialPhase) == 0x000010, "Wrong size on FortGameStateAthena_GetAerialPhase");
static_assert(offsetof(FortGameStateAthena_GetAerialPhase, PlayerController) == 0x000000, "Member 'FortGameStateAthena_GetAerialPhase::PlayerController' has a wrong offset!");
static_assert(offsetof(FortGameStateAthena_GetAerialPhase, ReturnValue) == 0x000008, "Member 'FortGameStateAthena_GetAerialPhase::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStateAthena.GetAircraft
// 0x0008 (0x0008 - 0x0000)
struct FortGameStateAthena_GetAircraft final
{
public:
	class AFortAthenaAircraft*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateAthena_GetAircraft) == 0x000008, "Wrong alignment on FortGameStateAthena_GetAircraft");
static_assert(sizeof(FortGameStateAthena_GetAircraft) == 0x000008, "Wrong size on FortGameStateAthena_GetAircraft");
static_assert(offsetof(FortGameStateAthena_GetAircraft, ReturnValue) == 0x000000, "Member 'FortGameStateAthena_GetAircraft::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStateAthena.GetBattleBusForPlayer
// 0x0010 (0x0010 - 0x0000)
struct FortGameStateAthena_GetBattleBusForPlayer final
{
public:
	class AFortPlayerControllerAthena*            PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAthenaBattleBusItemDefinition*         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateAthena_GetBattleBusForPlayer) == 0x000008, "Wrong alignment on FortGameStateAthena_GetBattleBusForPlayer");
static_assert(sizeof(FortGameStateAthena_GetBattleBusForPlayer) == 0x000010, "Wrong size on FortGameStateAthena_GetBattleBusForPlayer");
static_assert(offsetof(FortGameStateAthena_GetBattleBusForPlayer, PC) == 0x000000, "Member 'FortGameStateAthena_GetBattleBusForPlayer::PC' has a wrong offset!");
static_assert(offsetof(FortGameStateAthena_GetBattleBusForPlayer, ReturnValue) == 0x000008, "Member 'FortGameStateAthena_GetBattleBusForPlayer::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStateAthena.GetSafeZoneIndicator
// 0x0008 (0x0008 - 0x0000)
struct FortGameStateAthena_GetSafeZoneIndicator final
{
public:
	class AFortSafeZoneIndicator*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateAthena_GetSafeZoneIndicator) == 0x000008, "Wrong alignment on FortGameStateAthena_GetSafeZoneIndicator");
static_assert(sizeof(FortGameStateAthena_GetSafeZoneIndicator) == 0x000008, "Wrong size on FortGameStateAthena_GetSafeZoneIndicator");
static_assert(offsetof(FortGameStateAthena_GetSafeZoneIndicator, ReturnValue) == 0x000000, "Member 'FortGameStateAthena_GetSafeZoneIndicator::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStateDeployableBase.SetGameDifficultyExplicitly
// 0x0004 (0x0004 - 0x0000)
struct FortGameStateDeployableBase_SetGameDifficultyExplicitly final
{
public:
	float                                         InGameDifficulty;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateDeployableBase_SetGameDifficultyExplicitly) == 0x000004, "Wrong alignment on FortGameStateDeployableBase_SetGameDifficultyExplicitly");
static_assert(sizeof(FortGameStateDeployableBase_SetGameDifficultyExplicitly) == 0x000004, "Wrong size on FortGameStateDeployableBase_SetGameDifficultyExplicitly");
static_assert(offsetof(FortGameStateDeployableBase_SetGameDifficultyExplicitly, InGameDifficulty) == 0x000000, "Member 'FortGameStateDeployableBase_SetGameDifficultyExplicitly::InGameDifficulty' has a wrong offset!");

// Function FortniteGame.FortGameStateDeployableBase.SetGameDifficultyRow
// 0x0010 (0x0010 - 0x0000)
struct FortGameStateDeployableBase_SetGameDifficultyRow final
{
public:
	struct FDataTableRowHandle                    GameDifficultyInfo;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateDeployableBase_SetGameDifficultyRow) == 0x000008, "Wrong alignment on FortGameStateDeployableBase_SetGameDifficultyRow");
static_assert(sizeof(FortGameStateDeployableBase_SetGameDifficultyRow) == 0x000010, "Wrong size on FortGameStateDeployableBase_SetGameDifficultyRow");
static_assert(offsetof(FortGameStateDeployableBase_SetGameDifficultyRow, GameDifficultyInfo) == 0x000000, "Member 'FortGameStateDeployableBase_SetGameDifficultyRow::GameDifficultyInfo' has a wrong offset!");

// Function FortniteGame.FortGameStateDeployableBase.GetDeployableBaseUseType
// 0x0001 (0x0001 - 0x0000)
struct FortGameStateDeployableBase_GetDeployableBaseUseType final
{
public:
	EDeployableBaseUseType                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateDeployableBase_GetDeployableBaseUseType) == 0x000001, "Wrong alignment on FortGameStateDeployableBase_GetDeployableBaseUseType");
static_assert(sizeof(FortGameStateDeployableBase_GetDeployableBaseUseType) == 0x000001, "Wrong size on FortGameStateDeployableBase_GetDeployableBaseUseType");
static_assert(offsetof(FortGameStateDeployableBase_GetDeployableBaseUseType, ReturnValue) == 0x000000, "Member 'FortGameStateDeployableBase_GetDeployableBaseUseType::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStateFOB.SetGameDifficultyExplicitly
// 0x0004 (0x0004 - 0x0000)
struct FortGameStateFOB_SetGameDifficultyExplicitly final
{
public:
	float                                         InGameDifficulty;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateFOB_SetGameDifficultyExplicitly) == 0x000004, "Wrong alignment on FortGameStateFOB_SetGameDifficultyExplicitly");
static_assert(sizeof(FortGameStateFOB_SetGameDifficultyExplicitly) == 0x000004, "Wrong size on FortGameStateFOB_SetGameDifficultyExplicitly");
static_assert(offsetof(FortGameStateFOB_SetGameDifficultyExplicitly, InGameDifficulty) == 0x000000, "Member 'FortGameStateFOB_SetGameDifficultyExplicitly::InGameDifficulty' has a wrong offset!");

// Function FortniteGame.FortGameStateFOB.SetGameDifficultyRow
// 0x0010 (0x0010 - 0x0000)
struct FortGameStateFOB_SetGameDifficultyRow final
{
public:
	struct FDataTableRowHandle                    GameDifficultyInfo;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateFOB_SetGameDifficultyRow) == 0x000008, "Wrong alignment on FortGameStateFOB_SetGameDifficultyRow");
static_assert(sizeof(FortGameStateFOB_SetGameDifficultyRow) == 0x000010, "Wrong size on FortGameStateFOB_SetGameDifficultyRow");
static_assert(offsetof(FortGameStateFOB_SetGameDifficultyRow, GameDifficultyInfo) == 0x000000, "Member 'FortGameStateFOB_SetGameDifficultyRow::GameDifficultyInfo' has a wrong offset!");

// Function FortniteGame.FortGameStateOutpost.SetGameDifficultyRow
// 0x0010 (0x0010 - 0x0000)
struct FortGameStateOutpost_SetGameDifficultyRow final
{
public:
	struct FDataTableRowHandle                    GameDifficultyInfo;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateOutpost_SetGameDifficultyRow) == 0x000008, "Wrong alignment on FortGameStateOutpost_SetGameDifficultyRow");
static_assert(sizeof(FortGameStateOutpost_SetGameDifficultyRow) == 0x000010, "Wrong size on FortGameStateOutpost_SetGameDifficultyRow");
static_assert(offsetof(FortGameStateOutpost_SetGameDifficultyRow, GameDifficultyInfo) == 0x000000, "Member 'FortGameStateOutpost_SetGameDifficultyRow::GameDifficultyInfo' has a wrong offset!");

// Function FortniteGame.FortGameStatePvPBaseDestruction.GetExperienceRequiredForTeamLevel
// 0x0008 (0x0008 - 0x0000)
struct FortGameStatePvPBaseDestruction_GetExperienceRequiredForTeamLevel final
{
public:
	int32                                         TeamLevel;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStatePvPBaseDestruction_GetExperienceRequiredForTeamLevel) == 0x000004, "Wrong alignment on FortGameStatePvPBaseDestruction_GetExperienceRequiredForTeamLevel");
static_assert(sizeof(FortGameStatePvPBaseDestruction_GetExperienceRequiredForTeamLevel) == 0x000008, "Wrong size on FortGameStatePvPBaseDestruction_GetExperienceRequiredForTeamLevel");
static_assert(offsetof(FortGameStatePvPBaseDestruction_GetExperienceRequiredForTeamLevel, TeamLevel) == 0x000000, "Member 'FortGameStatePvPBaseDestruction_GetExperienceRequiredForTeamLevel::TeamLevel' has a wrong offset!");
static_assert(offsetof(FortGameStatePvPBaseDestruction_GetExperienceRequiredForTeamLevel, ReturnValue) == 0x000004, "Member 'FortGameStatePvPBaseDestruction_GetExperienceRequiredForTeamLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStatePvPBaseDestruction.GetMaxTeamExperience
// 0x0004 (0x0004 - 0x0000)
struct FortGameStatePvPBaseDestruction_GetMaxTeamExperience final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStatePvPBaseDestruction_GetMaxTeamExperience) == 0x000004, "Wrong alignment on FortGameStatePvPBaseDestruction_GetMaxTeamExperience");
static_assert(sizeof(FortGameStatePvPBaseDestruction_GetMaxTeamExperience) == 0x000004, "Wrong size on FortGameStatePvPBaseDestruction_GetMaxTeamExperience");
static_assert(offsetof(FortGameStatePvPBaseDestruction_GetMaxTeamExperience, ReturnValue) == 0x000000, "Member 'FortGameStatePvPBaseDestruction_GetMaxTeamExperience::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStatePvPBaseDestruction.GetMaxTeamLevel
// 0x0004 (0x0004 - 0x0000)
struct FortGameStatePvPBaseDestruction_GetMaxTeamLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStatePvPBaseDestruction_GetMaxTeamLevel) == 0x000004, "Wrong alignment on FortGameStatePvPBaseDestruction_GetMaxTeamLevel");
static_assert(sizeof(FortGameStatePvPBaseDestruction_GetMaxTeamLevel) == 0x000004, "Wrong size on FortGameStatePvPBaseDestruction_GetMaxTeamLevel");
static_assert(offsetof(FortGameStatePvPBaseDestruction_GetMaxTeamLevel, ReturnValue) == 0x000000, "Member 'FortGameStatePvPBaseDestruction_GetMaxTeamLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStatePvPBaseDestruction.GetTeamLevelForExperienceAmount
// 0x0008 (0x0008 - 0x0000)
struct FortGameStatePvPBaseDestruction_GetTeamLevelForExperienceAmount final
{
public:
	int32                                         Experience;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStatePvPBaseDestruction_GetTeamLevelForExperienceAmount) == 0x000004, "Wrong alignment on FortGameStatePvPBaseDestruction_GetTeamLevelForExperienceAmount");
static_assert(sizeof(FortGameStatePvPBaseDestruction_GetTeamLevelForExperienceAmount) == 0x000008, "Wrong size on FortGameStatePvPBaseDestruction_GetTeamLevelForExperienceAmount");
static_assert(offsetof(FortGameStatePvPBaseDestruction_GetTeamLevelForExperienceAmount, Experience) == 0x000000, "Member 'FortGameStatePvPBaseDestruction_GetTeamLevelForExperienceAmount::Experience' has a wrong offset!");
static_assert(offsetof(FortGameStatePvPBaseDestruction_GetTeamLevelForExperienceAmount, ReturnValue) == 0x000004, "Member 'FortGameStatePvPBaseDestruction_GetTeamLevelForExperienceAmount::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStateSurvival.SetGameDifficultyRow
// 0x0010 (0x0010 - 0x0000)
struct FortGameStateSurvival_SetGameDifficultyRow final
{
public:
	struct FDataTableRowHandle                    GameDifficultyInfo;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateSurvival_SetGameDifficultyRow) == 0x000008, "Wrong alignment on FortGameStateSurvival_SetGameDifficultyRow");
static_assert(sizeof(FortGameStateSurvival_SetGameDifficultyRow) == 0x000010, "Wrong size on FortGameStateSurvival_SetGameDifficultyRow");
static_assert(offsetof(FortGameStateSurvival_SetGameDifficultyRow, GameDifficultyInfo) == 0x000000, "Member 'FortGameStateSurvival_SetGameDifficultyRow::GameDifficultyInfo' has a wrong offset!");

// Function FortniteGame.FortGlobals.AreFriendCodesEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortGlobals_AreFriendCodesEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobals_AreFriendCodesEnabled) == 0x000001, "Wrong alignment on FortGlobals_AreFriendCodesEnabled");
static_assert(sizeof(FortGlobals_AreFriendCodesEnabled) == 0x000001, "Wrong size on FortGlobals_AreFriendCodesEnabled");
static_assert(offsetof(FortGlobals_AreFriendCodesEnabled, ReturnValue) == 0x000000, "Member 'FortGlobals_AreFriendCodesEnabled::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGlobals.GetAccountLinkingUIConfig
// 0x0001 (0x0001 - 0x0000)
struct FortGlobals_GetAccountLinkingUIConfig final
{
public:
	EFortAccountLinkingUIConfig                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobals_GetAccountLinkingUIConfig) == 0x000001, "Wrong alignment on FortGlobals_GetAccountLinkingUIConfig");
static_assert(sizeof(FortGlobals_GetAccountLinkingUIConfig) == 0x000001, "Wrong size on FortGlobals_GetAccountLinkingUIConfig");
static_assert(offsetof(FortGlobals_GetAccountLinkingUIConfig, ReturnValue) == 0x000000, "Member 'FortGlobals_GetAccountLinkingUIConfig::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGlobals.GetAccountLinkingUIURL
// 0x0010 (0x0010 - 0x0000)
struct FortGlobals_GetAccountLinkingUIURL final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobals_GetAccountLinkingUIURL) == 0x000008, "Wrong alignment on FortGlobals_GetAccountLinkingUIURL");
static_assert(sizeof(FortGlobals_GetAccountLinkingUIURL) == 0x000010, "Wrong size on FortGlobals_GetAccountLinkingUIURL");
static_assert(offsetof(FortGlobals_GetAccountLinkingUIURL, ReturnValue) == 0x000000, "Member 'FortGlobals_GetAccountLinkingUIURL::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGlobals.GetMaxTheaterListRefreshDelay
// 0x0004 (0x0004 - 0x0000)
struct FortGlobals_GetMaxTheaterListRefreshDelay final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobals_GetMaxTheaterListRefreshDelay) == 0x000004, "Wrong alignment on FortGlobals_GetMaxTheaterListRefreshDelay");
static_assert(sizeof(FortGlobals_GetMaxTheaterListRefreshDelay) == 0x000004, "Wrong size on FortGlobals_GetMaxTheaterListRefreshDelay");
static_assert(offsetof(FortGlobals_GetMaxTheaterListRefreshDelay, ReturnValue) == 0x000000, "Member 'FortGlobals_GetMaxTheaterListRefreshDelay::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGlobals.GetMinTheaterListRefreshDelay
// 0x0004 (0x0004 - 0x0000)
struct FortGlobals_GetMinTheaterListRefreshDelay final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobals_GetMinTheaterListRefreshDelay) == 0x000004, "Wrong alignment on FortGlobals_GetMinTheaterListRefreshDelay");
static_assert(sizeof(FortGlobals_GetMinTheaterListRefreshDelay) == 0x000004, "Wrong size on FortGlobals_GetMinTheaterListRefreshDelay");
static_assert(offsetof(FortGlobals_GetMinTheaterListRefreshDelay, ReturnValue) == 0x000000, "Member 'FortGlobals_GetMinTheaterListRefreshDelay::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGlobals.Is50v50CalenderEventEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortGlobals_Is50v50CalenderEventEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobals_Is50v50CalenderEventEnabled) == 0x000001, "Wrong alignment on FortGlobals_Is50v50CalenderEventEnabled");
static_assert(sizeof(FortGlobals_Is50v50CalenderEventEnabled) == 0x000001, "Wrong size on FortGlobals_Is50v50CalenderEventEnabled");
static_assert(offsetof(FortGlobals_Is50v50CalenderEventEnabled, ReturnValue) == 0x000000, "Member 'FortGlobals_Is50v50CalenderEventEnabled::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGlobals.Is50v50ForceEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortGlobals_Is50v50ForceEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobals_Is50v50ForceEnabled) == 0x000001, "Wrong alignment on FortGlobals_Is50v50ForceEnabled");
static_assert(sizeof(FortGlobals_Is50v50ForceEnabled) == 0x000001, "Wrong size on FortGlobals_Is50v50ForceEnabled");
static_assert(offsetof(FortGlobals_Is50v50ForceEnabled, ReturnValue) == 0x000000, "Member 'FortGlobals_Is50v50ForceEnabled::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGlobals.IsAccountLinkingEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortGlobals_IsAccountLinkingEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobals_IsAccountLinkingEnabled) == 0x000001, "Wrong alignment on FortGlobals_IsAccountLinkingEnabled");
static_assert(sizeof(FortGlobals_IsAccountLinkingEnabled) == 0x000001, "Wrong size on FortGlobals_IsAccountLinkingEnabled");
static_assert(offsetof(FortGlobals_IsAccountLinkingEnabled, ReturnValue) == 0x000000, "Member 'FortGlobals_IsAccountLinkingEnabled::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGlobals.IsAccountLinkingUIURLButtonEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortGlobals_IsAccountLinkingUIURLButtonEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobals_IsAccountLinkingUIURLButtonEnabled) == 0x000001, "Wrong alignment on FortGlobals_IsAccountLinkingUIURLButtonEnabled");
static_assert(sizeof(FortGlobals_IsAccountLinkingUIURLButtonEnabled) == 0x000001, "Wrong size on FortGlobals_IsAccountLinkingUIURLButtonEnabled");
static_assert(offsetof(FortGlobals_IsAccountLinkingUIURLButtonEnabled, ReturnValue) == 0x000000, "Member 'FortGlobals_IsAccountLinkingUIURLButtonEnabled::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGlobals.IsDisplayingTwitchViewerNamesAllowed
// 0x0001 (0x0001 - 0x0000)
struct FortGlobals_IsDisplayingTwitchViewerNamesAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobals_IsDisplayingTwitchViewerNamesAllowed) == 0x000001, "Wrong alignment on FortGlobals_IsDisplayingTwitchViewerNamesAllowed");
static_assert(sizeof(FortGlobals_IsDisplayingTwitchViewerNamesAllowed) == 0x000001, "Wrong size on FortGlobals_IsDisplayingTwitchViewerNamesAllowed");
static_assert(offsetof(FortGlobals_IsDisplayingTwitchViewerNamesAllowed, ReturnValue) == 0x000000, "Member 'FortGlobals_IsDisplayingTwitchViewerNamesAllowed::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGlobals.IsEvent1ForceEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortGlobals_IsEvent1ForceEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobals_IsEvent1ForceEnabled) == 0x000001, "Wrong alignment on FortGlobals_IsEvent1ForceEnabled");
static_assert(sizeof(FortGlobals_IsEvent1ForceEnabled) == 0x000001, "Wrong size on FortGlobals_IsEvent1ForceEnabled");
static_assert(offsetof(FortGlobals_IsEvent1ForceEnabled, ReturnValue) == 0x000000, "Member 'FortGlobals_IsEvent1ForceEnabled::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGlobals.IsEvent2ForceEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortGlobals_IsEvent2ForceEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobals_IsEvent2ForceEnabled) == 0x000001, "Wrong alignment on FortGlobals_IsEvent2ForceEnabled");
static_assert(sizeof(FortGlobals_IsEvent2ForceEnabled) == 0x000001, "Wrong size on FortGlobals_IsEvent2ForceEnabled");
static_assert(offsetof(FortGlobals_IsEvent2ForceEnabled, ReturnValue) == 0x000000, "Member 'FortGlobals_IsEvent2ForceEnabled::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGlobals.IsEvent3ForceEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortGlobals_IsEvent3ForceEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobals_IsEvent3ForceEnabled) == 0x000001, "Wrong alignment on FortGlobals_IsEvent3ForceEnabled");
static_assert(sizeof(FortGlobals_IsEvent3ForceEnabled) == 0x000001, "Wrong size on FortGlobals_IsEvent3ForceEnabled");
static_assert(offsetof(FortGlobals_IsEvent3ForceEnabled, ReturnValue) == 0x000000, "Member 'FortGlobals_IsEvent3ForceEnabled::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGlobals.IsEvent4ForceEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortGlobals_IsEvent4ForceEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobals_IsEvent4ForceEnabled) == 0x000001, "Wrong alignment on FortGlobals_IsEvent4ForceEnabled");
static_assert(sizeof(FortGlobals_IsEvent4ForceEnabled) == 0x000001, "Wrong size on FortGlobals_IsEvent4ForceEnabled");
static_assert(offsetof(FortGlobals_IsEvent4ForceEnabled, ReturnValue) == 0x000000, "Member 'FortGlobals_IsEvent4ForceEnabled::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGlobals.IsEvent5ForceEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortGlobals_IsEvent5ForceEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobals_IsEvent5ForceEnabled) == 0x000001, "Wrong alignment on FortGlobals_IsEvent5ForceEnabled");
static_assert(sizeof(FortGlobals_IsEvent5ForceEnabled) == 0x000001, "Wrong size on FortGlobals_IsEvent5ForceEnabled");
static_assert(offsetof(FortGlobals_IsEvent5ForceEnabled, ReturnValue) == 0x000000, "Member 'FortGlobals_IsEvent5ForceEnabled::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGlobals.IsEvent6ForceEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortGlobals_IsEvent6ForceEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobals_IsEvent6ForceEnabled) == 0x000001, "Wrong alignment on FortGlobals_IsEvent6ForceEnabled");
static_assert(sizeof(FortGlobals_IsEvent6ForceEnabled) == 0x000001, "Wrong size on FortGlobals_IsEvent6ForceEnabled");
static_assert(offsetof(FortGlobals_IsEvent6ForceEnabled, ReturnValue) == 0x000000, "Member 'FortGlobals_IsEvent6ForceEnabled::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGlobals.IsEvent7ForceEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortGlobals_IsEvent7ForceEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobals_IsEvent7ForceEnabled) == 0x000001, "Wrong alignment on FortGlobals_IsEvent7ForceEnabled");
static_assert(sizeof(FortGlobals_IsEvent7ForceEnabled) == 0x000001, "Wrong size on FortGlobals_IsEvent7ForceEnabled");
static_assert(offsetof(FortGlobals_IsEvent7ForceEnabled, ReturnValue) == 0x000000, "Member 'FortGlobals_IsEvent7ForceEnabled::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGlobals.IsEvent8ForceEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortGlobals_IsEvent8ForceEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobals_IsEvent8ForceEnabled) == 0x000001, "Wrong alignment on FortGlobals_IsEvent8ForceEnabled");
static_assert(sizeof(FortGlobals_IsEvent8ForceEnabled) == 0x000001, "Wrong size on FortGlobals_IsEvent8ForceEnabled");
static_assert(offsetof(FortGlobals_IsEvent8ForceEnabled, ReturnValue) == 0x000000, "Member 'FortGlobals_IsEvent8ForceEnabled::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGlobals.IsFrontendCraftingEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortGlobals_IsFrontendCraftingEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobals_IsFrontendCraftingEnabled) == 0x000001, "Wrong alignment on FortGlobals_IsFrontendCraftingEnabled");
static_assert(sizeof(FortGlobals_IsFrontendCraftingEnabled) == 0x000001, "Wrong size on FortGlobals_IsFrontendCraftingEnabled");
static_assert(offsetof(FortGlobals_IsFrontendCraftingEnabled, ReturnValue) == 0x000000, "Member 'FortGlobals_IsFrontendCraftingEnabled::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGlobals.IsNewRewardFlowEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortGlobals_IsNewRewardFlowEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobals_IsNewRewardFlowEnabled) == 0x000001, "Wrong alignment on FortGlobals_IsNewRewardFlowEnabled");
static_assert(sizeof(FortGlobals_IsNewRewardFlowEnabled) == 0x000001, "Wrong size on FortGlobals_IsNewRewardFlowEnabled");
static_assert(offsetof(FortGlobals_IsNewRewardFlowEnabled, ReturnValue) == 0x000000, "Member 'FortGlobals_IsNewRewardFlowEnabled::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGlobals.IsTencentBuild
// 0x0001 (0x0001 - 0x0000)
struct FortGlobals_IsTencentBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobals_IsTencentBuild) == 0x000001, "Wrong alignment on FortGlobals_IsTencentBuild");
static_assert(sizeof(FortGlobals_IsTencentBuild) == 0x000001, "Wrong size on FortGlobals_IsTencentBuild");
static_assert(offsetof(FortGlobals_IsTencentBuild, ReturnValue) == 0x000000, "Member 'FortGlobals_IsTencentBuild::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGlobals.IsTwitchEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortGlobals_IsTwitchEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobals_IsTwitchEnabled) == 0x000001, "Wrong alignment on FortGlobals_IsTwitchEnabled");
static_assert(sizeof(FortGlobals_IsTwitchEnabled) == 0x000001, "Wrong size on FortGlobals_IsTwitchEnabled");
static_assert(offsetof(FortGlobals_IsTwitchEnabled, ReturnValue) == 0x000000, "Member 'FortGlobals_IsTwitchEnabled::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGlobals.IsWIFEEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortGlobals_IsWIFEEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobals_IsWIFEEnabled) == 0x000001, "Wrong alignment on FortGlobals_IsWIFEEnabled");
static_assert(sizeof(FortGlobals_IsWIFEEnabled) == 0x000001, "Wrong size on FortGlobals_IsWIFEEnabled");
static_assert(offsetof(FortGlobals_IsWIFEEnabled, ReturnValue) == 0x000000, "Member 'FortGlobals_IsWIFEEnabled::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGlobals.ShouldDisableParticleEffectsDuringMissionResults
// 0x0001 (0x0001 - 0x0000)
struct FortGlobals_ShouldDisableParticleEffectsDuringMissionResults final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobals_ShouldDisableParticleEffectsDuringMissionResults) == 0x000001, "Wrong alignment on FortGlobals_ShouldDisableParticleEffectsDuringMissionResults");
static_assert(sizeof(FortGlobals_ShouldDisableParticleEffectsDuringMissionResults) == 0x000001, "Wrong size on FortGlobals_ShouldDisableParticleEffectsDuringMissionResults");
static_assert(offsetof(FortGlobals_ShouldDisableParticleEffectsDuringMissionResults, ReturnValue) == 0x000000, "Member 'FortGlobals_ShouldDisableParticleEffectsDuringMissionResults::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGlobals.ShouldDisablePlayerTeleportDuringMissionResults
// 0x0001 (0x0001 - 0x0000)
struct FortGlobals_ShouldDisablePlayerTeleportDuringMissionResults final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobals_ShouldDisablePlayerTeleportDuringMissionResults) == 0x000001, "Wrong alignment on FortGlobals_ShouldDisablePlayerTeleportDuringMissionResults");
static_assert(sizeof(FortGlobals_ShouldDisablePlayerTeleportDuringMissionResults) == 0x000001, "Wrong size on FortGlobals_ShouldDisablePlayerTeleportDuringMissionResults");
static_assert(offsetof(FortGlobals_ShouldDisablePlayerTeleportDuringMissionResults, ReturnValue) == 0x000000, "Member 'FortGlobals_ShouldDisablePlayerTeleportDuringMissionResults::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGlobals.ShouldFlushGPUWhenPlayerIsTeleportedAtEndOfZone
// 0x0001 (0x0001 - 0x0000)
struct FortGlobals_ShouldFlushGPUWhenPlayerIsTeleportedAtEndOfZone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobals_ShouldFlushGPUWhenPlayerIsTeleportedAtEndOfZone) == 0x000001, "Wrong alignment on FortGlobals_ShouldFlushGPUWhenPlayerIsTeleportedAtEndOfZone");
static_assert(sizeof(FortGlobals_ShouldFlushGPUWhenPlayerIsTeleportedAtEndOfZone) == 0x000001, "Wrong size on FortGlobals_ShouldFlushGPUWhenPlayerIsTeleportedAtEndOfZone");
static_assert(offsetof(FortGlobals_ShouldFlushGPUWhenPlayerIsTeleportedAtEndOfZone, ReturnValue) == 0x000000, "Member 'FortGlobals_ShouldFlushGPUWhenPlayerIsTeleportedAtEndOfZone::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGlobals.ShouldShowMissionResultsMovies
// 0x0001 (0x0001 - 0x0000)
struct FortGlobals_ShouldShowMissionResultsMovies final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobals_ShouldShowMissionResultsMovies) == 0x000001, "Wrong alignment on FortGlobals_ShouldShowMissionResultsMovies");
static_assert(sizeof(FortGlobals_ShouldShowMissionResultsMovies) == 0x000001, "Wrong size on FortGlobals_ShouldShowMissionResultsMovies");
static_assert(offsetof(FortGlobals_ShouldShowMissionResultsMovies, ReturnValue) == 0x000000, "Member 'FortGlobals_ShouldShowMissionResultsMovies::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGlobals.ShouldShowSkillTreeMovies
// 0x0001 (0x0001 - 0x0000)
struct FortGlobals_ShouldShowSkillTreeMovies final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobals_ShouldShowSkillTreeMovies) == 0x000001, "Wrong alignment on FortGlobals_ShouldShowSkillTreeMovies");
static_assert(sizeof(FortGlobals_ShouldShowSkillTreeMovies) == 0x000001, "Wrong size on FortGlobals_ShouldShowSkillTreeMovies");
static_assert(offsetof(FortGlobals_ShouldShowSkillTreeMovies, ReturnValue) == 0x000000, "Member 'FortGlobals_ShouldShowSkillTreeMovies::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGlobals.ShouldStreamOutTextureDataWhenPlayerIsTeleportedAtEndOfZone
// 0x0001 (0x0001 - 0x0000)
struct FortGlobals_ShouldStreamOutTextureDataWhenPlayerIsTeleportedAtEndOfZone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGlobals_ShouldStreamOutTextureDataWhenPlayerIsTeleportedAtEndOfZone) == 0x000001, "Wrong alignment on FortGlobals_ShouldStreamOutTextureDataWhenPlayerIsTeleportedAtEndOfZone");
static_assert(sizeof(FortGlobals_ShouldStreamOutTextureDataWhenPlayerIsTeleportedAtEndOfZone) == 0x000001, "Wrong size on FortGlobals_ShouldStreamOutTextureDataWhenPlayerIsTeleportedAtEndOfZone");
static_assert(offsetof(FortGlobals_ShouldStreamOutTextureDataWhenPlayerIsTeleportedAtEndOfZone, ReturnValue) == 0x000000, "Member 'FortGlobals_ShouldStreamOutTextureDataWhenPlayerIsTeleportedAtEndOfZone::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHeroTooltip.GetNumericValue
// 0x0028 (0x0028 - 0x0000)
struct FortHeroTooltip_GetNumericValue final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVal;                                            // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortHeroTooltip_GetNumericValue) == 0x000008, "Wrong alignment on FortHeroTooltip_GetNumericValue");
static_assert(sizeof(FortHeroTooltip_GetNumericValue) == 0x000028, "Wrong size on FortHeroTooltip_GetNumericValue");
static_assert(offsetof(FortHeroTooltip_GetNumericValue, ObjectToDescribe) == 0x000000, "Member 'FortHeroTooltip_GetNumericValue::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortHeroTooltip_GetNumericValue, Tag) == 0x000008, "Member 'FortHeroTooltip_GetNumericValue::Tag' has a wrong offset!");
static_assert(offsetof(FortHeroTooltip_GetNumericValue, Context) == 0x000010, "Member 'FortHeroTooltip_GetNumericValue::Context' has a wrong offset!");
static_assert(offsetof(FortHeroTooltip_GetNumericValue, Token) == 0x000018, "Member 'FortHeroTooltip_GetNumericValue::Token' has a wrong offset!");
static_assert(offsetof(FortHeroTooltip_GetNumericValue, OutVal) == 0x000020, "Member 'FortHeroTooltip_GetNumericValue::OutVal' has a wrong offset!");
static_assert(offsetof(FortHeroTooltip_GetNumericValue, ReturnValue) == 0x000024, "Member 'FortHeroTooltip_GetNumericValue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHeroTooltip.GetTextForToken
// 0x0040 (0x0040 - 0x0000)
struct FortHeroTooltip_GetTextForToken final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortHeroTooltip_GetTextForToken) == 0x000008, "Wrong alignment on FortHeroTooltip_GetTextForToken");
static_assert(sizeof(FortHeroTooltip_GetTextForToken) == 0x000040, "Wrong size on FortHeroTooltip_GetTextForToken");
static_assert(offsetof(FortHeroTooltip_GetTextForToken, ObjectToDescribe) == 0x000000, "Member 'FortHeroTooltip_GetTextForToken::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortHeroTooltip_GetTextForToken, Tag) == 0x000008, "Member 'FortHeroTooltip_GetTextForToken::Tag' has a wrong offset!");
static_assert(offsetof(FortHeroTooltip_GetTextForToken, Context) == 0x000010, "Member 'FortHeroTooltip_GetTextForToken::Context' has a wrong offset!");
static_assert(offsetof(FortHeroTooltip_GetTextForToken, Token) == 0x000018, "Member 'FortHeroTooltip_GetTextForToken::Token' has a wrong offset!");
static_assert(offsetof(FortHeroTooltip_GetTextForToken, OutText) == 0x000020, "Member 'FortHeroTooltip_GetTextForToken::OutText' has a wrong offset!");
static_assert(offsetof(FortHeroTooltip_GetTextForToken, ReturnValue) == 0x000038, "Member 'FortHeroTooltip_GetTextForToken::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHeroTooltip.GetTokenizedDescriptionText
// 0x0030 (0x0030 - 0x0000)
struct FortHeroTooltip_GetTokenizedDescriptionText final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           OutDescription;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortHeroTooltip_GetTokenizedDescriptionText) == 0x000008, "Wrong alignment on FortHeroTooltip_GetTokenizedDescriptionText");
static_assert(sizeof(FortHeroTooltip_GetTokenizedDescriptionText) == 0x000030, "Wrong size on FortHeroTooltip_GetTokenizedDescriptionText");
static_assert(offsetof(FortHeroTooltip_GetTokenizedDescriptionText, ObjectToDescribe) == 0x000000, "Member 'FortHeroTooltip_GetTokenizedDescriptionText::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortHeroTooltip_GetTokenizedDescriptionText, Tag) == 0x000008, "Member 'FortHeroTooltip_GetTokenizedDescriptionText::Tag' has a wrong offset!");
static_assert(offsetof(FortHeroTooltip_GetTokenizedDescriptionText, Context) == 0x000010, "Member 'FortHeroTooltip_GetTokenizedDescriptionText::Context' has a wrong offset!");
static_assert(offsetof(FortHeroTooltip_GetTokenizedDescriptionText, OutDescription) == 0x000018, "Member 'FortHeroTooltip_GetTokenizedDescriptionText::OutDescription' has a wrong offset!");
static_assert(offsetof(FortHeroTooltip_GetTokenizedDescriptionText, ReturnValue) == 0x000028, "Member 'FortHeroTooltip_GetTokenizedDescriptionText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHeroType.GetFemaleOverrideFeedback
// 0x0008 (0x0008 - 0x0000)
struct FortHeroType_GetFemaleOverrideFeedback final
{
public:
	class UFortFeedbackBank*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroType_GetFemaleOverrideFeedback) == 0x000008, "Wrong alignment on FortHeroType_GetFemaleOverrideFeedback");
static_assert(sizeof(FortHeroType_GetFemaleOverrideFeedback) == 0x000008, "Wrong size on FortHeroType_GetFemaleOverrideFeedback");
static_assert(offsetof(FortHeroType_GetFemaleOverrideFeedback, ReturnValue) == 0x000000, "Member 'FortHeroType_GetFemaleOverrideFeedback::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHeroType.GetFrontendAnimClass
// 0x0008 (0x0008 - 0x0000)
struct FortHeroType_GetFrontendAnimClass final
{
public:
	TSubclassOf<class UFrontendAnimInstance>      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroType_GetFrontendAnimClass) == 0x000008, "Wrong alignment on FortHeroType_GetFrontendAnimClass");
static_assert(sizeof(FortHeroType_GetFrontendAnimClass) == 0x000008, "Wrong size on FortHeroType_GetFrontendAnimClass");
static_assert(offsetof(FortHeroType_GetFrontendAnimClass, ReturnValue) == 0x000000, "Member 'FortHeroType_GetFrontendAnimClass::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHeroType.GetMaleOverrideFeedback
// 0x0008 (0x0008 - 0x0000)
struct FortHeroType_GetMaleOverrideFeedback final
{
public:
	class UFortFeedbackBank*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroType_GetMaleOverrideFeedback) == 0x000008, "Wrong alignment on FortHeroType_GetMaleOverrideFeedback");
static_assert(sizeof(FortHeroType_GetMaleOverrideFeedback) == 0x000008, "Wrong size on FortHeroType_GetMaleOverrideFeedback");
static_assert(offsetof(FortHeroType_GetMaleOverrideFeedback, ReturnValue) == 0x000000, "Member 'FortHeroType_GetMaleOverrideFeedback::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHeroType.GetSubType
// 0x0018 (0x0018 - 0x0000)
struct FortHeroType_GetSubType final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHeroType_GetSubType) == 0x000008, "Wrong alignment on FortHeroType_GetSubType");
static_assert(sizeof(FortHeroType_GetSubType) == 0x000018, "Wrong size on FortHeroType_GetSubType");
static_assert(offsetof(FortHeroType_GetSubType, ReturnValue) == 0x000000, "Member 'FortHeroType_GetSubType::ReturnValue' has a wrong offset!");

// Function FortniteGame.SBAGrantedBuildingGameplayActor.GetOwnerStrategicBuildingActor
// 0x0008 (0x0008 - 0x0000)
struct SBAGrantedBuildingGameplayActor_GetOwnerStrategicBuildingActor final
{
public:
	class AStrategicBuildingActor*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SBAGrantedBuildingGameplayActor_GetOwnerStrategicBuildingActor) == 0x000008, "Wrong alignment on SBAGrantedBuildingGameplayActor_GetOwnerStrategicBuildingActor");
static_assert(sizeof(SBAGrantedBuildingGameplayActor_GetOwnerStrategicBuildingActor) == 0x000008, "Wrong size on SBAGrantedBuildingGameplayActor_GetOwnerStrategicBuildingActor");
static_assert(offsetof(SBAGrantedBuildingGameplayActor_GetOwnerStrategicBuildingActor, ReturnValue) == 0x000000, "Member 'SBAGrantedBuildingGameplayActor_GetOwnerStrategicBuildingActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseContext.GetStaticSetBonusData
// 0x0310 (0x0310 - 0x0000)
struct HomeBaseContext_GetStaticSetBonusData final
{
public:
	struct FGameplayTag                           InSetBonusTag;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWorkerSetBonusData                    OutSetBonusData;                                   // 0x0008(0x0038)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FFortMultiSizeBrush                    OutBrush;                                          // 0x0040(0x02D0)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseContext_GetStaticSetBonusData) == 0x000008, "Wrong alignment on HomeBaseContext_GetStaticSetBonusData");
static_assert(sizeof(HomeBaseContext_GetStaticSetBonusData) == 0x000310, "Wrong size on HomeBaseContext_GetStaticSetBonusData");
static_assert(offsetof(HomeBaseContext_GetStaticSetBonusData, InSetBonusTag) == 0x000000, "Member 'HomeBaseContext_GetStaticSetBonusData::InSetBonusTag' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetStaticSetBonusData, OutSetBonusData) == 0x000008, "Member 'HomeBaseContext_GetStaticSetBonusData::OutSetBonusData' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetStaticSetBonusData, OutBrush) == 0x000040, "Member 'HomeBaseContext_GetStaticSetBonusData::OutBrush' has a wrong offset!");

// Function FortniteGame.HomeBaseContext.ClearFrontEndOnlyExpeditionSquad
// 0x0008 (0x0008 - 0x0000)
struct HomeBaseContext_ClearFrontEndOnlyExpeditionSquad final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseContext_ClearFrontEndOnlyExpeditionSquad) == 0x000004, "Wrong alignment on HomeBaseContext_ClearFrontEndOnlyExpeditionSquad");
static_assert(sizeof(HomeBaseContext_ClearFrontEndOnlyExpeditionSquad) == 0x000008, "Wrong size on HomeBaseContext_ClearFrontEndOnlyExpeditionSquad");
static_assert(offsetof(HomeBaseContext_ClearFrontEndOnlyExpeditionSquad, SquadId) == 0x000000, "Member 'HomeBaseContext_ClearFrontEndOnlyExpeditionSquad::SquadId' has a wrong offset!");

// Function FortniteGame.HomeBaseContext.GetAllResourceCollectorRewardEstimates
// 0x0010 (0x0010 - 0x0000)
struct HomeBaseContext_GetAllResourceCollectorRewardEstimates final
{
public:
	TArray<struct FFortItemQuantityPair>          OutEstimates;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseContext_GetAllResourceCollectorRewardEstimates) == 0x000008, "Wrong alignment on HomeBaseContext_GetAllResourceCollectorRewardEstimates");
static_assert(sizeof(HomeBaseContext_GetAllResourceCollectorRewardEstimates) == 0x000010, "Wrong size on HomeBaseContext_GetAllResourceCollectorRewardEstimates");
static_assert(offsetof(HomeBaseContext_GetAllResourceCollectorRewardEstimates, OutEstimates) == 0x000000, "Member 'HomeBaseContext_GetAllResourceCollectorRewardEstimates::OutEstimates' has a wrong offset!");

// Function FortniteGame.HomeBaseContext.GetNumAccountLimitedItems
// 0x0004 (0x0004 - 0x0000)
struct HomeBaseContext_GetNumAccountLimitedItems final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseContext_GetNumAccountLimitedItems) == 0x000004, "Wrong alignment on HomeBaseContext_GetNumAccountLimitedItems");
static_assert(sizeof(HomeBaseContext_GetNumAccountLimitedItems) == 0x000004, "Wrong size on HomeBaseContext_GetNumAccountLimitedItems");
static_assert(offsetof(HomeBaseContext_GetNumAccountLimitedItems, ReturnValue) == 0x000000, "Member 'HomeBaseContext_GetNumAccountLimitedItems::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseContext.GetResourceCollectorRateInfo
// 0x0010 (0x0010 - 0x0000)
struct HomeBaseContext_GetResourceCollectorRateInfo final
{
public:
	class UFortCollectedResourceItem*             CollectorType;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RatePerSecond;                                     // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCapacity;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseContext_GetResourceCollectorRateInfo) == 0x000008, "Wrong alignment on HomeBaseContext_GetResourceCollectorRateInfo");
static_assert(sizeof(HomeBaseContext_GetResourceCollectorRateInfo) == 0x000010, "Wrong size on HomeBaseContext_GetResourceCollectorRateInfo");
static_assert(offsetof(HomeBaseContext_GetResourceCollectorRateInfo, CollectorType) == 0x000000, "Member 'HomeBaseContext_GetResourceCollectorRateInfo::CollectorType' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetResourceCollectorRateInfo, RatePerSecond) == 0x000008, "Member 'HomeBaseContext_GetResourceCollectorRateInfo::RatePerSecond' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetResourceCollectorRateInfo, MaxCapacity) == 0x00000C, "Member 'HomeBaseContext_GetResourceCollectorRateInfo::MaxCapacity' has a wrong offset!");

// Function FortniteGame.HomeBaseContext.GetResourceCollectorRewardsEstimate
// 0x0038 (0x0038 - 0x0000)
struct HomeBaseContext_GetResourceCollectorRewardsEstimate final
{
public:
	class UFortCollectedResourceItem*             CollectorType;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortItemQuantityPair                  OutEstimate;                                       // 0x0008(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseContext_GetResourceCollectorRewardsEstimate) == 0x000008, "Wrong alignment on HomeBaseContext_GetResourceCollectorRewardsEstimate");
static_assert(sizeof(HomeBaseContext_GetResourceCollectorRewardsEstimate) == 0x000038, "Wrong size on HomeBaseContext_GetResourceCollectorRewardsEstimate");
static_assert(offsetof(HomeBaseContext_GetResourceCollectorRewardsEstimate, CollectorType) == 0x000000, "Member 'HomeBaseContext_GetResourceCollectorRewardsEstimate::CollectorType' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetResourceCollectorRewardsEstimate, OutEstimate) == 0x000008, "Member 'HomeBaseContext_GetResourceCollectorRewardsEstimate::OutEstimate' has a wrong offset!");

// Function FortniteGame.HomeBaseContext.GetResourceCollectorRewardsEstimates
// 0x0020 (0x0020 - 0x0000)
struct HomeBaseContext_GetResourceCollectorRewardsEstimates final
{
public:
	TArray<class UFortCollectedResourceItem*>     CollectorTypes;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FFortItemQuantityPair>          OutEstimates;                                      // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseContext_GetResourceCollectorRewardsEstimates) == 0x000008, "Wrong alignment on HomeBaseContext_GetResourceCollectorRewardsEstimates");
static_assert(sizeof(HomeBaseContext_GetResourceCollectorRewardsEstimates) == 0x000020, "Wrong size on HomeBaseContext_GetResourceCollectorRewardsEstimates");
static_assert(offsetof(HomeBaseContext_GetResourceCollectorRewardsEstimates, CollectorTypes) == 0x000000, "Member 'HomeBaseContext_GetResourceCollectorRewardsEstimates::CollectorTypes' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetResourceCollectorRewardsEstimates, OutEstimates) == 0x000010, "Member 'HomeBaseContext_GetResourceCollectorRewardsEstimates::OutEstimates' has a wrong offset!");

// Function FortniteGame.HomeBaseContext.GetActiveCombatSquadId
// 0x0008 (0x0008 - 0x0000)
struct HomeBaseContext_GetActiveCombatSquadId final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseContext_GetActiveCombatSquadId) == 0x000004, "Wrong alignment on HomeBaseContext_GetActiveCombatSquadId");
static_assert(sizeof(HomeBaseContext_GetActiveCombatSquadId) == 0x000008, "Wrong size on HomeBaseContext_GetActiveCombatSquadId");
static_assert(offsetof(HomeBaseContext_GetActiveCombatSquadId, ReturnValue) == 0x000000, "Member 'HomeBaseContext_GetActiveCombatSquadId::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseContext.GetActiveDefenderSquadId
// 0x0008 (0x0008 - 0x0000)
struct HomeBaseContext_GetActiveDefenderSquadId final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseContext_GetActiveDefenderSquadId) == 0x000004, "Wrong alignment on HomeBaseContext_GetActiveDefenderSquadId");
static_assert(sizeof(HomeBaseContext_GetActiveDefenderSquadId) == 0x000008, "Wrong size on HomeBaseContext_GetActiveDefenderSquadId");
static_assert(offsetof(HomeBaseContext_GetActiveDefenderSquadId, ReturnValue) == 0x000000, "Member 'HomeBaseContext_GetActiveDefenderSquadId::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseContext.GetItemsInSquad
// 0x0028 (0x0028 - 0x0000)
struct HomeBaseContext_GetItemsInSquad final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsePreviewState;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveEmptySquadSlots;                            // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortItem>                  OfClassType;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortItem*>                      ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseContext_GetItemsInSquad) == 0x000008, "Wrong alignment on HomeBaseContext_GetItemsInSquad");
static_assert(sizeof(HomeBaseContext_GetItemsInSquad) == 0x000028, "Wrong size on HomeBaseContext_GetItemsInSquad");
static_assert(offsetof(HomeBaseContext_GetItemsInSquad, SquadId) == 0x000000, "Member 'HomeBaseContext_GetItemsInSquad::SquadId' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetItemsInSquad, UsePreviewState) == 0x000008, "Member 'HomeBaseContext_GetItemsInSquad::UsePreviewState' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetItemsInSquad, bRemoveEmptySquadSlots) == 0x000009, "Member 'HomeBaseContext_GetItemsInSquad::bRemoveEmptySquadSlots' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetItemsInSquad, OfClassType) == 0x000010, "Member 'HomeBaseContext_GetItemsInSquad::OfClassType' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetItemsInSquad, ReturnValue) == 0x000018, "Member 'HomeBaseContext_GetItemsInSquad::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseContext.GetLocalPlayerHomebaseRating
// 0x000C (0x000C - 0x0000)
struct HomeBaseContext_GetLocalPlayerHomebaseRating final
{
public:
	int32                                         Rating;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProgressFraction;                                  // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HomeBaseContext_GetLocalPlayerHomebaseRating) == 0x000004, "Wrong alignment on HomeBaseContext_GetLocalPlayerHomebaseRating");
static_assert(sizeof(HomeBaseContext_GetLocalPlayerHomebaseRating) == 0x00000C, "Wrong size on HomeBaseContext_GetLocalPlayerHomebaseRating");
static_assert(offsetof(HomeBaseContext_GetLocalPlayerHomebaseRating, Rating) == 0x000000, "Member 'HomeBaseContext_GetLocalPlayerHomebaseRating::Rating' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetLocalPlayerHomebaseRating, ProgressFraction) == 0x000004, "Member 'HomeBaseContext_GetLocalPlayerHomebaseRating::ProgressFraction' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetLocalPlayerHomebaseRating, ReturnValue) == 0x000008, "Member 'HomeBaseContext_GetLocalPlayerHomebaseRating::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseContext.GetLocalTeamHomebaseRating
// 0x000C (0x000C - 0x0000)
struct HomeBaseContext_GetLocalTeamHomebaseRating final
{
public:
	int32                                         Rating;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProgressFraction;                                  // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HomeBaseContext_GetLocalTeamHomebaseRating) == 0x000004, "Wrong alignment on HomeBaseContext_GetLocalTeamHomebaseRating");
static_assert(sizeof(HomeBaseContext_GetLocalTeamHomebaseRating) == 0x00000C, "Wrong size on HomeBaseContext_GetLocalTeamHomebaseRating");
static_assert(offsetof(HomeBaseContext_GetLocalTeamHomebaseRating, Rating) == 0x000000, "Member 'HomeBaseContext_GetLocalTeamHomebaseRating::Rating' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetLocalTeamHomebaseRating, ProgressFraction) == 0x000004, "Member 'HomeBaseContext_GetLocalTeamHomebaseRating::ProgressFraction' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetLocalTeamHomebaseRating, ReturnValue) == 0x000008, "Member 'HomeBaseContext_GetLocalTeamHomebaseRating::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseContext.GetNodePageIdForHomebaseNode
// 0x0010 (0x0010 - 0x0000)
struct HomeBaseContext_GetNodePageIdForHomebaseNode final
{
public:
	class FName                                   NodeID;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseContext_GetNodePageIdForHomebaseNode) == 0x000004, "Wrong alignment on HomeBaseContext_GetNodePageIdForHomebaseNode");
static_assert(sizeof(HomeBaseContext_GetNodePageIdForHomebaseNode) == 0x000010, "Wrong size on HomeBaseContext_GetNodePageIdForHomebaseNode");
static_assert(offsetof(HomeBaseContext_GetNodePageIdForHomebaseNode, NodeID) == 0x000000, "Member 'HomeBaseContext_GetNodePageIdForHomebaseNode::NodeID' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetNodePageIdForHomebaseNode, ReturnValue) == 0x000008, "Member 'HomeBaseContext_GetNodePageIdForHomebaseNode::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseContext.GetSquadSlotOfItem
// 0x0018 (0x0018 - 0x0000)
struct HomeBaseContext_GetSquadSlotOfItem final
{
public:
	const class UFortItem*                        Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutSquadId;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutSquadSlotIndex;                                 // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HomeBaseContext_GetSquadSlotOfItem) == 0x000008, "Wrong alignment on HomeBaseContext_GetSquadSlotOfItem");
static_assert(sizeof(HomeBaseContext_GetSquadSlotOfItem) == 0x000018, "Wrong size on HomeBaseContext_GetSquadSlotOfItem");
static_assert(offsetof(HomeBaseContext_GetSquadSlotOfItem, Item) == 0x000000, "Member 'HomeBaseContext_GetSquadSlotOfItem::Item' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetSquadSlotOfItem, OutSquadId) == 0x000008, "Member 'HomeBaseContext_GetSquadSlotOfItem::OutSquadId' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetSquadSlotOfItem, OutSquadSlotIndex) == 0x000010, "Member 'HomeBaseContext_GetSquadSlotOfItem::OutSquadSlotIndex' has a wrong offset!");

// Function FortniteGame.HomeBaseContext.GetTeamHomebaseRating
// 0x0038 (0x0038 - 0x0000)
struct HomeBaseContext_GetTeamHomebaseRating final
{
public:
	struct FUniqueNetIdRepl                       PlayerID;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rating;                                            // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProgressFraction;                                  // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HomeBaseContext_GetTeamHomebaseRating) == 0x000008, "Wrong alignment on HomeBaseContext_GetTeamHomebaseRating");
static_assert(sizeof(HomeBaseContext_GetTeamHomebaseRating) == 0x000038, "Wrong size on HomeBaseContext_GetTeamHomebaseRating");
static_assert(offsetof(HomeBaseContext_GetTeamHomebaseRating, PlayerID) == 0x000000, "Member 'HomeBaseContext_GetTeamHomebaseRating::PlayerID' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetTeamHomebaseRating, Rating) == 0x000028, "Member 'HomeBaseContext_GetTeamHomebaseRating::Rating' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetTeamHomebaseRating, ProgressFraction) == 0x00002C, "Member 'HomeBaseContext_GetTeamHomebaseRating::ProgressFraction' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetTeamHomebaseRating, ReturnValue) == 0x000030, "Member 'HomeBaseContext_GetTeamHomebaseRating::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseContext.GetTotalHomebaseRating
// 0x0038 (0x0038 - 0x0000)
struct HomeBaseContext_GetTotalHomebaseRating final
{
public:
	struct FUniqueNetIdRepl                       UniqueId;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rating;                                            // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProgressFraction;                                  // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HomeBaseContext_GetTotalHomebaseRating) == 0x000008, "Wrong alignment on HomeBaseContext_GetTotalHomebaseRating");
static_assert(sizeof(HomeBaseContext_GetTotalHomebaseRating) == 0x000038, "Wrong size on HomeBaseContext_GetTotalHomebaseRating");
static_assert(offsetof(HomeBaseContext_GetTotalHomebaseRating, UniqueId) == 0x000000, "Member 'HomeBaseContext_GetTotalHomebaseRating::UniqueId' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetTotalHomebaseRating, Rating) == 0x000028, "Member 'HomeBaseContext_GetTotalHomebaseRating::Rating' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetTotalHomebaseRating, ProgressFraction) == 0x00002C, "Member 'HomeBaseContext_GetTotalHomebaseRating::ProgressFraction' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetTotalHomebaseRating, ReturnValue) == 0x000030, "Member 'HomeBaseContext_GetTotalHomebaseRating::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseContext.GetTotalSkillPointsEarned
// 0x0004 (0x0004 - 0x0000)
struct HomeBaseContext_GetTotalSkillPointsEarned final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseContext_GetTotalSkillPointsEarned) == 0x000004, "Wrong alignment on HomeBaseContext_GetTotalSkillPointsEarned");
static_assert(sizeof(HomeBaseContext_GetTotalSkillPointsEarned) == 0x000004, "Wrong size on HomeBaseContext_GetTotalSkillPointsEarned");
static_assert(offsetof(HomeBaseContext_GetTotalSkillPointsEarned, ReturnValue) == 0x000000, "Member 'HomeBaseContext_GetTotalSkillPointsEarned::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseContext.GetUnlockingHomebaseNodeIdForSquadSlot
// 0x0018 (0x0018 - 0x0000)
struct HomeBaseContext_GetUnlockingHomebaseNodeIdForSquadSlot final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SquadSlotIndex;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseContext_GetUnlockingHomebaseNodeIdForSquadSlot) == 0x000004, "Wrong alignment on HomeBaseContext_GetUnlockingHomebaseNodeIdForSquadSlot");
static_assert(sizeof(HomeBaseContext_GetUnlockingHomebaseNodeIdForSquadSlot) == 0x000018, "Wrong size on HomeBaseContext_GetUnlockingHomebaseNodeIdForSquadSlot");
static_assert(offsetof(HomeBaseContext_GetUnlockingHomebaseNodeIdForSquadSlot, SquadId) == 0x000000, "Member 'HomeBaseContext_GetUnlockingHomebaseNodeIdForSquadSlot::SquadId' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetUnlockingHomebaseNodeIdForSquadSlot, SquadSlotIndex) == 0x000008, "Member 'HomeBaseContext_GetUnlockingHomebaseNodeIdForSquadSlot::SquadSlotIndex' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetUnlockingHomebaseNodeIdForSquadSlot, ReturnValue) == 0x000010, "Member 'HomeBaseContext_GetUnlockingHomebaseNodeIdForSquadSlot::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseContext.GetWorkerPreviewStatus
// 0x0028 (0x0028 - 0x0000)
struct HomeBaseContext_GetWorkerPreviewStatus final
{
public:
	bool                                          OutIsPreviewing;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortWorker*                            OutWorker;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutMatchesPersonality;                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutMatchesSquadType;                               // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWorkerSetBonusState                   OutSetBonusState;                                  // 0x0018(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseContext_GetWorkerPreviewStatus) == 0x000008, "Wrong alignment on HomeBaseContext_GetWorkerPreviewStatus");
static_assert(sizeof(HomeBaseContext_GetWorkerPreviewStatus) == 0x000028, "Wrong size on HomeBaseContext_GetWorkerPreviewStatus");
static_assert(offsetof(HomeBaseContext_GetWorkerPreviewStatus, OutIsPreviewing) == 0x000000, "Member 'HomeBaseContext_GetWorkerPreviewStatus::OutIsPreviewing' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetWorkerPreviewStatus, OutWorker) == 0x000008, "Member 'HomeBaseContext_GetWorkerPreviewStatus::OutWorker' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetWorkerPreviewStatus, OutMatchesPersonality) == 0x000010, "Member 'HomeBaseContext_GetWorkerPreviewStatus::OutMatchesPersonality' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetWorkerPreviewStatus, OutMatchesSquadType) == 0x000011, "Member 'HomeBaseContext_GetWorkerPreviewStatus::OutMatchesSquadType' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetWorkerPreviewStatus, OutSetBonusState) == 0x000018, "Member 'HomeBaseContext_GetWorkerPreviewStatus::OutSetBonusState' has a wrong offset!");

// Function FortniteGame.HomeBaseContext.IsPreviewingWorkerSlotting
// 0x0001 (0x0001 - 0x0000)
struct HomeBaseContext_IsPreviewingWorkerSlotting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseContext_IsPreviewingWorkerSlotting) == 0x000001, "Wrong alignment on HomeBaseContext_IsPreviewingWorkerSlotting");
static_assert(sizeof(HomeBaseContext_IsPreviewingWorkerSlotting) == 0x000001, "Wrong size on HomeBaseContext_IsPreviewingWorkerSlotting");
static_assert(offsetof(HomeBaseContext_IsPreviewingWorkerSlotting, ReturnValue) == 0x000000, "Member 'HomeBaseContext_IsPreviewingWorkerSlotting::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseContext.TryGetHomebaseNodeData
// 0x00D0 (0x00D0 - 0x0000)
struct HomeBaseContext_TryGetHomebaseNodeData final
{
public:
	class FName                                   NodeID;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHomebaseNode                          OutHomebaseNode;                                   // 0x0008(0x00C0)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00C8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HomeBaseContext_TryGetHomebaseNodeData) == 0x000008, "Wrong alignment on HomeBaseContext_TryGetHomebaseNodeData");
static_assert(sizeof(HomeBaseContext_TryGetHomebaseNodeData) == 0x0000D0, "Wrong size on HomeBaseContext_TryGetHomebaseNodeData");
static_assert(offsetof(HomeBaseContext_TryGetHomebaseNodeData, NodeID) == 0x000000, "Member 'HomeBaseContext_TryGetHomebaseNodeData::NodeID' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_TryGetHomebaseNodeData, OutHomebaseNode) == 0x000008, "Member 'HomeBaseContext_TryGetHomebaseNodeData::OutHomebaseNode' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_TryGetHomebaseNodeData, ReturnValue) == 0x0000C8, "Member 'HomeBaseContext_TryGetHomebaseNodeData::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseContext.TryGetHomebaseNodePageData
// 0x0070 (0x0070 - 0x0000)
struct HomeBaseContext_TryGetHomebaseNodePageData final
{
public:
	class FName                                   NodePageId;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHomebaseNodePage                      OutHomebaseNodePage;                               // 0x0008(0x0060)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HomeBaseContext_TryGetHomebaseNodePageData) == 0x000008, "Wrong alignment on HomeBaseContext_TryGetHomebaseNodePageData");
static_assert(sizeof(HomeBaseContext_TryGetHomebaseNodePageData) == 0x000070, "Wrong size on HomeBaseContext_TryGetHomebaseNodePageData");
static_assert(offsetof(HomeBaseContext_TryGetHomebaseNodePageData, NodePageId) == 0x000000, "Member 'HomeBaseContext_TryGetHomebaseNodePageData::NodePageId' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_TryGetHomebaseNodePageData, OutHomebaseNodePage) == 0x000008, "Member 'HomeBaseContext_TryGetHomebaseNodePageData::OutHomebaseNodePage' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_TryGetHomebaseNodePageData, ReturnValue) == 0x000068, "Member 'HomeBaseContext_TryGetHomebaseNodePageData::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseContext.TryGetHomebaseSquadData
// 0x0098 (0x0098 - 0x0000)
struct HomeBaseContext_TryGetHomebaseSquadData final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHomebaseSquad                         OutHomebaseSquad;                                  // 0x0008(0x0088)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HomeBaseContext_TryGetHomebaseSquadData) == 0x000008, "Wrong alignment on HomeBaseContext_TryGetHomebaseSquadData");
static_assert(sizeof(HomeBaseContext_TryGetHomebaseSquadData) == 0x000098, "Wrong size on HomeBaseContext_TryGetHomebaseSquadData");
static_assert(offsetof(HomeBaseContext_TryGetHomebaseSquadData, SquadId) == 0x000000, "Member 'HomeBaseContext_TryGetHomebaseSquadData::SquadId' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_TryGetHomebaseSquadData, OutHomebaseSquad) == 0x000008, "Member 'HomeBaseContext_TryGetHomebaseSquadData::OutHomebaseSquad' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_TryGetHomebaseSquadData, ReturnValue) == 0x000090, "Member 'HomeBaseContext_TryGetHomebaseSquadData::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHomebaseManager.GetHomebaseName
// 0x0018 (0x0018 - 0x0000)
struct FortHomebaseManager_GetHomebaseName final
{
public:
	const class UFortMcpProfileAccount*           McpProfile;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomebaseManager_GetHomebaseName) == 0x000008, "Wrong alignment on FortHomebaseManager_GetHomebaseName");
static_assert(sizeof(FortHomebaseManager_GetHomebaseName) == 0x000018, "Wrong size on FortHomebaseManager_GetHomebaseName");
static_assert(offsetof(FortHomebaseManager_GetHomebaseName, McpProfile) == 0x000000, "Member 'FortHomebaseManager_GetHomebaseName::McpProfile' has a wrong offset!");
static_assert(offsetof(FortHomebaseManager_GetHomebaseName, ReturnValue) == 0x000008, "Member 'FortHomebaseManager_GetHomebaseName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHomebaseManager.AreNodeCostsMet
// 0x0018 (0x0018 - 0x0000)
struct FortHomebaseManager_AreNodeCostsMet final
{
public:
	class FName                                   NodeID;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortMcpProfileAccount*                 McpProfile;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortHomebaseManager_AreNodeCostsMet) == 0x000008, "Wrong alignment on FortHomebaseManager_AreNodeCostsMet");
static_assert(sizeof(FortHomebaseManager_AreNodeCostsMet) == 0x000018, "Wrong size on FortHomebaseManager_AreNodeCostsMet");
static_assert(offsetof(FortHomebaseManager_AreNodeCostsMet, NodeID) == 0x000000, "Member 'FortHomebaseManager_AreNodeCostsMet::NodeID' has a wrong offset!");
static_assert(offsetof(FortHomebaseManager_AreNodeCostsMet, McpProfile) == 0x000008, "Member 'FortHomebaseManager_AreNodeCostsMet::McpProfile' has a wrong offset!");
static_assert(offsetof(FortHomebaseManager_AreNodeCostsMet, ReturnValue) == 0x000010, "Member 'FortHomebaseManager_AreNodeCostsMet::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHomebaseManager.AreNodePrereqsMet
// 0x0018 (0x0018 - 0x0000)
struct FortHomebaseManager_AreNodePrereqsMet final
{
public:
	class FName                                   NodeID;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortMcpProfileAccount*                 McpProfile;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortHomebaseManager_AreNodePrereqsMet) == 0x000008, "Wrong alignment on FortHomebaseManager_AreNodePrereqsMet");
static_assert(sizeof(FortHomebaseManager_AreNodePrereqsMet) == 0x000018, "Wrong size on FortHomebaseManager_AreNodePrereqsMet");
static_assert(offsetof(FortHomebaseManager_AreNodePrereqsMet, NodeID) == 0x000000, "Member 'FortHomebaseManager_AreNodePrereqsMet::NodeID' has a wrong offset!");
static_assert(offsetof(FortHomebaseManager_AreNodePrereqsMet, McpProfile) == 0x000008, "Member 'FortHomebaseManager_AreNodePrereqsMet::McpProfile' has a wrong offset!");
static_assert(offsetof(FortHomebaseManager_AreNodePrereqsMet, ReturnValue) == 0x000010, "Member 'FortHomebaseManager_AreNodePrereqsMet::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHomebaseManager.AreNodeQuestReqsMet
// 0x0018 (0x0018 - 0x0000)
struct FortHomebaseManager_AreNodeQuestReqsMet final
{
public:
	class FName                                   NodeID;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortMcpProfileAccount*                 McpProfile;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortHomebaseManager_AreNodeQuestReqsMet) == 0x000008, "Wrong alignment on FortHomebaseManager_AreNodeQuestReqsMet");
static_assert(sizeof(FortHomebaseManager_AreNodeQuestReqsMet) == 0x000018, "Wrong size on FortHomebaseManager_AreNodeQuestReqsMet");
static_assert(offsetof(FortHomebaseManager_AreNodeQuestReqsMet, NodeID) == 0x000000, "Member 'FortHomebaseManager_AreNodeQuestReqsMet::NodeID' has a wrong offset!");
static_assert(offsetof(FortHomebaseManager_AreNodeQuestReqsMet, McpProfile) == 0x000008, "Member 'FortHomebaseManager_AreNodeQuestReqsMet::McpProfile' has a wrong offset!");
static_assert(offsetof(FortHomebaseManager_AreNodeQuestReqsMet, ReturnValue) == 0x000010, "Member 'FortHomebaseManager_AreNodeQuestReqsMet::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHomebaseManager.GetNumAccountInventoryBonusTokens
// 0x0010 (0x0010 - 0x0000)
struct FortHomebaseManager_GetNumAccountInventoryBonusTokens final
{
public:
	class UFortMcpProfileAccount*                 McpProfile;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortHomebaseManager_GetNumAccountInventoryBonusTokens) == 0x000008, "Wrong alignment on FortHomebaseManager_GetNumAccountInventoryBonusTokens");
static_assert(sizeof(FortHomebaseManager_GetNumAccountInventoryBonusTokens) == 0x000010, "Wrong size on FortHomebaseManager_GetNumAccountInventoryBonusTokens");
static_assert(offsetof(FortHomebaseManager_GetNumAccountInventoryBonusTokens, McpProfile) == 0x000000, "Member 'FortHomebaseManager_GetNumAccountInventoryBonusTokens::McpProfile' has a wrong offset!");
static_assert(offsetof(FortHomebaseManager_GetNumAccountInventoryBonusTokens, ReturnValue) == 0x000008, "Member 'FortHomebaseManager_GetNumAccountInventoryBonusTokens::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHomebaseManager.GetNumAccountLimitedItems
// 0x0010 (0x0010 - 0x0000)
struct FortHomebaseManager_GetNumAccountLimitedItems final
{
public:
	class UFortMcpProfileAccount*                 McpProfile;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortHomebaseManager_GetNumAccountLimitedItems) == 0x000008, "Wrong alignment on FortHomebaseManager_GetNumAccountLimitedItems");
static_assert(sizeof(FortHomebaseManager_GetNumAccountLimitedItems) == 0x000010, "Wrong size on FortHomebaseManager_GetNumAccountLimitedItems");
static_assert(offsetof(FortHomebaseManager_GetNumAccountLimitedItems, McpProfile) == 0x000000, "Member 'FortHomebaseManager_GetNumAccountLimitedItems::McpProfile' has a wrong offset!");
static_assert(offsetof(FortHomebaseManager_GetNumAccountLimitedItems, ReturnValue) == 0x000008, "Member 'FortHomebaseManager_GetNumAccountLimitedItems::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHomebaseManager.GetNumWorldInventoryBonusTokens
// 0x0010 (0x0010 - 0x0000)
struct FortHomebaseManager_GetNumWorldInventoryBonusTokens final
{
public:
	class UFortMcpProfileAccount*                 McpProfile;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortHomebaseManager_GetNumWorldInventoryBonusTokens) == 0x000008, "Wrong alignment on FortHomebaseManager_GetNumWorldInventoryBonusTokens");
static_assert(sizeof(FortHomebaseManager_GetNumWorldInventoryBonusTokens) == 0x000010, "Wrong size on FortHomebaseManager_GetNumWorldInventoryBonusTokens");
static_assert(offsetof(FortHomebaseManager_GetNumWorldInventoryBonusTokens, McpProfile) == 0x000000, "Member 'FortHomebaseManager_GetNumWorldInventoryBonusTokens::McpProfile' has a wrong offset!");
static_assert(offsetof(FortHomebaseManager_GetNumWorldInventoryBonusTokens, ReturnValue) == 0x000008, "Member 'FortHomebaseManager_GetNumWorldInventoryBonusTokens::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHomebaseManager.GetSquadCopyById
// 0x0098 (0x0098 - 0x0000)
struct FortHomebaseManager_GetSquadCopyById final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHomebaseSquad                         OutSquad;                                          // 0x0008(0x0088)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortHomebaseManager_GetSquadCopyById) == 0x000008, "Wrong alignment on FortHomebaseManager_GetSquadCopyById");
static_assert(sizeof(FortHomebaseManager_GetSquadCopyById) == 0x000098, "Wrong size on FortHomebaseManager_GetSquadCopyById");
static_assert(offsetof(FortHomebaseManager_GetSquadCopyById, SquadId) == 0x000000, "Member 'FortHomebaseManager_GetSquadCopyById::SquadId' has a wrong offset!");
static_assert(offsetof(FortHomebaseManager_GetSquadCopyById, OutSquad) == 0x000008, "Member 'FortHomebaseManager_GetSquadCopyById::OutSquad' has a wrong offset!");
static_assert(offsetof(FortHomebaseManager_GetSquadCopyById, ReturnValue) == 0x000090, "Member 'FortHomebaseManager_GetSquadCopyById::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHomebaseManager.GetNodeInstanceIdByNodeId
// 0x0020 (0x0020 - 0x0000)
struct FortHomebaseManager_GetNodeInstanceIdByNodeId final
{
public:
	class FName                                   NodeID;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortMcpProfileAccount*           McpProfile;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomebaseManager_GetNodeInstanceIdByNodeId) == 0x000008, "Wrong alignment on FortHomebaseManager_GetNodeInstanceIdByNodeId");
static_assert(sizeof(FortHomebaseManager_GetNodeInstanceIdByNodeId) == 0x000020, "Wrong size on FortHomebaseManager_GetNodeInstanceIdByNodeId");
static_assert(offsetof(FortHomebaseManager_GetNodeInstanceIdByNodeId, NodeID) == 0x000000, "Member 'FortHomebaseManager_GetNodeInstanceIdByNodeId::NodeID' has a wrong offset!");
static_assert(offsetof(FortHomebaseManager_GetNodeInstanceIdByNodeId, McpProfile) == 0x000008, "Member 'FortHomebaseManager_GetNodeInstanceIdByNodeId::McpProfile' has a wrong offset!");
static_assert(offsetof(FortHomebaseManager_GetNodeInstanceIdByNodeId, ReturnValue) == 0x000010, "Member 'FortHomebaseManager_GetNodeInstanceIdByNodeId::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHomebaseManager.GetNumOwnedNodesInPage
// 0x0018 (0x0018 - 0x0000)
struct FortHomebaseManager_GetNumOwnedNodesInPage final
{
public:
	class FName                                   NodePageId;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortMcpProfileAccount*                 McpProfile;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPrereqNodeType                               NodeType;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomebaseManager_GetNumOwnedNodesInPage) == 0x000008, "Wrong alignment on FortHomebaseManager_GetNumOwnedNodesInPage");
static_assert(sizeof(FortHomebaseManager_GetNumOwnedNodesInPage) == 0x000018, "Wrong size on FortHomebaseManager_GetNumOwnedNodesInPage");
static_assert(offsetof(FortHomebaseManager_GetNumOwnedNodesInPage, NodePageId) == 0x000000, "Member 'FortHomebaseManager_GetNumOwnedNodesInPage::NodePageId' has a wrong offset!");
static_assert(offsetof(FortHomebaseManager_GetNumOwnedNodesInPage, McpProfile) == 0x000008, "Member 'FortHomebaseManager_GetNumOwnedNodesInPage::McpProfile' has a wrong offset!");
static_assert(offsetof(FortHomebaseManager_GetNumOwnedNodesInPage, NodeType) == 0x000010, "Member 'FortHomebaseManager_GetNumOwnedNodesInPage::NodeType' has a wrong offset!");
static_assert(offsetof(FortHomebaseManager_GetNumOwnedNodesInPage, ReturnValue) == 0x000014, "Member 'FortHomebaseManager_GetNumOwnedNodesInPage::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHomebaseManager.GetOwnedNodes
// 0x0018 (0x0018 - 0x0000)
struct FortHomebaseManager_GetOwnedNodes final
{
public:
	const class UFortMcpProfileAccount*           McpProfile;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomebaseManager_GetOwnedNodes) == 0x000008, "Wrong alignment on FortHomebaseManager_GetOwnedNodes");
static_assert(sizeof(FortHomebaseManager_GetOwnedNodes) == 0x000018, "Wrong size on FortHomebaseManager_GetOwnedNodes");
static_assert(offsetof(FortHomebaseManager_GetOwnedNodes, McpProfile) == 0x000000, "Member 'FortHomebaseManager_GetOwnedNodes::McpProfile' has a wrong offset!");
static_assert(offsetof(FortHomebaseManager_GetOwnedNodes, ReturnValue) == 0x000008, "Member 'FortHomebaseManager_GetOwnedNodes::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHomebaseManager.GetPrereqNodeTypeName
// 0x0020 (0x0020 - 0x0000)
struct FortHomebaseManager_GetPrereqNodeTypeName final
{
public:
	EPrereqNodeType                               NodeType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomebaseManager_GetPrereqNodeTypeName) == 0x000008, "Wrong alignment on FortHomebaseManager_GetPrereqNodeTypeName");
static_assert(sizeof(FortHomebaseManager_GetPrereqNodeTypeName) == 0x000020, "Wrong size on FortHomebaseManager_GetPrereqNodeTypeName");
static_assert(offsetof(FortHomebaseManager_GetPrereqNodeTypeName, NodeType) == 0x000000, "Member 'FortHomebaseManager_GetPrereqNodeTypeName::NodeType' has a wrong offset!");
static_assert(offsetof(FortHomebaseManager_GetPrereqNodeTypeName, ReturnValue) == 0x000008, "Member 'FortHomebaseManager_GetPrereqNodeTypeName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHomebaseManager.GetSquadPopulation
// 0x0020 (0x0020 - 0x0000)
struct FortHomebaseManager_GetSquadPopulation final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortMcpProfileAccount*           McpProfile;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortWorker*>                    OutSquadMembers;                                   // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomebaseManager_GetSquadPopulation) == 0x000008, "Wrong alignment on FortHomebaseManager_GetSquadPopulation");
static_assert(sizeof(FortHomebaseManager_GetSquadPopulation) == 0x000020, "Wrong size on FortHomebaseManager_GetSquadPopulation");
static_assert(offsetof(FortHomebaseManager_GetSquadPopulation, SquadId) == 0x000000, "Member 'FortHomebaseManager_GetSquadPopulation::SquadId' has a wrong offset!");
static_assert(offsetof(FortHomebaseManager_GetSquadPopulation, McpProfile) == 0x000008, "Member 'FortHomebaseManager_GetSquadPopulation::McpProfile' has a wrong offset!");
static_assert(offsetof(FortHomebaseManager_GetSquadPopulation, OutSquadMembers) == 0x000010, "Member 'FortHomebaseManager_GetSquadPopulation::OutSquadMembers' has a wrong offset!");

// Function FortniteGame.FortHomebaseManager.GetWorkerInSquadSlot
// 0x0020 (0x0020 - 0x0000)
struct FortHomebaseManager_GetWorkerInSquadSlot final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIdx;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UFortMcpProfileAccount*           McpProfile;                                        // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortWorker*                            ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomebaseManager_GetWorkerInSquadSlot) == 0x000008, "Wrong alignment on FortHomebaseManager_GetWorkerInSquadSlot");
static_assert(sizeof(FortHomebaseManager_GetWorkerInSquadSlot) == 0x000020, "Wrong size on FortHomebaseManager_GetWorkerInSquadSlot");
static_assert(offsetof(FortHomebaseManager_GetWorkerInSquadSlot, SquadId) == 0x000000, "Member 'FortHomebaseManager_GetWorkerInSquadSlot::SquadId' has a wrong offset!");
static_assert(offsetof(FortHomebaseManager_GetWorkerInSquadSlot, SlotIdx) == 0x000008, "Member 'FortHomebaseManager_GetWorkerInSquadSlot::SlotIdx' has a wrong offset!");
static_assert(offsetof(FortHomebaseManager_GetWorkerInSquadSlot, McpProfile) == 0x000010, "Member 'FortHomebaseManager_GetWorkerInSquadSlot::McpProfile' has a wrong offset!");
static_assert(offsetof(FortHomebaseManager_GetWorkerInSquadSlot, ReturnValue) == 0x000018, "Member 'FortHomebaseManager_GetWorkerInSquadSlot::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHomebaseManager.IsNodeOwned
// 0x0018 (0x0018 - 0x0000)
struct FortHomebaseManager_IsNodeOwned final
{
public:
	class FName                                   NodeID;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortMcpProfileAccount*           McpProfile;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortHomebaseManager_IsNodeOwned) == 0x000008, "Wrong alignment on FortHomebaseManager_IsNodeOwned");
static_assert(sizeof(FortHomebaseManager_IsNodeOwned) == 0x000018, "Wrong size on FortHomebaseManager_IsNodeOwned");
static_assert(offsetof(FortHomebaseManager_IsNodeOwned, NodeID) == 0x000000, "Member 'FortHomebaseManager_IsNodeOwned::NodeID' has a wrong offset!");
static_assert(offsetof(FortHomebaseManager_IsNodeOwned, McpProfile) == 0x000008, "Member 'FortHomebaseManager_IsNodeOwned::McpProfile' has a wrong offset!");
static_assert(offsetof(FortHomebaseManager_IsNodeOwned, ReturnValue) == 0x000010, "Member 'FortHomebaseManager_IsNodeOwned::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHomebaseManager.IsSquadSlotUnlocked
// 0x0020 (0x0020 - 0x0000)
struct FortHomebaseManager_IsSquadSlotUnlocked final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIdx;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UFortMcpProfileAccount*           McpProfile;                                        // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortHomebaseManager_IsSquadSlotUnlocked) == 0x000008, "Wrong alignment on FortHomebaseManager_IsSquadSlotUnlocked");
static_assert(sizeof(FortHomebaseManager_IsSquadSlotUnlocked) == 0x000020, "Wrong size on FortHomebaseManager_IsSquadSlotUnlocked");
static_assert(offsetof(FortHomebaseManager_IsSquadSlotUnlocked, SquadId) == 0x000000, "Member 'FortHomebaseManager_IsSquadSlotUnlocked::SquadId' has a wrong offset!");
static_assert(offsetof(FortHomebaseManager_IsSquadSlotUnlocked, SlotIdx) == 0x000008, "Member 'FortHomebaseManager_IsSquadSlotUnlocked::SlotIdx' has a wrong offset!");
static_assert(offsetof(FortHomebaseManager_IsSquadSlotUnlocked, McpProfile) == 0x000010, "Member 'FortHomebaseManager_IsSquadSlotUnlocked::McpProfile' has a wrong offset!");
static_assert(offsetof(FortHomebaseManager_IsSquadSlotUnlocked, ReturnValue) == 0x000018, "Member 'FortHomebaseManager_IsSquadSlotUnlocked::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHomebaseNodeItemTooltip.GetNumericValue
// 0x0028 (0x0028 - 0x0000)
struct FortHomebaseNodeItemTooltip_GetNumericValue final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVal;                                            // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortHomebaseNodeItemTooltip_GetNumericValue) == 0x000008, "Wrong alignment on FortHomebaseNodeItemTooltip_GetNumericValue");
static_assert(sizeof(FortHomebaseNodeItemTooltip_GetNumericValue) == 0x000028, "Wrong size on FortHomebaseNodeItemTooltip_GetNumericValue");
static_assert(offsetof(FortHomebaseNodeItemTooltip_GetNumericValue, ObjectToDescribe) == 0x000000, "Member 'FortHomebaseNodeItemTooltip_GetNumericValue::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortHomebaseNodeItemTooltip_GetNumericValue, Tag) == 0x000008, "Member 'FortHomebaseNodeItemTooltip_GetNumericValue::Tag' has a wrong offset!");
static_assert(offsetof(FortHomebaseNodeItemTooltip_GetNumericValue, Context) == 0x000010, "Member 'FortHomebaseNodeItemTooltip_GetNumericValue::Context' has a wrong offset!");
static_assert(offsetof(FortHomebaseNodeItemTooltip_GetNumericValue, Token) == 0x000018, "Member 'FortHomebaseNodeItemTooltip_GetNumericValue::Token' has a wrong offset!");
static_assert(offsetof(FortHomebaseNodeItemTooltip_GetNumericValue, OutVal) == 0x000020, "Member 'FortHomebaseNodeItemTooltip_GetNumericValue::OutVal' has a wrong offset!");
static_assert(offsetof(FortHomebaseNodeItemTooltip_GetNumericValue, ReturnValue) == 0x000024, "Member 'FortHomebaseNodeItemTooltip_GetNumericValue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHomebaseNodeItemTooltip.GetTextForToken
// 0x0040 (0x0040 - 0x0000)
struct FortHomebaseNodeItemTooltip_GetTextForToken final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortHomebaseNodeItemTooltip_GetTextForToken) == 0x000008, "Wrong alignment on FortHomebaseNodeItemTooltip_GetTextForToken");
static_assert(sizeof(FortHomebaseNodeItemTooltip_GetTextForToken) == 0x000040, "Wrong size on FortHomebaseNodeItemTooltip_GetTextForToken");
static_assert(offsetof(FortHomebaseNodeItemTooltip_GetTextForToken, ObjectToDescribe) == 0x000000, "Member 'FortHomebaseNodeItemTooltip_GetTextForToken::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortHomebaseNodeItemTooltip_GetTextForToken, Tag) == 0x000008, "Member 'FortHomebaseNodeItemTooltip_GetTextForToken::Tag' has a wrong offset!");
static_assert(offsetof(FortHomebaseNodeItemTooltip_GetTextForToken, Context) == 0x000010, "Member 'FortHomebaseNodeItemTooltip_GetTextForToken::Context' has a wrong offset!");
static_assert(offsetof(FortHomebaseNodeItemTooltip_GetTextForToken, Token) == 0x000018, "Member 'FortHomebaseNodeItemTooltip_GetTextForToken::Token' has a wrong offset!");
static_assert(offsetof(FortHomebaseNodeItemTooltip_GetTextForToken, OutText) == 0x000020, "Member 'FortHomebaseNodeItemTooltip_GetTextForToken::OutText' has a wrong offset!");
static_assert(offsetof(FortHomebaseNodeItemTooltip_GetTextForToken, ReturnValue) == 0x000038, "Member 'FortHomebaseNodeItemTooltip_GetTextForToken::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHomebaseNodeItemTooltip.GetTokenizedDescriptionText
// 0x0030 (0x0030 - 0x0000)
struct FortHomebaseNodeItemTooltip_GetTokenizedDescriptionText final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           OutDescription;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortHomebaseNodeItemTooltip_GetTokenizedDescriptionText) == 0x000008, "Wrong alignment on FortHomebaseNodeItemTooltip_GetTokenizedDescriptionText");
static_assert(sizeof(FortHomebaseNodeItemTooltip_GetTokenizedDescriptionText) == 0x000030, "Wrong size on FortHomebaseNodeItemTooltip_GetTokenizedDescriptionText");
static_assert(offsetof(FortHomebaseNodeItemTooltip_GetTokenizedDescriptionText, ObjectToDescribe) == 0x000000, "Member 'FortHomebaseNodeItemTooltip_GetTokenizedDescriptionText::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortHomebaseNodeItemTooltip_GetTokenizedDescriptionText, Tag) == 0x000008, "Member 'FortHomebaseNodeItemTooltip_GetTokenizedDescriptionText::Tag' has a wrong offset!");
static_assert(offsetof(FortHomebaseNodeItemTooltip_GetTokenizedDescriptionText, Context) == 0x000010, "Member 'FortHomebaseNodeItemTooltip_GetTokenizedDescriptionText::Context' has a wrong offset!");
static_assert(offsetof(FortHomebaseNodeItemTooltip_GetTokenizedDescriptionText, OutDescription) == 0x000018, "Member 'FortHomebaseNodeItemTooltip_GetTokenizedDescriptionText::OutDescription' has a wrong offset!");
static_assert(offsetof(FortHomebaseNodeItemTooltip_GetTokenizedDescriptionText, ReturnValue) == 0x000028, "Member 'FortHomebaseNodeItemTooltip_GetTokenizedDescriptionText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHomeTeleporterInterface.OnHomeTeleporterBound
// 0x0010 (0x0010 - 0x0000)
struct FortHomeTeleporterInterface_OnHomeTeleporterBound final
{
public:
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           OldHomeActor;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomeTeleporterInterface_OnHomeTeleporterBound) == 0x000008, "Wrong alignment on FortHomeTeleporterInterface_OnHomeTeleporterBound");
static_assert(sizeof(FortHomeTeleporterInterface_OnHomeTeleporterBound) == 0x000010, "Wrong size on FortHomeTeleporterInterface_OnHomeTeleporterBound");
static_assert(offsetof(FortHomeTeleporterInterface_OnHomeTeleporterBound, PlayerPawn) == 0x000000, "Member 'FortHomeTeleporterInterface_OnHomeTeleporterBound::PlayerPawn' has a wrong offset!");
static_assert(offsetof(FortHomeTeleporterInterface_OnHomeTeleporterBound, OldHomeActor) == 0x000008, "Member 'FortHomeTeleporterInterface_OnHomeTeleporterBound::OldHomeActor' has a wrong offset!");

// Function FortniteGame.FortHomeTeleporterInterface.OnHomeTeleporterBoundServer
// 0x0010 (0x0010 - 0x0000)
struct FortHomeTeleporterInterface_OnHomeTeleporterBoundServer final
{
public:
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           OldHomeActor;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomeTeleporterInterface_OnHomeTeleporterBoundServer) == 0x000008, "Wrong alignment on FortHomeTeleporterInterface_OnHomeTeleporterBoundServer");
static_assert(sizeof(FortHomeTeleporterInterface_OnHomeTeleporterBoundServer) == 0x000010, "Wrong size on FortHomeTeleporterInterface_OnHomeTeleporterBoundServer");
static_assert(offsetof(FortHomeTeleporterInterface_OnHomeTeleporterBoundServer, PlayerPawn) == 0x000000, "Member 'FortHomeTeleporterInterface_OnHomeTeleporterBoundServer::PlayerPawn' has a wrong offset!");
static_assert(offsetof(FortHomeTeleporterInterface_OnHomeTeleporterBoundServer, OldHomeActor) == 0x000008, "Member 'FortHomeTeleporterInterface_OnHomeTeleporterBoundServer::OldHomeActor' has a wrong offset!");

// Function FortniteGame.FortHomeTeleporterInterface.OnHomeTeleporterUnbound
// 0x0010 (0x0010 - 0x0000)
struct FortHomeTeleporterInterface_OnHomeTeleporterUnbound final
{
public:
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           NewHomeActor;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomeTeleporterInterface_OnHomeTeleporterUnbound) == 0x000008, "Wrong alignment on FortHomeTeleporterInterface_OnHomeTeleporterUnbound");
static_assert(sizeof(FortHomeTeleporterInterface_OnHomeTeleporterUnbound) == 0x000010, "Wrong size on FortHomeTeleporterInterface_OnHomeTeleporterUnbound");
static_assert(offsetof(FortHomeTeleporterInterface_OnHomeTeleporterUnbound, PlayerPawn) == 0x000000, "Member 'FortHomeTeleporterInterface_OnHomeTeleporterUnbound::PlayerPawn' has a wrong offset!");
static_assert(offsetof(FortHomeTeleporterInterface_OnHomeTeleporterUnbound, NewHomeActor) == 0x000008, "Member 'FortHomeTeleporterInterface_OnHomeTeleporterUnbound::NewHomeActor' has a wrong offset!");

// Function FortniteGame.FortHomeTeleporterInterface.OnHomeTeleporterUnboundServer
// 0x0010 (0x0010 - 0x0000)
struct FortHomeTeleporterInterface_OnHomeTeleporterUnboundServer final
{
public:
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           NewHomeActor;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomeTeleporterInterface_OnHomeTeleporterUnboundServer) == 0x000008, "Wrong alignment on FortHomeTeleporterInterface_OnHomeTeleporterUnboundServer");
static_assert(sizeof(FortHomeTeleporterInterface_OnHomeTeleporterUnboundServer) == 0x000010, "Wrong size on FortHomeTeleporterInterface_OnHomeTeleporterUnboundServer");
static_assert(offsetof(FortHomeTeleporterInterface_OnHomeTeleporterUnboundServer, PlayerPawn) == 0x000000, "Member 'FortHomeTeleporterInterface_OnHomeTeleporterUnboundServer::PlayerPawn' has a wrong offset!");
static_assert(offsetof(FortHomeTeleporterInterface_OnHomeTeleporterUnboundServer, NewHomeActor) == 0x000008, "Member 'FortHomeTeleporterInterface_OnHomeTeleporterUnboundServer::NewHomeActor' has a wrong offset!");

// Function FortniteGame.FortHUDTargetUnderReticleInterface.GetHUDTargetDifficultyRating
// 0x0004 (0x0004 - 0x0000)
struct FortHUDTargetUnderReticleInterface_GetHUDTargetDifficultyRating final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDTargetUnderReticleInterface_GetHUDTargetDifficultyRating) == 0x000004, "Wrong alignment on FortHUDTargetUnderReticleInterface_GetHUDTargetDifficultyRating");
static_assert(sizeof(FortHUDTargetUnderReticleInterface_GetHUDTargetDifficultyRating) == 0x000004, "Wrong size on FortHUDTargetUnderReticleInterface_GetHUDTargetDifficultyRating");
static_assert(offsetof(FortHUDTargetUnderReticleInterface_GetHUDTargetDifficultyRating, ReturnValue) == 0x000000, "Member 'FortHUDTargetUnderReticleInterface_GetHUDTargetDifficultyRating::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHUDTargetUnderReticleInterface.GetHUDTargetDisplayModifiers
// 0x0010 (0x0010 - 0x0000)
struct FortHUDTargetUnderReticleInterface_GetHUDTargetDisplayModifiers final
{
public:
	TArray<class FText>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDTargetUnderReticleInterface_GetHUDTargetDisplayModifiers) == 0x000008, "Wrong alignment on FortHUDTargetUnderReticleInterface_GetHUDTargetDisplayModifiers");
static_assert(sizeof(FortHUDTargetUnderReticleInterface_GetHUDTargetDisplayModifiers) == 0x000010, "Wrong size on FortHUDTargetUnderReticleInterface_GetHUDTargetDisplayModifiers");
static_assert(offsetof(FortHUDTargetUnderReticleInterface_GetHUDTargetDisplayModifiers, ReturnValue) == 0x000000, "Member 'FortHUDTargetUnderReticleInterface_GetHUDTargetDisplayModifiers::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHUDTargetUnderReticleInterface.GetHUDTargetDisplayName
// 0x0018 (0x0018 - 0x0000)
struct FortHUDTargetUnderReticleInterface_GetHUDTargetDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDTargetUnderReticleInterface_GetHUDTargetDisplayName) == 0x000008, "Wrong alignment on FortHUDTargetUnderReticleInterface_GetHUDTargetDisplayName");
static_assert(sizeof(FortHUDTargetUnderReticleInterface_GetHUDTargetDisplayName) == 0x000018, "Wrong size on FortHUDTargetUnderReticleInterface_GetHUDTargetDisplayName");
static_assert(offsetof(FortHUDTargetUnderReticleInterface_GetHUDTargetDisplayName, ReturnValue) == 0x000000, "Member 'FortHUDTargetUnderReticleInterface_GetHUDTargetDisplayName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHUDTargetUnderReticleInterface.GetHUDTargetHealthPercentage
// 0x0004 (0x0004 - 0x0000)
struct FortHUDTargetUnderReticleInterface_GetHUDTargetHealthPercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDTargetUnderReticleInterface_GetHUDTargetHealthPercentage) == 0x000004, "Wrong alignment on FortHUDTargetUnderReticleInterface_GetHUDTargetHealthPercentage");
static_assert(sizeof(FortHUDTargetUnderReticleInterface_GetHUDTargetHealthPercentage) == 0x000004, "Wrong size on FortHUDTargetUnderReticleInterface_GetHUDTargetHealthPercentage");
static_assert(offsetof(FortHUDTargetUnderReticleInterface_GetHUDTargetHealthPercentage, ReturnValue) == 0x000000, "Member 'FortHUDTargetUnderReticleInterface_GetHUDTargetHealthPercentage::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHUDTargetUnderReticleInterface.GetHUDTargetUpgradeDisplayName
// 0x0018 (0x0018 - 0x0000)
struct FortHUDTargetUnderReticleInterface_GetHUDTargetUpgradeDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHUDTargetUnderReticleInterface_GetHUDTargetUpgradeDisplayName) == 0x000008, "Wrong alignment on FortHUDTargetUnderReticleInterface_GetHUDTargetUpgradeDisplayName");
static_assert(sizeof(FortHUDTargetUnderReticleInterface_GetHUDTargetUpgradeDisplayName) == 0x000018, "Wrong size on FortHUDTargetUnderReticleInterface_GetHUDTargetUpgradeDisplayName");
static_assert(offsetof(FortHUDTargetUnderReticleInterface_GetHUDTargetUpgradeDisplayName, ReturnValue) == 0x000000, "Member 'FortHUDTargetUnderReticleInterface_GetHUDTargetUpgradeDisplayName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHuskAnimInstance.AnimNotify_SleepingFullyBlended
// 0x0008 (0x0008 - 0x0000)
struct FortHuskAnimInstance_AnimNotify_SleepingFullyBlended final
{
public:
	const class UAnimNotify*                      Notify;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHuskAnimInstance_AnimNotify_SleepingFullyBlended) == 0x000008, "Wrong alignment on FortHuskAnimInstance_AnimNotify_SleepingFullyBlended");
static_assert(sizeof(FortHuskAnimInstance_AnimNotify_SleepingFullyBlended) == 0x000008, "Wrong size on FortHuskAnimInstance_AnimNotify_SleepingFullyBlended");
static_assert(offsetof(FortHuskAnimInstance_AnimNotify_SleepingFullyBlended, Notify) == 0x000000, "Member 'FortHuskAnimInstance_AnimNotify_SleepingFullyBlended::Notify' has a wrong offset!");

// Function FortniteGame.FortHuskAnimInstance.SetHuskAnimType
// 0x0001 (0x0001 - 0x0000)
struct FortHuskAnimInstance_SetHuskAnimType final
{
public:
	EFortHuskAnimType                             NewHuskAnimType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHuskAnimInstance_SetHuskAnimType) == 0x000001, "Wrong alignment on FortHuskAnimInstance_SetHuskAnimType");
static_assert(sizeof(FortHuskAnimInstance_SetHuskAnimType) == 0x000001, "Wrong size on FortHuskAnimInstance_SetHuskAnimType");
static_assert(offsetof(FortHuskAnimInstance_SetHuskAnimType, NewHuskAnimType) == 0x000000, "Member 'FortHuskAnimInstance_SetHuskAnimType::NewHuskAnimType' has a wrong offset!");

// Function FortniteGame.FortHuskAnimInstance.GetHuskAnimType
// 0x0001 (0x0001 - 0x0000)
struct FortHuskAnimInstance_GetHuskAnimType final
{
public:
	EFortHuskAnimType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHuskAnimInstance_GetHuskAnimType) == 0x000001, "Wrong alignment on FortHuskAnimInstance_GetHuskAnimType");
static_assert(sizeof(FortHuskAnimInstance_GetHuskAnimType) == 0x000001, "Wrong size on FortHuskAnimInstance_GetHuskAnimType");
static_assert(offsetof(FortHuskAnimInstance_GetHuskAnimType, ReturnValue) == 0x000000, "Member 'FortHuskAnimInstance_GetHuskAnimType::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortInfluenceMap.K2_AddInfluenceSource
// 0x0030 (0x0030 - 0x0000)
struct FortInfluenceMap_K2_AddInfluenceSource final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SourceName;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInfluenceMap_K2_AddInfluenceSource) == 0x000008, "Wrong alignment on FortInfluenceMap_K2_AddInfluenceSource");
static_assert(sizeof(FortInfluenceMap_K2_AddInfluenceSource) == 0x000030, "Wrong size on FortInfluenceMap_K2_AddInfluenceSource");
static_assert(offsetof(FortInfluenceMap_K2_AddInfluenceSource, WorldContext) == 0x000000, "Member 'FortInfluenceMap_K2_AddInfluenceSource::WorldContext' has a wrong offset!");
static_assert(offsetof(FortInfluenceMap_K2_AddInfluenceSource, Position) == 0x000008, "Member 'FortInfluenceMap_K2_AddInfluenceSource::Position' has a wrong offset!");
static_assert(offsetof(FortInfluenceMap_K2_AddInfluenceSource, SourceName) == 0x000018, "Member 'FortInfluenceMap_K2_AddInfluenceSource::SourceName' has a wrong offset!");
static_assert(offsetof(FortInfluenceMap_K2_AddInfluenceSource, Strength) == 0x000028, "Member 'FortInfluenceMap_K2_AddInfluenceSource::Strength' has a wrong offset!");

// Function FortniteGame.FortInfluenceMap.K2_GetInfluenceSourcePositions
// 0x0018 (0x0018 - 0x0000)
struct FortInfluenceMap_K2_GetInfluenceSourcePositions final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        InfluenceSourcePositions;                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInfluenceMap_K2_GetInfluenceSourcePositions) == 0x000008, "Wrong alignment on FortInfluenceMap_K2_GetInfluenceSourcePositions");
static_assert(sizeof(FortInfluenceMap_K2_GetInfluenceSourcePositions) == 0x000018, "Wrong size on FortInfluenceMap_K2_GetInfluenceSourcePositions");
static_assert(offsetof(FortInfluenceMap_K2_GetInfluenceSourcePositions, WorldContext) == 0x000000, "Member 'FortInfluenceMap_K2_GetInfluenceSourcePositions::WorldContext' has a wrong offset!");
static_assert(offsetof(FortInfluenceMap_K2_GetInfluenceSourcePositions, InfluenceSourcePositions) == 0x000008, "Member 'FortInfluenceMap_K2_GetInfluenceSourcePositions::InfluenceSourcePositions' has a wrong offset!");

// Function FortniteGame.FortInGameMapManager.GetCurrent
// 0x0010 (0x0010 - 0x0000)
struct FortInGameMapManager_GetCurrent final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortInGameMapManager*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInGameMapManager_GetCurrent) == 0x000008, "Wrong alignment on FortInGameMapManager_GetCurrent");
static_assert(sizeof(FortInGameMapManager_GetCurrent) == 0x000010, "Wrong size on FortInGameMapManager_GetCurrent");
static_assert(offsetof(FortInGameMapManager_GetCurrent, WorldContextObject) == 0x000000, "Member 'FortInGameMapManager_GetCurrent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortInGameMapManager_GetCurrent, ReturnValue) == 0x000008, "Member 'FortInGameMapManager_GetCurrent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortInGameMapManager.BroadcastExplorationEvents
// 0x0010 (0x0010 - 0x0000)
struct FortInGameMapManager_BroadcastExplorationEvents final
{
public:
	TArray<struct FTeamMapExplorationEvent>       Events;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInGameMapManager_BroadcastExplorationEvents) == 0x000008, "Wrong alignment on FortInGameMapManager_BroadcastExplorationEvents");
static_assert(sizeof(FortInGameMapManager_BroadcastExplorationEvents) == 0x000010, "Wrong size on FortInGameMapManager_BroadcastExplorationEvents");
static_assert(offsetof(FortInGameMapManager_BroadcastExplorationEvents, Events) == 0x000000, "Member 'FortInGameMapManager_BroadcastExplorationEvents::Events' has a wrong offset!");

// Function FortniteGame.FortInGameMapManager.PaintOnFog
// 0x0010 (0x0010 - 0x0000)
struct FortInGameMapManager_PaintOnFog final
{
public:
	struct FVector                                WorldCoords;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortTeam                                     Team;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInGameMapManager_PaintOnFog) == 0x000004, "Wrong alignment on FortInGameMapManager_PaintOnFog");
static_assert(sizeof(FortInGameMapManager_PaintOnFog) == 0x000010, "Wrong size on FortInGameMapManager_PaintOnFog");
static_assert(offsetof(FortInGameMapManager_PaintOnFog, WorldCoords) == 0x000000, "Member 'FortInGameMapManager_PaintOnFog::WorldCoords' has a wrong offset!");
static_assert(offsetof(FortInGameMapManager_PaintOnFog, Team) == 0x00000C, "Member 'FortInGameMapManager_PaintOnFog::Team' has a wrong offset!");

// Function FortniteGame.FortInitializationInterface.NeedsWorldReady
// 0x0001 (0x0001 - 0x0000)
struct FortInitializationInterface_NeedsWorldReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInitializationInterface_NeedsWorldReady) == 0x000001, "Wrong alignment on FortInitializationInterface_NeedsWorldReady");
static_assert(sizeof(FortInitializationInterface_NeedsWorldReady) == 0x000001, "Wrong size on FortInitializationInterface_NeedsWorldReady");
static_assert(offsetof(FortInitializationInterface_NeedsWorldReady, ReturnValue) == 0x000000, "Member 'FortInitializationInterface_NeedsWorldReady::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortInitializeFromObjectInterface.InitFromObject
// 0x0008 (0x0008 - 0x0000)
struct FortInitializeFromObjectInterface_InitFromObject final
{
public:
	class UObject*                                InitObject;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInitializeFromObjectInterface_InitFromObject) == 0x000008, "Wrong alignment on FortInitializeFromObjectInterface_InitFromObject");
static_assert(sizeof(FortInitializeFromObjectInterface_InitFromObject) == 0x000008, "Wrong size on FortInitializeFromObjectInterface_InitFromObject");
static_assert(offsetof(FortInitializeFromObjectInterface_InitFromObject, InitObject) == 0x000000, "Member 'FortInitializeFromObjectInterface_InitFromObject::InitObject' has a wrong offset!");

// Function FortniteGame.FortInteractInterface.ServerOnAttemptInteract
// 0x002C (0x002C - 0x0000)
struct FortInteractInterface_ServerOnAttemptInteract final
{
public:
	struct FInteractionType                       InteractType;                                      // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInteractInterface_ServerOnAttemptInteract) == 0x000004, "Wrong alignment on FortInteractInterface_ServerOnAttemptInteract");
static_assert(sizeof(FortInteractInterface_ServerOnAttemptInteract) == 0x00002C, "Wrong size on FortInteractInterface_ServerOnAttemptInteract");
static_assert(offsetof(FortInteractInterface_ServerOnAttemptInteract, InteractType) == 0x000000, "Member 'FortInteractInterface_ServerOnAttemptInteract::InteractType' has a wrong offset!");
static_assert(offsetof(FortInteractInterface_ServerOnAttemptInteract, ReturnValue) == 0x000028, "Member 'FortInteractInterface_ServerOnAttemptInteract::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestManager.GetBroadcasterQuestWithOpenWindow
// 0x0008 (0x0008 - 0x0000)
struct FortQuestManager_GetBroadcasterQuestWithOpenWindow final
{
public:
	class UFortQuestItem*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestManager_GetBroadcasterQuestWithOpenWindow) == 0x000008, "Wrong alignment on FortQuestManager_GetBroadcasterQuestWithOpenWindow");
static_assert(sizeof(FortQuestManager_GetBroadcasterQuestWithOpenWindow) == 0x000008, "Wrong size on FortQuestManager_GetBroadcasterQuestWithOpenWindow");
static_assert(offsetof(FortQuestManager_GetBroadcasterQuestWithOpenWindow, ReturnValue) == 0x000000, "Member 'FortQuestManager_GetBroadcasterQuestWithOpenWindow::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestManager.GetCompletedQuests
// 0x0010 (0x0010 - 0x0000)
struct FortQuestManager_GetCompletedQuests final
{
public:
	TArray<class UFortQuestItem*>                 OutCompletedQuests;                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestManager_GetCompletedQuests) == 0x000008, "Wrong alignment on FortQuestManager_GetCompletedQuests");
static_assert(sizeof(FortQuestManager_GetCompletedQuests) == 0x000010, "Wrong size on FortQuestManager_GetCompletedQuests");
static_assert(offsetof(FortQuestManager_GetCompletedQuests, OutCompletedQuests) == 0x000000, "Member 'FortQuestManager_GetCompletedQuests::OutCompletedQuests' has a wrong offset!");

// Function FortniteGame.FortQuestManager.GetCurrentQuests
// 0x0010 (0x0010 - 0x0000)
struct FortQuestManager_GetCurrentQuests final
{
public:
	TArray<class UFortQuestItem*>                 OutCurrentQuests;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestManager_GetCurrentQuests) == 0x000008, "Wrong alignment on FortQuestManager_GetCurrentQuests");
static_assert(sizeof(FortQuestManager_GetCurrentQuests) == 0x000010, "Wrong size on FortQuestManager_GetCurrentQuests");
static_assert(offsetof(FortQuestManager_GetCurrentQuests, OutCurrentQuests) == 0x000000, "Member 'FortQuestManager_GetCurrentQuests::OutCurrentQuests' has a wrong offset!");

// Function FortniteGame.FortQuestManager.GetNextUnseenQuest
// 0x0010 (0x0010 - 0x0000)
struct FortQuestManager_GetNextUnseenQuest final
{
public:
	EFortQuestType                                QuestType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortQuestItem*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestManager_GetNextUnseenQuest) == 0x000008, "Wrong alignment on FortQuestManager_GetNextUnseenQuest");
static_assert(sizeof(FortQuestManager_GetNextUnseenQuest) == 0x000010, "Wrong size on FortQuestManager_GetNextUnseenQuest");
static_assert(offsetof(FortQuestManager_GetNextUnseenQuest, QuestType) == 0x000000, "Member 'FortQuestManager_GetNextUnseenQuest::QuestType' has a wrong offset!");
static_assert(offsetof(FortQuestManager_GetNextUnseenQuest, ReturnValue) == 0x000008, "Member 'FortQuestManager_GetNextUnseenQuest::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestManager.GetPinnedQuests
// 0x0010 (0x0010 - 0x0000)
struct FortQuestManager_GetPinnedQuests final
{
public:
	TArray<class UFortQuestItem*>                 OutPinnedQuestItems;                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestManager_GetPinnedQuests) == 0x000008, "Wrong alignment on FortQuestManager_GetPinnedQuests");
static_assert(sizeof(FortQuestManager_GetPinnedQuests) == 0x000010, "Wrong size on FortQuestManager_GetPinnedQuests");
static_assert(offsetof(FortQuestManager_GetPinnedQuests, OutPinnedQuestItems) == 0x000000, "Member 'FortQuestManager_GetPinnedQuests::OutPinnedQuestItems' has a wrong offset!");

// Function FortniteGame.FortQuestManager.IsMainQuest
// 0x0010 (0x0010 - 0x0000)
struct FortQuestManager_IsMainQuest final
{
public:
	class UFortQuestItem*                         Quest;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuestManager_IsMainQuest) == 0x000008, "Wrong alignment on FortQuestManager_IsMainQuest");
static_assert(sizeof(FortQuestManager_IsMainQuest) == 0x000010, "Wrong size on FortQuestManager_IsMainQuest");
static_assert(offsetof(FortQuestManager_IsMainQuest, Quest) == 0x000000, "Member 'FortQuestManager_IsMainQuest::Quest' has a wrong offset!");
static_assert(offsetof(FortQuestManager_IsMainQuest, ReturnValue) == 0x000008, "Member 'FortQuestManager_IsMainQuest::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestManager.SendCustomStatEvent
// 0x0018 (0x0018 - 0x0000)
struct FortQuestManager_SendCustomStatEvent final
{
public:
	struct FDataTableRowHandle                    ObjectiveStat;                                     // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceFlush;                                       // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuestManager_SendCustomStatEvent) == 0x000008, "Wrong alignment on FortQuestManager_SendCustomStatEvent");
static_assert(sizeof(FortQuestManager_SendCustomStatEvent) == 0x000018, "Wrong size on FortQuestManager_SendCustomStatEvent");
static_assert(offsetof(FortQuestManager_SendCustomStatEvent, ObjectiveStat) == 0x000000, "Member 'FortQuestManager_SendCustomStatEvent::ObjectiveStat' has a wrong offset!");
static_assert(offsetof(FortQuestManager_SendCustomStatEvent, Count) == 0x000010, "Member 'FortQuestManager_SendCustomStatEvent::Count' has a wrong offset!");
static_assert(offsetof(FortQuestManager_SendCustomStatEvent, bForceFlush) == 0x000014, "Member 'FortQuestManager_SendCustomStatEvent::bForceFlush' has a wrong offset!");

// Function FortniteGame.FortQuestManager.SetQuestPinned
// 0x0010 (0x0010 - 0x0000)
struct FortQuestManager_SetQuestPinned final
{
public:
	class UFortQuestItem*                         Quest;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuestManager_SetQuestPinned) == 0x000008, "Wrong alignment on FortQuestManager_SetQuestPinned");
static_assert(sizeof(FortQuestManager_SetQuestPinned) == 0x000010, "Wrong size on FortQuestManager_SetQuestPinned");
static_assert(offsetof(FortQuestManager_SetQuestPinned, Quest) == 0x000000, "Member 'FortQuestManager_SetQuestPinned::Quest' has a wrong offset!");
static_assert(offsetof(FortQuestManager_SetQuestPinned, bEnabled) == 0x000008, "Member 'FortQuestManager_SetQuestPinned::bEnabled' has a wrong offset!");
static_assert(offsetof(FortQuestManager_SetQuestPinned, ReturnValue) == 0x000009, "Member 'FortQuestManager_SetQuestPinned::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestManager.ClaimNextCompletedQuestReward
// 0x0001 (0x0001 - 0x0000)
struct FortQuestManager_ClaimNextCompletedQuestReward final
{
public:
	EFortQuestType                                QuestType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestManager_ClaimNextCompletedQuestReward) == 0x000001, "Wrong alignment on FortQuestManager_ClaimNextCompletedQuestReward");
static_assert(sizeof(FortQuestManager_ClaimNextCompletedQuestReward) == 0x000001, "Wrong size on FortQuestManager_ClaimNextCompletedQuestReward");
static_assert(offsetof(FortQuestManager_ClaimNextCompletedQuestReward, QuestType) == 0x000000, "Member 'FortQuestManager_ClaimNextCompletedQuestReward::QuestType' has a wrong offset!");

// Function FortniteGame.FortQuestManager.ClaimQuestReward
// 0x0008 (0x0008 - 0x0000)
struct FortQuestManager_ClaimQuestReward final
{
public:
	const class UFortQuestItem*                   Quest;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestManager_ClaimQuestReward) == 0x000008, "Wrong alignment on FortQuestManager_ClaimQuestReward");
static_assert(sizeof(FortQuestManager_ClaimQuestReward) == 0x000008, "Wrong size on FortQuestManager_ClaimQuestReward");
static_assert(offsetof(FortQuestManager_ClaimQuestReward, Quest) == 0x000000, "Member 'FortQuestManager_ClaimQuestReward::Quest' has a wrong offset!");

// Function FortniteGame.FortQuestManager.ClaimSelectedQuestReward
// 0x0010 (0x0010 - 0x0000)
struct FortQuestManager_ClaimSelectedQuestReward final
{
public:
	const class UFortQuestItem*                   Quest;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuestManager_ClaimSelectedQuestReward) == 0x000008, "Wrong alignment on FortQuestManager_ClaimSelectedQuestReward");
static_assert(sizeof(FortQuestManager_ClaimSelectedQuestReward) == 0x000010, "Wrong size on FortQuestManager_ClaimSelectedQuestReward");
static_assert(offsetof(FortQuestManager_ClaimSelectedQuestReward, Quest) == 0x000000, "Member 'FortQuestManager_ClaimSelectedQuestReward::Quest' has a wrong offset!");
static_assert(offsetof(FortQuestManager_ClaimSelectedQuestReward, RewardIndex) == 0x000008, "Member 'FortQuestManager_ClaimSelectedQuestReward::RewardIndex' has a wrong offset!");

// Function FortniteGame.FortQuestManager.GetCurrentQuestsCategories
// 0x0010 (0x0010 - 0x0000)
struct FortQuestManager_GetCurrentQuestsCategories final
{
public:
	TArray<class UFortQuestCategory*>             Categories;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestManager_GetCurrentQuestsCategories) == 0x000008, "Wrong alignment on FortQuestManager_GetCurrentQuestsCategories");
static_assert(sizeof(FortQuestManager_GetCurrentQuestsCategories) == 0x000010, "Wrong size on FortQuestManager_GetCurrentQuestsCategories");
static_assert(offsetof(FortQuestManager_GetCurrentQuestsCategories, Categories) == 0x000000, "Member 'FortQuestManager_GetCurrentQuestsCategories::Categories' has a wrong offset!");

// Function FortniteGame.FortQuestManager.GetMainQuest
// 0x0008 (0x0008 - 0x0000)
struct FortQuestManager_GetMainQuest final
{
public:
	class UFortQuestItem*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestManager_GetMainQuest) == 0x000008, "Wrong alignment on FortQuestManager_GetMainQuest");
static_assert(sizeof(FortQuestManager_GetMainQuest) == 0x000008, "Wrong size on FortQuestManager_GetMainQuest");
static_assert(offsetof(FortQuestManager_GetMainQuest, ReturnValue) == 0x000000, "Member 'FortQuestManager_GetMainQuest::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestManager.GetQuestCategory
// 0x0010 (0x0010 - 0x0000)
struct FortQuestManager_GetQuestCategory final
{
public:
	class UFortQuestItem*                         QuestItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortQuestCategory*               ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestManager_GetQuestCategory) == 0x000008, "Wrong alignment on FortQuestManager_GetQuestCategory");
static_assert(sizeof(FortQuestManager_GetQuestCategory) == 0x000010, "Wrong size on FortQuestManager_GetQuestCategory");
static_assert(offsetof(FortQuestManager_GetQuestCategory, QuestItem) == 0x000000, "Member 'FortQuestManager_GetQuestCategory::QuestItem' has a wrong offset!");
static_assert(offsetof(FortQuestManager_GetQuestCategory, ReturnValue) == 0x000008, "Member 'FortQuestManager_GetQuestCategory::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestManager.GetQuestWithDefinition
// 0x0010 (0x0010 - 0x0000)
struct FortQuestManager_GetQuestWithDefinition final
{
public:
	const class UFortQuestItemDefinition*         Definition;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortQuestItem*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestManager_GetQuestWithDefinition) == 0x000008, "Wrong alignment on FortQuestManager_GetQuestWithDefinition");
static_assert(sizeof(FortQuestManager_GetQuestWithDefinition) == 0x000010, "Wrong size on FortQuestManager_GetQuestWithDefinition");
static_assert(offsetof(FortQuestManager_GetQuestWithDefinition, Definition) == 0x000000, "Member 'FortQuestManager_GetQuestWithDefinition::Definition' has a wrong offset!");
static_assert(offsetof(FortQuestManager_GetQuestWithDefinition, ReturnValue) == 0x000008, "Member 'FortQuestManager_GetQuestWithDefinition::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestManager.GetRemainingDailyQuestRerolls
// 0x0004 (0x0004 - 0x0000)
struct FortQuestManager_GetRemainingDailyQuestRerolls final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestManager_GetRemainingDailyQuestRerolls) == 0x000004, "Wrong alignment on FortQuestManager_GetRemainingDailyQuestRerolls");
static_assert(sizeof(FortQuestManager_GetRemainingDailyQuestRerolls) == 0x000004, "Wrong size on FortQuestManager_GetRemainingDailyQuestRerolls");
static_assert(offsetof(FortQuestManager_GetRemainingDailyQuestRerolls, ReturnValue) == 0x000000, "Member 'FortQuestManager_GetRemainingDailyQuestRerolls::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestManager.GetSourceAndContextTags
// 0x0040 (0x0040 - 0x0000)
struct FortQuestManager_GetSourceAndContextTags final
{
public:
	struct FGameplayTagContainer                  OutSourceTags;                                     // 0x0000(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  OutContextTags;                                    // 0x0020(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestManager_GetSourceAndContextTags) == 0x000008, "Wrong alignment on FortQuestManager_GetSourceAndContextTags");
static_assert(sizeof(FortQuestManager_GetSourceAndContextTags) == 0x000040, "Wrong size on FortQuestManager_GetSourceAndContextTags");
static_assert(offsetof(FortQuestManager_GetSourceAndContextTags, OutSourceTags) == 0x000000, "Member 'FortQuestManager_GetSourceAndContextTags::OutSourceTags' has a wrong offset!");
static_assert(offsetof(FortQuestManager_GetSourceAndContextTags, OutContextTags) == 0x000020, "Member 'FortQuestManager_GetSourceAndContextTags::OutContextTags' has a wrong offset!");

// Function FortniteGame.FortQuestManager.HasCompletedObjective
// 0x0020 (0x0020 - 0x0000)
struct FortQuestManager_HasCompletedObjective final
{
public:
	const class UFortQuestItemDefinition*         Definition;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    ObjectiveStatHandle;                               // 0x0008(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuestManager_HasCompletedObjective) == 0x000008, "Wrong alignment on FortQuestManager_HasCompletedObjective");
static_assert(sizeof(FortQuestManager_HasCompletedObjective) == 0x000020, "Wrong size on FortQuestManager_HasCompletedObjective");
static_assert(offsetof(FortQuestManager_HasCompletedObjective, Definition) == 0x000000, "Member 'FortQuestManager_HasCompletedObjective::Definition' has a wrong offset!");
static_assert(offsetof(FortQuestManager_HasCompletedObjective, ObjectiveStatHandle) == 0x000008, "Member 'FortQuestManager_HasCompletedObjective::ObjectiveStatHandle' has a wrong offset!");
static_assert(offsetof(FortQuestManager_HasCompletedObjective, ReturnValue) == 0x000018, "Member 'FortQuestManager_HasCompletedObjective::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestManager.HasCompletedObjectiveWithName
// 0x0018 (0x0018 - 0x0000)
struct FortQuestManager_HasCompletedObjectiveWithName final
{
public:
	const class UFortQuestItemDefinition*         Definition;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BackendName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuestManager_HasCompletedObjectiveWithName) == 0x000008, "Wrong alignment on FortQuestManager_HasCompletedObjectiveWithName");
static_assert(sizeof(FortQuestManager_HasCompletedObjectiveWithName) == 0x000018, "Wrong size on FortQuestManager_HasCompletedObjectiveWithName");
static_assert(offsetof(FortQuestManager_HasCompletedObjectiveWithName, Definition) == 0x000000, "Member 'FortQuestManager_HasCompletedObjectiveWithName::Definition' has a wrong offset!");
static_assert(offsetof(FortQuestManager_HasCompletedObjectiveWithName, BackendName) == 0x000008, "Member 'FortQuestManager_HasCompletedObjectiveWithName::BackendName' has a wrong offset!");
static_assert(offsetof(FortQuestManager_HasCompletedObjectiveWithName, ReturnValue) == 0x000010, "Member 'FortQuestManager_HasCompletedObjectiveWithName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestManager.HasCompletedQuest
// 0x0010 (0x0010 - 0x0000)
struct FortQuestManager_HasCompletedQuest final
{
public:
	const class UFortQuestItemDefinition*         Definition;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuestManager_HasCompletedQuest) == 0x000008, "Wrong alignment on FortQuestManager_HasCompletedQuest");
static_assert(sizeof(FortQuestManager_HasCompletedQuest) == 0x000010, "Wrong size on FortQuestManager_HasCompletedQuest");
static_assert(offsetof(FortQuestManager_HasCompletedQuest, Definition) == 0x000000, "Member 'FortQuestManager_HasCompletedQuest::Definition' has a wrong offset!");
static_assert(offsetof(FortQuestManager_HasCompletedQuest, ReturnValue) == 0x000008, "Member 'FortQuestManager_HasCompletedQuest::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestManager.HasQuestBeenSeenLocally
// 0x0010 (0x0010 - 0x0000)
struct FortQuestManager_HasQuestBeenSeenLocally final
{
public:
	const class UFortQuestItem*                   Quest;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuestManager_HasQuestBeenSeenLocally) == 0x000008, "Wrong alignment on FortQuestManager_HasQuestBeenSeenLocally");
static_assert(sizeof(FortQuestManager_HasQuestBeenSeenLocally) == 0x000010, "Wrong size on FortQuestManager_HasQuestBeenSeenLocally");
static_assert(offsetof(FortQuestManager_HasQuestBeenSeenLocally, Quest) == 0x000000, "Member 'FortQuestManager_HasQuestBeenSeenLocally::Quest' has a wrong offset!");
static_assert(offsetof(FortQuestManager_HasQuestBeenSeenLocally, ReturnValue) == 0x000008, "Member 'FortQuestManager_HasQuestBeenSeenLocally::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestManager.HasUnsavedPrimaryMissionProgress
// 0x0001 (0x0001 - 0x0000)
struct FortQuestManager_HasUnsavedPrimaryMissionProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestManager_HasUnsavedPrimaryMissionProgress) == 0x000001, "Wrong alignment on FortQuestManager_HasUnsavedPrimaryMissionProgress");
static_assert(sizeof(FortQuestManager_HasUnsavedPrimaryMissionProgress) == 0x000001, "Wrong size on FortQuestManager_HasUnsavedPrimaryMissionProgress");
static_assert(offsetof(FortQuestManager_HasUnsavedPrimaryMissionProgress, ReturnValue) == 0x000000, "Member 'FortQuestManager_HasUnsavedPrimaryMissionProgress::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestManager.HasUnseenQuests
// 0x0001 (0x0001 - 0x0000)
struct FortQuestManager_HasUnseenQuests final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestManager_HasUnseenQuests) == 0x000001, "Wrong alignment on FortQuestManager_HasUnseenQuests");
static_assert(sizeof(FortQuestManager_HasUnseenQuests) == 0x000001, "Wrong size on FortQuestManager_HasUnseenQuests");
static_assert(offsetof(FortQuestManager_HasUnseenQuests, ReturnValue) == 0x000000, "Member 'FortQuestManager_HasUnseenQuests::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestManager.IsObjectiveInProgress
// 0x0020 (0x0020 - 0x0000)
struct FortQuestManager_IsObjectiveInProgress final
{
public:
	const class UFortQuestItemDefinition*         Definition;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    ObjectiveStatHandle;                               // 0x0008(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuestManager_IsObjectiveInProgress) == 0x000008, "Wrong alignment on FortQuestManager_IsObjectiveInProgress");
static_assert(sizeof(FortQuestManager_IsObjectiveInProgress) == 0x000020, "Wrong size on FortQuestManager_IsObjectiveInProgress");
static_assert(offsetof(FortQuestManager_IsObjectiveInProgress, Definition) == 0x000000, "Member 'FortQuestManager_IsObjectiveInProgress::Definition' has a wrong offset!");
static_assert(offsetof(FortQuestManager_IsObjectiveInProgress, ObjectiveStatHandle) == 0x000008, "Member 'FortQuestManager_IsObjectiveInProgress::ObjectiveStatHandle' has a wrong offset!");
static_assert(offsetof(FortQuestManager_IsObjectiveInProgress, ReturnValue) == 0x000018, "Member 'FortQuestManager_IsObjectiveInProgress::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestManager.IsObjectiveWithNameInProgress
// 0x0018 (0x0018 - 0x0000)
struct FortQuestManager_IsObjectiveWithNameInProgress final
{
public:
	const class UFortQuestItemDefinition*         Definition;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BackendName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuestManager_IsObjectiveWithNameInProgress) == 0x000008, "Wrong alignment on FortQuestManager_IsObjectiveWithNameInProgress");
static_assert(sizeof(FortQuestManager_IsObjectiveWithNameInProgress) == 0x000018, "Wrong size on FortQuestManager_IsObjectiveWithNameInProgress");
static_assert(offsetof(FortQuestManager_IsObjectiveWithNameInProgress, Definition) == 0x000000, "Member 'FortQuestManager_IsObjectiveWithNameInProgress::Definition' has a wrong offset!");
static_assert(offsetof(FortQuestManager_IsObjectiveWithNameInProgress, BackendName) == 0x000008, "Member 'FortQuestManager_IsObjectiveWithNameInProgress::BackendName' has a wrong offset!");
static_assert(offsetof(FortQuestManager_IsObjectiveWithNameInProgress, ReturnValue) == 0x000010, "Member 'FortQuestManager_IsObjectiveWithNameInProgress::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestManager.IsQuestInProgress
// 0x0010 (0x0010 - 0x0000)
struct FortQuestManager_IsQuestInProgress final
{
public:
	const class UFortQuestItemDefinition*         Definition;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuestManager_IsQuestInProgress) == 0x000008, "Wrong alignment on FortQuestManager_IsQuestInProgress");
static_assert(sizeof(FortQuestManager_IsQuestInProgress) == 0x000010, "Wrong size on FortQuestManager_IsQuestInProgress");
static_assert(offsetof(FortQuestManager_IsQuestInProgress, Definition) == 0x000000, "Member 'FortQuestManager_IsQuestInProgress::Definition' has a wrong offset!");
static_assert(offsetof(FortQuestManager_IsQuestInProgress, ReturnValue) == 0x000008, "Member 'FortQuestManager_IsQuestInProgress::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestManager.MarkQuestSeen
// 0x0008 (0x0008 - 0x0000)
struct FortQuestManager_MarkQuestSeen final
{
public:
	class UFortQuestItem*                         Quest;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestManager_MarkQuestSeen) == 0x000008, "Wrong alignment on FortQuestManager_MarkQuestSeen");
static_assert(sizeof(FortQuestManager_MarkQuestSeen) == 0x000008, "Wrong size on FortQuestManager_MarkQuestSeen");
static_assert(offsetof(FortQuestManager_MarkQuestSeen, Quest) == 0x000000, "Member 'FortQuestManager_MarkQuestSeen::Quest' has a wrong offset!");

// Function FortniteGame.FortQuestManager.MarkQuestsSeen
// 0x0001 (0x0001 - 0x0000)
struct FortQuestManager_MarkQuestsSeen final
{
public:
	bool                                          bOnlyMarkPendingSeenQuests;                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestManager_MarkQuestsSeen) == 0x000001, "Wrong alignment on FortQuestManager_MarkQuestsSeen");
static_assert(sizeof(FortQuestManager_MarkQuestsSeen) == 0x000001, "Wrong size on FortQuestManager_MarkQuestsSeen");
static_assert(offsetof(FortQuestManager_MarkQuestsSeen, bOnlyMarkPendingSeenQuests) == 0x000000, "Member 'FortQuestManager_MarkQuestsSeen::bOnlyMarkPendingSeenQuests' has a wrong offset!");

// Function FortniteGame.FortQuestManager.RerollDailyQuest
// 0x0008 (0x0008 - 0x0000)
struct FortQuestManager_RerollDailyQuest final
{
public:
	const class UFortQuestItem*                   QuestToDiscard;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestManager_RerollDailyQuest) == 0x000008, "Wrong alignment on FortQuestManager_RerollDailyQuest");
static_assert(sizeof(FortQuestManager_RerollDailyQuest) == 0x000008, "Wrong size on FortQuestManager_RerollDailyQuest");
static_assert(offsetof(FortQuestManager_RerollDailyQuest, QuestToDiscard) == 0x000000, "Member 'FortQuestManager_RerollDailyQuest::QuestToDiscard' has a wrong offset!");

// Function FortniteGame.FortKeepEventInfo.GetWave
// 0x0048 (0x0048 - 0x0000)
struct FortKeepEventInfo_GetWave final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKeepEventWaveData                     ReturnValue;                                       // 0x0008(0x0040)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKeepEventInfo_GetWave) == 0x000008, "Wrong alignment on FortKeepEventInfo_GetWave");
static_assert(sizeof(FortKeepEventInfo_GetWave) == 0x000048, "Wrong size on FortKeepEventInfo_GetWave");
static_assert(offsetof(FortKeepEventInfo_GetWave, Param_Index) == 0x000000, "Member 'FortKeepEventInfo_GetWave::Param_Index' has a wrong offset!");
static_assert(offsetof(FortKeepEventInfo_GetWave, ReturnValue) == 0x000008, "Member 'FortKeepEventInfo_GetWave::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKeepEventInfo.NumberOfWaves
// 0x0004 (0x0004 - 0x0000)
struct FortKeepEventInfo_NumberOfWaves final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKeepEventInfo_NumberOfWaves) == 0x000004, "Wrong alignment on FortKeepEventInfo_NumberOfWaves");
static_assert(sizeof(FortKeepEventInfo_NumberOfWaves) == 0x000004, "Wrong size on FortKeepEventInfo_NumberOfWaves");
static_assert(offsetof(FortKeepEventInfo_NumberOfWaves, ReturnValue) == 0x000000, "Member 'FortKeepEventInfo_NumberOfWaves::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKeepEventList.GetEvent
// 0x0038 (0x0038 - 0x0000)
struct FortKeepEventList_GetEvent final
{
public:
	int32                                         Idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKeepEventInfo                         ReturnValue;                                       // 0x0008(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKeepEventList_GetEvent) == 0x000008, "Wrong alignment on FortKeepEventList_GetEvent");
static_assert(sizeof(FortKeepEventList_GetEvent) == 0x000038, "Wrong size on FortKeepEventList_GetEvent");
static_assert(offsetof(FortKeepEventList_GetEvent, Idx) == 0x000000, "Member 'FortKeepEventList_GetEvent::Idx' has a wrong offset!");
static_assert(offsetof(FortKeepEventList_GetEvent, ReturnValue) == 0x000008, "Member 'FortKeepEventList_GetEvent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKeepEventList.GetEventDescription
// 0x0020 (0x0020 - 0x0000)
struct FortKeepEventList_GetEventDescription final
{
public:
	int32                                         Idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKeepEventList_GetEventDescription) == 0x000008, "Wrong alignment on FortKeepEventList_GetEventDescription");
static_assert(sizeof(FortKeepEventList_GetEventDescription) == 0x000020, "Wrong size on FortKeepEventList_GetEventDescription");
static_assert(offsetof(FortKeepEventList_GetEventDescription, Idx) == 0x000000, "Member 'FortKeepEventList_GetEventDescription::Idx' has a wrong offset!");
static_assert(offsetof(FortKeepEventList_GetEventDescription, ReturnValue) == 0x000008, "Member 'FortKeepEventList_GetEventDescription::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKeepDefenseManager.GetNumberAliveEnemies
// 0x0004 (0x0004 - 0x0000)
struct FortKeepDefenseManager_GetNumberAliveEnemies final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKeepDefenseManager_GetNumberAliveEnemies) == 0x000004, "Wrong alignment on FortKeepDefenseManager_GetNumberAliveEnemies");
static_assert(sizeof(FortKeepDefenseManager_GetNumberAliveEnemies) == 0x000004, "Wrong size on FortKeepDefenseManager_GetNumberAliveEnemies");
static_assert(offsetof(FortKeepDefenseManager_GetNumberAliveEnemies, ReturnValue) == 0x000000, "Member 'FortKeepDefenseManager_GetNumberAliveEnemies::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKeepDefenseManager.GetWaveDescription
// 0x0018 (0x0018 - 0x0000)
struct FortKeepDefenseManager_GetWaveDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKeepDefenseManager_GetWaveDescription) == 0x000008, "Wrong alignment on FortKeepDefenseManager_GetWaveDescription");
static_assert(sizeof(FortKeepDefenseManager_GetWaveDescription) == 0x000018, "Wrong size on FortKeepDefenseManager_GetWaveDescription");
static_assert(offsetof(FortKeepDefenseManager_GetWaveDescription, ReturnValue) == 0x000000, "Member 'FortKeepDefenseManager_GetWaveDescription::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKeepDefenseManager.StartAIEncounter
// 0x0030 (0x0030 - 0x0000)
struct FortKeepDefenseManager_StartAIEncounter final
{
public:
	TSubclassOf<class UFortAIEncounterInfo>       EncounterTemplate;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAISpawnGroupProgressionInfo*       SpawnGroupProgressionInfo;                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActivationDelay;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EncounterDifficultyLevel;                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AliveMultiplier;                                   // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAIEncounterInfo*                   ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKeepDefenseManager_StartAIEncounter) == 0x000008, "Wrong alignment on FortKeepDefenseManager_StartAIEncounter");
static_assert(sizeof(FortKeepDefenseManager_StartAIEncounter) == 0x000030, "Wrong size on FortKeepDefenseManager_StartAIEncounter");
static_assert(offsetof(FortKeepDefenseManager_StartAIEncounter, EncounterTemplate) == 0x000000, "Member 'FortKeepDefenseManager_StartAIEncounter::EncounterTemplate' has a wrong offset!");
static_assert(offsetof(FortKeepDefenseManager_StartAIEncounter, TargetActor) == 0x000008, "Member 'FortKeepDefenseManager_StartAIEncounter::TargetActor' has a wrong offset!");
static_assert(offsetof(FortKeepDefenseManager_StartAIEncounter, SpawnGroupProgressionInfo) == 0x000010, "Member 'FortKeepDefenseManager_StartAIEncounter::SpawnGroupProgressionInfo' has a wrong offset!");
static_assert(offsetof(FortKeepDefenseManager_StartAIEncounter, ActivationDelay) == 0x000018, "Member 'FortKeepDefenseManager_StartAIEncounter::ActivationDelay' has a wrong offset!");
static_assert(offsetof(FortKeepDefenseManager_StartAIEncounter, EncounterDifficultyLevel) == 0x00001C, "Member 'FortKeepDefenseManager_StartAIEncounter::EncounterDifficultyLevel' has a wrong offset!");
static_assert(offsetof(FortKeepDefenseManager_StartAIEncounter, AliveMultiplier) == 0x000020, "Member 'FortKeepDefenseManager_StartAIEncounter::AliveMultiplier' has a wrong offset!");
static_assert(offsetof(FortKeepDefenseManager_StartAIEncounter, ReturnValue) == 0x000028, "Member 'FortKeepDefenseManager_StartAIEncounter::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKeepDefenseManager.StartEvent
// 0x0010 (0x0010 - 0x0000)
struct FortKeepDefenseManager_StartEvent final
{
public:
	class UFortKeepEventInfo*                     EventTemplate;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DifficultyLevelOffset;                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKeepDefenseManager_StartEvent) == 0x000008, "Wrong alignment on FortKeepDefenseManager_StartEvent");
static_assert(sizeof(FortKeepDefenseManager_StartEvent) == 0x000010, "Wrong size on FortKeepDefenseManager_StartEvent");
static_assert(offsetof(FortKeepDefenseManager_StartEvent, EventTemplate) == 0x000000, "Member 'FortKeepDefenseManager_StartEvent::EventTemplate' has a wrong offset!");
static_assert(offsetof(FortKeepDefenseManager_StartEvent, DifficultyLevelOffset) == 0x000008, "Member 'FortKeepDefenseManager_StartEvent::DifficultyLevelOffset' has a wrong offset!");

// Function FortniteGame.FortKeepDefenseManager.StartEventFromList
// 0x0010 (0x0010 - 0x0000)
struct FortKeepDefenseManager_StartEventFromList final
{
public:
	class UFortKeepEventList*                     EventList;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventNumber;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKeepDefenseManager_StartEventFromList) == 0x000008, "Wrong alignment on FortKeepDefenseManager_StartEventFromList");
static_assert(sizeof(FortKeepDefenseManager_StartEventFromList) == 0x000010, "Wrong size on FortKeepDefenseManager_StartEventFromList");
static_assert(offsetof(FortKeepDefenseManager_StartEventFromList, EventList) == 0x000000, "Member 'FortKeepDefenseManager_StartEventFromList::EventList' has a wrong offset!");
static_assert(offsetof(FortKeepDefenseManager_StartEventFromList, EventNumber) == 0x000008, "Member 'FortKeepDefenseManager_StartEventFromList::EventNumber' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.AddRegenItemToInventoryOwner
// 0x0020 (0x0020 - 0x0000)
struct FortKismetLibrary_AddRegenItemToInventoryOwner final
{
public:
	TScriptInterface<class IFortInventoryOwnerInterface> InventoryOwner;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	const class UFortWorldItemDefinition*         RegenItemDefinition;                               // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberToGive;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotifyPlayer;                                     // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_AddRegenItemToInventoryOwner) == 0x000008, "Wrong alignment on FortKismetLibrary_AddRegenItemToInventoryOwner");
static_assert(sizeof(FortKismetLibrary_AddRegenItemToInventoryOwner) == 0x000020, "Wrong size on FortKismetLibrary_AddRegenItemToInventoryOwner");
static_assert(offsetof(FortKismetLibrary_AddRegenItemToInventoryOwner, InventoryOwner) == 0x000000, "Member 'FortKismetLibrary_AddRegenItemToInventoryOwner::InventoryOwner' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_AddRegenItemToInventoryOwner, RegenItemDefinition) == 0x000010, "Member 'FortKismetLibrary_AddRegenItemToInventoryOwner::RegenItemDefinition' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_AddRegenItemToInventoryOwner, NumberToGive) == 0x000018, "Member 'FortKismetLibrary_AddRegenItemToInventoryOwner::NumberToGive' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_AddRegenItemToInventoryOwner, bNotifyPlayer) == 0x00001C, "Member 'FortKismetLibrary_AddRegenItemToInventoryOwner::bNotifyPlayer' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.ApplyEncounterOptionOverridesFromWaveDataToEncounterSettings
// 0x0210 (0x0210 - 0x0000)
struct FortKismetLibrary_ApplyEncounterOptionOverridesFromWaveDataToEncounterSettings final
{
public:
	struct FTieredWaveSetData                     WaveData;                                          // 0x0000(0x0160)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FFortEncounterSettings                 EncounterSettings;                                 // 0x0160(0x0058)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FFortEncounterSettings                 ReturnValue;                                       // 0x01B8(0x0058)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_ApplyEncounterOptionOverridesFromWaveDataToEncounterSettings) == 0x000008, "Wrong alignment on FortKismetLibrary_ApplyEncounterOptionOverridesFromWaveDataToEncounterSettings");
static_assert(sizeof(FortKismetLibrary_ApplyEncounterOptionOverridesFromWaveDataToEncounterSettings) == 0x000210, "Wrong size on FortKismetLibrary_ApplyEncounterOptionOverridesFromWaveDataToEncounterSettings");
static_assert(offsetof(FortKismetLibrary_ApplyEncounterOptionOverridesFromWaveDataToEncounterSettings, WaveData) == 0x000000, "Member 'FortKismetLibrary_ApplyEncounterOptionOverridesFromWaveDataToEncounterSettings::WaveData' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_ApplyEncounterOptionOverridesFromWaveDataToEncounterSettings, EncounterSettings) == 0x000160, "Member 'FortKismetLibrary_ApplyEncounterOptionOverridesFromWaveDataToEncounterSettings::EncounterSettings' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_ApplyEncounterOptionOverridesFromWaveDataToEncounterSettings, ReturnValue) == 0x0001B8, "Member 'FortKismetLibrary_ApplyEncounterOptionOverridesFromWaveDataToEncounterSettings::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.ApplyGlobalEnvironmentDamageToActor
// 0x0038 (0x0038 - 0x0000)
struct FortKismetLibrary_ApplyGlobalEnvironmentDamageToActor final
{
public:
	class AActor*                                 DamageTargetActor;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnvironmentDamage;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  AdditionalContextTags;                             // 0x0010(0x0020)(Parm, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            EnvironmentDamageGE;                               // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_ApplyGlobalEnvironmentDamageToActor) == 0x000008, "Wrong alignment on FortKismetLibrary_ApplyGlobalEnvironmentDamageToActor");
static_assert(sizeof(FortKismetLibrary_ApplyGlobalEnvironmentDamageToActor) == 0x000038, "Wrong size on FortKismetLibrary_ApplyGlobalEnvironmentDamageToActor");
static_assert(offsetof(FortKismetLibrary_ApplyGlobalEnvironmentDamageToActor, DamageTargetActor) == 0x000000, "Member 'FortKismetLibrary_ApplyGlobalEnvironmentDamageToActor::DamageTargetActor' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_ApplyGlobalEnvironmentDamageToActor, EnvironmentDamage) == 0x000008, "Member 'FortKismetLibrary_ApplyGlobalEnvironmentDamageToActor::EnvironmentDamage' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_ApplyGlobalEnvironmentDamageToActor, AdditionalContextTags) == 0x000010, "Member 'FortKismetLibrary_ApplyGlobalEnvironmentDamageToActor::AdditionalContextTags' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_ApplyGlobalEnvironmentDamageToActor, EnvironmentDamageGE) == 0x000030, "Member 'FortKismetLibrary_ApplyGlobalEnvironmentDamageToActor::EnvironmentDamageGE' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.ApplyGlobalEnvironmentGameplayEffectToActor
// 0x0040 (0x0040 - 0x0000)
struct FortKismetLibrary_ApplyGlobalEnvironmentGameplayEffectToActor final
{
public:
	class AActor*                                 EffectTargetActor;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            GameplayEffect;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameplayEffectLevel;                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  AdditionalContextTags;                             // 0x0018(0x0020)(Parm, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_ApplyGlobalEnvironmentGameplayEffectToActor) == 0x000008, "Wrong alignment on FortKismetLibrary_ApplyGlobalEnvironmentGameplayEffectToActor");
static_assert(sizeof(FortKismetLibrary_ApplyGlobalEnvironmentGameplayEffectToActor) == 0x000040, "Wrong size on FortKismetLibrary_ApplyGlobalEnvironmentGameplayEffectToActor");
static_assert(offsetof(FortKismetLibrary_ApplyGlobalEnvironmentGameplayEffectToActor, EffectTargetActor) == 0x000000, "Member 'FortKismetLibrary_ApplyGlobalEnvironmentGameplayEffectToActor::EffectTargetActor' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_ApplyGlobalEnvironmentGameplayEffectToActor, GameplayEffect) == 0x000008, "Member 'FortKismetLibrary_ApplyGlobalEnvironmentGameplayEffectToActor::GameplayEffect' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_ApplyGlobalEnvironmentGameplayEffectToActor, GameplayEffectLevel) == 0x000010, "Member 'FortKismetLibrary_ApplyGlobalEnvironmentGameplayEffectToActor::GameplayEffectLevel' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_ApplyGlobalEnvironmentGameplayEffectToActor, AdditionalContextTags) == 0x000018, "Member 'FortKismetLibrary_ApplyGlobalEnvironmentGameplayEffectToActor::AdditionalContextTags' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_ApplyGlobalEnvironmentGameplayEffectToActor, ReturnValue) == 0x000038, "Member 'FortKismetLibrary_ApplyGlobalEnvironmentGameplayEffectToActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.AuthorityGetFortPossessedPlayerPawns
// 0x0018 (0x0018 - 0x0000)
struct FortKismetLibrary_AuthorityGetFortPossessedPlayerPawns final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AFortPlayerPawn*>                ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_AuthorityGetFortPossessedPlayerPawns) == 0x000008, "Wrong alignment on FortKismetLibrary_AuthorityGetFortPossessedPlayerPawns");
static_assert(sizeof(FortKismetLibrary_AuthorityGetFortPossessedPlayerPawns) == 0x000018, "Wrong size on FortKismetLibrary_AuthorityGetFortPossessedPlayerPawns");
static_assert(offsetof(FortKismetLibrary_AuthorityGetFortPossessedPlayerPawns, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_AuthorityGetFortPossessedPlayerPawns::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_AuthorityGetFortPossessedPlayerPawns, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_AuthorityGetFortPossessedPlayerPawns::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.BroadcastMessage
// 0x0020 (0x0020 - 0x0000)
struct FortKismetLibrary_BroadcastMessage final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   MESSAGE;                                           // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_BroadcastMessage) == 0x000008, "Wrong alignment on FortKismetLibrary_BroadcastMessage");
static_assert(sizeof(FortKismetLibrary_BroadcastMessage) == 0x000020, "Wrong size on FortKismetLibrary_BroadcastMessage");
static_assert(offsetof(FortKismetLibrary_BroadcastMessage, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_BroadcastMessage::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_BroadcastMessage, MESSAGE) == 0x000008, "Member 'FortKismetLibrary_BroadcastMessage::MESSAGE' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.BroadcastPlayerImpactAtLocation
// 0x0028 (0x0028 - 0x0000)
struct FortKismetLibrary_BroadcastPlayerImpactAtLocation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0010(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Loudness;                                          // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRelativePosition;                                 // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0025(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_BroadcastPlayerImpactAtLocation) == 0x000008, "Wrong alignment on FortKismetLibrary_BroadcastPlayerImpactAtLocation");
static_assert(sizeof(FortKismetLibrary_BroadcastPlayerImpactAtLocation) == 0x000028, "Wrong size on FortKismetLibrary_BroadcastPlayerImpactAtLocation");
static_assert(offsetof(FortKismetLibrary_BroadcastPlayerImpactAtLocation, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_BroadcastPlayerImpactAtLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_BroadcastPlayerImpactAtLocation, Player) == 0x000008, "Member 'FortKismetLibrary_BroadcastPlayerImpactAtLocation::Player' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_BroadcastPlayerImpactAtLocation, Position) == 0x000010, "Member 'FortKismetLibrary_BroadcastPlayerImpactAtLocation::Position' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_BroadcastPlayerImpactAtLocation, Loudness) == 0x00001C, "Member 'FortKismetLibrary_BroadcastPlayerImpactAtLocation::Loudness' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_BroadcastPlayerImpactAtLocation, Duration) == 0x000020, "Member 'FortKismetLibrary_BroadcastPlayerImpactAtLocation::Duration' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_BroadcastPlayerImpactAtLocation, bRelativePosition) == 0x000024, "Member 'FortKismetLibrary_BroadcastPlayerImpactAtLocation::bRelativePosition' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_BroadcastPlayerImpactAtLocation, ReturnValue) == 0x000025, "Member 'FortKismetLibrary_BroadcastPlayerImpactAtLocation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.BroadcastSound
// 0x0018 (0x0018 - 0x0000)
struct FortKismetLibrary_BroadcastSound final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             InSound;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_BroadcastSound) == 0x000008, "Wrong alignment on FortKismetLibrary_BroadcastSound");
static_assert(sizeof(FortKismetLibrary_BroadcastSound) == 0x000018, "Wrong size on FortKismetLibrary_BroadcastSound");
static_assert(offsetof(FortKismetLibrary_BroadcastSound, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_BroadcastSound::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_BroadcastSound, InSound) == 0x000008, "Member 'FortKismetLibrary_BroadcastSound::InSound' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_BroadcastSound, VolumeMultiplier) == 0x000010, "Member 'FortKismetLibrary_BroadcastSound::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_BroadcastSound, PitchMultiplier) == 0x000014, "Member 'FortKismetLibrary_BroadcastSound::PitchMultiplier' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.BroadcastSoundAtLocation
// 0x0028 (0x0028 - 0x0000)
struct FortKismetLibrary_BroadcastSoundAtLocation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             InSound;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_BroadcastSoundAtLocation) == 0x000008, "Wrong alignment on FortKismetLibrary_BroadcastSoundAtLocation");
static_assert(sizeof(FortKismetLibrary_BroadcastSoundAtLocation) == 0x000028, "Wrong size on FortKismetLibrary_BroadcastSoundAtLocation");
static_assert(offsetof(FortKismetLibrary_BroadcastSoundAtLocation, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_BroadcastSoundAtLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_BroadcastSoundAtLocation, InSound) == 0x000008, "Member 'FortKismetLibrary_BroadcastSoundAtLocation::InSound' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_BroadcastSoundAtLocation, Location) == 0x000010, "Member 'FortKismetLibrary_BroadcastSoundAtLocation::Location' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_BroadcastSoundAtLocation, VolumeMultiplier) == 0x00001C, "Member 'FortKismetLibrary_BroadcastSoundAtLocation::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_BroadcastSoundAtLocation, PitchMultiplier) == 0x000020, "Member 'FortKismetLibrary_BroadcastSoundAtLocation::PitchMultiplier' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.ClearTutorialHighlights
// 0x0008 (0x0008 - 0x0000)
struct FortKismetLibrary_ClearTutorialHighlights final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_ClearTutorialHighlights) == 0x000008, "Wrong alignment on FortKismetLibrary_ClearTutorialHighlights");
static_assert(sizeof(FortKismetLibrary_ClearTutorialHighlights) == 0x000008, "Wrong size on FortKismetLibrary_ClearTutorialHighlights");
static_assert(offsetof(FortKismetLibrary_ClearTutorialHighlights, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_ClearTutorialHighlights::WorldContextObject' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.CloseTalkingHead
// 0x0008 (0x0008 - 0x0000)
struct FortKismetLibrary_CloseTalkingHead final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_CloseTalkingHead) == 0x000008, "Wrong alignment on FortKismetLibrary_CloseTalkingHead");
static_assert(sizeof(FortKismetLibrary_CloseTalkingHead) == 0x000008, "Wrong size on FortKismetLibrary_CloseTalkingHead");
static_assert(offsetof(FortKismetLibrary_CloseTalkingHead, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_CloseTalkingHead::WorldContextObject' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.ConvertToGameTime
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_ConvertToGameTime final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRealTime;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_ConvertToGameTime) == 0x000008, "Wrong alignment on FortKismetLibrary_ConvertToGameTime");
static_assert(sizeof(FortKismetLibrary_ConvertToGameTime) == 0x000010, "Wrong size on FortKismetLibrary_ConvertToGameTime");
static_assert(offsetof(FortKismetLibrary_ConvertToGameTime, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_ConvertToGameTime::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_ConvertToGameTime, InRealTime) == 0x000008, "Member 'FortKismetLibrary_ConvertToGameTime::InRealTime' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_ConvertToGameTime, ReturnValue) == 0x00000C, "Member 'FortKismetLibrary_ConvertToGameTime::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.ConvertToRealTime
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_ConvertToRealTime final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InGameTime;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_ConvertToRealTime) == 0x000008, "Wrong alignment on FortKismetLibrary_ConvertToRealTime");
static_assert(sizeof(FortKismetLibrary_ConvertToRealTime) == 0x000010, "Wrong size on FortKismetLibrary_ConvertToRealTime");
static_assert(offsetof(FortKismetLibrary_ConvertToRealTime, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_ConvertToRealTime::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_ConvertToRealTime, InGameTime) == 0x000008, "Member 'FortKismetLibrary_ConvertToRealTime::InGameTime' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_ConvertToRealTime, ReturnValue) == 0x00000C, "Member 'FortKismetLibrary_ConvertToRealTime::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.CreateNewSplineObject
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_CreateNewSplineObject final
{
public:
	class UObject*                                Param_Outer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortSpline*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_CreateNewSplineObject) == 0x000008, "Wrong alignment on FortKismetLibrary_CreateNewSplineObject");
static_assert(sizeof(FortKismetLibrary_CreateNewSplineObject) == 0x000010, "Wrong size on FortKismetLibrary_CreateNewSplineObject");
static_assert(offsetof(FortKismetLibrary_CreateNewSplineObject, Param_Outer) == 0x000000, "Member 'FortKismetLibrary_CreateNewSplineObject::Param_Outer' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_CreateNewSplineObject, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_CreateNewSplineObject::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.DisableTutorialHighlight
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_DisableTutorialHighlight final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WidgetName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_DisableTutorialHighlight) == 0x000008, "Wrong alignment on FortKismetLibrary_DisableTutorialHighlight");
static_assert(sizeof(FortKismetLibrary_DisableTutorialHighlight) == 0x000010, "Wrong size on FortKismetLibrary_DisableTutorialHighlight");
static_assert(offsetof(FortKismetLibrary_DisableTutorialHighlight, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_DisableTutorialHighlight::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_DisableTutorialHighlight, WidgetName) == 0x000008, "Member 'FortKismetLibrary_DisableTutorialHighlight::WidgetName' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.EffectContextAddSourceObject
// 0x0020 (0x0020 - 0x0000)
struct FortKismetLibrary_EffectContextAddSourceObject final
{
public:
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class UObject*                                Src;                                               // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_EffectContextAddSourceObject) == 0x000008, "Wrong alignment on FortKismetLibrary_EffectContextAddSourceObject");
static_assert(sizeof(FortKismetLibrary_EffectContextAddSourceObject) == 0x000020, "Wrong size on FortKismetLibrary_EffectContextAddSourceObject");
static_assert(offsetof(FortKismetLibrary_EffectContextAddSourceObject, EffectContext) == 0x000000, "Member 'FortKismetLibrary_EffectContextAddSourceObject::EffectContext' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_EffectContextAddSourceObject, Src) == 0x000018, "Member 'FortKismetLibrary_EffectContextAddSourceObject::Src' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.EmptyQuickBarSlot
// 0x0018 (0x0018 - 0x0000)
struct FortKismetLibrary_EmptyQuickBarSlot final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortQuickBars                                QuickBarType;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotIndex;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_EmptyQuickBarSlot) == 0x000008, "Wrong alignment on FortKismetLibrary_EmptyQuickBarSlot");
static_assert(sizeof(FortKismetLibrary_EmptyQuickBarSlot) == 0x000018, "Wrong size on FortKismetLibrary_EmptyQuickBarSlot");
static_assert(offsetof(FortKismetLibrary_EmptyQuickBarSlot, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_EmptyQuickBarSlot::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_EmptyQuickBarSlot, QuickBarType) == 0x000008, "Member 'FortKismetLibrary_EmptyQuickBarSlot::QuickBarType' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_EmptyQuickBarSlot, SlotIndex) == 0x00000C, "Member 'FortKismetLibrary_EmptyQuickBarSlot::SlotIndex' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_EmptyQuickBarSlot, ReturnValue) == 0x000010, "Member 'FortKismetLibrary_EmptyQuickBarSlot::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.EnableTutorialHighlight
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_EnableTutorialHighlight final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WidgetName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_EnableTutorialHighlight) == 0x000008, "Wrong alignment on FortKismetLibrary_EnableTutorialHighlight");
static_assert(sizeof(FortKismetLibrary_EnableTutorialHighlight) == 0x000010, "Wrong size on FortKismetLibrary_EnableTutorialHighlight");
static_assert(offsetof(FortKismetLibrary_EnableTutorialHighlight, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_EnableTutorialHighlight::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_EnableTutorialHighlight, WidgetName) == 0x000008, "Member 'FortKismetLibrary_EnableTutorialHighlight::WidgetName' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.EndWaitForConfirmationDialog
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_EndWaitForConfirmationDialog final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortDialogExternalLatentActionHandle  Handle;                                            // 0x0008(0x0004)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_EndWaitForConfirmationDialog) == 0x000008, "Wrong alignment on FortKismetLibrary_EndWaitForConfirmationDialog");
static_assert(sizeof(FortKismetLibrary_EndWaitForConfirmationDialog) == 0x000010, "Wrong size on FortKismetLibrary_EndWaitForConfirmationDialog");
static_assert(offsetof(FortKismetLibrary_EndWaitForConfirmationDialog, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_EndWaitForConfirmationDialog::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_EndWaitForConfirmationDialog, Handle) == 0x000008, "Member 'FortKismetLibrary_EndWaitForConfirmationDialog::Handle' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.EqualEqual_FFortDialogWaitingForLatentActionHandle
// 0x000C (0x000C - 0x0000)
struct FortKismetLibrary_EqualEqual_FFortDialogWaitingForLatentActionHandle final
{
public:
	struct FFortDialogExternalLatentActionHandle  A;                                                 // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortDialogExternalLatentActionHandle  B;                                                 // 0x0004(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_EqualEqual_FFortDialogWaitingForLatentActionHandle) == 0x000004, "Wrong alignment on FortKismetLibrary_EqualEqual_FFortDialogWaitingForLatentActionHandle");
static_assert(sizeof(FortKismetLibrary_EqualEqual_FFortDialogWaitingForLatentActionHandle) == 0x00000C, "Wrong size on FortKismetLibrary_EqualEqual_FFortDialogWaitingForLatentActionHandle");
static_assert(offsetof(FortKismetLibrary_EqualEqual_FFortDialogWaitingForLatentActionHandle, A) == 0x000000, "Member 'FortKismetLibrary_EqualEqual_FFortDialogWaitingForLatentActionHandle::A' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_EqualEqual_FFortDialogWaitingForLatentActionHandle, B) == 0x000004, "Member 'FortKismetLibrary_EqualEqual_FFortDialogWaitingForLatentActionHandle::B' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_EqualEqual_FFortDialogWaitingForLatentActionHandle, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_EqualEqual_FFortDialogWaitingForLatentActionHandle::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.EqualEqual_UniqueNetIdReplUniqueNetIdRepl
// 0x0058 (0x0058 - 0x0000)
struct FortKismetLibrary_EqualEqual_UniqueNetIdReplUniqueNetIdRepl final
{
public:
	struct FUniqueNetIdRepl                       A;                                                 // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       B;                                                 // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_EqualEqual_UniqueNetIdReplUniqueNetIdRepl) == 0x000008, "Wrong alignment on FortKismetLibrary_EqualEqual_UniqueNetIdReplUniqueNetIdRepl");
static_assert(sizeof(FortKismetLibrary_EqualEqual_UniqueNetIdReplUniqueNetIdRepl) == 0x000058, "Wrong size on FortKismetLibrary_EqualEqual_UniqueNetIdReplUniqueNetIdRepl");
static_assert(offsetof(FortKismetLibrary_EqualEqual_UniqueNetIdReplUniqueNetIdRepl, A) == 0x000000, "Member 'FortKismetLibrary_EqualEqual_UniqueNetIdReplUniqueNetIdRepl::A' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_EqualEqual_UniqueNetIdReplUniqueNetIdRepl, B) == 0x000028, "Member 'FortKismetLibrary_EqualEqual_UniqueNetIdReplUniqueNetIdRepl::B' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_EqualEqual_UniqueNetIdReplUniqueNetIdRepl, ReturnValue) == 0x000050, "Member 'FortKismetLibrary_EqualEqual_UniqueNetIdReplUniqueNetIdRepl::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.EquipFortAbilitySet
// 0x0048 (0x0048 - 0x0000)
struct FortKismetLibrary_EquipFortAbilitySet final
{
public:
	TScriptInterface<class IAbilitySystemInterface> AbilitySystemInterfaceActor;                       // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class UFortAbilitySet*                        AbilitySet;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                OverrideSourceObject;                              // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAbilitySetHandle                  ReturnValue;                                       // 0x0020(0x0028)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_EquipFortAbilitySet) == 0x000008, "Wrong alignment on FortKismetLibrary_EquipFortAbilitySet");
static_assert(sizeof(FortKismetLibrary_EquipFortAbilitySet) == 0x000048, "Wrong size on FortKismetLibrary_EquipFortAbilitySet");
static_assert(offsetof(FortKismetLibrary_EquipFortAbilitySet, AbilitySystemInterfaceActor) == 0x000000, "Member 'FortKismetLibrary_EquipFortAbilitySet::AbilitySystemInterfaceActor' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_EquipFortAbilitySet, AbilitySet) == 0x000010, "Member 'FortKismetLibrary_EquipFortAbilitySet::AbilitySet' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_EquipFortAbilitySet, OverrideSourceObject) == 0x000018, "Member 'FortKismetLibrary_EquipFortAbilitySet::OverrideSourceObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_EquipFortAbilitySet, ReturnValue) == 0x000020, "Member 'FortKismetLibrary_EquipFortAbilitySet::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.EquipItemToQuickBarSlot
// 0x0020 (0x0020 - 0x0000)
struct FortKismetLibrary_EquipItemToQuickBarSlot final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortItemDefinition*              ItemDefinition;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortQuickBars                                QuickBarType;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotIndex;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_EquipItemToQuickBarSlot) == 0x000008, "Wrong alignment on FortKismetLibrary_EquipItemToQuickBarSlot");
static_assert(sizeof(FortKismetLibrary_EquipItemToQuickBarSlot) == 0x000020, "Wrong size on FortKismetLibrary_EquipItemToQuickBarSlot");
static_assert(offsetof(FortKismetLibrary_EquipItemToQuickBarSlot, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_EquipItemToQuickBarSlot::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_EquipItemToQuickBarSlot, ItemDefinition) == 0x000008, "Member 'FortKismetLibrary_EquipItemToQuickBarSlot::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_EquipItemToQuickBarSlot, QuickBarType) == 0x000010, "Member 'FortKismetLibrary_EquipItemToQuickBarSlot::QuickBarType' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_EquipItemToQuickBarSlot, SlotIndex) == 0x000014, "Member 'FortKismetLibrary_EquipItemToQuickBarSlot::SlotIndex' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_EquipItemToQuickBarSlot, ReturnValue) == 0x000018, "Member 'FortKismetLibrary_EquipItemToQuickBarSlot::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.EvaluateCurveTableRow
// 0x0030 (0x0030 - 0x0000)
struct FortKismetLibrary_EvaluateCurveTableRow final
{
public:
	struct FCurveTableRowHandle                   CurveTableRowHandle;                               // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InXY;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutXY;                                             // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContextString;                                     // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_EvaluateCurveTableRow) == 0x000008, "Wrong alignment on FortKismetLibrary_EvaluateCurveTableRow");
static_assert(sizeof(FortKismetLibrary_EvaluateCurveTableRow) == 0x000030, "Wrong size on FortKismetLibrary_EvaluateCurveTableRow");
static_assert(offsetof(FortKismetLibrary_EvaluateCurveTableRow, CurveTableRowHandle) == 0x000000, "Member 'FortKismetLibrary_EvaluateCurveTableRow::CurveTableRowHandle' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_EvaluateCurveTableRow, InXY) == 0x000010, "Member 'FortKismetLibrary_EvaluateCurveTableRow::InXY' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_EvaluateCurveTableRow, OutXY) == 0x000014, "Member 'FortKismetLibrary_EvaluateCurveTableRow::OutXY' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_EvaluateCurveTableRow, ContextString) == 0x000018, "Member 'FortKismetLibrary_EvaluateCurveTableRow::ContextString' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_EvaluateCurveTableRow, ReturnValue) == 0x000028, "Member 'FortKismetLibrary_EvaluateCurveTableRow::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.ExecuteClientEvent
// 0x0028 (0x0028 - 0x0000)
struct FortKismetLibrary_ExecuteClientEvent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortClientEventName                   EventType;                                         // 0x0008(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UObject*                                EventSource;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                EventFocus;                                        // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_ExecuteClientEvent) == 0x000008, "Wrong alignment on FortKismetLibrary_ExecuteClientEvent");
static_assert(sizeof(FortKismetLibrary_ExecuteClientEvent) == 0x000028, "Wrong size on FortKismetLibrary_ExecuteClientEvent");
static_assert(offsetof(FortKismetLibrary_ExecuteClientEvent, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_ExecuteClientEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_ExecuteClientEvent, EventType) == 0x000008, "Member 'FortKismetLibrary_ExecuteClientEvent::EventType' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_ExecuteClientEvent, EventSource) == 0x000018, "Member 'FortKismetLibrary_ExecuteClientEvent::EventSource' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_ExecuteClientEvent, EventFocus) == 0x000020, "Member 'FortKismetLibrary_ExecuteClientEvent::EventFocus' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.FilterSingleTargetActor
// 0x0040 (0x0040 - 0x0000)
struct FortKismetLibrary_FilterSingleTargetActor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortTargetFilter                      Filter;                                            // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	const class AActor*                           RequestingActor;                                   // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_FilterSingleTargetActor) == 0x000008, "Wrong alignment on FortKismetLibrary_FilterSingleTargetActor");
static_assert(sizeof(FortKismetLibrary_FilterSingleTargetActor) == 0x000040, "Wrong size on FortKismetLibrary_FilterSingleTargetActor");
static_assert(offsetof(FortKismetLibrary_FilterSingleTargetActor, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_FilterSingleTargetActor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_FilterSingleTargetActor, Filter) == 0x000008, "Member 'FortKismetLibrary_FilterSingleTargetActor::Filter' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_FilterSingleTargetActor, RequestingActor) == 0x000028, "Member 'FortKismetLibrary_FilterSingleTargetActor::RequestingActor' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_FilterSingleTargetActor, TargetActor) == 0x000030, "Member 'FortKismetLibrary_FilterSingleTargetActor::TargetActor' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_FilterSingleTargetActor, ReturnValue) == 0x000038, "Member 'FortKismetLibrary_FilterSingleTargetActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.FilterSingleTargetHitResult
// 0x00B8 (0x00B8 - 0x0000)
struct FortKismetLibrary_FilterSingleTargetHitResult final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortTargetFilter                      Filter;                                            // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	const class AActor*                           RequestingActor;                                   // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0030(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_FilterSingleTargetHitResult) == 0x000008, "Wrong alignment on FortKismetLibrary_FilterSingleTargetHitResult");
static_assert(sizeof(FortKismetLibrary_FilterSingleTargetHitResult) == 0x0000B8, "Wrong size on FortKismetLibrary_FilterSingleTargetHitResult");
static_assert(offsetof(FortKismetLibrary_FilterSingleTargetHitResult, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_FilterSingleTargetHitResult::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_FilterSingleTargetHitResult, Filter) == 0x000008, "Member 'FortKismetLibrary_FilterSingleTargetHitResult::Filter' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_FilterSingleTargetHitResult, RequestingActor) == 0x000028, "Member 'FortKismetLibrary_FilterSingleTargetHitResult::RequestingActor' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_FilterSingleTargetHitResult, HitResult) == 0x000030, "Member 'FortKismetLibrary_FilterSingleTargetHitResult::HitResult' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_FilterSingleTargetHitResult, ReturnValue) == 0x0000B0, "Member 'FortKismetLibrary_FilterSingleTargetHitResult::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.FilterTargetActorList
// 0x0058 (0x0058 - 0x0000)
struct FortKismetLibrary_FilterTargetActorList final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortTargetFilter                      Filter;                                            // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	const class AActor*                           RequestingActor;                                   // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ActorsToFilter;                                    // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bAtLeastOneActorLeft;                              // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_FilterTargetActorList) == 0x000008, "Wrong alignment on FortKismetLibrary_FilterTargetActorList");
static_assert(sizeof(FortKismetLibrary_FilterTargetActorList) == 0x000058, "Wrong size on FortKismetLibrary_FilterTargetActorList");
static_assert(offsetof(FortKismetLibrary_FilterTargetActorList, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_FilterTargetActorList::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_FilterTargetActorList, Filter) == 0x000008, "Member 'FortKismetLibrary_FilterTargetActorList::Filter' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_FilterTargetActorList, RequestingActor) == 0x000028, "Member 'FortKismetLibrary_FilterTargetActorList::RequestingActor' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_FilterTargetActorList, ActorsToFilter) == 0x000030, "Member 'FortKismetLibrary_FilterTargetActorList::ActorsToFilter' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_FilterTargetActorList, bAtLeastOneActorLeft) == 0x000040, "Member 'FortKismetLibrary_FilterTargetActorList::bAtLeastOneActorLeft' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_FilterTargetActorList, ReturnValue) == 0x000048, "Member 'FortKismetLibrary_FilterTargetActorList::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.FilterTargetHitResultList
// 0x0058 (0x0058 - 0x0000)
struct FortKismetLibrary_FilterTargetHitResultList final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortTargetFilter                      Filter;                                            // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	const class AActor*                           RequestingActor;                                   // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHitResult>                     HitResultsToFilter;                                // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bAtLeastOneActorLeft;                              // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_FilterTargetHitResultList) == 0x000008, "Wrong alignment on FortKismetLibrary_FilterTargetHitResultList");
static_assert(sizeof(FortKismetLibrary_FilterTargetHitResultList) == 0x000058, "Wrong size on FortKismetLibrary_FilterTargetHitResultList");
static_assert(offsetof(FortKismetLibrary_FilterTargetHitResultList, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_FilterTargetHitResultList::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_FilterTargetHitResultList, Filter) == 0x000008, "Member 'FortKismetLibrary_FilterTargetHitResultList::Filter' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_FilterTargetHitResultList, RequestingActor) == 0x000028, "Member 'FortKismetLibrary_FilterTargetHitResultList::RequestingActor' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_FilterTargetHitResultList, HitResultsToFilter) == 0x000030, "Member 'FortKismetLibrary_FilterTargetHitResultList::HitResultsToFilter' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_FilterTargetHitResultList, bAtLeastOneActorLeft) == 0x000040, "Member 'FortKismetLibrary_FilterTargetHitResultList::bAtLeastOneActorLeft' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_FilterTargetHitResultList, ReturnValue) == 0x000048, "Member 'FortKismetLibrary_FilterTargetHitResultList::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetActorTeam
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_GetActorTeam final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortTeam                                     ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetActorTeam) == 0x000008, "Wrong alignment on FortKismetLibrary_GetActorTeam");
static_assert(sizeof(FortKismetLibrary_GetActorTeam) == 0x000010, "Wrong size on FortKismetLibrary_GetActorTeam");
static_assert(offsetof(FortKismetLibrary_GetActorTeam, Actor) == 0x000000, "Member 'FortKismetLibrary_GetActorTeam::Actor' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetActorTeam, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_GetActorTeam::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetActorTeamInfo
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_GetActorTeamInfo final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortTeamInfo*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetActorTeamInfo) == 0x000008, "Wrong alignment on FortKismetLibrary_GetActorTeamInfo");
static_assert(sizeof(FortKismetLibrary_GetActorTeamInfo) == 0x000010, "Wrong size on FortKismetLibrary_GetActorTeamInfo");
static_assert(offsetof(FortKismetLibrary_GetActorTeamInfo, Actor) == 0x000000, "Member 'FortKismetLibrary_GetActorTeamInfo::Actor' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetActorTeamInfo, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_GetActorTeamInfo::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetAIDirector
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_GetAIDirector final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortAIDirector*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetAIDirector) == 0x000008, "Wrong alignment on FortKismetLibrary_GetAIDirector");
static_assert(sizeof(FortKismetLibrary_GetAIDirector) == 0x000010, "Wrong size on FortKismetLibrary_GetAIDirector");
static_assert(offsetof(FortKismetLibrary_GetAIDirector, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetAIDirector::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetAIDirector, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_GetAIDirector::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetAIGoalManager
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_GetAIGoalManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortAIGoalManager*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetAIGoalManager) == 0x000008, "Wrong alignment on FortKismetLibrary_GetAIGoalManager");
static_assert(sizeof(FortKismetLibrary_GetAIGoalManager) == 0x000010, "Wrong size on FortKismetLibrary_GetAIGoalManager");
static_assert(offsetof(FortKismetLibrary_GetAIGoalManager, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetAIGoalManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetAIGoalManager, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_GetAIGoalManager::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetAllFortPlayerControllers
// 0x0020 (0x0020 - 0x0000)
struct FortKismetLibrary_GetAllFortPlayerControllers final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeNonSpectators;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeSpectators;                                // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AFortPlayerController*>          ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetAllFortPlayerControllers) == 0x000008, "Wrong alignment on FortKismetLibrary_GetAllFortPlayerControllers");
static_assert(sizeof(FortKismetLibrary_GetAllFortPlayerControllers) == 0x000020, "Wrong size on FortKismetLibrary_GetAllFortPlayerControllers");
static_assert(offsetof(FortKismetLibrary_GetAllFortPlayerControllers, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetAllFortPlayerControllers::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetAllFortPlayerControllers, bIncludeNonSpectators) == 0x000008, "Member 'FortKismetLibrary_GetAllFortPlayerControllers::bIncludeNonSpectators' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetAllFortPlayerControllers, bIncludeSpectators) == 0x000009, "Member 'FortKismetLibrary_GetAllFortPlayerControllers::bIncludeSpectators' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetAllFortPlayerControllers, ReturnValue) == 0x000010, "Member 'FortKismetLibrary_GetAllFortPlayerControllers::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetAllFortPlayerPawns
// 0x0018 (0x0018 - 0x0000)
struct FortKismetLibrary_GetAllFortPlayerPawns final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AFortPlayerPawn*>                OutFortPlayerPawns;                                // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetAllFortPlayerPawns) == 0x000008, "Wrong alignment on FortKismetLibrary_GetAllFortPlayerPawns");
static_assert(sizeof(FortKismetLibrary_GetAllFortPlayerPawns) == 0x000018, "Wrong size on FortKismetLibrary_GetAllFortPlayerPawns");
static_assert(offsetof(FortKismetLibrary_GetAllFortPlayerPawns, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetAllFortPlayerPawns::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetAllFortPlayerPawns, OutFortPlayerPawns) == 0x000008, "Member 'FortKismetLibrary_GetAllFortPlayerPawns::OutFortPlayerPawns' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetBroadcasterGrantWindowSecondsRemaining
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_GetBroadcasterGrantWindowSecondsRemaining final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetBroadcasterGrantWindowSecondsRemaining) == 0x000008, "Wrong alignment on FortKismetLibrary_GetBroadcasterGrantWindowSecondsRemaining");
static_assert(sizeof(FortKismetLibrary_GetBroadcasterGrantWindowSecondsRemaining) == 0x000010, "Wrong size on FortKismetLibrary_GetBroadcasterGrantWindowSecondsRemaining");
static_assert(offsetof(FortKismetLibrary_GetBroadcasterGrantWindowSecondsRemaining, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetBroadcasterGrantWindowSecondsRemaining::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetBroadcasterGrantWindowSecondsRemaining, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_GetBroadcasterGrantWindowSecondsRemaining::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetBuildingHealthPercentage
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_GetBuildingHealthPercentage final
{
public:
	const class ABuildingActor*                   BuildingActor;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetBuildingHealthPercentage) == 0x000008, "Wrong alignment on FortKismetLibrary_GetBuildingHealthPercentage");
static_assert(sizeof(FortKismetLibrary_GetBuildingHealthPercentage) == 0x000010, "Wrong size on FortKismetLibrary_GetBuildingHealthPercentage");
static_assert(offsetof(FortKismetLibrary_GetBuildingHealthPercentage, BuildingActor) == 0x000000, "Member 'FortKismetLibrary_GetBuildingHealthPercentage::BuildingActor' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetBuildingHealthPercentage, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_GetBuildingHealthPercentage::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetBuildingStructuralSupportSystem
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_GetBuildingStructuralSupportSystem final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBuildingStructuralSupportSystem*       BuildingStructuralSupportSystem;                   // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetBuildingStructuralSupportSystem) == 0x000008, "Wrong alignment on FortKismetLibrary_GetBuildingStructuralSupportSystem");
static_assert(sizeof(FortKismetLibrary_GetBuildingStructuralSupportSystem) == 0x000010, "Wrong size on FortKismetLibrary_GetBuildingStructuralSupportSystem");
static_assert(offsetof(FortKismetLibrary_GetBuildingStructuralSupportSystem, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetBuildingStructuralSupportSystem::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetBuildingStructuralSupportSystem, BuildingStructuralSupportSystem) == 0x000008, "Member 'FortKismetLibrary_GetBuildingStructuralSupportSystem::BuildingStructuralSupportSystem' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetCalculatedGameDifficulty
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_GetCalculatedGameDifficulty final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetCalculatedGameDifficulty) == 0x000008, "Wrong alignment on FortKismetLibrary_GetCalculatedGameDifficulty");
static_assert(sizeof(FortKismetLibrary_GetCalculatedGameDifficulty) == 0x000010, "Wrong size on FortKismetLibrary_GetCalculatedGameDifficulty");
static_assert(offsetof(FortKismetLibrary_GetCalculatedGameDifficulty, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetCalculatedGameDifficulty::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetCalculatedGameDifficulty, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_GetCalculatedGameDifficulty::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetClosestActorFromArray
// 0x0020 (0x0020 - 0x0000)
struct FortKismetLibrary_GetClosestActorFromArray final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ArrayOfActors;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetClosestActorFromArray) == 0x000008, "Wrong alignment on FortKismetLibrary_GetClosestActorFromArray");
static_assert(sizeof(FortKismetLibrary_GetClosestActorFromArray) == 0x000020, "Wrong size on FortKismetLibrary_GetClosestActorFromArray");
static_assert(offsetof(FortKismetLibrary_GetClosestActorFromArray, Actor) == 0x000000, "Member 'FortKismetLibrary_GetClosestActorFromArray::Actor' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetClosestActorFromArray, ArrayOfActors) == 0x000008, "Member 'FortKismetLibrary_GetClosestActorFromArray::ArrayOfActors' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetClosestActorFromArray, ReturnValue) == 0x000018, "Member 'FortKismetLibrary_GetClosestActorFromArray::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetClosestBuildingActorFromArray
// 0x0020 (0x0020 - 0x0000)
struct FortKismetLibrary_GetClosestBuildingActorFromArray final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ABuildingSMActor*>               ArrayOfBuildings;                                  // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ABuildingSMActor*                       ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetClosestBuildingActorFromArray) == 0x000008, "Wrong alignment on FortKismetLibrary_GetClosestBuildingActorFromArray");
static_assert(sizeof(FortKismetLibrary_GetClosestBuildingActorFromArray) == 0x000020, "Wrong size on FortKismetLibrary_GetClosestBuildingActorFromArray");
static_assert(offsetof(FortKismetLibrary_GetClosestBuildingActorFromArray, Actor) == 0x000000, "Member 'FortKismetLibrary_GetClosestBuildingActorFromArray::Actor' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetClosestBuildingActorFromArray, ArrayOfBuildings) == 0x000008, "Member 'FortKismetLibrary_GetClosestBuildingActorFromArray::ArrayOfBuildings' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetClosestBuildingActorFromArray, ReturnValue) == 0x000018, "Member 'FortKismetLibrary_GetClosestBuildingActorFromArray::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetClosestFortPlayerPawn
// 0x0020 (0x0020 - 0x0000)
struct FortKismetLibrary_GetClosestFortPlayerPawn final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetClosestFortPlayerPawn) == 0x000008, "Wrong alignment on FortKismetLibrary_GetClosestFortPlayerPawn");
static_assert(sizeof(FortKismetLibrary_GetClosestFortPlayerPawn) == 0x000020, "Wrong size on FortKismetLibrary_GetClosestFortPlayerPawn");
static_assert(offsetof(FortKismetLibrary_GetClosestFortPlayerPawn, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetClosestFortPlayerPawn::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetClosestFortPlayerPawn, Position) == 0x000008, "Member 'FortKismetLibrary_GetClosestFortPlayerPawn::Position' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetClosestFortPlayerPawn, ReturnValue) == 0x000018, "Member 'FortKismetLibrary_GetClosestFortPlayerPawn::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetCurrentDayPhase
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_GetCurrentDayPhase final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDayPhase                                 ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetCurrentDayPhase) == 0x000008, "Wrong alignment on FortKismetLibrary_GetCurrentDayPhase");
static_assert(sizeof(FortKismetLibrary_GetCurrentDayPhase) == 0x000010, "Wrong size on FortKismetLibrary_GetCurrentDayPhase");
static_assert(offsetof(FortKismetLibrary_GetCurrentDayPhase, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetCurrentDayPhase::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetCurrentDayPhase, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_GetCurrentDayPhase::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetDayNightDirectionalLightColor
// 0x0018 (0x0018 - 0x0000)
struct FortKismetLibrary_GetDayNightDirectionalLightColor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetDayNightDirectionalLightColor) == 0x000008, "Wrong alignment on FortKismetLibrary_GetDayNightDirectionalLightColor");
static_assert(sizeof(FortKismetLibrary_GetDayNightDirectionalLightColor) == 0x000018, "Wrong size on FortKismetLibrary_GetDayNightDirectionalLightColor");
static_assert(offsetof(FortKismetLibrary_GetDayNightDirectionalLightColor, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetDayNightDirectionalLightColor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetDayNightDirectionalLightColor, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_GetDayNightDirectionalLightColor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetDayNightDirectionalLightVector
// 0x0018 (0x0018 - 0x0000)
struct FortKismetLibrary_GetDayNightDirectionalLightVector final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetDayNightDirectionalLightVector) == 0x000008, "Wrong alignment on FortKismetLibrary_GetDayNightDirectionalLightVector");
static_assert(sizeof(FortKismetLibrary_GetDayNightDirectionalLightVector) == 0x000018, "Wrong size on FortKismetLibrary_GetDayNightDirectionalLightVector");
static_assert(offsetof(FortKismetLibrary_GetDayNightDirectionalLightVector, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetDayNightDirectionalLightVector::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetDayNightDirectionalLightVector, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_GetDayNightDirectionalLightVector::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetDebugStringForUniqueId
// 0x0038 (0x0038 - 0x0000)
struct FortKismetLibrary_GetDebugStringForUniqueId final
{
public:
	struct FUniqueNetIdRepl                       UniqueId;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetDebugStringForUniqueId) == 0x000008, "Wrong alignment on FortKismetLibrary_GetDebugStringForUniqueId");
static_assert(sizeof(FortKismetLibrary_GetDebugStringForUniqueId) == 0x000038, "Wrong size on FortKismetLibrary_GetDebugStringForUniqueId");
static_assert(offsetof(FortKismetLibrary_GetDebugStringForUniqueId, UniqueId) == 0x000000, "Member 'FortKismetLibrary_GetDebugStringForUniqueId::UniqueId' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetDebugStringForUniqueId, ReturnValue) == 0x000028, "Member 'FortKismetLibrary_GetDebugStringForUniqueId::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetDefaultAbsoluteTimeOfDaySpeed
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_GetDefaultAbsoluteTimeOfDaySpeed final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetDefaultAbsoluteTimeOfDaySpeed) == 0x000008, "Wrong alignment on FortKismetLibrary_GetDefaultAbsoluteTimeOfDaySpeed");
static_assert(sizeof(FortKismetLibrary_GetDefaultAbsoluteTimeOfDaySpeed) == 0x000010, "Wrong size on FortKismetLibrary_GetDefaultAbsoluteTimeOfDaySpeed");
static_assert(offsetof(FortKismetLibrary_GetDefaultAbsoluteTimeOfDaySpeed, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetDefaultAbsoluteTimeOfDaySpeed::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetDefaultAbsoluteTimeOfDaySpeed, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_GetDefaultAbsoluteTimeOfDaySpeed::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetDirectionActorToActor
// 0x0020 (0x0020 - 0x0000)
struct FortKismetLibrary_GetDirectionActorToActor final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetDirectionActorToActor) == 0x000008, "Wrong alignment on FortKismetLibrary_GetDirectionActorToActor");
static_assert(sizeof(FortKismetLibrary_GetDirectionActorToActor) == 0x000020, "Wrong size on FortKismetLibrary_GetDirectionActorToActor");
static_assert(offsetof(FortKismetLibrary_GetDirectionActorToActor, SourceActor) == 0x000000, "Member 'FortKismetLibrary_GetDirectionActorToActor::SourceActor' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetDirectionActorToActor, TargetActor) == 0x000008, "Member 'FortKismetLibrary_GetDirectionActorToActor::TargetActor' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetDirectionActorToActor, ReturnValue) == 0x000010, "Member 'FortKismetLibrary_GetDirectionActorToActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetFloatHoursUntilDayPhase
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_GetFloatHoursUntilDayPhase final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDayPhase                                 DayPhase;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetFloatHoursUntilDayPhase) == 0x000008, "Wrong alignment on FortKismetLibrary_GetFloatHoursUntilDayPhase");
static_assert(sizeof(FortKismetLibrary_GetFloatHoursUntilDayPhase) == 0x000010, "Wrong size on FortKismetLibrary_GetFloatHoursUntilDayPhase");
static_assert(offsetof(FortKismetLibrary_GetFloatHoursUntilDayPhase, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetFloatHoursUntilDayPhase::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetFloatHoursUntilDayPhase, DayPhase) == 0x000008, "Member 'FortKismetLibrary_GetFloatHoursUntilDayPhase::DayPhase' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetFloatHoursUntilDayPhase, ReturnValue) == 0x00000C, "Member 'FortKismetLibrary_GetFloatHoursUntilDayPhase::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetFortPhysicalSurface
// 0x0088 (0x0088 - 0x0000)
struct FortKismetLibrary_GetFortPhysicalSurface final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EPhysicalSurface                              ReturnValue;                                       // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetFortPhysicalSurface) == 0x000008, "Wrong alignment on FortKismetLibrary_GetFortPhysicalSurface");
static_assert(sizeof(FortKismetLibrary_GetFortPhysicalSurface) == 0x000088, "Wrong size on FortKismetLibrary_GetFortPhysicalSurface");
static_assert(offsetof(FortKismetLibrary_GetFortPhysicalSurface, Hit) == 0x000000, "Member 'FortKismetLibrary_GetFortPhysicalSurface::Hit' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetFortPhysicalSurface, ReturnValue) == 0x000080, "Member 'FortKismetLibrary_GetFortPhysicalSurface::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetFortPlayerPawns
// 0x0018 (0x0018 - 0x0000)
struct FortKismetLibrary_GetFortPlayerPawns final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AFortPlayerPawn*>                ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetFortPlayerPawns) == 0x000008, "Wrong alignment on FortKismetLibrary_GetFortPlayerPawns");
static_assert(sizeof(FortKismetLibrary_GetFortPlayerPawns) == 0x000018, "Wrong size on FortKismetLibrary_GetFortPlayerPawns");
static_assert(offsetof(FortKismetLibrary_GetFortPlayerPawns, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetFortPlayerPawns::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetFortPlayerPawns, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_GetFortPlayerPawns::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetGameDifficulty
// 0x0004 (0x0004 - 0x0000)
struct FortKismetLibrary_GetGameDifficulty final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetGameDifficulty) == 0x000004, "Wrong alignment on FortKismetLibrary_GetGameDifficulty");
static_assert(sizeof(FortKismetLibrary_GetGameDifficulty) == 0x000004, "Wrong size on FortKismetLibrary_GetGameDifficulty");
static_assert(offsetof(FortKismetLibrary_GetGameDifficulty, ReturnValue) == 0x000000, "Member 'FortKismetLibrary_GetGameDifficulty::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetGrantedAbilityKit
// 0x0090 (0x0090 - 0x0000)
struct FortKismetLibrary_GetGrantedAbilityKit final
{
public:
	struct FFortSpecializationSlot                Slot;                                              // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UFortAbilityKit*                        ReturnValue;                                       // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetGrantedAbilityKit) == 0x000008, "Wrong alignment on FortKismetLibrary_GetGrantedAbilityKit");
static_assert(sizeof(FortKismetLibrary_GetGrantedAbilityKit) == 0x000090, "Wrong size on FortKismetLibrary_GetGrantedAbilityKit");
static_assert(offsetof(FortKismetLibrary_GetGrantedAbilityKit, Slot) == 0x000000, "Member 'FortKismetLibrary_GetGrantedAbilityKit::Slot' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetGrantedAbilityKit, ReturnValue) == 0x000088, "Member 'FortKismetLibrary_GetGrantedAbilityKit::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetHostilityPercentage
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_GetHostilityPercentage final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetHostilityPercentage) == 0x000008, "Wrong alignment on FortKismetLibrary_GetHostilityPercentage");
static_assert(sizeof(FortKismetLibrary_GetHostilityPercentage) == 0x000010, "Wrong size on FortKismetLibrary_GetHostilityPercentage");
static_assert(offsetof(FortKismetLibrary_GetHostilityPercentage, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetHostilityPercentage::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetHostilityPercentage, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_GetHostilityPercentage::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetHoursUntilDayPhase
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_GetHoursUntilDayPhase final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDayPhase                                 DayPhase;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetHoursUntilDayPhase) == 0x000008, "Wrong alignment on FortKismetLibrary_GetHoursUntilDayPhase");
static_assert(sizeof(FortKismetLibrary_GetHoursUntilDayPhase) == 0x000010, "Wrong size on FortKismetLibrary_GetHoursUntilDayPhase");
static_assert(offsetof(FortKismetLibrary_GetHoursUntilDayPhase, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetHoursUntilDayPhase::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetHoursUntilDayPhase, DayPhase) == 0x000008, "Member 'FortKismetLibrary_GetHoursUntilDayPhase::DayPhase' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetHoursUntilDayPhase, ReturnValue) == 0x00000C, "Member 'FortKismetLibrary_GetHoursUntilDayPhase::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetHumanReadableName
// 0x0018 (0x0018 - 0x0000)
struct FortKismetLibrary_GetHumanReadableName final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetHumanReadableName) == 0x000008, "Wrong alignment on FortKismetLibrary_GetHumanReadableName");
static_assert(sizeof(FortKismetLibrary_GetHumanReadableName) == 0x000018, "Wrong size on FortKismetLibrary_GetHumanReadableName");
static_assert(offsetof(FortKismetLibrary_GetHumanReadableName, Actor) == 0x000000, "Member 'FortKismetLibrary_GetHumanReadableName::Actor' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetHumanReadableName, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_GetHumanReadableName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetImpulseData
// 0x0030 (0x0030 - 0x0000)
struct FortKismetLibrary_GetImpulseData final
{
public:
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FVector                                ImpulseDirection;                                  // 0x0018(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KnockbackMagnitude;                                // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KnockbackZAngle;                                   // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetImpulseData) == 0x000008, "Wrong alignment on FortKismetLibrary_GetImpulseData");
static_assert(sizeof(FortKismetLibrary_GetImpulseData) == 0x000030, "Wrong size on FortKismetLibrary_GetImpulseData");
static_assert(offsetof(FortKismetLibrary_GetImpulseData, EffectContext) == 0x000000, "Member 'FortKismetLibrary_GetImpulseData::EffectContext' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetImpulseData, ImpulseDirection) == 0x000018, "Member 'FortKismetLibrary_GetImpulseData::ImpulseDirection' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetImpulseData, KnockbackMagnitude) == 0x000024, "Member 'FortKismetLibrary_GetImpulseData::KnockbackMagnitude' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetImpulseData, KnockbackZAngle) == 0x000028, "Member 'FortKismetLibrary_GetImpulseData::KnockbackZAngle' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetLocalFortPlayerControllers
// 0x0020 (0x0020 - 0x0000)
struct FortKismetLibrary_GetLocalFortPlayerControllers final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeNonSpectators;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeSpectators;                                // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AFortPlayerController*>          ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetLocalFortPlayerControllers) == 0x000008, "Wrong alignment on FortKismetLibrary_GetLocalFortPlayerControllers");
static_assert(sizeof(FortKismetLibrary_GetLocalFortPlayerControllers) == 0x000020, "Wrong size on FortKismetLibrary_GetLocalFortPlayerControllers");
static_assert(offsetof(FortKismetLibrary_GetLocalFortPlayerControllers, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetLocalFortPlayerControllers::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetLocalFortPlayerControllers, bIncludeNonSpectators) == 0x000008, "Member 'FortKismetLibrary_GetLocalFortPlayerControllers::bIncludeNonSpectators' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetLocalFortPlayerControllers, bIncludeSpectators) == 0x000009, "Member 'FortKismetLibrary_GetLocalFortPlayerControllers::bIncludeSpectators' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetLocalFortPlayerControllers, ReturnValue) == 0x000010, "Member 'FortKismetLibrary_GetLocalFortPlayerControllers::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetLocalPlayerHasHeroBackpack
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_GetLocalPlayerHasHeroBackpack final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetLocalPlayerHasHeroBackpack) == 0x000008, "Wrong alignment on FortKismetLibrary_GetLocalPlayerHasHeroBackpack");
static_assert(sizeof(FortKismetLibrary_GetLocalPlayerHasHeroBackpack) == 0x000010, "Wrong size on FortKismetLibrary_GetLocalPlayerHasHeroBackpack");
static_assert(offsetof(FortKismetLibrary_GetLocalPlayerHasHeroBackpack, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetLocalPlayerHasHeroBackpack::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetLocalPlayerHasHeroBackpack, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_GetLocalPlayerHasHeroBackpack::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetLocalPlayerHasHeroHeadAccessories
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_GetLocalPlayerHasHeroHeadAccessories final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetLocalPlayerHasHeroHeadAccessories) == 0x000008, "Wrong alignment on FortKismetLibrary_GetLocalPlayerHasHeroHeadAccessories");
static_assert(sizeof(FortKismetLibrary_GetLocalPlayerHasHeroHeadAccessories) == 0x000010, "Wrong size on FortKismetLibrary_GetLocalPlayerHasHeroHeadAccessories");
static_assert(offsetof(FortKismetLibrary_GetLocalPlayerHasHeroHeadAccessories, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetLocalPlayerHasHeroHeadAccessories::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetLocalPlayerHasHeroHeadAccessories, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_GetLocalPlayerHasHeroHeadAccessories::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetLootLevel
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_GetLootLevel final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetLootLevel) == 0x000008, "Wrong alignment on FortKismetLibrary_GetLootLevel");
static_assert(sizeof(FortKismetLibrary_GetLootLevel) == 0x000010, "Wrong size on FortKismetLibrary_GetLootLevel");
static_assert(offsetof(FortKismetLibrary_GetLootLevel, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetLootLevel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetLootLevel, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_GetLootLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetMatchmakingDifficultyRangeFromDifficultyInfo
// 0x0088 (0x0088 - 0x0000)
struct FortKismetLibrary_GetMatchmakingDifficultyRangeFromDifficultyInfo final
{
public:
	struct FGameDifficultyInfo                    DifficultyInfo;                                    // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         OutMinDifficulty;                                  // 0x0080(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutMaxDifficulty;                                  // 0x0084(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetMatchmakingDifficultyRangeFromDifficultyInfo) == 0x000008, "Wrong alignment on FortKismetLibrary_GetMatchmakingDifficultyRangeFromDifficultyInfo");
static_assert(sizeof(FortKismetLibrary_GetMatchmakingDifficultyRangeFromDifficultyInfo) == 0x000088, "Wrong size on FortKismetLibrary_GetMatchmakingDifficultyRangeFromDifficultyInfo");
static_assert(offsetof(FortKismetLibrary_GetMatchmakingDifficultyRangeFromDifficultyInfo, DifficultyInfo) == 0x000000, "Member 'FortKismetLibrary_GetMatchmakingDifficultyRangeFromDifficultyInfo::DifficultyInfo' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetMatchmakingDifficultyRangeFromDifficultyInfo, OutMinDifficulty) == 0x000080, "Member 'FortKismetLibrary_GetMatchmakingDifficultyRangeFromDifficultyInfo::OutMinDifficulty' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetMatchmakingDifficultyRangeFromDifficultyInfo, OutMaxDifficulty) == 0x000084, "Member 'FortKismetLibrary_GetMatchmakingDifficultyRangeFromDifficultyInfo::OutMaxDifficulty' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetMeleeWeaponStatsRow
// 0x0160 (0x0160 - 0x0000)
struct FortKismetLibrary_GetMeleeWeaponStatsRow final
{
public:
	struct FDataTableRowHandle                    DataTableRowHandle;                                // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortMeleeWeaponStats                  OutRow;                                            // 0x0010(0x0148)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0158(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetMeleeWeaponStatsRow) == 0x000008, "Wrong alignment on FortKismetLibrary_GetMeleeWeaponStatsRow");
static_assert(sizeof(FortKismetLibrary_GetMeleeWeaponStatsRow) == 0x000160, "Wrong size on FortKismetLibrary_GetMeleeWeaponStatsRow");
static_assert(offsetof(FortKismetLibrary_GetMeleeWeaponStatsRow, DataTableRowHandle) == 0x000000, "Member 'FortKismetLibrary_GetMeleeWeaponStatsRow::DataTableRowHandle' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetMeleeWeaponStatsRow, OutRow) == 0x000010, "Member 'FortKismetLibrary_GetMeleeWeaponStatsRow::OutRow' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetMeleeWeaponStatsRow, ReturnValue) == 0x000158, "Member 'FortKismetLibrary_GetMeleeWeaponStatsRow::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetMIDForSkeletalMeshComponent
// 0x0018 (0x0018 - 0x0000)
struct FortKismetLibrary_GetMIDForSkeletalMeshComponent final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ElementIndex;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetMIDForSkeletalMeshComponent) == 0x000008, "Wrong alignment on FortKismetLibrary_GetMIDForSkeletalMeshComponent");
static_assert(sizeof(FortKismetLibrary_GetMIDForSkeletalMeshComponent) == 0x000018, "Wrong size on FortKismetLibrary_GetMIDForSkeletalMeshComponent");
static_assert(offsetof(FortKismetLibrary_GetMIDForSkeletalMeshComponent, SkeletalMeshComponent) == 0x000000, "Member 'FortKismetLibrary_GetMIDForSkeletalMeshComponent::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetMIDForSkeletalMeshComponent, ElementIndex) == 0x000008, "Member 'FortKismetLibrary_GetMIDForSkeletalMeshComponent::ElementIndex' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetMIDForSkeletalMeshComponent, ReturnValue) == 0x000010, "Member 'FortKismetLibrary_GetMIDForSkeletalMeshComponent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetMusicManager
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_GetMusicManager final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortMusicManager*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetMusicManager) == 0x000008, "Wrong alignment on FortKismetLibrary_GetMusicManager");
static_assert(sizeof(FortKismetLibrary_GetMusicManager) == 0x000010, "Wrong size on FortKismetLibrary_GetMusicManager");
static_assert(offsetof(FortKismetLibrary_GetMusicManager, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetMusicManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetMusicManager, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_GetMusicManager::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetNumericCVar
// 0x0018 (0x0018 - 0x0000)
struct FortKismetLibrary_GetNumericCVar final
{
public:
	class FString                                 CVar;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutValue;                                          // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetNumericCVar) == 0x000008, "Wrong alignment on FortKismetLibrary_GetNumericCVar");
static_assert(sizeof(FortKismetLibrary_GetNumericCVar) == 0x000018, "Wrong size on FortKismetLibrary_GetNumericCVar");
static_assert(offsetof(FortKismetLibrary_GetNumericCVar, CVar) == 0x000000, "Member 'FortKismetLibrary_GetNumericCVar::CVar' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetNumericCVar, OutValue) == 0x000010, "Member 'FortKismetLibrary_GetNumericCVar::OutValue' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetNumericCVar, ReturnValue) == 0x000014, "Member 'FortKismetLibrary_GetNumericCVar::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetPawnStatsRow
// 0x00A8 (0x00A8 - 0x0000)
struct FortKismetLibrary_GetPawnStatsRow final
{
public:
	struct FDataTableRowHandle                    DataTableRowHandle;                                // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortPawnStats                         OutRow;                                            // 0x0010(0x0090)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetPawnStatsRow) == 0x000008, "Wrong alignment on FortKismetLibrary_GetPawnStatsRow");
static_assert(sizeof(FortKismetLibrary_GetPawnStatsRow) == 0x0000A8, "Wrong size on FortKismetLibrary_GetPawnStatsRow");
static_assert(offsetof(FortKismetLibrary_GetPawnStatsRow, DataTableRowHandle) == 0x000000, "Member 'FortKismetLibrary_GetPawnStatsRow::DataTableRowHandle' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetPawnStatsRow, OutRow) == 0x000010, "Member 'FortKismetLibrary_GetPawnStatsRow::OutRow' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetPawnStatsRow, ReturnValue) == 0x0000A0, "Member 'FortKismetLibrary_GetPawnStatsRow::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetPlayerInfoFromUniqueID
// 0x0038 (0x0038 - 0x0000)
struct FortKismetLibrary_GetPlayerInfoFromUniqueID final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       UniqueId;                                          // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortRegisteredPlayerInfo*              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetPlayerInfoFromUniqueID) == 0x000008, "Wrong alignment on FortKismetLibrary_GetPlayerInfoFromUniqueID");
static_assert(sizeof(FortKismetLibrary_GetPlayerInfoFromUniqueID) == 0x000038, "Wrong size on FortKismetLibrary_GetPlayerInfoFromUniqueID");
static_assert(offsetof(FortKismetLibrary_GetPlayerInfoFromUniqueID, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetPlayerInfoFromUniqueID::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetPlayerInfoFromUniqueID, UniqueId) == 0x000008, "Member 'FortKismetLibrary_GetPlayerInfoFromUniqueID::UniqueId' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetPlayerInfoFromUniqueID, ReturnValue) == 0x000030, "Member 'FortKismetLibrary_GetPlayerInfoFromUniqueID::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetPreviousDayPhase
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_GetPreviousDayPhase final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDayPhase                                 ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetPreviousDayPhase) == 0x000008, "Wrong alignment on FortKismetLibrary_GetPreviousDayPhase");
static_assert(sizeof(FortKismetLibrary_GetPreviousDayPhase) == 0x000010, "Wrong size on FortKismetLibrary_GetPreviousDayPhase");
static_assert(offsetof(FortKismetLibrary_GetPreviousDayPhase, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetPreviousDayPhase::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetPreviousDayPhase, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_GetPreviousDayPhase::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetPrimaryInstance
// 0x0080 (0x0080 - 0x0000)
struct FortKismetLibrary_GetPrimaryInstance final
{
public:
	struct FGameplayAbilitySpec                   Spec;                                              // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UGameplayAbility*                       ReturnValue;                                       // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetPrimaryInstance) == 0x000008, "Wrong alignment on FortKismetLibrary_GetPrimaryInstance");
static_assert(sizeof(FortKismetLibrary_GetPrimaryInstance) == 0x000080, "Wrong size on FortKismetLibrary_GetPrimaryInstance");
static_assert(offsetof(FortKismetLibrary_GetPrimaryInstance, Spec) == 0x000000, "Member 'FortKismetLibrary_GetPrimaryInstance::Spec' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetPrimaryInstance, ReturnValue) == 0x000078, "Member 'FortKismetLibrary_GetPrimaryInstance::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetRandomLiveStreamingViewerName
// 0x0028 (0x0028 - 0x0000)
struct FortKismetLibrary_GetRandomLiveStreamingViewerName final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveFromList;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetRandomLiveStreamingViewerName) == 0x000008, "Wrong alignment on FortKismetLibrary_GetRandomLiveStreamingViewerName");
static_assert(sizeof(FortKismetLibrary_GetRandomLiveStreamingViewerName) == 0x000028, "Wrong size on FortKismetLibrary_GetRandomLiveStreamingViewerName");
static_assert(offsetof(FortKismetLibrary_GetRandomLiveStreamingViewerName, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetRandomLiveStreamingViewerName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetRandomLiveStreamingViewerName, bRemoveFromList) == 0x000008, "Member 'FortKismetLibrary_GetRandomLiveStreamingViewerName::bRemoveFromList' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetRandomLiveStreamingViewerName, ReturnValue) == 0x000010, "Member 'FortKismetLibrary_GetRandomLiveStreamingViewerName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetRandomSurvivorName
// 0x0028 (0x0028 - 0x0000)
struct FortKismetLibrary_GetRandomSurvivorName final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDisplayGender                            Gender;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveFromList;                                   // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetRandomSurvivorName) == 0x000008, "Wrong alignment on FortKismetLibrary_GetRandomSurvivorName");
static_assert(sizeof(FortKismetLibrary_GetRandomSurvivorName) == 0x000028, "Wrong size on FortKismetLibrary_GetRandomSurvivorName");
static_assert(offsetof(FortKismetLibrary_GetRandomSurvivorName, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetRandomSurvivorName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetRandomSurvivorName, Gender) == 0x000008, "Member 'FortKismetLibrary_GetRandomSurvivorName::Gender' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetRandomSurvivorName, bRemoveFromList) == 0x000009, "Member 'FortKismetLibrary_GetRandomSurvivorName::bRemoveFromList' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetRandomSurvivorName, ReturnValue) == 0x000010, "Member 'FortKismetLibrary_GetRandomSurvivorName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetRangedWeaponStatsRow
// 0x0268 (0x0268 - 0x0000)
struct FortKismetLibrary_GetRangedWeaponStatsRow final
{
public:
	struct FDataTableRowHandle                    DataTableRowHandle;                                // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortRangedWeaponStats                 OutRow;                                            // 0x0010(0x0250)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0260(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_261[0x7];                                      // 0x0261(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetRangedWeaponStatsRow) == 0x000008, "Wrong alignment on FortKismetLibrary_GetRangedWeaponStatsRow");
static_assert(sizeof(FortKismetLibrary_GetRangedWeaponStatsRow) == 0x000268, "Wrong size on FortKismetLibrary_GetRangedWeaponStatsRow");
static_assert(offsetof(FortKismetLibrary_GetRangedWeaponStatsRow, DataTableRowHandle) == 0x000000, "Member 'FortKismetLibrary_GetRangedWeaponStatsRow::DataTableRowHandle' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetRangedWeaponStatsRow, OutRow) == 0x000010, "Member 'FortKismetLibrary_GetRangedWeaponStatsRow::OutRow' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetRangedWeaponStatsRow, ReturnValue) == 0x000260, "Member 'FortKismetLibrary_GetRangedWeaponStatsRow::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetRemovedAbilityKit
// 0x0090 (0x0090 - 0x0000)
struct FortKismetLibrary_GetRemovedAbilityKit final
{
public:
	struct FFortSpecializationSlot                Slot;                                              // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UFortAbilityKit*                        ReturnValue;                                       // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetRemovedAbilityKit) == 0x000008, "Wrong alignment on FortKismetLibrary_GetRemovedAbilityKit");
static_assert(sizeof(FortKismetLibrary_GetRemovedAbilityKit) == 0x000090, "Wrong size on FortKismetLibrary_GetRemovedAbilityKit");
static_assert(offsetof(FortKismetLibrary_GetRemovedAbilityKit, Slot) == 0x000000, "Member 'FortKismetLibrary_GetRemovedAbilityKit::Slot' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetRemovedAbilityKit, ReturnValue) == 0x000088, "Member 'FortKismetLibrary_GetRemovedAbilityKit::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetShowHeroBackpackForLocalPlayer
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_GetShowHeroBackpackForLocalPlayer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetShowHeroBackpackForLocalPlayer) == 0x000008, "Wrong alignment on FortKismetLibrary_GetShowHeroBackpackForLocalPlayer");
static_assert(sizeof(FortKismetLibrary_GetShowHeroBackpackForLocalPlayer) == 0x000010, "Wrong size on FortKismetLibrary_GetShowHeroBackpackForLocalPlayer");
static_assert(offsetof(FortKismetLibrary_GetShowHeroBackpackForLocalPlayer, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetShowHeroBackpackForLocalPlayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetShowHeroBackpackForLocalPlayer, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_GetShowHeroBackpackForLocalPlayer::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetShowHeroHeadAccessoriesForLocalPlayer
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_GetShowHeroHeadAccessoriesForLocalPlayer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetShowHeroHeadAccessoriesForLocalPlayer) == 0x000008, "Wrong alignment on FortKismetLibrary_GetShowHeroHeadAccessoriesForLocalPlayer");
static_assert(sizeof(FortKismetLibrary_GetShowHeroHeadAccessoriesForLocalPlayer) == 0x000010, "Wrong size on FortKismetLibrary_GetShowHeroHeadAccessoriesForLocalPlayer");
static_assert(offsetof(FortKismetLibrary_GetShowHeroHeadAccessoriesForLocalPlayer, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetShowHeroHeadAccessoriesForLocalPlayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetShowHeroHeadAccessoriesForLocalPlayer, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_GetShowHeroHeadAccessoriesForLocalPlayer::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetStunTime
// 0x0020 (0x0020 - 0x0000)
struct FortKismetLibrary_GetStunTime final
{
public:
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetStunTime) == 0x000008, "Wrong alignment on FortKismetLibrary_GetStunTime");
static_assert(sizeof(FortKismetLibrary_GetStunTime) == 0x000020, "Wrong size on FortKismetLibrary_GetStunTime");
static_assert(offsetof(FortKismetLibrary_GetStunTime, EffectContext) == 0x000000, "Member 'FortKismetLibrary_GetStunTime::EffectContext' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetStunTime, ReturnValue) == 0x000018, "Member 'FortKismetLibrary_GetStunTime::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetSubGame
// 0x0001 (0x0001 - 0x0000)
struct FortKismetLibrary_GetSubGame final
{
public:
	ESubGame                                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetSubGame) == 0x000001, "Wrong alignment on FortKismetLibrary_GetSubGame");
static_assert(sizeof(FortKismetLibrary_GetSubGame) == 0x000001, "Wrong size on FortKismetLibrary_GetSubGame");
static_assert(offsetof(FortKismetLibrary_GetSubGame, ReturnValue) == 0x000000, "Member 'FortKismetLibrary_GetSubGame::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetTeamAffiliation
// 0x0018 (0x0018 - 0x0000)
struct FortKismetLibrary_GetTeamAffiliation final
{
public:
	const class AActor*                           ActorA;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           ActorB;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortTeamAffiliation                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetTeamAffiliation) == 0x000008, "Wrong alignment on FortKismetLibrary_GetTeamAffiliation");
static_assert(sizeof(FortKismetLibrary_GetTeamAffiliation) == 0x000018, "Wrong size on FortKismetLibrary_GetTeamAffiliation");
static_assert(offsetof(FortKismetLibrary_GetTeamAffiliation, ActorA) == 0x000000, "Member 'FortKismetLibrary_GetTeamAffiliation::ActorA' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTeamAffiliation, ActorB) == 0x000008, "Member 'FortKismetLibrary_GetTeamAffiliation::ActorB' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTeamAffiliation, ReturnValue) == 0x000010, "Member 'FortKismetLibrary_GetTeamAffiliation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetTeamAffiliationBetweenTeams
// 0x0003 (0x0003 - 0x0000)
struct FortKismetLibrary_GetTeamAffiliationBetweenTeams final
{
public:
	EFortTeam                                     TeamA;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortTeam                                     TeamB;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortTeamAffiliation                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetTeamAffiliationBetweenTeams) == 0x000001, "Wrong alignment on FortKismetLibrary_GetTeamAffiliationBetweenTeams");
static_assert(sizeof(FortKismetLibrary_GetTeamAffiliationBetweenTeams) == 0x000003, "Wrong size on FortKismetLibrary_GetTeamAffiliationBetweenTeams");
static_assert(offsetof(FortKismetLibrary_GetTeamAffiliationBetweenTeams, TeamA) == 0x000000, "Member 'FortKismetLibrary_GetTeamAffiliationBetweenTeams::TeamA' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTeamAffiliationBetweenTeams, TeamB) == 0x000001, "Member 'FortKismetLibrary_GetTeamAffiliationBetweenTeams::TeamB' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTeamAffiliationBetweenTeams, ReturnValue) == 0x000002, "Member 'FortKismetLibrary_GetTeamAffiliationBetweenTeams::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetTeamInfo
// 0x0018 (0x0018 - 0x0000)
struct FortKismetLibrary_GetTeamInfo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortTeam                                     Team;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortTeamInfo*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetTeamInfo) == 0x000008, "Wrong alignment on FortKismetLibrary_GetTeamInfo");
static_assert(sizeof(FortKismetLibrary_GetTeamInfo) == 0x000018, "Wrong size on FortKismetLibrary_GetTeamInfo");
static_assert(offsetof(FortKismetLibrary_GetTeamInfo, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetTeamInfo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTeamInfo, Team) == 0x000008, "Member 'FortKismetLibrary_GetTeamInfo::Team' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTeamInfo, ReturnValue) == 0x000010, "Member 'FortKismetLibrary_GetTeamInfo::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetThreatVisualsManager
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_GetThreatVisualsManager final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortThreatVisualsManager*              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetThreatVisualsManager) == 0x000008, "Wrong alignment on FortKismetLibrary_GetThreatVisualsManager");
static_assert(sizeof(FortKismetLibrary_GetThreatVisualsManager) == 0x000010, "Wrong size on FortKismetLibrary_GetThreatVisualsManager");
static_assert(offsetof(FortKismetLibrary_GetThreatVisualsManager, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetThreatVisualsManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetThreatVisualsManager, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_GetThreatVisualsManager::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetTimeDayPhaseBegins
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_GetTimeDayPhaseBegins final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDayPhase                                 DayPhase;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetTimeDayPhaseBegins) == 0x000008, "Wrong alignment on FortKismetLibrary_GetTimeDayPhaseBegins");
static_assert(sizeof(FortKismetLibrary_GetTimeDayPhaseBegins) == 0x000010, "Wrong size on FortKismetLibrary_GetTimeDayPhaseBegins");
static_assert(offsetof(FortKismetLibrary_GetTimeDayPhaseBegins, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetTimeDayPhaseBegins::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTimeDayPhaseBegins, DayPhase) == 0x000008, "Member 'FortKismetLibrary_GetTimeDayPhaseBegins::DayPhase' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTimeDayPhaseBegins, ReturnValue) == 0x00000C, "Member 'FortKismetLibrary_GetTimeDayPhaseBegins::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetTimeOfDay
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_GetTimeOfDay final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetTimeOfDay) == 0x000008, "Wrong alignment on FortKismetLibrary_GetTimeOfDay");
static_assert(sizeof(FortKismetLibrary_GetTimeOfDay) == 0x000010, "Wrong size on FortKismetLibrary_GetTimeOfDay");
static_assert(offsetof(FortKismetLibrary_GetTimeOfDay, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetTimeOfDay::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTimeOfDay, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_GetTimeOfDay::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetTimeOfDayAccumulator
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_GetTimeOfDayAccumulator final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetTimeOfDayAccumulator) == 0x000008, "Wrong alignment on FortKismetLibrary_GetTimeOfDayAccumulator");
static_assert(sizeof(FortKismetLibrary_GetTimeOfDayAccumulator) == 0x000010, "Wrong size on FortKismetLibrary_GetTimeOfDayAccumulator");
static_assert(offsetof(FortKismetLibrary_GetTimeOfDayAccumulator, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetTimeOfDayAccumulator::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTimeOfDayAccumulator, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_GetTimeOfDayAccumulator::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetTimeOfDaySpeed
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_GetTimeOfDaySpeed final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetTimeOfDaySpeed) == 0x000008, "Wrong alignment on FortKismetLibrary_GetTimeOfDaySpeed");
static_assert(sizeof(FortKismetLibrary_GetTimeOfDaySpeed) == 0x000010, "Wrong size on FortKismetLibrary_GetTimeOfDaySpeed");
static_assert(offsetof(FortKismetLibrary_GetTimeOfDaySpeed, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetTimeOfDaySpeed::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTimeOfDaySpeed, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_GetTimeOfDaySpeed::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetTimeUntilInRealTimeSeconds
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_GetTimeUntilInRealTimeSeconds final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GameTime;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetTimeUntilInRealTimeSeconds) == 0x000008, "Wrong alignment on FortKismetLibrary_GetTimeUntilInRealTimeSeconds");
static_assert(sizeof(FortKismetLibrary_GetTimeUntilInRealTimeSeconds) == 0x000010, "Wrong size on FortKismetLibrary_GetTimeUntilInRealTimeSeconds");
static_assert(offsetof(FortKismetLibrary_GetTimeUntilInRealTimeSeconds, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetTimeUntilInRealTimeSeconds::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTimeUntilInRealTimeSeconds, GameTime) == 0x000008, "Member 'FortKismetLibrary_GetTimeUntilInRealTimeSeconds::GameTime' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTimeUntilInRealTimeSeconds, ReturnValue) == 0x00000C, "Member 'FortKismetLibrary_GetTimeUntilInRealTimeSeconds::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetTooltipDescription
// 0x0038 (0x0038 - 0x0000)
struct FortKismetLibrary_GetTooltipDescription final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          ObjectToDescribe;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           Description;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetTooltipDescription) == 0x000008, "Wrong alignment on FortKismetLibrary_GetTooltipDescription");
static_assert(sizeof(FortKismetLibrary_GetTooltipDescription) == 0x000038, "Wrong size on FortKismetLibrary_GetTooltipDescription");
static_assert(offsetof(FortKismetLibrary_GetTooltipDescription, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetTooltipDescription::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipDescription, ObjectToDescribe) == 0x000008, "Member 'FortKismetLibrary_GetTooltipDescription::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipDescription, Tag) == 0x000010, "Member 'FortKismetLibrary_GetTooltipDescription::Tag' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipDescription, Context) == 0x000018, "Member 'FortKismetLibrary_GetTooltipDescription::Context' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipDescription, Description) == 0x000020, "Member 'FortKismetLibrary_GetTooltipDescription::Description' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipDescription, ReturnValue) == 0x000030, "Member 'FortKismetLibrary_GetTooltipDescription::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetTooltipDescriptionFromTooltipClass
// 0x0040 (0x0040 - 0x0000)
struct FortKismetLibrary_GetTooltipDescriptionFromTooltipClass final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          ObjectToDescribe;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortTooltip>               TooltipClass;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0018(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           Description;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetTooltipDescriptionFromTooltipClass) == 0x000008, "Wrong alignment on FortKismetLibrary_GetTooltipDescriptionFromTooltipClass");
static_assert(sizeof(FortKismetLibrary_GetTooltipDescriptionFromTooltipClass) == 0x000040, "Wrong size on FortKismetLibrary_GetTooltipDescriptionFromTooltipClass");
static_assert(offsetof(FortKismetLibrary_GetTooltipDescriptionFromTooltipClass, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetTooltipDescriptionFromTooltipClass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipDescriptionFromTooltipClass, ObjectToDescribe) == 0x000008, "Member 'FortKismetLibrary_GetTooltipDescriptionFromTooltipClass::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipDescriptionFromTooltipClass, TooltipClass) == 0x000010, "Member 'FortKismetLibrary_GetTooltipDescriptionFromTooltipClass::TooltipClass' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipDescriptionFromTooltipClass, Tag) == 0x000018, "Member 'FortKismetLibrary_GetTooltipDescriptionFromTooltipClass::Tag' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipDescriptionFromTooltipClass, Context) == 0x000020, "Member 'FortKismetLibrary_GetTooltipDescriptionFromTooltipClass::Context' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipDescriptionFromTooltipClass, Description) == 0x000028, "Member 'FortKismetLibrary_GetTooltipDescriptionFromTooltipClass::Description' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipDescriptionFromTooltipClass, ReturnValue) == 0x000038, "Member 'FortKismetLibrary_GetTooltipDescriptionFromTooltipClass::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetTooltipNumericValue
// 0x0030 (0x0030 - 0x0000)
struct FortKismetLibrary_GetTooltipNumericValue final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          ObjectToDescribe;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0020(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetTooltipNumericValue) == 0x000008, "Wrong alignment on FortKismetLibrary_GetTooltipNumericValue");
static_assert(sizeof(FortKismetLibrary_GetTooltipNumericValue) == 0x000030, "Wrong size on FortKismetLibrary_GetTooltipNumericValue");
static_assert(offsetof(FortKismetLibrary_GetTooltipNumericValue, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetTooltipNumericValue::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipNumericValue, ObjectToDescribe) == 0x000008, "Member 'FortKismetLibrary_GetTooltipNumericValue::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipNumericValue, Tag) == 0x000010, "Member 'FortKismetLibrary_GetTooltipNumericValue::Tag' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipNumericValue, Context) == 0x000018, "Member 'FortKismetLibrary_GetTooltipNumericValue::Context' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipNumericValue, Token) == 0x000020, "Member 'FortKismetLibrary_GetTooltipNumericValue::Token' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipNumericValue, Value) == 0x000028, "Member 'FortKismetLibrary_GetTooltipNumericValue::Value' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipNumericValue, ReturnValue) == 0x00002C, "Member 'FortKismetLibrary_GetTooltipNumericValue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetTooltipNumericValueFromTooltipClass
// 0x0038 (0x0038 - 0x0000)
struct FortKismetLibrary_GetTooltipNumericValueFromTooltipClass final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          ObjectToDescribe;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortTooltip>               TooltipClass;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0018(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0028(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetTooltipNumericValueFromTooltipClass) == 0x000008, "Wrong alignment on FortKismetLibrary_GetTooltipNumericValueFromTooltipClass");
static_assert(sizeof(FortKismetLibrary_GetTooltipNumericValueFromTooltipClass) == 0x000038, "Wrong size on FortKismetLibrary_GetTooltipNumericValueFromTooltipClass");
static_assert(offsetof(FortKismetLibrary_GetTooltipNumericValueFromTooltipClass, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetTooltipNumericValueFromTooltipClass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipNumericValueFromTooltipClass, ObjectToDescribe) == 0x000008, "Member 'FortKismetLibrary_GetTooltipNumericValueFromTooltipClass::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipNumericValueFromTooltipClass, TooltipClass) == 0x000010, "Member 'FortKismetLibrary_GetTooltipNumericValueFromTooltipClass::TooltipClass' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipNumericValueFromTooltipClass, Tag) == 0x000018, "Member 'FortKismetLibrary_GetTooltipNumericValueFromTooltipClass::Tag' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipNumericValueFromTooltipClass, Context) == 0x000020, "Member 'FortKismetLibrary_GetTooltipNumericValueFromTooltipClass::Context' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipNumericValueFromTooltipClass, Token) == 0x000028, "Member 'FortKismetLibrary_GetTooltipNumericValueFromTooltipClass::Token' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipNumericValueFromTooltipClass, Value) == 0x000030, "Member 'FortKismetLibrary_GetTooltipNumericValueFromTooltipClass::Value' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipNumericValueFromTooltipClass, ReturnValue) == 0x000034, "Member 'FortKismetLibrary_GetTooltipNumericValueFromTooltipClass::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetTooltipTextFromToken
// 0x0048 (0x0048 - 0x0000)
struct FortKismetLibrary_GetTooltipTextFromToken final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          ObjectToDescribe;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0010(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0020(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0028(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetTooltipTextFromToken) == 0x000008, "Wrong alignment on FortKismetLibrary_GetTooltipTextFromToken");
static_assert(sizeof(FortKismetLibrary_GetTooltipTextFromToken) == 0x000048, "Wrong size on FortKismetLibrary_GetTooltipTextFromToken");
static_assert(offsetof(FortKismetLibrary_GetTooltipTextFromToken, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetTooltipTextFromToken::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipTextFromToken, ObjectToDescribe) == 0x000008, "Member 'FortKismetLibrary_GetTooltipTextFromToken::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipTextFromToken, Tag) == 0x000010, "Member 'FortKismetLibrary_GetTooltipTextFromToken::Tag' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipTextFromToken, Context) == 0x000018, "Member 'FortKismetLibrary_GetTooltipTextFromToken::Context' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipTextFromToken, Token) == 0x000020, "Member 'FortKismetLibrary_GetTooltipTextFromToken::Token' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipTextFromToken, OutText) == 0x000028, "Member 'FortKismetLibrary_GetTooltipTextFromToken::OutText' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipTextFromToken, ReturnValue) == 0x000040, "Member 'FortKismetLibrary_GetTooltipTextFromToken::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetTooltipTextFromTokenFromTooltipClass
// 0x0050 (0x0050 - 0x0000)
struct FortKismetLibrary_GetTooltipTextFromTokenFromTooltipClass final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          ObjectToDescribe;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortTooltip>               TooltipClass;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0018(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0028(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0030(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetTooltipTextFromTokenFromTooltipClass) == 0x000008, "Wrong alignment on FortKismetLibrary_GetTooltipTextFromTokenFromTooltipClass");
static_assert(sizeof(FortKismetLibrary_GetTooltipTextFromTokenFromTooltipClass) == 0x000050, "Wrong size on FortKismetLibrary_GetTooltipTextFromTokenFromTooltipClass");
static_assert(offsetof(FortKismetLibrary_GetTooltipTextFromTokenFromTooltipClass, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetTooltipTextFromTokenFromTooltipClass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipTextFromTokenFromTooltipClass, ObjectToDescribe) == 0x000008, "Member 'FortKismetLibrary_GetTooltipTextFromTokenFromTooltipClass::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipTextFromTokenFromTooltipClass, TooltipClass) == 0x000010, "Member 'FortKismetLibrary_GetTooltipTextFromTokenFromTooltipClass::TooltipClass' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipTextFromTokenFromTooltipClass, Tag) == 0x000018, "Member 'FortKismetLibrary_GetTooltipTextFromTokenFromTooltipClass::Tag' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipTextFromTokenFromTooltipClass, Context) == 0x000020, "Member 'FortKismetLibrary_GetTooltipTextFromTokenFromTooltipClass::Context' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipTextFromTokenFromTooltipClass, Token) == 0x000028, "Member 'FortKismetLibrary_GetTooltipTextFromTokenFromTooltipClass::Token' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipTextFromTokenFromTooltipClass, OutText) == 0x000030, "Member 'FortKismetLibrary_GetTooltipTextFromTokenFromTooltipClass::OutText' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipTextFromTokenFromTooltipClass, ReturnValue) == 0x000048, "Member 'FortKismetLibrary_GetTooltipTextFromTokenFromTooltipClass::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetTrapStatsRow
// 0x0150 (0x0150 - 0x0000)
struct FortKismetLibrary_GetTrapStatsRow final
{
public:
	struct FDataTableRowHandle                    DataTableRowHandle;                                // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortTrapStats                         OutRow;                                            // 0x0010(0x0138)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0148(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetTrapStatsRow) == 0x000008, "Wrong alignment on FortKismetLibrary_GetTrapStatsRow");
static_assert(sizeof(FortKismetLibrary_GetTrapStatsRow) == 0x000150, "Wrong size on FortKismetLibrary_GetTrapStatsRow");
static_assert(offsetof(FortKismetLibrary_GetTrapStatsRow, DataTableRowHandle) == 0x000000, "Member 'FortKismetLibrary_GetTrapStatsRow::DataTableRowHandle' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTrapStatsRow, OutRow) == 0x000010, "Member 'FortKismetLibrary_GetTrapStatsRow::OutRow' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTrapStatsRow, ReturnValue) == 0x000148, "Member 'FortKismetLibrary_GetTrapStatsRow::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetWeaponDurabilityByRarityStatsRow
// 0x0048 (0x0048 - 0x0000)
struct FortKismetLibrary_GetWeaponDurabilityByRarityStatsRow final
{
public:
	struct FDataTableRowHandle                    DataTableRowHandle;                                // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortWeaponDurabilityByRarityStats     OutRow;                                            // 0x0010(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetWeaponDurabilityByRarityStatsRow) == 0x000008, "Wrong alignment on FortKismetLibrary_GetWeaponDurabilityByRarityStatsRow");
static_assert(sizeof(FortKismetLibrary_GetWeaponDurabilityByRarityStatsRow) == 0x000048, "Wrong size on FortKismetLibrary_GetWeaponDurabilityByRarityStatsRow");
static_assert(offsetof(FortKismetLibrary_GetWeaponDurabilityByRarityStatsRow, DataTableRowHandle) == 0x000000, "Member 'FortKismetLibrary_GetWeaponDurabilityByRarityStatsRow::DataTableRowHandle' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetWeaponDurabilityByRarityStatsRow, OutRow) == 0x000010, "Member 'FortKismetLibrary_GetWeaponDurabilityByRarityStatsRow::OutRow' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetWeaponDurabilityByRarityStatsRow, ReturnValue) == 0x000040, "Member 'FortKismetLibrary_GetWeaponDurabilityByRarityStatsRow::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetWeaponStatsRow
// 0x0138 (0x0138 - 0x0000)
struct FortKismetLibrary_GetWeaponStatsRow final
{
public:
	struct FDataTableRowHandle                    DataTableRowHandle;                                // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortBaseWeaponStats                   OutRow;                                            // 0x0010(0x0120)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0130(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetWeaponStatsRow) == 0x000008, "Wrong alignment on FortKismetLibrary_GetWeaponStatsRow");
static_assert(sizeof(FortKismetLibrary_GetWeaponStatsRow) == 0x000138, "Wrong size on FortKismetLibrary_GetWeaponStatsRow");
static_assert(offsetof(FortKismetLibrary_GetWeaponStatsRow, DataTableRowHandle) == 0x000000, "Member 'FortKismetLibrary_GetWeaponStatsRow::DataTableRowHandle' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetWeaponStatsRow, OutRow) == 0x000010, "Member 'FortKismetLibrary_GetWeaponStatsRow::OutRow' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetWeaponStatsRow, ReturnValue) == 0x000130, "Member 'FortKismetLibrary_GetWeaponStatsRow::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GiveItemToInventoryOwner
// 0x0020 (0x0020 - 0x0000)
struct FortKismetLibrary_GiveItemToInventoryOwner final
{
public:
	TScriptInterface<class IFortInventoryOwnerInterface> InventoryOwner;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	const class UFortWorldItemDefinition*         ItemDefinition;                                    // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberToGive;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotifyPlayer;                                     // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GiveItemToInventoryOwner) == 0x000008, "Wrong alignment on FortKismetLibrary_GiveItemToInventoryOwner");
static_assert(sizeof(FortKismetLibrary_GiveItemToInventoryOwner) == 0x000020, "Wrong size on FortKismetLibrary_GiveItemToInventoryOwner");
static_assert(offsetof(FortKismetLibrary_GiveItemToInventoryOwner, InventoryOwner) == 0x000000, "Member 'FortKismetLibrary_GiveItemToInventoryOwner::InventoryOwner' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GiveItemToInventoryOwner, ItemDefinition) == 0x000010, "Member 'FortKismetLibrary_GiveItemToInventoryOwner::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GiveItemToInventoryOwner, NumberToGive) == 0x000018, "Member 'FortKismetLibrary_GiveItemToInventoryOwner::NumberToGive' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GiveItemToInventoryOwner, bNotifyPlayer) == 0x00001C, "Member 'FortKismetLibrary_GiveItemToInventoryOwner::bNotifyPlayer' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.HasMultipleVisibleRewards
// 0x0038 (0x0038 - 0x0000)
struct FortKismetLibrary_HasMultipleVisibleRewards final
{
public:
	struct FFortRewardInfo                        RewardInfo;                                        // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_HasMultipleVisibleRewards) == 0x000008, "Wrong alignment on FortKismetLibrary_HasMultipleVisibleRewards");
static_assert(sizeof(FortKismetLibrary_HasMultipleVisibleRewards) == 0x000038, "Wrong size on FortKismetLibrary_HasMultipleVisibleRewards");
static_assert(offsetof(FortKismetLibrary_HasMultipleVisibleRewards, RewardInfo) == 0x000000, "Member 'FortKismetLibrary_HasMultipleVisibleRewards::RewardInfo' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_HasMultipleVisibleRewards, ReturnValue) == 0x000030, "Member 'FortKismetLibrary_HasMultipleVisibleRewards::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.HasOpenBroadcasterGrantWindow
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_HasOpenBroadcasterGrantWindow final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_HasOpenBroadcasterGrantWindow) == 0x000008, "Wrong alignment on FortKismetLibrary_HasOpenBroadcasterGrantWindow");
static_assert(sizeof(FortKismetLibrary_HasOpenBroadcasterGrantWindow) == 0x000010, "Wrong size on FortKismetLibrary_HasOpenBroadcasterGrantWindow");
static_assert(offsetof(FortKismetLibrary_HasOpenBroadcasterGrantWindow, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_HasOpenBroadcasterGrantWindow::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_HasOpenBroadcasterGrantWindow, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_HasOpenBroadcasterGrantWindow::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.HasRewards
// 0x0038 (0x0038 - 0x0000)
struct FortKismetLibrary_HasRewards final
{
public:
	struct FFortRewardInfo                        RewardInfo;                                        // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_HasRewards) == 0x000008, "Wrong alignment on FortKismetLibrary_HasRewards");
static_assert(sizeof(FortKismetLibrary_HasRewards) == 0x000038, "Wrong size on FortKismetLibrary_HasRewards");
static_assert(offsetof(FortKismetLibrary_HasRewards, RewardInfo) == 0x000000, "Member 'FortKismetLibrary_HasRewards::RewardInfo' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_HasRewards, ReturnValue) == 0x000030, "Member 'FortKismetLibrary_HasRewards::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.HasSelectableRewards
// 0x0038 (0x0038 - 0x0000)
struct FortKismetLibrary_HasSelectableRewards final
{
public:
	struct FFortRewardInfo                        RewardInfo;                                        // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_HasSelectableRewards) == 0x000008, "Wrong alignment on FortKismetLibrary_HasSelectableRewards");
static_assert(sizeof(FortKismetLibrary_HasSelectableRewards) == 0x000038, "Wrong size on FortKismetLibrary_HasSelectableRewards");
static_assert(offsetof(FortKismetLibrary_HasSelectableRewards, RewardInfo) == 0x000000, "Member 'FortKismetLibrary_HasSelectableRewards::RewardInfo' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_HasSelectableRewards, ReturnValue) == 0x000030, "Member 'FortKismetLibrary_HasSelectableRewards::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.HideTutorialWidget
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_HideTutorialWidget final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WidgetName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_HideTutorialWidget) == 0x000008, "Wrong alignment on FortKismetLibrary_HideTutorialWidget");
static_assert(sizeof(FortKismetLibrary_HideTutorialWidget) == 0x000010, "Wrong size on FortKismetLibrary_HideTutorialWidget");
static_assert(offsetof(FortKismetLibrary_HideTutorialWidget, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_HideTutorialWidget::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_HideTutorialWidget, WidgetName) == 0x000008, "Member 'FortKismetLibrary_HideTutorialWidget::WidgetName' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.InvalidateLatentActionHandle
// 0x0004 (0x0004 - 0x0000)
struct FortKismetLibrary_InvalidateLatentActionHandle final
{
public:
	struct FFortDialogExternalLatentActionHandle  Handle;                                            // 0x0000(0x0004)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_InvalidateLatentActionHandle) == 0x000004, "Wrong alignment on FortKismetLibrary_InvalidateLatentActionHandle");
static_assert(sizeof(FortKismetLibrary_InvalidateLatentActionHandle) == 0x000004, "Wrong size on FortKismetLibrary_InvalidateLatentActionHandle");
static_assert(offsetof(FortKismetLibrary_InvalidateLatentActionHandle, Handle) == 0x000000, "Member 'FortKismetLibrary_InvalidateLatentActionHandle::Handle' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.IsAssetNull
// 0x0030 (0x0030 - 0x0000)
struct FortKismetLibrary_IsAssetNull final
{
public:
	TSoftObjectPtr<class UObject>                 Asset;                                             // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_IsAssetNull) == 0x000008, "Wrong alignment on FortKismetLibrary_IsAssetNull");
static_assert(sizeof(FortKismetLibrary_IsAssetNull) == 0x000030, "Wrong size on FortKismetLibrary_IsAssetNull");
static_assert(offsetof(FortKismetLibrary_IsAssetNull, Asset) == 0x000000, "Member 'FortKismetLibrary_IsAssetNull::Asset' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_IsAssetNull, ReturnValue) == 0x000028, "Member 'FortKismetLibrary_IsAssetNull::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.IsConsolePlatform
// 0x0001 (0x0001 - 0x0000)
struct FortKismetLibrary_IsConsolePlatform final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_IsConsolePlatform) == 0x000001, "Wrong alignment on FortKismetLibrary_IsConsolePlatform");
static_assert(sizeof(FortKismetLibrary_IsConsolePlatform) == 0x000001, "Wrong size on FortKismetLibrary_IsConsolePlatform");
static_assert(offsetof(FortKismetLibrary_IsConsolePlatform, ReturnValue) == 0x000000, "Member 'FortKismetLibrary_IsConsolePlatform::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.IsCriticalHit
// 0x0020 (0x0020 - 0x0000)
struct FortKismetLibrary_IsCriticalHit final
{
public:
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_IsCriticalHit) == 0x000008, "Wrong alignment on FortKismetLibrary_IsCriticalHit");
static_assert(sizeof(FortKismetLibrary_IsCriticalHit) == 0x000020, "Wrong size on FortKismetLibrary_IsCriticalHit");
static_assert(offsetof(FortKismetLibrary_IsCriticalHit, EffectContext) == 0x000000, "Member 'FortKismetLibrary_IsCriticalHit::EffectContext' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_IsCriticalHit, ReturnValue) == 0x000018, "Member 'FortKismetLibrary_IsCriticalHit::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.IsDiceCritical
// 0x0020 (0x0020 - 0x0000)
struct FortKismetLibrary_IsDiceCritical final
{
public:
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_IsDiceCritical) == 0x000008, "Wrong alignment on FortKismetLibrary_IsDiceCritical");
static_assert(sizeof(FortKismetLibrary_IsDiceCritical) == 0x000020, "Wrong size on FortKismetLibrary_IsDiceCritical");
static_assert(offsetof(FortKismetLibrary_IsDiceCritical, EffectContext) == 0x000000, "Member 'FortKismetLibrary_IsDiceCritical::EffectContext' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_IsDiceCritical, ReturnValue) == 0x000018, "Member 'FortKismetLibrary_IsDiceCritical::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.IsFatalHit
// 0x0020 (0x0020 - 0x0000)
struct FortKismetLibrary_IsFatalHit final
{
public:
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_IsFatalHit) == 0x000008, "Wrong alignment on FortKismetLibrary_IsFatalHit");
static_assert(sizeof(FortKismetLibrary_IsFatalHit) == 0x000020, "Wrong size on FortKismetLibrary_IsFatalHit");
static_assert(offsetof(FortKismetLibrary_IsFatalHit, EffectContext) == 0x000000, "Member 'FortKismetLibrary_IsFatalHit::EffectContext' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_IsFatalHit, ReturnValue) == 0x000018, "Member 'FortKismetLibrary_IsFatalHit::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.IsFullBodyHit
// 0x0020 (0x0020 - 0x0000)
struct FortKismetLibrary_IsFullBodyHit final
{
public:
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_IsFullBodyHit) == 0x000008, "Wrong alignment on FortKismetLibrary_IsFullBodyHit");
static_assert(sizeof(FortKismetLibrary_IsFullBodyHit) == 0x000020, "Wrong size on FortKismetLibrary_IsFullBodyHit");
static_assert(offsetof(FortKismetLibrary_IsFullBodyHit, EffectContext) == 0x000000, "Member 'FortKismetLibrary_IsFullBodyHit::EffectContext' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_IsFullBodyHit, ReturnValue) == 0x000018, "Member 'FortKismetLibrary_IsFullBodyHit::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.IsLatentActionHandleValid
// 0x0008 (0x0008 - 0x0000)
struct FortKismetLibrary_IsLatentActionHandleValid final
{
public:
	struct FFortDialogExternalLatentActionHandle  Handle;                                            // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_IsLatentActionHandleValid) == 0x000004, "Wrong alignment on FortKismetLibrary_IsLatentActionHandleValid");
static_assert(sizeof(FortKismetLibrary_IsLatentActionHandleValid) == 0x000008, "Wrong size on FortKismetLibrary_IsLatentActionHandleValid");
static_assert(offsetof(FortKismetLibrary_IsLatentActionHandleValid, Handle) == 0x000000, "Member 'FortKismetLibrary_IsLatentActionHandleValid::Handle' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_IsLatentActionHandleValid, ReturnValue) == 0x000004, "Member 'FortKismetLibrary_IsLatentActionHandleValid::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.IsLinkingStreamedAccountsEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortKismetLibrary_IsLinkingStreamedAccountsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_IsLinkingStreamedAccountsEnabled) == 0x000001, "Wrong alignment on FortKismetLibrary_IsLinkingStreamedAccountsEnabled");
static_assert(sizeof(FortKismetLibrary_IsLinkingStreamedAccountsEnabled) == 0x000001, "Wrong size on FortKismetLibrary_IsLinkingStreamedAccountsEnabled");
static_assert(offsetof(FortKismetLibrary_IsLinkingStreamedAccountsEnabled, ReturnValue) == 0x000000, "Member 'FortKismetLibrary_IsLinkingStreamedAccountsEnabled::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.IsUsingBattlEye
// 0x0001 (0x0001 - 0x0000)
struct FortKismetLibrary_IsUsingBattlEye final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_IsUsingBattlEye) == 0x000001, "Wrong alignment on FortKismetLibrary_IsUsingBattlEye");
static_assert(sizeof(FortKismetLibrary_IsUsingBattlEye) == 0x000001, "Wrong size on FortKismetLibrary_IsUsingBattlEye");
static_assert(offsetof(FortKismetLibrary_IsUsingBattlEye, ReturnValue) == 0x000000, "Member 'FortKismetLibrary_IsUsingBattlEye::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.IsValid
// 0x0018 (0x0018 - 0x0000)
struct FortKismetLibrary_IsValid final
{
public:
	struct FAttributeInfo                         AttributeInfo;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_IsValid) == 0x000008, "Wrong alignment on FortKismetLibrary_IsValid");
static_assert(sizeof(FortKismetLibrary_IsValid) == 0x000018, "Wrong size on FortKismetLibrary_IsValid");
static_assert(offsetof(FortKismetLibrary_IsValid, AttributeInfo) == 0x000000, "Member 'FortKismetLibrary_IsValid::AttributeInfo' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_IsValid, ReturnValue) == 0x000010, "Member 'FortKismetLibrary_IsValid::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.IsValid_UniqueNetIdRepl
// 0x0030 (0x0030 - 0x0000)
struct FortKismetLibrary_IsValid_UniqueNetIdRepl final
{
public:
	struct FUniqueNetIdRepl                       InUniqueNetIdRepl;                                 // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_IsValid_UniqueNetIdRepl) == 0x000008, "Wrong alignment on FortKismetLibrary_IsValid_UniqueNetIdRepl");
static_assert(sizeof(FortKismetLibrary_IsValid_UniqueNetIdRepl) == 0x000030, "Wrong size on FortKismetLibrary_IsValid_UniqueNetIdRepl");
static_assert(offsetof(FortKismetLibrary_IsValid_UniqueNetIdRepl, InUniqueNetIdRepl) == 0x000000, "Member 'FortKismetLibrary_IsValid_UniqueNetIdRepl::InUniqueNetIdRepl' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_IsValid_UniqueNetIdRepl, ReturnValue) == 0x000028, "Member 'FortKismetLibrary_IsValid_UniqueNetIdRepl::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.JonLHack_GetAllObjectsOfClassFromPath
// 0x0028 (0x0028 - 0x0000)
struct FortKismetLibrary_JonLHack_GetAllObjectsOfClassFromPath final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 Param_Class;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_JonLHack_GetAllObjectsOfClassFromPath) == 0x000008, "Wrong alignment on FortKismetLibrary_JonLHack_GetAllObjectsOfClassFromPath");
static_assert(sizeof(FortKismetLibrary_JonLHack_GetAllObjectsOfClassFromPath) == 0x000028, "Wrong size on FortKismetLibrary_JonLHack_GetAllObjectsOfClassFromPath");
static_assert(offsetof(FortKismetLibrary_JonLHack_GetAllObjectsOfClassFromPath, Path) == 0x000000, "Member 'FortKismetLibrary_JonLHack_GetAllObjectsOfClassFromPath::Path' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_JonLHack_GetAllObjectsOfClassFromPath, Param_Class) == 0x000010, "Member 'FortKismetLibrary_JonLHack_GetAllObjectsOfClassFromPath::Param_Class' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_JonLHack_GetAllObjectsOfClassFromPath, ReturnValue) == 0x000018, "Member 'FortKismetLibrary_JonLHack_GetAllObjectsOfClassFromPath::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.K2_GetClosestAxisXY
// 0x0018 (0x0018 - 0x0000)
struct FortKismetLibrary_K2_GetClosestAxisXY final
{
public:
	struct FVector                                InVector;                                          // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_K2_GetClosestAxisXY) == 0x000004, "Wrong alignment on FortKismetLibrary_K2_GetClosestAxisXY");
static_assert(sizeof(FortKismetLibrary_K2_GetClosestAxisXY) == 0x000018, "Wrong size on FortKismetLibrary_K2_GetClosestAxisXY");
static_assert(offsetof(FortKismetLibrary_K2_GetClosestAxisXY, InVector) == 0x000000, "Member 'FortKismetLibrary_K2_GetClosestAxisXY::InVector' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_K2_GetClosestAxisXY, ReturnValue) == 0x00000C, "Member 'FortKismetLibrary_K2_GetClosestAxisXY::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.K2_GetItemQuantityOnPlayer
// 0x0018 (0x0018 - 0x0000)
struct FortKismetLibrary_K2_GetItemQuantityOnPlayer final
{
public:
	class AFortPlayerController*                  PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItemDefinition*                    ItemDefinition;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_K2_GetItemQuantityOnPlayer) == 0x000008, "Wrong alignment on FortKismetLibrary_K2_GetItemQuantityOnPlayer");
static_assert(sizeof(FortKismetLibrary_K2_GetItemQuantityOnPlayer) == 0x000018, "Wrong size on FortKismetLibrary_K2_GetItemQuantityOnPlayer");
static_assert(offsetof(FortKismetLibrary_K2_GetItemQuantityOnPlayer, PlayerController) == 0x000000, "Member 'FortKismetLibrary_K2_GetItemQuantityOnPlayer::PlayerController' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_K2_GetItemQuantityOnPlayer, ItemDefinition) == 0x000008, "Member 'FortKismetLibrary_K2_GetItemQuantityOnPlayer::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_K2_GetItemQuantityOnPlayer, ReturnValue) == 0x000010, "Member 'FortKismetLibrary_K2_GetItemQuantityOnPlayer::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.K2_GiveItemToAllPlayers
// 0x0018 (0x0018 - 0x0000)
struct FortKismetLibrary_K2_GiveItemToAllPlayers final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortWorldItemDefinition*               ItemDefinition;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberToGive;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotifyPlayer;                                     // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_K2_GiveItemToAllPlayers) == 0x000008, "Wrong alignment on FortKismetLibrary_K2_GiveItemToAllPlayers");
static_assert(sizeof(FortKismetLibrary_K2_GiveItemToAllPlayers) == 0x000018, "Wrong size on FortKismetLibrary_K2_GiveItemToAllPlayers");
static_assert(offsetof(FortKismetLibrary_K2_GiveItemToAllPlayers, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_K2_GiveItemToAllPlayers::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_K2_GiveItemToAllPlayers, ItemDefinition) == 0x000008, "Member 'FortKismetLibrary_K2_GiveItemToAllPlayers::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_K2_GiveItemToAllPlayers, NumberToGive) == 0x000010, "Member 'FortKismetLibrary_K2_GiveItemToAllPlayers::NumberToGive' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_K2_GiveItemToAllPlayers, bNotifyPlayer) == 0x000014, "Member 'FortKismetLibrary_K2_GiveItemToAllPlayers::bNotifyPlayer' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.K2_GiveItemToPlayer
// 0x0018 (0x0018 - 0x0000)
struct FortKismetLibrary_K2_GiveItemToPlayer final
{
public:
	class AFortPlayerController*                  PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortWorldItemDefinition*         ItemDefinition;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberToGive;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotifyPlayer;                                     // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_K2_GiveItemToPlayer) == 0x000008, "Wrong alignment on FortKismetLibrary_K2_GiveItemToPlayer");
static_assert(sizeof(FortKismetLibrary_K2_GiveItemToPlayer) == 0x000018, "Wrong size on FortKismetLibrary_K2_GiveItemToPlayer");
static_assert(offsetof(FortKismetLibrary_K2_GiveItemToPlayer, PlayerController) == 0x000000, "Member 'FortKismetLibrary_K2_GiveItemToPlayer::PlayerController' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_K2_GiveItemToPlayer, ItemDefinition) == 0x000008, "Member 'FortKismetLibrary_K2_GiveItemToPlayer::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_K2_GiveItemToPlayer, NumberToGive) == 0x000010, "Member 'FortKismetLibrary_K2_GiveItemToPlayer::NumberToGive' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_K2_GiveItemToPlayer, bNotifyPlayer) == 0x000014, "Member 'FortKismetLibrary_K2_GiveItemToPlayer::bNotifyPlayer' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.K2_RemoveItemFromAllPlayers
// 0x0018 (0x0018 - 0x0000)
struct FortKismetLibrary_K2_RemoveItemFromAllPlayers final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortWorldItemDefinition*               ItemDefinition;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmountToRemove;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_K2_RemoveItemFromAllPlayers) == 0x000008, "Wrong alignment on FortKismetLibrary_K2_RemoveItemFromAllPlayers");
static_assert(sizeof(FortKismetLibrary_K2_RemoveItemFromAllPlayers) == 0x000018, "Wrong size on FortKismetLibrary_K2_RemoveItemFromAllPlayers");
static_assert(offsetof(FortKismetLibrary_K2_RemoveItemFromAllPlayers, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_K2_RemoveItemFromAllPlayers::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_K2_RemoveItemFromAllPlayers, ItemDefinition) == 0x000008, "Member 'FortKismetLibrary_K2_RemoveItemFromAllPlayers::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_K2_RemoveItemFromAllPlayers, AmountToRemove) == 0x000010, "Member 'FortKismetLibrary_K2_RemoveItemFromAllPlayers::AmountToRemove' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.K2_RemoveItemFromPlayer
// 0x0018 (0x0018 - 0x0000)
struct FortKismetLibrary_K2_RemoveItemFromPlayer final
{
public:
	class AFortPlayerController*                  PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortWorldItemDefinition*               ItemDefinition;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmountToRemove;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_K2_RemoveItemFromPlayer) == 0x000008, "Wrong alignment on FortKismetLibrary_K2_RemoveItemFromPlayer");
static_assert(sizeof(FortKismetLibrary_K2_RemoveItemFromPlayer) == 0x000018, "Wrong size on FortKismetLibrary_K2_RemoveItemFromPlayer");
static_assert(offsetof(FortKismetLibrary_K2_RemoveItemFromPlayer, PlayerController) == 0x000000, "Member 'FortKismetLibrary_K2_RemoveItemFromPlayer::PlayerController' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_K2_RemoveItemFromPlayer, ItemDefinition) == 0x000008, "Member 'FortKismetLibrary_K2_RemoveItemFromPlayer::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_K2_RemoveItemFromPlayer, AmountToRemove) == 0x000010, "Member 'FortKismetLibrary_K2_RemoveItemFromPlayer::AmountToRemove' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_K2_RemoveItemFromPlayer, ReturnValue) == 0x000014, "Member 'FortKismetLibrary_K2_RemoveItemFromPlayer::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.K2_SpawnPickupInWorld
// 0x0040 (0x0040 - 0x0000)
struct FortKismetLibrary_K2_SpawnPickupInWorld final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortWorldItemDefinition*               ItemDefinition;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberToSpawn;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0014(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0020(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OverrideMaxStackCount;                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bToss;                                             // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPickup*                            ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_K2_SpawnPickupInWorld) == 0x000008, "Wrong alignment on FortKismetLibrary_K2_SpawnPickupInWorld");
static_assert(sizeof(FortKismetLibrary_K2_SpawnPickupInWorld) == 0x000040, "Wrong size on FortKismetLibrary_K2_SpawnPickupInWorld");
static_assert(offsetof(FortKismetLibrary_K2_SpawnPickupInWorld, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_K2_SpawnPickupInWorld::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_K2_SpawnPickupInWorld, ItemDefinition) == 0x000008, "Member 'FortKismetLibrary_K2_SpawnPickupInWorld::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_K2_SpawnPickupInWorld, NumberToSpawn) == 0x000010, "Member 'FortKismetLibrary_K2_SpawnPickupInWorld::NumberToSpawn' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_K2_SpawnPickupInWorld, Position) == 0x000014, "Member 'FortKismetLibrary_K2_SpawnPickupInWorld::Position' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_K2_SpawnPickupInWorld, Direction) == 0x000020, "Member 'FortKismetLibrary_K2_SpawnPickupInWorld::Direction' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_K2_SpawnPickupInWorld, OverrideMaxStackCount) == 0x00002C, "Member 'FortKismetLibrary_K2_SpawnPickupInWorld::OverrideMaxStackCount' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_K2_SpawnPickupInWorld, bToss) == 0x000030, "Member 'FortKismetLibrary_K2_SpawnPickupInWorld::bToss' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_K2_SpawnPickupInWorld, ReturnValue) == 0x000038, "Member 'FortKismetLibrary_K2_SpawnPickupInWorld::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.MakeAllPlayersTalkToSelf
// 0x0038 (0x0038 - 0x0000)
struct FortKismetLibrary_MakeAllPlayersTalkToSelf final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class USoundBase*                             Audio;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterruptCurrentLine;                             // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanBeInterrupted;                                 // 0x002D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanCue;                                           // 0x002E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFeedbackBroadcastFilter                  BroadcastFilter;                                   // 0x002F(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLatent;                                           // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_MakeAllPlayersTalkToSelf) == 0x000008, "Wrong alignment on FortKismetLibrary_MakeAllPlayersTalkToSelf");
static_assert(sizeof(FortKismetLibrary_MakeAllPlayersTalkToSelf) == 0x000038, "Wrong size on FortKismetLibrary_MakeAllPlayersTalkToSelf");
static_assert(offsetof(FortKismetLibrary_MakeAllPlayersTalkToSelf, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_MakeAllPlayersTalkToSelf::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_MakeAllPlayersTalkToSelf, LatentInfo) == 0x000008, "Member 'FortKismetLibrary_MakeAllPlayersTalkToSelf::LatentInfo' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_MakeAllPlayersTalkToSelf, Audio) == 0x000020, "Member 'FortKismetLibrary_MakeAllPlayersTalkToSelf::Audio' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_MakeAllPlayersTalkToSelf, Delay) == 0x000028, "Member 'FortKismetLibrary_MakeAllPlayersTalkToSelf::Delay' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_MakeAllPlayersTalkToSelf, bInterruptCurrentLine) == 0x00002C, "Member 'FortKismetLibrary_MakeAllPlayersTalkToSelf::bInterruptCurrentLine' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_MakeAllPlayersTalkToSelf, bCanBeInterrupted) == 0x00002D, "Member 'FortKismetLibrary_MakeAllPlayersTalkToSelf::bCanBeInterrupted' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_MakeAllPlayersTalkToSelf, bCanCue) == 0x00002E, "Member 'FortKismetLibrary_MakeAllPlayersTalkToSelf::bCanCue' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_MakeAllPlayersTalkToSelf, BroadcastFilter) == 0x00002F, "Member 'FortKismetLibrary_MakeAllPlayersTalkToSelf::BroadcastFilter' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_MakeAllPlayersTalkToSelf, bLatent) == 0x000030, "Member 'FortKismetLibrary_MakeAllPlayersTalkToSelf::bLatent' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.MakeBuildingState
// 0x0002 (0x0002 - 0x0000)
struct FortKismetLibrary_MakeBuildingState final
{
public:
	EFortBuildingState                            Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuildingState                            ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_MakeBuildingState) == 0x000001, "Wrong alignment on FortKismetLibrary_MakeBuildingState");
static_assert(sizeof(FortKismetLibrary_MakeBuildingState) == 0x000002, "Wrong size on FortKismetLibrary_MakeBuildingState");
static_assert(offsetof(FortKismetLibrary_MakeBuildingState, Value) == 0x000000, "Member 'FortKismetLibrary_MakeBuildingState::Value' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_MakeBuildingState, ReturnValue) == 0x000001, "Member 'FortKismetLibrary_MakeBuildingState::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.MakeDayNightPhase
// 0x0002 (0x0002 - 0x0000)
struct FortKismetLibrary_MakeDayNightPhase final
{
public:
	EFortDayPhase                                 Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDayPhase                                 ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_MakeDayNightPhase) == 0x000001, "Wrong alignment on FortKismetLibrary_MakeDayNightPhase");
static_assert(sizeof(FortKismetLibrary_MakeDayNightPhase) == 0x000002, "Wrong size on FortKismetLibrary_MakeDayNightPhase");
static_assert(offsetof(FortKismetLibrary_MakeDayNightPhase, Value) == 0x000000, "Member 'FortKismetLibrary_MakeDayNightPhase::Value' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_MakeDayNightPhase, ReturnValue) == 0x000001, "Member 'FortKismetLibrary_MakeDayNightPhase::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.MakeGameplayEffectContainerSpecFromAbility
// 0x0118 (0x0118 - 0x0000)
struct FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbility final
{
public:
	struct FFortGameplayEffectContainer           EffectContainer;                                   // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UGameplayAbility*                       Ability;                                           // 0x0088(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameplayEffectLevel;                               // 0x0090(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortGameplayEffectContainerSpec       ReturnValue;                                       // 0x0098(0x0080)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbility) == 0x000008, "Wrong alignment on FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbility");
static_assert(sizeof(FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbility) == 0x000118, "Wrong size on FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbility");
static_assert(offsetof(FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbility, EffectContainer) == 0x000000, "Member 'FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbility::EffectContainer' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbility, Ability) == 0x000088, "Member 'FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbility::Ability' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbility, GameplayEffectLevel) == 0x000090, "Member 'FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbility::GameplayEffectLevel' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbility, ReturnValue) == 0x000098, "Member 'FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbility::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.MakeGameplayEffectContainerSpecFromAbilityComponent
// 0x0118 (0x0118 - 0x0000)
struct FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbilityComponent final
{
public:
	struct FFortGameplayEffectContainer           EffectContainer;                                   // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UAbilitySystemComponent*                AbilityComp;                                       // 0x0088(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameplayEffectLevel;                               // 0x0090(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortGameplayEffectContainerSpec       ReturnValue;                                       // 0x0098(0x0080)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbilityComponent) == 0x000008, "Wrong alignment on FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbilityComponent");
static_assert(sizeof(FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbilityComponent) == 0x000118, "Wrong size on FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbilityComponent");
static_assert(offsetof(FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbilityComponent, EffectContainer) == 0x000000, "Member 'FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbilityComponent::EffectContainer' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbilityComponent, AbilityComp) == 0x000088, "Member 'FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbilityComponent::AbilityComp' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbilityComponent, GameplayEffectLevel) == 0x000090, "Member 'FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbilityComponent::GameplayEffectLevel' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbilityComponent, ReturnValue) == 0x000098, "Member 'FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbilityComponent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.MakeMovementStyle
// 0x0002 (0x0002 - 0x0000)
struct FortKismetLibrary_MakeMovementStyle final
{
public:
	EFortMovementStyle                            Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMovementStyle                            ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_MakeMovementStyle) == 0x000001, "Wrong alignment on FortKismetLibrary_MakeMovementStyle");
static_assert(sizeof(FortKismetLibrary_MakeMovementStyle) == 0x000002, "Wrong size on FortKismetLibrary_MakeMovementStyle");
static_assert(offsetof(FortKismetLibrary_MakeMovementStyle, Value) == 0x000000, "Member 'FortKismetLibrary_MakeMovementStyle::Value' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_MakeMovementStyle, ReturnValue) == 0x000001, "Member 'FortKismetLibrary_MakeMovementStyle::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.MakeResourceType
// 0x0002 (0x0002 - 0x0000)
struct FortKismetLibrary_MakeResourceType final
{
public:
	EFortResourceType                             Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortResourceType                             ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_MakeResourceType) == 0x000001, "Wrong alignment on FortKismetLibrary_MakeResourceType");
static_assert(sizeof(FortKismetLibrary_MakeResourceType) == 0x000002, "Wrong size on FortKismetLibrary_MakeResourceType");
static_assert(offsetof(FortKismetLibrary_MakeResourceType, Value) == 0x000000, "Member 'FortKismetLibrary_MakeResourceType::Value' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_MakeResourceType, ReturnValue) == 0x000001, "Member 'FortKismetLibrary_MakeResourceType::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.MakeWeaponCoreAnimation
// 0x0002 (0x0002 - 0x0000)
struct FortKismetLibrary_MakeWeaponCoreAnimation final
{
public:
	EFortWeaponCoreAnimation                      Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortWeaponCoreAnimation                      ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_MakeWeaponCoreAnimation) == 0x000001, "Wrong alignment on FortKismetLibrary_MakeWeaponCoreAnimation");
static_assert(sizeof(FortKismetLibrary_MakeWeaponCoreAnimation) == 0x000002, "Wrong size on FortKismetLibrary_MakeWeaponCoreAnimation");
static_assert(offsetof(FortKismetLibrary_MakeWeaponCoreAnimation, Value) == 0x000000, "Member 'FortKismetLibrary_MakeWeaponCoreAnimation::Value' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_MakeWeaponCoreAnimation, ReturnValue) == 0x000001, "Member 'FortKismetLibrary_MakeWeaponCoreAnimation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.NormalizedAngleInDegreesToVector
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_NormalizedAngleInDegreesToVector final
{
public:
	float                                         A;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_NormalizedAngleInDegreesToVector) == 0x000004, "Wrong alignment on FortKismetLibrary_NormalizedAngleInDegreesToVector");
static_assert(sizeof(FortKismetLibrary_NormalizedAngleInDegreesToVector) == 0x000010, "Wrong size on FortKismetLibrary_NormalizedAngleInDegreesToVector");
static_assert(offsetof(FortKismetLibrary_NormalizedAngleInDegreesToVector, A) == 0x000000, "Member 'FortKismetLibrary_NormalizedAngleInDegreesToVector::A' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_NormalizedAngleInDegreesToVector, ReturnValue) == 0x000004, "Member 'FortKismetLibrary_NormalizedAngleInDegreesToVector::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.NotEqual_FFortDialogWaitingForLatentActionHandle
// 0x000C (0x000C - 0x0000)
struct FortKismetLibrary_NotEqual_FFortDialogWaitingForLatentActionHandle final
{
public:
	struct FFortDialogExternalLatentActionHandle  A;                                                 // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortDialogExternalLatentActionHandle  B;                                                 // 0x0004(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_NotEqual_FFortDialogWaitingForLatentActionHandle) == 0x000004, "Wrong alignment on FortKismetLibrary_NotEqual_FFortDialogWaitingForLatentActionHandle");
static_assert(sizeof(FortKismetLibrary_NotEqual_FFortDialogWaitingForLatentActionHandle) == 0x00000C, "Wrong size on FortKismetLibrary_NotEqual_FFortDialogWaitingForLatentActionHandle");
static_assert(offsetof(FortKismetLibrary_NotEqual_FFortDialogWaitingForLatentActionHandle, A) == 0x000000, "Member 'FortKismetLibrary_NotEqual_FFortDialogWaitingForLatentActionHandle::A' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_NotEqual_FFortDialogWaitingForLatentActionHandle, B) == 0x000004, "Member 'FortKismetLibrary_NotEqual_FFortDialogWaitingForLatentActionHandle::B' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_NotEqual_FFortDialogWaitingForLatentActionHandle, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_NotEqual_FFortDialogWaitingForLatentActionHandle::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.NotEqual_UniqueNetIdReplUniqueNetIdRepl
// 0x0058 (0x0058 - 0x0000)
struct FortKismetLibrary_NotEqual_UniqueNetIdReplUniqueNetIdRepl final
{
public:
	struct FUniqueNetIdRepl                       A;                                                 // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       B;                                                 // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_NotEqual_UniqueNetIdReplUniqueNetIdRepl) == 0x000008, "Wrong alignment on FortKismetLibrary_NotEqual_UniqueNetIdReplUniqueNetIdRepl");
static_assert(sizeof(FortKismetLibrary_NotEqual_UniqueNetIdReplUniqueNetIdRepl) == 0x000058, "Wrong size on FortKismetLibrary_NotEqual_UniqueNetIdReplUniqueNetIdRepl");
static_assert(offsetof(FortKismetLibrary_NotEqual_UniqueNetIdReplUniqueNetIdRepl, A) == 0x000000, "Member 'FortKismetLibrary_NotEqual_UniqueNetIdReplUniqueNetIdRepl::A' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_NotEqual_UniqueNetIdReplUniqueNetIdRepl, B) == 0x000028, "Member 'FortKismetLibrary_NotEqual_UniqueNetIdReplUniqueNetIdRepl::B' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_NotEqual_UniqueNetIdReplUniqueNetIdRepl, ReturnValue) == 0x000050, "Member 'FortKismetLibrary_NotEqual_UniqueNetIdReplUniqueNetIdRepl::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.OnSameTeam
// 0x0018 (0x0018 - 0x0000)
struct FortKismetLibrary_OnSameTeam final
{
public:
	const class AActor*                           ActorA;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           ActorB;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_OnSameTeam) == 0x000008, "Wrong alignment on FortKismetLibrary_OnSameTeam");
static_assert(sizeof(FortKismetLibrary_OnSameTeam) == 0x000018, "Wrong size on FortKismetLibrary_OnSameTeam");
static_assert(offsetof(FortKismetLibrary_OnSameTeam, ActorA) == 0x000000, "Member 'FortKismetLibrary_OnSameTeam::ActorA' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_OnSameTeam, ActorB) == 0x000008, "Member 'FortKismetLibrary_OnSameTeam::ActorB' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_OnSameTeam, ReturnValue) == 0x000010, "Member 'FortKismetLibrary_OnSameTeam::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.OpenTalkingHead
// 0x0048 (0x0048 - 0x0000)
struct FortKismetLibrary_OpenTalkingHead final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Image;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   SpeechText;                                        // 0x0028(0x0018)(Parm, NativeAccessSpecifierPublic)
	EFortAnnouncementDisplayPreference            DisplayPreference;                                 // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_OpenTalkingHead) == 0x000008, "Wrong alignment on FortKismetLibrary_OpenTalkingHead");
static_assert(sizeof(FortKismetLibrary_OpenTalkingHead) == 0x000048, "Wrong size on FortKismetLibrary_OpenTalkingHead");
static_assert(offsetof(FortKismetLibrary_OpenTalkingHead, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_OpenTalkingHead::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_OpenTalkingHead, Image) == 0x000008, "Member 'FortKismetLibrary_OpenTalkingHead::Image' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_OpenTalkingHead, Title) == 0x000010, "Member 'FortKismetLibrary_OpenTalkingHead::Title' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_OpenTalkingHead, SpeechText) == 0x000028, "Member 'FortKismetLibrary_OpenTalkingHead::SpeechText' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_OpenTalkingHead, DisplayPreference) == 0x000040, "Member 'FortKismetLibrary_OpenTalkingHead::DisplayPreference' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.PickLootDrops
// 0x0028 (0x0028 - 0x0000)
struct FortKismetLibrary_PickLootDrops final
{
public:
	TArray<struct FFortItemEntry>                 OutLootToDrop;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   TierGroupName;                                     // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorldLevel;                                        // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForcedLootTier;                                    // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_PickLootDrops) == 0x000008, "Wrong alignment on FortKismetLibrary_PickLootDrops");
static_assert(sizeof(FortKismetLibrary_PickLootDrops) == 0x000028, "Wrong size on FortKismetLibrary_PickLootDrops");
static_assert(offsetof(FortKismetLibrary_PickLootDrops, OutLootToDrop) == 0x000000, "Member 'FortKismetLibrary_PickLootDrops::OutLootToDrop' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_PickLootDrops, TierGroupName) == 0x000010, "Member 'FortKismetLibrary_PickLootDrops::TierGroupName' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_PickLootDrops, WorldLevel) == 0x000018, "Member 'FortKismetLibrary_PickLootDrops::WorldLevel' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_PickLootDrops, ForcedLootTier) == 0x00001C, "Member 'FortKismetLibrary_PickLootDrops::ForcedLootTier' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_PickLootDrops, ReturnValue) == 0x000020, "Member 'FortKismetLibrary_PickLootDrops::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.PlayLocalForceFeedbackAtLocation
// 0x0028 (0x0028 - 0x0000)
struct FortKismetLibrary_PlayLocalForceFeedbackAtLocation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackEffect*                   ForceFeedbackEffect;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_PlayLocalForceFeedbackAtLocation) == 0x000008, "Wrong alignment on FortKismetLibrary_PlayLocalForceFeedbackAtLocation");
static_assert(sizeof(FortKismetLibrary_PlayLocalForceFeedbackAtLocation) == 0x000028, "Wrong size on FortKismetLibrary_PlayLocalForceFeedbackAtLocation");
static_assert(offsetof(FortKismetLibrary_PlayLocalForceFeedbackAtLocation, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_PlayLocalForceFeedbackAtLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_PlayLocalForceFeedbackAtLocation, ForceFeedbackEffect) == 0x000008, "Member 'FortKismetLibrary_PlayLocalForceFeedbackAtLocation::ForceFeedbackEffect' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_PlayLocalForceFeedbackAtLocation, Location) == 0x000010, "Member 'FortKismetLibrary_PlayLocalForceFeedbackAtLocation::Location' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_PlayLocalForceFeedbackAtLocation, Radius) == 0x00001C, "Member 'FortKismetLibrary_PlayLocalForceFeedbackAtLocation::Radius' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_PlayLocalForceFeedbackAtLocation, Tag) == 0x000020, "Member 'FortKismetLibrary_PlayLocalForceFeedbackAtLocation::Tag' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.PlayLocalForceFeedbackAtLocationMulti
// 0x0038 (0x0038 - 0x0000)
struct FortKismetLibrary_PlayLocalForceFeedbackAtLocationMulti final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackEffect*                   NearForceFeedbackEffect;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackEffect*                   FarForceFeedbackEffect;                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0018(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InnerRadius;                                       // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterRadius;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Tag;                                               // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_PlayLocalForceFeedbackAtLocationMulti) == 0x000008, "Wrong alignment on FortKismetLibrary_PlayLocalForceFeedbackAtLocationMulti");
static_assert(sizeof(FortKismetLibrary_PlayLocalForceFeedbackAtLocationMulti) == 0x000038, "Wrong size on FortKismetLibrary_PlayLocalForceFeedbackAtLocationMulti");
static_assert(offsetof(FortKismetLibrary_PlayLocalForceFeedbackAtLocationMulti, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_PlayLocalForceFeedbackAtLocationMulti::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_PlayLocalForceFeedbackAtLocationMulti, NearForceFeedbackEffect) == 0x000008, "Member 'FortKismetLibrary_PlayLocalForceFeedbackAtLocationMulti::NearForceFeedbackEffect' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_PlayLocalForceFeedbackAtLocationMulti, FarForceFeedbackEffect) == 0x000010, "Member 'FortKismetLibrary_PlayLocalForceFeedbackAtLocationMulti::FarForceFeedbackEffect' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_PlayLocalForceFeedbackAtLocationMulti, Location) == 0x000018, "Member 'FortKismetLibrary_PlayLocalForceFeedbackAtLocationMulti::Location' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_PlayLocalForceFeedbackAtLocationMulti, InnerRadius) == 0x000024, "Member 'FortKismetLibrary_PlayLocalForceFeedbackAtLocationMulti::InnerRadius' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_PlayLocalForceFeedbackAtLocationMulti, OuterRadius) == 0x000028, "Member 'FortKismetLibrary_PlayLocalForceFeedbackAtLocationMulti::OuterRadius' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_PlayLocalForceFeedbackAtLocationMulti, Tag) == 0x000030, "Member 'FortKismetLibrary_PlayLocalForceFeedbackAtLocationMulti::Tag' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.PushOffHitLocation
// 0x0098 (0x0098 - 0x0000)
struct FortKismetLibrary_PushOffHitLocation final
{
public:
	class AActor*                                 RequestedBy;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0008(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x008C(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_PushOffHitLocation) == 0x000008, "Wrong alignment on FortKismetLibrary_PushOffHitLocation");
static_assert(sizeof(FortKismetLibrary_PushOffHitLocation) == 0x000098, "Wrong size on FortKismetLibrary_PushOffHitLocation");
static_assert(offsetof(FortKismetLibrary_PushOffHitLocation, RequestedBy) == 0x000000, "Member 'FortKismetLibrary_PushOffHitLocation::RequestedBy' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_PushOffHitLocation, Hit) == 0x000008, "Member 'FortKismetLibrary_PushOffHitLocation::Hit' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_PushOffHitLocation, Distance) == 0x000088, "Member 'FortKismetLibrary_PushOffHitLocation::Distance' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_PushOffHitLocation, ReturnValue) == 0x00008C, "Member 'FortKismetLibrary_PushOffHitLocation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.PushOffTransformByHitLocation
// 0x0100 (0x0100 - 0x0000)
struct FortKismetLibrary_PushOffTransformByHitLocation final
{
public:
	class AActor*                                 RequestedBy;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InTransform;                                       // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0040(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x00C0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0xC];                                       // 0x00C4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x00D0(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_PushOffTransformByHitLocation) == 0x000010, "Wrong alignment on FortKismetLibrary_PushOffTransformByHitLocation");
static_assert(sizeof(FortKismetLibrary_PushOffTransformByHitLocation) == 0x000100, "Wrong size on FortKismetLibrary_PushOffTransformByHitLocation");
static_assert(offsetof(FortKismetLibrary_PushOffTransformByHitLocation, RequestedBy) == 0x000000, "Member 'FortKismetLibrary_PushOffTransformByHitLocation::RequestedBy' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_PushOffTransformByHitLocation, InTransform) == 0x000010, "Member 'FortKismetLibrary_PushOffTransformByHitLocation::InTransform' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_PushOffTransformByHitLocation, Hit) == 0x000040, "Member 'FortKismetLibrary_PushOffTransformByHitLocation::Hit' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_PushOffTransformByHitLocation, Distance) == 0x0000C0, "Member 'FortKismetLibrary_PushOffTransformByHitLocation::Distance' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_PushOffTransformByHitLocation, ReturnValue) == 0x0000D0, "Member 'FortKismetLibrary_PushOffTransformByHitLocation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.RegisterDayPhaseHitCallback
// 0x0020 (0x0020 - 0x0000)
struct FortKismetLibrary_RegisterDayPhaseHitCallback final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FunctionName;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDayPhase                                 Phase;                                             // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecurring;                                        // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockTriggeringThisCycle;                         // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_RegisterDayPhaseHitCallback) == 0x000008, "Wrong alignment on FortKismetLibrary_RegisterDayPhaseHitCallback");
static_assert(sizeof(FortKismetLibrary_RegisterDayPhaseHitCallback) == 0x000020, "Wrong size on FortKismetLibrary_RegisterDayPhaseHitCallback");
static_assert(offsetof(FortKismetLibrary_RegisterDayPhaseHitCallback, Object) == 0x000000, "Member 'FortKismetLibrary_RegisterDayPhaseHitCallback::Object' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_RegisterDayPhaseHitCallback, FunctionName) == 0x000008, "Member 'FortKismetLibrary_RegisterDayPhaseHitCallback::FunctionName' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_RegisterDayPhaseHitCallback, Phase) == 0x000018, "Member 'FortKismetLibrary_RegisterDayPhaseHitCallback::Phase' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_RegisterDayPhaseHitCallback, bRecurring) == 0x000019, "Member 'FortKismetLibrary_RegisterDayPhaseHitCallback::bRecurring' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_RegisterDayPhaseHitCallback, bBlockTriggeringThisCycle) == 0x00001A, "Member 'FortKismetLibrary_RegisterDayPhaseHitCallback::bBlockTriggeringThisCycle' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.RegisterDayTimeHitCallback
// 0x0020 (0x0020 - 0x0000)
struct FortKismetLibrary_RegisterDayTimeHitCallback final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FunctionName;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeInHours;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecurring;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockTriggeringThisCycle;                         // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_RegisterDayTimeHitCallback) == 0x000008, "Wrong alignment on FortKismetLibrary_RegisterDayTimeHitCallback");
static_assert(sizeof(FortKismetLibrary_RegisterDayTimeHitCallback) == 0x000020, "Wrong size on FortKismetLibrary_RegisterDayTimeHitCallback");
static_assert(offsetof(FortKismetLibrary_RegisterDayTimeHitCallback, Object) == 0x000000, "Member 'FortKismetLibrary_RegisterDayTimeHitCallback::Object' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_RegisterDayTimeHitCallback, FunctionName) == 0x000008, "Member 'FortKismetLibrary_RegisterDayTimeHitCallback::FunctionName' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_RegisterDayTimeHitCallback, TimeInHours) == 0x000018, "Member 'FortKismetLibrary_RegisterDayTimeHitCallback::TimeInHours' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_RegisterDayTimeHitCallback, bRecurring) == 0x00001C, "Member 'FortKismetLibrary_RegisterDayTimeHitCallback::bRecurring' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_RegisterDayTimeHitCallback, bBlockTriggeringThisCycle) == 0x00001D, "Member 'FortKismetLibrary_RegisterDayTimeHitCallback::bBlockTriggeringThisCycle' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.RemoveActorsOfClassFromBuildingSMActorArray
// 0x0028 (0x0028 - 0x0000)
struct FortKismetLibrary_RemoveActorsOfClassFromBuildingSMActorArray final
{
public:
	TArray<class ABuildingSMActor*>               ArrayToRemoveClassFrom;                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TSubclassOf<class ABuildingSMActor>           ClassToRemove;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ABuildingSMActor*>               ArrayWithClassRemoved;                             // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_RemoveActorsOfClassFromBuildingSMActorArray) == 0x000008, "Wrong alignment on FortKismetLibrary_RemoveActorsOfClassFromBuildingSMActorArray");
static_assert(sizeof(FortKismetLibrary_RemoveActorsOfClassFromBuildingSMActorArray) == 0x000028, "Wrong size on FortKismetLibrary_RemoveActorsOfClassFromBuildingSMActorArray");
static_assert(offsetof(FortKismetLibrary_RemoveActorsOfClassFromBuildingSMActorArray, ArrayToRemoveClassFrom) == 0x000000, "Member 'FortKismetLibrary_RemoveActorsOfClassFromBuildingSMActorArray::ArrayToRemoveClassFrom' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_RemoveActorsOfClassFromBuildingSMActorArray, ClassToRemove) == 0x000010, "Member 'FortKismetLibrary_RemoveActorsOfClassFromBuildingSMActorArray::ClassToRemove' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_RemoveActorsOfClassFromBuildingSMActorArray, ArrayWithClassRemoved) == 0x000018, "Member 'FortKismetLibrary_RemoveActorsOfClassFromBuildingSMActorArray::ArrayWithClassRemoved' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.SelectMaterialInstance
// 0x0020 (0x0020 - 0x0000)
struct FortKismetLibrary_SelectMaterialInstance final
{
public:
	class UMaterialInstance*                      A;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      B;                                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelectA;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_SelectMaterialInstance) == 0x000008, "Wrong alignment on FortKismetLibrary_SelectMaterialInstance");
static_assert(sizeof(FortKismetLibrary_SelectMaterialInstance) == 0x000020, "Wrong size on FortKismetLibrary_SelectMaterialInstance");
static_assert(offsetof(FortKismetLibrary_SelectMaterialInstance, A) == 0x000000, "Member 'FortKismetLibrary_SelectMaterialInstance::A' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SelectMaterialInstance, B) == 0x000008, "Member 'FortKismetLibrary_SelectMaterialInstance::B' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SelectMaterialInstance, bSelectA) == 0x000010, "Member 'FortKismetLibrary_SelectMaterialInstance::bSelectA' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SelectMaterialInstance, ReturnValue) == 0x000018, "Member 'FortKismetLibrary_SelectMaterialInstance::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.SetCanBeDamaged
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_SetCanBeDamaged final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanBeDamaged;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_SetCanBeDamaged) == 0x000008, "Wrong alignment on FortKismetLibrary_SetCanBeDamaged");
static_assert(sizeof(FortKismetLibrary_SetCanBeDamaged) == 0x000010, "Wrong size on FortKismetLibrary_SetCanBeDamaged");
static_assert(offsetof(FortKismetLibrary_SetCanBeDamaged, Actor) == 0x000000, "Member 'FortKismetLibrary_SetCanBeDamaged::Actor' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SetCanBeDamaged, bCanBeDamaged) == 0x000008, "Member 'FortKismetLibrary_SetCanBeDamaged::bCanBeDamaged' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.SetTimeOfDay
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_SetTimeOfDay final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeOfDay;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_SetTimeOfDay) == 0x000008, "Wrong alignment on FortKismetLibrary_SetTimeOfDay");
static_assert(sizeof(FortKismetLibrary_SetTimeOfDay) == 0x000010, "Wrong size on FortKismetLibrary_SetTimeOfDay");
static_assert(offsetof(FortKismetLibrary_SetTimeOfDay, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_SetTimeOfDay::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SetTimeOfDay, TimeOfDay) == 0x000008, "Member 'FortKismetLibrary_SetTimeOfDay::TimeOfDay' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.SetTimeOfDaySpeed
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_SetTimeOfDaySpeed final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeOfDaySpeedFactor;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_SetTimeOfDaySpeed) == 0x000008, "Wrong alignment on FortKismetLibrary_SetTimeOfDaySpeed");
static_assert(sizeof(FortKismetLibrary_SetTimeOfDaySpeed) == 0x000010, "Wrong size on FortKismetLibrary_SetTimeOfDaySpeed");
static_assert(offsetof(FortKismetLibrary_SetTimeOfDaySpeed, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_SetTimeOfDaySpeed::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SetTimeOfDaySpeed, TimeOfDaySpeedFactor) == 0x000008, "Member 'FortKismetLibrary_SetTimeOfDaySpeed::TimeOfDaySpeedFactor' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.ShouldHideTutorialWidget
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_ShouldHideTutorialWidget final
{
public:
	class FName                                   WidgetName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_ShouldHideTutorialWidget) == 0x000004, "Wrong alignment on FortKismetLibrary_ShouldHideTutorialWidget");
static_assert(sizeof(FortKismetLibrary_ShouldHideTutorialWidget) == 0x000010, "Wrong size on FortKismetLibrary_ShouldHideTutorialWidget");
static_assert(offsetof(FortKismetLibrary_ShouldHideTutorialWidget, WidgetName) == 0x000000, "Member 'FortKismetLibrary_ShouldHideTutorialWidget::WidgetName' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_ShouldHideTutorialWidget, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_ShouldHideTutorialWidget::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.SpawnAreaOfEffectCloud
// 0x0130 (0x0130 - 0x0000)
struct FortKismetLibrary_SpawnAreaOfEffectCloud final
{
public:
	TSubclassOf<class AFortAreaOfEffectCloud>     AreaOfEffectClass;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 RequestedBy;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation;                                     // 0x0010(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnRotation;                                     // 0x001C(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortGameplayEffectContainerSpec       EffectContainerSpecToApplyOnHit;                   // 0x0028(0x0080)(Parm, NativeAccessSpecifierPublic)
	struct FFortGameplayEffectContainerSpec       EffectContainerSpecToApplyOnExplode;               // 0x00A8(0x0080)(Parm, NativeAccessSpecifierPublic)
	class AFortAreaOfEffectCloud*                 ReturnValue;                                       // 0x0128(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_SpawnAreaOfEffectCloud) == 0x000008, "Wrong alignment on FortKismetLibrary_SpawnAreaOfEffectCloud");
static_assert(sizeof(FortKismetLibrary_SpawnAreaOfEffectCloud) == 0x000130, "Wrong size on FortKismetLibrary_SpawnAreaOfEffectCloud");
static_assert(offsetof(FortKismetLibrary_SpawnAreaOfEffectCloud, AreaOfEffectClass) == 0x000000, "Member 'FortKismetLibrary_SpawnAreaOfEffectCloud::AreaOfEffectClass' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnAreaOfEffectCloud, RequestedBy) == 0x000008, "Member 'FortKismetLibrary_SpawnAreaOfEffectCloud::RequestedBy' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnAreaOfEffectCloud, SpawnLocation) == 0x000010, "Member 'FortKismetLibrary_SpawnAreaOfEffectCloud::SpawnLocation' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnAreaOfEffectCloud, SpawnRotation) == 0x00001C, "Member 'FortKismetLibrary_SpawnAreaOfEffectCloud::SpawnRotation' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnAreaOfEffectCloud, EffectContainerSpecToApplyOnHit) == 0x000028, "Member 'FortKismetLibrary_SpawnAreaOfEffectCloud::EffectContainerSpecToApplyOnHit' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnAreaOfEffectCloud, EffectContainerSpecToApplyOnExplode) == 0x0000A8, "Member 'FortKismetLibrary_SpawnAreaOfEffectCloud::EffectContainerSpecToApplyOnExplode' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnAreaOfEffectCloud, ReturnValue) == 0x000128, "Member 'FortKismetLibrary_SpawnAreaOfEffectCloud::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.SpawnBuildingGameplayActor
// 0x0050 (0x0050 - 0x0000)
struct FortKismetLibrary_SpawnBuildingGameplayActor final
{
public:
	TSubclassOf<class ABuildingGameplayActor>     BGAClass;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AFortPawn*                              Instigator;                                        // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABuildingGameplayActor*                 ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_SpawnBuildingGameplayActor) == 0x000010, "Wrong alignment on FortKismetLibrary_SpawnBuildingGameplayActor");
static_assert(sizeof(FortKismetLibrary_SpawnBuildingGameplayActor) == 0x000050, "Wrong size on FortKismetLibrary_SpawnBuildingGameplayActor");
static_assert(offsetof(FortKismetLibrary_SpawnBuildingGameplayActor, BGAClass) == 0x000000, "Member 'FortKismetLibrary_SpawnBuildingGameplayActor::BGAClass' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnBuildingGameplayActor, Transform) == 0x000010, "Member 'FortKismetLibrary_SpawnBuildingGameplayActor::Transform' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnBuildingGameplayActor, Instigator) == 0x000040, "Member 'FortKismetLibrary_SpawnBuildingGameplayActor::Instigator' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnBuildingGameplayActor, ReturnValue) == 0x000048, "Member 'FortKismetLibrary_SpawnBuildingGameplayActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.SpawnProjectile
// 0x0160 (0x0160 - 0x0000)
struct FortKismetLibrary_SpawnProjectile final
{
public:
	TSubclassOf<class AFortProjectileBase>        ProjectileClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 RequestedBy;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation;                                     // 0x0010(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnRotation;                                     // 0x001C(0x000C)(ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnDirection;                                    // 0x0028(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortGameplayEffectContainerSpec       EffectContainerSpecToApplyOnHit;                   // 0x0038(0x0080)(Parm, NativeAccessSpecifierPublic)
	struct FFortGameplayEffectContainerSpec       EffectContainerSpecToApplyOnExplode;               // 0x00B8(0x0080)(Parm, NativeAccessSpecifierPublic)
	bool                                          bUseDefaultPhysics;                                // 0x0138(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 HomingTarget;                                      // 0x0140(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialSpeed;                                      // 0x0148(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityScale;                                      // 0x014C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChargePercent;                                     // 0x0150(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortProjectileBase*                    ReturnValue;                                       // 0x0158(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_SpawnProjectile) == 0x000008, "Wrong alignment on FortKismetLibrary_SpawnProjectile");
static_assert(sizeof(FortKismetLibrary_SpawnProjectile) == 0x000160, "Wrong size on FortKismetLibrary_SpawnProjectile");
static_assert(offsetof(FortKismetLibrary_SpawnProjectile, ProjectileClass) == 0x000000, "Member 'FortKismetLibrary_SpawnProjectile::ProjectileClass' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnProjectile, RequestedBy) == 0x000008, "Member 'FortKismetLibrary_SpawnProjectile::RequestedBy' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnProjectile, SpawnLocation) == 0x000010, "Member 'FortKismetLibrary_SpawnProjectile::SpawnLocation' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnProjectile, SpawnRotation) == 0x00001C, "Member 'FortKismetLibrary_SpawnProjectile::SpawnRotation' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnProjectile, SpawnDirection) == 0x000028, "Member 'FortKismetLibrary_SpawnProjectile::SpawnDirection' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnProjectile, EffectContainerSpecToApplyOnHit) == 0x000038, "Member 'FortKismetLibrary_SpawnProjectile::EffectContainerSpecToApplyOnHit' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnProjectile, EffectContainerSpecToApplyOnExplode) == 0x0000B8, "Member 'FortKismetLibrary_SpawnProjectile::EffectContainerSpecToApplyOnExplode' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnProjectile, bUseDefaultPhysics) == 0x000138, "Member 'FortKismetLibrary_SpawnProjectile::bUseDefaultPhysics' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnProjectile, HomingTarget) == 0x000140, "Member 'FortKismetLibrary_SpawnProjectile::HomingTarget' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnProjectile, InitialSpeed) == 0x000148, "Member 'FortKismetLibrary_SpawnProjectile::InitialSpeed' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnProjectile, GravityScale) == 0x00014C, "Member 'FortKismetLibrary_SpawnProjectile::GravityScale' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnProjectile, ChargePercent) == 0x000150, "Member 'FortKismetLibrary_SpawnProjectile::ChargePercent' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnProjectile, ReturnValue) == 0x000158, "Member 'FortKismetLibrary_SpawnProjectile::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.SpawnTracerFromPool
// 0x0038 (0x0038 - 0x0000)
struct FortKismetLibrary_SpawnTracerFromPool final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AFortTracerBase>            TracerClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0010(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Destination;                                       // 0x001C(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPawn*                              Instigator;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortTracerBase*                        ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_SpawnTracerFromPool) == 0x000008, "Wrong alignment on FortKismetLibrary_SpawnTracerFromPool");
static_assert(sizeof(FortKismetLibrary_SpawnTracerFromPool) == 0x000038, "Wrong size on FortKismetLibrary_SpawnTracerFromPool");
static_assert(offsetof(FortKismetLibrary_SpawnTracerFromPool, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_SpawnTracerFromPool::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnTracerFromPool, TracerClass) == 0x000008, "Member 'FortKismetLibrary_SpawnTracerFromPool::TracerClass' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnTracerFromPool, Origin) == 0x000010, "Member 'FortKismetLibrary_SpawnTracerFromPool::Origin' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnTracerFromPool, Destination) == 0x00001C, "Member 'FortKismetLibrary_SpawnTracerFromPool::Destination' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnTracerFromPool, Instigator) == 0x000028, "Member 'FortKismetLibrary_SpawnTracerFromPool::Instigator' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnTracerFromPool, ReturnValue) == 0x000030, "Member 'FortKismetLibrary_SpawnTracerFromPool::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.SwitchHeroType
// 0x0020 (0x0020 - 0x0000)
struct FortKismetLibrary_SwitchHeroType final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewHeroName;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_SwitchHeroType) == 0x000008, "Wrong alignment on FortKismetLibrary_SwitchHeroType");
static_assert(sizeof(FortKismetLibrary_SwitchHeroType) == 0x000020, "Wrong size on FortKismetLibrary_SwitchHeroType");
static_assert(offsetof(FortKismetLibrary_SwitchHeroType, FortPC) == 0x000000, "Member 'FortKismetLibrary_SwitchHeroType::FortPC' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SwitchHeroType, NewHeroName) == 0x000008, "Member 'FortKismetLibrary_SwitchHeroType::NewHeroName' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SwitchHeroType, ReturnValue) == 0x000018, "Member 'FortKismetLibrary_SwitchHeroType::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.TriggerFeedbackEvent
// 0x0038 (0x0038 - 0x0000)
struct FortKismetLibrary_TriggerFeedbackEvent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortFeedbackHandle                    EventHandle;                                       // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class AFortPawn*                              InstigatorPawn;                                    // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPawn*                              Recipient;                                         // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverriddenDelay;                                   // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverriddenQueuing;                                // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowReplication;                                 // 0x0035(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_TriggerFeedbackEvent) == 0x000008, "Wrong alignment on FortKismetLibrary_TriggerFeedbackEvent");
static_assert(sizeof(FortKismetLibrary_TriggerFeedbackEvent) == 0x000038, "Wrong size on FortKismetLibrary_TriggerFeedbackEvent");
static_assert(offsetof(FortKismetLibrary_TriggerFeedbackEvent, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_TriggerFeedbackEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_TriggerFeedbackEvent, EventHandle) == 0x000008, "Member 'FortKismetLibrary_TriggerFeedbackEvent::EventHandle' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_TriggerFeedbackEvent, InstigatorPawn) == 0x000020, "Member 'FortKismetLibrary_TriggerFeedbackEvent::InstigatorPawn' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_TriggerFeedbackEvent, Recipient) == 0x000028, "Member 'FortKismetLibrary_TriggerFeedbackEvent::Recipient' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_TriggerFeedbackEvent, OverriddenDelay) == 0x000030, "Member 'FortKismetLibrary_TriggerFeedbackEvent::OverriddenDelay' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_TriggerFeedbackEvent, bOverriddenQueuing) == 0x000034, "Member 'FortKismetLibrary_TriggerFeedbackEvent::bOverriddenQueuing' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_TriggerFeedbackEvent, bAllowReplication) == 0x000035, "Member 'FortKismetLibrary_TriggerFeedbackEvent::bAllowReplication' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.UnequipFortAbilitySet
// 0x0028 (0x0028 - 0x0000)
struct FortKismetLibrary_UnequipFortAbilitySet final
{
public:
	struct FFortAbilitySetHandle                  AbilitySetHandle;                                  // 0x0000(0x0028)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_UnequipFortAbilitySet) == 0x000008, "Wrong alignment on FortKismetLibrary_UnequipFortAbilitySet");
static_assert(sizeof(FortKismetLibrary_UnequipFortAbilitySet) == 0x000028, "Wrong size on FortKismetLibrary_UnequipFortAbilitySet");
static_assert(offsetof(FortKismetLibrary_UnequipFortAbilitySet, AbilitySetHandle) == 0x000000, "Member 'FortKismetLibrary_UnequipFortAbilitySet::AbilitySetHandle' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.UnhideAllTutorialWidgets
// 0x0008 (0x0008 - 0x0000)
struct FortKismetLibrary_UnhideAllTutorialWidgets final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_UnhideAllTutorialWidgets) == 0x000008, "Wrong alignment on FortKismetLibrary_UnhideAllTutorialWidgets");
static_assert(sizeof(FortKismetLibrary_UnhideAllTutorialWidgets) == 0x000008, "Wrong size on FortKismetLibrary_UnhideAllTutorialWidgets");
static_assert(offsetof(FortKismetLibrary_UnhideAllTutorialWidgets, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_UnhideAllTutorialWidgets::WorldContextObject' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.UnhideTutorialWidget
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_UnhideTutorialWidget final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WidgetName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_UnhideTutorialWidget) == 0x000008, "Wrong alignment on FortKismetLibrary_UnhideTutorialWidget");
static_assert(sizeof(FortKismetLibrary_UnhideTutorialWidget) == 0x000010, "Wrong size on FortKismetLibrary_UnhideTutorialWidget");
static_assert(offsetof(FortKismetLibrary_UnhideTutorialWidget, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_UnhideTutorialWidget::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_UnhideTutorialWidget, WidgetName) == 0x000008, "Member 'FortKismetLibrary_UnhideTutorialWidget::WidgetName' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.VectorToNormalizedAngleInDegrees
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_VectorToNormalizedAngleInDegrees final
{
public:
	struct FVector                                V;                                                 // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_VectorToNormalizedAngleInDegrees) == 0x000004, "Wrong alignment on FortKismetLibrary_VectorToNormalizedAngleInDegrees");
static_assert(sizeof(FortKismetLibrary_VectorToNormalizedAngleInDegrees) == 0x000010, "Wrong size on FortKismetLibrary_VectorToNormalizedAngleInDegrees");
static_assert(offsetof(FortKismetLibrary_VectorToNormalizedAngleInDegrees, V) == 0x000000, "Member 'FortKismetLibrary_VectorToNormalizedAngleInDegrees::V' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_VectorToNormalizedAngleInDegrees, ReturnValue) == 0x00000C, "Member 'FortKismetLibrary_VectorToNormalizedAngleInDegrees::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortLobbyBeaconClientRM.ServerUpdateReadyStatus
// 0x0001 (0x0001 - 0x0000)
struct FortLobbyBeaconClientRM_ServerUpdateReadyStatus final
{
public:
	bool                                          bIsReady;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLobbyBeaconClientRM_ServerUpdateReadyStatus) == 0x000001, "Wrong alignment on FortLobbyBeaconClientRM_ServerUpdateReadyStatus");
static_assert(sizeof(FortLobbyBeaconClientRM_ServerUpdateReadyStatus) == 0x000001, "Wrong size on FortLobbyBeaconClientRM_ServerUpdateReadyStatus");
static_assert(offsetof(FortLobbyBeaconClientRM_ServerUpdateReadyStatus, bIsReady) == 0x000000, "Member 'FortLobbyBeaconClientRM_ServerUpdateReadyStatus::bIsReady' has a wrong offset!");

// Function FortniteGame.FortLobbyBeaconClientRM.SetLocalReadyStatus
// 0x0001 (0x0001 - 0x0000)
struct FortLobbyBeaconClientRM_SetLocalReadyStatus final
{
public:
	bool                                          bIsReady;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLobbyBeaconClientRM_SetLocalReadyStatus) == 0x000001, "Wrong alignment on FortLobbyBeaconClientRM_SetLocalReadyStatus");
static_assert(sizeof(FortLobbyBeaconClientRM_SetLocalReadyStatus) == 0x000001, "Wrong size on FortLobbyBeaconClientRM_SetLocalReadyStatus");
static_assert(offsetof(FortLobbyBeaconClientRM_SetLocalReadyStatus, bIsReady) == 0x000000, "Member 'FortLobbyBeaconClientRM_SetLocalReadyStatus::bIsReady' has a wrong offset!");

// Function FortniteGame.FortLobbyBeaconClientRM.ClientBroadcastLobbyPlayerPadTop
// 0x0030 (0x0030 - 0x0000)
struct FortLobbyBeaconClientRM_ClientBroadcastLobbyPlayerPadTop final
{
public:
	struct FUniqueNetIdRepl                       ReadiedPlayer;                                     // 0x0000(0x0028)(ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReadiedUp;                                      // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortLobbyBeaconClientRM_ClientBroadcastLobbyPlayerPadTop) == 0x000008, "Wrong alignment on FortLobbyBeaconClientRM_ClientBroadcastLobbyPlayerPadTop");
static_assert(sizeof(FortLobbyBeaconClientRM_ClientBroadcastLobbyPlayerPadTop) == 0x000030, "Wrong size on FortLobbyBeaconClientRM_ClientBroadcastLobbyPlayerPadTop");
static_assert(offsetof(FortLobbyBeaconClientRM_ClientBroadcastLobbyPlayerPadTop, ReadiedPlayer) == 0x000000, "Member 'FortLobbyBeaconClientRM_ClientBroadcastLobbyPlayerPadTop::ReadiedPlayer' has a wrong offset!");
static_assert(offsetof(FortLobbyBeaconClientRM_ClientBroadcastLobbyPlayerPadTop, bIsReadiedUp) == 0x000028, "Member 'FortLobbyBeaconClientRM_ClientBroadcastLobbyPlayerPadTop::bIsReadiedUp' has a wrong offset!");

// Function FortniteGame.FortWeaponTooltip.GetNumericValue
// 0x0028 (0x0028 - 0x0000)
struct FortWeaponTooltip_GetNumericValue final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVal;                                            // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortWeaponTooltip_GetNumericValue) == 0x000008, "Wrong alignment on FortWeaponTooltip_GetNumericValue");
static_assert(sizeof(FortWeaponTooltip_GetNumericValue) == 0x000028, "Wrong size on FortWeaponTooltip_GetNumericValue");
static_assert(offsetof(FortWeaponTooltip_GetNumericValue, ObjectToDescribe) == 0x000000, "Member 'FortWeaponTooltip_GetNumericValue::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortWeaponTooltip_GetNumericValue, Tag) == 0x000008, "Member 'FortWeaponTooltip_GetNumericValue::Tag' has a wrong offset!");
static_assert(offsetof(FortWeaponTooltip_GetNumericValue, Context) == 0x000010, "Member 'FortWeaponTooltip_GetNumericValue::Context' has a wrong offset!");
static_assert(offsetof(FortWeaponTooltip_GetNumericValue, Token) == 0x000018, "Member 'FortWeaponTooltip_GetNumericValue::Token' has a wrong offset!");
static_assert(offsetof(FortWeaponTooltip_GetNumericValue, OutVal) == 0x000020, "Member 'FortWeaponTooltip_GetNumericValue::OutVal' has a wrong offset!");
static_assert(offsetof(FortWeaponTooltip_GetNumericValue, ReturnValue) == 0x000024, "Member 'FortWeaponTooltip_GetNumericValue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponTooltip.GetTextForToken
// 0x0040 (0x0040 - 0x0000)
struct FortWeaponTooltip_GetTextForToken final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortWeaponTooltip_GetTextForToken) == 0x000008, "Wrong alignment on FortWeaponTooltip_GetTextForToken");
static_assert(sizeof(FortWeaponTooltip_GetTextForToken) == 0x000040, "Wrong size on FortWeaponTooltip_GetTextForToken");
static_assert(offsetof(FortWeaponTooltip_GetTextForToken, ObjectToDescribe) == 0x000000, "Member 'FortWeaponTooltip_GetTextForToken::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortWeaponTooltip_GetTextForToken, Tag) == 0x000008, "Member 'FortWeaponTooltip_GetTextForToken::Tag' has a wrong offset!");
static_assert(offsetof(FortWeaponTooltip_GetTextForToken, Context) == 0x000010, "Member 'FortWeaponTooltip_GetTextForToken::Context' has a wrong offset!");
static_assert(offsetof(FortWeaponTooltip_GetTextForToken, Token) == 0x000018, "Member 'FortWeaponTooltip_GetTextForToken::Token' has a wrong offset!");
static_assert(offsetof(FortWeaponTooltip_GetTextForToken, OutText) == 0x000020, "Member 'FortWeaponTooltip_GetTextForToken::OutText' has a wrong offset!");
static_assert(offsetof(FortWeaponTooltip_GetTextForToken, ReturnValue) == 0x000038, "Member 'FortWeaponTooltip_GetTextForToken::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponTooltip.GetTokenizedDescriptionText
// 0x0030 (0x0030 - 0x0000)
struct FortWeaponTooltip_GetTokenizedDescriptionText final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           OutDescription;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortWeaponTooltip_GetTokenizedDescriptionText) == 0x000008, "Wrong alignment on FortWeaponTooltip_GetTokenizedDescriptionText");
static_assert(sizeof(FortWeaponTooltip_GetTokenizedDescriptionText) == 0x000030, "Wrong size on FortWeaponTooltip_GetTokenizedDescriptionText");
static_assert(offsetof(FortWeaponTooltip_GetTokenizedDescriptionText, ObjectToDescribe) == 0x000000, "Member 'FortWeaponTooltip_GetTokenizedDescriptionText::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortWeaponTooltip_GetTokenizedDescriptionText, Tag) == 0x000008, "Member 'FortWeaponTooltip_GetTokenizedDescriptionText::Tag' has a wrong offset!");
static_assert(offsetof(FortWeaponTooltip_GetTokenizedDescriptionText, Context) == 0x000010, "Member 'FortWeaponTooltip_GetTokenizedDescriptionText::Context' has a wrong offset!");
static_assert(offsetof(FortWeaponTooltip_GetTokenizedDescriptionText, OutDescription) == 0x000018, "Member 'FortWeaponTooltip_GetTokenizedDescriptionText::OutDescription' has a wrong offset!");
static_assert(offsetof(FortWeaponTooltip_GetTokenizedDescriptionText, ReturnValue) == 0x000028, "Member 'FortWeaponTooltip_GetTokenizedDescriptionText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMatchmakingContext.GetLobbyWaitForPlayersTimeRemaining
// 0x0004 (0x0004 - 0x0000)
struct FortMatchmakingContext_GetLobbyWaitForPlayersTimeRemaining final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingContext_GetLobbyWaitForPlayersTimeRemaining) == 0x000004, "Wrong alignment on FortMatchmakingContext_GetLobbyWaitForPlayersTimeRemaining");
static_assert(sizeof(FortMatchmakingContext_GetLobbyWaitForPlayersTimeRemaining) == 0x000004, "Wrong size on FortMatchmakingContext_GetLobbyWaitForPlayersTimeRemaining");
static_assert(offsetof(FortMatchmakingContext_GetLobbyWaitForPlayersTimeRemaining, ReturnValue) == 0x000000, "Member 'FortMatchmakingContext_GetLobbyWaitForPlayersTimeRemaining::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMatchmakingContext.IsJoinableGameAvailable
// 0x0001 (0x0001 - 0x0000)
struct FortMatchmakingContext_IsJoinableGameAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingContext_IsJoinableGameAvailable) == 0x000001, "Wrong alignment on FortMatchmakingContext_IsJoinableGameAvailable");
static_assert(sizeof(FortMatchmakingContext_IsJoinableGameAvailable) == 0x000001, "Wrong size on FortMatchmakingContext_IsJoinableGameAvailable");
static_assert(offsetof(FortMatchmakingContext_IsJoinableGameAvailable, ReturnValue) == 0x000000, "Member 'FortMatchmakingContext_IsJoinableGameAvailable::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMatchmakingContext.IsWorldRecordLoaded
// 0x0001 (0x0001 - 0x0000)
struct FortMatchmakingContext_IsWorldRecordLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingContext_IsWorldRecordLoaded) == 0x000001, "Wrong alignment on FortMatchmakingContext_IsWorldRecordLoaded");
static_assert(sizeof(FortMatchmakingContext_IsWorldRecordLoaded) == 0x000001, "Wrong size on FortMatchmakingContext_IsWorldRecordLoaded");
static_assert(offsetof(FortMatchmakingContext_IsWorldRecordLoaded, ReturnValue) == 0x000000, "Member 'FortMatchmakingContext_IsWorldRecordLoaded::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMatchmakingContext.JoinFromLobby
// 0x0001 (0x0001 - 0x0000)
struct FortMatchmakingContext_JoinFromLobby final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingContext_JoinFromLobby) == 0x000001, "Wrong alignment on FortMatchmakingContext_JoinFromLobby");
static_assert(sizeof(FortMatchmakingContext_JoinFromLobby) == 0x000001, "Wrong size on FortMatchmakingContext_JoinFromLobby");
static_assert(offsetof(FortMatchmakingContext_JoinFromLobby, ReturnValue) == 0x000000, "Member 'FortMatchmakingContext_JoinFromLobby::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMatchmakingContext.NeedToCheckRejoinStatus
// 0x0001 (0x0001 - 0x0000)
struct FortMatchmakingContext_NeedToCheckRejoinStatus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingContext_NeedToCheckRejoinStatus) == 0x000001, "Wrong alignment on FortMatchmakingContext_NeedToCheckRejoinStatus");
static_assert(sizeof(FortMatchmakingContext_NeedToCheckRejoinStatus) == 0x000001, "Wrong size on FortMatchmakingContext_NeedToCheckRejoinStatus");
static_assert(offsetof(FortMatchmakingContext_NeedToCheckRejoinStatus, ReturnValue) == 0x000000, "Member 'FortMatchmakingContext_NeedToCheckRejoinStatus::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMatchmakingContext.SetCustomMatchmakingKey
// 0x0010 (0x0010 - 0x0000)
struct FortMatchmakingContext_SetCustomMatchmakingKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingContext_SetCustomMatchmakingKey) == 0x000008, "Wrong alignment on FortMatchmakingContext_SetCustomMatchmakingKey");
static_assert(sizeof(FortMatchmakingContext_SetCustomMatchmakingKey) == 0x000010, "Wrong size on FortMatchmakingContext_SetCustomMatchmakingKey");
static_assert(offsetof(FortMatchmakingContext_SetCustomMatchmakingKey, Key) == 0x000000, "Member 'FortMatchmakingContext_SetCustomMatchmakingKey::Key' has a wrong offset!");

// Function FortniteGame.FortMatchmakingContext.StartCriticalMission
// 0x0008 (0x0008 - 0x0000)
struct FortMatchmakingContext_StartCriticalMission final
{
public:
	float                                         MinMissionDifficulty;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxMissionDifficulty;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingContext_StartCriticalMission) == 0x000004, "Wrong alignment on FortMatchmakingContext_StartCriticalMission");
static_assert(sizeof(FortMatchmakingContext_StartCriticalMission) == 0x000008, "Wrong size on FortMatchmakingContext_StartCriticalMission");
static_assert(offsetof(FortMatchmakingContext_StartCriticalMission, MinMissionDifficulty) == 0x000000, "Member 'FortMatchmakingContext_StartCriticalMission::MinMissionDifficulty' has a wrong offset!");
static_assert(offsetof(FortMatchmakingContext_StartCriticalMission, MaxMissionDifficulty) == 0x000004, "Member 'FortMatchmakingContext_StartCriticalMission::MaxMissionDifficulty' has a wrong offset!");

// Function FortniteGame.FortMatchmakingContext.StartOnboardingMission
// 0x0001 (0x0001 - 0x0000)
struct FortMatchmakingContext_StartOnboardingMission final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingContext_StartOnboardingMission) == 0x000001, "Wrong alignment on FortMatchmakingContext_StartOnboardingMission");
static_assert(sizeof(FortMatchmakingContext_StartOnboardingMission) == 0x000001, "Wrong size on FortMatchmakingContext_StartOnboardingMission");
static_assert(offsetof(FortMatchmakingContext_StartOnboardingMission, ReturnValue) == 0x000000, "Member 'FortMatchmakingContext_StartOnboardingMission::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMatchmakingContext.StartQuickPlay
// 0x0008 (0x0008 - 0x0000)
struct FortMatchmakingContext_StartQuickPlay final
{
public:
	float                                         MinMissionDifficulty;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxMissionDifficulty;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingContext_StartQuickPlay) == 0x000004, "Wrong alignment on FortMatchmakingContext_StartQuickPlay");
static_assert(sizeof(FortMatchmakingContext_StartQuickPlay) == 0x000008, "Wrong size on FortMatchmakingContext_StartQuickPlay");
static_assert(offsetof(FortMatchmakingContext_StartQuickPlay, MinMissionDifficulty) == 0x000000, "Member 'FortMatchmakingContext_StartQuickPlay::MinMissionDifficulty' has a wrong offset!");
static_assert(offsetof(FortMatchmakingContext_StartQuickPlay, MaxMissionDifficulty) == 0x000004, "Member 'FortMatchmakingContext_StartQuickPlay::MaxMissionDifficulty' has a wrong offset!");

// Function FortniteGame.FortMatchmakingContext.GetCustomMatchmakingKey
// 0x0010 (0x0010 - 0x0000)
struct FortMatchmakingContext_GetCustomMatchmakingKey final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingContext_GetCustomMatchmakingKey) == 0x000008, "Wrong alignment on FortMatchmakingContext_GetCustomMatchmakingKey");
static_assert(sizeof(FortMatchmakingContext_GetCustomMatchmakingKey) == 0x000010, "Wrong size on FortMatchmakingContext_GetCustomMatchmakingKey");
static_assert(offsetof(FortMatchmakingContext_GetCustomMatchmakingKey, ReturnValue) == 0x000000, "Member 'FortMatchmakingContext_GetCustomMatchmakingKey::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMatchmakingContext.GetLobbyBeaconClient
// 0x0008 (0x0008 - 0x0000)
struct FortMatchmakingContext_GetLobbyBeaconClient final
{
public:
	class AFortLobbyBeaconClient*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingContext_GetLobbyBeaconClient) == 0x000008, "Wrong alignment on FortMatchmakingContext_GetLobbyBeaconClient");
static_assert(sizeof(FortMatchmakingContext_GetLobbyBeaconClient) == 0x000008, "Wrong size on FortMatchmakingContext_GetLobbyBeaconClient");
static_assert(offsetof(FortMatchmakingContext_GetLobbyBeaconClient, ReturnValue) == 0x000000, "Member 'FortMatchmakingContext_GetLobbyBeaconClient::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMatchmakingContext.IsConnectedToGame
// 0x0001 (0x0001 - 0x0000)
struct FortMatchmakingContext_IsConnectedToGame final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingContext_IsConnectedToGame) == 0x000001, "Wrong alignment on FortMatchmakingContext_IsConnectedToGame");
static_assert(sizeof(FortMatchmakingContext_IsConnectedToGame) == 0x000001, "Wrong size on FortMatchmakingContext_IsConnectedToGame");
static_assert(offsetof(FortMatchmakingContext_IsConnectedToGame, ReturnValue) == 0x000000, "Member 'FortMatchmakingContext_IsConnectedToGame::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMatchmakingContext.IsCustomMatchmakingKeyEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortMatchmakingContext_IsCustomMatchmakingKeyEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingContext_IsCustomMatchmakingKeyEnabled) == 0x000001, "Wrong alignment on FortMatchmakingContext_IsCustomMatchmakingKeyEnabled");
static_assert(sizeof(FortMatchmakingContext_IsCustomMatchmakingKeyEnabled) == 0x000001, "Wrong size on FortMatchmakingContext_IsCustomMatchmakingKeyEnabled");
static_assert(offsetof(FortMatchmakingContext_IsCustomMatchmakingKeyEnabled, ReturnValue) == 0x000000, "Member 'FortMatchmakingContext_IsCustomMatchmakingKeyEnabled::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMatchmakingContext.IsInLobby
// 0x0001 (0x0001 - 0x0000)
struct FortMatchmakingContext_IsInLobby final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingContext_IsInLobby) == 0x000001, "Wrong alignment on FortMatchmakingContext_IsInLobby");
static_assert(sizeof(FortMatchmakingContext_IsInLobby) == 0x000001, "Wrong size on FortMatchmakingContext_IsInLobby");
static_assert(offsetof(FortMatchmakingContext_IsInLobby, ReturnValue) == 0x000000, "Member 'FortMatchmakingContext_IsInLobby::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMatchmakingContext.IsMatchmakingLocal
// 0x0001 (0x0001 - 0x0000)
struct FortMatchmakingContext_IsMatchmakingLocal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingContext_IsMatchmakingLocal) == 0x000001, "Wrong alignment on FortMatchmakingContext_IsMatchmakingLocal");
static_assert(sizeof(FortMatchmakingContext_IsMatchmakingLocal) == 0x000001, "Wrong size on FortMatchmakingContext_IsMatchmakingLocal");
static_assert(offsetof(FortMatchmakingContext_IsMatchmakingLocal, ReturnValue) == 0x000000, "Member 'FortMatchmakingContext_IsMatchmakingLocal::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMatchmakingContext.IsOutpostPermitted
// 0x0001 (0x0001 - 0x0000)
struct FortMatchmakingContext_IsOutpostPermitted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingContext_IsOutpostPermitted) == 0x000001, "Wrong alignment on FortMatchmakingContext_IsOutpostPermitted");
static_assert(sizeof(FortMatchmakingContext_IsOutpostPermitted) == 0x000001, "Wrong size on FortMatchmakingContext_IsOutpostPermitted");
static_assert(offsetof(FortMatchmakingContext_IsOutpostPermitted, ReturnValue) == 0x000000, "Member 'FortMatchmakingContext_IsOutpostPermitted::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAsyncAction_MCPContextUpgradeItem.UpgradeItem
// 0x0018 (0x0018 - 0x0000)
struct FortAsyncAction_MCPContextUpgradeItem_UpgradeItem final
{
public:
	const class UFortMcpContext*                  Param_MCPContext;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortItem*                        Param_ItemToUpgrade;                               // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAsyncAction_MCPContextUpgradeItem* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAsyncAction_MCPContextUpgradeItem_UpgradeItem) == 0x000008, "Wrong alignment on FortAsyncAction_MCPContextUpgradeItem_UpgradeItem");
static_assert(sizeof(FortAsyncAction_MCPContextUpgradeItem_UpgradeItem) == 0x000018, "Wrong size on FortAsyncAction_MCPContextUpgradeItem_UpgradeItem");
static_assert(offsetof(FortAsyncAction_MCPContextUpgradeItem_UpgradeItem, Param_MCPContext) == 0x000000, "Member 'FortAsyncAction_MCPContextUpgradeItem_UpgradeItem::Param_MCPContext' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_MCPContextUpgradeItem_UpgradeItem, Param_ItemToUpgrade) == 0x000008, "Member 'FortAsyncAction_MCPContextUpgradeItem_UpgradeItem::Param_ItemToUpgrade' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_MCPContextUpgradeItem_UpgradeItem, ReturnValue) == 0x000010, "Member 'FortAsyncAction_MCPContextUpgradeItem_UpgradeItem::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAsyncAction_MCPContextRecycleItems.RecycleItems
// 0x0020 (0x0020 - 0x0000)
struct FortAsyncAction_MCPContextRecycleItems_RecycleItems final
{
public:
	const class UFortMcpContext*                  Param_MCPContext;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortItem*>                      Param_ItemsToRecycle;                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UFortAsyncAction_MCPContextRecycleItems* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAsyncAction_MCPContextRecycleItems_RecycleItems) == 0x000008, "Wrong alignment on FortAsyncAction_MCPContextRecycleItems_RecycleItems");
static_assert(sizeof(FortAsyncAction_MCPContextRecycleItems_RecycleItems) == 0x000020, "Wrong size on FortAsyncAction_MCPContextRecycleItems_RecycleItems");
static_assert(offsetof(FortAsyncAction_MCPContextRecycleItems_RecycleItems, Param_MCPContext) == 0x000000, "Member 'FortAsyncAction_MCPContextRecycleItems_RecycleItems::Param_MCPContext' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_MCPContextRecycleItems_RecycleItems, Param_ItemsToRecycle) == 0x000008, "Member 'FortAsyncAction_MCPContextRecycleItems_RecycleItems::Param_ItemsToRecycle' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_MCPContextRecycleItems_RecycleItems, ReturnValue) == 0x000018, "Member 'FortAsyncAction_MCPContextRecycleItems_RecycleItems::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAsyncAction_MCPContextConsumeItem.ConsumeItem
// 0x0040 (0x0040 - 0x0000)
struct FortAsyncAction_MCPContextConsumeItem_ConsumeItem final
{
public:
	const class UFortMcpContext*                  Param_MCPContext;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortItem*                        Param_ItemToConsume;                               // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       Param_TargetAccountId;                             // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAsyncAction_MCPContextConsumeItem* ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAsyncAction_MCPContextConsumeItem_ConsumeItem) == 0x000008, "Wrong alignment on FortAsyncAction_MCPContextConsumeItem_ConsumeItem");
static_assert(sizeof(FortAsyncAction_MCPContextConsumeItem_ConsumeItem) == 0x000040, "Wrong size on FortAsyncAction_MCPContextConsumeItem_ConsumeItem");
static_assert(offsetof(FortAsyncAction_MCPContextConsumeItem_ConsumeItem, Param_MCPContext) == 0x000000, "Member 'FortAsyncAction_MCPContextConsumeItem_ConsumeItem::Param_MCPContext' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_MCPContextConsumeItem_ConsumeItem, Param_ItemToConsume) == 0x000008, "Member 'FortAsyncAction_MCPContextConsumeItem_ConsumeItem::Param_ItemToConsume' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_MCPContextConsumeItem_ConsumeItem, Param_TargetAccountId) == 0x000010, "Member 'FortAsyncAction_MCPContextConsumeItem_ConsumeItem::Param_TargetAccountId' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_MCPContextConsumeItem_ConsumeItem, ReturnValue) == 0x000038, "Member 'FortAsyncAction_MCPContextConsumeItem_ConsumeItem::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpContext.AbandonExpedition
// 0x0008 (0x0008 - 0x0000)
struct FortMcpContext_AbandonExpedition final
{
public:
	const class UFortExpeditionItem*              Expedition;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_AbandonExpedition) == 0x000008, "Wrong alignment on FortMcpContext_AbandonExpedition");
static_assert(sizeof(FortMcpContext_AbandonExpedition) == 0x000008, "Wrong size on FortMcpContext_AbandonExpedition");
static_assert(offsetof(FortMcpContext_AbandonExpedition, Expedition) == 0x000000, "Member 'FortMcpContext_AbandonExpedition::Expedition' has a wrong offset!");

// Function FortniteGame.FortMcpContext.ApplyAlteration
// 0x0010 (0x0010 - 0x0000)
struct FortMcpContext_ApplyAlteration final
{
public:
	class UFortAlterableItem*                     Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAlterationItem*                    AlterationToApply;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_ApplyAlteration) == 0x000008, "Wrong alignment on FortMcpContext_ApplyAlteration");
static_assert(sizeof(FortMcpContext_ApplyAlteration) == 0x000010, "Wrong size on FortMcpContext_ApplyAlteration");
static_assert(offsetof(FortMcpContext_ApplyAlteration, Item) == 0x000000, "Member 'FortMcpContext_ApplyAlteration::Item' has a wrong offset!");
static_assert(offsetof(FortMcpContext_ApplyAlteration, AlterationToApply) == 0x000008, "Member 'FortMcpContext_ApplyAlteration::AlterationToApply' has a wrong offset!");

// Function FortniteGame.FortMcpContext.AreMissionRewardsAvailable
// 0x0001 (0x0001 - 0x0000)
struct FortMcpContext_AreMissionRewardsAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_AreMissionRewardsAvailable) == 0x000001, "Wrong alignment on FortMcpContext_AreMissionRewardsAvailable");
static_assert(sizeof(FortMcpContext_AreMissionRewardsAvailable) == 0x000001, "Wrong size on FortMcpContext_AreMissionRewardsAvailable");
static_assert(offsetof(FortMcpContext_AreMissionRewardsAvailable, ReturnValue) == 0x000000, "Member 'FortMcpContext_AreMissionRewardsAvailable::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpContext.CanPurchaseOffer
// 0x0020 (0x0020 - 0x0000)
struct FortMcpContext_CanPurchaseOffer final
{
public:
	class FString                                 OfferId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PriceIndex;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOfferPurchaseError                           ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMcpContext_CanPurchaseOffer) == 0x000008, "Wrong alignment on FortMcpContext_CanPurchaseOffer");
static_assert(sizeof(FortMcpContext_CanPurchaseOffer) == 0x000020, "Wrong size on FortMcpContext_CanPurchaseOffer");
static_assert(offsetof(FortMcpContext_CanPurchaseOffer, OfferId) == 0x000000, "Member 'FortMcpContext_CanPurchaseOffer::OfferId' has a wrong offset!");
static_assert(offsetof(FortMcpContext_CanPurchaseOffer, PriceIndex) == 0x000010, "Member 'FortMcpContext_CanPurchaseOffer::PriceIndex' has a wrong offset!");
static_assert(offsetof(FortMcpContext_CanPurchaseOffer, Quantity) == 0x000014, "Member 'FortMcpContext_CanPurchaseOffer::Quantity' has a wrong offset!");
static_assert(offsetof(FortMcpContext_CanPurchaseOffer, ReturnValue) == 0x000018, "Member 'FortMcpContext_CanPurchaseOffer::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpContext.ClaimResourceCollectors
// 0x0010 (0x0010 - 0x0000)
struct FortMcpContext_ClaimResourceCollectors final
{
public:
	TArray<class UFortCollectedResourceItem*>     CollectorTypes;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_ClaimResourceCollectors) == 0x000008, "Wrong alignment on FortMcpContext_ClaimResourceCollectors");
static_assert(sizeof(FortMcpContext_ClaimResourceCollectors) == 0x000010, "Wrong size on FortMcpContext_ClaimResourceCollectors");
static_assert(offsetof(FortMcpContext_ClaimResourceCollectors, CollectorTypes) == 0x000000, "Member 'FortMcpContext_ClaimResourceCollectors::CollectorTypes' has a wrong offset!");

// Function FortniteGame.FortMcpContext.CollectExpedition
// 0x0008 (0x0008 - 0x0000)
struct FortMcpContext_CollectExpedition final
{
public:
	const class UFortExpeditionItem*              Expedition;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_CollectExpedition) == 0x000008, "Wrong alignment on FortMcpContext_CollectExpedition");
static_assert(sizeof(FortMcpContext_CollectExpedition) == 0x000008, "Wrong size on FortMcpContext_CollectExpedition");
static_assert(offsetof(FortMcpContext_CollectExpedition, Expedition) == 0x000000, "Member 'FortMcpContext_CollectExpedition::Expedition' has a wrong offset!");

// Function FortniteGame.FortMcpContext.ConvertItem
// 0x0010 (0x0010 - 0x0000)
struct FortMcpContext_ConvertItem final
{
public:
	const class UFortItem*                        ItemToConvert;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecipeIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMcpContext_ConvertItem) == 0x000008, "Wrong alignment on FortMcpContext_ConvertItem");
static_assert(sizeof(FortMcpContext_ConvertItem) == 0x000010, "Wrong size on FortMcpContext_ConvertItem");
static_assert(offsetof(FortMcpContext_ConvertItem, ItemToConvert) == 0x000000, "Member 'FortMcpContext_ConvertItem::ItemToConvert' has a wrong offset!");
static_assert(offsetof(FortMcpContext_ConvertItem, RecipeIndex) == 0x000008, "Member 'FortMcpContext_ConvertItem::RecipeIndex' has a wrong offset!");

// Function FortniteGame.FortMcpContext.DoesPlatformSupportFriendCodes
// 0x0001 (0x0001 - 0x0000)
struct FortMcpContext_DoesPlatformSupportFriendCodes final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_DoesPlatformSupportFriendCodes) == 0x000001, "Wrong alignment on FortMcpContext_DoesPlatformSupportFriendCodes");
static_assert(sizeof(FortMcpContext_DoesPlatformSupportFriendCodes) == 0x000001, "Wrong size on FortMcpContext_DoesPlatformSupportFriendCodes");
static_assert(offsetof(FortMcpContext_DoesPlatformSupportFriendCodes, ReturnValue) == 0x000000, "Member 'FortMcpContext_DoesPlatformSupportFriendCodes::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpContext.GetAllResourceCollectors
// 0x0010 (0x0010 - 0x0000)
struct FortMcpContext_GetAllResourceCollectors final
{
public:
	TArray<class UFortCollectedResourceItem*>     ResourceCollectorsOwned;                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_GetAllResourceCollectors) == 0x000008, "Wrong alignment on FortMcpContext_GetAllResourceCollectors");
static_assert(sizeof(FortMcpContext_GetAllResourceCollectors) == 0x000010, "Wrong size on FortMcpContext_GetAllResourceCollectors");
static_assert(offsetof(FortMcpContext_GetAllResourceCollectors, ResourceCollectorsOwned) == 0x000000, "Member 'FortMcpContext_GetAllResourceCollectors::ResourceCollectorsOwned' has a wrong offset!");

// Function FortniteGame.FortMcpContext.GetEULAText
// 0x0018 (0x0018 - 0x0000)
struct FortMcpContext_GetEULAText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_GetEULAText) == 0x000008, "Wrong alignment on FortMcpContext_GetEULAText");
static_assert(sizeof(FortMcpContext_GetEULAText) == 0x000018, "Wrong size on FortMcpContext_GetEULAText");
static_assert(offsetof(FortMcpContext_GetEULAText, ReturnValue) == 0x000000, "Member 'FortMcpContext_GetEULAText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpContext.GetFriendCodeDescription
// 0x0038 (0x0038 - 0x0000)
struct FortMcpContext_GetFriendCodeDescription final
{
public:
	struct FFriendCode                            FriendCode;                                        // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_GetFriendCodeDescription) == 0x000008, "Wrong alignment on FortMcpContext_GetFriendCodeDescription");
static_assert(sizeof(FortMcpContext_GetFriendCodeDescription) == 0x000038, "Wrong size on FortMcpContext_GetFriendCodeDescription");
static_assert(offsetof(FortMcpContext_GetFriendCodeDescription, FriendCode) == 0x000000, "Member 'FortMcpContext_GetFriendCodeDescription::FriendCode' has a wrong offset!");
static_assert(offsetof(FortMcpContext_GetFriendCodeDescription, ReturnValue) == 0x000020, "Member 'FortMcpContext_GetFriendCodeDescription::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpContext.GetFriendCodeDisplayName
// 0x0038 (0x0038 - 0x0000)
struct FortMcpContext_GetFriendCodeDisplayName final
{
public:
	struct FFriendCode                            FriendCode;                                        // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_GetFriendCodeDisplayName) == 0x000008, "Wrong alignment on FortMcpContext_GetFriendCodeDisplayName");
static_assert(sizeof(FortMcpContext_GetFriendCodeDisplayName) == 0x000038, "Wrong size on FortMcpContext_GetFriendCodeDisplayName");
static_assert(offsetof(FortMcpContext_GetFriendCodeDisplayName, FriendCode) == 0x000000, "Member 'FortMcpContext_GetFriendCodeDisplayName::FriendCode' has a wrong offset!");
static_assert(offsetof(FortMcpContext_GetFriendCodeDisplayName, ReturnValue) == 0x000020, "Member 'FortMcpContext_GetFriendCodeDisplayName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpContext.IsAllowedConversionIndex
// 0x0010 (0x0010 - 0x0000)
struct FortMcpContext_IsAllowedConversionIndex final
{
public:
	const class UFortItem*                        ItemToConvert;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecipeIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMcpContext_IsAllowedConversionIndex) == 0x000008, "Wrong alignment on FortMcpContext_IsAllowedConversionIndex");
static_assert(sizeof(FortMcpContext_IsAllowedConversionIndex) == 0x000010, "Wrong size on FortMcpContext_IsAllowedConversionIndex");
static_assert(offsetof(FortMcpContext_IsAllowedConversionIndex, ItemToConvert) == 0x000000, "Member 'FortMcpContext_IsAllowedConversionIndex::ItemToConvert' has a wrong offset!");
static_assert(offsetof(FortMcpContext_IsAllowedConversionIndex, RecipeIndex) == 0x000008, "Member 'FortMcpContext_IsAllowedConversionIndex::RecipeIndex' has a wrong offset!");
static_assert(offsetof(FortMcpContext_IsAllowedConversionIndex, ReturnValue) == 0x00000C, "Member 'FortMcpContext_IsAllowedConversionIndex::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpContext.IsOwned
// 0x0018 (0x0018 - 0x0000)
struct FortMcpContext_IsOwned final
{
public:
	class FString                                 OfferId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMcpContext_IsOwned) == 0x000008, "Wrong alignment on FortMcpContext_IsOwned");
static_assert(sizeof(FortMcpContext_IsOwned) == 0x000018, "Wrong size on FortMcpContext_IsOwned");
static_assert(offsetof(FortMcpContext_IsOwned, OfferId) == 0x000000, "Member 'FortMcpContext_IsOwned::OfferId' has a wrong offset!");
static_assert(offsetof(FortMcpContext_IsOwned, ReturnValue) == 0x000010, "Member 'FortMcpContext_IsOwned::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpContext.IssueFriendCode
// 0x0010 (0x0010 - 0x0000)
struct FortMcpContext_IssueFriendCode final
{
public:
	TDelegate<void(bool bSuccess, struct FFriendCode& FriendCode)> OnCompleteDelegate;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_IssueFriendCode) == 0x000004, "Wrong alignment on FortMcpContext_IssueFriendCode");
static_assert(sizeof(FortMcpContext_IssueFriendCode) == 0x000010, "Wrong size on FortMcpContext_IssueFriendCode");
static_assert(offsetof(FortMcpContext_IssueFriendCode, OnCompleteDelegate) == 0x000000, "Member 'FortMcpContext_IssueFriendCode::OnCompleteDelegate' has a wrong offset!");

// DelegateFunction FortniteGame.FortMcpContext.OnIssueFriendCodeComplete__DelegateSignature
// 0x0028 (0x0028 - 0x0000)
struct FortMcpContext_OnIssueFriendCodeComplete__DelegateSignature final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFriendCode                            FriendCode;                                        // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_OnIssueFriendCodeComplete__DelegateSignature) == 0x000008, "Wrong alignment on FortMcpContext_OnIssueFriendCodeComplete__DelegateSignature");
static_assert(sizeof(FortMcpContext_OnIssueFriendCodeComplete__DelegateSignature) == 0x000028, "Wrong size on FortMcpContext_OnIssueFriendCodeComplete__DelegateSignature");
static_assert(offsetof(FortMcpContext_OnIssueFriendCodeComplete__DelegateSignature, bSuccess) == 0x000000, "Member 'FortMcpContext_OnIssueFriendCodeComplete__DelegateSignature::bSuccess' has a wrong offset!");
static_assert(offsetof(FortMcpContext_OnIssueFriendCodeComplete__DelegateSignature, FriendCode) == 0x000008, "Member 'FortMcpContext_OnIssueFriendCodeComplete__DelegateSignature::FriendCode' has a wrong offset!");

// Function FortniteGame.FortMcpContext.ListMtxPackages
// 0x0020 (0x0020 - 0x0000)
struct FortMcpContext_ListMtxPackages final
{
public:
	TDelegate<void(TArray<struct FMtxPackage>& Offers)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         StorefrontNames;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_ListMtxPackages) == 0x000008, "Wrong alignment on FortMcpContext_ListMtxPackages");
static_assert(sizeof(FortMcpContext_ListMtxPackages) == 0x000020, "Wrong size on FortMcpContext_ListMtxPackages");
static_assert(offsetof(FortMcpContext_ListMtxPackages, Callback) == 0x000000, "Member 'FortMcpContext_ListMtxPackages::Callback' has a wrong offset!");
static_assert(offsetof(FortMcpContext_ListMtxPackages, StorefrontNames) == 0x000010, "Member 'FortMcpContext_ListMtxPackages::StorefrontNames' has a wrong offset!");

// Function FortniteGame.FortMcpContext.MarkItemSeen
// 0x0008 (0x0008 - 0x0000)
struct FortMcpContext_MarkItemSeen final
{
public:
	class UFortAccountItem*                       ItemToMarkSeen;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_MarkItemSeen) == 0x000008, "Wrong alignment on FortMcpContext_MarkItemSeen");
static_assert(sizeof(FortMcpContext_MarkItemSeen) == 0x000008, "Wrong size on FortMcpContext_MarkItemSeen");
static_assert(offsetof(FortMcpContext_MarkItemSeen, ItemToMarkSeen) == 0x000000, "Member 'FortMcpContext_MarkItemSeen::ItemToMarkSeen' has a wrong offset!");

// DelegateFunction FortniteGame.FortMcpContext.OnQueryUnredeemedFriendCodesComplete__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct FortMcpContext_OnQueryUnredeemedFriendCodesComplete__DelegateSignature final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFriendCode>                    FriendCodes;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_OnQueryUnredeemedFriendCodesComplete__DelegateSignature) == 0x000008, "Wrong alignment on FortMcpContext_OnQueryUnredeemedFriendCodesComplete__DelegateSignature");
static_assert(sizeof(FortMcpContext_OnQueryUnredeemedFriendCodesComplete__DelegateSignature) == 0x000018, "Wrong size on FortMcpContext_OnQueryUnredeemedFriendCodesComplete__DelegateSignature");
static_assert(offsetof(FortMcpContext_OnQueryUnredeemedFriendCodesComplete__DelegateSignature, bSuccess) == 0x000000, "Member 'FortMcpContext_OnQueryUnredeemedFriendCodesComplete__DelegateSignature::bSuccess' has a wrong offset!");
static_assert(offsetof(FortMcpContext_OnQueryUnredeemedFriendCodesComplete__DelegateSignature, FriendCodes) == 0x000008, "Member 'FortMcpContext_OnQueryUnredeemedFriendCodesComplete__DelegateSignature::FriendCodes' has a wrong offset!");

// DelegateFunction FortniteGame.FortMcpContext.OnSendFriendCodePlatformMessageComplete__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct FortMcpContext_OnSendFriendCodePlatformMessageComplete__DelegateSignature final
{
public:
	bool                                          bMessageSent;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_OnSendFriendCodePlatformMessageComplete__DelegateSignature) == 0x000001, "Wrong alignment on FortMcpContext_OnSendFriendCodePlatformMessageComplete__DelegateSignature");
static_assert(sizeof(FortMcpContext_OnSendFriendCodePlatformMessageComplete__DelegateSignature) == 0x000001, "Wrong size on FortMcpContext_OnSendFriendCodePlatformMessageComplete__DelegateSignature");
static_assert(offsetof(FortMcpContext_OnSendFriendCodePlatformMessageComplete__DelegateSignature, bMessageSent) == 0x000000, "Member 'FortMcpContext_OnSendFriendCodePlatformMessageComplete__DelegateSignature::bMessageSent' has a wrong offset!");

// Function FortniteGame.FortMcpContext.PurchaseOffer
// 0x0030 (0x0030 - 0x0000)
struct FortMcpContext_PurchaseOffer final
{
public:
	class FString                                 OfferId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PriceIndex;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool bSuccess)>                Callback;                                          // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOfferPurchaseError                           ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMcpContext_PurchaseOffer) == 0x000008, "Wrong alignment on FortMcpContext_PurchaseOffer");
static_assert(sizeof(FortMcpContext_PurchaseOffer) == 0x000030, "Wrong size on FortMcpContext_PurchaseOffer");
static_assert(offsetof(FortMcpContext_PurchaseOffer, OfferId) == 0x000000, "Member 'FortMcpContext_PurchaseOffer::OfferId' has a wrong offset!");
static_assert(offsetof(FortMcpContext_PurchaseOffer, PriceIndex) == 0x000010, "Member 'FortMcpContext_PurchaseOffer::PriceIndex' has a wrong offset!");
static_assert(offsetof(FortMcpContext_PurchaseOffer, Callback) == 0x000018, "Member 'FortMcpContext_PurchaseOffer::Callback' has a wrong offset!");
static_assert(offsetof(FortMcpContext_PurchaseOffer, Quantity) == 0x000028, "Member 'FortMcpContext_PurchaseOffer::Quantity' has a wrong offset!");
static_assert(offsetof(FortMcpContext_PurchaseOffer, ReturnValue) == 0x00002C, "Member 'FortMcpContext_PurchaseOffer::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpContext.PurchaseRealMoneyCatalogEntry
// 0x0020 (0x0020 - 0x0000)
struct FortMcpContext_PurchaseRealMoneyCatalogEntry final
{
public:
	class FString                                 OfferId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool bSuccess)>                Callback;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_PurchaseRealMoneyCatalogEntry) == 0x000008, "Wrong alignment on FortMcpContext_PurchaseRealMoneyCatalogEntry");
static_assert(sizeof(FortMcpContext_PurchaseRealMoneyCatalogEntry) == 0x000020, "Wrong size on FortMcpContext_PurchaseRealMoneyCatalogEntry");
static_assert(offsetof(FortMcpContext_PurchaseRealMoneyCatalogEntry, OfferId) == 0x000000, "Member 'FortMcpContext_PurchaseRealMoneyCatalogEntry::OfferId' has a wrong offset!");
static_assert(offsetof(FortMcpContext_PurchaseRealMoneyCatalogEntry, Callback) == 0x000010, "Member 'FortMcpContext_PurchaseRealMoneyCatalogEntry::Callback' has a wrong offset!");

// Function FortniteGame.FortMcpContext.QueryUnredeemedFriendCodes
// 0x0010 (0x0010 - 0x0000)
struct FortMcpContext_QueryUnredeemedFriendCodes final
{
public:
	TDelegate<void(bool bSuccess, TArray<struct FFriendCode>& FriendCodes)> OnCompleteDelegate;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_QueryUnredeemedFriendCodes) == 0x000004, "Wrong alignment on FortMcpContext_QueryUnredeemedFriendCodes");
static_assert(sizeof(FortMcpContext_QueryUnredeemedFriendCodes) == 0x000010, "Wrong size on FortMcpContext_QueryUnredeemedFriendCodes");
static_assert(offsetof(FortMcpContext_QueryUnredeemedFriendCodes, OnCompleteDelegate) == 0x000000, "Member 'FortMcpContext_QueryUnredeemedFriendCodes::OnCompleteDelegate' has a wrong offset!");

// Function FortniteGame.FortMcpContext.RecycleItem
// 0x0008 (0x0008 - 0x0000)
struct FortMcpContext_RecycleItem final
{
public:
	const class UFortItem*                        ItemToRecycle;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_RecycleItem) == 0x000008, "Wrong alignment on FortMcpContext_RecycleItem");
static_assert(sizeof(FortMcpContext_RecycleItem) == 0x000008, "Wrong size on FortMcpContext_RecycleItem");
static_assert(offsetof(FortMcpContext_RecycleItem, ItemToRecycle) == 0x000000, "Member 'FortMcpContext_RecycleItem::ItemToRecycle' has a wrong offset!");

// Function FortniteGame.FortMcpContext.RecycleItemBatch
// 0x0010 (0x0010 - 0x0000)
struct FortMcpContext_RecycleItemBatch final
{
public:
	TArray<class UFortItem*>                      ItemsToRecycle;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_RecycleItemBatch) == 0x000008, "Wrong alignment on FortMcpContext_RecycleItemBatch");
static_assert(sizeof(FortMcpContext_RecycleItemBatch) == 0x000010, "Wrong size on FortMcpContext_RecycleItemBatch");
static_assert(offsetof(FortMcpContext_RecycleItemBatch, ItemsToRecycle) == 0x000000, "Member 'FortMcpContext_RecycleItemBatch::ItemsToRecycle' has a wrong offset!");

// Function FortniteGame.FortMcpContext.RegisterForEpicPurchasingDisplay
// 0x0020 (0x0020 - 0x0000)
struct FortMcpContext_RegisterForEpicPurchasingDisplay final
{
public:
	TDelegate<void(class UWidget* WebWidget, const class FString& OfferId)> DisplayCallback;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             DismissCallback;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_RegisterForEpicPurchasingDisplay) == 0x000004, "Wrong alignment on FortMcpContext_RegisterForEpicPurchasingDisplay");
static_assert(sizeof(FortMcpContext_RegisterForEpicPurchasingDisplay) == 0x000020, "Wrong size on FortMcpContext_RegisterForEpicPurchasingDisplay");
static_assert(offsetof(FortMcpContext_RegisterForEpicPurchasingDisplay, DisplayCallback) == 0x000000, "Member 'FortMcpContext_RegisterForEpicPurchasingDisplay::DisplayCallback' has a wrong offset!");
static_assert(offsetof(FortMcpContext_RegisterForEpicPurchasingDisplay, DismissCallback) == 0x000010, "Member 'FortMcpContext_RegisterForEpicPurchasingDisplay::DismissCallback' has a wrong offset!");

// Function FortniteGame.FortMcpContext.SendFriendCodePlatformMessage
// 0x0030 (0x0030 - 0x0000)
struct FortMcpContext_SendFriendCodePlatformMessage final
{
public:
	struct FFriendCode                            FriendCode;                                        // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(bool bMessageSent)>            OnCompleteDelegate;                                // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_SendFriendCodePlatformMessage) == 0x000008, "Wrong alignment on FortMcpContext_SendFriendCodePlatformMessage");
static_assert(sizeof(FortMcpContext_SendFriendCodePlatformMessage) == 0x000030, "Wrong size on FortMcpContext_SendFriendCodePlatformMessage");
static_assert(offsetof(FortMcpContext_SendFriendCodePlatformMessage, FriendCode) == 0x000000, "Member 'FortMcpContext_SendFriendCodePlatformMessage::FriendCode' has a wrong offset!");
static_assert(offsetof(FortMcpContext_SendFriendCodePlatformMessage, OnCompleteDelegate) == 0x000020, "Member 'FortMcpContext_SendFriendCodePlatformMessage::OnCompleteDelegate' has a wrong offset!");

// Function FortniteGame.FortMcpContext.SetItemFavoriteStatus
// 0x0010 (0x0010 - 0x0000)
struct FortMcpContext_SetItemFavoriteStatus final
{
public:
	class UFortAccountItem*                       Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFavorite;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMcpContext_SetItemFavoriteStatus) == 0x000008, "Wrong alignment on FortMcpContext_SetItemFavoriteStatus");
static_assert(sizeof(FortMcpContext_SetItemFavoriteStatus) == 0x000010, "Wrong size on FortMcpContext_SetItemFavoriteStatus");
static_assert(offsetof(FortMcpContext_SetItemFavoriteStatus, Item) == 0x000000, "Member 'FortMcpContext_SetItemFavoriteStatus::Item' has a wrong offset!");
static_assert(offsetof(FortMcpContext_SetItemFavoriteStatus, bFavorite) == 0x000008, "Member 'FortMcpContext_SetItemFavoriteStatus::bFavorite' has a wrong offset!");

// Function FortniteGame.FortMcpContext.StartExpedition
// 0x0058 (0x0058 - 0x0000)
struct FortMcpContext_StartExpedition final
{
public:
	const class UFortExpeditionItem*              Expedition;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuccessChance;                                     // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SquadId;                                           // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SquadRating;                                       // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortItem*>                      SlottedSquadItems;                                 // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 SlotIndices;                                       // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<float>                                 ItemRatingMods;                                    // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         GlobalMod;                                         // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0054(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMcpContext_StartExpedition) == 0x000008, "Wrong alignment on FortMcpContext_StartExpedition");
static_assert(sizeof(FortMcpContext_StartExpedition) == 0x000058, "Wrong size on FortMcpContext_StartExpedition");
static_assert(offsetof(FortMcpContext_StartExpedition, Expedition) == 0x000000, "Member 'FortMcpContext_StartExpedition::Expedition' has a wrong offset!");
static_assert(offsetof(FortMcpContext_StartExpedition, SuccessChance) == 0x000008, "Member 'FortMcpContext_StartExpedition::SuccessChance' has a wrong offset!");
static_assert(offsetof(FortMcpContext_StartExpedition, SquadId) == 0x000010, "Member 'FortMcpContext_StartExpedition::SquadId' has a wrong offset!");
static_assert(offsetof(FortMcpContext_StartExpedition, SquadRating) == 0x000018, "Member 'FortMcpContext_StartExpedition::SquadRating' has a wrong offset!");
static_assert(offsetof(FortMcpContext_StartExpedition, SlottedSquadItems) == 0x000020, "Member 'FortMcpContext_StartExpedition::SlottedSquadItems' has a wrong offset!");
static_assert(offsetof(FortMcpContext_StartExpedition, SlotIndices) == 0x000030, "Member 'FortMcpContext_StartExpedition::SlotIndices' has a wrong offset!");
static_assert(offsetof(FortMcpContext_StartExpedition, ItemRatingMods) == 0x000040, "Member 'FortMcpContext_StartExpedition::ItemRatingMods' has a wrong offset!");
static_assert(offsetof(FortMcpContext_StartExpedition, GlobalMod) == 0x000050, "Member 'FortMcpContext_StartExpedition::GlobalMod' has a wrong offset!");
static_assert(offsetof(FortMcpContext_StartExpedition, ReturnValue) == 0x000054, "Member 'FortMcpContext_StartExpedition::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpContext.TransmogItem
// 0x0018 (0x0018 - 0x0000)
struct FortMcpContext_TransmogItem final
{
public:
	const class UFortConversionControlItemDefinition* ControlKeyItem;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortItem*>                      ItemsToSacrifice;                                  // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_TransmogItem) == 0x000008, "Wrong alignment on FortMcpContext_TransmogItem");
static_assert(sizeof(FortMcpContext_TransmogItem) == 0x000018, "Wrong size on FortMcpContext_TransmogItem");
static_assert(offsetof(FortMcpContext_TransmogItem, ControlKeyItem) == 0x000000, "Member 'FortMcpContext_TransmogItem::ControlKeyItem' has a wrong offset!");
static_assert(offsetof(FortMcpContext_TransmogItem, ItemsToSacrifice) == 0x000008, "Member 'FortMcpContext_TransmogItem::ItemsToSacrifice' has a wrong offset!");

// Function FortniteGame.FortMcpContext.UpgradeItemRarity
// 0x0008 (0x0008 - 0x0000)
struct FortMcpContext_UpgradeItemRarity final
{
public:
	const class UFortItem*                        ItemToUpgrade;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_UpgradeItemRarity) == 0x000008, "Wrong alignment on FortMcpContext_UpgradeItemRarity");
static_assert(sizeof(FortMcpContext_UpgradeItemRarity) == 0x000008, "Wrong size on FortMcpContext_UpgradeItemRarity");
static_assert(offsetof(FortMcpContext_UpgradeItemRarity, ItemToUpgrade) == 0x000000, "Member 'FortMcpContext_UpgradeItemRarity::ItemToUpgrade' has a wrong offset!");

// Function FortniteGame.FortMcpContext.GetAccountItemWithDefinition
// 0x0010 (0x0010 - 0x0000)
struct FortMcpContext_GetAccountItemWithDefinition final
{
public:
	const class UFortAccountItemDefinition*       AccountItemDefinition;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAccountItem*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_GetAccountItemWithDefinition) == 0x000008, "Wrong alignment on FortMcpContext_GetAccountItemWithDefinition");
static_assert(sizeof(FortMcpContext_GetAccountItemWithDefinition) == 0x000010, "Wrong size on FortMcpContext_GetAccountItemWithDefinition");
static_assert(offsetof(FortMcpContext_GetAccountItemWithDefinition, AccountItemDefinition) == 0x000000, "Member 'FortMcpContext_GetAccountItemWithDefinition::AccountItemDefinition' has a wrong offset!");
static_assert(offsetof(FortMcpContext_GetAccountItemWithDefinition, ReturnValue) == 0x000008, "Member 'FortMcpContext_GetAccountItemWithDefinition::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpContext.GetAllAlterations
// 0x0018 (0x0018 - 0x0000)
struct FortMcpContext_GetAllAlterations final
{
public:
	TArray<class UFortAlterationItem*>            OutAlterations;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	EFortAlteration                               InAlterationType;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMcpContext_GetAllAlterations) == 0x000008, "Wrong alignment on FortMcpContext_GetAllAlterations");
static_assert(sizeof(FortMcpContext_GetAllAlterations) == 0x000018, "Wrong size on FortMcpContext_GetAllAlterations");
static_assert(offsetof(FortMcpContext_GetAllAlterations, OutAlterations) == 0x000000, "Member 'FortMcpContext_GetAllAlterations::OutAlterations' has a wrong offset!");
static_assert(offsetof(FortMcpContext_GetAllAlterations, InAlterationType) == 0x000010, "Member 'FortMcpContext_GetAllAlterations::InAlterationType' has a wrong offset!");

// Function FortniteGame.FortMcpContext.GetAllHeroes
// 0x0010 (0x0010 - 0x0000)
struct FortMcpContext_GetAllHeroes final
{
public:
	TArray<class UFortHero*>                      Result;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_GetAllHeroes) == 0x000008, "Wrong alignment on FortMcpContext_GetAllHeroes");
static_assert(sizeof(FortMcpContext_GetAllHeroes) == 0x000010, "Wrong size on FortMcpContext_GetAllHeroes");
static_assert(offsetof(FortMcpContext_GetAllHeroes, Result) == 0x000000, "Member 'FortMcpContext_GetAllHeroes::Result' has a wrong offset!");

// Function FortniteGame.FortMcpContext.GetAthenaProfile
// 0x0008 (0x0008 - 0x0000)
struct FortMcpContext_GetAthenaProfile final
{
public:
	class UFortMcpProfileAthena*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_GetAthenaProfile) == 0x000008, "Wrong alignment on FortMcpContext_GetAthenaProfile");
static_assert(sizeof(FortMcpContext_GetAthenaProfile) == 0x000008, "Wrong size on FortMcpContext_GetAthenaProfile");
static_assert(offsetof(FortMcpContext_GetAthenaProfile, ReturnValue) == 0x000000, "Member 'FortMcpContext_GetAthenaProfile::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpContext.GetBattlePassInfoForPlayer
// 0x0040 (0x0040 - 0x0000)
struct FortMcpContext_GetBattlePassInfoForPlayer final
{
public:
	struct FFortBattlePassInfo                    Result;                                            // 0x0000(0x0014)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueNetIdRepl                       MemberUniqueId;                                    // 0x0018(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_GetBattlePassInfoForPlayer) == 0x000008, "Wrong alignment on FortMcpContext_GetBattlePassInfoForPlayer");
static_assert(sizeof(FortMcpContext_GetBattlePassInfoForPlayer) == 0x000040, "Wrong size on FortMcpContext_GetBattlePassInfoForPlayer");
static_assert(offsetof(FortMcpContext_GetBattlePassInfoForPlayer, Result) == 0x000000, "Member 'FortMcpContext_GetBattlePassInfoForPlayer::Result' has a wrong offset!");
static_assert(offsetof(FortMcpContext_GetBattlePassInfoForPlayer, MemberUniqueId) == 0x000018, "Member 'FortMcpContext_GetBattlePassInfoForPlayer::MemberUniqueId' has a wrong offset!");

// Function FortniteGame.FortMcpContext.GetCurrentlyViewedAccountInfo
// 0x0034 (0x0034 - 0x0000)
struct FortMcpContext_GetCurrentlyViewedAccountInfo final
{
public:
	struct FFortPublicAccountInfo                 Result;                                            // 0x0000(0x0034)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_GetCurrentlyViewedAccountInfo) == 0x000004, "Wrong alignment on FortMcpContext_GetCurrentlyViewedAccountInfo");
static_assert(sizeof(FortMcpContext_GetCurrentlyViewedAccountInfo) == 0x000034, "Wrong size on FortMcpContext_GetCurrentlyViewedAccountInfo");
static_assert(offsetof(FortMcpContext_GetCurrentlyViewedAccountInfo, Result) == 0x000000, "Member 'FortMcpContext_GetCurrentlyViewedAccountInfo::Result' has a wrong offset!");

// Function FortniteGame.FortMcpContext.GetDefaultHero
// 0x0008 (0x0008 - 0x0000)
struct FortMcpContext_GetDefaultHero final
{
public:
	class UFortHero*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_GetDefaultHero) == 0x000008, "Wrong alignment on FortMcpContext_GetDefaultHero");
static_assert(sizeof(FortMcpContext_GetDefaultHero) == 0x000008, "Wrong size on FortMcpContext_GetDefaultHero");
static_assert(offsetof(FortMcpContext_GetDefaultHero, ReturnValue) == 0x000000, "Member 'FortMcpContext_GetDefaultHero::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpContext.GetGroupXpBonusPercent
// 0x0004 (0x0004 - 0x0000)
struct FortMcpContext_GetGroupXpBonusPercent final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_GetGroupXpBonusPercent) == 0x000004, "Wrong alignment on FortMcpContext_GetGroupXpBonusPercent");
static_assert(sizeof(FortMcpContext_GetGroupXpBonusPercent) == 0x000004, "Wrong size on FortMcpContext_GetGroupXpBonusPercent");
static_assert(offsetof(FortMcpContext_GetGroupXpBonusPercent, ReturnValue) == 0x000000, "Member 'FortMcpContext_GetGroupXpBonusPercent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpContext.GetHeroXpBalance
// 0x0004 (0x0004 - 0x0000)
struct FortMcpContext_GetHeroXpBalance final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_GetHeroXpBalance) == 0x000004, "Wrong alignment on FortMcpContext_GetHeroXpBalance");
static_assert(sizeof(FortMcpContext_GetHeroXpBalance) == 0x000004, "Wrong size on FortMcpContext_GetHeroXpBalance");
static_assert(offsetof(FortMcpContext_GetHeroXpBalance, ReturnValue) == 0x000000, "Member 'FortMcpContext_GetHeroXpBalance::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpContext.GetHomeBaseInfo
// 0x0040 (0x0040 - 0x0000)
struct FortMcpContext_GetHomeBaseInfo final
{
public:
	struct FFortHomeBaseInfo                      Result;                                            // 0x0000(0x0040)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_GetHomeBaseInfo) == 0x000008, "Wrong alignment on FortMcpContext_GetHomeBaseInfo");
static_assert(sizeof(FortMcpContext_GetHomeBaseInfo) == 0x000040, "Wrong size on FortMcpContext_GetHomeBaseInfo");
static_assert(offsetof(FortMcpContext_GetHomeBaseInfo, Result) == 0x000000, "Member 'FortMcpContext_GetHomeBaseInfo::Result' has a wrong offset!");

// Function FortniteGame.FortMcpContext.GetHomeBaseInfoForPlayer
// 0x0068 (0x0068 - 0x0000)
struct FortMcpContext_GetHomeBaseInfoForPlayer final
{
public:
	struct FFortHomeBaseInfo                      Result;                                            // 0x0000(0x0040)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       MemberUniqueId;                                    // 0x0040(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_GetHomeBaseInfoForPlayer) == 0x000008, "Wrong alignment on FortMcpContext_GetHomeBaseInfoForPlayer");
static_assert(sizeof(FortMcpContext_GetHomeBaseInfoForPlayer) == 0x000068, "Wrong size on FortMcpContext_GetHomeBaseInfoForPlayer");
static_assert(offsetof(FortMcpContext_GetHomeBaseInfoForPlayer, Result) == 0x000000, "Member 'FortMcpContext_GetHomeBaseInfoForPlayer::Result' has a wrong offset!");
static_assert(offsetof(FortMcpContext_GetHomeBaseInfoForPlayer, MemberUniqueId) == 0x000040, "Member 'FortMcpContext_GetHomeBaseInfoForPlayer::MemberUniqueId' has a wrong offset!");

// Function FortniteGame.FortMcpContext.GetLoadoutForPlayer
// 0x0098 (0x0098 - 0x0000)
struct FortMcpContext_GetLoadoutForPlayer final
{
public:
	struct FUniqueNetIdRepl                       MemberUniqueId;                                    // 0x0000(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAthenaLoadout                     ReturnValue;                                       // 0x0028(0x0070)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_GetLoadoutForPlayer) == 0x000008, "Wrong alignment on FortMcpContext_GetLoadoutForPlayer");
static_assert(sizeof(FortMcpContext_GetLoadoutForPlayer) == 0x000098, "Wrong size on FortMcpContext_GetLoadoutForPlayer");
static_assert(offsetof(FortMcpContext_GetLoadoutForPlayer, MemberUniqueId) == 0x000000, "Member 'FortMcpContext_GetLoadoutForPlayer::MemberUniqueId' has a wrong offset!");
static_assert(offsetof(FortMcpContext_GetLoadoutForPlayer, ReturnValue) == 0x000028, "Member 'FortMcpContext_GetLoadoutForPlayer::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpContext.GetLocalAccountInfo
// 0x0038 (0x0038 - 0x0000)
struct FortMcpContext_GetLocalAccountInfo final
{
public:
	struct FFortPrivateAccountInfo                Result;                                            // 0x0000(0x0038)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_GetLocalAccountInfo) == 0x000004, "Wrong alignment on FortMcpContext_GetLocalAccountInfo");
static_assert(sizeof(FortMcpContext_GetLocalAccountInfo) == 0x000038, "Wrong size on FortMcpContext_GetLocalAccountInfo");
static_assert(offsetof(FortMcpContext_GetLocalAccountInfo, Result) == 0x000000, "Member 'FortMcpContext_GetLocalAccountInfo::Result' has a wrong offset!");

// Function FortniteGame.FortMcpContext.GetLoginStatusText
// 0x0018 (0x0018 - 0x0000)
struct FortMcpContext_GetLoginStatusText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_GetLoginStatusText) == 0x000008, "Wrong alignment on FortMcpContext_GetLoginStatusText");
static_assert(sizeof(FortMcpContext_GetLoginStatusText) == 0x000018, "Wrong size on FortMcpContext_GetLoginStatusText");
static_assert(offsetof(FortMcpContext_GetLoginStatusText, ReturnValue) == 0x000000, "Member 'FortMcpContext_GetLoginStatusText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpContext.GetMcpProfile
// 0x0008 (0x0008 - 0x0000)
struct FortMcpContext_GetMcpProfile final
{
public:
	class UFortMcpProfileAccount*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_GetMcpProfile) == 0x000008, "Wrong alignment on FortMcpContext_GetMcpProfile");
static_assert(sizeof(FortMcpContext_GetMcpProfile) == 0x000008, "Wrong size on FortMcpContext_GetMcpProfile");
static_assert(offsetof(FortMcpContext_GetMcpProfile, ReturnValue) == 0x000000, "Member 'FortMcpContext_GetMcpProfile::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpContext.GetNumFriendCodesToIssue
// 0x0004 (0x0004 - 0x0000)
struct FortMcpContext_GetNumFriendCodesToIssue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_GetNumFriendCodesToIssue) == 0x000004, "Wrong alignment on FortMcpContext_GetNumFriendCodesToIssue");
static_assert(sizeof(FortMcpContext_GetNumFriendCodesToIssue) == 0x000004, "Wrong size on FortMcpContext_GetNumFriendCodesToIssue");
static_assert(offsetof(FortMcpContext_GetNumFriendCodesToIssue, ReturnValue) == 0x000000, "Member 'FortMcpContext_GetNumFriendCodesToIssue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpContext.GetPersonalXpBonusPercent
// 0x0004 (0x0004 - 0x0000)
struct FortMcpContext_GetPersonalXpBonusPercent final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_GetPersonalXpBonusPercent) == 0x000004, "Wrong alignment on FortMcpContext_GetPersonalXpBonusPercent");
static_assert(sizeof(FortMcpContext_GetPersonalXpBonusPercent) == 0x000004, "Wrong size on FortMcpContext_GetPersonalXpBonusPercent");
static_assert(offsetof(FortMcpContext_GetPersonalXpBonusPercent, ReturnValue) == 0x000000, "Member 'FortMcpContext_GetPersonalXpBonusPercent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpContext.GetPersonnelXpBalance
// 0x0004 (0x0004 - 0x0000)
struct FortMcpContext_GetPersonnelXpBalance final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_GetPersonnelXpBalance) == 0x000004, "Wrong alignment on FortMcpContext_GetPersonnelXpBalance");
static_assert(sizeof(FortMcpContext_GetPersonnelXpBalance) == 0x000004, "Wrong size on FortMcpContext_GetPersonnelXpBalance");
static_assert(offsetof(FortMcpContext_GetPersonnelXpBalance, ReturnValue) == 0x000000, "Member 'FortMcpContext_GetPersonnelXpBalance::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpContext.GetPlayersXPPercentContributionToLocalPlayer
// 0x0030 (0x0030 - 0x0000)
struct FortMcpContext_GetPlayersXPPercentContributionToLocalPlayer final
{
public:
	struct FUniqueNetIdRepl                       PlayerID;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMcpContext_GetPlayersXPPercentContributionToLocalPlayer) == 0x000008, "Wrong alignment on FortMcpContext_GetPlayersXPPercentContributionToLocalPlayer");
static_assert(sizeof(FortMcpContext_GetPlayersXPPercentContributionToLocalPlayer) == 0x000030, "Wrong size on FortMcpContext_GetPlayersXPPercentContributionToLocalPlayer");
static_assert(offsetof(FortMcpContext_GetPlayersXPPercentContributionToLocalPlayer, PlayerID) == 0x000000, "Member 'FortMcpContext_GetPlayersXPPercentContributionToLocalPlayer::PlayerID' has a wrong offset!");
static_assert(offsetof(FortMcpContext_GetPlayersXPPercentContributionToLocalPlayer, ReturnValue) == 0x000028, "Member 'FortMcpContext_GetPlayersXPPercentContributionToLocalPlayer::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpContext.GetRestXpBalance
// 0x0004 (0x0004 - 0x0000)
struct FortMcpContext_GetRestXpBalance final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_GetRestXpBalance) == 0x000004, "Wrong alignment on FortMcpContext_GetRestXpBalance");
static_assert(sizeof(FortMcpContext_GetRestXpBalance) == 0x000004, "Wrong size on FortMcpContext_GetRestXpBalance");
static_assert(offsetof(FortMcpContext_GetRestXpBalance, ReturnValue) == 0x000000, "Member 'FortMcpContext_GetRestXpBalance::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpContext.GetRestXpBonusPercent
// 0x0004 (0x0004 - 0x0000)
struct FortMcpContext_GetRestXpBonusPercent final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_GetRestXpBonusPercent) == 0x000004, "Wrong alignment on FortMcpContext_GetRestXpBonusPercent");
static_assert(sizeof(FortMcpContext_GetRestXpBonusPercent) == 0x000004, "Wrong size on FortMcpContext_GetRestXpBonusPercent");
static_assert(offsetof(FortMcpContext_GetRestXpBonusPercent, ReturnValue) == 0x000000, "Member 'FortMcpContext_GetRestXpBonusPercent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpContext.GetSchematicXpBalance
// 0x0004 (0x0004 - 0x0000)
struct FortMcpContext_GetSchematicXpBalance final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_GetSchematicXpBalance) == 0x000004, "Wrong alignment on FortMcpContext_GetSchematicXpBalance");
static_assert(sizeof(FortMcpContext_GetSchematicXpBalance) == 0x000004, "Wrong size on FortMcpContext_GetSchematicXpBalance");
static_assert(offsetof(FortMcpContext_GetSchematicXpBalance, ReturnValue) == 0x000000, "Member 'FortMcpContext_GetSchematicXpBalance::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpContext.GetUpgradeXPBalance
// 0x0008 (0x0008 - 0x0000)
struct FortMcpContext_GetUpgradeXPBalance final
{
public:
	EFortItemType                                 ItemTypeToBeUpgraded;                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_GetUpgradeXPBalance) == 0x000004, "Wrong alignment on FortMcpContext_GetUpgradeXPBalance");
static_assert(sizeof(FortMcpContext_GetUpgradeXPBalance) == 0x000008, "Wrong size on FortMcpContext_GetUpgradeXPBalance");
static_assert(offsetof(FortMcpContext_GetUpgradeXPBalance, ItemTypeToBeUpgraded) == 0x000000, "Member 'FortMcpContext_GetUpgradeXPBalance::ItemTypeToBeUpgraded' has a wrong offset!");
static_assert(offsetof(FortMcpContext_GetUpgradeXPBalance, ReturnValue) == 0x000004, "Member 'FortMcpContext_GetUpgradeXPBalance::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpContext.GetXpBoostBalance
// 0x0004 (0x0004 - 0x0000)
struct FortMcpContext_GetXpBoostBalance final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_GetXpBoostBalance) == 0x000004, "Wrong alignment on FortMcpContext_GetXpBoostBalance");
static_assert(sizeof(FortMcpContext_GetXpBoostBalance) == 0x000004, "Wrong size on FortMcpContext_GetXpBoostBalance");
static_assert(offsetof(FortMcpContext_GetXpBoostBalance, ReturnValue) == 0x000000, "Member 'FortMcpContext_GetXpBoostBalance::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpContext.HasPendingMissionAlertRewards
// 0x0001 (0x0001 - 0x0000)
struct FortMcpContext_HasPendingMissionAlertRewards final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_HasPendingMissionAlertRewards) == 0x000001, "Wrong alignment on FortMcpContext_HasPendingMissionAlertRewards");
static_assert(sizeof(FortMcpContext_HasPendingMissionAlertRewards) == 0x000001, "Wrong size on FortMcpContext_HasPendingMissionAlertRewards");
static_assert(offsetof(FortMcpContext_HasPendingMissionAlertRewards, ReturnValue) == 0x000000, "Member 'FortMcpContext_HasPendingMissionAlertRewards::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpContext.IsDailyRewardAvailable
// 0x0008 (0x0008 - 0x0000)
struct FortMcpContext_IsDailyRewardAvailable final
{
public:
	int32                                         OutMinutesUntilNextReward;                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMcpContext_IsDailyRewardAvailable) == 0x000004, "Wrong alignment on FortMcpContext_IsDailyRewardAvailable");
static_assert(sizeof(FortMcpContext_IsDailyRewardAvailable) == 0x000008, "Wrong size on FortMcpContext_IsDailyRewardAvailable");
static_assert(offsetof(FortMcpContext_IsDailyRewardAvailable, OutMinutesUntilNextReward) == 0x000000, "Member 'FortMcpContext_IsDailyRewardAvailable::OutMinutesUntilNextReward' has a wrong offset!");
static_assert(offsetof(FortMcpContext_IsDailyRewardAvailable, ReturnValue) == 0x000004, "Member 'FortMcpContext_IsDailyRewardAvailable::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpContext.IsLocalPlayersUniqueID
// 0x0030 (0x0030 - 0x0000)
struct FortMcpContext_IsLocalPlayersUniqueID final
{
public:
	struct FUniqueNetIdRepl                       PlayerID;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMcpContext_IsLocalPlayersUniqueID) == 0x000008, "Wrong alignment on FortMcpContext_IsLocalPlayersUniqueID");
static_assert(sizeof(FortMcpContext_IsLocalPlayersUniqueID) == 0x000030, "Wrong size on FortMcpContext_IsLocalPlayersUniqueID");
static_assert(offsetof(FortMcpContext_IsLocalPlayersUniqueID, PlayerID) == 0x000000, "Member 'FortMcpContext_IsLocalPlayersUniqueID::PlayerID' has a wrong offset!");
static_assert(offsetof(FortMcpContext_IsLocalPlayersUniqueID, ReturnValue) == 0x000028, "Member 'FortMcpContext_IsLocalPlayersUniqueID::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpProfileQuest.ClaimQuestReward
// 0x0090 (0x0090 - 0x0000)
struct FortMcpProfileQuest_ClaimQuestReward final
{
public:
	class FString                                 QuestId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectedRewardIndex;                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FClientUrlContext                      Context;                                           // 0x0020(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileQuest_ClaimQuestReward) == 0x000010, "Wrong alignment on FortMcpProfileQuest_ClaimQuestReward");
static_assert(sizeof(FortMcpProfileQuest_ClaimQuestReward) == 0x000090, "Wrong size on FortMcpProfileQuest_ClaimQuestReward");
static_assert(offsetof(FortMcpProfileQuest_ClaimQuestReward, QuestId) == 0x000000, "Member 'FortMcpProfileQuest_ClaimQuestReward::QuestId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileQuest_ClaimQuestReward, SelectedRewardIndex) == 0x000010, "Member 'FortMcpProfileQuest_ClaimQuestReward::SelectedRewardIndex' has a wrong offset!");
static_assert(offsetof(FortMcpProfileQuest_ClaimQuestReward, Context) == 0x000020, "Member 'FortMcpProfileQuest_ClaimQuestReward::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileQuest.ClientQuestLogin
// 0x0070 (0x0070 - 0x0000)
struct FortMcpProfileQuest_ClientQuestLogin final
{
public:
	struct FClientUrlContext                      Context;                                           // 0x0000(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileQuest_ClientQuestLogin) == 0x000010, "Wrong alignment on FortMcpProfileQuest_ClientQuestLogin");
static_assert(sizeof(FortMcpProfileQuest_ClientQuestLogin) == 0x000070, "Wrong size on FortMcpProfileQuest_ClientQuestLogin");
static_assert(offsetof(FortMcpProfileQuest_ClientQuestLogin, Context) == 0x000000, "Member 'FortMcpProfileQuest_ClientQuestLogin::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileQuest.FortRerollDailyQuest
// 0x0080 (0x0080 - 0x0000)
struct FortMcpProfileQuest_FortRerollDailyQuest final
{
public:
	class FString                                 QuestId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0010(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileQuest_FortRerollDailyQuest) == 0x000010, "Wrong alignment on FortMcpProfileQuest_FortRerollDailyQuest");
static_assert(sizeof(FortMcpProfileQuest_FortRerollDailyQuest) == 0x000080, "Wrong size on FortMcpProfileQuest_FortRerollDailyQuest");
static_assert(offsetof(FortMcpProfileQuest_FortRerollDailyQuest, QuestId) == 0x000000, "Member 'FortMcpProfileQuest_FortRerollDailyQuest::QuestId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileQuest_FortRerollDailyQuest, Context) == 0x000010, "Member 'FortMcpProfileQuest_FortRerollDailyQuest::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileQuest.MarkItemSeen
// 0x0080 (0x0080 - 0x0000)
struct FortMcpProfileQuest_MarkItemSeen final
{
public:
	TArray<class FString>                         ItemIds;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0010(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileQuest_MarkItemSeen) == 0x000010, "Wrong alignment on FortMcpProfileQuest_MarkItemSeen");
static_assert(sizeof(FortMcpProfileQuest_MarkItemSeen) == 0x000080, "Wrong size on FortMcpProfileQuest_MarkItemSeen");
static_assert(offsetof(FortMcpProfileQuest_MarkItemSeen, ItemIds) == 0x000000, "Member 'FortMcpProfileQuest_MarkItemSeen::ItemIds' has a wrong offset!");
static_assert(offsetof(FortMcpProfileQuest_MarkItemSeen, Context) == 0x000010, "Member 'FortMcpProfileQuest_MarkItemSeen::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileQuest.MarkNewQuestNotificationSent
// 0x0080 (0x0080 - 0x0000)
struct FortMcpProfileQuest_MarkNewQuestNotificationSent final
{
public:
	TArray<class FString>                         ItemIds;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0010(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileQuest_MarkNewQuestNotificationSent) == 0x000010, "Wrong alignment on FortMcpProfileQuest_MarkNewQuestNotificationSent");
static_assert(sizeof(FortMcpProfileQuest_MarkNewQuestNotificationSent) == 0x000080, "Wrong size on FortMcpProfileQuest_MarkNewQuestNotificationSent");
static_assert(offsetof(FortMcpProfileQuest_MarkNewQuestNotificationSent, ItemIds) == 0x000000, "Member 'FortMcpProfileQuest_MarkNewQuestNotificationSent::ItemIds' has a wrong offset!");
static_assert(offsetof(FortMcpProfileQuest_MarkNewQuestNotificationSent, Context) == 0x000010, "Member 'FortMcpProfileQuest_MarkNewQuestNotificationSent::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileQuest.ServerQuestLogin
// 0x0080 (0x0080 - 0x0000)
struct FortMcpProfileQuest_ServerQuestLogin final
{
public:
	class FString                                 MatchmakingSessionId;                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDedicatedServerUrlContext             Context;                                           // 0x0010(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileQuest_ServerQuestLogin) == 0x000010, "Wrong alignment on FortMcpProfileQuest_ServerQuestLogin");
static_assert(sizeof(FortMcpProfileQuest_ServerQuestLogin) == 0x000080, "Wrong size on FortMcpProfileQuest_ServerQuestLogin");
static_assert(offsetof(FortMcpProfileQuest_ServerQuestLogin, MatchmakingSessionId) == 0x000000, "Member 'FortMcpProfileQuest_ServerQuestLogin::MatchmakingSessionId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileQuest_ServerQuestLogin, Context) == 0x000010, "Member 'FortMcpProfileQuest_ServerQuestLogin::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileQuest.SetPinnedQuests
// 0x0080 (0x0080 - 0x0000)
struct FortMcpProfileQuest_SetPinnedQuests final
{
public:
	TArray<class FString>                         PinnedQuestIds;                                    // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0010(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileQuest_SetPinnedQuests) == 0x000010, "Wrong alignment on FortMcpProfileQuest_SetPinnedQuests");
static_assert(sizeof(FortMcpProfileQuest_SetPinnedQuests) == 0x000080, "Wrong size on FortMcpProfileQuest_SetPinnedQuests");
static_assert(offsetof(FortMcpProfileQuest_SetPinnedQuests, PinnedQuestIds) == 0x000000, "Member 'FortMcpProfileQuest_SetPinnedQuests::PinnedQuestIds' has a wrong offset!");
static_assert(offsetof(FortMcpProfileQuest_SetPinnedQuests, Context) == 0x000010, "Member 'FortMcpProfileQuest_SetPinnedQuests::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileQuest.UpdateQuestClientObjectives
// 0x0080 (0x0080 - 0x0000)
struct FortMcpProfileQuest_UpdateQuestClientObjectives final
{
public:
	TArray<struct FFortQuestObjectiveCompletion>  Advance;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0010(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileQuest_UpdateQuestClientObjectives) == 0x000010, "Wrong alignment on FortMcpProfileQuest_UpdateQuestClientObjectives");
static_assert(sizeof(FortMcpProfileQuest_UpdateQuestClientObjectives) == 0x000080, "Wrong size on FortMcpProfileQuest_UpdateQuestClientObjectives");
static_assert(offsetof(FortMcpProfileQuest_UpdateQuestClientObjectives, Advance) == 0x000000, "Member 'FortMcpProfileQuest_UpdateQuestClientObjectives::Advance' has a wrong offset!");
static_assert(offsetof(FortMcpProfileQuest_UpdateQuestClientObjectives, Context) == 0x000010, "Member 'FortMcpProfileQuest_UpdateQuestClientObjectives::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileQuest.UpdateQuests
// 0x0080 (0x0080 - 0x0000)
struct FortMcpProfileQuest_UpdateQuests final
{
public:
	TArray<struct FFortQuestObjectiveCompletion>  Advance;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FDedicatedServerUrlContext             Context;                                           // 0x0010(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileQuest_UpdateQuests) == 0x000010, "Wrong alignment on FortMcpProfileQuest_UpdateQuests");
static_assert(sizeof(FortMcpProfileQuest_UpdateQuests) == 0x000080, "Wrong size on FortMcpProfileQuest_UpdateQuests");
static_assert(offsetof(FortMcpProfileQuest_UpdateQuests, Advance) == 0x000000, "Member 'FortMcpProfileQuest_UpdateQuests::Advance' has a wrong offset!");
static_assert(offsetof(FortMcpProfileQuest_UpdateQuests, Context) == 0x000010, "Member 'FortMcpProfileQuest_UpdateQuests::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.AbandonExpedition
// 0x0080 (0x0080 - 0x0000)
struct FortMcpProfileAccount_AbandonExpedition final
{
public:
	class FString                                 ExpeditionId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0010(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_AbandonExpedition) == 0x000010, "Wrong alignment on FortMcpProfileAccount_AbandonExpedition");
static_assert(sizeof(FortMcpProfileAccount_AbandonExpedition) == 0x000080, "Wrong size on FortMcpProfileAccount_AbandonExpedition");
static_assert(offsetof(FortMcpProfileAccount_AbandonExpedition, ExpeditionId) == 0x000000, "Member 'FortMcpProfileAccount_AbandonExpedition::ExpeditionId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_AbandonExpedition, Context) == 0x000010, "Member 'FortMcpProfileAccount_AbandonExpedition::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.ActivateConsumable
// 0x0090 (0x0090 - 0x0000)
struct FortMcpProfileAccount_ActivateConsumable final
{
public:
	class FString                                 TargetItemId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetAccountId;                                   // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0020(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_ActivateConsumable) == 0x000010, "Wrong alignment on FortMcpProfileAccount_ActivateConsumable");
static_assert(sizeof(FortMcpProfileAccount_ActivateConsumable) == 0x000090, "Wrong size on FortMcpProfileAccount_ActivateConsumable");
static_assert(offsetof(FortMcpProfileAccount_ActivateConsumable, TargetItemId) == 0x000000, "Member 'FortMcpProfileAccount_ActivateConsumable::TargetItemId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_ActivateConsumable, TargetAccountId) == 0x000010, "Member 'FortMcpProfileAccount_ActivateConsumable::TargetAccountId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_ActivateConsumable, Context) == 0x000020, "Member 'FortMcpProfileAccount_ActivateConsumable::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.ApplyAlteration
// 0x0090 (0x0090 - 0x0000)
struct FortMcpProfileAccount_ApplyAlteration final
{
public:
	class FString                                 TargetItemId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AlterationItemId;                                  // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0020(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_ApplyAlteration) == 0x000010, "Wrong alignment on FortMcpProfileAccount_ApplyAlteration");
static_assert(sizeof(FortMcpProfileAccount_ApplyAlteration) == 0x000090, "Wrong size on FortMcpProfileAccount_ApplyAlteration");
static_assert(offsetof(FortMcpProfileAccount_ApplyAlteration, TargetItemId) == 0x000000, "Member 'FortMcpProfileAccount_ApplyAlteration::TargetItemId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_ApplyAlteration, AlterationItemId) == 0x000010, "Member 'FortMcpProfileAccount_ApplyAlteration::AlterationItemId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_ApplyAlteration, Context) == 0x000020, "Member 'FortMcpProfileAccount_ApplyAlteration::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.AssignWorkerToSquad
// 0x00A0 (0x00A0 - 0x0000)
struct FortMcpProfileAccount_AssignWorkerToSquad final
{
public:
	class FString                                 CharacterId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SquadId;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0xC];                                       // 0x0024(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FClientUrlContext                      Context;                                           // 0x0030(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_AssignWorkerToSquad) == 0x000010, "Wrong alignment on FortMcpProfileAccount_AssignWorkerToSquad");
static_assert(sizeof(FortMcpProfileAccount_AssignWorkerToSquad) == 0x0000A0, "Wrong size on FortMcpProfileAccount_AssignWorkerToSquad");
static_assert(offsetof(FortMcpProfileAccount_AssignWorkerToSquad, CharacterId) == 0x000000, "Member 'FortMcpProfileAccount_AssignWorkerToSquad::CharacterId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_AssignWorkerToSquad, SquadId) == 0x000010, "Member 'FortMcpProfileAccount_AssignWorkerToSquad::SquadId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_AssignWorkerToSquad, SlotIndex) == 0x000020, "Member 'FortMcpProfileAccount_AssignWorkerToSquad::SlotIndex' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_AssignWorkerToSquad, Context) == 0x000030, "Member 'FortMcpProfileAccount_AssignWorkerToSquad::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.AssignWorkerToSquadBatch
// 0x00A0 (0x00A0 - 0x0000)
struct FortMcpProfileAccount_AssignWorkerToSquadBatch final
{
public:
	TArray<class FString>                         CharacterIds;                                      // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         SquadIds;                                          // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 SlotIndices;                                       // 0x0020(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0030(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_AssignWorkerToSquadBatch) == 0x000010, "Wrong alignment on FortMcpProfileAccount_AssignWorkerToSquadBatch");
static_assert(sizeof(FortMcpProfileAccount_AssignWorkerToSquadBatch) == 0x0000A0, "Wrong size on FortMcpProfileAccount_AssignWorkerToSquadBatch");
static_assert(offsetof(FortMcpProfileAccount_AssignWorkerToSquadBatch, CharacterIds) == 0x000000, "Member 'FortMcpProfileAccount_AssignWorkerToSquadBatch::CharacterIds' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_AssignWorkerToSquadBatch, SquadIds) == 0x000010, "Member 'FortMcpProfileAccount_AssignWorkerToSquadBatch::SquadIds' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_AssignWorkerToSquadBatch, SlotIndices) == 0x000020, "Member 'FortMcpProfileAccount_AssignWorkerToSquadBatch::SlotIndices' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_AssignWorkerToSquadBatch, Context) == 0x000030, "Member 'FortMcpProfileAccount_AssignWorkerToSquadBatch::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.ClaimCollectedResources
// 0x0080 (0x0080 - 0x0000)
struct FortMcpProfileAccount_ClaimCollectedResources final
{
public:
	TArray<class FString>                         CollectorsToClaim;                                 // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0010(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_ClaimCollectedResources) == 0x000010, "Wrong alignment on FortMcpProfileAccount_ClaimCollectedResources");
static_assert(sizeof(FortMcpProfileAccount_ClaimCollectedResources) == 0x000080, "Wrong size on FortMcpProfileAccount_ClaimCollectedResources");
static_assert(offsetof(FortMcpProfileAccount_ClaimCollectedResources, CollectorsToClaim) == 0x000000, "Member 'FortMcpProfileAccount_ClaimCollectedResources::CollectorsToClaim' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_ClaimCollectedResources, Context) == 0x000010, "Member 'FortMcpProfileAccount_ClaimCollectedResources::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.ClaimCollectionBookRewards
// 0x0080 (0x0080 - 0x0000)
struct FortMcpProfileAccount_ClaimCollectionBookRewards final
{
public:
	int32                                         RequiredXp;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectedRewardIndex;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FClientUrlContext                      Context;                                           // 0x0010(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_ClaimCollectionBookRewards) == 0x000010, "Wrong alignment on FortMcpProfileAccount_ClaimCollectionBookRewards");
static_assert(sizeof(FortMcpProfileAccount_ClaimCollectionBookRewards) == 0x000080, "Wrong size on FortMcpProfileAccount_ClaimCollectionBookRewards");
static_assert(offsetof(FortMcpProfileAccount_ClaimCollectionBookRewards, RequiredXp) == 0x000000, "Member 'FortMcpProfileAccount_ClaimCollectionBookRewards::RequiredXp' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_ClaimCollectionBookRewards, SelectedRewardIndex) == 0x000004, "Member 'FortMcpProfileAccount_ClaimCollectionBookRewards::SelectedRewardIndex' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_ClaimCollectionBookRewards, Context) == 0x000010, "Member 'FortMcpProfileAccount_ClaimCollectionBookRewards::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.ClaimLoginReward
// 0x0070 (0x0070 - 0x0000)
struct FortMcpProfileAccount_ClaimLoginReward final
{
public:
	struct FClientUrlContext                      Context;                                           // 0x0000(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_ClaimLoginReward) == 0x000010, "Wrong alignment on FortMcpProfileAccount_ClaimLoginReward");
static_assert(sizeof(FortMcpProfileAccount_ClaimLoginReward) == 0x000070, "Wrong size on FortMcpProfileAccount_ClaimLoginReward");
static_assert(offsetof(FortMcpProfileAccount_ClaimLoginReward, Context) == 0x000000, "Member 'FortMcpProfileAccount_ClaimLoginReward::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.ClaimMissionAlertRewards
// 0x0070 (0x0070 - 0x0000)
struct FortMcpProfileAccount_ClaimMissionAlertRewards final
{
public:
	struct FClientUrlContext                      Context;                                           // 0x0000(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_ClaimMissionAlertRewards) == 0x000010, "Wrong alignment on FortMcpProfileAccount_ClaimMissionAlertRewards");
static_assert(sizeof(FortMcpProfileAccount_ClaimMissionAlertRewards) == 0x000070, "Wrong size on FortMcpProfileAccount_ClaimMissionAlertRewards");
static_assert(offsetof(FortMcpProfileAccount_ClaimMissionAlertRewards, Context) == 0x000000, "Member 'FortMcpProfileAccount_ClaimMissionAlertRewards::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.CollectExpedition
// 0x0090 (0x0090 - 0x0000)
struct FortMcpProfileAccount_CollectExpedition final
{
public:
	class FString                                 ExpeditionTemplate;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExpeditionId;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0020(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_CollectExpedition) == 0x000010, "Wrong alignment on FortMcpProfileAccount_CollectExpedition");
static_assert(sizeof(FortMcpProfileAccount_CollectExpedition) == 0x000090, "Wrong size on FortMcpProfileAccount_CollectExpedition");
static_assert(offsetof(FortMcpProfileAccount_CollectExpedition, ExpeditionTemplate) == 0x000000, "Member 'FortMcpProfileAccount_CollectExpedition::ExpeditionTemplate' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_CollectExpedition, ExpeditionId) == 0x000010, "Member 'FortMcpProfileAccount_CollectExpedition::ExpeditionId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_CollectExpedition, Context) == 0x000020, "Member 'FortMcpProfileAccount_CollectExpedition::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.ConsumeItems
// 0x00A0 (0x00A0 - 0x0000)
struct FortMcpProfileAccount_ConsumeItems final
{
public:
	TArray<class FString>                         ItemsToConsumeIds;                                 // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 ItemCountsToConsume;                               // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ConsumeReason;                                     // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDedicatedServerUrlContext             Context;                                           // 0x0030(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_ConsumeItems) == 0x000010, "Wrong alignment on FortMcpProfileAccount_ConsumeItems");
static_assert(sizeof(FortMcpProfileAccount_ConsumeItems) == 0x0000A0, "Wrong size on FortMcpProfileAccount_ConsumeItems");
static_assert(offsetof(FortMcpProfileAccount_ConsumeItems, ItemsToConsumeIds) == 0x000000, "Member 'FortMcpProfileAccount_ConsumeItems::ItemsToConsumeIds' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_ConsumeItems, ItemCountsToConsume) == 0x000010, "Member 'FortMcpProfileAccount_ConsumeItems::ItemCountsToConsume' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_ConsumeItems, ConsumeReason) == 0x000020, "Member 'FortMcpProfileAccount_ConsumeItems::ConsumeReason' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_ConsumeItems, Context) == 0x000030, "Member 'FortMcpProfileAccount_ConsumeItems::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.ConvertItem
// 0x0090 (0x0090 - 0x0000)
struct FortMcpProfileAccount_ConvertItem final
{
public:
	class FString                                 TargetItemId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConversionIndex;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FClientUrlContext                      Context;                                           // 0x0020(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_ConvertItem) == 0x000010, "Wrong alignment on FortMcpProfileAccount_ConvertItem");
static_assert(sizeof(FortMcpProfileAccount_ConvertItem) == 0x000090, "Wrong size on FortMcpProfileAccount_ConvertItem");
static_assert(offsetof(FortMcpProfileAccount_ConvertItem, TargetItemId) == 0x000000, "Member 'FortMcpProfileAccount_ConvertItem::TargetItemId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_ConvertItem, ConversionIndex) == 0x000010, "Member 'FortMcpProfileAccount_ConvertItem::ConversionIndex' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_ConvertItem, Context) == 0x000020, "Member 'FortMcpProfileAccount_ConvertItem::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.EarnScore
// 0x0090 (0x0090 - 0x0000)
struct FortMcpProfileAccount_EarnScore final
{
public:
	TArray<struct FAccountIdAndScore>             PlayersAndScores;                                  // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 MatchmakingSessionId;                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDedicatedServerUrlContext             Context;                                           // 0x0020(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_EarnScore) == 0x000010, "Wrong alignment on FortMcpProfileAccount_EarnScore");
static_assert(sizeof(FortMcpProfileAccount_EarnScore) == 0x000090, "Wrong size on FortMcpProfileAccount_EarnScore");
static_assert(offsetof(FortMcpProfileAccount_EarnScore, PlayersAndScores) == 0x000000, "Member 'FortMcpProfileAccount_EarnScore::PlayersAndScores' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_EarnScore, MatchmakingSessionId) == 0x000010, "Member 'FortMcpProfileAccount_EarnScore::MatchmakingSessionId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_EarnScore, Context) == 0x000020, "Member 'FortMcpProfileAccount_EarnScore::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.EndPrimaryMission
// 0x00D0 (0x00D0 - 0x0000)
struct FortMcpProfileAccount_EndPrimaryMission final
{
public:
	TArray<struct FFortQuestObjectiveCompletion>  Advance;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 MatchmakingSessionId;                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MissionName;                                       // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MissionStatus;                                     // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortQuestEarnedBadgeData>      EarnedBadgeData;                                   // 0x0040(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         NumMissionPoints;                                  // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCriticalMatchBonus;                               // 0x0054(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0xB];                                       // 0x0055(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDedicatedServerUrlContext             Context;                                           // 0x0060(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_EndPrimaryMission) == 0x000010, "Wrong alignment on FortMcpProfileAccount_EndPrimaryMission");
static_assert(sizeof(FortMcpProfileAccount_EndPrimaryMission) == 0x0000D0, "Wrong size on FortMcpProfileAccount_EndPrimaryMission");
static_assert(offsetof(FortMcpProfileAccount_EndPrimaryMission, Advance) == 0x000000, "Member 'FortMcpProfileAccount_EndPrimaryMission::Advance' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_EndPrimaryMission, MatchmakingSessionId) == 0x000010, "Member 'FortMcpProfileAccount_EndPrimaryMission::MatchmakingSessionId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_EndPrimaryMission, MissionName) == 0x000020, "Member 'FortMcpProfileAccount_EndPrimaryMission::MissionName' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_EndPrimaryMission, MissionStatus) == 0x000030, "Member 'FortMcpProfileAccount_EndPrimaryMission::MissionStatus' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_EndPrimaryMission, EarnedBadgeData) == 0x000040, "Member 'FortMcpProfileAccount_EndPrimaryMission::EarnedBadgeData' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_EndPrimaryMission, NumMissionPoints) == 0x000050, "Member 'FortMcpProfileAccount_EndPrimaryMission::NumMissionPoints' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_EndPrimaryMission, bCriticalMatchBonus) == 0x000054, "Member 'FortMcpProfileAccount_EndPrimaryMission::bCriticalMatchBonus' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_EndPrimaryMission, Context) == 0x000060, "Member 'FortMcpProfileAccount_EndPrimaryMission::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.EquipCharCosmetic
// 0x00A0 (0x00A0 - 0x0000)
struct FortMcpProfileAccount_EquipCharCosmetic final
{
public:
	class FString                                 CharacterId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CosmeticId;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TypeId;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0xC];                                       // 0x0024(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FClientUrlContext                      Context;                                           // 0x0030(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_EquipCharCosmetic) == 0x000010, "Wrong alignment on FortMcpProfileAccount_EquipCharCosmetic");
static_assert(sizeof(FortMcpProfileAccount_EquipCharCosmetic) == 0x0000A0, "Wrong size on FortMcpProfileAccount_EquipCharCosmetic");
static_assert(offsetof(FortMcpProfileAccount_EquipCharCosmetic, CharacterId) == 0x000000, "Member 'FortMcpProfileAccount_EquipCharCosmetic::CharacterId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_EquipCharCosmetic, CosmeticId) == 0x000010, "Member 'FortMcpProfileAccount_EquipCharCosmetic::CosmeticId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_EquipCharCosmetic, TypeId) == 0x000020, "Member 'FortMcpProfileAccount_EquipCharCosmetic::TypeId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_EquipCharCosmetic, Context) == 0x000030, "Member 'FortMcpProfileAccount_EquipCharCosmetic::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.IncrementNamedCounterStat
// 0x0080 (0x0080 - 0x0000)
struct FortMcpProfileAccount_IncrementNamedCounterStat final
{
public:
	class FString                                 CounterName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0010(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_IncrementNamedCounterStat) == 0x000010, "Wrong alignment on FortMcpProfileAccount_IncrementNamedCounterStat");
static_assert(sizeof(FortMcpProfileAccount_IncrementNamedCounterStat) == 0x000080, "Wrong size on FortMcpProfileAccount_IncrementNamedCounterStat");
static_assert(offsetof(FortMcpProfileAccount_IncrementNamedCounterStat, CounterName) == 0x000000, "Member 'FortMcpProfileAccount_IncrementNamedCounterStat::CounterName' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_IncrementNamedCounterStat, Context) == 0x000010, "Member 'FortMcpProfileAccount_IncrementNamedCounterStat::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.IssueFriendCode
// 0x0080 (0x0080 - 0x0000)
struct FortMcpProfileAccount_IssueFriendCode final
{
public:
	class FString                                 CodeTokenType;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0010(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_IssueFriendCode) == 0x000010, "Wrong alignment on FortMcpProfileAccount_IssueFriendCode");
static_assert(sizeof(FortMcpProfileAccount_IssueFriendCode) == 0x000080, "Wrong size on FortMcpProfileAccount_IssueFriendCode");
static_assert(offsetof(FortMcpProfileAccount_IssueFriendCode, CodeTokenType) == 0x000000, "Member 'FortMcpProfileAccount_IssueFriendCode::CodeTokenType' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_IssueFriendCode, Context) == 0x000010, "Member 'FortMcpProfileAccount_IssueFriendCode::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.ModifyMission
// 0x0090 (0x0090 - 0x0000)
struct FortMcpProfileAccount_ModifyMission final
{
public:
	class FString                                 MatchmakingSessionId;                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Difficulty;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDedicatedServerUrlContext             Context;                                           // 0x0020(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_ModifyMission) == 0x000010, "Wrong alignment on FortMcpProfileAccount_ModifyMission");
static_assert(sizeof(FortMcpProfileAccount_ModifyMission) == 0x000090, "Wrong size on FortMcpProfileAccount_ModifyMission");
static_assert(offsetof(FortMcpProfileAccount_ModifyMission, MatchmakingSessionId) == 0x000000, "Member 'FortMcpProfileAccount_ModifyMission::MatchmakingSessionId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_ModifyMission, Difficulty) == 0x000010, "Member 'FortMcpProfileAccount_ModifyMission::Difficulty' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_ModifyMission, Context) == 0x000020, "Member 'FortMcpProfileAccount_ModifyMission::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.OpenCardPack
// 0x0090 (0x0090 - 0x0000)
struct FortMcpProfileAccount_OpenCardPack final
{
public:
	class FString                                 CardPackItemId;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectionIdx;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FClientUrlContext                      Context;                                           // 0x0020(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_OpenCardPack) == 0x000010, "Wrong alignment on FortMcpProfileAccount_OpenCardPack");
static_assert(sizeof(FortMcpProfileAccount_OpenCardPack) == 0x000090, "Wrong size on FortMcpProfileAccount_OpenCardPack");
static_assert(offsetof(FortMcpProfileAccount_OpenCardPack, CardPackItemId) == 0x000000, "Member 'FortMcpProfileAccount_OpenCardPack::CardPackItemId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_OpenCardPack, SelectionIdx) == 0x000010, "Member 'FortMcpProfileAccount_OpenCardPack::SelectionIdx' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_OpenCardPack, Context) == 0x000020, "Member 'FortMcpProfileAccount_OpenCardPack::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.OpenCardPackBatch
// 0x0080 (0x0080 - 0x0000)
struct FortMcpProfileAccount_OpenCardPackBatch final
{
public:
	TArray<class FString>                         CardPackItemIds;                                   // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0010(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_OpenCardPackBatch) == 0x000010, "Wrong alignment on FortMcpProfileAccount_OpenCardPackBatch");
static_assert(sizeof(FortMcpProfileAccount_OpenCardPackBatch) == 0x000080, "Wrong size on FortMcpProfileAccount_OpenCardPackBatch");
static_assert(offsetof(FortMcpProfileAccount_OpenCardPackBatch, CardPackItemIds) == 0x000000, "Member 'FortMcpProfileAccount_OpenCardPackBatch::CardPackItemIds' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_OpenCardPackBatch, Context) == 0x000010, "Member 'FortMcpProfileAccount_OpenCardPackBatch::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.PurchaseHomebaseNode
// 0x0080 (0x0080 - 0x0000)
struct FortMcpProfileAccount_PurchaseHomebaseNode final
{
public:
	class FString                                 NodeID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0010(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_PurchaseHomebaseNode) == 0x000010, "Wrong alignment on FortMcpProfileAccount_PurchaseHomebaseNode");
static_assert(sizeof(FortMcpProfileAccount_PurchaseHomebaseNode) == 0x000080, "Wrong size on FortMcpProfileAccount_PurchaseHomebaseNode");
static_assert(offsetof(FortMcpProfileAccount_PurchaseHomebaseNode, NodeID) == 0x000000, "Member 'FortMcpProfileAccount_PurchaseHomebaseNode::NodeID' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_PurchaseHomebaseNode, Context) == 0x000010, "Member 'FortMcpProfileAccount_PurchaseHomebaseNode::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.RecycleItem
// 0x0080 (0x0080 - 0x0000)
struct FortMcpProfileAccount_RecycleItem final
{
public:
	class FString                                 TargetItemId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0010(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_RecycleItem) == 0x000010, "Wrong alignment on FortMcpProfileAccount_RecycleItem");
static_assert(sizeof(FortMcpProfileAccount_RecycleItem) == 0x000080, "Wrong size on FortMcpProfileAccount_RecycleItem");
static_assert(offsetof(FortMcpProfileAccount_RecycleItem, TargetItemId) == 0x000000, "Member 'FortMcpProfileAccount_RecycleItem::TargetItemId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_RecycleItem, Context) == 0x000010, "Member 'FortMcpProfileAccount_RecycleItem::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.RecycleItemBatch
// 0x0080 (0x0080 - 0x0000)
struct FortMcpProfileAccount_RecycleItemBatch final
{
public:
	TArray<class FString>                         TargetItemIds;                                     // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0010(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_RecycleItemBatch) == 0x000010, "Wrong alignment on FortMcpProfileAccount_RecycleItemBatch");
static_assert(sizeof(FortMcpProfileAccount_RecycleItemBatch) == 0x000080, "Wrong size on FortMcpProfileAccount_RecycleItemBatch");
static_assert(offsetof(FortMcpProfileAccount_RecycleItemBatch, TargetItemIds) == 0x000000, "Member 'FortMcpProfileAccount_RecycleItemBatch::TargetItemIds' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_RecycleItemBatch, Context) == 0x000010, "Member 'FortMcpProfileAccount_RecycleItemBatch::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.RefreshExpeditions
// 0x0070 (0x0070 - 0x0000)
struct FortMcpProfileAccount_RefreshExpeditions final
{
public:
	struct FClientUrlContext                      Context;                                           // 0x0000(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_RefreshExpeditions) == 0x000010, "Wrong alignment on FortMcpProfileAccount_RefreshExpeditions");
static_assert(sizeof(FortMcpProfileAccount_RefreshExpeditions) == 0x000070, "Wrong size on FortMcpProfileAccount_RefreshExpeditions");
static_assert(offsetof(FortMcpProfileAccount_RefreshExpeditions, Context) == 0x000000, "Member 'FortMcpProfileAccount_RefreshExpeditions::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.SetDefaultHeroSquad
// 0x0080 (0x0080 - 0x0000)
struct FortMcpProfileAccount_SetDefaultHeroSquad final
{
public:
	class FString                                 DefaultHeroSquadId;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0010(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_SetDefaultHeroSquad) == 0x000010, "Wrong alignment on FortMcpProfileAccount_SetDefaultHeroSquad");
static_assert(sizeof(FortMcpProfileAccount_SetDefaultHeroSquad) == 0x000080, "Wrong size on FortMcpProfileAccount_SetDefaultHeroSquad");
static_assert(offsetof(FortMcpProfileAccount_SetDefaultHeroSquad, DefaultHeroSquadId) == 0x000000, "Member 'FortMcpProfileAccount_SetDefaultHeroSquad::DefaultHeroSquadId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_SetDefaultHeroSquad, Context) == 0x000010, "Member 'FortMcpProfileAccount_SetDefaultHeroSquad::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.SetGameplayStats
// 0x0080 (0x0080 - 0x0000)
struct FortMcpProfileAccount_SetGameplayStats final
{
public:
	TArray<struct FFortPersistentGameplayStatValue> GameplayStats;                                     // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0010(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_SetGameplayStats) == 0x000010, "Wrong alignment on FortMcpProfileAccount_SetGameplayStats");
static_assert(sizeof(FortMcpProfileAccount_SetGameplayStats) == 0x000080, "Wrong size on FortMcpProfileAccount_SetGameplayStats");
static_assert(offsetof(FortMcpProfileAccount_SetGameplayStats, GameplayStats) == 0x000000, "Member 'FortMcpProfileAccount_SetGameplayStats::GameplayStats' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_SetGameplayStats, Context) == 0x000010, "Member 'FortMcpProfileAccount_SetGameplayStats::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.SetHeroModeLoadout
// 0x00A0 (0x00A0 - 0x0000)
struct FortMcpProfileAccount_SetHeroModeLoadout final
{
public:
	class FString                                 HeroId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortSavedModeLoadout                  ModeLoadout;                                       // 0x0010(0x0020)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0030(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_SetHeroModeLoadout) == 0x000010, "Wrong alignment on FortMcpProfileAccount_SetHeroModeLoadout");
static_assert(sizeof(FortMcpProfileAccount_SetHeroModeLoadout) == 0x0000A0, "Wrong size on FortMcpProfileAccount_SetHeroModeLoadout");
static_assert(offsetof(FortMcpProfileAccount_SetHeroModeLoadout, HeroId) == 0x000000, "Member 'FortMcpProfileAccount_SetHeroModeLoadout::HeroId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_SetHeroModeLoadout, ModeLoadout) == 0x000010, "Member 'FortMcpProfileAccount_SetHeroModeLoadout::ModeLoadout' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_SetHeroModeLoadout, Context) == 0x000030, "Member 'FortMcpProfileAccount_SetHeroModeLoadout::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.SetHomebaseBanner
// 0x0090 (0x0090 - 0x0000)
struct FortMcpProfileAccount_SetHomebaseBanner final
{
public:
	class FString                                 HomebaseBannerIconId;                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HomebaseBannerColorId;                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0020(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_SetHomebaseBanner) == 0x000010, "Wrong alignment on FortMcpProfileAccount_SetHomebaseBanner");
static_assert(sizeof(FortMcpProfileAccount_SetHomebaseBanner) == 0x000090, "Wrong size on FortMcpProfileAccount_SetHomebaseBanner");
static_assert(offsetof(FortMcpProfileAccount_SetHomebaseBanner, HomebaseBannerIconId) == 0x000000, "Member 'FortMcpProfileAccount_SetHomebaseBanner::HomebaseBannerIconId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_SetHomebaseBanner, HomebaseBannerColorId) == 0x000010, "Member 'FortMcpProfileAccount_SetHomebaseBanner::HomebaseBannerColorId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_SetHomebaseBanner, Context) == 0x000020, "Member 'FortMcpProfileAccount_SetHomebaseBanner::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.SetHomebaseMeta
// 0x0090 (0x0090 - 0x0000)
struct FortMcpProfileAccount_SetHomebaseMeta final
{
public:
	class FString                                 TownName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FlagPattern;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlagColor;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FClientUrlContext                      Context;                                           // 0x0020(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_SetHomebaseMeta) == 0x000010, "Wrong alignment on FortMcpProfileAccount_SetHomebaseMeta");
static_assert(sizeof(FortMcpProfileAccount_SetHomebaseMeta) == 0x000090, "Wrong size on FortMcpProfileAccount_SetHomebaseMeta");
static_assert(offsetof(FortMcpProfileAccount_SetHomebaseMeta, TownName) == 0x000000, "Member 'FortMcpProfileAccount_SetHomebaseMeta::TownName' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_SetHomebaseMeta, FlagPattern) == 0x000010, "Member 'FortMcpProfileAccount_SetHomebaseMeta::FlagPattern' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_SetHomebaseMeta, FlagColor) == 0x000014, "Member 'FortMcpProfileAccount_SetHomebaseMeta::FlagColor' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_SetHomebaseMeta, Context) == 0x000020, "Member 'FortMcpProfileAccount_SetHomebaseMeta::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.SetHomebaseName
// 0x0080 (0x0080 - 0x0000)
struct FortMcpProfileAccount_SetHomebaseName final
{
public:
	class FString                                 HomebaseName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0010(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_SetHomebaseName) == 0x000010, "Wrong alignment on FortMcpProfileAccount_SetHomebaseName");
static_assert(sizeof(FortMcpProfileAccount_SetHomebaseName) == 0x000080, "Wrong size on FortMcpProfileAccount_SetHomebaseName");
static_assert(offsetof(FortMcpProfileAccount_SetHomebaseName, HomebaseName) == 0x000000, "Member 'FortMcpProfileAccount_SetHomebaseName::HomebaseName' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_SetHomebaseName, Context) == 0x000010, "Member 'FortMcpProfileAccount_SetHomebaseName::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.SetItemFavoriteStatus
// 0x0090 (0x0090 - 0x0000)
struct FortMcpProfileAccount_SetItemFavoriteStatus final
{
public:
	class FString                                 TargetItemId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFavorite;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0xF];                                       // 0x0011(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FClientUrlContext                      Context;                                           // 0x0020(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_SetItemFavoriteStatus) == 0x000010, "Wrong alignment on FortMcpProfileAccount_SetItemFavoriteStatus");
static_assert(sizeof(FortMcpProfileAccount_SetItemFavoriteStatus) == 0x000090, "Wrong size on FortMcpProfileAccount_SetItemFavoriteStatus");
static_assert(offsetof(FortMcpProfileAccount_SetItemFavoriteStatus, TargetItemId) == 0x000000, "Member 'FortMcpProfileAccount_SetItemFavoriteStatus::TargetItemId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_SetItemFavoriteStatus, bFavorite) == 0x000010, "Member 'FortMcpProfileAccount_SetItemFavoriteStatus::bFavorite' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_SetItemFavoriteStatus, Context) == 0x000020, "Member 'FortMcpProfileAccount_SetItemFavoriteStatus::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.SetModeLoadout
// 0x00C0 (0x00C0 - 0x0000)
struct FortMcpProfileAccount_SetModeLoadout final
{
public:
	struct FFortSavedModeLoadout                  ModeLoadout;                                       // 0x0000(0x0020)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 HeroId;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortSavedModeLoadout                  HeroModeLoadout;                                   // 0x0030(0x0020)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0050(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_SetModeLoadout) == 0x000010, "Wrong alignment on FortMcpProfileAccount_SetModeLoadout");
static_assert(sizeof(FortMcpProfileAccount_SetModeLoadout) == 0x0000C0, "Wrong size on FortMcpProfileAccount_SetModeLoadout");
static_assert(offsetof(FortMcpProfileAccount_SetModeLoadout, ModeLoadout) == 0x000000, "Member 'FortMcpProfileAccount_SetModeLoadout::ModeLoadout' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_SetModeLoadout, HeroId) == 0x000020, "Member 'FortMcpProfileAccount_SetModeLoadout::HeroId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_SetModeLoadout, HeroModeLoadout) == 0x000030, "Member 'FortMcpProfileAccount_SetModeLoadout::HeroModeLoadout' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_SetModeLoadout, Context) == 0x000050, "Member 'FortMcpProfileAccount_SetModeLoadout::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.SetMtxPlatform
// 0x0080 (0x0080 - 0x0000)
struct FortMcpProfileAccount_SetMtxPlatform final
{
public:
	EFortMtxPlatform                              NewPlatform;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FClientUrlContext                      Context;                                           // 0x0010(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_SetMtxPlatform) == 0x000010, "Wrong alignment on FortMcpProfileAccount_SetMtxPlatform");
static_assert(sizeof(FortMcpProfileAccount_SetMtxPlatform) == 0x000080, "Wrong size on FortMcpProfileAccount_SetMtxPlatform");
static_assert(offsetof(FortMcpProfileAccount_SetMtxPlatform, NewPlatform) == 0x000000, "Member 'FortMcpProfileAccount_SetMtxPlatform::NewPlatform' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_SetMtxPlatform, Context) == 0x000010, "Member 'FortMcpProfileAccount_SetMtxPlatform::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.SkipTutorial
// 0x0070 (0x0070 - 0x0000)
struct FortMcpProfileAccount_SkipTutorial final
{
public:
	struct FClientUrlContext                      Context;                                           // 0x0000(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_SkipTutorial) == 0x000010, "Wrong alignment on FortMcpProfileAccount_SkipTutorial");
static_assert(sizeof(FortMcpProfileAccount_SkipTutorial) == 0x000070, "Wrong size on FortMcpProfileAccount_SkipTutorial");
static_assert(offsetof(FortMcpProfileAccount_SkipTutorial, Context) == 0x000000, "Member 'FortMcpProfileAccount_SkipTutorial::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.SlotItemInCollectionBook
// 0x0080 (0x0080 - 0x0000)
struct FortMcpProfileAccount_SlotItemInCollectionBook final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0010(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_SlotItemInCollectionBook) == 0x000010, "Wrong alignment on FortMcpProfileAccount_SlotItemInCollectionBook");
static_assert(sizeof(FortMcpProfileAccount_SlotItemInCollectionBook) == 0x000080, "Wrong size on FortMcpProfileAccount_SlotItemInCollectionBook");
static_assert(offsetof(FortMcpProfileAccount_SlotItemInCollectionBook, ItemId) == 0x000000, "Member 'FortMcpProfileAccount_SlotItemInCollectionBook::ItemId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_SlotItemInCollectionBook, Context) == 0x000010, "Member 'FortMcpProfileAccount_SlotItemInCollectionBook::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.StartExpedition
// 0x00B0 (0x00B0 - 0x0000)
struct FortMcpProfileAccount_StartExpedition final
{
public:
	class FString                                 ExpeditionId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SquadId;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ItemIds;                                           // 0x0020(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 SlotIndices;                                       // 0x0030(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0040(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_StartExpedition) == 0x000010, "Wrong alignment on FortMcpProfileAccount_StartExpedition");
static_assert(sizeof(FortMcpProfileAccount_StartExpedition) == 0x0000B0, "Wrong size on FortMcpProfileAccount_StartExpedition");
static_assert(offsetof(FortMcpProfileAccount_StartExpedition, ExpeditionId) == 0x000000, "Member 'FortMcpProfileAccount_StartExpedition::ExpeditionId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_StartExpedition, SquadId) == 0x000010, "Member 'FortMcpProfileAccount_StartExpedition::SquadId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_StartExpedition, ItemIds) == 0x000020, "Member 'FortMcpProfileAccount_StartExpedition::ItemIds' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_StartExpedition, SlotIndices) == 0x000030, "Member 'FortMcpProfileAccount_StartExpedition::SlotIndices' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_StartExpedition, Context) == 0x000040, "Member 'FortMcpProfileAccount_StartExpedition::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.StartPrimaryMission
// 0x00A0 (0x00A0 - 0x0000)
struct FortMcpProfileAccount_StartPrimaryMission final
{
public:
	TArray<struct FFortQuestObjectiveCompletion>  Advance;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 MatchmakingSessionId;                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MissionName;                                       // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDedicatedServerUrlContext             Context;                                           // 0x0030(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_StartPrimaryMission) == 0x000010, "Wrong alignment on FortMcpProfileAccount_StartPrimaryMission");
static_assert(sizeof(FortMcpProfileAccount_StartPrimaryMission) == 0x0000A0, "Wrong size on FortMcpProfileAccount_StartPrimaryMission");
static_assert(offsetof(FortMcpProfileAccount_StartPrimaryMission, Advance) == 0x000000, "Member 'FortMcpProfileAccount_StartPrimaryMission::Advance' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_StartPrimaryMission, MatchmakingSessionId) == 0x000010, "Member 'FortMcpProfileAccount_StartPrimaryMission::MatchmakingSessionId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_StartPrimaryMission, MissionName) == 0x000020, "Member 'FortMcpProfileAccount_StartPrimaryMission::MissionName' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_StartPrimaryMission, Context) == 0x000030, "Member 'FortMcpProfileAccount_StartPrimaryMission::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.TransmogItem
// 0x0090 (0x0090 - 0x0000)
struct FortMcpProfileAccount_TransmogItem final
{
public:
	class FString                                 TransmogKeyTemplateId;                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         SacrificeItemIds;                                  // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0020(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_TransmogItem) == 0x000010, "Wrong alignment on FortMcpProfileAccount_TransmogItem");
static_assert(sizeof(FortMcpProfileAccount_TransmogItem) == 0x000090, "Wrong size on FortMcpProfileAccount_TransmogItem");
static_assert(offsetof(FortMcpProfileAccount_TransmogItem, TransmogKeyTemplateId) == 0x000000, "Member 'FortMcpProfileAccount_TransmogItem::TransmogKeyTemplateId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_TransmogItem, SacrificeItemIds) == 0x000010, "Member 'FortMcpProfileAccount_TransmogItem::SacrificeItemIds' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_TransmogItem, Context) == 0x000020, "Member 'FortMcpProfileAccount_TransmogItem::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.TwitchUpdateBroadcasterRegistration
// 0x0090 (0x0090 - 0x0000)
struct FortMcpProfileAccount_TwitchUpdateBroadcasterRegistration final
{
public:
	class FString                                 AccessToken;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChannelId;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0020(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_TwitchUpdateBroadcasterRegistration) == 0x000010, "Wrong alignment on FortMcpProfileAccount_TwitchUpdateBroadcasterRegistration");
static_assert(sizeof(FortMcpProfileAccount_TwitchUpdateBroadcasterRegistration) == 0x000090, "Wrong size on FortMcpProfileAccount_TwitchUpdateBroadcasterRegistration");
static_assert(offsetof(FortMcpProfileAccount_TwitchUpdateBroadcasterRegistration, AccessToken) == 0x000000, "Member 'FortMcpProfileAccount_TwitchUpdateBroadcasterRegistration::AccessToken' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_TwitchUpdateBroadcasterRegistration, ChannelId) == 0x000010, "Member 'FortMcpProfileAccount_TwitchUpdateBroadcasterRegistration::ChannelId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_TwitchUpdateBroadcasterRegistration, Context) == 0x000020, "Member 'FortMcpProfileAccount_TwitchUpdateBroadcasterRegistration::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.UnassignAllSquads
// 0x0080 (0x0080 - 0x0000)
struct FortMcpProfileAccount_UnassignAllSquads final
{
public:
	TArray<class FString>                         SquadIds;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0010(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_UnassignAllSquads) == 0x000010, "Wrong alignment on FortMcpProfileAccount_UnassignAllSquads");
static_assert(sizeof(FortMcpProfileAccount_UnassignAllSquads) == 0x000080, "Wrong size on FortMcpProfileAccount_UnassignAllSquads");
static_assert(offsetof(FortMcpProfileAccount_UnassignAllSquads, SquadIds) == 0x000000, "Member 'FortMcpProfileAccount_UnassignAllSquads::SquadIds' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_UnassignAllSquads, Context) == 0x000010, "Member 'FortMcpProfileAccount_UnassignAllSquads::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.UnloadWarehouse
// 0x0080 (0x0080 - 0x0000)
struct FortMcpProfileAccount_UnloadWarehouse final
{
public:
	TArray<class FString>                         ResourceTypes;                                     // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0010(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_UnloadWarehouse) == 0x000010, "Wrong alignment on FortMcpProfileAccount_UnloadWarehouse");
static_assert(sizeof(FortMcpProfileAccount_UnloadWarehouse) == 0x000080, "Wrong size on FortMcpProfileAccount_UnloadWarehouse");
static_assert(offsetof(FortMcpProfileAccount_UnloadWarehouse, ResourceTypes) == 0x000000, "Member 'FortMcpProfileAccount_UnloadWarehouse::ResourceTypes' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_UnloadWarehouse, Context) == 0x000010, "Member 'FortMcpProfileAccount_UnloadWarehouse::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.UnslotAllWorkers
// 0x0080 (0x0080 - 0x0000)
struct FortMcpProfileAccount_UnslotAllWorkers final
{
public:
	TArray<class FString>                         BuildingIds;                                       // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0010(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_UnslotAllWorkers) == 0x000010, "Wrong alignment on FortMcpProfileAccount_UnslotAllWorkers");
static_assert(sizeof(FortMcpProfileAccount_UnslotAllWorkers) == 0x000080, "Wrong size on FortMcpProfileAccount_UnslotAllWorkers");
static_assert(offsetof(FortMcpProfileAccount_UnslotAllWorkers, BuildingIds) == 0x000000, "Member 'FortMcpProfileAccount_UnslotAllWorkers::BuildingIds' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_UnslotAllWorkers, Context) == 0x000010, "Member 'FortMcpProfileAccount_UnslotAllWorkers::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.UpdateBuildingLevelAndRating
// 0x0090 (0x0090 - 0x0000)
struct FortMcpProfileAccount_UpdateBuildingLevelAndRating final
{
public:
	class FString                                 BuildingId;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastBuildingLevel;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastBuildingRating;                                // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FClientUrlContext                      Context;                                           // 0x0020(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_UpdateBuildingLevelAndRating) == 0x000010, "Wrong alignment on FortMcpProfileAccount_UpdateBuildingLevelAndRating");
static_assert(sizeof(FortMcpProfileAccount_UpdateBuildingLevelAndRating) == 0x000090, "Wrong size on FortMcpProfileAccount_UpdateBuildingLevelAndRating");
static_assert(offsetof(FortMcpProfileAccount_UpdateBuildingLevelAndRating, BuildingId) == 0x000000, "Member 'FortMcpProfileAccount_UpdateBuildingLevelAndRating::BuildingId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_UpdateBuildingLevelAndRating, LastBuildingLevel) == 0x000010, "Member 'FortMcpProfileAccount_UpdateBuildingLevelAndRating::LastBuildingLevel' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_UpdateBuildingLevelAndRating, LastBuildingRating) == 0x000014, "Member 'FortMcpProfileAccount_UpdateBuildingLevelAndRating::LastBuildingRating' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_UpdateBuildingLevelAndRating, Context) == 0x000020, "Member 'FortMcpProfileAccount_UpdateBuildingLevelAndRating::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.UpgradeItem
// 0x0080 (0x0080 - 0x0000)
struct FortMcpProfileAccount_UpgradeItem final
{
public:
	class FString                                 TargetItemId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0010(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_UpgradeItem) == 0x000010, "Wrong alignment on FortMcpProfileAccount_UpgradeItem");
static_assert(sizeof(FortMcpProfileAccount_UpgradeItem) == 0x000080, "Wrong size on FortMcpProfileAccount_UpgradeItem");
static_assert(offsetof(FortMcpProfileAccount_UpgradeItem, TargetItemId) == 0x000000, "Member 'FortMcpProfileAccount_UpgradeItem::TargetItemId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_UpgradeItem, Context) == 0x000010, "Member 'FortMcpProfileAccount_UpgradeItem::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.UpgradeItemRarity
// 0x0080 (0x0080 - 0x0000)
struct FortMcpProfileAccount_UpgradeItemRarity final
{
public:
	class FString                                 TargetItemId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0010(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_UpgradeItemRarity) == 0x000010, "Wrong alignment on FortMcpProfileAccount_UpgradeItemRarity");
static_assert(sizeof(FortMcpProfileAccount_UpgradeItemRarity) == 0x000080, "Wrong size on FortMcpProfileAccount_UpgradeItemRarity");
static_assert(offsetof(FortMcpProfileAccount_UpgradeItemRarity, TargetItemId) == 0x000000, "Member 'FortMcpProfileAccount_UpgradeItemRarity::TargetItemId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_UpgradeItemRarity, Context) == 0x000010, "Member 'FortMcpProfileAccount_UpgradeItemRarity::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAthena.EndBattleRoyaleGame
// 0x00B0 (0x00B0 - 0x0000)
struct FortMcpProfileAthena_EndBattleRoyaleGame final
{
public:
	TArray<struct FFortQuestObjectiveCompletion>  Advance;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EFortAthenaPlaylist                           MatchType;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinutesAlive;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PersonalKills;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamKills;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Placement;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FriendshipXpBoost;                                 // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CosmeticXpBoost;                                   // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Medals;                                            // 0x0030(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FDedicatedServerUrlContext             Context;                                           // 0x0040(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAthena_EndBattleRoyaleGame) == 0x000010, "Wrong alignment on FortMcpProfileAthena_EndBattleRoyaleGame");
static_assert(sizeof(FortMcpProfileAthena_EndBattleRoyaleGame) == 0x0000B0, "Wrong size on FortMcpProfileAthena_EndBattleRoyaleGame");
static_assert(offsetof(FortMcpProfileAthena_EndBattleRoyaleGame, Advance) == 0x000000, "Member 'FortMcpProfileAthena_EndBattleRoyaleGame::Advance' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAthena_EndBattleRoyaleGame, MatchType) == 0x000010, "Member 'FortMcpProfileAthena_EndBattleRoyaleGame::MatchType' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAthena_EndBattleRoyaleGame, MinutesAlive) == 0x000014, "Member 'FortMcpProfileAthena_EndBattleRoyaleGame::MinutesAlive' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAthena_EndBattleRoyaleGame, PersonalKills) == 0x000018, "Member 'FortMcpProfileAthena_EndBattleRoyaleGame::PersonalKills' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAthena_EndBattleRoyaleGame, TeamKills) == 0x00001C, "Member 'FortMcpProfileAthena_EndBattleRoyaleGame::TeamKills' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAthena_EndBattleRoyaleGame, Placement) == 0x000020, "Member 'FortMcpProfileAthena_EndBattleRoyaleGame::Placement' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAthena_EndBattleRoyaleGame, FriendshipXpBoost) == 0x000024, "Member 'FortMcpProfileAthena_EndBattleRoyaleGame::FriendshipXpBoost' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAthena_EndBattleRoyaleGame, CosmeticXpBoost) == 0x000028, "Member 'FortMcpProfileAthena_EndBattleRoyaleGame::CosmeticXpBoost' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAthena_EndBattleRoyaleGame, Medals) == 0x000030, "Member 'FortMcpProfileAthena_EndBattleRoyaleGame::Medals' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAthena_EndBattleRoyaleGame, Context) == 0x000040, "Member 'FortMcpProfileAthena_EndBattleRoyaleGame::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAthena.EquipBattleRoyaleCustomization
// 0x0090 (0x0090 - 0x0000)
struct FortMcpProfileAthena_EquipBattleRoyaleCustomization final
{
public:
	EAthenaCustomizationCategory                  SlotName;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemToSlot;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IndexWithinSlot;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FClientUrlContext                      Context;                                           // 0x0020(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAthena_EquipBattleRoyaleCustomization) == 0x000010, "Wrong alignment on FortMcpProfileAthena_EquipBattleRoyaleCustomization");
static_assert(sizeof(FortMcpProfileAthena_EquipBattleRoyaleCustomization) == 0x000090, "Wrong size on FortMcpProfileAthena_EquipBattleRoyaleCustomization");
static_assert(offsetof(FortMcpProfileAthena_EquipBattleRoyaleCustomization, SlotName) == 0x000000, "Member 'FortMcpProfileAthena_EquipBattleRoyaleCustomization::SlotName' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAthena_EquipBattleRoyaleCustomization, ItemToSlot) == 0x000008, "Member 'FortMcpProfileAthena_EquipBattleRoyaleCustomization::ItemToSlot' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAthena_EquipBattleRoyaleCustomization, IndexWithinSlot) == 0x000018, "Member 'FortMcpProfileAthena_EquipBattleRoyaleCustomization::IndexWithinSlot' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAthena_EquipBattleRoyaleCustomization, Context) == 0x000020, "Member 'FortMcpProfileAthena_EquipBattleRoyaleCustomization::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAthena.GetSeasonLevelInfo
// 0x0028 (0x0028 - 0x0000)
struct FortMcpProfileAthena_GetSeasonLevelInfo final
{
public:
	int32                                         SeasonLevel;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAthenaSeasonRewardLevelInfo           ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAthena_GetSeasonLevelInfo) == 0x000008, "Wrong alignment on FortMcpProfileAthena_GetSeasonLevelInfo");
static_assert(sizeof(FortMcpProfileAthena_GetSeasonLevelInfo) == 0x000028, "Wrong size on FortMcpProfileAthena_GetSeasonLevelInfo");
static_assert(offsetof(FortMcpProfileAthena_GetSeasonLevelInfo, SeasonLevel) == 0x000000, "Member 'FortMcpProfileAthena_GetSeasonLevelInfo::SeasonLevel' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAthena_GetSeasonLevelInfo, ReturnValue) == 0x000008, "Member 'FortMcpProfileAthena_GetSeasonLevelInfo::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAthena.GetSeasonLevelUpReward
// 0x0020 (0x0020 - 0x0000)
struct FortMcpProfileAthena_GetSeasonLevelUpReward final
{
public:
	int32                                         SeasonLevel;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortItemInstanceQuantityPair          Reward;                                            // 0x0008(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         RewardLevel;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMcpProfileAthena_GetSeasonLevelUpReward) == 0x000008, "Wrong alignment on FortMcpProfileAthena_GetSeasonLevelUpReward");
static_assert(sizeof(FortMcpProfileAthena_GetSeasonLevelUpReward) == 0x000020, "Wrong size on FortMcpProfileAthena_GetSeasonLevelUpReward");
static_assert(offsetof(FortMcpProfileAthena_GetSeasonLevelUpReward, SeasonLevel) == 0x000000, "Member 'FortMcpProfileAthena_GetSeasonLevelUpReward::SeasonLevel' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAthena_GetSeasonLevelUpReward, Reward) == 0x000008, "Member 'FortMcpProfileAthena_GetSeasonLevelUpReward::Reward' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAthena_GetSeasonLevelUpReward, RewardLevel) == 0x000018, "Member 'FortMcpProfileAthena_GetSeasonLevelUpReward::RewardLevel' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAthena_GetSeasonLevelUpReward, ReturnValue) == 0x00001C, "Member 'FortMcpProfileAthena_GetSeasonLevelUpReward::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAthena.ReportConsumableUsed
// 0x0090 (0x0090 - 0x0000)
struct FortMcpProfileAthena_ReportConsumableUsed final
{
public:
	int32                                         UsedQuantity;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemType;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDedicatedServerUrlContext             Context;                                           // 0x0020(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAthena_ReportConsumableUsed) == 0x000010, "Wrong alignment on FortMcpProfileAthena_ReportConsumableUsed");
static_assert(sizeof(FortMcpProfileAthena_ReportConsumableUsed) == 0x000090, "Wrong size on FortMcpProfileAthena_ReportConsumableUsed");
static_assert(offsetof(FortMcpProfileAthena_ReportConsumableUsed, UsedQuantity) == 0x000000, "Member 'FortMcpProfileAthena_ReportConsumableUsed::UsedQuantity' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAthena_ReportConsumableUsed, ItemType) == 0x000008, "Member 'FortMcpProfileAthena_ReportConsumableUsed::ItemType' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAthena_ReportConsumableUsed, Context) == 0x000020, "Member 'FortMcpProfileAthena_ReportConsumableUsed::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAthena.SetBattleRoyaleBanner
// 0x0090 (0x0090 - 0x0000)
struct FortMcpProfileAthena_SetBattleRoyaleBanner final
{
public:
	class FString                                 HomebaseBannerIconId;                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HomebaseBannerColorId;                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0020(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAthena_SetBattleRoyaleBanner) == 0x000010, "Wrong alignment on FortMcpProfileAthena_SetBattleRoyaleBanner");
static_assert(sizeof(FortMcpProfileAthena_SetBattleRoyaleBanner) == 0x000090, "Wrong size on FortMcpProfileAthena_SetBattleRoyaleBanner");
static_assert(offsetof(FortMcpProfileAthena_SetBattleRoyaleBanner, HomebaseBannerIconId) == 0x000000, "Member 'FortMcpProfileAthena_SetBattleRoyaleBanner::HomebaseBannerIconId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAthena_SetBattleRoyaleBanner, HomebaseBannerColorId) == 0x000010, "Member 'FortMcpProfileAthena_SetBattleRoyaleBanner::HomebaseBannerColorId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAthena_SetBattleRoyaleBanner, Context) == 0x000020, "Member 'FortMcpProfileAthena_SetBattleRoyaleBanner::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAthena.CanPurchaseSeasonBook
// 0x0001 (0x0001 - 0x0000)
struct FortMcpProfileAthena_CanPurchaseSeasonBook final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAthena_CanPurchaseSeasonBook) == 0x000001, "Wrong alignment on FortMcpProfileAthena_CanPurchaseSeasonBook");
static_assert(sizeof(FortMcpProfileAthena_CanPurchaseSeasonBook) == 0x000001, "Wrong size on FortMcpProfileAthena_CanPurchaseSeasonBook");
static_assert(offsetof(FortMcpProfileAthena_CanPurchaseSeasonBook, ReturnValue) == 0x000000, "Member 'FortMcpProfileAthena_CanPurchaseSeasonBook::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAthena.GetActiveSeasonDefinition
// 0x0008 (0x0008 - 0x0000)
struct FortMcpProfileAthena_GetActiveSeasonDefinition final
{
public:
	class UAthenaSeasonItemDefinition*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAthena_GetActiveSeasonDefinition) == 0x000008, "Wrong alignment on FortMcpProfileAthena_GetActiveSeasonDefinition");
static_assert(sizeof(FortMcpProfileAthena_GetActiveSeasonDefinition) == 0x000008, "Wrong size on FortMcpProfileAthena_GetActiveSeasonDefinition");
static_assert(offsetof(FortMcpProfileAthena_GetActiveSeasonDefinition, ReturnValue) == 0x000000, "Member 'FortMcpProfileAthena_GetActiveSeasonDefinition::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAthena.GetSeasonFriendMatchXpBoost
// 0x0004 (0x0004 - 0x0000)
struct FortMcpProfileAthena_GetSeasonFriendMatchXpBoost final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAthena_GetSeasonFriendMatchXpBoost) == 0x000004, "Wrong alignment on FortMcpProfileAthena_GetSeasonFriendMatchXpBoost");
static_assert(sizeof(FortMcpProfileAthena_GetSeasonFriendMatchXpBoost) == 0x000004, "Wrong size on FortMcpProfileAthena_GetSeasonFriendMatchXpBoost");
static_assert(offsetof(FortMcpProfileAthena_GetSeasonFriendMatchXpBoost, ReturnValue) == 0x000000, "Member 'FortMcpProfileAthena_GetSeasonFriendMatchXpBoost::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAthena.GetSeasonMatchXpBoost
// 0x0004 (0x0004 - 0x0000)
struct FortMcpProfileAthena_GetSeasonMatchXpBoost final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAthena_GetSeasonMatchXpBoost) == 0x000004, "Wrong alignment on FortMcpProfileAthena_GetSeasonMatchXpBoost");
static_assert(sizeof(FortMcpProfileAthena_GetSeasonMatchXpBoost) == 0x000004, "Wrong size on FortMcpProfileAthena_GetSeasonMatchXpBoost");
static_assert(offsetof(FortMcpProfileAthena_GetSeasonMatchXpBoost, ReturnValue) == 0x000000, "Member 'FortMcpProfileAthena_GetSeasonMatchXpBoost::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAthena.HasPurchasedSeasonBook
// 0x0001 (0x0001 - 0x0000)
struct FortMcpProfileAthena_HasPurchasedSeasonBook final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAthena_HasPurchasedSeasonBook) == 0x000001, "Wrong alignment on FortMcpProfileAthena_HasPurchasedSeasonBook");
static_assert(sizeof(FortMcpProfileAthena_HasPurchasedSeasonBook) == 0x000001, "Wrong size on FortMcpProfileAthena_HasPurchasedSeasonBook");
static_assert(offsetof(FortMcpProfileAthena_HasPurchasedSeasonBook, ReturnValue) == 0x000000, "Member 'FortMcpProfileAthena_HasPurchasedSeasonBook::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpProfileMetadata.CreateDeployableBaseItem
// 0x0080 (0x0080 - 0x0000)
struct FortMcpProfileMetadata_CreateDeployableBaseItem final
{
public:
	class FString                                 TemplateId;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDedicatedServerUrlContext             Context;                                           // 0x0010(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileMetadata_CreateDeployableBaseItem) == 0x000010, "Wrong alignment on FortMcpProfileMetadata_CreateDeployableBaseItem");
static_assert(sizeof(FortMcpProfileMetadata_CreateDeployableBaseItem) == 0x000080, "Wrong size on FortMcpProfileMetadata_CreateDeployableBaseItem");
static_assert(offsetof(FortMcpProfileMetadata_CreateDeployableBaseItem, TemplateId) == 0x000000, "Member 'FortMcpProfileMetadata_CreateDeployableBaseItem::TemplateId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileMetadata_CreateDeployableBaseItem, Context) == 0x000010, "Member 'FortMcpProfileMetadata_CreateDeployableBaseItem::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileMetadata.CreateOrUpgradeOutpostItem
// 0x0080 (0x0080 - 0x0000)
struct FortMcpProfileMetadata_CreateOrUpgradeOutpostItem final
{
public:
	class FString                                 TemplateId;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0010(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileMetadata_CreateOrUpgradeOutpostItem) == 0x000010, "Wrong alignment on FortMcpProfileMetadata_CreateOrUpgradeOutpostItem");
static_assert(sizeof(FortMcpProfileMetadata_CreateOrUpgradeOutpostItem) == 0x000080, "Wrong size on FortMcpProfileMetadata_CreateOrUpgradeOutpostItem");
static_assert(offsetof(FortMcpProfileMetadata_CreateOrUpgradeOutpostItem, TemplateId) == 0x000000, "Member 'FortMcpProfileMetadata_CreateOrUpgradeOutpostItem::TemplateId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileMetadata_CreateOrUpgradeOutpostItem, Context) == 0x000010, "Member 'FortMcpProfileMetadata_CreateOrUpgradeOutpostItem::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileMetadata.UpdateDeployableBaseTierProgression
// 0x00A0 (0x00A0 - 0x0000)
struct FortMcpProfileMetadata_UpdateDeployableBaseTierProgression final
{
public:
	class FString                                 DeployableBaseItemId;                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProgressionLayoutGuid;                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TierDefeated;                                      // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0xC];                                       // 0x0024(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDedicatedServerUrlContext             Context;                                           // 0x0030(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileMetadata_UpdateDeployableBaseTierProgression) == 0x000010, "Wrong alignment on FortMcpProfileMetadata_UpdateDeployableBaseTierProgression");
static_assert(sizeof(FortMcpProfileMetadata_UpdateDeployableBaseTierProgression) == 0x0000A0, "Wrong size on FortMcpProfileMetadata_UpdateDeployableBaseTierProgression");
static_assert(offsetof(FortMcpProfileMetadata_UpdateDeployableBaseTierProgression, DeployableBaseItemId) == 0x000000, "Member 'FortMcpProfileMetadata_UpdateDeployableBaseTierProgression::DeployableBaseItemId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileMetadata_UpdateDeployableBaseTierProgression, ProgressionLayoutGuid) == 0x000010, "Member 'FortMcpProfileMetadata_UpdateDeployableBaseTierProgression::ProgressionLayoutGuid' has a wrong offset!");
static_assert(offsetof(FortMcpProfileMetadata_UpdateDeployableBaseTierProgression, TierDefeated) == 0x000020, "Member 'FortMcpProfileMetadata_UpdateDeployableBaseTierProgression::TierDefeated' has a wrong offset!");
static_assert(offsetof(FortMcpProfileMetadata_UpdateDeployableBaseTierProgression, Context) == 0x000030, "Member 'FortMcpProfileMetadata_UpdateDeployableBaseTierProgression::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileMetadata.UpdateOutpostCore
// 0x00A0 (0x00A0 - 0x0000)
struct FortMcpProfileMetadata_UpdateOutpostCore final
{
public:
	class FString                                 CoreId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortOutpostCoreInfo                   CoreInfo;                                          // 0x0010(0x0020)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FDedicatedServerUrlContext             Context;                                           // 0x0030(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileMetadata_UpdateOutpostCore) == 0x000010, "Wrong alignment on FortMcpProfileMetadata_UpdateOutpostCore");
static_assert(sizeof(FortMcpProfileMetadata_UpdateOutpostCore) == 0x0000A0, "Wrong size on FortMcpProfileMetadata_UpdateOutpostCore");
static_assert(offsetof(FortMcpProfileMetadata_UpdateOutpostCore, CoreId) == 0x000000, "Member 'FortMcpProfileMetadata_UpdateOutpostCore::CoreId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileMetadata_UpdateOutpostCore, CoreInfo) == 0x000010, "Member 'FortMcpProfileMetadata_UpdateOutpostCore::CoreInfo' has a wrong offset!");
static_assert(offsetof(FortMcpProfileMetadata_UpdateOutpostCore, Context) == 0x000030, "Member 'FortMcpProfileMetadata_UpdateOutpostCore::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileWorld.AbortDisintegration
// 0x0070 (0x0070 - 0x0000)
struct FortMcpProfileWorld_AbortDisintegration final
{
public:
	struct FDedicatedServerUrlContext             Context;                                           // 0x0000(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileWorld_AbortDisintegration) == 0x000010, "Wrong alignment on FortMcpProfileWorld_AbortDisintegration");
static_assert(sizeof(FortMcpProfileWorld_AbortDisintegration) == 0x000070, "Wrong size on FortMcpProfileWorld_AbortDisintegration");
static_assert(offsetof(FortMcpProfileWorld_AbortDisintegration, Context) == 0x000000, "Member 'FortMcpProfileWorld_AbortDisintegration::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileWorld.BatchUpdatePlayers
// 0x0080 (0x0080 - 0x0000)
struct FortMcpProfileWorld_BatchUpdatePlayers final
{
public:
	TArray<struct FFortBatchUpdatePlayer_Update>  Updates;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FDedicatedServerUrlContext             Context;                                           // 0x0010(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileWorld_BatchUpdatePlayers) == 0x000010, "Wrong alignment on FortMcpProfileWorld_BatchUpdatePlayers");
static_assert(sizeof(FortMcpProfileWorld_BatchUpdatePlayers) == 0x000080, "Wrong size on FortMcpProfileWorld_BatchUpdatePlayers");
static_assert(offsetof(FortMcpProfileWorld_BatchUpdatePlayers, Updates) == 0x000000, "Member 'FortMcpProfileWorld_BatchUpdatePlayers::Updates' has a wrong offset!");
static_assert(offsetof(FortMcpProfileWorld_BatchUpdatePlayers, Context) == 0x000010, "Member 'FortMcpProfileWorld_BatchUpdatePlayers::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileWorld.BatchUpdatePlayers_DeployableBase
// 0x0090 (0x0090 - 0x0000)
struct FortMcpProfileWorld_BatchUpdatePlayers_DeployableBase final
{
public:
	TArray<struct FFortBatchUpdatePlayer_Update>  Updates;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FFortBatchUpdatePlayer_DeployableBaseUpdate> DeployableBaseUpdates;                             // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FDedicatedServerUrlContext             Context;                                           // 0x0020(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileWorld_BatchUpdatePlayers_DeployableBase) == 0x000010, "Wrong alignment on FortMcpProfileWorld_BatchUpdatePlayers_DeployableBase");
static_assert(sizeof(FortMcpProfileWorld_BatchUpdatePlayers_DeployableBase) == 0x000090, "Wrong size on FortMcpProfileWorld_BatchUpdatePlayers_DeployableBase");
static_assert(offsetof(FortMcpProfileWorld_BatchUpdatePlayers_DeployableBase, Updates) == 0x000000, "Member 'FortMcpProfileWorld_BatchUpdatePlayers_DeployableBase::Updates' has a wrong offset!");
static_assert(offsetof(FortMcpProfileWorld_BatchUpdatePlayers_DeployableBase, DeployableBaseUpdates) == 0x000010, "Member 'FortMcpProfileWorld_BatchUpdatePlayers_DeployableBase::DeployableBaseUpdates' has a wrong offset!");
static_assert(offsetof(FortMcpProfileWorld_BatchUpdatePlayers_DeployableBase, Context) == 0x000020, "Member 'FortMcpProfileWorld_BatchUpdatePlayers_DeployableBase::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileWorld.BatchUpdatePlayers_Outpost
// 0x00D0 (0x00D0 - 0x0000)
struct FortMcpProfileWorld_BatchUpdatePlayers_Outpost final
{
public:
	TArray<struct FFortBatchUpdatePlayer_Update>  Updates;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 OutpostId;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortOutpostCoreInfo                   OutpostInfo;                                       // 0x0020(0x0020)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FFortCloudSaveInfo                     CloudSaveInfo;                                     // 0x0040(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDedicatedServerUrlContext             Context;                                           // 0x0060(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileWorld_BatchUpdatePlayers_Outpost) == 0x000010, "Wrong alignment on FortMcpProfileWorld_BatchUpdatePlayers_Outpost");
static_assert(sizeof(FortMcpProfileWorld_BatchUpdatePlayers_Outpost) == 0x0000D0, "Wrong size on FortMcpProfileWorld_BatchUpdatePlayers_Outpost");
static_assert(offsetof(FortMcpProfileWorld_BatchUpdatePlayers_Outpost, Updates) == 0x000000, "Member 'FortMcpProfileWorld_BatchUpdatePlayers_Outpost::Updates' has a wrong offset!");
static_assert(offsetof(FortMcpProfileWorld_BatchUpdatePlayers_Outpost, OutpostId) == 0x000010, "Member 'FortMcpProfileWorld_BatchUpdatePlayers_Outpost::OutpostId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileWorld_BatchUpdatePlayers_Outpost, OutpostInfo) == 0x000020, "Member 'FortMcpProfileWorld_BatchUpdatePlayers_Outpost::OutpostInfo' has a wrong offset!");
static_assert(offsetof(FortMcpProfileWorld_BatchUpdatePlayers_Outpost, CloudSaveInfo) == 0x000040, "Member 'FortMcpProfileWorld_BatchUpdatePlayers_Outpost::CloudSaveInfo' has a wrong offset!");
static_assert(offsetof(FortMcpProfileWorld_BatchUpdatePlayers_Outpost, Context) == 0x000060, "Member 'FortMcpProfileWorld_BatchUpdatePlayers_Outpost::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileWorld.CraftWorldItem
// 0x0090 (0x0090 - 0x0000)
struct FortMcpProfileWorld_CraftWorldItem final
{
public:
	class FString                                 TargetSchematicItemId;                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumTimesToCraft;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FClientUrlContext                      Context;                                           // 0x0020(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileWorld_CraftWorldItem) == 0x000010, "Wrong alignment on FortMcpProfileWorld_CraftWorldItem");
static_assert(sizeof(FortMcpProfileWorld_CraftWorldItem) == 0x000090, "Wrong size on FortMcpProfileWorld_CraftWorldItem");
static_assert(offsetof(FortMcpProfileWorld_CraftWorldItem, TargetSchematicItemId) == 0x000000, "Member 'FortMcpProfileWorld_CraftWorldItem::TargetSchematicItemId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileWorld_CraftWorldItem, NumTimesToCraft) == 0x000010, "Member 'FortMcpProfileWorld_CraftWorldItem::NumTimesToCraft' has a wrong offset!");
static_assert(offsetof(FortMcpProfileWorld_CraftWorldItem, Context) == 0x000020, "Member 'FortMcpProfileWorld_CraftWorldItem::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileWorld.DepositPostResources
// 0x0090 (0x0090 - 0x0000)
struct FortMcpProfileWorld_DepositPostResources final
{
public:
	TArray<class FString>                         ItemsToDepositIds;                                 // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 ItemCountsToDeposit;                               // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FDedicatedServerUrlContext             Context;                                           // 0x0020(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileWorld_DepositPostResources) == 0x000010, "Wrong alignment on FortMcpProfileWorld_DepositPostResources");
static_assert(sizeof(FortMcpProfileWorld_DepositPostResources) == 0x000090, "Wrong size on FortMcpProfileWorld_DepositPostResources");
static_assert(offsetof(FortMcpProfileWorld_DepositPostResources, ItemsToDepositIds) == 0x000000, "Member 'FortMcpProfileWorld_DepositPostResources::ItemsToDepositIds' has a wrong offset!");
static_assert(offsetof(FortMcpProfileWorld_DepositPostResources, ItemCountsToDeposit) == 0x000010, "Member 'FortMcpProfileWorld_DepositPostResources::ItemCountsToDeposit' has a wrong offset!");
static_assert(offsetof(FortMcpProfileWorld_DepositPostResources, Context) == 0x000020, "Member 'FortMcpProfileWorld_DepositPostResources::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileWorld.DestroyWorldItems
// 0x0080 (0x0080 - 0x0000)
struct FortMcpProfileWorld_DestroyWorldItems final
{
public:
	TArray<class FString>                         ItemIds;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0010(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileWorld_DestroyWorldItems) == 0x000010, "Wrong alignment on FortMcpProfileWorld_DestroyWorldItems");
static_assert(sizeof(FortMcpProfileWorld_DestroyWorldItems) == 0x000080, "Wrong size on FortMcpProfileWorld_DestroyWorldItems");
static_assert(offsetof(FortMcpProfileWorld_DestroyWorldItems, ItemIds) == 0x000000, "Member 'FortMcpProfileWorld_DestroyWorldItems::ItemIds' has a wrong offset!");
static_assert(offsetof(FortMcpProfileWorld_DestroyWorldItems, Context) == 0x000010, "Member 'FortMcpProfileWorld_DestroyWorldItems::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileWorld.DisassembleWorldItems
// 0x0080 (0x0080 - 0x0000)
struct FortMcpProfileWorld_DisassembleWorldItems final
{
public:
	TArray<struct FItemIdAndQuantityPair>         TargetItemIdAndQuantityPairs;                      // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0010(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileWorld_DisassembleWorldItems) == 0x000010, "Wrong alignment on FortMcpProfileWorld_DisassembleWorldItems");
static_assert(sizeof(FortMcpProfileWorld_DisassembleWorldItems) == 0x000080, "Wrong size on FortMcpProfileWorld_DisassembleWorldItems");
static_assert(offsetof(FortMcpProfileWorld_DisassembleWorldItems, TargetItemIdAndQuantityPairs) == 0x000000, "Member 'FortMcpProfileWorld_DisassembleWorldItems::TargetItemIdAndQuantityPairs' has a wrong offset!");
static_assert(offsetof(FortMcpProfileWorld_DisassembleWorldItems, Context) == 0x000010, "Member 'FortMcpProfileWorld_DisassembleWorldItems::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileWorld.DisintegrateItems
// 0x0090 (0x0090 - 0x0000)
struct FortMcpProfileWorld_DisintegrateItems final
{
public:
	TArray<class FString>                         ItemsToDisintegrateIds;                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 ItemCountsToDisintegrate;                          // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FDedicatedServerUrlContext             Context;                                           // 0x0020(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileWorld_DisintegrateItems) == 0x000010, "Wrong alignment on FortMcpProfileWorld_DisintegrateItems");
static_assert(sizeof(FortMcpProfileWorld_DisintegrateItems) == 0x000090, "Wrong size on FortMcpProfileWorld_DisintegrateItems");
static_assert(offsetof(FortMcpProfileWorld_DisintegrateItems, ItemsToDisintegrateIds) == 0x000000, "Member 'FortMcpProfileWorld_DisintegrateItems::ItemsToDisintegrateIds' has a wrong offset!");
static_assert(offsetof(FortMcpProfileWorld_DisintegrateItems, ItemCountsToDisintegrate) == 0x000010, "Member 'FortMcpProfileWorld_DisintegrateItems::ItemCountsToDisintegrate' has a wrong offset!");
static_assert(offsetof(FortMcpProfileWorld_DisintegrateItems, Context) == 0x000020, "Member 'FortMcpProfileWorld_DisintegrateItems::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileWorld.FabricateItem
// 0x0080 (0x0080 - 0x0000)
struct FortMcpProfileWorld_FabricateItem final
{
public:
	class FString                                 TemplateId;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDedicatedServerUrlContext             Context;                                           // 0x0010(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileWorld_FabricateItem) == 0x000010, "Wrong alignment on FortMcpProfileWorld_FabricateItem");
static_assert(sizeof(FortMcpProfileWorld_FabricateItem) == 0x000080, "Wrong size on FortMcpProfileWorld_FabricateItem");
static_assert(offsetof(FortMcpProfileWorld_FabricateItem, TemplateId) == 0x000000, "Member 'FortMcpProfileWorld_FabricateItem::TemplateId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileWorld_FabricateItem, Context) == 0x000010, "Member 'FortMcpProfileWorld_FabricateItem::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileWorld.InitializeTheater
// 0x0080 (0x0080 - 0x0000)
struct FortMcpProfileWorld_InitializeTheater final
{
public:
	class FString                                 TheaterGuid;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDedicatedServerUrlContext             Context;                                           // 0x0010(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileWorld_InitializeTheater) == 0x000010, "Wrong alignment on FortMcpProfileWorld_InitializeTheater");
static_assert(sizeof(FortMcpProfileWorld_InitializeTheater) == 0x000080, "Wrong size on FortMcpProfileWorld_InitializeTheater");
static_assert(offsetof(FortMcpProfileWorld_InitializeTheater, TheaterGuid) == 0x000000, "Member 'FortMcpProfileWorld_InitializeTheater::TheaterGuid' has a wrong offset!");
static_assert(offsetof(FortMcpProfileWorld_InitializeTheater, Context) == 0x000010, "Member 'FortMcpProfileWorld_InitializeTheater::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileWorld.LockProfiles
// 0x0090 (0x0090 - 0x0000)
struct FortMcpProfileWorld_LockProfiles final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Timeout;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDedicatedServerUrlContext             Context;                                           // 0x0020(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileWorld_LockProfiles) == 0x000010, "Wrong alignment on FortMcpProfileWorld_LockProfiles");
static_assert(sizeof(FortMcpProfileWorld_LockProfiles) == 0x000090, "Wrong size on FortMcpProfileWorld_LockProfiles");
static_assert(offsetof(FortMcpProfileWorld_LockProfiles, Code) == 0x000000, "Member 'FortMcpProfileWorld_LockProfiles::Code' has a wrong offset!");
static_assert(offsetof(FortMcpProfileWorld_LockProfiles, Timeout) == 0x000010, "Member 'FortMcpProfileWorld_LockProfiles::Timeout' has a wrong offset!");
static_assert(offsetof(FortMcpProfileWorld_LockProfiles, Context) == 0x000020, "Member 'FortMcpProfileWorld_LockProfiles::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileWorld.ModifyQuickbar
// 0x0090 (0x0090 - 0x0000)
struct FortMcpProfileWorld_ModifyQuickbar final
{
public:
	TArray<class FString>                         PrimaryQuickbarChoices;                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 SecondaryQuickbarChoice;                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0020(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileWorld_ModifyQuickbar) == 0x000010, "Wrong alignment on FortMcpProfileWorld_ModifyQuickbar");
static_assert(sizeof(FortMcpProfileWorld_ModifyQuickbar) == 0x000090, "Wrong size on FortMcpProfileWorld_ModifyQuickbar");
static_assert(offsetof(FortMcpProfileWorld_ModifyQuickbar, PrimaryQuickbarChoices) == 0x000000, "Member 'FortMcpProfileWorld_ModifyQuickbar::PrimaryQuickbarChoices' has a wrong offset!");
static_assert(offsetof(FortMcpProfileWorld_ModifyQuickbar, SecondaryQuickbarChoice) == 0x000010, "Member 'FortMcpProfileWorld_ModifyQuickbar::SecondaryQuickbarChoice' has a wrong offset!");
static_assert(offsetof(FortMcpProfileWorld_ModifyQuickbar, Context) == 0x000020, "Member 'FortMcpProfileWorld_ModifyQuickbar::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileWorld.StorageTransfer
// 0x0090 (0x0090 - 0x0000)
struct FortMcpProfileWorld_StorageTransfer final
{
public:
	TArray<struct FItemIdAndQuantityPair>         TheaterToOutpostItems;                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FItemIdAndQuantityPair>         OutpostToTheaterItems;                             // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0020(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileWorld_StorageTransfer) == 0x000010, "Wrong alignment on FortMcpProfileWorld_StorageTransfer");
static_assert(sizeof(FortMcpProfileWorld_StorageTransfer) == 0x000090, "Wrong size on FortMcpProfileWorld_StorageTransfer");
static_assert(offsetof(FortMcpProfileWorld_StorageTransfer, TheaterToOutpostItems) == 0x000000, "Member 'FortMcpProfileWorld_StorageTransfer::TheaterToOutpostItems' has a wrong offset!");
static_assert(offsetof(FortMcpProfileWorld_StorageTransfer, OutpostToTheaterItems) == 0x000010, "Member 'FortMcpProfileWorld_StorageTransfer::OutpostToTheaterItems' has a wrong offset!");
static_assert(offsetof(FortMcpProfileWorld_StorageTransfer, Context) == 0x000020, "Member 'FortMcpProfileWorld_StorageTransfer::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileWorld.UnlockProfiles
// 0x0080 (0x0080 - 0x0000)
struct FortMcpProfileWorld_UnlockProfiles final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDedicatedServerUrlContext             Context;                                           // 0x0010(0x0070)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileWorld_UnlockProfiles) == 0x000010, "Wrong alignment on FortMcpProfileWorld_UnlockProfiles");
static_assert(sizeof(FortMcpProfileWorld_UnlockProfiles) == 0x000080, "Wrong size on FortMcpProfileWorld_UnlockProfiles");
static_assert(offsetof(FortMcpProfileWorld_UnlockProfiles, Code) == 0x000000, "Member 'FortMcpProfileWorld_UnlockProfiles::Code' has a wrong offset!");
static_assert(offsetof(FortMcpProfileWorld_UnlockProfiles, Context) == 0x000010, "Member 'FortMcpProfileWorld_UnlockProfiles::Context' has a wrong offset!");

// Function FortniteGame.FortSafeZoneIndicator.GetSafeZoneShrinkSpeed
// 0x0004 (0x0004 - 0x0000)
struct FortSafeZoneIndicator_GetSafeZoneShrinkSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSafeZoneIndicator_GetSafeZoneShrinkSpeed) == 0x000004, "Wrong alignment on FortSafeZoneIndicator_GetSafeZoneShrinkSpeed");
static_assert(sizeof(FortSafeZoneIndicator_GetSafeZoneShrinkSpeed) == 0x000004, "Wrong size on FortSafeZoneIndicator_GetSafeZoneShrinkSpeed");
static_assert(offsetof(FortSafeZoneIndicator_GetSafeZoneShrinkSpeed, ReturnValue) == 0x000000, "Member 'FortSafeZoneIndicator_GetSafeZoneShrinkSpeed::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSafeZoneIndicator.OnSafeZoneStateChange
// 0x0001 (0x0001 - 0x0000)
struct FortSafeZoneIndicator_OnSafeZoneStateChange final
{
public:
	EFortSafeZoneState                            NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSafeZoneIndicator_OnSafeZoneStateChange) == 0x000001, "Wrong alignment on FortSafeZoneIndicator_OnSafeZoneStateChange");
static_assert(sizeof(FortSafeZoneIndicator_OnSafeZoneStateChange) == 0x000001, "Wrong size on FortSafeZoneIndicator_OnSafeZoneStateChange");
static_assert(offsetof(FortSafeZoneIndicator_OnSafeZoneStateChange, NewState) == 0x000000, "Member 'FortSafeZoneIndicator_OnSafeZoneStateChange::NewState' has a wrong offset!");

// Function FortniteGame.FortSafeZoneIndicator.SetSafeZoneRadiusAndCenter
// 0x0010 (0x0010 - 0x0000)
struct FortSafeZoneIndicator_SetSafeZoneRadiusAndCenter final
{
public:
	float                                         InRadius;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0004(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSafeZoneIndicator_SetSafeZoneRadiusAndCenter) == 0x000004, "Wrong alignment on FortSafeZoneIndicator_SetSafeZoneRadiusAndCenter");
static_assert(sizeof(FortSafeZoneIndicator_SetSafeZoneRadiusAndCenter) == 0x000010, "Wrong size on FortSafeZoneIndicator_SetSafeZoneRadiusAndCenter");
static_assert(offsetof(FortSafeZoneIndicator_SetSafeZoneRadiusAndCenter, InRadius) == 0x000000, "Member 'FortSafeZoneIndicator_SetSafeZoneRadiusAndCenter::InRadius' has a wrong offset!");
static_assert(offsetof(FortSafeZoneIndicator_SetSafeZoneRadiusAndCenter, InLocation) == 0x000004, "Member 'FortSafeZoneIndicator_SetSafeZoneRadiusAndCenter::InLocation' has a wrong offset!");

// Function FortniteGame.FortSafeZoneIndicator.GetClockTickingAudioCurveValues
// 0x000C (0x000C - 0x0000)
struct FortSafeZoneIndicator_GetClockTickingAudioCurveValues final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeModValue;                                    // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchModValue;                                     // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSafeZoneIndicator_GetClockTickingAudioCurveValues) == 0x000004, "Wrong alignment on FortSafeZoneIndicator_GetClockTickingAudioCurveValues");
static_assert(sizeof(FortSafeZoneIndicator_GetClockTickingAudioCurveValues) == 0x00000C, "Wrong size on FortSafeZoneIndicator_GetClockTickingAudioCurveValues");
static_assert(offsetof(FortSafeZoneIndicator_GetClockTickingAudioCurveValues, Time) == 0x000000, "Member 'FortSafeZoneIndicator_GetClockTickingAudioCurveValues::Time' has a wrong offset!");
static_assert(offsetof(FortSafeZoneIndicator_GetClockTickingAudioCurveValues, VolumeModValue) == 0x000004, "Member 'FortSafeZoneIndicator_GetClockTickingAudioCurveValues::VolumeModValue' has a wrong offset!");
static_assert(offsetof(FortSafeZoneIndicator_GetClockTickingAudioCurveValues, PitchModValue) == 0x000008, "Member 'FortSafeZoneIndicator_GetClockTickingAudioCurveValues::PitchModValue' has a wrong offset!");

// Function FortniteGame.FortSafeZoneIndicator.GetMovementAudioCurveValues
// 0x000C (0x000C - 0x0000)
struct FortSafeZoneIndicator_GetMovementAudioCurveValues final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrossfadeValue;                                    // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchModValue;                                     // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSafeZoneIndicator_GetMovementAudioCurveValues) == 0x000004, "Wrong alignment on FortSafeZoneIndicator_GetMovementAudioCurveValues");
static_assert(sizeof(FortSafeZoneIndicator_GetMovementAudioCurveValues) == 0x00000C, "Wrong size on FortSafeZoneIndicator_GetMovementAudioCurveValues");
static_assert(offsetof(FortSafeZoneIndicator_GetMovementAudioCurveValues, Time) == 0x000000, "Member 'FortSafeZoneIndicator_GetMovementAudioCurveValues::Time' has a wrong offset!");
static_assert(offsetof(FortSafeZoneIndicator_GetMovementAudioCurveValues, CrossfadeValue) == 0x000004, "Member 'FortSafeZoneIndicator_GetMovementAudioCurveValues::CrossfadeValue' has a wrong offset!");
static_assert(offsetof(FortSafeZoneIndicator_GetMovementAudioCurveValues, PitchModValue) == 0x000008, "Member 'FortSafeZoneIndicator_GetMovementAudioCurveValues::PitchModValue' has a wrong offset!");

// Function FortniteGame.FortSafeZoneIndicator.GetSafeZoneCenter
// 0x000C (0x000C - 0x0000)
struct FortSafeZoneIndicator_GetSafeZoneCenter final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSafeZoneIndicator_GetSafeZoneCenter) == 0x000004, "Wrong alignment on FortSafeZoneIndicator_GetSafeZoneCenter");
static_assert(sizeof(FortSafeZoneIndicator_GetSafeZoneCenter) == 0x00000C, "Wrong size on FortSafeZoneIndicator_GetSafeZoneCenter");
static_assert(offsetof(FortSafeZoneIndicator_GetSafeZoneCenter, ReturnValue) == 0x000000, "Member 'FortSafeZoneIndicator_GetSafeZoneCenter::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSafeZoneIndicator.GetSafeZoneRadius
// 0x0004 (0x0004 - 0x0000)
struct FortSafeZoneIndicator_GetSafeZoneRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSafeZoneIndicator_GetSafeZoneRadius) == 0x000004, "Wrong alignment on FortSafeZoneIndicator_GetSafeZoneRadius");
static_assert(sizeof(FortSafeZoneIndicator_GetSafeZoneRadius) == 0x000004, "Wrong size on FortSafeZoneIndicator_GetSafeZoneRadius");
static_assert(offsetof(FortSafeZoneIndicator_GetSafeZoneRadius, ReturnValue) == 0x000000, "Member 'FortSafeZoneIndicator_GetSafeZoneRadius::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSeasonalEventManager.IsEventFlagActive
// 0x0018 (0x0018 - 0x0000)
struct FortSeasonalEventManager_IsEventFlagActive final
{
public:
	class FString                                 QueriedEventFlagName;                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSeasonalEventManager_IsEventFlagActive) == 0x000008, "Wrong alignment on FortSeasonalEventManager_IsEventFlagActive");
static_assert(sizeof(FortSeasonalEventManager_IsEventFlagActive) == 0x000018, "Wrong size on FortSeasonalEventManager_IsEventFlagActive");
static_assert(offsetof(FortSeasonalEventManager_IsEventFlagActive, QueriedEventFlagName) == 0x000000, "Member 'FortSeasonalEventManager_IsEventFlagActive::QueriedEventFlagName' has a wrong offset!");
static_assert(offsetof(FortSeasonalEventManager_IsEventFlagActive, ReturnValue) == 0x000010, "Member 'FortSeasonalEventManager_IsEventFlagActive::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMiniMapComponent.OverrideLocalMiniMapIcon
// 0x0008 (0x0008 - 0x0000)
struct FortMiniMapComponent_OverrideLocalMiniMapIcon final
{
public:
	class UTexture2D*                             MiniMapIcon;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMiniMapComponent_OverrideLocalMiniMapIcon) == 0x000008, "Wrong alignment on FortMiniMapComponent_OverrideLocalMiniMapIcon");
static_assert(sizeof(FortMiniMapComponent_OverrideLocalMiniMapIcon) == 0x000008, "Wrong size on FortMiniMapComponent_OverrideLocalMiniMapIcon");
static_assert(offsetof(FortMiniMapComponent_OverrideLocalMiniMapIcon, MiniMapIcon) == 0x000000, "Member 'FortMiniMapComponent_OverrideLocalMiniMapIcon::MiniMapIcon' has a wrong offset!");

// Function FortniteGame.FortMiniMapComponent.OverrideLocalMiniMapIndicatorIsVisible
// 0x0001 (0x0001 - 0x0000)
struct FortMiniMapComponent_OverrideLocalMiniMapIndicatorIsVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMiniMapComponent_OverrideLocalMiniMapIndicatorIsVisible) == 0x000001, "Wrong alignment on FortMiniMapComponent_OverrideLocalMiniMapIndicatorIsVisible");
static_assert(sizeof(FortMiniMapComponent_OverrideLocalMiniMapIndicatorIsVisible) == 0x000001, "Wrong size on FortMiniMapComponent_OverrideLocalMiniMapIndicatorIsVisible");
static_assert(offsetof(FortMiniMapComponent_OverrideLocalMiniMapIndicatorIsVisible, bVisible) == 0x000000, "Member 'FortMiniMapComponent_OverrideLocalMiniMapIndicatorIsVisible::bVisible' has a wrong offset!");

// Function FortniteGame.FortMiniMapComponent.SetMiniMapIcon
// 0x0008 (0x0008 - 0x0000)
struct FortMiniMapComponent_SetMiniMapIcon final
{
public:
	class UTexture2D*                             MiniMapIcon;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMiniMapComponent_SetMiniMapIcon) == 0x000008, "Wrong alignment on FortMiniMapComponent_SetMiniMapIcon");
static_assert(sizeof(FortMiniMapComponent_SetMiniMapIcon) == 0x000008, "Wrong size on FortMiniMapComponent_SetMiniMapIcon");
static_assert(offsetof(FortMiniMapComponent_SetMiniMapIcon, MiniMapIcon) == 0x000000, "Member 'FortMiniMapComponent_SetMiniMapIcon::MiniMapIcon' has a wrong offset!");

// Function FortniteGame.FortMiniMapComponent.SetMiniMapIconColor
// 0x0010 (0x0010 - 0x0000)
struct FortMiniMapComponent_SetMiniMapIconColor final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMiniMapComponent_SetMiniMapIconColor) == 0x000004, "Wrong alignment on FortMiniMapComponent_SetMiniMapIconColor");
static_assert(sizeof(FortMiniMapComponent_SetMiniMapIconColor) == 0x000010, "Wrong size on FortMiniMapComponent_SetMiniMapIconColor");
static_assert(offsetof(FortMiniMapComponent_SetMiniMapIconColor, InColor) == 0x000000, "Member 'FortMiniMapComponent_SetMiniMapIconColor::InColor' has a wrong offset!");

// Function FortniteGame.FortMiniMapComponent.SetMiniMapIconColorPulsesPerSecond
// 0x0004 (0x0004 - 0x0000)
struct FortMiniMapComponent_SetMiniMapIconColorPulsesPerSecond final
{
public:
	float                                         ColorPulsesPerSecond;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMiniMapComponent_SetMiniMapIconColorPulsesPerSecond) == 0x000004, "Wrong alignment on FortMiniMapComponent_SetMiniMapIconColorPulsesPerSecond");
static_assert(sizeof(FortMiniMapComponent_SetMiniMapIconColorPulsesPerSecond) == 0x000004, "Wrong size on FortMiniMapComponent_SetMiniMapIconColorPulsesPerSecond");
static_assert(offsetof(FortMiniMapComponent_SetMiniMapIconColorPulsesPerSecond, ColorPulsesPerSecond) == 0x000000, "Member 'FortMiniMapComponent_SetMiniMapIconColorPulsesPerSecond::ColorPulsesPerSecond' has a wrong offset!");

// Function FortniteGame.FortMiniMapComponent.SetMiniMapIconPulseColor
// 0x0010 (0x0010 - 0x0000)
struct FortMiniMapComponent_SetMiniMapIconPulseColor final
{
public:
	struct FLinearColor                           PulseColor;                                        // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMiniMapComponent_SetMiniMapIconPulseColor) == 0x000004, "Wrong alignment on FortMiniMapComponent_SetMiniMapIconPulseColor");
static_assert(sizeof(FortMiniMapComponent_SetMiniMapIconPulseColor) == 0x000010, "Wrong size on FortMiniMapComponent_SetMiniMapIconPulseColor");
static_assert(offsetof(FortMiniMapComponent_SetMiniMapIconPulseColor, PulseColor) == 0x000000, "Member 'FortMiniMapComponent_SetMiniMapIconPulseColor::PulseColor' has a wrong offset!");

// Function FortniteGame.FortMiniMapComponent.SetMiniMapIconScale
// 0x0008 (0x0008 - 0x0000)
struct FortMiniMapComponent_SetMiniMapIconScale final
{
public:
	struct FVector2D                              IconScale;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMiniMapComponent_SetMiniMapIconScale) == 0x000004, "Wrong alignment on FortMiniMapComponent_SetMiniMapIconScale");
static_assert(sizeof(FortMiniMapComponent_SetMiniMapIconScale) == 0x000008, "Wrong size on FortMiniMapComponent_SetMiniMapIconScale");
static_assert(offsetof(FortMiniMapComponent_SetMiniMapIconScale, IconScale) == 0x000000, "Member 'FortMiniMapComponent_SetMiniMapIconScale::IconScale' has a wrong offset!");

// Function FortniteGame.FortMiniMapComponent.SetMiniMapIconSizePulsesPerSecond
// 0x0004 (0x0004 - 0x0000)
struct FortMiniMapComponent_SetMiniMapIconSizePulsesPerSecond final
{
public:
	float                                         SizePulsesPerSecond;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMiniMapComponent_SetMiniMapIconSizePulsesPerSecond) == 0x000004, "Wrong alignment on FortMiniMapComponent_SetMiniMapIconSizePulsesPerSecond");
static_assert(sizeof(FortMiniMapComponent_SetMiniMapIconSizePulsesPerSecond) == 0x000004, "Wrong size on FortMiniMapComponent_SetMiniMapIconSizePulsesPerSecond");
static_assert(offsetof(FortMiniMapComponent_SetMiniMapIconSizePulsesPerSecond, SizePulsesPerSecond) == 0x000000, "Member 'FortMiniMapComponent_SetMiniMapIconSizePulsesPerSecond::SizePulsesPerSecond' has a wrong offset!");

// Function FortniteGame.FortMiniMapComponent.SetMiniMapIndicatorIsVisible
// 0x0001 (0x0001 - 0x0000)
struct FortMiniMapComponent_SetMiniMapIndicatorIsVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMiniMapComponent_SetMiniMapIndicatorIsVisible) == 0x000001, "Wrong alignment on FortMiniMapComponent_SetMiniMapIndicatorIsVisible");
static_assert(sizeof(FortMiniMapComponent_SetMiniMapIndicatorIsVisible) == 0x000001, "Wrong size on FortMiniMapComponent_SetMiniMapIndicatorIsVisible");
static_assert(offsetof(FortMiniMapComponent_SetMiniMapIndicatorIsVisible, bVisible) == 0x000000, "Member 'FortMiniMapComponent_SetMiniMapIndicatorIsVisible::bVisible' has a wrong offset!");

// Function FortniteGame.FortMiniMapComponent.SetMiniMapIndicatorIsVisibleOnMiniMap
// 0x0001 (0x0001 - 0x0000)
struct FortMiniMapComponent_SetMiniMapIndicatorIsVisibleOnMiniMap final
{
public:
	bool                                          bVisibleOnMiniMap;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMiniMapComponent_SetMiniMapIndicatorIsVisibleOnMiniMap) == 0x000001, "Wrong alignment on FortMiniMapComponent_SetMiniMapIndicatorIsVisibleOnMiniMap");
static_assert(sizeof(FortMiniMapComponent_SetMiniMapIndicatorIsVisibleOnMiniMap) == 0x000001, "Wrong size on FortMiniMapComponent_SetMiniMapIndicatorIsVisibleOnMiniMap");
static_assert(offsetof(FortMiniMapComponent_SetMiniMapIndicatorIsVisibleOnMiniMap, bVisibleOnMiniMap) == 0x000000, "Member 'FortMiniMapComponent_SetMiniMapIndicatorIsVisibleOnMiniMap::bVisibleOnMiniMap' has a wrong offset!");

// Function FortniteGame.FortMiniMapComponent.SetMiniMapLocationOffset
// 0x000C (0x000C - 0x0000)
struct FortMiniMapComponent_SetMiniMapLocationOffset final
{
public:
	struct FVector                                LocationOffset;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMiniMapComponent_SetMiniMapLocationOffset) == 0x000004, "Wrong alignment on FortMiniMapComponent_SetMiniMapLocationOffset");
static_assert(sizeof(FortMiniMapComponent_SetMiniMapLocationOffset) == 0x00000C, "Wrong size on FortMiniMapComponent_SetMiniMapLocationOffset");
static_assert(offsetof(FortMiniMapComponent_SetMiniMapLocationOffset, LocationOffset) == 0x000000, "Member 'FortMiniMapComponent_SetMiniMapLocationOffset::LocationOffset' has a wrong offset!");

// Function FortniteGame.FortMiniMapComponent.SetMinimapViewableDistance
// 0x0004 (0x0004 - 0x0000)
struct FortMiniMapComponent_SetMinimapViewableDistance final
{
public:
	float                                         ViewDistance;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMiniMapComponent_SetMinimapViewableDistance) == 0x000004, "Wrong alignment on FortMiniMapComponent_SetMinimapViewableDistance");
static_assert(sizeof(FortMiniMapComponent_SetMinimapViewableDistance) == 0x000004, "Wrong size on FortMiniMapComponent_SetMinimapViewableDistance");
static_assert(offsetof(FortMiniMapComponent_SetMinimapViewableDistance, ViewDistance) == 0x000000, "Member 'FortMiniMapComponent_SetMinimapViewableDistance::ViewDistance' has a wrong offset!");

// Function FortniteGame.FortMiniMapComponent.SetupMiniMapComponent
// 0x0030 (0x0030 - 0x0000)
struct FortMiniMapComponent_SetupMiniMapComponent final
{
public:
	class UTexture2D*                             MiniMapIcon;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           IconColor;                                         // 0x0008(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PulseColor;                                        // 0x0018(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorPulsesPerSecond;                              // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SizePulsesPerSecond;                               // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMiniMapComponent_SetupMiniMapComponent) == 0x000008, "Wrong alignment on FortMiniMapComponent_SetupMiniMapComponent");
static_assert(sizeof(FortMiniMapComponent_SetupMiniMapComponent) == 0x000030, "Wrong size on FortMiniMapComponent_SetupMiniMapComponent");
static_assert(offsetof(FortMiniMapComponent_SetupMiniMapComponent, MiniMapIcon) == 0x000000, "Member 'FortMiniMapComponent_SetupMiniMapComponent::MiniMapIcon' has a wrong offset!");
static_assert(offsetof(FortMiniMapComponent_SetupMiniMapComponent, IconColor) == 0x000008, "Member 'FortMiniMapComponent_SetupMiniMapComponent::IconColor' has a wrong offset!");
static_assert(offsetof(FortMiniMapComponent_SetupMiniMapComponent, PulseColor) == 0x000018, "Member 'FortMiniMapComponent_SetupMiniMapComponent::PulseColor' has a wrong offset!");
static_assert(offsetof(FortMiniMapComponent_SetupMiniMapComponent, ColorPulsesPerSecond) == 0x000028, "Member 'FortMiniMapComponent_SetupMiniMapComponent::ColorPulsesPerSecond' has a wrong offset!");
static_assert(offsetof(FortMiniMapComponent_SetupMiniMapComponent, SizePulsesPerSecond) == 0x00002C, "Member 'FortMiniMapComponent_SetupMiniMapComponent::SizePulsesPerSecond' has a wrong offset!");

// Function FortniteGame.FortThreatVisualsManager.BeginThreatVisualsPrecursor
// 0x0018 (0x0018 - 0x0000)
struct FortThreatVisualsManager_BeginThreatVisualsPrecursor final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ThreatLocation;                                    // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortThreatVisualsManager_BeginThreatVisualsPrecursor) == 0x000008, "Wrong alignment on FortThreatVisualsManager_BeginThreatVisualsPrecursor");
static_assert(sizeof(FortThreatVisualsManager_BeginThreatVisualsPrecursor) == 0x000018, "Wrong size on FortThreatVisualsManager_BeginThreatVisualsPrecursor");
static_assert(offsetof(FortThreatVisualsManager_BeginThreatVisualsPrecursor, SourceActor) == 0x000000, "Member 'FortThreatVisualsManager_BeginThreatVisualsPrecursor::SourceActor' has a wrong offset!");
static_assert(offsetof(FortThreatVisualsManager_BeginThreatVisualsPrecursor, ThreatLocation) == 0x000008, "Member 'FortThreatVisualsManager_BeginThreatVisualsPrecursor::ThreatLocation' has a wrong offset!");

// Function FortniteGame.FortThreatVisualsManager.OnBeginThreatVisualsPrecursor
// 0x0018 (0x0018 - 0x0000)
struct FortThreatVisualsManager_OnBeginThreatVisualsPrecursor final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndLocation;                                       // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortThreatVisualsManager_OnBeginThreatVisualsPrecursor) == 0x000008, "Wrong alignment on FortThreatVisualsManager_OnBeginThreatVisualsPrecursor");
static_assert(sizeof(FortThreatVisualsManager_OnBeginThreatVisualsPrecursor) == 0x000018, "Wrong size on FortThreatVisualsManager_OnBeginThreatVisualsPrecursor");
static_assert(offsetof(FortThreatVisualsManager_OnBeginThreatVisualsPrecursor, SourceActor) == 0x000000, "Member 'FortThreatVisualsManager_OnBeginThreatVisualsPrecursor::SourceActor' has a wrong offset!");
static_assert(offsetof(FortThreatVisualsManager_OnBeginThreatVisualsPrecursor, EndLocation) == 0x000008, "Member 'FortThreatVisualsManager_OnBeginThreatVisualsPrecursor::EndLocation' has a wrong offset!");

// Function FortniteGame.FortThreatVisualsManager.OnThreatCloudsChanged
// 0x0010 (0x0010 - 0x0000)
struct FortThreatVisualsManager_OnThreatCloudsChanged final
{
public:
	TArray<struct FThreatLocationInfo>            ThreatLocationInfo;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortThreatVisualsManager_OnThreatCloudsChanged) == 0x000008, "Wrong alignment on FortThreatVisualsManager_OnThreatCloudsChanged");
static_assert(sizeof(FortThreatVisualsManager_OnThreatCloudsChanged) == 0x000010, "Wrong size on FortThreatVisualsManager_OnThreatCloudsChanged");
static_assert(offsetof(FortThreatVisualsManager_OnThreatCloudsChanged, ThreatLocationInfo) == 0x000000, "Member 'FortThreatVisualsManager_OnThreatCloudsChanged::ThreatLocationInfo' has a wrong offset!");

// Function FortniteGame.FortThreatVisualsManager.SetCloudsAreHidden
// 0x0001 (0x0001 - 0x0000)
struct FortThreatVisualsManager_SetCloudsAreHidden final
{
public:
	bool                                          bHide;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortThreatVisualsManager_SetCloudsAreHidden) == 0x000001, "Wrong alignment on FortThreatVisualsManager_SetCloudsAreHidden");
static_assert(sizeof(FortThreatVisualsManager_SetCloudsAreHidden) == 0x000001, "Wrong size on FortThreatVisualsManager_SetCloudsAreHidden");
static_assert(offsetof(FortThreatVisualsManager_SetCloudsAreHidden, bHide) == 0x000000, "Member 'FortThreatVisualsManager_SetCloudsAreHidden::bHide' has a wrong offset!");

// Function FortniteGame.FortThreatVisualsManager.SetMinimumCloudAltitude
// 0x0004 (0x0004 - 0x0000)
struct FortThreatVisualsManager_SetMinimumCloudAltitude final
{
public:
	float                                         NewMinimumAltitude;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortThreatVisualsManager_SetMinimumCloudAltitude) == 0x000004, "Wrong alignment on FortThreatVisualsManager_SetMinimumCloudAltitude");
static_assert(sizeof(FortThreatVisualsManager_SetMinimumCloudAltitude) == 0x000004, "Wrong size on FortThreatVisualsManager_SetMinimumCloudAltitude");
static_assert(offsetof(FortThreatVisualsManager_SetMinimumCloudAltitude, NewMinimumAltitude) == 0x000000, "Member 'FortThreatVisualsManager_SetMinimumCloudAltitude::NewMinimumAltitude' has a wrong offset!");

// Function FortniteGame.FortThreatVisualsManager.GetCloudsAreHidden
// 0x0001 (0x0001 - 0x0000)
struct FortThreatVisualsManager_GetCloudsAreHidden final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortThreatVisualsManager_GetCloudsAreHidden) == 0x000001, "Wrong alignment on FortThreatVisualsManager_GetCloudsAreHidden");
static_assert(sizeof(FortThreatVisualsManager_GetCloudsAreHidden) == 0x000001, "Wrong size on FortThreatVisualsManager_GetCloudsAreHidden");
static_assert(offsetof(FortThreatVisualsManager_GetCloudsAreHidden, ReturnValue) == 0x000000, "Member 'FortThreatVisualsManager_GetCloudsAreHidden::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortThreatVisualsManager.GetThreatCloud
// 0x0068 (0x0068 - 0x0000)
struct FortThreatVisualsManager_GetThreatCloud final
{
public:
	struct FThreatLocationInfo                    ThreatLocInfo;                                     // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AThreatCloud*                           ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortThreatVisualsManager_GetThreatCloud) == 0x000008, "Wrong alignment on FortThreatVisualsManager_GetThreatCloud");
static_assert(sizeof(FortThreatVisualsManager_GetThreatCloud) == 0x000068, "Wrong size on FortThreatVisualsManager_GetThreatCloud");
static_assert(offsetof(FortThreatVisualsManager_GetThreatCloud, ThreatLocInfo) == 0x000000, "Member 'FortThreatVisualsManager_GetThreatCloud::ThreatLocInfo' has a wrong offset!");
static_assert(offsetof(FortThreatVisualsManager_GetThreatCloud, ReturnValue) == 0x000060, "Member 'FortThreatVisualsManager_GetThreatCloud::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortThreatVisualsManager.GetThreatClouds
// 0x0010 (0x0010 - 0x0000)
struct FortThreatVisualsManager_GetThreatClouds final
{
public:
	TArray<struct FThreatLocationInfo>            ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortThreatVisualsManager_GetThreatClouds) == 0x000008, "Wrong alignment on FortThreatVisualsManager_GetThreatClouds");
static_assert(sizeof(FortThreatVisualsManager_GetThreatClouds) == 0x000010, "Wrong size on FortThreatVisualsManager_GetThreatClouds");
static_assert(offsetof(FortThreatVisualsManager_GetThreatClouds, ReturnValue) == 0x000000, "Member 'FortThreatVisualsManager_GetThreatClouds::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortThreatVisualsManager.StormsExist
// 0x0001 (0x0001 - 0x0000)
struct FortThreatVisualsManager_StormsExist final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortThreatVisualsManager_StormsExist) == 0x000001, "Wrong alignment on FortThreatVisualsManager_StormsExist");
static_assert(sizeof(FortThreatVisualsManager_StormsExist) == 0x000001, "Wrong size on FortThreatVisualsManager_StormsExist");
static_assert(offsetof(FortThreatVisualsManager_StormsExist, ReturnValue) == 0x000000, "Member 'FortThreatVisualsManager_StormsExist::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTooltipLibrary.FormatAttributeBuffs
// 0x0098 (0x0098 - 0x0000)
struct FortTooltipLibrary_FormatAttributeBuffs final
{
public:
	struct FFortAttributeInfo                     AttributeInfo;                                     // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         AdditiveBuff;                                      // 0x0078(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MultiplicativeBuff;                                // 0x007C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0080(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTooltipLibrary_FormatAttributeBuffs) == 0x000008, "Wrong alignment on FortTooltipLibrary_FormatAttributeBuffs");
static_assert(sizeof(FortTooltipLibrary_FormatAttributeBuffs) == 0x000098, "Wrong size on FortTooltipLibrary_FormatAttributeBuffs");
static_assert(offsetof(FortTooltipLibrary_FormatAttributeBuffs, AttributeInfo) == 0x000000, "Member 'FortTooltipLibrary_FormatAttributeBuffs::AttributeInfo' has a wrong offset!");
static_assert(offsetof(FortTooltipLibrary_FormatAttributeBuffs, AdditiveBuff) == 0x000078, "Member 'FortTooltipLibrary_FormatAttributeBuffs::AdditiveBuff' has a wrong offset!");
static_assert(offsetof(FortTooltipLibrary_FormatAttributeBuffs, MultiplicativeBuff) == 0x00007C, "Member 'FortTooltipLibrary_FormatAttributeBuffs::MultiplicativeBuff' has a wrong offset!");
static_assert(offsetof(FortTooltipLibrary_FormatAttributeBuffs, ReturnValue) == 0x000080, "Member 'FortTooltipLibrary_FormatAttributeBuffs::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.AddCompletionTagsToMission
// 0x0038 (0x0038 - 0x0000)
struct FortMissionLibrary_AddCompletionTagsToMission final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MissionGuid;                                       // 0x0008(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  NewCompletionTagContainer;                         // 0x0018(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_AddCompletionTagsToMission) == 0x000008, "Wrong alignment on FortMissionLibrary_AddCompletionTagsToMission");
static_assert(sizeof(FortMissionLibrary_AddCompletionTagsToMission) == 0x000038, "Wrong size on FortMissionLibrary_AddCompletionTagsToMission");
static_assert(offsetof(FortMissionLibrary_AddCompletionTagsToMission, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_AddCompletionTagsToMission::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_AddCompletionTagsToMission, MissionGuid) == 0x000008, "Member 'FortMissionLibrary_AddCompletionTagsToMission::MissionGuid' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_AddCompletionTagsToMission, NewCompletionTagContainer) == 0x000018, "Member 'FortMissionLibrary_AddCompletionTagsToMission::NewCompletionTagContainer' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.AddCompletionTagToMission
// 0x0020 (0x0020 - 0x0000)
struct FortMissionLibrary_AddCompletionTagToMission final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MissionGuid;                                       // 0x0008(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           NewCompletionTag;                                  // 0x0018(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_AddCompletionTagToMission) == 0x000008, "Wrong alignment on FortMissionLibrary_AddCompletionTagToMission");
static_assert(sizeof(FortMissionLibrary_AddCompletionTagToMission) == 0x000020, "Wrong size on FortMissionLibrary_AddCompletionTagToMission");
static_assert(offsetof(FortMissionLibrary_AddCompletionTagToMission, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_AddCompletionTagToMission::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_AddCompletionTagToMission, MissionGuid) == 0x000008, "Member 'FortMissionLibrary_AddCompletionTagToMission::MissionGuid' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_AddCompletionTagToMission, NewCompletionTag) == 0x000018, "Member 'FortMissionLibrary_AddCompletionTagToMission::NewCompletionTag' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.AdjustWaveBasedGameDifficulty
// 0x0010 (0x0010 - 0x0000)
struct FortMissionLibrary_AdjustWaveBasedGameDifficulty final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FDifficultyAddMod;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMissionLibrary_AdjustWaveBasedGameDifficulty) == 0x000008, "Wrong alignment on FortMissionLibrary_AdjustWaveBasedGameDifficulty");
static_assert(sizeof(FortMissionLibrary_AdjustWaveBasedGameDifficulty) == 0x000010, "Wrong size on FortMissionLibrary_AdjustWaveBasedGameDifficulty");
static_assert(offsetof(FortMissionLibrary_AdjustWaveBasedGameDifficulty, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_AdjustWaveBasedGameDifficulty::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_AdjustWaveBasedGameDifficulty, FDifficultyAddMod) == 0x000008, "Member 'FortMissionLibrary_AdjustWaveBasedGameDifficulty::FDifficultyAddMod' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.CreateDynamicBuildingDeconstructor
// 0x0028 (0x0028 - 0x0000)
struct FortMissionLibrary_CreateDynamicBuildingDeconstructor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtent;                                         // 0x0014(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreMissionActors;                              // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShrinkAndDestroy;                                 // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMissionLibrary_CreateDynamicBuildingDeconstructor) == 0x000008, "Wrong alignment on FortMissionLibrary_CreateDynamicBuildingDeconstructor");
static_assert(sizeof(FortMissionLibrary_CreateDynamicBuildingDeconstructor) == 0x000028, "Wrong size on FortMissionLibrary_CreateDynamicBuildingDeconstructor");
static_assert(offsetof(FortMissionLibrary_CreateDynamicBuildingDeconstructor, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_CreateDynamicBuildingDeconstructor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_CreateDynamicBuildingDeconstructor, Origin) == 0x000008, "Member 'FortMissionLibrary_CreateDynamicBuildingDeconstructor::Origin' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_CreateDynamicBuildingDeconstructor, BoxExtent) == 0x000014, "Member 'FortMissionLibrary_CreateDynamicBuildingDeconstructor::BoxExtent' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_CreateDynamicBuildingDeconstructor, bIgnoreMissionActors) == 0x000020, "Member 'FortMissionLibrary_CreateDynamicBuildingDeconstructor::bIgnoreMissionActors' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_CreateDynamicBuildingDeconstructor, bShrinkAndDestroy) == 0x000021, "Member 'FortMissionLibrary_CreateDynamicBuildingDeconstructor::bShrinkAndDestroy' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.CreateMissionEvent
// 0x0140 (0x0140 - 0x0000)
struct FortMissionLibrary_CreateMissionEvent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventType;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MissionGuid;                                       // 0x0010(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ObjectiveHandle;                                   // 0x0020(0x0020)(Parm, NativeAccessSpecifierPublic)
	class UFortMissionEventParams*                Params_0;                                          // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DO_NOT_USE_THIS_OR_VARIABLES_BELOW;                // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                EventFocus;                                        // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataAsset*                             EventContent;                                      // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EventInstigator;                                   // 0x0060(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GenericInt;                                        // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GenericFloat;                                      // 0x006C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   GenericText;                                       // 0x0070(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0088(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	struct FFortMissionEvent                      ReturnValue;                                       // 0x00A8(0x0098)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_CreateMissionEvent) == 0x000008, "Wrong alignment on FortMissionLibrary_CreateMissionEvent");
static_assert(sizeof(FortMissionLibrary_CreateMissionEvent) == 0x000140, "Wrong size on FortMissionLibrary_CreateMissionEvent");
static_assert(offsetof(FortMissionLibrary_CreateMissionEvent, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_CreateMissionEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_CreateMissionEvent, EventType) == 0x000008, "Member 'FortMissionLibrary_CreateMissionEvent::EventType' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_CreateMissionEvent, MissionGuid) == 0x000010, "Member 'FortMissionLibrary_CreateMissionEvent::MissionGuid' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_CreateMissionEvent, ObjectiveHandle) == 0x000020, "Member 'FortMissionLibrary_CreateMissionEvent::ObjectiveHandle' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_CreateMissionEvent, Params_0) == 0x000040, "Member 'FortMissionLibrary_CreateMissionEvent::Params_0' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_CreateMissionEvent, DO_NOT_USE_THIS_OR_VARIABLES_BELOW) == 0x000048, "Member 'FortMissionLibrary_CreateMissionEvent::DO_NOT_USE_THIS_OR_VARIABLES_BELOW' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_CreateMissionEvent, EventFocus) == 0x000050, "Member 'FortMissionLibrary_CreateMissionEvent::EventFocus' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_CreateMissionEvent, EventContent) == 0x000058, "Member 'FortMissionLibrary_CreateMissionEvent::EventContent' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_CreateMissionEvent, EventInstigator) == 0x000060, "Member 'FortMissionLibrary_CreateMissionEvent::EventInstigator' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_CreateMissionEvent, GenericInt) == 0x000068, "Member 'FortMissionLibrary_CreateMissionEvent::GenericInt' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_CreateMissionEvent, GenericFloat) == 0x00006C, "Member 'FortMissionLibrary_CreateMissionEvent::GenericFloat' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_CreateMissionEvent, GenericText) == 0x000070, "Member 'FortMissionLibrary_CreateMissionEvent::GenericText' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_CreateMissionEvent, GameplayTags) == 0x000088, "Member 'FortMissionLibrary_CreateMissionEvent::GameplayTags' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_CreateMissionEvent, ReturnValue) == 0x0000A8, "Member 'FortMissionLibrary_CreateMissionEvent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.ExecuteMissionEvent
// 0x00A8 (0x00A8 - 0x0000)
struct FortMissionLibrary_ExecuteMissionEvent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventType;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MissionGuid;                                       // 0x0010(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ObjectiveHandle;                                   // 0x0020(0x0020)(Parm, NativeAccessSpecifierPublic)
	class UFortMissionEventParams*                Params_0;                                          // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DO_NOT_USE_THIS_OR_VARIABLES_BELOW;                // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                EventFocus;                                        // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataAsset*                             EventContent;                                      // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EventInstigator;                                   // 0x0060(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GenericInt;                                        // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GenericFloat;                                      // 0x006C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   GenericText;                                       // 0x0070(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0088(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_ExecuteMissionEvent) == 0x000008, "Wrong alignment on FortMissionLibrary_ExecuteMissionEvent");
static_assert(sizeof(FortMissionLibrary_ExecuteMissionEvent) == 0x0000A8, "Wrong size on FortMissionLibrary_ExecuteMissionEvent");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEvent, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_ExecuteMissionEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEvent, EventType) == 0x000008, "Member 'FortMissionLibrary_ExecuteMissionEvent::EventType' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEvent, MissionGuid) == 0x000010, "Member 'FortMissionLibrary_ExecuteMissionEvent::MissionGuid' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEvent, ObjectiveHandle) == 0x000020, "Member 'FortMissionLibrary_ExecuteMissionEvent::ObjectiveHandle' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEvent, Params_0) == 0x000040, "Member 'FortMissionLibrary_ExecuteMissionEvent::Params_0' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEvent, DO_NOT_USE_THIS_OR_VARIABLES_BELOW) == 0x000048, "Member 'FortMissionLibrary_ExecuteMissionEvent::DO_NOT_USE_THIS_OR_VARIABLES_BELOW' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEvent, EventFocus) == 0x000050, "Member 'FortMissionLibrary_ExecuteMissionEvent::EventFocus' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEvent, EventContent) == 0x000058, "Member 'FortMissionLibrary_ExecuteMissionEvent::EventContent' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEvent, EventInstigator) == 0x000060, "Member 'FortMissionLibrary_ExecuteMissionEvent::EventInstigator' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEvent, GenericInt) == 0x000068, "Member 'FortMissionLibrary_ExecuteMissionEvent::GenericInt' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEvent, GenericFloat) == 0x00006C, "Member 'FortMissionLibrary_ExecuteMissionEvent::GenericFloat' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEvent, GenericText) == 0x000070, "Member 'FortMissionLibrary_ExecuteMissionEvent::GenericText' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEvent, GameplayTags) == 0x000088, "Member 'FortMissionLibrary_ExecuteMissionEvent::GameplayTags' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.ExecuteMissionEventEx
// 0x00B0 (0x00B0 - 0x0000)
struct FortMissionLibrary_ExecuteMissionEventEx final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortMissionEventName                  EventType;                                         // 0x0008(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGuid                                  MissionGuid;                                       // 0x0018(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ObjectiveHandle;                                   // 0x0028(0x0020)(Parm, NativeAccessSpecifierPublic)
	class UFortMissionEventParams*                Params_0;                                          // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DO_NOT_USE_THIS_OR_VARIABLES_BELOW;                // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                EventFocus;                                        // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataAsset*                             EventContent;                                      // 0x0060(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EventInstigator;                                   // 0x0068(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GenericInt;                                        // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GenericFloat;                                      // 0x0074(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   GenericText;                                       // 0x0078(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0090(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_ExecuteMissionEventEx) == 0x000008, "Wrong alignment on FortMissionLibrary_ExecuteMissionEventEx");
static_assert(sizeof(FortMissionLibrary_ExecuteMissionEventEx) == 0x0000B0, "Wrong size on FortMissionLibrary_ExecuteMissionEventEx");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEventEx, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_ExecuteMissionEventEx::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEventEx, EventType) == 0x000008, "Member 'FortMissionLibrary_ExecuteMissionEventEx::EventType' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEventEx, MissionGuid) == 0x000018, "Member 'FortMissionLibrary_ExecuteMissionEventEx::MissionGuid' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEventEx, ObjectiveHandle) == 0x000028, "Member 'FortMissionLibrary_ExecuteMissionEventEx::ObjectiveHandle' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEventEx, Params_0) == 0x000048, "Member 'FortMissionLibrary_ExecuteMissionEventEx::Params_0' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEventEx, DO_NOT_USE_THIS_OR_VARIABLES_BELOW) == 0x000050, "Member 'FortMissionLibrary_ExecuteMissionEventEx::DO_NOT_USE_THIS_OR_VARIABLES_BELOW' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEventEx, EventFocus) == 0x000058, "Member 'FortMissionLibrary_ExecuteMissionEventEx::EventFocus' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEventEx, EventContent) == 0x000060, "Member 'FortMissionLibrary_ExecuteMissionEventEx::EventContent' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEventEx, EventInstigator) == 0x000068, "Member 'FortMissionLibrary_ExecuteMissionEventEx::EventInstigator' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEventEx, GenericInt) == 0x000070, "Member 'FortMissionLibrary_ExecuteMissionEventEx::GenericInt' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEventEx, GenericFloat) == 0x000074, "Member 'FortMissionLibrary_ExecuteMissionEventEx::GenericFloat' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEventEx, GenericText) == 0x000078, "Member 'FortMissionLibrary_ExecuteMissionEventEx::GenericText' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEventEx, GameplayTags) == 0x000090, "Member 'FortMissionLibrary_ExecuteMissionEventEx::GameplayTags' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.FindActorsWithTags
// 0x0038 (0x0038 - 0x0000)
struct FortMissionLibrary_FindActorsWithTags final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Tags;                                              // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class ABuildingActor*>                 ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_FindActorsWithTags) == 0x000008, "Wrong alignment on FortMissionLibrary_FindActorsWithTags");
static_assert(sizeof(FortMissionLibrary_FindActorsWithTags) == 0x000038, "Wrong size on FortMissionLibrary_FindActorsWithTags");
static_assert(offsetof(FortMissionLibrary_FindActorsWithTags, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_FindActorsWithTags::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_FindActorsWithTags, Tags) == 0x000008, "Member 'FortMissionLibrary_FindActorsWithTags::Tags' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_FindActorsWithTags, ReturnValue) == 0x000028, "Member 'FortMissionLibrary_FindActorsWithTags::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.FindOriginatingPlacementActor
// 0x0010 (0x0010 - 0x0000)
struct FortMissionLibrary_FindOriginatingPlacementActor final
{
public:
	class ABuildingActor*                         BuildingActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlacementActor*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_FindOriginatingPlacementActor) == 0x000008, "Wrong alignment on FortMissionLibrary_FindOriginatingPlacementActor");
static_assert(sizeof(FortMissionLibrary_FindOriginatingPlacementActor) == 0x000010, "Wrong size on FortMissionLibrary_FindOriginatingPlacementActor");
static_assert(offsetof(FortMissionLibrary_FindOriginatingPlacementActor, BuildingActor) == 0x000000, "Member 'FortMissionLibrary_FindOriginatingPlacementActor::BuildingActor' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_FindOriginatingPlacementActor, ReturnValue) == 0x000008, "Member 'FortMissionLibrary_FindOriginatingPlacementActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.GetAllLoadedMissions
// 0x0018 (0x0018 - 0x0000)
struct FortMissionLibrary_GetAllLoadedMissions final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AFortMission*>                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_GetAllLoadedMissions) == 0x000008, "Wrong alignment on FortMissionLibrary_GetAllLoadedMissions");
static_assert(sizeof(FortMissionLibrary_GetAllLoadedMissions) == 0x000018, "Wrong size on FortMissionLibrary_GetAllLoadedMissions");
static_assert(offsetof(FortMissionLibrary_GetAllLoadedMissions, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_GetAllLoadedMissions::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GetAllLoadedMissions, ReturnValue) == 0x000008, "Member 'FortMissionLibrary_GetAllLoadedMissions::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.GetBluGloManager
// 0x0010 (0x0010 - 0x0000)
struct FortMissionLibrary_GetBluGloManager final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortBluGloManager*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_GetBluGloManager) == 0x000008, "Wrong alignment on FortMissionLibrary_GetBluGloManager");
static_assert(sizeof(FortMissionLibrary_GetBluGloManager) == 0x000010, "Wrong size on FortMissionLibrary_GetBluGloManager");
static_assert(offsetof(FortMissionLibrary_GetBluGloManager, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_GetBluGloManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GetBluGloManager, ReturnValue) == 0x000008, "Member 'FortMissionLibrary_GetBluGloManager::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.GetMissionActorsInEncounterDirection
// 0x0038 (0x0038 - 0x0000)
struct FortMissionLibrary_GetMissionActorsInEncounterDirection final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorSubclass;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartLocation;                                     // 0x0010(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortEncounterDirection                       DirectionToLookForActors;                          // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Angle;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistance;                                       // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_GetMissionActorsInEncounterDirection) == 0x000008, "Wrong alignment on FortMissionLibrary_GetMissionActorsInEncounterDirection");
static_assert(sizeof(FortMissionLibrary_GetMissionActorsInEncounterDirection) == 0x000038, "Wrong size on FortMissionLibrary_GetMissionActorsInEncounterDirection");
static_assert(offsetof(FortMissionLibrary_GetMissionActorsInEncounterDirection, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_GetMissionActorsInEncounterDirection::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GetMissionActorsInEncounterDirection, ActorSubclass) == 0x000008, "Member 'FortMissionLibrary_GetMissionActorsInEncounterDirection::ActorSubclass' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GetMissionActorsInEncounterDirection, StartLocation) == 0x000010, "Member 'FortMissionLibrary_GetMissionActorsInEncounterDirection::StartLocation' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GetMissionActorsInEncounterDirection, DirectionToLookForActors) == 0x00001C, "Member 'FortMissionLibrary_GetMissionActorsInEncounterDirection::DirectionToLookForActors' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GetMissionActorsInEncounterDirection, Angle) == 0x000020, "Member 'FortMissionLibrary_GetMissionActorsInEncounterDirection::Angle' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GetMissionActorsInEncounterDirection, MaxDistance) == 0x000024, "Member 'FortMissionLibrary_GetMissionActorsInEncounterDirection::MaxDistance' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GetMissionActorsInEncounterDirection, ReturnValue) == 0x000028, "Member 'FortMissionLibrary_GetMissionActorsInEncounterDirection::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.GetMissionActorsInVectorDirection
// 0x0040 (0x0040 - 0x0000)
struct FortMissionLibrary_GetMissionActorsInVectorDirection final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorSubclass;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartLocation;                                     // 0x0010(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DirectionToLookForActors;                          // 0x001C(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistance;                                       // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_GetMissionActorsInVectorDirection) == 0x000008, "Wrong alignment on FortMissionLibrary_GetMissionActorsInVectorDirection");
static_assert(sizeof(FortMissionLibrary_GetMissionActorsInVectorDirection) == 0x000040, "Wrong size on FortMissionLibrary_GetMissionActorsInVectorDirection");
static_assert(offsetof(FortMissionLibrary_GetMissionActorsInVectorDirection, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_GetMissionActorsInVectorDirection::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GetMissionActorsInVectorDirection, ActorSubclass) == 0x000008, "Member 'FortMissionLibrary_GetMissionActorsInVectorDirection::ActorSubclass' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GetMissionActorsInVectorDirection, StartLocation) == 0x000010, "Member 'FortMissionLibrary_GetMissionActorsInVectorDirection::StartLocation' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GetMissionActorsInVectorDirection, DirectionToLookForActors) == 0x00001C, "Member 'FortMissionLibrary_GetMissionActorsInVectorDirection::DirectionToLookForActors' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GetMissionActorsInVectorDirection, Angle) == 0x000028, "Member 'FortMissionLibrary_GetMissionActorsInVectorDirection::Angle' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GetMissionActorsInVectorDirection, MaxDistance) == 0x00002C, "Member 'FortMissionLibrary_GetMissionActorsInVectorDirection::MaxDistance' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GetMissionActorsInVectorDirection, ReturnValue) == 0x000030, "Member 'FortMissionLibrary_GetMissionActorsInVectorDirection::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.GetMissionFromGuid
// 0x0020 (0x0020 - 0x0000)
struct FortMissionLibrary_GetMissionFromGuid final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MissionGuid;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortMission*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_GetMissionFromGuid) == 0x000008, "Wrong alignment on FortMissionLibrary_GetMissionFromGuid");
static_assert(sizeof(FortMissionLibrary_GetMissionFromGuid) == 0x000020, "Wrong size on FortMissionLibrary_GetMissionFromGuid");
static_assert(offsetof(FortMissionLibrary_GetMissionFromGuid, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_GetMissionFromGuid::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GetMissionFromGuid, MissionGuid) == 0x000008, "Member 'FortMissionLibrary_GetMissionFromGuid::MissionGuid' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GetMissionFromGuid, ReturnValue) == 0x000018, "Member 'FortMissionLibrary_GetMissionFromGuid::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.GetMissionHUDTextLineHeightEstimate
// 0x0020 (0x0020 - 0x0000)
struct FortMissionLibrary_GetMissionHUDTextLineHeightEstimate final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMissionLibrary_GetMissionHUDTextLineHeightEstimate) == 0x000008, "Wrong alignment on FortMissionLibrary_GetMissionHUDTextLineHeightEstimate");
static_assert(sizeof(FortMissionLibrary_GetMissionHUDTextLineHeightEstimate) == 0x000020, "Wrong size on FortMissionLibrary_GetMissionHUDTextLineHeightEstimate");
static_assert(offsetof(FortMissionLibrary_GetMissionHUDTextLineHeightEstimate, Text) == 0x000000, "Member 'FortMissionLibrary_GetMissionHUDTextLineHeightEstimate::Text' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GetMissionHUDTextLineHeightEstimate, ReturnValue) == 0x000018, "Member 'FortMissionLibrary_GetMissionHUDTextLineHeightEstimate::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.GetTieredWaveBaseNumKillPoints
// 0x0018 (0x0018 - 0x0000)
struct FortMissionLibrary_GetTieredWaveBaseNumKillPoints final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BaseNumOfKillPointsRowName;                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideDifficulty;                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutBaseNumKillPoints;                              // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_GetTieredWaveBaseNumKillPoints) == 0x000008, "Wrong alignment on FortMissionLibrary_GetTieredWaveBaseNumKillPoints");
static_assert(sizeof(FortMissionLibrary_GetTieredWaveBaseNumKillPoints) == 0x000018, "Wrong size on FortMissionLibrary_GetTieredWaveBaseNumKillPoints");
static_assert(offsetof(FortMissionLibrary_GetTieredWaveBaseNumKillPoints, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_GetTieredWaveBaseNumKillPoints::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GetTieredWaveBaseNumKillPoints, BaseNumOfKillPointsRowName) == 0x000008, "Member 'FortMissionLibrary_GetTieredWaveBaseNumKillPoints::BaseNumOfKillPointsRowName' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GetTieredWaveBaseNumKillPoints, OverrideDifficulty) == 0x000010, "Member 'FortMissionLibrary_GetTieredWaveBaseNumKillPoints::OverrideDifficulty' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GetTieredWaveBaseNumKillPoints, OutBaseNumKillPoints) == 0x000014, "Member 'FortMissionLibrary_GetTieredWaveBaseNumKillPoints::OutBaseNumKillPoints' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.GetTieredWaveBaseNumKills
// 0x0018 (0x0018 - 0x0000)
struct FortMissionLibrary_GetTieredWaveBaseNumKills final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BaseNumOfKillsRowName;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideDifficulty;                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutBaseNumKills;                                   // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_GetTieredWaveBaseNumKills) == 0x000008, "Wrong alignment on FortMissionLibrary_GetTieredWaveBaseNumKills");
static_assert(sizeof(FortMissionLibrary_GetTieredWaveBaseNumKills) == 0x000018, "Wrong size on FortMissionLibrary_GetTieredWaveBaseNumKills");
static_assert(offsetof(FortMissionLibrary_GetTieredWaveBaseNumKills, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_GetTieredWaveBaseNumKills::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GetTieredWaveBaseNumKills, BaseNumOfKillsRowName) == 0x000008, "Member 'FortMissionLibrary_GetTieredWaveBaseNumKills::BaseNumOfKillsRowName' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GetTieredWaveBaseNumKills, OverrideDifficulty) == 0x000010, "Member 'FortMissionLibrary_GetTieredWaveBaseNumKills::OverrideDifficulty' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GetTieredWaveBaseNumKills, OutBaseNumKills) == 0x000014, "Member 'FortMissionLibrary_GetTieredWaveBaseNumKills::OutBaseNumKills' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.GetTieredWaveBaseWaveLength
// 0x0018 (0x0018 - 0x0000)
struct FortMissionLibrary_GetTieredWaveBaseWaveLength final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BaseWaveLengthRowName;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideDifficulty;                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutBaseWaveLength;                                 // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_GetTieredWaveBaseWaveLength) == 0x000008, "Wrong alignment on FortMissionLibrary_GetTieredWaveBaseWaveLength");
static_assert(sizeof(FortMissionLibrary_GetTieredWaveBaseWaveLength) == 0x000018, "Wrong size on FortMissionLibrary_GetTieredWaveBaseWaveLength");
static_assert(offsetof(FortMissionLibrary_GetTieredWaveBaseWaveLength, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_GetTieredWaveBaseWaveLength::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GetTieredWaveBaseWaveLength, BaseWaveLengthRowName) == 0x000008, "Member 'FortMissionLibrary_GetTieredWaveBaseWaveLength::BaseWaveLengthRowName' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GetTieredWaveBaseWaveLength, OverrideDifficulty) == 0x000010, "Member 'FortMissionLibrary_GetTieredWaveBaseWaveLength::OverrideDifficulty' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GetTieredWaveBaseWaveLength, OutBaseWaveLength) == 0x000014, "Member 'FortMissionLibrary_GetTieredWaveBaseWaveLength::OutBaseWaveLength' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.GetTieredWaveSet
// 0x00A8 (0x00A8 - 0x0000)
struct FortMissionLibrary_GetTieredWaveSet final
{
public:
	class FName                                   TieredWaveCollectionName;                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Tier;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTieredWaveSetCollectionData           WaveCollectionInfo;                                // 0x0010(0x0088)(Parm, OutParm, NativeAccessSpecifierPublic)
	TArray<struct FTieredWaveSetData>             OutWaveData;                                       // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_GetTieredWaveSet) == 0x000008, "Wrong alignment on FortMissionLibrary_GetTieredWaveSet");
static_assert(sizeof(FortMissionLibrary_GetTieredWaveSet) == 0x0000A8, "Wrong size on FortMissionLibrary_GetTieredWaveSet");
static_assert(offsetof(FortMissionLibrary_GetTieredWaveSet, TieredWaveCollectionName) == 0x000000, "Member 'FortMissionLibrary_GetTieredWaveSet::TieredWaveCollectionName' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GetTieredWaveSet, Tier) == 0x000008, "Member 'FortMissionLibrary_GetTieredWaveSet::Tier' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GetTieredWaveSet, WaveCollectionInfo) == 0x000010, "Member 'FortMissionLibrary_GetTieredWaveSet::WaveCollectionInfo' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GetTieredWaveSet, OutWaveData) == 0x000098, "Member 'FortMissionLibrary_GetTieredWaveSet::OutWaveData' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.GiveMissionRewardsToPlayer
// 0x0060 (0x0060 - 0x0000)
struct FortMissionLibrary_GiveMissionRewardsToPlayer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  EventGuid;                                         // 0x0008(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  PlayerController;                                  // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TitleText;                                         // 0x0020(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   DescriptionText;                                   // 0x0038(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FName                                   LootTierGroup;                                     // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LootTier;                                          // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RewardDisplayTime;                                 // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_GiveMissionRewardsToPlayer) == 0x000008, "Wrong alignment on FortMissionLibrary_GiveMissionRewardsToPlayer");
static_assert(sizeof(FortMissionLibrary_GiveMissionRewardsToPlayer) == 0x000060, "Wrong size on FortMissionLibrary_GiveMissionRewardsToPlayer");
static_assert(offsetof(FortMissionLibrary_GiveMissionRewardsToPlayer, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_GiveMissionRewardsToPlayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GiveMissionRewardsToPlayer, EventGuid) == 0x000008, "Member 'FortMissionLibrary_GiveMissionRewardsToPlayer::EventGuid' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GiveMissionRewardsToPlayer, PlayerController) == 0x000018, "Member 'FortMissionLibrary_GiveMissionRewardsToPlayer::PlayerController' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GiveMissionRewardsToPlayer, TitleText) == 0x000020, "Member 'FortMissionLibrary_GiveMissionRewardsToPlayer::TitleText' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GiveMissionRewardsToPlayer, DescriptionText) == 0x000038, "Member 'FortMissionLibrary_GiveMissionRewardsToPlayer::DescriptionText' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GiveMissionRewardsToPlayer, LootTierGroup) == 0x000050, "Member 'FortMissionLibrary_GiveMissionRewardsToPlayer::LootTierGroup' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GiveMissionRewardsToPlayer, LootTier) == 0x000058, "Member 'FortMissionLibrary_GiveMissionRewardsToPlayer::LootTier' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GiveMissionRewardsToPlayer, RewardDisplayTime) == 0x00005C, "Member 'FortMissionLibrary_GiveMissionRewardsToPlayer::RewardDisplayTime' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.GiveMissionRewardsToPlayerAsPickups
// 0x0040 (0x0040 - 0x0000)
struct FortMissionLibrary_GiveMissionRewardsToPlayerAsPickups final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MissionGuid;                                       // 0x0008(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  PlayerController;                                  // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartPosition;                                     // 0x0020(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LootTierGroup;                                     // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LootTier;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMissionLibrary_GiveMissionRewardsToPlayerAsPickups) == 0x000008, "Wrong alignment on FortMissionLibrary_GiveMissionRewardsToPlayerAsPickups");
static_assert(sizeof(FortMissionLibrary_GiveMissionRewardsToPlayerAsPickups) == 0x000040, "Wrong size on FortMissionLibrary_GiveMissionRewardsToPlayerAsPickups");
static_assert(offsetof(FortMissionLibrary_GiveMissionRewardsToPlayerAsPickups, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_GiveMissionRewardsToPlayerAsPickups::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GiveMissionRewardsToPlayerAsPickups, MissionGuid) == 0x000008, "Member 'FortMissionLibrary_GiveMissionRewardsToPlayerAsPickups::MissionGuid' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GiveMissionRewardsToPlayerAsPickups, PlayerController) == 0x000018, "Member 'FortMissionLibrary_GiveMissionRewardsToPlayerAsPickups::PlayerController' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GiveMissionRewardsToPlayerAsPickups, StartPosition) == 0x000020, "Member 'FortMissionLibrary_GiveMissionRewardsToPlayerAsPickups::StartPosition' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GiveMissionRewardsToPlayerAsPickups, Radius) == 0x00002C, "Member 'FortMissionLibrary_GiveMissionRewardsToPlayerAsPickups::Radius' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GiveMissionRewardsToPlayerAsPickups, LootTierGroup) == 0x000030, "Member 'FortMissionLibrary_GiveMissionRewardsToPlayerAsPickups::LootTierGroup' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GiveMissionRewardsToPlayerAsPickups, LootTier) == 0x000038, "Member 'FortMissionLibrary_GiveMissionRewardsToPlayerAsPickups::LootTier' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.GiveMissionSchematicItemDirectlyToPlayer
// 0x0030 (0x0030 - 0x0000)
struct FortMissionLibrary_GiveMissionSchematicItemDirectlyToPlayer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  TargetPlayer;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MissionGuid;                                       // 0x0010(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortSchematicItemDefinition*           SchematicDefinition;                               // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMissionLibrary_GiveMissionSchematicItemDirectlyToPlayer) == 0x000008, "Wrong alignment on FortMissionLibrary_GiveMissionSchematicItemDirectlyToPlayer");
static_assert(sizeof(FortMissionLibrary_GiveMissionSchematicItemDirectlyToPlayer) == 0x000030, "Wrong size on FortMissionLibrary_GiveMissionSchematicItemDirectlyToPlayer");
static_assert(offsetof(FortMissionLibrary_GiveMissionSchematicItemDirectlyToPlayer, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_GiveMissionSchematicItemDirectlyToPlayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GiveMissionSchematicItemDirectlyToPlayer, TargetPlayer) == 0x000008, "Member 'FortMissionLibrary_GiveMissionSchematicItemDirectlyToPlayer::TargetPlayer' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GiveMissionSchematicItemDirectlyToPlayer, MissionGuid) == 0x000010, "Member 'FortMissionLibrary_GiveMissionSchematicItemDirectlyToPlayer::MissionGuid' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GiveMissionSchematicItemDirectlyToPlayer, SchematicDefinition) == 0x000020, "Member 'FortMissionLibrary_GiveMissionSchematicItemDirectlyToPlayer::SchematicDefinition' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GiveMissionSchematicItemDirectlyToPlayer, ReturnValue) == 0x000028, "Member 'FortMissionLibrary_GiveMissionSchematicItemDirectlyToPlayer::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.HasTags
// 0x0048 (0x0048 - 0x0000)
struct FortMissionLibrary_HasTags final
{
public:
	struct FGameplayTagContainer                  ContainerToCheck;                                  // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TagsToCheck;                                       // 0x0020(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bRequireAll;                                       // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCountEmptyAsMatch;                                // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0042(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0x5];                                       // 0x0043(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMissionLibrary_HasTags) == 0x000008, "Wrong alignment on FortMissionLibrary_HasTags");
static_assert(sizeof(FortMissionLibrary_HasTags) == 0x000048, "Wrong size on FortMissionLibrary_HasTags");
static_assert(offsetof(FortMissionLibrary_HasTags, ContainerToCheck) == 0x000000, "Member 'FortMissionLibrary_HasTags::ContainerToCheck' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_HasTags, TagsToCheck) == 0x000020, "Member 'FortMissionLibrary_HasTags::TagsToCheck' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_HasTags, bRequireAll) == 0x000040, "Member 'FortMissionLibrary_HasTags::bRequireAll' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_HasTags, bCountEmptyAsMatch) == 0x000041, "Member 'FortMissionLibrary_HasTags::bCountEmptyAsMatch' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_HasTags, ReturnValue) == 0x000042, "Member 'FortMissionLibrary_HasTags::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.IsUsingNewMissionGeneration
// 0x0010 (0x0010 - 0x0000)
struct FortMissionLibrary_IsUsingNewMissionGeneration final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMissionLibrary_IsUsingNewMissionGeneration) == 0x000008, "Wrong alignment on FortMissionLibrary_IsUsingNewMissionGeneration");
static_assert(sizeof(FortMissionLibrary_IsUsingNewMissionGeneration) == 0x000010, "Wrong size on FortMissionLibrary_IsUsingNewMissionGeneration");
static_assert(offsetof(FortMissionLibrary_IsUsingNewMissionGeneration, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_IsUsingNewMissionGeneration::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_IsUsingNewMissionGeneration, ReturnValue) == 0x000008, "Member 'FortMissionLibrary_IsUsingNewMissionGeneration::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.LoadMission
// 0x0010 (0x0010 - 0x0000)
struct FortMissionLibrary_LoadMission final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortMissionInfo*                       MissionInfo;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_LoadMission) == 0x000008, "Wrong alignment on FortMissionLibrary_LoadMission");
static_assert(sizeof(FortMissionLibrary_LoadMission) == 0x000010, "Wrong size on FortMissionLibrary_LoadMission");
static_assert(offsetof(FortMissionLibrary_LoadMission, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_LoadMission::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_LoadMission, MissionInfo) == 0x000008, "Member 'FortMissionLibrary_LoadMission::MissionInfo' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.NumBluGloFromPlayerPawn
// 0x0010 (0x0010 - 0x0000)
struct FortMissionLibrary_NumBluGloFromPlayerPawn final
{
public:
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMissionLibrary_NumBluGloFromPlayerPawn) == 0x000008, "Wrong alignment on FortMissionLibrary_NumBluGloFromPlayerPawn");
static_assert(sizeof(FortMissionLibrary_NumBluGloFromPlayerPawn) == 0x000010, "Wrong size on FortMissionLibrary_NumBluGloFromPlayerPawn");
static_assert(offsetof(FortMissionLibrary_NumBluGloFromPlayerPawn, PlayerPawn) == 0x000000, "Member 'FortMissionLibrary_NumBluGloFromPlayerPawn::PlayerPawn' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_NumBluGloFromPlayerPawn, ReturnValue) == 0x000008, "Member 'FortMissionLibrary_NumBluGloFromPlayerPawn::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.NumBluGloFromPlayerState
// 0x0010 (0x0010 - 0x0000)
struct FortMissionLibrary_NumBluGloFromPlayerState final
{
public:
	class AFortPlayerStateZone*                   PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMissionLibrary_NumBluGloFromPlayerState) == 0x000008, "Wrong alignment on FortMissionLibrary_NumBluGloFromPlayerState");
static_assert(sizeof(FortMissionLibrary_NumBluGloFromPlayerState) == 0x000010, "Wrong size on FortMissionLibrary_NumBluGloFromPlayerState");
static_assert(offsetof(FortMissionLibrary_NumBluGloFromPlayerState, PlayerState) == 0x000000, "Member 'FortMissionLibrary_NumBluGloFromPlayerState::PlayerState' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_NumBluGloFromPlayerState, ReturnValue) == 0x000008, "Member 'FortMissionLibrary_NumBluGloFromPlayerState::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.PingMinimap
// 0x0028 (0x0028 - 0x0000)
struct FortMissionLibrary_PingMinimap final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocation;                                     // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PingColor;                                         // 0x0014(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortTeam                                     RequiredTeam;                                      // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMissionLibrary_PingMinimap) == 0x000008, "Wrong alignment on FortMissionLibrary_PingMinimap");
static_assert(sizeof(FortMissionLibrary_PingMinimap) == 0x000028, "Wrong size on FortMissionLibrary_PingMinimap");
static_assert(offsetof(FortMissionLibrary_PingMinimap, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_PingMinimap::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_PingMinimap, WorldLocation) == 0x000008, "Member 'FortMissionLibrary_PingMinimap::WorldLocation' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_PingMinimap, PingColor) == 0x000014, "Member 'FortMissionLibrary_PingMinimap::PingColor' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_PingMinimap, RequiredTeam) == 0x000024, "Member 'FortMissionLibrary_PingMinimap::RequiredTeam' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.PollActorsInVolume
// 0x0028 (0x0028 - 0x0000)
struct FortMissionLibrary_PollActorsInVolume final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                          VolumeBoxComponent;                                // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPollActorsInVolumeTypes                      PollBuildingTypes;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AActor>                     ActorClassToPoll;                                  // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMissionLibrary_PollActorsInVolume) == 0x000008, "Wrong alignment on FortMissionLibrary_PollActorsInVolume");
static_assert(sizeof(FortMissionLibrary_PollActorsInVolume) == 0x000028, "Wrong size on FortMissionLibrary_PollActorsInVolume");
static_assert(offsetof(FortMissionLibrary_PollActorsInVolume, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_PollActorsInVolume::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_PollActorsInVolume, VolumeBoxComponent) == 0x000008, "Member 'FortMissionLibrary_PollActorsInVolume::VolumeBoxComponent' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_PollActorsInVolume, PollBuildingTypes) == 0x000010, "Member 'FortMissionLibrary_PollActorsInVolume::PollBuildingTypes' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_PollActorsInVolume, ActorClassToPoll) == 0x000018, "Member 'FortMissionLibrary_PollActorsInVolume::ActorClassToPoll' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_PollActorsInVolume, ReturnValue) == 0x000020, "Member 'FortMissionLibrary_PollActorsInVolume::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.RegisterForMissionEvents
// 0x0020 (0x0020 - 0x0000)
struct FortMissionLibrary_RegisterForMissionEvents final
{
public:
	class AActor*                                 ActorToRegister;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MissionGuid;                                       // 0x0008(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMissionLibrary_RegisterForMissionEvents) == 0x000008, "Wrong alignment on FortMissionLibrary_RegisterForMissionEvents");
static_assert(sizeof(FortMissionLibrary_RegisterForMissionEvents) == 0x000020, "Wrong size on FortMissionLibrary_RegisterForMissionEvents");
static_assert(offsetof(FortMissionLibrary_RegisterForMissionEvents, ActorToRegister) == 0x000000, "Member 'FortMissionLibrary_RegisterForMissionEvents::ActorToRegister' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_RegisterForMissionEvents, MissionGuid) == 0x000008, "Member 'FortMissionLibrary_RegisterForMissionEvents::MissionGuid' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_RegisterForMissionEvents, ReturnValue) == 0x000018, "Member 'FortMissionLibrary_RegisterForMissionEvents::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.RegisterMissionInfoUIActor
// 0x0030 (0x0030 - 0x0000)
struct FortMissionLibrary_RegisterMissionInfoUIActor final
{
public:
	class AActor*                                 AttachmentActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MissionGuid;                                       // 0x0008(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AttachementOffset;                                 // 0x0018(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxVisibleDistance;                                // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMissionLibrary_RegisterMissionInfoUIActor) == 0x000008, "Wrong alignment on FortMissionLibrary_RegisterMissionInfoUIActor");
static_assert(sizeof(FortMissionLibrary_RegisterMissionInfoUIActor) == 0x000030, "Wrong size on FortMissionLibrary_RegisterMissionInfoUIActor");
static_assert(offsetof(FortMissionLibrary_RegisterMissionInfoUIActor, AttachmentActor) == 0x000000, "Member 'FortMissionLibrary_RegisterMissionInfoUIActor::AttachmentActor' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_RegisterMissionInfoUIActor, MissionGuid) == 0x000008, "Member 'FortMissionLibrary_RegisterMissionInfoUIActor::MissionGuid' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_RegisterMissionInfoUIActor, AttachementOffset) == 0x000018, "Member 'FortMissionLibrary_RegisterMissionInfoUIActor::AttachementOffset' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_RegisterMissionInfoUIActor, MaxVisibleDistance) == 0x000024, "Member 'FortMissionLibrary_RegisterMissionInfoUIActor::MaxVisibleDistance' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_RegisterMissionInfoUIActor, ReturnValue) == 0x000028, "Member 'FortMissionLibrary_RegisterMissionInfoUIActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.RespawnOutlanderFragments
// 0x0008 (0x0008 - 0x0000)
struct FortMissionLibrary_RespawnOutlanderFragments final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_RespawnOutlanderFragments) == 0x000008, "Wrong alignment on FortMissionLibrary_RespawnOutlanderFragments");
static_assert(sizeof(FortMissionLibrary_RespawnOutlanderFragments) == 0x000008, "Wrong size on FortMissionLibrary_RespawnOutlanderFragments");
static_assert(offsetof(FortMissionLibrary_RespawnOutlanderFragments, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_RespawnOutlanderFragments::WorldContextObject' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.SetOnlinePresenceDoNotDisturb
// 0x0018 (0x0018 - 0x0000)
struct FortMissionLibrary_SetOnlinePresenceDoNotDisturb final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoNotDisturb;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerController*                  SpecificPlayer;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_SetOnlinePresenceDoNotDisturb) == 0x000008, "Wrong alignment on FortMissionLibrary_SetOnlinePresenceDoNotDisturb");
static_assert(sizeof(FortMissionLibrary_SetOnlinePresenceDoNotDisturb) == 0x000018, "Wrong size on FortMissionLibrary_SetOnlinePresenceDoNotDisturb");
static_assert(offsetof(FortMissionLibrary_SetOnlinePresenceDoNotDisturb, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_SetOnlinePresenceDoNotDisturb::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SetOnlinePresenceDoNotDisturb, bDoNotDisturb) == 0x000008, "Member 'FortMissionLibrary_SetOnlinePresenceDoNotDisturb::bDoNotDisturb' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SetOnlinePresenceDoNotDisturb, SpecificPlayer) == 0x000010, "Member 'FortMissionLibrary_SetOnlinePresenceDoNotDisturb::SpecificPlayer' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.SetWorldSavingEnabled
// 0x0010 (0x0010 - 0x0000)
struct FortMissionLibrary_SetWorldSavingEnabled final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMissionLibrary_SetWorldSavingEnabled) == 0x000008, "Wrong alignment on FortMissionLibrary_SetWorldSavingEnabled");
static_assert(sizeof(FortMissionLibrary_SetWorldSavingEnabled) == 0x000010, "Wrong size on FortMissionLibrary_SetWorldSavingEnabled");
static_assert(offsetof(FortMissionLibrary_SetWorldSavingEnabled, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_SetWorldSavingEnabled::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SetWorldSavingEnabled, bEnabled) == 0x000008, "Member 'FortMissionLibrary_SetWorldSavingEnabled::bEnabled' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.ShouldUseAlternateAIDirectorBalance
// 0x0001 (0x0001 - 0x0000)
struct FortMissionLibrary_ShouldUseAlternateAIDirectorBalance final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_ShouldUseAlternateAIDirectorBalance) == 0x000001, "Wrong alignment on FortMissionLibrary_ShouldUseAlternateAIDirectorBalance");
static_assert(sizeof(FortMissionLibrary_ShouldUseAlternateAIDirectorBalance) == 0x000001, "Wrong size on FortMissionLibrary_ShouldUseAlternateAIDirectorBalance");
static_assert(offsetof(FortMissionLibrary_ShouldUseAlternateAIDirectorBalance, ReturnValue) == 0x000000, "Member 'FortMissionLibrary_ShouldUseAlternateAIDirectorBalance::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.SpawnAndCollectPlayerPickups
// 0x0030 (0x0030 - 0x0000)
struct FortMissionLibrary_SpawnAndCollectPlayerPickups final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  PlayerController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartPosition;                                     // 0x0010(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LootTierGroup;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LootTier;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMissionLibrary_SpawnAndCollectPlayerPickups) == 0x000008, "Wrong alignment on FortMissionLibrary_SpawnAndCollectPlayerPickups");
static_assert(sizeof(FortMissionLibrary_SpawnAndCollectPlayerPickups) == 0x000030, "Wrong size on FortMissionLibrary_SpawnAndCollectPlayerPickups");
static_assert(offsetof(FortMissionLibrary_SpawnAndCollectPlayerPickups, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_SpawnAndCollectPlayerPickups::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnAndCollectPlayerPickups, PlayerController) == 0x000008, "Member 'FortMissionLibrary_SpawnAndCollectPlayerPickups::PlayerController' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnAndCollectPlayerPickups, StartPosition) == 0x000010, "Member 'FortMissionLibrary_SpawnAndCollectPlayerPickups::StartPosition' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnAndCollectPlayerPickups, LootTierGroup) == 0x000020, "Member 'FortMissionLibrary_SpawnAndCollectPlayerPickups::LootTierGroup' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnAndCollectPlayerPickups, LootTier) == 0x000028, "Member 'FortMissionLibrary_SpawnAndCollectPlayerPickups::LootTier' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.SpawnAtPlacementActorsHelper
// 0x0028 (0x0028 - 0x0000)
struct FortMissionLibrary_SpawnAtPlacementActorsHelper final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 Entries;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSucceeded;                                        // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_SpawnAtPlacementActorsHelper) == 0x000008, "Wrong alignment on FortMissionLibrary_SpawnAtPlacementActorsHelper");
static_assert(sizeof(FortMissionLibrary_SpawnAtPlacementActorsHelper) == 0x000028, "Wrong size on FortMissionLibrary_SpawnAtPlacementActorsHelper");
static_assert(offsetof(FortMissionLibrary_SpawnAtPlacementActorsHelper, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_SpawnAtPlacementActorsHelper::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnAtPlacementActorsHelper, Entries) == 0x000008, "Member 'FortMissionLibrary_SpawnAtPlacementActorsHelper::Entries' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnAtPlacementActorsHelper, bSucceeded) == 0x000010, "Member 'FortMissionLibrary_SpawnAtPlacementActorsHelper::bSucceeded' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnAtPlacementActorsHelper, ReturnValue) == 0x000018, "Member 'FortMissionLibrary_SpawnAtPlacementActorsHelper::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.SpawnBuildingActorAtTransform
// 0x0060 (0x0060 - 0x0000)
struct FortMissionLibrary_SpawnBuildingActorAtTransform final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MissionGuid;                                       // 0x0008(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ABuildingActor>             BuildingClass;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x0020(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class ABuildingActor*                         ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMissionLibrary_SpawnBuildingActorAtTransform) == 0x000010, "Wrong alignment on FortMissionLibrary_SpawnBuildingActorAtTransform");
static_assert(sizeof(FortMissionLibrary_SpawnBuildingActorAtTransform) == 0x000060, "Wrong size on FortMissionLibrary_SpawnBuildingActorAtTransform");
static_assert(offsetof(FortMissionLibrary_SpawnBuildingActorAtTransform, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_SpawnBuildingActorAtTransform::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnBuildingActorAtTransform, MissionGuid) == 0x000008, "Member 'FortMissionLibrary_SpawnBuildingActorAtTransform::MissionGuid' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnBuildingActorAtTransform, BuildingClass) == 0x000018, "Member 'FortMissionLibrary_SpawnBuildingActorAtTransform::BuildingClass' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnBuildingActorAtTransform, Transform) == 0x000020, "Member 'FortMissionLibrary_SpawnBuildingActorAtTransform::Transform' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnBuildingActorAtTransform, ReturnValue) == 0x000050, "Member 'FortMissionLibrary_SpawnBuildingActorAtTransform::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.SpawnMissionItemPickup
// 0x0040 (0x0040 - 0x0000)
struct FortMissionLibrary_SpawnMissionItemPickup final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MissionGuid;                                       // 0x0008(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortMissionItemDefinition*             MissionItemDefinition;                             // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartPosition;                                     // 0x0020(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPawn*                              TargetPawn;                                        // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPickup*                            ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_SpawnMissionItemPickup) == 0x000008, "Wrong alignment on FortMissionLibrary_SpawnMissionItemPickup");
static_assert(sizeof(FortMissionLibrary_SpawnMissionItemPickup) == 0x000040, "Wrong size on FortMissionLibrary_SpawnMissionItemPickup");
static_assert(offsetof(FortMissionLibrary_SpawnMissionItemPickup, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_SpawnMissionItemPickup::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnMissionItemPickup, MissionGuid) == 0x000008, "Member 'FortMissionLibrary_SpawnMissionItemPickup::MissionGuid' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnMissionItemPickup, MissionItemDefinition) == 0x000018, "Member 'FortMissionLibrary_SpawnMissionItemPickup::MissionItemDefinition' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnMissionItemPickup, StartPosition) == 0x000020, "Member 'FortMissionLibrary_SpawnMissionItemPickup::StartPosition' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnMissionItemPickup, TargetPawn) == 0x000030, "Member 'FortMissionLibrary_SpawnMissionItemPickup::TargetPawn' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnMissionItemPickup, ReturnValue) == 0x000038, "Member 'FortMissionLibrary_SpawnMissionItemPickup::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.SpawnMissionItemPickupInWorld
// 0x0048 (0x0048 - 0x0000)
struct FortMissionLibrary_SpawnMissionItemPickupInWorld final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MissionGuid;                                       // 0x0008(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortWorldItemDefinition*               ItemDefinition;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberToSpawn;                                     // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0024(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0030(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OverrideMaxStackCount;                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPickup*                            ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_SpawnMissionItemPickupInWorld) == 0x000008, "Wrong alignment on FortMissionLibrary_SpawnMissionItemPickupInWorld");
static_assert(sizeof(FortMissionLibrary_SpawnMissionItemPickupInWorld) == 0x000048, "Wrong size on FortMissionLibrary_SpawnMissionItemPickupInWorld");
static_assert(offsetof(FortMissionLibrary_SpawnMissionItemPickupInWorld, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_SpawnMissionItemPickupInWorld::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnMissionItemPickupInWorld, MissionGuid) == 0x000008, "Member 'FortMissionLibrary_SpawnMissionItemPickupInWorld::MissionGuid' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnMissionItemPickupInWorld, ItemDefinition) == 0x000018, "Member 'FortMissionLibrary_SpawnMissionItemPickupInWorld::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnMissionItemPickupInWorld, NumberToSpawn) == 0x000020, "Member 'FortMissionLibrary_SpawnMissionItemPickupInWorld::NumberToSpawn' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnMissionItemPickupInWorld, Position) == 0x000024, "Member 'FortMissionLibrary_SpawnMissionItemPickupInWorld::Position' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnMissionItemPickupInWorld, Direction) == 0x000030, "Member 'FortMissionLibrary_SpawnMissionItemPickupInWorld::Direction' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnMissionItemPickupInWorld, OverrideMaxStackCount) == 0x00003C, "Member 'FortMissionLibrary_SpawnMissionItemPickupInWorld::OverrideMaxStackCount' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnMissionItemPickupInWorld, ReturnValue) == 0x000040, "Member 'FortMissionLibrary_SpawnMissionItemPickupInWorld::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.SpawnPlacementMissionActor
// 0x0040 (0x0040 - 0x0000)
struct FortMissionLibrary_SpawnPlacementMissionActor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorToSpawn;                                      // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation;                                     // 0x0010(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnRotation;                                     // 0x001C(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 PlacementLocationActor;                            // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OutSpawnedActor;                                   // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMissionLibrary_SpawnPlacementMissionActor) == 0x000008, "Wrong alignment on FortMissionLibrary_SpawnPlacementMissionActor");
static_assert(sizeof(FortMissionLibrary_SpawnPlacementMissionActor) == 0x000040, "Wrong size on FortMissionLibrary_SpawnPlacementMissionActor");
static_assert(offsetof(FortMissionLibrary_SpawnPlacementMissionActor, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_SpawnPlacementMissionActor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnPlacementMissionActor, ActorToSpawn) == 0x000008, "Member 'FortMissionLibrary_SpawnPlacementMissionActor::ActorToSpawn' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnPlacementMissionActor, SpawnLocation) == 0x000010, "Member 'FortMissionLibrary_SpawnPlacementMissionActor::SpawnLocation' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnPlacementMissionActor, SpawnRotation) == 0x00001C, "Member 'FortMissionLibrary_SpawnPlacementMissionActor::SpawnRotation' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnPlacementMissionActor, PlacementLocationActor) == 0x000028, "Member 'FortMissionLibrary_SpawnPlacementMissionActor::PlacementLocationActor' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnPlacementMissionActor, OutSpawnedActor) == 0x000030, "Member 'FortMissionLibrary_SpawnPlacementMissionActor::OutSpawnedActor' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnPlacementMissionActor, ReturnValue) == 0x000038, "Member 'FortMissionLibrary_SpawnPlacementMissionActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.StartAIEncounter
// 0x00B0 (0x00B0 - 0x0000)
struct FortMissionLibrary_StartAIEncounter final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AssociatedMissionName;                             // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortAIEncounterInfo>       EncounterTemplate;                                 // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  InjectedTags;                                      // 0x0028(0x0020)(Parm, NativeAccessSpecifierPublic)
	struct FFortEncounterSettings                 EncounterSettings;                                 // 0x0048(0x0058)(Parm, NativeAccessSpecifierPublic)
	int32                                         ActivationDelay;                                   // 0x00A0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAIEncounterInfo*                   ReturnValue;                                       // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_StartAIEncounter) == 0x000008, "Wrong alignment on FortMissionLibrary_StartAIEncounter");
static_assert(sizeof(FortMissionLibrary_StartAIEncounter) == 0x0000B0, "Wrong size on FortMissionLibrary_StartAIEncounter");
static_assert(offsetof(FortMissionLibrary_StartAIEncounter, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_StartAIEncounter::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartAIEncounter, AssociatedMissionName) == 0x000008, "Member 'FortMissionLibrary_StartAIEncounter::AssociatedMissionName' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartAIEncounter, EncounterTemplate) == 0x000018, "Member 'FortMissionLibrary_StartAIEncounter::EncounterTemplate' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartAIEncounter, TargetActor) == 0x000020, "Member 'FortMissionLibrary_StartAIEncounter::TargetActor' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartAIEncounter, InjectedTags) == 0x000028, "Member 'FortMissionLibrary_StartAIEncounter::InjectedTags' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartAIEncounter, EncounterSettings) == 0x000048, "Member 'FortMissionLibrary_StartAIEncounter::EncounterSettings' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartAIEncounter, ActivationDelay) == 0x0000A0, "Member 'FortMissionLibrary_StartAIEncounter::ActivationDelay' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartAIEncounter, ReturnValue) == 0x0000A8, "Member 'FortMissionLibrary_StartAIEncounter::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.StartAIEncounterWithEnvironmentQuery
// 0x00E0 (0x00E0 - 0x0000)
struct FortMissionLibrary_StartAIEncounterWithEnvironmentQuery final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AssociatedMissionName;                             // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortAIEncounterInfo>       EncounterTemplate;                                 // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEncounterEnvironmentQueryInfo         EnvironmentQueryInfo;                              // 0x0028(0x0028)(Parm, NativeAccessSpecifierPublic)
	class AActor*                                 QueryActor;                                        // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  InjectedTags;                                      // 0x0058(0x0020)(Parm, NativeAccessSpecifierPublic)
	struct FFortEncounterSettings                 EncounterSettings;                                 // 0x0078(0x0058)(Parm, NativeAccessSpecifierPublic)
	int32                                         ActivationDelay;                                   // 0x00D0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAIEncounterInfo*                   ReturnValue;                                       // 0x00D8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_StartAIEncounterWithEnvironmentQuery) == 0x000008, "Wrong alignment on FortMissionLibrary_StartAIEncounterWithEnvironmentQuery");
static_assert(sizeof(FortMissionLibrary_StartAIEncounterWithEnvironmentQuery) == 0x0000E0, "Wrong size on FortMissionLibrary_StartAIEncounterWithEnvironmentQuery");
static_assert(offsetof(FortMissionLibrary_StartAIEncounterWithEnvironmentQuery, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_StartAIEncounterWithEnvironmentQuery::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartAIEncounterWithEnvironmentQuery, AssociatedMissionName) == 0x000008, "Member 'FortMissionLibrary_StartAIEncounterWithEnvironmentQuery::AssociatedMissionName' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartAIEncounterWithEnvironmentQuery, EncounterTemplate) == 0x000018, "Member 'FortMissionLibrary_StartAIEncounterWithEnvironmentQuery::EncounterTemplate' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartAIEncounterWithEnvironmentQuery, TargetActor) == 0x000020, "Member 'FortMissionLibrary_StartAIEncounterWithEnvironmentQuery::TargetActor' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartAIEncounterWithEnvironmentQuery, EnvironmentQueryInfo) == 0x000028, "Member 'FortMissionLibrary_StartAIEncounterWithEnvironmentQuery::EnvironmentQueryInfo' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartAIEncounterWithEnvironmentQuery, QueryActor) == 0x000050, "Member 'FortMissionLibrary_StartAIEncounterWithEnvironmentQuery::QueryActor' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartAIEncounterWithEnvironmentQuery, InjectedTags) == 0x000058, "Member 'FortMissionLibrary_StartAIEncounterWithEnvironmentQuery::InjectedTags' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartAIEncounterWithEnvironmentQuery, EncounterSettings) == 0x000078, "Member 'FortMissionLibrary_StartAIEncounterWithEnvironmentQuery::EncounterSettings' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartAIEncounterWithEnvironmentQuery, ActivationDelay) == 0x0000D0, "Member 'FortMissionLibrary_StartAIEncounterWithEnvironmentQuery::ActivationDelay' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartAIEncounterWithEnvironmentQuery, ReturnValue) == 0x0000D8, "Member 'FortMissionLibrary_StartAIEncounterWithEnvironmentQuery::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.StartPlayingMission
// 0x0018 (0x0018 - 0x0000)
struct FortMissionLibrary_StartPlayingMission final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MissionGuid;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_StartPlayingMission) == 0x000008, "Wrong alignment on FortMissionLibrary_StartPlayingMission");
static_assert(sizeof(FortMissionLibrary_StartPlayingMission) == 0x000018, "Wrong size on FortMissionLibrary_StartPlayingMission");
static_assert(offsetof(FortMissionLibrary_StartPlayingMission, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_StartPlayingMission::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartPlayingMission, MissionGuid) == 0x000008, "Member 'FortMissionLibrary_StartPlayingMission::MissionGuid' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.StopAIEncounter
// 0x0018 (0x0018 - 0x0000)
struct FortMissionLibrary_StopAIEncounter final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAIEncounterInfo*                   ActiveEncounter;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortObjectiveStatus                          ObjectiveStatus;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMissionLibrary_StopAIEncounter) == 0x000008, "Wrong alignment on FortMissionLibrary_StopAIEncounter");
static_assert(sizeof(FortMissionLibrary_StopAIEncounter) == 0x000018, "Wrong size on FortMissionLibrary_StopAIEncounter");
static_assert(offsetof(FortMissionLibrary_StopAIEncounter, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_StopAIEncounter::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StopAIEncounter, ActiveEncounter) == 0x000008, "Member 'FortMissionLibrary_StopAIEncounter::ActiveEncounter' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StopAIEncounter, ObjectiveStatus) == 0x000010, "Member 'FortMissionLibrary_StopAIEncounter::ObjectiveStatus' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.StopAIEncounterAgainstActor
// 0x0010 (0x0010 - 0x0000)
struct FortMissionLibrary_StopAIEncounterAgainstActor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_StopAIEncounterAgainstActor) == 0x000008, "Wrong alignment on FortMissionLibrary_StopAIEncounterAgainstActor");
static_assert(sizeof(FortMissionLibrary_StopAIEncounterAgainstActor) == 0x000010, "Wrong size on FortMissionLibrary_StopAIEncounterAgainstActor");
static_assert(offsetof(FortMissionLibrary_StopAIEncounterAgainstActor, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_StopAIEncounterAgainstActor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StopAIEncounterAgainstActor, TargetActor) == 0x000008, "Member 'FortMissionLibrary_StopAIEncounterAgainstActor::TargetActor' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.TeleportPawnNearLocation
// 0x0018 (0x0018 - 0x0000)
struct FortMissionLibrary_TeleportPawnNearLocation final
{
public:
	class AFortPawn*                              Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DestLocation;                                      // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMissionLibrary_TeleportPawnNearLocation) == 0x000008, "Wrong alignment on FortMissionLibrary_TeleportPawnNearLocation");
static_assert(sizeof(FortMissionLibrary_TeleportPawnNearLocation) == 0x000018, "Wrong size on FortMissionLibrary_TeleportPawnNearLocation");
static_assert(offsetof(FortMissionLibrary_TeleportPawnNearLocation, Pawn) == 0x000000, "Member 'FortMissionLibrary_TeleportPawnNearLocation::Pawn' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_TeleportPawnNearLocation, DestLocation) == 0x000008, "Member 'FortMissionLibrary_TeleportPawnNearLocation::DestLocation' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.TeleportPlayerPawn
// 0x0028 (0x0028 - 0x0000)
struct FortMissionLibrary_TeleportPlayerPawn final
{
public:
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DestLocation;                                      // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               DestRotation;                                      // 0x0014(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCollision;                                  // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMissionLibrary_TeleportPlayerPawn) == 0x000008, "Wrong alignment on FortMissionLibrary_TeleportPlayerPawn");
static_assert(sizeof(FortMissionLibrary_TeleportPlayerPawn) == 0x000028, "Wrong size on FortMissionLibrary_TeleportPlayerPawn");
static_assert(offsetof(FortMissionLibrary_TeleportPlayerPawn, PlayerPawn) == 0x000000, "Member 'FortMissionLibrary_TeleportPlayerPawn::PlayerPawn' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_TeleportPlayerPawn, DestLocation) == 0x000008, "Member 'FortMissionLibrary_TeleportPlayerPawn::DestLocation' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_TeleportPlayerPawn, DestRotation) == 0x000014, "Member 'FortMissionLibrary_TeleportPlayerPawn::DestRotation' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_TeleportPlayerPawn, bIgnoreCollision) == 0x000020, "Member 'FortMissionLibrary_TeleportPlayerPawn::bIgnoreCollision' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.UnregisterForMissionEvents
// 0x0020 (0x0020 - 0x0000)
struct FortMissionLibrary_UnregisterForMissionEvents final
{
public:
	class AActor*                                 ActorToUnregister;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MissionGuid;                                       // 0x0008(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMissionLibrary_UnregisterForMissionEvents) == 0x000008, "Wrong alignment on FortMissionLibrary_UnregisterForMissionEvents");
static_assert(sizeof(FortMissionLibrary_UnregisterForMissionEvents) == 0x000020, "Wrong size on FortMissionLibrary_UnregisterForMissionEvents");
static_assert(offsetof(FortMissionLibrary_UnregisterForMissionEvents, ActorToUnregister) == 0x000000, "Member 'FortMissionLibrary_UnregisterForMissionEvents::ActorToUnregister' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_UnregisterForMissionEvents, MissionGuid) == 0x000008, "Member 'FortMissionLibrary_UnregisterForMissionEvents::MissionGuid' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_UnregisterForMissionEvents, ReturnValue) == 0x000018, "Member 'FortMissionLibrary_UnregisterForMissionEvents::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionManager.GetSpawnLocationActorsMatchingEntryItemQuery
// 0x0068 (0x0068 - 0x0000)
struct FortMissionManager_GetSpawnLocationActorsMatchingEntryItemQuery final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         SpawnLocationActors;                               // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMissionManager_GetSpawnLocationActorsMatchingEntryItemQuery) == 0x000008, "Wrong alignment on FortMissionManager_GetSpawnLocationActorsMatchingEntryItemQuery");
static_assert(sizeof(FortMissionManager_GetSpawnLocationActorsMatchingEntryItemQuery) == 0x000068, "Wrong size on FortMissionManager_GetSpawnLocationActorsMatchingEntryItemQuery");
static_assert(offsetof(FortMissionManager_GetSpawnLocationActorsMatchingEntryItemQuery, WorldContextObject) == 0x000000, "Member 'FortMissionManager_GetSpawnLocationActorsMatchingEntryItemQuery::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionManager_GetSpawnLocationActorsMatchingEntryItemQuery, TagQuery) == 0x000008, "Member 'FortMissionManager_GetSpawnLocationActorsMatchingEntryItemQuery::TagQuery' has a wrong offset!");
static_assert(offsetof(FortMissionManager_GetSpawnLocationActorsMatchingEntryItemQuery, SpawnLocationActors) == 0x000050, "Member 'FortMissionManager_GetSpawnLocationActorsMatchingEntryItemQuery::SpawnLocationActors' has a wrong offset!");
static_assert(offsetof(FortMissionManager_GetSpawnLocationActorsMatchingEntryItemQuery, ReturnValue) == 0x000060, "Member 'FortMissionManager_GetSpawnLocationActorsMatchingEntryItemQuery::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionManager.GetSpawnLocationActorsThatHaveAddedTagsMatchingQuery
// 0x0068 (0x0068 - 0x0000)
struct FortMissionManager_GetSpawnLocationActorsThatHaveAddedTagsMatchingQuery final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         SpawnLocationActors;                               // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMissionManager_GetSpawnLocationActorsThatHaveAddedTagsMatchingQuery) == 0x000008, "Wrong alignment on FortMissionManager_GetSpawnLocationActorsThatHaveAddedTagsMatchingQuery");
static_assert(sizeof(FortMissionManager_GetSpawnLocationActorsThatHaveAddedTagsMatchingQuery) == 0x000068, "Wrong size on FortMissionManager_GetSpawnLocationActorsThatHaveAddedTagsMatchingQuery");
static_assert(offsetof(FortMissionManager_GetSpawnLocationActorsThatHaveAddedTagsMatchingQuery, WorldContextObject) == 0x000000, "Member 'FortMissionManager_GetSpawnLocationActorsThatHaveAddedTagsMatchingQuery::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionManager_GetSpawnLocationActorsThatHaveAddedTagsMatchingQuery, TagQuery) == 0x000008, "Member 'FortMissionManager_GetSpawnLocationActorsThatHaveAddedTagsMatchingQuery::TagQuery' has a wrong offset!");
static_assert(offsetof(FortMissionManager_GetSpawnLocationActorsThatHaveAddedTagsMatchingQuery, SpawnLocationActors) == 0x000050, "Member 'FortMissionManager_GetSpawnLocationActorsThatHaveAddedTagsMatchingQuery::SpawnLocationActors' has a wrong offset!");
static_assert(offsetof(FortMissionManager_GetSpawnLocationActorsThatHaveAddedTagsMatchingQuery, ReturnValue) == 0x000060, "Member 'FortMissionManager_GetSpawnLocationActorsThatHaveAddedTagsMatchingQuery::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionManager.ShouldShowSecondaryMissionHeaders
// 0x0001 (0x0001 - 0x0000)
struct FortMissionManager_ShouldShowSecondaryMissionHeaders final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionManager_ShouldShowSecondaryMissionHeaders) == 0x000001, "Wrong alignment on FortMissionManager_ShouldShowSecondaryMissionHeaders");
static_assert(sizeof(FortMissionManager_ShouldShowSecondaryMissionHeaders) == 0x000001, "Wrong size on FortMissionManager_ShouldShowSecondaryMissionHeaders");
static_assert(offsetof(FortMissionManager_ShouldShowSecondaryMissionHeaders, ReturnValue) == 0x000000, "Member 'FortMissionManager_ShouldShowSecondaryMissionHeaders::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAsyncAction_CheckForUpdate.CheckForUpdate
// 0x0018 (0x0018 - 0x0000)
struct FortAsyncAction_CheckForUpdate_CheckForUpdate final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InShowDialogOnFailure;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAsyncAction_CheckForUpdate*        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAsyncAction_CheckForUpdate_CheckForUpdate) == 0x000008, "Wrong alignment on FortAsyncAction_CheckForUpdate_CheckForUpdate");
static_assert(sizeof(FortAsyncAction_CheckForUpdate_CheckForUpdate) == 0x000018, "Wrong size on FortAsyncAction_CheckForUpdate_CheckForUpdate");
static_assert(offsetof(FortAsyncAction_CheckForUpdate_CheckForUpdate, InWorldContextObject) == 0x000000, "Member 'FortAsyncAction_CheckForUpdate_CheckForUpdate::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_CheckForUpdate_CheckForUpdate, InShowDialogOnFailure) == 0x000008, "Member 'FortAsyncAction_CheckForUpdate_CheckForUpdate::InShowDialogOnFailure' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_CheckForUpdate_CheckForUpdate, ReturnValue) == 0x000010, "Member 'FortAsyncAction_CheckForUpdate_CheckForUpdate::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionTimerComponent.SetMissionTimer
// 0x0020 (0x0020 - 0x0000)
struct FortMissionTimerComponent_SetMissionTimer final
{
public:
	class FString                                 FunctionName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimerLength;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallbackActor;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionTimerComponent_SetMissionTimer) == 0x000008, "Wrong alignment on FortMissionTimerComponent_SetMissionTimer");
static_assert(sizeof(FortMissionTimerComponent_SetMissionTimer) == 0x000020, "Wrong size on FortMissionTimerComponent_SetMissionTimer");
static_assert(offsetof(FortMissionTimerComponent_SetMissionTimer, FunctionName) == 0x000000, "Member 'FortMissionTimerComponent_SetMissionTimer::FunctionName' has a wrong offset!");
static_assert(offsetof(FortMissionTimerComponent_SetMissionTimer, TimerLength) == 0x000010, "Member 'FortMissionTimerComponent_SetMissionTimer::TimerLength' has a wrong offset!");
static_assert(offsetof(FortMissionTimerComponent_SetMissionTimer, CallbackActor) == 0x000018, "Member 'FortMissionTimerComponent_SetMissionTimer::CallbackActor' has a wrong offset!");

// Function FortniteGame.FortMissionTimerComponent.SetTimerDisplayFormat
// 0x0001 (0x0001 - 0x0000)
struct FortMissionTimerComponent_SetTimerDisplayFormat final
{
public:
	bool                                          bNewDisplayInTimeFormat;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionTimerComponent_SetTimerDisplayFormat) == 0x000001, "Wrong alignment on FortMissionTimerComponent_SetTimerDisplayFormat");
static_assert(sizeof(FortMissionTimerComponent_SetTimerDisplayFormat) == 0x000001, "Wrong size on FortMissionTimerComponent_SetTimerDisplayFormat");
static_assert(offsetof(FortMissionTimerComponent_SetTimerDisplayFormat, bNewDisplayInTimeFormat) == 0x000000, "Member 'FortMissionTimerComponent_SetTimerDisplayFormat::bNewDisplayInTimeFormat' has a wrong offset!");

// Function FortniteGame.FortMissionTimerComponent.SetTimerLabelText
// 0x0018 (0x0018 - 0x0000)
struct FortMissionTimerComponent_SetTimerLabelText final
{
public:
	class FText                                   NewLabelText;                                      // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionTimerComponent_SetTimerLabelText) == 0x000008, "Wrong alignment on FortMissionTimerComponent_SetTimerLabelText");
static_assert(sizeof(FortMissionTimerComponent_SetTimerLabelText) == 0x000018, "Wrong size on FortMissionTimerComponent_SetTimerLabelText");
static_assert(offsetof(FortMissionTimerComponent_SetTimerLabelText, NewLabelText) == 0x000000, "Member 'FortMissionTimerComponent_SetTimerLabelText::NewLabelText' has a wrong offset!");

// Function FortniteGame.FortMissionTimerComponent.SetTimerVisibilityOverrideSetting
// 0x0001 (0x0001 - 0x0000)
struct FortMissionTimerComponent_SetTimerVisibilityOverrideSetting final
{
public:
	ETimerOverrideSetting                         NewVisibilitySetting;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionTimerComponent_SetTimerVisibilityOverrideSetting) == 0x000001, "Wrong alignment on FortMissionTimerComponent_SetTimerVisibilityOverrideSetting");
static_assert(sizeof(FortMissionTimerComponent_SetTimerVisibilityOverrideSetting) == 0x000001, "Wrong size on FortMissionTimerComponent_SetTimerVisibilityOverrideSetting");
static_assert(offsetof(FortMissionTimerComponent_SetTimerVisibilityOverrideSetting, NewVisibilitySetting) == 0x000000, "Member 'FortMissionTimerComponent_SetTimerVisibilityOverrideSetting::NewVisibilitySetting' has a wrong offset!");

// Function FortniteGame.FortMissionTimerComponent.GetCorrectTimeDisplayData
// 0x002C (0x002C - 0x0000)
struct FortMissionTimerComponent_GetCorrectTimeDisplayData final
{
public:
	struct FMissionTimeDisplayData                ReturnValue;                                       // 0x0000(0x002C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionTimerComponent_GetCorrectTimeDisplayData) == 0x000004, "Wrong alignment on FortMissionTimerComponent_GetCorrectTimeDisplayData");
static_assert(sizeof(FortMissionTimerComponent_GetCorrectTimeDisplayData) == 0x00002C, "Wrong size on FortMissionTimerComponent_GetCorrectTimeDisplayData");
static_assert(offsetof(FortMissionTimerComponent_GetCorrectTimeDisplayData, ReturnValue) == 0x000000, "Member 'FortMissionTimerComponent_GetCorrectTimeDisplayData::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionTimerComponent.GetMissionTimerTimeRemaining
// 0x0004 (0x0004 - 0x0000)
struct FortMissionTimerComponent_GetMissionTimerTimeRemaining final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionTimerComponent_GetMissionTimerTimeRemaining) == 0x000004, "Wrong alignment on FortMissionTimerComponent_GetMissionTimerTimeRemaining");
static_assert(sizeof(FortMissionTimerComponent_GetMissionTimerTimeRemaining) == 0x000004, "Wrong size on FortMissionTimerComponent_GetMissionTimerTimeRemaining");
static_assert(offsetof(FortMissionTimerComponent_GetMissionTimerTimeRemaining, ReturnValue) == 0x000000, "Member 'FortMissionTimerComponent_GetMissionTimerTimeRemaining::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionTimerComponent.GetNormalizedTime
// 0x0004 (0x0004 - 0x0000)
struct FortMissionTimerComponent_GetNormalizedTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionTimerComponent_GetNormalizedTime) == 0x000004, "Wrong alignment on FortMissionTimerComponent_GetNormalizedTime");
static_assert(sizeof(FortMissionTimerComponent_GetNormalizedTime) == 0x000004, "Wrong size on FortMissionTimerComponent_GetNormalizedTime");
static_assert(offsetof(FortMissionTimerComponent_GetNormalizedTime, ReturnValue) == 0x000000, "Member 'FortMissionTimerComponent_GetNormalizedTime::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionTimerComponent.GetTimeText
// 0x0018 (0x0018 - 0x0000)
struct FortMissionTimerComponent_GetTimeText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionTimerComponent_GetTimeText) == 0x000008, "Wrong alignment on FortMissionTimerComponent_GetTimeText");
static_assert(sizeof(FortMissionTimerComponent_GetTimeText) == 0x000018, "Wrong size on FortMissionTimerComponent_GetTimeText");
static_assert(offsetof(FortMissionTimerComponent_GetTimeText, ReturnValue) == 0x000000, "Member 'FortMissionTimerComponent_GetTimeText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionTimerComponent.IsMissionTimerPaused
// 0x0001 (0x0001 - 0x0000)
struct FortMissionTimerComponent_IsMissionTimerPaused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionTimerComponent_IsMissionTimerPaused) == 0x000001, "Wrong alignment on FortMissionTimerComponent_IsMissionTimerPaused");
static_assert(sizeof(FortMissionTimerComponent_IsMissionTimerPaused) == 0x000001, "Wrong size on FortMissionTimerComponent_IsMissionTimerPaused");
static_assert(offsetof(FortMissionTimerComponent_IsMissionTimerPaused, ReturnValue) == 0x000000, "Member 'FortMissionTimerComponent_IsMissionTimerPaused::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionTimerComponent.IsMissionTimerSet
// 0x0001 (0x0001 - 0x0000)
struct FortMissionTimerComponent_IsMissionTimerSet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionTimerComponent_IsMissionTimerSet) == 0x000001, "Wrong alignment on FortMissionTimerComponent_IsMissionTimerSet");
static_assert(sizeof(FortMissionTimerComponent_IsMissionTimerSet) == 0x000001, "Wrong size on FortMissionTimerComponent_IsMissionTimerSet");
static_assert(offsetof(FortMissionTimerComponent_IsMissionTimerSet, ReturnValue) == 0x000000, "Member 'FortMissionTimerComponent_IsMissionTimerSet::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionTimerComponent.IsTimerVisible
// 0x0001 (0x0001 - 0x0000)
struct FortMissionTimerComponent_IsTimerVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionTimerComponent_IsTimerVisible) == 0x000001, "Wrong alignment on FortMissionTimerComponent_IsTimerVisible");
static_assert(sizeof(FortMissionTimerComponent_IsTimerVisible) == 0x000001, "Wrong size on FortMissionTimerComponent_IsTimerVisible");
static_assert(offsetof(FortMissionTimerComponent_IsTimerVisible, ReturnValue) == 0x000000, "Member 'FortMissionTimerComponent_IsTimerVisible::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionFailedParams.BreakParams
// 0x0008 (0x0008 - 0x0000)
struct FortMissionFailedParams_BreakParams final
{
public:
	class AFortMission*                           _FailedMission;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionFailedParams_BreakParams) == 0x000008, "Wrong alignment on FortMissionFailedParams_BreakParams");
static_assert(sizeof(FortMissionFailedParams_BreakParams) == 0x000008, "Wrong size on FortMissionFailedParams_BreakParams");
static_assert(offsetof(FortMissionFailedParams_BreakParams, _FailedMission) == 0x000000, "Member 'FortMissionFailedParams_BreakParams::_FailedMission' has a wrong offset!");

// Function FortniteGame.FortMissionFailedParams.SetParams
// 0x0010 (0x0010 - 0x0000)
struct FortMissionFailedParams_SetParams final
{
public:
	class AFortMission*                           _FailedMission;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortMissionFailedParams*               ThisParam;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionFailedParams_SetParams) == 0x000008, "Wrong alignment on FortMissionFailedParams_SetParams");
static_assert(sizeof(FortMissionFailedParams_SetParams) == 0x000010, "Wrong size on FortMissionFailedParams_SetParams");
static_assert(offsetof(FortMissionFailedParams_SetParams, _FailedMission) == 0x000000, "Member 'FortMissionFailedParams_SetParams::_FailedMission' has a wrong offset!");
static_assert(offsetof(FortMissionFailedParams_SetParams, ThisParam) == 0x000008, "Member 'FortMissionFailedParams_SetParams::ThisParam' has a wrong offset!");

// Function FortniteGame.FortMovementComp_CharacterAthena.IsActivelySkydiving
// 0x0001 (0x0001 - 0x0000)
struct FortMovementComp_CharacterAthena_IsActivelySkydiving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMovementComp_CharacterAthena_IsActivelySkydiving) == 0x000001, "Wrong alignment on FortMovementComp_CharacterAthena_IsActivelySkydiving");
static_assert(sizeof(FortMovementComp_CharacterAthena_IsActivelySkydiving) == 0x000001, "Wrong size on FortMovementComp_CharacterAthena_IsActivelySkydiving");
static_assert(offsetof(FortMovementComp_CharacterAthena_IsActivelySkydiving, ReturnValue) == 0x000000, "Member 'FortMovementComp_CharacterAthena_IsActivelySkydiving::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMovementComp_CharacterAthena.IsActivelyStrafingInAir
// 0x0001 (0x0001 - 0x0000)
struct FortMovementComp_CharacterAthena_IsActivelyStrafingInAir final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMovementComp_CharacterAthena_IsActivelyStrafingInAir) == 0x000001, "Wrong alignment on FortMovementComp_CharacterAthena_IsActivelyStrafingInAir");
static_assert(sizeof(FortMovementComp_CharacterAthena_IsActivelyStrafingInAir) == 0x000001, "Wrong size on FortMovementComp_CharacterAthena_IsActivelyStrafingInAir");
static_assert(offsetof(FortMovementComp_CharacterAthena_IsActivelyStrafingInAir, ReturnValue) == 0x000000, "Member 'FortMovementComp_CharacterAthena_IsActivelyStrafingInAir::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMovementComp_CharacterAthena.IsPassivelySkydiving
// 0x0001 (0x0001 - 0x0000)
struct FortMovementComp_CharacterAthena_IsPassivelySkydiving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMovementComp_CharacterAthena_IsPassivelySkydiving) == 0x000001, "Wrong alignment on FortMovementComp_CharacterAthena_IsPassivelySkydiving");
static_assert(sizeof(FortMovementComp_CharacterAthena_IsPassivelySkydiving) == 0x000001, "Wrong size on FortMovementComp_CharacterAthena_IsPassivelySkydiving");
static_assert(offsetof(FortMovementComp_CharacterAthena_IsPassivelySkydiving, ReturnValue) == 0x000000, "Member 'FortMovementComp_CharacterAthena_IsPassivelySkydiving::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMusicManager.ChangeMusic
// 0x0018 (0x0018 - 0x0000)
struct FortMusicManager_ChangeMusic final
{
public:
	class USoundBase*                             NewMusic;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMusicFadeStyles                              FadeStyle;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeTime;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Stinger;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMusicManager_ChangeMusic) == 0x000008, "Wrong alignment on FortMusicManager_ChangeMusic");
static_assert(sizeof(FortMusicManager_ChangeMusic) == 0x000018, "Wrong size on FortMusicManager_ChangeMusic");
static_assert(offsetof(FortMusicManager_ChangeMusic, NewMusic) == 0x000000, "Member 'FortMusicManager_ChangeMusic::NewMusic' has a wrong offset!");
static_assert(offsetof(FortMusicManager_ChangeMusic, FadeStyle) == 0x000008, "Member 'FortMusicManager_ChangeMusic::FadeStyle' has a wrong offset!");
static_assert(offsetof(FortMusicManager_ChangeMusic, FadeTime) == 0x00000C, "Member 'FortMusicManager_ChangeMusic::FadeTime' has a wrong offset!");
static_assert(offsetof(FortMusicManager_ChangeMusic, Stinger) == 0x000010, "Member 'FortMusicManager_ChangeMusic::Stinger' has a wrong offset!");

// Function FortniteGame.FortMusicManager.GetEventHeatPercent
// 0x0008 (0x0008 - 0x0000)
struct FortMusicManager_GetEventHeatPercent final
{
public:
	EFortCombatEvents                             CombatEvent;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMusicManager_GetEventHeatPercent) == 0x000004, "Wrong alignment on FortMusicManager_GetEventHeatPercent");
static_assert(sizeof(FortMusicManager_GetEventHeatPercent) == 0x000008, "Wrong size on FortMusicManager_GetEventHeatPercent");
static_assert(offsetof(FortMusicManager_GetEventHeatPercent, CombatEvent) == 0x000000, "Member 'FortMusicManager_GetEventHeatPercent::CombatEvent' has a wrong offset!");
static_assert(offsetof(FortMusicManager_GetEventHeatPercent, ReturnValue) == 0x000004, "Member 'FortMusicManager_GetEventHeatPercent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMusicManager.GetEventHeatPercentTotal
// 0x0008 (0x0008 - 0x0000)
struct FortMusicManager_GetEventHeatPercentTotal final
{
public:
	EFortCombatEvents                             CombatEvent;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMusicManager_GetEventHeatPercentTotal) == 0x000004, "Wrong alignment on FortMusicManager_GetEventHeatPercentTotal");
static_assert(sizeof(FortMusicManager_GetEventHeatPercentTotal) == 0x000008, "Wrong size on FortMusicManager_GetEventHeatPercentTotal");
static_assert(offsetof(FortMusicManager_GetEventHeatPercentTotal, CombatEvent) == 0x000000, "Member 'FortMusicManager_GetEventHeatPercentTotal::CombatEvent' has a wrong offset!");
static_assert(offsetof(FortMusicManager_GetEventHeatPercentTotal, ReturnValue) == 0x000004, "Member 'FortMusicManager_GetEventHeatPercentTotal::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMusicManager.OnDayPhaseChanged
// 0x0003 (0x0003 - 0x0000)
struct FortMusicManager_OnDayPhaseChanged final
{
public:
	EFortDayPhase                                 CurrentDayPhase;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDayPhase                                 PreviousDayPhase;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAtCreation;                                       // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMusicManager_OnDayPhaseChanged) == 0x000001, "Wrong alignment on FortMusicManager_OnDayPhaseChanged");
static_assert(sizeof(FortMusicManager_OnDayPhaseChanged) == 0x000003, "Wrong size on FortMusicManager_OnDayPhaseChanged");
static_assert(offsetof(FortMusicManager_OnDayPhaseChanged, CurrentDayPhase) == 0x000000, "Member 'FortMusicManager_OnDayPhaseChanged::CurrentDayPhase' has a wrong offset!");
static_assert(offsetof(FortMusicManager_OnDayPhaseChanged, PreviousDayPhase) == 0x000001, "Member 'FortMusicManager_OnDayPhaseChanged::PreviousDayPhase' has a wrong offset!");
static_assert(offsetof(FortMusicManager_OnDayPhaseChanged, bAtCreation) == 0x000002, "Member 'FortMusicManager_OnDayPhaseChanged::bAtCreation' has a wrong offset!");

// Function FortniteGame.FortMusicManager.OnThresholdChange
// 0x0002 (0x0002 - 0x0000)
struct FortMusicManager_OnThresholdChange final
{
public:
	EFortCombatThresholds                         OldThreshold;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCombatThresholds                         NewThreshold;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMusicManager_OnThresholdChange) == 0x000001, "Wrong alignment on FortMusicManager_OnThresholdChange");
static_assert(sizeof(FortMusicManager_OnThresholdChange) == 0x000002, "Wrong size on FortMusicManager_OnThresholdChange");
static_assert(offsetof(FortMusicManager_OnThresholdChange, OldThreshold) == 0x000000, "Member 'FortMusicManager_OnThresholdChange::OldThreshold' has a wrong offset!");
static_assert(offsetof(FortMusicManager_OnThresholdChange, NewThreshold) == 0x000001, "Member 'FortMusicManager_OnThresholdChange::NewThreshold' has a wrong offset!");

// Function FortniteGame.FortToggledEditModeParams.BreakParams
// 0x0018 (0x0018 - 0x0000)
struct FortToggledEditModeParams_BreakParams final
{
public:
	class AFortPlayerController*                  _PlayerThatToggledEditMode;                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABuildingSMActor*                       Param_EditableActor;                               // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InEditMode;                                        // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortToggledEditModeParams_BreakParams) == 0x000008, "Wrong alignment on FortToggledEditModeParams_BreakParams");
static_assert(sizeof(FortToggledEditModeParams_BreakParams) == 0x000018, "Wrong size on FortToggledEditModeParams_BreakParams");
static_assert(offsetof(FortToggledEditModeParams_BreakParams, _PlayerThatToggledEditMode) == 0x000000, "Member 'FortToggledEditModeParams_BreakParams::_PlayerThatToggledEditMode' has a wrong offset!");
static_assert(offsetof(FortToggledEditModeParams_BreakParams, Param_EditableActor) == 0x000008, "Member 'FortToggledEditModeParams_BreakParams::Param_EditableActor' has a wrong offset!");
static_assert(offsetof(FortToggledEditModeParams_BreakParams, InEditMode) == 0x000010, "Member 'FortToggledEditModeParams_BreakParams::InEditMode' has a wrong offset!");

// Function FortniteGame.FortToggledEditModeParams.SetParams
// 0x0020 (0x0020 - 0x0000)
struct FortToggledEditModeParams_SetParams final
{
public:
	class AFortPlayerController*                  _PlayerThatToggledEditMode;                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABuildingSMActor*                       InEditableActor;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InEditMode;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortToggledEditModeParams*             ThisParam;                                         // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortToggledEditModeParams_SetParams) == 0x000008, "Wrong alignment on FortToggledEditModeParams_SetParams");
static_assert(sizeof(FortToggledEditModeParams_SetParams) == 0x000020, "Wrong size on FortToggledEditModeParams_SetParams");
static_assert(offsetof(FortToggledEditModeParams_SetParams, _PlayerThatToggledEditMode) == 0x000000, "Member 'FortToggledEditModeParams_SetParams::_PlayerThatToggledEditMode' has a wrong offset!");
static_assert(offsetof(FortToggledEditModeParams_SetParams, InEditableActor) == 0x000008, "Member 'FortToggledEditModeParams_SetParams::InEditableActor' has a wrong offset!");
static_assert(offsetof(FortToggledEditModeParams_SetParams, InEditMode) == 0x000010, "Member 'FortToggledEditModeParams_SetParams::InEditMode' has a wrong offset!");
static_assert(offsetof(FortToggledEditModeParams_SetParams, ThisParam) == 0x000018, "Member 'FortToggledEditModeParams_SetParams::ThisParam' has a wrong offset!");

// Function FortniteGame.FortNavSystem.IsNavmeshInRadiusInitialized
// 0x0020 (0x0020 - 0x0000)
struct FortNavSystem_IsNavmeshInRadiusInitialized final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TestLocation;                                      // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TestRadius;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortNavSystem_IsNavmeshInRadiusInitialized) == 0x000008, "Wrong alignment on FortNavSystem_IsNavmeshInRadiusInitialized");
static_assert(sizeof(FortNavSystem_IsNavmeshInRadiusInitialized) == 0x000020, "Wrong size on FortNavSystem_IsNavmeshInRadiusInitialized");
static_assert(offsetof(FortNavSystem_IsNavmeshInRadiusInitialized, WorldContext) == 0x000000, "Member 'FortNavSystem_IsNavmeshInRadiusInitialized::WorldContext' has a wrong offset!");
static_assert(offsetof(FortNavSystem_IsNavmeshInRadiusInitialized, TestLocation) == 0x000008, "Member 'FortNavSystem_IsNavmeshInRadiusInitialized::TestLocation' has a wrong offset!");
static_assert(offsetof(FortNavSystem_IsNavmeshInRadiusInitialized, TestRadius) == 0x000014, "Member 'FortNavSystem_IsNavmeshInRadiusInitialized::TestRadius' has a wrong offset!");
static_assert(offsetof(FortNavSystem_IsNavmeshInRadiusInitialized, ReturnValue) == 0x000018, "Member 'FortNavSystem_IsNavmeshInRadiusInitialized::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortNavSystem.OnNavDataRegistered
// 0x0008 (0x0008 - 0x0000)
struct FortNavSystem_OnNavDataRegistered final
{
public:
	class ANavigationData*                        NavData;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortNavSystem_OnNavDataRegistered) == 0x000008, "Wrong alignment on FortNavSystem_OnNavDataRegistered");
static_assert(sizeof(FortNavSystem_OnNavDataRegistered) == 0x000008, "Wrong size on FortNavSystem_OnNavDataRegistered");
static_assert(offsetof(FortNavSystem_OnNavDataRegistered, NavData) == 0x000000, "Member 'FortNavSystem_OnNavDataRegistered::NavData' has a wrong offset!");

// Function FortniteGame.FortItemCraftedParams.BreakParams
// 0x0018 (0x0018 - 0x0000)
struct FortItemCraftedParams_BreakParams final
{
public:
	class UFortSchematicItemDefinition*           _SchematicDefinition;                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  _CraftedBy;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _AmountCrafted;                                    // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bItemWasQuickCrafted;                             // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemCraftedParams_BreakParams) == 0x000008, "Wrong alignment on FortItemCraftedParams_BreakParams");
static_assert(sizeof(FortItemCraftedParams_BreakParams) == 0x000018, "Wrong size on FortItemCraftedParams_BreakParams");
static_assert(offsetof(FortItemCraftedParams_BreakParams, _SchematicDefinition) == 0x000000, "Member 'FortItemCraftedParams_BreakParams::_SchematicDefinition' has a wrong offset!");
static_assert(offsetof(FortItemCraftedParams_BreakParams, _CraftedBy) == 0x000008, "Member 'FortItemCraftedParams_BreakParams::_CraftedBy' has a wrong offset!");
static_assert(offsetof(FortItemCraftedParams_BreakParams, _AmountCrafted) == 0x000010, "Member 'FortItemCraftedParams_BreakParams::_AmountCrafted' has a wrong offset!");
static_assert(offsetof(FortItemCraftedParams_BreakParams, _bItemWasQuickCrafted) == 0x000014, "Member 'FortItemCraftedParams_BreakParams::_bItemWasQuickCrafted' has a wrong offset!");

// Function FortniteGame.FortItemCraftedParams.SetParams
// 0x0020 (0x0020 - 0x0000)
struct FortItemCraftedParams_SetParams final
{
public:
	const class UFortSchematicItemDefinition*     _SchematicDefinition;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  _CraftedBy;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _AmountCrafted;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bItemWasQuickCrafted;                             // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItemCraftedParams*                 ThisParam;                                         // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemCraftedParams_SetParams) == 0x000008, "Wrong alignment on FortItemCraftedParams_SetParams");
static_assert(sizeof(FortItemCraftedParams_SetParams) == 0x000020, "Wrong size on FortItemCraftedParams_SetParams");
static_assert(offsetof(FortItemCraftedParams_SetParams, _SchematicDefinition) == 0x000000, "Member 'FortItemCraftedParams_SetParams::_SchematicDefinition' has a wrong offset!");
static_assert(offsetof(FortItemCraftedParams_SetParams, _CraftedBy) == 0x000008, "Member 'FortItemCraftedParams_SetParams::_CraftedBy' has a wrong offset!");
static_assert(offsetof(FortItemCraftedParams_SetParams, _AmountCrafted) == 0x000010, "Member 'FortItemCraftedParams_SetParams::_AmountCrafted' has a wrong offset!");
static_assert(offsetof(FortItemCraftedParams_SetParams, _bItemWasQuickCrafted) == 0x000014, "Member 'FortItemCraftedParams_SetParams::_bItemWasQuickCrafted' has a wrong offset!");
static_assert(offsetof(FortItemCraftedParams_SetParams, ThisParam) == 0x000018, "Member 'FortItemCraftedParams_SetParams::ThisParam' has a wrong offset!");

// Function FortniteGame.FortPlayerDBNOEnterParams.BreakParams
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerDBNOEnterParams_BreakParams final
{
public:
	class AFortPlayerPawn*                        _KilledPlayer;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            _KilledBy;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerDBNOEnterParams_BreakParams) == 0x000008, "Wrong alignment on FortPlayerDBNOEnterParams_BreakParams");
static_assert(sizeof(FortPlayerDBNOEnterParams_BreakParams) == 0x000010, "Wrong size on FortPlayerDBNOEnterParams_BreakParams");
static_assert(offsetof(FortPlayerDBNOEnterParams_BreakParams, _KilledPlayer) == 0x000000, "Member 'FortPlayerDBNOEnterParams_BreakParams::_KilledPlayer' has a wrong offset!");
static_assert(offsetof(FortPlayerDBNOEnterParams_BreakParams, _KilledBy) == 0x000008, "Member 'FortPlayerDBNOEnterParams_BreakParams::_KilledBy' has a wrong offset!");

// Function FortniteGame.FortPlayerDBNOEnterParams.SetParams
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerDBNOEnterParams_SetParams final
{
public:
	class AFortPlayerPawn*                        _KilledPlayer;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            _KilledBy;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortPlayerDBNOEnterParams*             ThisParam;                                         // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerDBNOEnterParams_SetParams) == 0x000008, "Wrong alignment on FortPlayerDBNOEnterParams_SetParams");
static_assert(sizeof(FortPlayerDBNOEnterParams_SetParams) == 0x000018, "Wrong size on FortPlayerDBNOEnterParams_SetParams");
static_assert(offsetof(FortPlayerDBNOEnterParams_SetParams, _KilledPlayer) == 0x000000, "Member 'FortPlayerDBNOEnterParams_SetParams::_KilledPlayer' has a wrong offset!");
static_assert(offsetof(FortPlayerDBNOEnterParams_SetParams, _KilledBy) == 0x000008, "Member 'FortPlayerDBNOEnterParams_SetParams::_KilledBy' has a wrong offset!");
static_assert(offsetof(FortPlayerDBNOEnterParams_SetParams, ThisParam) == 0x000010, "Member 'FortPlayerDBNOEnterParams_SetParams::ThisParam' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.ActivateCraftingTable
// 0x0008 (0x0008 - 0x0000)
struct FortOutpostFunctionLibrary_ActivateCraftingTable final
{
public:
	class AFortPlayerControllerOutpost*           FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostFunctionLibrary_ActivateCraftingTable) == 0x000008, "Wrong alignment on FortOutpostFunctionLibrary_ActivateCraftingTable");
static_assert(sizeof(FortOutpostFunctionLibrary_ActivateCraftingTable) == 0x000008, "Wrong size on FortOutpostFunctionLibrary_ActivateCraftingTable");
static_assert(offsetof(FortOutpostFunctionLibrary_ActivateCraftingTable, FortPC) == 0x000000, "Member 'FortOutpostFunctionLibrary_ActivateCraftingTable::FortPC' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.CanActivateCraftingTable
// 0x0010 (0x0010 - 0x0000)
struct FortOutpostFunctionLibrary_CanActivateCraftingTable final
{
public:
	class AFortPlayerControllerOutpost*           FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortOutpostFunctionLibrary_CanActivateCraftingTable) == 0x000008, "Wrong alignment on FortOutpostFunctionLibrary_CanActivateCraftingTable");
static_assert(sizeof(FortOutpostFunctionLibrary_CanActivateCraftingTable) == 0x000010, "Wrong size on FortOutpostFunctionLibrary_CanActivateCraftingTable");
static_assert(offsetof(FortOutpostFunctionLibrary_CanActivateCraftingTable, FortPC) == 0x000000, "Member 'FortOutpostFunctionLibrary_CanActivateCraftingTable::FortPC' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_CanActivateCraftingTable, ReturnValue) == 0x000008, "Member 'FortOutpostFunctionLibrary_CanActivateCraftingTable::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.DeactivateCraftingTable
// 0x0008 (0x0008 - 0x0000)
struct FortOutpostFunctionLibrary_DeactivateCraftingTable final
{
public:
	class AFortPlayerControllerOutpost*           FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostFunctionLibrary_DeactivateCraftingTable) == 0x000008, "Wrong alignment on FortOutpostFunctionLibrary_DeactivateCraftingTable");
static_assert(sizeof(FortOutpostFunctionLibrary_DeactivateCraftingTable) == 0x000008, "Wrong size on FortOutpostFunctionLibrary_DeactivateCraftingTable");
static_assert(offsetof(FortOutpostFunctionLibrary_DeactivateCraftingTable, FortPC) == 0x000000, "Member 'FortOutpostFunctionLibrary_DeactivateCraftingTable::FortPC' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.DeployOutpostBuildingTagOnPlacementTag
// 0x0020 (0x0020 - 0x0000)
struct FortOutpostFunctionLibrary_DeployOutpostBuildingTagOnPlacementTag final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           BuildingTag;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PlacementTag;                                      // 0x0010(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortOutpostFunctionLibrary_DeployOutpostBuildingTagOnPlacementTag) == 0x000008, "Wrong alignment on FortOutpostFunctionLibrary_DeployOutpostBuildingTagOnPlacementTag");
static_assert(sizeof(FortOutpostFunctionLibrary_DeployOutpostBuildingTagOnPlacementTag) == 0x000020, "Wrong size on FortOutpostFunctionLibrary_DeployOutpostBuildingTagOnPlacementTag");
static_assert(offsetof(FortOutpostFunctionLibrary_DeployOutpostBuildingTagOnPlacementTag, WorldContextObject) == 0x000000, "Member 'FortOutpostFunctionLibrary_DeployOutpostBuildingTagOnPlacementTag::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_DeployOutpostBuildingTagOnPlacementTag, BuildingTag) == 0x000008, "Member 'FortOutpostFunctionLibrary_DeployOutpostBuildingTagOnPlacementTag::BuildingTag' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_DeployOutpostBuildingTagOnPlacementTag, PlacementTag) == 0x000010, "Member 'FortOutpostFunctionLibrary_DeployOutpostBuildingTagOnPlacementTag::PlacementTag' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_DeployOutpostBuildingTagOnPlacementTag, ReturnValue) == 0x000018, "Member 'FortOutpostFunctionLibrary_DeployOutpostBuildingTagOnPlacementTag::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.FabricateItem
// 0x0010 (0x0010 - 0x0000)
struct FortOutpostFunctionLibrary_FabricateItem final
{
public:
	class AFortPlayerControllerOutpost*           FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortWorldItemDefinition*               ItemDef;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostFunctionLibrary_FabricateItem) == 0x000008, "Wrong alignment on FortOutpostFunctionLibrary_FabricateItem");
static_assert(sizeof(FortOutpostFunctionLibrary_FabricateItem) == 0x000010, "Wrong size on FortOutpostFunctionLibrary_FabricateItem");
static_assert(offsetof(FortOutpostFunctionLibrary_FabricateItem, FortPC) == 0x000000, "Member 'FortOutpostFunctionLibrary_FabricateItem::FortPC' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_FabricateItem, ItemDef) == 0x000008, "Member 'FortOutpostFunctionLibrary_FabricateItem::ItemDef' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.FabricatorAbortDisintegration
// 0x0008 (0x0008 - 0x0000)
struct FortOutpostFunctionLibrary_FabricatorAbortDisintegration final
{
public:
	class AFortPlayerControllerOutpost*           FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostFunctionLibrary_FabricatorAbortDisintegration) == 0x000008, "Wrong alignment on FortOutpostFunctionLibrary_FabricatorAbortDisintegration");
static_assert(sizeof(FortOutpostFunctionLibrary_FabricatorAbortDisintegration) == 0x000008, "Wrong size on FortOutpostFunctionLibrary_FabricatorAbortDisintegration");
static_assert(offsetof(FortOutpostFunctionLibrary_FabricatorAbortDisintegration, FortPC) == 0x000000, "Member 'FortOutpostFunctionLibrary_FabricatorAbortDisintegration::FortPC' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.FabricatorCanDisintegrateItem
// 0x0018 (0x0018 - 0x0000)
struct FortOutpostFunctionLibrary_FabricatorCanDisintegrateItem final
{
public:
	class AFortPlayerControllerOutpost*           FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortWorldItem*                         Item;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostFunctionLibrary_FabricatorCanDisintegrateItem) == 0x000008, "Wrong alignment on FortOutpostFunctionLibrary_FabricatorCanDisintegrateItem");
static_assert(sizeof(FortOutpostFunctionLibrary_FabricatorCanDisintegrateItem) == 0x000018, "Wrong size on FortOutpostFunctionLibrary_FabricatorCanDisintegrateItem");
static_assert(offsetof(FortOutpostFunctionLibrary_FabricatorCanDisintegrateItem, FortPC) == 0x000000, "Member 'FortOutpostFunctionLibrary_FabricatorCanDisintegrateItem::FortPC' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_FabricatorCanDisintegrateItem, Item) == 0x000008, "Member 'FortOutpostFunctionLibrary_FabricatorCanDisintegrateItem::Item' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_FabricatorCanDisintegrateItem, Count) == 0x000010, "Member 'FortOutpostFunctionLibrary_FabricatorCanDisintegrateItem::Count' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_FabricatorCanDisintegrateItem, ReturnValue) == 0x000014, "Member 'FortOutpostFunctionLibrary_FabricatorCanDisintegrateItem::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.FabricatorDisintegrateItem
// 0x0018 (0x0018 - 0x0000)
struct FortOutpostFunctionLibrary_FabricatorDisintegrateItem final
{
public:
	class AFortPlayerControllerOutpost*           FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortWorldItem*                         Item;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortOutpostFunctionLibrary_FabricatorDisintegrateItem) == 0x000008, "Wrong alignment on FortOutpostFunctionLibrary_FabricatorDisintegrateItem");
static_assert(sizeof(FortOutpostFunctionLibrary_FabricatorDisintegrateItem) == 0x000018, "Wrong size on FortOutpostFunctionLibrary_FabricatorDisintegrateItem");
static_assert(offsetof(FortOutpostFunctionLibrary_FabricatorDisintegrateItem, FortPC) == 0x000000, "Member 'FortOutpostFunctionLibrary_FabricatorDisintegrateItem::FortPC' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_FabricatorDisintegrateItem, Item) == 0x000008, "Member 'FortOutpostFunctionLibrary_FabricatorDisintegrateItem::Item' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_FabricatorDisintegrateItem, Count) == 0x000010, "Member 'FortOutpostFunctionLibrary_FabricatorDisintegrateItem::Count' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.FabricatorIsDisintegrating
// 0x0010 (0x0010 - 0x0000)
struct FortOutpostFunctionLibrary_FabricatorIsDisintegrating final
{
public:
	class AFortPlayerControllerOutpost*           FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortOutpostFunctionLibrary_FabricatorIsDisintegrating) == 0x000008, "Wrong alignment on FortOutpostFunctionLibrary_FabricatorIsDisintegrating");
static_assert(sizeof(FortOutpostFunctionLibrary_FabricatorIsDisintegrating) == 0x000010, "Wrong size on FortOutpostFunctionLibrary_FabricatorIsDisintegrating");
static_assert(offsetof(FortOutpostFunctionLibrary_FabricatorIsDisintegrating, FortPC) == 0x000000, "Member 'FortOutpostFunctionLibrary_FabricatorIsDisintegrating::FortPC' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_FabricatorIsDisintegrating, ReturnValue) == 0x000008, "Member 'FortOutpostFunctionLibrary_FabricatorIsDisintegrating::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.GetCraftingTableActivationCost
// 0x0018 (0x0018 - 0x0000)
struct FortOutpostFunctionLibrary_GetCraftingTableActivationCost final
{
public:
	class AFortPlayerControllerOutpost*           FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortItemQuantityPair>          OutWorldItems;                                     // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostFunctionLibrary_GetCraftingTableActivationCost) == 0x000008, "Wrong alignment on FortOutpostFunctionLibrary_GetCraftingTableActivationCost");
static_assert(sizeof(FortOutpostFunctionLibrary_GetCraftingTableActivationCost) == 0x000018, "Wrong size on FortOutpostFunctionLibrary_GetCraftingTableActivationCost");
static_assert(offsetof(FortOutpostFunctionLibrary_GetCraftingTableActivationCost, FortPC) == 0x000000, "Member 'FortOutpostFunctionLibrary_GetCraftingTableActivationCost::FortPC' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetCraftingTableActivationCost, OutWorldItems) == 0x000008, "Member 'FortOutpostFunctionLibrary_GetCraftingTableActivationCost::OutWorldItems' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.GetCraftingTableActivationItemCount
// 0x0010 (0x0010 - 0x0000)
struct FortOutpostFunctionLibrary_GetCraftingTableActivationItemCount final
{
public:
	class AFortPlayerControllerOutpost*           FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortOutpostFunctionLibrary_GetCraftingTableActivationItemCount) == 0x000008, "Wrong alignment on FortOutpostFunctionLibrary_GetCraftingTableActivationItemCount");
static_assert(sizeof(FortOutpostFunctionLibrary_GetCraftingTableActivationItemCount) == 0x000010, "Wrong size on FortOutpostFunctionLibrary_GetCraftingTableActivationItemCount");
static_assert(offsetof(FortOutpostFunctionLibrary_GetCraftingTableActivationItemCount, FortPC) == 0x000000, "Member 'FortOutpostFunctionLibrary_GetCraftingTableActivationItemCount::FortPC' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetCraftingTableActivationItemCount, ReturnValue) == 0x000008, "Member 'FortOutpostFunctionLibrary_GetCraftingTableActivationItemCount::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.GetFabricatorDisintegrationDurationInSeconds
// 0x0010 (0x0010 - 0x0000)
struct FortOutpostFunctionLibrary_GetFabricatorDisintegrationDurationInSeconds final
{
public:
	class AFortPlayerControllerOutpost*           FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortOutpostFunctionLibrary_GetFabricatorDisintegrationDurationInSeconds) == 0x000008, "Wrong alignment on FortOutpostFunctionLibrary_GetFabricatorDisintegrationDurationInSeconds");
static_assert(sizeof(FortOutpostFunctionLibrary_GetFabricatorDisintegrationDurationInSeconds) == 0x000010, "Wrong size on FortOutpostFunctionLibrary_GetFabricatorDisintegrationDurationInSeconds");
static_assert(offsetof(FortOutpostFunctionLibrary_GetFabricatorDisintegrationDurationInSeconds, FortPC) == 0x000000, "Member 'FortOutpostFunctionLibrary_GetFabricatorDisintegrationDurationInSeconds::FortPC' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetFabricatorDisintegrationDurationInSeconds, ReturnValue) == 0x000008, "Member 'FortOutpostFunctionLibrary_GetFabricatorDisintegrationDurationInSeconds::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.GetFabricatorDisintegrationMinutesRemaining
// 0x0010 (0x0010 - 0x0000)
struct FortOutpostFunctionLibrary_GetFabricatorDisintegrationMinutesRemaining final
{
public:
	class AFortPlayerControllerOutpost*           FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortOutpostFunctionLibrary_GetFabricatorDisintegrationMinutesRemaining) == 0x000008, "Wrong alignment on FortOutpostFunctionLibrary_GetFabricatorDisintegrationMinutesRemaining");
static_assert(sizeof(FortOutpostFunctionLibrary_GetFabricatorDisintegrationMinutesRemaining) == 0x000010, "Wrong size on FortOutpostFunctionLibrary_GetFabricatorDisintegrationMinutesRemaining");
static_assert(offsetof(FortOutpostFunctionLibrary_GetFabricatorDisintegrationMinutesRemaining, FortPC) == 0x000000, "Member 'FortOutpostFunctionLibrary_GetFabricatorDisintegrationMinutesRemaining::FortPC' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetFabricatorDisintegrationMinutesRemaining, ReturnValue) == 0x000008, "Member 'FortOutpostFunctionLibrary_GetFabricatorDisintegrationMinutesRemaining::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.GetFabricatorDisintegrationSecondsRemaining
// 0x0010 (0x0010 - 0x0000)
struct FortOutpostFunctionLibrary_GetFabricatorDisintegrationSecondsRemaining final
{
public:
	class AFortPlayerControllerOutpost*           FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortOutpostFunctionLibrary_GetFabricatorDisintegrationSecondsRemaining) == 0x000008, "Wrong alignment on FortOutpostFunctionLibrary_GetFabricatorDisintegrationSecondsRemaining");
static_assert(sizeof(FortOutpostFunctionLibrary_GetFabricatorDisintegrationSecondsRemaining) == 0x000010, "Wrong size on FortOutpostFunctionLibrary_GetFabricatorDisintegrationSecondsRemaining");
static_assert(offsetof(FortOutpostFunctionLibrary_GetFabricatorDisintegrationSecondsRemaining, FortPC) == 0x000000, "Member 'FortOutpostFunctionLibrary_GetFabricatorDisintegrationSecondsRemaining::FortPC' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetFabricatorDisintegrationSecondsRemaining, ReturnValue) == 0x000008, "Member 'FortOutpostFunctionLibrary_GetFabricatorDisintegrationSecondsRemaining::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.GetFabricatorDisintegrationStartTime
// 0x0010 (0x0010 - 0x0000)
struct FortOutpostFunctionLibrary_GetFabricatorDisintegrationStartTime final
{
public:
	class AFortPlayerControllerOutpost*           FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostFunctionLibrary_GetFabricatorDisintegrationStartTime) == 0x000008, "Wrong alignment on FortOutpostFunctionLibrary_GetFabricatorDisintegrationStartTime");
static_assert(sizeof(FortOutpostFunctionLibrary_GetFabricatorDisintegrationStartTime) == 0x000010, "Wrong size on FortOutpostFunctionLibrary_GetFabricatorDisintegrationStartTime");
static_assert(offsetof(FortOutpostFunctionLibrary_GetFabricatorDisintegrationStartTime, FortPC) == 0x000000, "Member 'FortOutpostFunctionLibrary_GetFabricatorDisintegrationStartTime::FortPC' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetFabricatorDisintegrationStartTime, ReturnValue) == 0x000008, "Member 'FortOutpostFunctionLibrary_GetFabricatorDisintegrationStartTime::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.GetFabricatorIncomingGooAmount
// 0x0010 (0x0010 - 0x0000)
struct FortOutpostFunctionLibrary_GetFabricatorIncomingGooAmount final
{
public:
	class AFortPlayerControllerOutpost*           FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortOutpostFunctionLibrary_GetFabricatorIncomingGooAmount) == 0x000008, "Wrong alignment on FortOutpostFunctionLibrary_GetFabricatorIncomingGooAmount");
static_assert(sizeof(FortOutpostFunctionLibrary_GetFabricatorIncomingGooAmount) == 0x000010, "Wrong size on FortOutpostFunctionLibrary_GetFabricatorIncomingGooAmount");
static_assert(offsetof(FortOutpostFunctionLibrary_GetFabricatorIncomingGooAmount, FortPC) == 0x000000, "Member 'FortOutpostFunctionLibrary_GetFabricatorIncomingGooAmount::FortPC' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetFabricatorIncomingGooAmount, ReturnValue) == 0x000008, "Member 'FortOutpostFunctionLibrary_GetFabricatorIncomingGooAmount::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.GetFabricatorIncomingGooAmountProgress
// 0x0010 (0x0010 - 0x0000)
struct FortOutpostFunctionLibrary_GetFabricatorIncomingGooAmountProgress final
{
public:
	class AFortPlayerControllerOutpost*           FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortOutpostFunctionLibrary_GetFabricatorIncomingGooAmountProgress) == 0x000008, "Wrong alignment on FortOutpostFunctionLibrary_GetFabricatorIncomingGooAmountProgress");
static_assert(sizeof(FortOutpostFunctionLibrary_GetFabricatorIncomingGooAmountProgress) == 0x000010, "Wrong size on FortOutpostFunctionLibrary_GetFabricatorIncomingGooAmountProgress");
static_assert(offsetof(FortOutpostFunctionLibrary_GetFabricatorIncomingGooAmountProgress, FortPC) == 0x000000, "Member 'FortOutpostFunctionLibrary_GetFabricatorIncomingGooAmountProgress::FortPC' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetFabricatorIncomingGooAmountProgress, ReturnValue) == 0x000008, "Member 'FortOutpostFunctionLibrary_GetFabricatorIncomingGooAmountProgress::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.GetFabricatorItemDisintegrationDurationInSeconds
// 0x0010 (0x0010 - 0x0000)
struct FortOutpostFunctionLibrary_GetFabricatorItemDisintegrationDurationInSeconds final
{
public:
	class UFortWorldItem*                         Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostFunctionLibrary_GetFabricatorItemDisintegrationDurationInSeconds) == 0x000008, "Wrong alignment on FortOutpostFunctionLibrary_GetFabricatorItemDisintegrationDurationInSeconds");
static_assert(sizeof(FortOutpostFunctionLibrary_GetFabricatorItemDisintegrationDurationInSeconds) == 0x000010, "Wrong size on FortOutpostFunctionLibrary_GetFabricatorItemDisintegrationDurationInSeconds");
static_assert(offsetof(FortOutpostFunctionLibrary_GetFabricatorItemDisintegrationDurationInSeconds, Item) == 0x000000, "Member 'FortOutpostFunctionLibrary_GetFabricatorItemDisintegrationDurationInSeconds::Item' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetFabricatorItemDisintegrationDurationInSeconds, Count) == 0x000008, "Member 'FortOutpostFunctionLibrary_GetFabricatorItemDisintegrationDurationInSeconds::Count' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetFabricatorItemDisintegrationDurationInSeconds, ReturnValue) == 0x00000C, "Member 'FortOutpostFunctionLibrary_GetFabricatorItemDisintegrationDurationInSeconds::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.GetFabricatorMaxGooCapacity
// 0x0010 (0x0010 - 0x0000)
struct FortOutpostFunctionLibrary_GetFabricatorMaxGooCapacity final
{
public:
	class AFortPlayerControllerOutpost*           FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortOutpostFunctionLibrary_GetFabricatorMaxGooCapacity) == 0x000008, "Wrong alignment on FortOutpostFunctionLibrary_GetFabricatorMaxGooCapacity");
static_assert(sizeof(FortOutpostFunctionLibrary_GetFabricatorMaxGooCapacity) == 0x000010, "Wrong size on FortOutpostFunctionLibrary_GetFabricatorMaxGooCapacity");
static_assert(offsetof(FortOutpostFunctionLibrary_GetFabricatorMaxGooCapacity, FortPC) == 0x000000, "Member 'FortOutpostFunctionLibrary_GetFabricatorMaxGooCapacity::FortPC' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetFabricatorMaxGooCapacity, ReturnValue) == 0x000008, "Member 'FortOutpostFunctionLibrary_GetFabricatorMaxGooCapacity::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.GetFabricatorPlayerItems
// 0x0030 (0x0030 - 0x0000)
struct FortOutpostFunctionLibrary_GetFabricatorPlayerItems final
{
public:
	class AFortPlayerControllerOutpost*           FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortInventoryFilter                          InventoryFilter;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SearchFilter;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortItem*>                      ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostFunctionLibrary_GetFabricatorPlayerItems) == 0x000008, "Wrong alignment on FortOutpostFunctionLibrary_GetFabricatorPlayerItems");
static_assert(sizeof(FortOutpostFunctionLibrary_GetFabricatorPlayerItems) == 0x000030, "Wrong size on FortOutpostFunctionLibrary_GetFabricatorPlayerItems");
static_assert(offsetof(FortOutpostFunctionLibrary_GetFabricatorPlayerItems, FortPC) == 0x000000, "Member 'FortOutpostFunctionLibrary_GetFabricatorPlayerItems::FortPC' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetFabricatorPlayerItems, InventoryFilter) == 0x000008, "Member 'FortOutpostFunctionLibrary_GetFabricatorPlayerItems::InventoryFilter' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetFabricatorPlayerItems, SearchFilter) == 0x000010, "Member 'FortOutpostFunctionLibrary_GetFabricatorPlayerItems::SearchFilter' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetFabricatorPlayerItems, ReturnValue) == 0x000020, "Member 'FortOutpostFunctionLibrary_GetFabricatorPlayerItems::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.GetFabricatorRecipes
// 0x0030 (0x0030 - 0x0000)
struct FortOutpostFunctionLibrary_GetFabricatorRecipes final
{
public:
	class AFortPlayerControllerOutpost*           FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortInventoryFilter                          InventoryFilter;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SearchFilter;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortItem*>                      ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostFunctionLibrary_GetFabricatorRecipes) == 0x000008, "Wrong alignment on FortOutpostFunctionLibrary_GetFabricatorRecipes");
static_assert(sizeof(FortOutpostFunctionLibrary_GetFabricatorRecipes) == 0x000030, "Wrong size on FortOutpostFunctionLibrary_GetFabricatorRecipes");
static_assert(offsetof(FortOutpostFunctionLibrary_GetFabricatorRecipes, FortPC) == 0x000000, "Member 'FortOutpostFunctionLibrary_GetFabricatorRecipes::FortPC' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetFabricatorRecipes, InventoryFilter) == 0x000008, "Member 'FortOutpostFunctionLibrary_GetFabricatorRecipes::InventoryFilter' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetFabricatorRecipes, SearchFilter) == 0x000010, "Member 'FortOutpostFunctionLibrary_GetFabricatorRecipes::SearchFilter' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetFabricatorRecipes, ReturnValue) == 0x000020, "Member 'FortOutpostFunctionLibrary_GetFabricatorRecipes::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.GetFabricatorStoredGooAmount
// 0x0010 (0x0010 - 0x0000)
struct FortOutpostFunctionLibrary_GetFabricatorStoredGooAmount final
{
public:
	class AFortPlayerControllerOutpost*           FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortOutpostFunctionLibrary_GetFabricatorStoredGooAmount) == 0x000008, "Wrong alignment on FortOutpostFunctionLibrary_GetFabricatorStoredGooAmount");
static_assert(sizeof(FortOutpostFunctionLibrary_GetFabricatorStoredGooAmount) == 0x000010, "Wrong size on FortOutpostFunctionLibrary_GetFabricatorStoredGooAmount");
static_assert(offsetof(FortOutpostFunctionLibrary_GetFabricatorStoredGooAmount, FortPC) == 0x000000, "Member 'FortOutpostFunctionLibrary_GetFabricatorStoredGooAmount::FortPC' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetFabricatorStoredGooAmount, ReturnValue) == 0x000008, "Member 'FortOutpostFunctionLibrary_GetFabricatorStoredGooAmount::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.GetGooFromDisintegrationOfItem
// 0x0010 (0x0010 - 0x0000)
struct FortOutpostFunctionLibrary_GetGooFromDisintegrationOfItem final
{
public:
	const class UFortWorldItem*                   Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortOutpostFunctionLibrary_GetGooFromDisintegrationOfItem) == 0x000008, "Wrong alignment on FortOutpostFunctionLibrary_GetGooFromDisintegrationOfItem");
static_assert(sizeof(FortOutpostFunctionLibrary_GetGooFromDisintegrationOfItem) == 0x000010, "Wrong size on FortOutpostFunctionLibrary_GetGooFromDisintegrationOfItem");
static_assert(offsetof(FortOutpostFunctionLibrary_GetGooFromDisintegrationOfItem, Item) == 0x000000, "Member 'FortOutpostFunctionLibrary_GetGooFromDisintegrationOfItem::Item' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetGooFromDisintegrationOfItem, ReturnValue) == 0x000008, "Member 'FortOutpostFunctionLibrary_GetGooFromDisintegrationOfItem::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.GetGooRequiredToFabricateItem
// 0x0010 (0x0010 - 0x0000)
struct FortOutpostFunctionLibrary_GetGooRequiredToFabricateItem final
{
public:
	const class UFortWorldItem*                   Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortOutpostFunctionLibrary_GetGooRequiredToFabricateItem) == 0x000008, "Wrong alignment on FortOutpostFunctionLibrary_GetGooRequiredToFabricateItem");
static_assert(sizeof(FortOutpostFunctionLibrary_GetGooRequiredToFabricateItem) == 0x000010, "Wrong size on FortOutpostFunctionLibrary_GetGooRequiredToFabricateItem");
static_assert(offsetof(FortOutpostFunctionLibrary_GetGooRequiredToFabricateItem, Item) == 0x000000, "Member 'FortOutpostFunctionLibrary_GetGooRequiredToFabricateItem::Item' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetGooRequiredToFabricateItem, ReturnValue) == 0x000008, "Member 'FortOutpostFunctionLibrary_GetGooRequiredToFabricateItem::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.GetNumberOfCraftingTableItemsRemaining
// 0x0010 (0x0010 - 0x0000)
struct FortOutpostFunctionLibrary_GetNumberOfCraftingTableItemsRemaining final
{
public:
	class AFortPlayerControllerOutpost*           FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortOutpostFunctionLibrary_GetNumberOfCraftingTableItemsRemaining) == 0x000008, "Wrong alignment on FortOutpostFunctionLibrary_GetNumberOfCraftingTableItemsRemaining");
static_assert(sizeof(FortOutpostFunctionLibrary_GetNumberOfCraftingTableItemsRemaining) == 0x000010, "Wrong size on FortOutpostFunctionLibrary_GetNumberOfCraftingTableItemsRemaining");
static_assert(offsetof(FortOutpostFunctionLibrary_GetNumberOfCraftingTableItemsRemaining, FortPC) == 0x000000, "Member 'FortOutpostFunctionLibrary_GetNumberOfCraftingTableItemsRemaining::FortPC' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetNumberOfCraftingTableItemsRemaining, ReturnValue) == 0x000008, "Member 'FortOutpostFunctionLibrary_GetNumberOfCraftingTableItemsRemaining::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.GetOutpostBuildingItemDefinition
// 0x0018 (0x0018 - 0x0000)
struct FortOutpostFunctionLibrary_GetOutpostBuildingItemDefinition final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOutpostBuildings                             Building;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortOutpostItemDefinition*             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostFunctionLibrary_GetOutpostBuildingItemDefinition) == 0x000008, "Wrong alignment on FortOutpostFunctionLibrary_GetOutpostBuildingItemDefinition");
static_assert(sizeof(FortOutpostFunctionLibrary_GetOutpostBuildingItemDefinition) == 0x000018, "Wrong size on FortOutpostFunctionLibrary_GetOutpostBuildingItemDefinition");
static_assert(offsetof(FortOutpostFunctionLibrary_GetOutpostBuildingItemDefinition, WorldContextObject) == 0x000000, "Member 'FortOutpostFunctionLibrary_GetOutpostBuildingItemDefinition::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetOutpostBuildingItemDefinition, Building) == 0x000008, "Member 'FortOutpostFunctionLibrary_GetOutpostBuildingItemDefinition::Building' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetOutpostBuildingItemDefinition, ReturnValue) == 0x000010, "Member 'FortOutpostFunctionLibrary_GetOutpostBuildingItemDefinition::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.GetOutpostBuildingTagFromPlacementTag
// 0x0018 (0x0018 - 0x0000)
struct FortOutpostFunctionLibrary_GetOutpostBuildingTagFromPlacementTag final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PlacementTag;                                      // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostFunctionLibrary_GetOutpostBuildingTagFromPlacementTag) == 0x000008, "Wrong alignment on FortOutpostFunctionLibrary_GetOutpostBuildingTagFromPlacementTag");
static_assert(sizeof(FortOutpostFunctionLibrary_GetOutpostBuildingTagFromPlacementTag) == 0x000018, "Wrong size on FortOutpostFunctionLibrary_GetOutpostBuildingTagFromPlacementTag");
static_assert(offsetof(FortOutpostFunctionLibrary_GetOutpostBuildingTagFromPlacementTag, WorldContextObject) == 0x000000, "Member 'FortOutpostFunctionLibrary_GetOutpostBuildingTagFromPlacementTag::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetOutpostBuildingTagFromPlacementTag, PlacementTag) == 0x000008, "Member 'FortOutpostFunctionLibrary_GetOutpostBuildingTagFromPlacementTag::PlacementTag' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetOutpostBuildingTagFromPlacementTag, ReturnValue) == 0x000010, "Member 'FortOutpostFunctionLibrary_GetOutpostBuildingTagFromPlacementTag::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.GetOutpostOwner
// 0x0010 (0x0010 - 0x0000)
struct FortOutpostFunctionLibrary_GetOutpostOwner final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerControllerOutpost*           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostFunctionLibrary_GetOutpostOwner) == 0x000008, "Wrong alignment on FortOutpostFunctionLibrary_GetOutpostOwner");
static_assert(sizeof(FortOutpostFunctionLibrary_GetOutpostOwner) == 0x000010, "Wrong size on FortOutpostFunctionLibrary_GetOutpostOwner");
static_assert(offsetof(FortOutpostFunctionLibrary_GetOutpostOwner, WorldContextObject) == 0x000000, "Member 'FortOutpostFunctionLibrary_GetOutpostOwner::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetOutpostOwner, ReturnValue) == 0x000008, "Member 'FortOutpostFunctionLibrary_GetOutpostOwner::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.GetOutpostQuestMissionConfigData
// 0x0018 (0x0018 - 0x0000)
struct FortOutpostFunctionLibrary_GetOutpostQuestMissionConfigData final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ConfigTag;                                         // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortMissionConfigData*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostFunctionLibrary_GetOutpostQuestMissionConfigData) == 0x000008, "Wrong alignment on FortOutpostFunctionLibrary_GetOutpostQuestMissionConfigData");
static_assert(sizeof(FortOutpostFunctionLibrary_GetOutpostQuestMissionConfigData) == 0x000018, "Wrong size on FortOutpostFunctionLibrary_GetOutpostQuestMissionConfigData");
static_assert(offsetof(FortOutpostFunctionLibrary_GetOutpostQuestMissionConfigData, WorldContextObject) == 0x000000, "Member 'FortOutpostFunctionLibrary_GetOutpostQuestMissionConfigData::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetOutpostQuestMissionConfigData, ConfigTag) == 0x000008, "Member 'FortOutpostFunctionLibrary_GetOutpostQuestMissionConfigData::ConfigTag' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetOutpostQuestMissionConfigData, ReturnValue) == 0x000010, "Member 'FortOutpostFunctionLibrary_GetOutpostQuestMissionConfigData::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.GetPlacementTagFromOutpostBuildingTag
// 0x0018 (0x0018 - 0x0000)
struct FortOutpostFunctionLibrary_GetPlacementTagFromOutpostBuildingTag final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           BuildingTag;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostFunctionLibrary_GetPlacementTagFromOutpostBuildingTag) == 0x000008, "Wrong alignment on FortOutpostFunctionLibrary_GetPlacementTagFromOutpostBuildingTag");
static_assert(sizeof(FortOutpostFunctionLibrary_GetPlacementTagFromOutpostBuildingTag) == 0x000018, "Wrong size on FortOutpostFunctionLibrary_GetPlacementTagFromOutpostBuildingTag");
static_assert(offsetof(FortOutpostFunctionLibrary_GetPlacementTagFromOutpostBuildingTag, WorldContextObject) == 0x000000, "Member 'FortOutpostFunctionLibrary_GetPlacementTagFromOutpostBuildingTag::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetPlacementTagFromOutpostBuildingTag, BuildingTag) == 0x000008, "Member 'FortOutpostFunctionLibrary_GetPlacementTagFromOutpostBuildingTag::BuildingTag' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetPlacementTagFromOutpostBuildingTag, ReturnValue) == 0x000010, "Member 'FortOutpostFunctionLibrary_GetPlacementTagFromOutpostBuildingTag::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.GetStorageVaultCapacity
// 0x0010 (0x0010 - 0x0000)
struct FortOutpostFunctionLibrary_GetStorageVaultCapacity final
{
public:
	class AFortPlayerControllerOutpost*           Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortOutpostFunctionLibrary_GetStorageVaultCapacity) == 0x000008, "Wrong alignment on FortOutpostFunctionLibrary_GetStorageVaultCapacity");
static_assert(sizeof(FortOutpostFunctionLibrary_GetStorageVaultCapacity) == 0x000010, "Wrong size on FortOutpostFunctionLibrary_GetStorageVaultCapacity");
static_assert(offsetof(FortOutpostFunctionLibrary_GetStorageVaultCapacity, Player) == 0x000000, "Member 'FortOutpostFunctionLibrary_GetStorageVaultCapacity::Player' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetStorageVaultCapacity, ReturnValue) == 0x000008, "Member 'FortOutpostFunctionLibrary_GetStorageVaultCapacity::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.GetStorageVaultNumItems
// 0x0010 (0x0010 - 0x0000)
struct FortOutpostFunctionLibrary_GetStorageVaultNumItems final
{
public:
	class AFortPlayerControllerOutpost*           Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortOutpostFunctionLibrary_GetStorageVaultNumItems) == 0x000008, "Wrong alignment on FortOutpostFunctionLibrary_GetStorageVaultNumItems");
static_assert(sizeof(FortOutpostFunctionLibrary_GetStorageVaultNumItems) == 0x000010, "Wrong size on FortOutpostFunctionLibrary_GetStorageVaultNumItems");
static_assert(offsetof(FortOutpostFunctionLibrary_GetStorageVaultNumItems, Player) == 0x000000, "Member 'FortOutpostFunctionLibrary_GetStorageVaultNumItems::Player' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetStorageVaultNumItems, ReturnValue) == 0x000008, "Member 'FortOutpostFunctionLibrary_GetStorageVaultNumItems::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.GetStorageVaultPlayerItems
// 0x0030 (0x0030 - 0x0000)
struct FortOutpostFunctionLibrary_GetStorageVaultPlayerItems final
{
public:
	class AFortPlayerControllerOutpost*           Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortInventoryFilter                          InventoryFilter;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SearchFilter;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortItem*>                      ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostFunctionLibrary_GetStorageVaultPlayerItems) == 0x000008, "Wrong alignment on FortOutpostFunctionLibrary_GetStorageVaultPlayerItems");
static_assert(sizeof(FortOutpostFunctionLibrary_GetStorageVaultPlayerItems) == 0x000030, "Wrong size on FortOutpostFunctionLibrary_GetStorageVaultPlayerItems");
static_assert(offsetof(FortOutpostFunctionLibrary_GetStorageVaultPlayerItems, Player) == 0x000000, "Member 'FortOutpostFunctionLibrary_GetStorageVaultPlayerItems::Player' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetStorageVaultPlayerItems, InventoryFilter) == 0x000008, "Member 'FortOutpostFunctionLibrary_GetStorageVaultPlayerItems::InventoryFilter' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetStorageVaultPlayerItems, SearchFilter) == 0x000010, "Member 'FortOutpostFunctionLibrary_GetStorageVaultPlayerItems::SearchFilter' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetStorageVaultPlayerItems, ReturnValue) == 0x000020, "Member 'FortOutpostFunctionLibrary_GetStorageVaultPlayerItems::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.GetStorageVaultStoredItems
// 0x0030 (0x0030 - 0x0000)
struct FortOutpostFunctionLibrary_GetStorageVaultStoredItems final
{
public:
	class AFortPlayerControllerOutpost*           Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortInventoryFilter                          InventoryFilter;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SearchFilter;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortItem*>                      ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostFunctionLibrary_GetStorageVaultStoredItems) == 0x000008, "Wrong alignment on FortOutpostFunctionLibrary_GetStorageVaultStoredItems");
static_assert(sizeof(FortOutpostFunctionLibrary_GetStorageVaultStoredItems) == 0x000030, "Wrong size on FortOutpostFunctionLibrary_GetStorageVaultStoredItems");
static_assert(offsetof(FortOutpostFunctionLibrary_GetStorageVaultStoredItems, Player) == 0x000000, "Member 'FortOutpostFunctionLibrary_GetStorageVaultStoredItems::Player' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetStorageVaultStoredItems, InventoryFilter) == 0x000008, "Member 'FortOutpostFunctionLibrary_GetStorageVaultStoredItems::InventoryFilter' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetStorageVaultStoredItems, SearchFilter) == 0x000010, "Member 'FortOutpostFunctionLibrary_GetStorageVaultStoredItems::SearchFilter' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetStorageVaultStoredItems, ReturnValue) == 0x000020, "Member 'FortOutpostFunctionLibrary_GetStorageVaultStoredItems::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.IsCraftingTableActive
// 0x0010 (0x0010 - 0x0000)
struct FortOutpostFunctionLibrary_IsCraftingTableActive final
{
public:
	class AFortPlayerControllerOutpost*           FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortOutpostFunctionLibrary_IsCraftingTableActive) == 0x000008, "Wrong alignment on FortOutpostFunctionLibrary_IsCraftingTableActive");
static_assert(sizeof(FortOutpostFunctionLibrary_IsCraftingTableActive) == 0x000010, "Wrong size on FortOutpostFunctionLibrary_IsCraftingTableActive");
static_assert(offsetof(FortOutpostFunctionLibrary_IsCraftingTableActive, FortPC) == 0x000000, "Member 'FortOutpostFunctionLibrary_IsCraftingTableActive::FortPC' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_IsCraftingTableActive, ReturnValue) == 0x000008, "Member 'FortOutpostFunctionLibrary_IsCraftingTableActive::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.SetCriticalMissionJoinability
// 0x0010 (0x0010 - 0x0000)
struct FortOutpostFunctionLibrary_SetCriticalMissionJoinability final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bJoinable;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortOutpostFunctionLibrary_SetCriticalMissionJoinability) == 0x000008, "Wrong alignment on FortOutpostFunctionLibrary_SetCriticalMissionJoinability");
static_assert(sizeof(FortOutpostFunctionLibrary_SetCriticalMissionJoinability) == 0x000010, "Wrong size on FortOutpostFunctionLibrary_SetCriticalMissionJoinability");
static_assert(offsetof(FortOutpostFunctionLibrary_SetCriticalMissionJoinability, WorldContextObject) == 0x000000, "Member 'FortOutpostFunctionLibrary_SetCriticalMissionJoinability::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_SetCriticalMissionJoinability, bJoinable) == 0x000008, "Member 'FortOutpostFunctionLibrary_SetCriticalMissionJoinability::bJoinable' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.SetOutpostDefenseActive
// 0x0010 (0x0010 - 0x0000)
struct FortOutpostFunctionLibrary_SetOutpostDefenseActive final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActive;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortOutpostFunctionLibrary_SetOutpostDefenseActive) == 0x000008, "Wrong alignment on FortOutpostFunctionLibrary_SetOutpostDefenseActive");
static_assert(sizeof(FortOutpostFunctionLibrary_SetOutpostDefenseActive) == 0x000010, "Wrong size on FortOutpostFunctionLibrary_SetOutpostDefenseActive");
static_assert(offsetof(FortOutpostFunctionLibrary_SetOutpostDefenseActive, WorldContextObject) == 0x000000, "Member 'FortOutpostFunctionLibrary_SetOutpostDefenseActive::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_SetOutpostDefenseActive, bActive) == 0x000008, "Member 'FortOutpostFunctionLibrary_SetOutpostDefenseActive::bActive' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.SetOutpostGameDifficultyRow
// 0x0018 (0x0018 - 0x0000)
struct FortOutpostFunctionLibrary_SetOutpostGameDifficultyRow final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    GameDifficultyInfo;                                // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostFunctionLibrary_SetOutpostGameDifficultyRow) == 0x000008, "Wrong alignment on FortOutpostFunctionLibrary_SetOutpostGameDifficultyRow");
static_assert(sizeof(FortOutpostFunctionLibrary_SetOutpostGameDifficultyRow) == 0x000018, "Wrong size on FortOutpostFunctionLibrary_SetOutpostGameDifficultyRow");
static_assert(offsetof(FortOutpostFunctionLibrary_SetOutpostGameDifficultyRow, WorldContextObject) == 0x000000, "Member 'FortOutpostFunctionLibrary_SetOutpostGameDifficultyRow::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_SetOutpostGameDifficultyRow, GameDifficultyInfo) == 0x000008, "Member 'FortOutpostFunctionLibrary_SetOutpostGameDifficultyRow::GameDifficultyInfo' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.TransferItemFromStorage
// 0x0018 (0x0018 - 0x0000)
struct FortOutpostFunctionLibrary_TransferItemFromStorage final
{
public:
	class AFortPlayerController*                  Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortWorldItem*                         Item;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortOutpostFunctionLibrary_TransferItemFromStorage) == 0x000008, "Wrong alignment on FortOutpostFunctionLibrary_TransferItemFromStorage");
static_assert(sizeof(FortOutpostFunctionLibrary_TransferItemFromStorage) == 0x000018, "Wrong size on FortOutpostFunctionLibrary_TransferItemFromStorage");
static_assert(offsetof(FortOutpostFunctionLibrary_TransferItemFromStorage, Player) == 0x000000, "Member 'FortOutpostFunctionLibrary_TransferItemFromStorage::Player' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_TransferItemFromStorage, Item) == 0x000008, "Member 'FortOutpostFunctionLibrary_TransferItemFromStorage::Item' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_TransferItemFromStorage, Count) == 0x000010, "Member 'FortOutpostFunctionLibrary_TransferItemFromStorage::Count' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.TransferItemToStorage
// 0x0018 (0x0018 - 0x0000)
struct FortOutpostFunctionLibrary_TransferItemToStorage final
{
public:
	class AFortPlayerController*                  Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortWorldItem*                         Item;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortOutpostFunctionLibrary_TransferItemToStorage) == 0x000008, "Wrong alignment on FortOutpostFunctionLibrary_TransferItemToStorage");
static_assert(sizeof(FortOutpostFunctionLibrary_TransferItemToStorage) == 0x000018, "Wrong size on FortOutpostFunctionLibrary_TransferItemToStorage");
static_assert(offsetof(FortOutpostFunctionLibrary_TransferItemToStorage, Player) == 0x000000, "Member 'FortOutpostFunctionLibrary_TransferItemToStorage::Player' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_TransferItemToStorage, Item) == 0x000008, "Member 'FortOutpostFunctionLibrary_TransferItemToStorage::Item' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_TransferItemToStorage, Count) == 0x000010, "Member 'FortOutpostFunctionLibrary_TransferItemToStorage::Count' has a wrong offset!");

// Function FortniteGame.FortOutpostItemDefinition.GetLongDescription
// 0x0018 (0x0018 - 0x0000)
struct FortOutpostItemDefinition_GetLongDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostItemDefinition_GetLongDescription) == 0x000008, "Wrong alignment on FortOutpostItemDefinition_GetLongDescription");
static_assert(sizeof(FortOutpostItemDefinition_GetLongDescription) == 0x000018, "Wrong size on FortOutpostItemDefinition_GetLongDescription");
static_assert(offsetof(FortOutpostItemDefinition_GetLongDescription, ReturnValue) == 0x000000, "Member 'FortOutpostItemDefinition_GetLongDescription::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyBeaconClient.ClientAbandonResponse
// 0x0001 (0x0001 - 0x0000)
struct FortPartyBeaconClient_ClientAbandonResponse final
{
public:
	EPartyReservationResult                       ReservationResponse;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyBeaconClient_ClientAbandonResponse) == 0x000001, "Wrong alignment on FortPartyBeaconClient_ClientAbandonResponse");
static_assert(sizeof(FortPartyBeaconClient_ClientAbandonResponse) == 0x000001, "Wrong size on FortPartyBeaconClient_ClientAbandonResponse");
static_assert(offsetof(FortPartyBeaconClient_ClientAbandonResponse, ReservationResponse) == 0x000000, "Member 'FortPartyBeaconClient_ClientAbandonResponse::ReservationResponse' has a wrong offset!");

// Function FortniteGame.FortPartyBeaconClient.ClientReconnectResponse
// 0x0001 (0x0001 - 0x0000)
struct FortPartyBeaconClient_ClientReconnectResponse final
{
public:
	EPartyReservationResult                       ReservationResponse;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyBeaconClient_ClientReconnectResponse) == 0x000001, "Wrong alignment on FortPartyBeaconClient_ClientReconnectResponse");
static_assert(sizeof(FortPartyBeaconClient_ClientReconnectResponse) == 0x000001, "Wrong size on FortPartyBeaconClient_ClientReconnectResponse");
static_assert(offsetof(FortPartyBeaconClient_ClientReconnectResponse, ReservationResponse) == 0x000000, "Member 'FortPartyBeaconClient_ClientReconnectResponse::ReservationResponse' has a wrong offset!");

// Function FortniteGame.FortPartyBeaconClient.ServerAbandonExistingReservation
// 0x0038 (0x0038 - 0x0000)
struct FortPartyBeaconClient_ServerAbandonExistingReservation final
{
public:
	class FString                                 InSessionId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       RequestingPlayer;                                  // 0x0010(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyBeaconClient_ServerAbandonExistingReservation) == 0x000008, "Wrong alignment on FortPartyBeaconClient_ServerAbandonExistingReservation");
static_assert(sizeof(FortPartyBeaconClient_ServerAbandonExistingReservation) == 0x000038, "Wrong size on FortPartyBeaconClient_ServerAbandonExistingReservation");
static_assert(offsetof(FortPartyBeaconClient_ServerAbandonExistingReservation, InSessionId) == 0x000000, "Member 'FortPartyBeaconClient_ServerAbandonExistingReservation::InSessionId' has a wrong offset!");
static_assert(offsetof(FortPartyBeaconClient_ServerAbandonExistingReservation, RequestingPlayer) == 0x000010, "Member 'FortPartyBeaconClient_ServerAbandonExistingReservation::RequestingPlayer' has a wrong offset!");

// Function FortniteGame.FortPartyBeaconClient.ServerEmptyServerReservationRequest
// 0x00A8 (0x00A8 - 0x0000)
struct FortPartyBeaconClient_ServerEmptyServerReservationRequest final
{
public:
	class FString                                 InSessionId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEmptyServerReservation                ReservationData;                                   // 0x0010(0x0058)(ConstParm, Parm, NativeAccessSpecifierPublic)
	struct FPartyReservation                      Reservation;                                       // 0x0068(0x0040)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyBeaconClient_ServerEmptyServerReservationRequest) == 0x000008, "Wrong alignment on FortPartyBeaconClient_ServerEmptyServerReservationRequest");
static_assert(sizeof(FortPartyBeaconClient_ServerEmptyServerReservationRequest) == 0x0000A8, "Wrong size on FortPartyBeaconClient_ServerEmptyServerReservationRequest");
static_assert(offsetof(FortPartyBeaconClient_ServerEmptyServerReservationRequest, InSessionId) == 0x000000, "Member 'FortPartyBeaconClient_ServerEmptyServerReservationRequest::InSessionId' has a wrong offset!");
static_assert(offsetof(FortPartyBeaconClient_ServerEmptyServerReservationRequest, ReservationData) == 0x000010, "Member 'FortPartyBeaconClient_ServerEmptyServerReservationRequest::ReservationData' has a wrong offset!");
static_assert(offsetof(FortPartyBeaconClient_ServerEmptyServerReservationRequest, Reservation) == 0x000068, "Member 'FortPartyBeaconClient_ServerEmptyServerReservationRequest::Reservation' has a wrong offset!");

// Function FortniteGame.FortPartyBeaconClient.ServerReconnectExistingReservation
// 0x0038 (0x0038 - 0x0000)
struct FortPartyBeaconClient_ServerReconnectExistingReservation final
{
public:
	class FString                                 InSessionId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       RequestingPlayer;                                  // 0x0010(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyBeaconClient_ServerReconnectExistingReservation) == 0x000008, "Wrong alignment on FortPartyBeaconClient_ServerReconnectExistingReservation");
static_assert(sizeof(FortPartyBeaconClient_ServerReconnectExistingReservation) == 0x000038, "Wrong size on FortPartyBeaconClient_ServerReconnectExistingReservation");
static_assert(offsetof(FortPartyBeaconClient_ServerReconnectExistingReservation, InSessionId) == 0x000000, "Member 'FortPartyBeaconClient_ServerReconnectExistingReservation::InSessionId' has a wrong offset!");
static_assert(offsetof(FortPartyBeaconClient_ServerReconnectExistingReservation, RequestingPlayer) == 0x000010, "Member 'FortPartyBeaconClient_ServerReconnectExistingReservation::RequestingPlayer' has a wrong offset!");

// Function FortniteGame.FortPartyContext.IsValidNetID
// 0x0030 (0x0030 - 0x0000)
struct FortPartyContext_IsValidNetID final
{
public:
	struct FUniqueNetIdRepl                       UniqueNetID;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPartyContext_IsValidNetID) == 0x000008, "Wrong alignment on FortPartyContext_IsValidNetID");
static_assert(sizeof(FortPartyContext_IsValidNetID) == 0x000030, "Wrong size on FortPartyContext_IsValidNetID");
static_assert(offsetof(FortPartyContext_IsValidNetID, UniqueNetID) == 0x000000, "Member 'FortPartyContext_IsValidNetID::UniqueNetID' has a wrong offset!");
static_assert(offsetof(FortPartyContext_IsValidNetID, ReturnValue) == 0x000028, "Member 'FortPartyContext_IsValidNetID::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.AcceptFriendRequest
// 0x0028 (0x0028 - 0x0000)
struct FortPartyContext_AcceptFriendRequest final
{
public:
	struct FUniqueNetIdRepl                       PlayerID;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_AcceptFriendRequest) == 0x000008, "Wrong alignment on FortPartyContext_AcceptFriendRequest");
static_assert(sizeof(FortPartyContext_AcceptFriendRequest) == 0x000028, "Wrong size on FortPartyContext_AcceptFriendRequest");
static_assert(offsetof(FortPartyContext_AcceptFriendRequest, PlayerID) == 0x000000, "Member 'FortPartyContext_AcceptFriendRequest::PlayerID' has a wrong offset!");

// Function FortniteGame.FortPartyContext.CanBeInvitedNetID
// 0x0030 (0x0030 - 0x0000)
struct FortPartyContext_CanBeInvitedNetID final
{
public:
	struct FUniqueNetIdRepl                       PlayerID;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortPartyRestriction                         FailReason;                                        // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPartyContext_CanBeInvitedNetID) == 0x000008, "Wrong alignment on FortPartyContext_CanBeInvitedNetID");
static_assert(sizeof(FortPartyContext_CanBeInvitedNetID) == 0x000030, "Wrong size on FortPartyContext_CanBeInvitedNetID");
static_assert(offsetof(FortPartyContext_CanBeInvitedNetID, PlayerID) == 0x000000, "Member 'FortPartyContext_CanBeInvitedNetID::PlayerID' has a wrong offset!");
static_assert(offsetof(FortPartyContext_CanBeInvitedNetID, FailReason) == 0x000028, "Member 'FortPartyContext_CanBeInvitedNetID::FailReason' has a wrong offset!");
static_assert(offsetof(FortPartyContext_CanBeInvitedNetID, ReturnValue) == 0x000029, "Member 'FortPartyContext_CanBeInvitedNetID::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.CancelFriendRequest
// 0x0028 (0x0028 - 0x0000)
struct FortPartyContext_CancelFriendRequest final
{
public:
	struct FUniqueNetIdRepl                       PlayerID;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_CancelFriendRequest) == 0x000008, "Wrong alignment on FortPartyContext_CancelFriendRequest");
static_assert(sizeof(FortPartyContext_CancelFriendRequest) == 0x000028, "Wrong size on FortPartyContext_CancelFriendRequest");
static_assert(offsetof(FortPartyContext_CancelFriendRequest, PlayerID) == 0x000000, "Member 'FortPartyContext_CancelFriendRequest::PlayerID' has a wrong offset!");

// Function FortniteGame.FortPartyContext.GetActiveFriendsList
// 0x0010 (0x0010 - 0x0000)
struct FortPartyContext_GetActiveFriendsList final
{
public:
	TArray<class UFortSocialItem*>                OutActiveFriends;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_GetActiveFriendsList) == 0x000008, "Wrong alignment on FortPartyContext_GetActiveFriendsList");
static_assert(sizeof(FortPartyContext_GetActiveFriendsList) == 0x000010, "Wrong size on FortPartyContext_GetActiveFriendsList");
static_assert(offsetof(FortPartyContext_GetActiveFriendsList, OutActiveFriends) == 0x000000, "Member 'FortPartyContext_GetActiveFriendsList::OutActiveFriends' has a wrong offset!");

// Function FortniteGame.FortPartyContext.GetLocalTeamTeamMemberInfo
// 0x01B8 (0x01B8 - 0x0000)
struct FortPartyContext_GetLocalTeamTeamMemberInfo final
{
public:
	class AFortPlayerState*                       TeamMemberState;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortTeamMemberInfo                    TeamMemberInfo;                                    // 0x0008(0x01A8)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x01B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B1[0x7];                                      // 0x01B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPartyContext_GetLocalTeamTeamMemberInfo) == 0x000008, "Wrong alignment on FortPartyContext_GetLocalTeamTeamMemberInfo");
static_assert(sizeof(FortPartyContext_GetLocalTeamTeamMemberInfo) == 0x0001B8, "Wrong size on FortPartyContext_GetLocalTeamTeamMemberInfo");
static_assert(offsetof(FortPartyContext_GetLocalTeamTeamMemberInfo, TeamMemberState) == 0x000000, "Member 'FortPartyContext_GetLocalTeamTeamMemberInfo::TeamMemberState' has a wrong offset!");
static_assert(offsetof(FortPartyContext_GetLocalTeamTeamMemberInfo, TeamMemberInfo) == 0x000008, "Member 'FortPartyContext_GetLocalTeamTeamMemberInfo::TeamMemberInfo' has a wrong offset!");
static_assert(offsetof(FortPartyContext_GetLocalTeamTeamMemberInfo, ReturnValue) == 0x0001B0, "Member 'FortPartyContext_GetLocalTeamTeamMemberInfo::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.GetPartyInvites
// 0x0010 (0x0010 - 0x0000)
struct FortPartyContext_GetPartyInvites final
{
public:
	TArray<class UFortSocialItem*>                OutPartyInvites;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_GetPartyInvites) == 0x000008, "Wrong alignment on FortPartyContext_GetPartyInvites");
static_assert(sizeof(FortPartyContext_GetPartyInvites) == 0x000010, "Wrong size on FortPartyContext_GetPartyInvites");
static_assert(offsetof(FortPartyContext_GetPartyInvites, OutPartyInvites) == 0x000000, "Member 'FortPartyContext_GetPartyInvites::OutPartyInvites' has a wrong offset!");

// Function FortniteGame.FortPartyContext.GetPartyPrivacySetting
// 0x0004 (0x0004 - 0x0000)
struct FortPartyContext_GetPartyPrivacySetting final
{
public:
	EPartyType                                    OutPartyType;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutLeaderFriendsOnly;                              // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutLeaderInvitesOnly;                              // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_GetPartyPrivacySetting) == 0x000001, "Wrong alignment on FortPartyContext_GetPartyPrivacySetting");
static_assert(sizeof(FortPartyContext_GetPartyPrivacySetting) == 0x000004, "Wrong size on FortPartyContext_GetPartyPrivacySetting");
static_assert(offsetof(FortPartyContext_GetPartyPrivacySetting, OutPartyType) == 0x000000, "Member 'FortPartyContext_GetPartyPrivacySetting::OutPartyType' has a wrong offset!");
static_assert(offsetof(FortPartyContext_GetPartyPrivacySetting, OutLeaderFriendsOnly) == 0x000001, "Member 'FortPartyContext_GetPartyPrivacySetting::OutLeaderFriendsOnly' has a wrong offset!");
static_assert(offsetof(FortPartyContext_GetPartyPrivacySetting, OutLeaderInvitesOnly) == 0x000002, "Member 'FortPartyContext_GetPartyPrivacySetting::OutLeaderInvitesOnly' has a wrong offset!");
static_assert(offsetof(FortPartyContext_GetPartyPrivacySetting, ReturnValue) == 0x000003, "Member 'FortPartyContext_GetPartyPrivacySetting::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.GetSocialItemCategories
// 0x0010 (0x0010 - 0x0000)
struct FortPartyContext_GetSocialItemCategories final
{
public:
	TArray<class UFortSocialItem*>                OutSocialCategoryItems;                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_GetSocialItemCategories) == 0x000008, "Wrong alignment on FortPartyContext_GetSocialItemCategories");
static_assert(sizeof(FortPartyContext_GetSocialItemCategories) == 0x000010, "Wrong size on FortPartyContext_GetSocialItemCategories");
static_assert(offsetof(FortPartyContext_GetSocialItemCategories, OutSocialCategoryItems) == 0x000000, "Member 'FortPartyContext_GetSocialItemCategories::OutSocialCategoryItems' has a wrong offset!");

// Function FortniteGame.FortPartyContext.GetSocialItemList
// 0x0010 (0x0010 - 0x0000)
struct FortPartyContext_GetSocialItemList final
{
public:
	TArray<class UFortSocialItem*>                OutSocialItems;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_GetSocialItemList) == 0x000008, "Wrong alignment on FortPartyContext_GetSocialItemList");
static_assert(sizeof(FortPartyContext_GetSocialItemList) == 0x000010, "Wrong size on FortPartyContext_GetSocialItemList");
static_assert(offsetof(FortPartyContext_GetSocialItemList, OutSocialItems) == 0x000000, "Member 'FortPartyContext_GetSocialItemList::OutSocialItems' has a wrong offset!");

// Function FortniteGame.FortPartyContext.GetTeamInfo
// 0x0010 (0x0010 - 0x0000)
struct FortPartyContext_GetTeamInfo final
{
public:
	EFortTeam                                     Team;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortUITeamInfo*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_GetTeamInfo) == 0x000008, "Wrong alignment on FortPartyContext_GetTeamInfo");
static_assert(sizeof(FortPartyContext_GetTeamInfo) == 0x000010, "Wrong size on FortPartyContext_GetTeamInfo");
static_assert(offsetof(FortPartyContext_GetTeamInfo, Team) == 0x000000, "Member 'FortPartyContext_GetTeamInfo::Team' has a wrong offset!");
static_assert(offsetof(FortPartyContext_GetTeamInfo, ReturnValue) == 0x000008, "Member 'FortPartyContext_GetTeamInfo::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.JoinParty
// 0x0010 (0x0010 - 0x0000)
struct FortPartyContext_JoinParty final
{
public:
	class UFortSocialItem*                        PartyItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRetrying;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPartyContext_JoinParty) == 0x000008, "Wrong alignment on FortPartyContext_JoinParty");
static_assert(sizeof(FortPartyContext_JoinParty) == 0x000010, "Wrong size on FortPartyContext_JoinParty");
static_assert(offsetof(FortPartyContext_JoinParty, PartyItem) == 0x000000, "Member 'FortPartyContext_JoinParty::PartyItem' has a wrong offset!");
static_assert(offsetof(FortPartyContext_JoinParty, bIsRetrying) == 0x000008, "Member 'FortPartyContext_JoinParty::bIsRetrying' has a wrong offset!");

// Function FortniteGame.FortPartyContext.KickPartyMember
// 0x0028 (0x0028 - 0x0000)
struct FortPartyContext_KickPartyMember final
{
public:
	struct FUniqueNetIdRepl                       PartyMemberId;                                     // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_KickPartyMember) == 0x000008, "Wrong alignment on FortPartyContext_KickPartyMember");
static_assert(sizeof(FortPartyContext_KickPartyMember) == 0x000028, "Wrong size on FortPartyContext_KickPartyMember");
static_assert(offsetof(FortPartyContext_KickPartyMember, PartyMemberId) == 0x000000, "Member 'FortPartyContext_KickPartyMember::PartyMemberId' has a wrong offset!");

// Function FortniteGame.FortPartyContext.MutePartyMember
// 0x0028 (0x0028 - 0x0000)
struct FortPartyContext_MutePartyMember final
{
public:
	struct FUniqueNetIdRepl                       PartyMemberId;                                     // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_MutePartyMember) == 0x000008, "Wrong alignment on FortPartyContext_MutePartyMember");
static_assert(sizeof(FortPartyContext_MutePartyMember) == 0x000028, "Wrong size on FortPartyContext_MutePartyMember");
static_assert(offsetof(FortPartyContext_MutePartyMember, PartyMemberId) == 0x000000, "Member 'FortPartyContext_MutePartyMember::PartyMemberId' has a wrong offset!");

// DelegateFunction FortniteGame.FortPartyContext.OnAthenaReadyStateChanged__DelegateSignature
// 0x0030 (0x0030 - 0x0000)
struct FortPartyContext_OnAthenaReadyStateChanged__DelegateSignature final
{
public:
	struct FUniqueNetIdRepl                       UniqueId;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReady;                                            // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPartyContext_OnAthenaReadyStateChanged__DelegateSignature) == 0x000008, "Wrong alignment on FortPartyContext_OnAthenaReadyStateChanged__DelegateSignature");
static_assert(sizeof(FortPartyContext_OnAthenaReadyStateChanged__DelegateSignature) == 0x000030, "Wrong size on FortPartyContext_OnAthenaReadyStateChanged__DelegateSignature");
static_assert(offsetof(FortPartyContext_OnAthenaReadyStateChanged__DelegateSignature, UniqueId) == 0x000000, "Member 'FortPartyContext_OnAthenaReadyStateChanged__DelegateSignature::UniqueId' has a wrong offset!");
static_assert(offsetof(FortPartyContext_OnAthenaReadyStateChanged__DelegateSignature, bReady) == 0x000028, "Member 'FortPartyContext_OnAthenaReadyStateChanged__DelegateSignature::bReady' has a wrong offset!");

// DelegateFunction FortniteGame.FortPartyContext.OnClientPartyStateChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct FortPartyContext_OnClientPartyStateChanged__DelegateSignature final
{
public:
	EFortPartyState                               PartyState;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_OnClientPartyStateChanged__DelegateSignature) == 0x000001, "Wrong alignment on FortPartyContext_OnClientPartyStateChanged__DelegateSignature");
static_assert(sizeof(FortPartyContext_OnClientPartyStateChanged__DelegateSignature) == 0x000001, "Wrong size on FortPartyContext_OnClientPartyStateChanged__DelegateSignature");
static_assert(offsetof(FortPartyContext_OnClientPartyStateChanged__DelegateSignature, PartyState) == 0x000000, "Member 'FortPartyContext_OnClientPartyStateChanged__DelegateSignature::PartyState' has a wrong offset!");

// DelegateFunction FortniteGame.FortPartyContext.OnClientPlaylistChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct FortPartyContext_OnClientPlaylistChanged__DelegateSignature final
{
public:
	EFortAthenaPlaylist                           PlaylistChanged;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_OnClientPlaylistChanged__DelegateSignature) == 0x000001, "Wrong alignment on FortPartyContext_OnClientPlaylistChanged__DelegateSignature");
static_assert(sizeof(FortPartyContext_OnClientPlaylistChanged__DelegateSignature) == 0x000001, "Wrong size on FortPartyContext_OnClientPlaylistChanged__DelegateSignature");
static_assert(offsetof(FortPartyContext_OnClientPlaylistChanged__DelegateSignature, PlaylistChanged) == 0x000000, "Member 'FortPartyContext_OnClientPlaylistChanged__DelegateSignature::PlaylistChanged' has a wrong offset!");

// DelegateFunction FortniteGame.FortPartyContext.OnClientSquadFillChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct FortPartyContext_OnClientSquadFillChanged__DelegateSignature final
{
public:
	bool                                          bSquadFill;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_OnClientSquadFillChanged__DelegateSignature) == 0x000001, "Wrong alignment on FortPartyContext_OnClientSquadFillChanged__DelegateSignature");
static_assert(sizeof(FortPartyContext_OnClientSquadFillChanged__DelegateSignature) == 0x000001, "Wrong size on FortPartyContext_OnClientSquadFillChanged__DelegateSignature");
static_assert(offsetof(FortPartyContext_OnClientSquadFillChanged__DelegateSignature, bSquadFill) == 0x000000, "Member 'FortPartyContext_OnClientSquadFillChanged__DelegateSignature::bSquadFill' has a wrong offset!");

// DelegateFunction FortniteGame.FortPartyContext.OnFriendPresenceUpdated__DelegateSignature
// 0x0028 (0x0028 - 0x0000)
struct FortPartyContext_OnFriendPresenceUpdated__DelegateSignature final
{
public:
	struct FUniqueNetIdRepl                       FriendId;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_OnFriendPresenceUpdated__DelegateSignature) == 0x000008, "Wrong alignment on FortPartyContext_OnFriendPresenceUpdated__DelegateSignature");
static_assert(sizeof(FortPartyContext_OnFriendPresenceUpdated__DelegateSignature) == 0x000028, "Wrong size on FortPartyContext_OnFriendPresenceUpdated__DelegateSignature");
static_assert(offsetof(FortPartyContext_OnFriendPresenceUpdated__DelegateSignature, FriendId) == 0x000000, "Member 'FortPartyContext_OnFriendPresenceUpdated__DelegateSignature::FriendId' has a wrong offset!");

// DelegateFunction FortniteGame.FortPartyContext.OnFriendsChangedDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct FortPartyContext_OnFriendsChangedDelegate__DelegateSignature final
{
public:
	TArray<class UFortSocialItem*>                ActiveFriends;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_OnFriendsChangedDelegate__DelegateSignature) == 0x000008, "Wrong alignment on FortPartyContext_OnFriendsChangedDelegate__DelegateSignature");
static_assert(sizeof(FortPartyContext_OnFriendsChangedDelegate__DelegateSignature) == 0x000010, "Wrong size on FortPartyContext_OnFriendsChangedDelegate__DelegateSignature");
static_assert(offsetof(FortPartyContext_OnFriendsChangedDelegate__DelegateSignature, ActiveFriends) == 0x000000, "Member 'FortPartyContext_OnFriendsChangedDelegate__DelegateSignature::ActiveFriends' has a wrong offset!");

// DelegateFunction FortniteGame.FortPartyContext.OnFriendsCountChangedDelegate__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct FortPartyContext_OnFriendsCountChangedDelegate__DelegateSignature final
{
public:
	int32                                         ActiveFriendsCount;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_OnFriendsCountChangedDelegate__DelegateSignature) == 0x000004, "Wrong alignment on FortPartyContext_OnFriendsCountChangedDelegate__DelegateSignature");
static_assert(sizeof(FortPartyContext_OnFriendsCountChangedDelegate__DelegateSignature) == 0x000004, "Wrong size on FortPartyContext_OnFriendsCountChangedDelegate__DelegateSignature");
static_assert(offsetof(FortPartyContext_OnFriendsCountChangedDelegate__DelegateSignature, ActiveFriendsCount) == 0x000000, "Member 'FortPartyContext_OnFriendsCountChangedDelegate__DelegateSignature::ActiveFriendsCount' has a wrong offset!");

// DelegateFunction FortniteGame.FortPartyContext.OnLeaderFriendsOnlyChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct FortPartyContext_OnLeaderFriendsOnlyChanged__DelegateSignature final
{
public:
	bool                                          bLeaderFriendsOnly;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_OnLeaderFriendsOnlyChanged__DelegateSignature) == 0x000001, "Wrong alignment on FortPartyContext_OnLeaderFriendsOnlyChanged__DelegateSignature");
static_assert(sizeof(FortPartyContext_OnLeaderFriendsOnlyChanged__DelegateSignature) == 0x000001, "Wrong size on FortPartyContext_OnLeaderFriendsOnlyChanged__DelegateSignature");
static_assert(offsetof(FortPartyContext_OnLeaderFriendsOnlyChanged__DelegateSignature, bLeaderFriendsOnly) == 0x000000, "Member 'FortPartyContext_OnLeaderFriendsOnlyChanged__DelegateSignature::bLeaderFriendsOnly' has a wrong offset!");

// DelegateFunction FortniteGame.FortPartyContext.OnLeaderInvitesOnlyChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct FortPartyContext_OnLeaderInvitesOnlyChanged__DelegateSignature final
{
public:
	bool                                          bLeaderInviteOnly;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_OnLeaderInvitesOnlyChanged__DelegateSignature) == 0x000001, "Wrong alignment on FortPartyContext_OnLeaderInvitesOnlyChanged__DelegateSignature");
static_assert(sizeof(FortPartyContext_OnLeaderInvitesOnlyChanged__DelegateSignature) == 0x000001, "Wrong size on FortPartyContext_OnLeaderInvitesOnlyChanged__DelegateSignature");
static_assert(offsetof(FortPartyContext_OnLeaderInvitesOnlyChanged__DelegateSignature, bLeaderInviteOnly) == 0x000000, "Member 'FortPartyContext_OnLeaderInvitesOnlyChanged__DelegateSignature::bLeaderInviteOnly' has a wrong offset!");

// DelegateFunction FortniteGame.FortPartyContext.OnPartyDataChanged__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct FortPartyContext_OnPartyDataChanged__DelegateSignature final
{
public:
	struct FPartyState                            PartyData;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_OnPartyDataChanged__DelegateSignature) == 0x000008, "Wrong alignment on FortPartyContext_OnPartyDataChanged__DelegateSignature");
static_assert(sizeof(FortPartyContext_OnPartyDataChanged__DelegateSignature) == 0x000010, "Wrong size on FortPartyContext_OnPartyDataChanged__DelegateSignature");
static_assert(offsetof(FortPartyContext_OnPartyDataChanged__DelegateSignature, PartyData) == 0x000000, "Member 'FortPartyContext_OnPartyDataChanged__DelegateSignature::PartyData' has a wrong offset!");

// DelegateFunction FortniteGame.FortPartyContext.OnPartyInvitesCountUpdatedDelegate__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct FortPartyContext_OnPartyInvitesCountUpdatedDelegate__DelegateSignature final
{
public:
	int32                                         PartyInvitesCount;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_OnPartyInvitesCountUpdatedDelegate__DelegateSignature) == 0x000004, "Wrong alignment on FortPartyContext_OnPartyInvitesCountUpdatedDelegate__DelegateSignature");
static_assert(sizeof(FortPartyContext_OnPartyInvitesCountUpdatedDelegate__DelegateSignature) == 0x000004, "Wrong size on FortPartyContext_OnPartyInvitesCountUpdatedDelegate__DelegateSignature");
static_assert(offsetof(FortPartyContext_OnPartyInvitesCountUpdatedDelegate__DelegateSignature, PartyInvitesCount) == 0x000000, "Member 'FortPartyContext_OnPartyInvitesCountUpdatedDelegate__DelegateSignature::PartyInvitesCount' has a wrong offset!");

// DelegateFunction FortniteGame.FortPartyContext.OnPartyInvitesUpdatedDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct FortPartyContext_OnPartyInvitesUpdatedDelegate__DelegateSignature final
{
public:
	TArray<class UFortSocialItem*>                ActiveFriends;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_OnPartyInvitesUpdatedDelegate__DelegateSignature) == 0x000008, "Wrong alignment on FortPartyContext_OnPartyInvitesUpdatedDelegate__DelegateSignature");
static_assert(sizeof(FortPartyContext_OnPartyInvitesUpdatedDelegate__DelegateSignature) == 0x000010, "Wrong size on FortPartyContext_OnPartyInvitesUpdatedDelegate__DelegateSignature");
static_assert(offsetof(FortPartyContext_OnPartyInvitesUpdatedDelegate__DelegateSignature, ActiveFriends) == 0x000000, "Member 'FortPartyContext_OnPartyInvitesUpdatedDelegate__DelegateSignature::ActiveFriends' has a wrong offset!");

// DelegateFunction FortniteGame.FortPartyContext.OnPartyTransitionCompleteDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct FortPartyContext_OnPartyTransitionCompleteDelegate__DelegateSignature final
{
public:
	EFortPartyTransition                          PartyTransition;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_OnPartyTransitionCompleteDelegate__DelegateSignature) == 0x000001, "Wrong alignment on FortPartyContext_OnPartyTransitionCompleteDelegate__DelegateSignature");
static_assert(sizeof(FortPartyContext_OnPartyTransitionCompleteDelegate__DelegateSignature) == 0x000001, "Wrong size on FortPartyContext_OnPartyTransitionCompleteDelegate__DelegateSignature");
static_assert(offsetof(FortPartyContext_OnPartyTransitionCompleteDelegate__DelegateSignature, PartyTransition) == 0x000000, "Member 'FortPartyContext_OnPartyTransitionCompleteDelegate__DelegateSignature::PartyTransition' has a wrong offset!");

// DelegateFunction FortniteGame.FortPartyContext.OnPartyTransitionStartedDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct FortPartyContext_OnPartyTransitionStartedDelegate__DelegateSignature final
{
public:
	EFortPartyTransition                          PartyTransition;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_OnPartyTransitionStartedDelegate__DelegateSignature) == 0x000001, "Wrong alignment on FortPartyContext_OnPartyTransitionStartedDelegate__DelegateSignature");
static_assert(sizeof(FortPartyContext_OnPartyTransitionStartedDelegate__DelegateSignature) == 0x000001, "Wrong size on FortPartyContext_OnPartyTransitionStartedDelegate__DelegateSignature");
static_assert(offsetof(FortPartyContext_OnPartyTransitionStartedDelegate__DelegateSignature, PartyTransition) == 0x000000, "Member 'FortPartyContext_OnPartyTransitionStartedDelegate__DelegateSignature::PartyTransition' has a wrong offset!");

// DelegateFunction FortniteGame.FortPartyContext.OnPartyTypeChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct FortPartyContext_OnPartyTypeChanged__DelegateSignature final
{
public:
	EPartyType                                    PartyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_OnPartyTypeChanged__DelegateSignature) == 0x000001, "Wrong alignment on FortPartyContext_OnPartyTypeChanged__DelegateSignature");
static_assert(sizeof(FortPartyContext_OnPartyTypeChanged__DelegateSignature) == 0x000001, "Wrong size on FortPartyContext_OnPartyTypeChanged__DelegateSignature");
static_assert(offsetof(FortPartyContext_OnPartyTypeChanged__DelegateSignature, PartyType) == 0x000000, "Member 'FortPartyContext_OnPartyTypeChanged__DelegateSignature::PartyType' has a wrong offset!");

// DelegateFunction FortniteGame.FortPartyContext.OnPlayerStateChangedDelegate__DelegateSignature
// 0x01A8 (0x01A8 - 0x0000)
struct FortPartyContext_OnPlayerStateChangedDelegate__DelegateSignature final
{
public:
	struct FFortTeamMemberInfo                    PlayerInfo;                                        // 0x0000(0x01A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_OnPlayerStateChangedDelegate__DelegateSignature) == 0x000008, "Wrong alignment on FortPartyContext_OnPlayerStateChangedDelegate__DelegateSignature");
static_assert(sizeof(FortPartyContext_OnPlayerStateChangedDelegate__DelegateSignature) == 0x0001A8, "Wrong size on FortPartyContext_OnPlayerStateChangedDelegate__DelegateSignature");
static_assert(offsetof(FortPartyContext_OnPlayerStateChangedDelegate__DelegateSignature, PlayerInfo) == 0x000000, "Member 'FortPartyContext_OnPlayerStateChangedDelegate__DelegateSignature::PlayerInfo' has a wrong offset!");

// DelegateFunction FortniteGame.FortPartyContext.OnSocialListChangedDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct FortPartyContext_OnSocialListChangedDelegate__DelegateSignature final
{
public:
	TArray<class UFortSocialItem*>                SocialItems;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_OnSocialListChangedDelegate__DelegateSignature) == 0x000008, "Wrong alignment on FortPartyContext_OnSocialListChangedDelegate__DelegateSignature");
static_assert(sizeof(FortPartyContext_OnSocialListChangedDelegate__DelegateSignature) == 0x000010, "Wrong size on FortPartyContext_OnSocialListChangedDelegate__DelegateSignature");
static_assert(offsetof(FortPartyContext_OnSocialListChangedDelegate__DelegateSignature, SocialItems) == 0x000000, "Member 'FortPartyContext_OnSocialListChangedDelegate__DelegateSignature::SocialItems' has a wrong offset!");

// Function FortniteGame.FortPartyContext.PromotePartyMemberToLeader
// 0x0028 (0x0028 - 0x0000)
struct FortPartyContext_PromotePartyMemberToLeader final
{
public:
	struct FUniqueNetIdRepl                       PartyMemberId;                                     // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_PromotePartyMemberToLeader) == 0x000008, "Wrong alignment on FortPartyContext_PromotePartyMemberToLeader");
static_assert(sizeof(FortPartyContext_PromotePartyMemberToLeader) == 0x000028, "Wrong size on FortPartyContext_PromotePartyMemberToLeader");
static_assert(offsetof(FortPartyContext_PromotePartyMemberToLeader, PartyMemberId) == 0x000000, "Member 'FortPartyContext_PromotePartyMemberToLeader::PartyMemberId' has a wrong offset!");

// Function FortniteGame.FortPartyContext.RejectFriendRequest
// 0x0028 (0x0028 - 0x0000)
struct FortPartyContext_RejectFriendRequest final
{
public:
	struct FUniqueNetIdRepl                       PlayerID;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_RejectFriendRequest) == 0x000008, "Wrong alignment on FortPartyContext_RejectFriendRequest");
static_assert(sizeof(FortPartyContext_RejectFriendRequest) == 0x000028, "Wrong size on FortPartyContext_RejectFriendRequest");
static_assert(offsetof(FortPartyContext_RejectFriendRequest, PlayerID) == 0x000000, "Member 'FortPartyContext_RejectFriendRequest::PlayerID' has a wrong offset!");

// Function FortniteGame.FortPartyContext.RejectPartyInvite
// 0x0008 (0x0008 - 0x0000)
struct FortPartyContext_RejectPartyInvite final
{
public:
	class UFortSocialItem*                        PartyInvite;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_RejectPartyInvite) == 0x000008, "Wrong alignment on FortPartyContext_RejectPartyInvite");
static_assert(sizeof(FortPartyContext_RejectPartyInvite) == 0x000008, "Wrong size on FortPartyContext_RejectPartyInvite");
static_assert(offsetof(FortPartyContext_RejectPartyInvite, PartyInvite) == 0x000000, "Member 'FortPartyContext_RejectPartyInvite::PartyInvite' has a wrong offset!");

// Function FortniteGame.FortPartyContext.SendFriendRequest
// 0x0028 (0x0028 - 0x0000)
struct FortPartyContext_SendFriendRequest final
{
public:
	struct FUniqueNetIdRepl                       PlayerID;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_SendFriendRequest) == 0x000008, "Wrong alignment on FortPartyContext_SendFriendRequest");
static_assert(sizeof(FortPartyContext_SendFriendRequest) == 0x000028, "Wrong size on FortPartyContext_SendFriendRequest");
static_assert(offsetof(FortPartyContext_SendFriendRequest, PlayerID) == 0x000000, "Member 'FortPartyContext_SendFriendRequest::PlayerID' has a wrong offset!");

// Function FortniteGame.FortPartyContext.SendPartyInvite
// 0x0008 (0x0008 - 0x0000)
struct FortPartyContext_SendPartyInvite final
{
public:
	class UFortSocialItem*                        SocialItem;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_SendPartyInvite) == 0x000008, "Wrong alignment on FortPartyContext_SendPartyInvite");
static_assert(sizeof(FortPartyContext_SendPartyInvite) == 0x000008, "Wrong size on FortPartyContext_SendPartyInvite");
static_assert(offsetof(FortPartyContext_SendPartyInvite, SocialItem) == 0x000000, "Member 'FortPartyContext_SendPartyInvite::SocialItem' has a wrong offset!");

// Function FortniteGame.FortPartyContext.SendPartyInviteNetID
// 0x0028 (0x0028 - 0x0000)
struct FortPartyContext_SendPartyInviteNetID final
{
public:
	struct FUniqueNetIdRepl                       PlayerID;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_SendPartyInviteNetID) == 0x000008, "Wrong alignment on FortPartyContext_SendPartyInviteNetID");
static_assert(sizeof(FortPartyContext_SendPartyInviteNetID) == 0x000028, "Wrong size on FortPartyContext_SendPartyInviteNetID");
static_assert(offsetof(FortPartyContext_SendPartyInviteNetID, PlayerID) == 0x000000, "Member 'FortPartyContext_SendPartyInviteNetID::PlayerID' has a wrong offset!");

// Function FortniteGame.FortPartyContext.SetChatWhisperTarget
// 0x0028 (0x0028 - 0x0000)
struct FortPartyContext_SetChatWhisperTarget final
{
public:
	struct FUniqueNetIdRepl                       FriendId;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_SetChatWhisperTarget) == 0x000008, "Wrong alignment on FortPartyContext_SetChatWhisperTarget");
static_assert(sizeof(FortPartyContext_SetChatWhisperTarget) == 0x000028, "Wrong size on FortPartyContext_SetChatWhisperTarget");
static_assert(offsetof(FortPartyContext_SetChatWhisperTarget, FriendId) == 0x000000, "Member 'FortPartyContext_SetChatWhisperTarget::FriendId' has a wrong offset!");

// Function FortniteGame.FortPartyContext.SetFriendInvitesEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortPartyContext_SetFriendInvitesEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_SetFriendInvitesEnabled) == 0x000001, "Wrong alignment on FortPartyContext_SetFriendInvitesEnabled");
static_assert(sizeof(FortPartyContext_SetFriendInvitesEnabled) == 0x000001, "Wrong size on FortPartyContext_SetFriendInvitesEnabled");
static_assert(offsetof(FortPartyContext_SetFriendInvitesEnabled, bEnabled) == 0x000000, "Member 'FortPartyContext_SetFriendInvitesEnabled::bEnabled' has a wrong offset!");

// Function FortniteGame.FortPartyContext.SetLocalPartyMemberLocation
// 0x0001 (0x0001 - 0x0000)
struct FortPartyContext_SetLocalPartyMemberLocation final
{
public:
	EFortPartyMemberLocation                      Location;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_SetLocalPartyMemberLocation) == 0x000001, "Wrong alignment on FortPartyContext_SetLocalPartyMemberLocation");
static_assert(sizeof(FortPartyContext_SetLocalPartyMemberLocation) == 0x000001, "Wrong size on FortPartyContext_SetLocalPartyMemberLocation");
static_assert(offsetof(FortPartyContext_SetLocalPartyMemberLocation, Location) == 0x000000, "Member 'FortPartyContext_SetLocalPartyMemberLocation::Location' has a wrong offset!");

// Function FortniteGame.FortPartyContext.SetPartyInvitesEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortPartyContext_SetPartyInvitesEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_SetPartyInvitesEnabled) == 0x000001, "Wrong alignment on FortPartyContext_SetPartyInvitesEnabled");
static_assert(sizeof(FortPartyContext_SetPartyInvitesEnabled) == 0x000001, "Wrong size on FortPartyContext_SetPartyInvitesEnabled");
static_assert(offsetof(FortPartyContext_SetPartyInvitesEnabled, bEnabled) == 0x000000, "Member 'FortPartyContext_SetPartyInvitesEnabled::bEnabled' has a wrong offset!");

// Function FortniteGame.FortPartyContext.SetPartyPrivacySetting
// 0x0003 (0x0003 - 0x0000)
struct FortPartyContext_SetPartyPrivacySetting final
{
public:
	EPartyType                                    PartyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeaderFriendsOnly;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeaderInvitesOnly;                                // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_SetPartyPrivacySetting) == 0x000001, "Wrong alignment on FortPartyContext_SetPartyPrivacySetting");
static_assert(sizeof(FortPartyContext_SetPartyPrivacySetting) == 0x000003, "Wrong size on FortPartyContext_SetPartyPrivacySetting");
static_assert(offsetof(FortPartyContext_SetPartyPrivacySetting, PartyType) == 0x000000, "Member 'FortPartyContext_SetPartyPrivacySetting::PartyType' has a wrong offset!");
static_assert(offsetof(FortPartyContext_SetPartyPrivacySetting, bLeaderFriendsOnly) == 0x000001, "Member 'FortPartyContext_SetPartyPrivacySetting::bLeaderFriendsOnly' has a wrong offset!");
static_assert(offsetof(FortPartyContext_SetPartyPrivacySetting, bLeaderInvitesOnly) == 0x000002, "Member 'FortPartyContext_SetPartyPrivacySetting::bLeaderInvitesOnly' has a wrong offset!");

// Function FortniteGame.FortPartyContext.SetPartyProgression
// 0x0001 (0x0001 - 0x0000)
struct FortPartyContext_SetPartyProgression final
{
public:
	EFortPartyState                               NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_SetPartyProgression) == 0x000001, "Wrong alignment on FortPartyContext_SetPartyProgression");
static_assert(sizeof(FortPartyContext_SetPartyProgression) == 0x000001, "Wrong size on FortPartyContext_SetPartyProgression");
static_assert(offsetof(FortPartyContext_SetPartyProgression, NewState) == 0x000000, "Member 'FortPartyContext_SetPartyProgression::NewState' has a wrong offset!");

// Function FortniteGame.FortPartyContext.ShowExternalProfile
// 0x0028 (0x0028 - 0x0000)
struct FortPartyContext_ShowExternalProfile final
{
public:
	struct FUniqueNetIdRepl                       ProfileToShow;                                     // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_ShowExternalProfile) == 0x000008, "Wrong alignment on FortPartyContext_ShowExternalProfile");
static_assert(sizeof(FortPartyContext_ShowExternalProfile) == 0x000028, "Wrong size on FortPartyContext_ShowExternalProfile");
static_assert(offsetof(FortPartyContext_ShowExternalProfile, ProfileToShow) == 0x000000, "Member 'FortPartyContext_ShowExternalProfile::ProfileToShow' has a wrong offset!");

// Function FortniteGame.FortPartyContext.UnmutePartyMember
// 0x0028 (0x0028 - 0x0000)
struct FortPartyContext_UnmutePartyMember final
{
public:
	struct FUniqueNetIdRepl                       PartyMemberId;                                     // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_UnmutePartyMember) == 0x000008, "Wrong alignment on FortPartyContext_UnmutePartyMember");
static_assert(sizeof(FortPartyContext_UnmutePartyMember) == 0x000028, "Wrong size on FortPartyContext_UnmutePartyMember");
static_assert(offsetof(FortPartyContext_UnmutePartyMember, PartyMemberId) == 0x000000, "Member 'FortPartyContext_UnmutePartyMember::PartyMemberId' has a wrong offset!");

// Function FortniteGame.FortPartyContext.CanBeInvited
// 0x0010 (0x0010 - 0x0000)
struct FortPartyContext_CanBeInvited final
{
public:
	class UFortSocialItem*                        SocialItem;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortPartyRestriction                         FailReason;                                        // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPartyContext_CanBeInvited) == 0x000008, "Wrong alignment on FortPartyContext_CanBeInvited");
static_assert(sizeof(FortPartyContext_CanBeInvited) == 0x000010, "Wrong size on FortPartyContext_CanBeInvited");
static_assert(offsetof(FortPartyContext_CanBeInvited, SocialItem) == 0x000000, "Member 'FortPartyContext_CanBeInvited::SocialItem' has a wrong offset!");
static_assert(offsetof(FortPartyContext_CanBeInvited, FailReason) == 0x000008, "Member 'FortPartyContext_CanBeInvited::FailReason' has a wrong offset!");
static_assert(offsetof(FortPartyContext_CanBeInvited, ReturnValue) == 0x000009, "Member 'FortPartyContext_CanBeInvited::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.CanBeJoined
// 0x0010 (0x0010 - 0x0000)
struct FortPartyContext_CanBeJoined final
{
public:
	class UFortSocialItem*                        SocialItem;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortPartyRestriction                         FailReason;                                        // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPartyContext_CanBeJoined) == 0x000008, "Wrong alignment on FortPartyContext_CanBeJoined");
static_assert(sizeof(FortPartyContext_CanBeJoined) == 0x000010, "Wrong size on FortPartyContext_CanBeJoined");
static_assert(offsetof(FortPartyContext_CanBeJoined, SocialItem) == 0x000000, "Member 'FortPartyContext_CanBeJoined::SocialItem' has a wrong offset!");
static_assert(offsetof(FortPartyContext_CanBeJoined, FailReason) == 0x000008, "Member 'FortPartyContext_CanBeJoined::FailReason' has a wrong offset!");
static_assert(offsetof(FortPartyContext_CanBeJoined, ReturnValue) == 0x000009, "Member 'FortPartyContext_CanBeJoined::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.CanShowExternalProfile
// 0x0001 (0x0001 - 0x0000)
struct FortPartyContext_CanShowExternalProfile final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_CanShowExternalProfile) == 0x000001, "Wrong alignment on FortPartyContext_CanShowExternalProfile");
static_assert(sizeof(FortPartyContext_CanShowExternalProfile) == 0x000001, "Wrong size on FortPartyContext_CanShowExternalProfile");
static_assert(offsetof(FortPartyContext_CanShowExternalProfile, ReturnValue) == 0x000000, "Member 'FortPartyContext_CanShowExternalProfile::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.GetConsoleFriendRichPresenceText
// 0x0048 (0x0048 - 0x0000)
struct FortPartyContext_GetConsoleFriendRichPresenceText final
{
public:
	struct FUniqueNetIdRepl                       FriendId;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   RichPresenceText;                                  // 0x0028(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPartyContext_GetConsoleFriendRichPresenceText) == 0x000008, "Wrong alignment on FortPartyContext_GetConsoleFriendRichPresenceText");
static_assert(sizeof(FortPartyContext_GetConsoleFriendRichPresenceText) == 0x000048, "Wrong size on FortPartyContext_GetConsoleFriendRichPresenceText");
static_assert(offsetof(FortPartyContext_GetConsoleFriendRichPresenceText, FriendId) == 0x000000, "Member 'FortPartyContext_GetConsoleFriendRichPresenceText::FriendId' has a wrong offset!");
static_assert(offsetof(FortPartyContext_GetConsoleFriendRichPresenceText, RichPresenceText) == 0x000028, "Member 'FortPartyContext_GetConsoleFriendRichPresenceText::RichPresenceText' has a wrong offset!");
static_assert(offsetof(FortPartyContext_GetConsoleFriendRichPresenceText, ReturnValue) == 0x000040, "Member 'FortPartyContext_GetConsoleFriendRichPresenceText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.GetCurrentPartyMaxSize
// 0x0004 (0x0004 - 0x0000)
struct FortPartyContext_GetCurrentPartyMaxSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_GetCurrentPartyMaxSize) == 0x000004, "Wrong alignment on FortPartyContext_GetCurrentPartyMaxSize");
static_assert(sizeof(FortPartyContext_GetCurrentPartyMaxSize) == 0x000004, "Wrong size on FortPartyContext_GetCurrentPartyMaxSize");
static_assert(offsetof(FortPartyContext_GetCurrentPartyMaxSize, ReturnValue) == 0x000000, "Member 'FortPartyContext_GetCurrentPartyMaxSize::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.GetFriendRequestStatusForPlayer
// 0x0030 (0x0030 - 0x0000)
struct FortPartyContext_GetFriendRequestStatusForPlayer final
{
public:
	struct FUniqueNetIdRepl                       PlayerID;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFriendRequestStatus                      ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPartyContext_GetFriendRequestStatusForPlayer) == 0x000008, "Wrong alignment on FortPartyContext_GetFriendRequestStatusForPlayer");
static_assert(sizeof(FortPartyContext_GetFriendRequestStatusForPlayer) == 0x000030, "Wrong size on FortPartyContext_GetFriendRequestStatusForPlayer");
static_assert(offsetof(FortPartyContext_GetFriendRequestStatusForPlayer, PlayerID) == 0x000000, "Member 'FortPartyContext_GetFriendRequestStatusForPlayer::PlayerID' has a wrong offset!");
static_assert(offsetof(FortPartyContext_GetFriendRequestStatusForPlayer, ReturnValue) == 0x000028, "Member 'FortPartyContext_GetFriendRequestStatusForPlayer::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.GetLocalPartyMemberLocation
// 0x0002 (0x0002 - 0x0000)
struct FortPartyContext_GetLocalPartyMemberLocation final
{
public:
	EFortPartyMemberLocation                      Location;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_GetLocalPartyMemberLocation) == 0x000001, "Wrong alignment on FortPartyContext_GetLocalPartyMemberLocation");
static_assert(sizeof(FortPartyContext_GetLocalPartyMemberLocation) == 0x000002, "Wrong size on FortPartyContext_GetLocalPartyMemberLocation");
static_assert(offsetof(FortPartyContext_GetLocalPartyMemberLocation, Location) == 0x000000, "Member 'FortPartyContext_GetLocalPartyMemberLocation::Location' has a wrong offset!");
static_assert(offsetof(FortPartyContext_GetLocalPartyMemberLocation, ReturnValue) == 0x000001, "Member 'FortPartyContext_GetLocalPartyMemberLocation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.GetLocalPartyPlaylist
// 0x0001 (0x0001 - 0x0000)
struct FortPartyContext_GetLocalPartyPlaylist final
{
public:
	EFortAthenaPlaylist                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_GetLocalPartyPlaylist) == 0x000001, "Wrong alignment on FortPartyContext_GetLocalPartyPlaylist");
static_assert(sizeof(FortPartyContext_GetLocalPartyPlaylist) == 0x000001, "Wrong size on FortPartyContext_GetLocalPartyPlaylist");
static_assert(offsetof(FortPartyContext_GetLocalPartyPlaylist, ReturnValue) == 0x000000, "Member 'FortPartyContext_GetLocalPartyPlaylist::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.GetLocalPartyProgression
// 0x0001 (0x0001 - 0x0000)
struct FortPartyContext_GetLocalPartyProgression final
{
public:
	EFortPartyState                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_GetLocalPartyProgression) == 0x000001, "Wrong alignment on FortPartyContext_GetLocalPartyProgression");
static_assert(sizeof(FortPartyContext_GetLocalPartyProgression) == 0x000001, "Wrong size on FortPartyContext_GetLocalPartyProgression");
static_assert(offsetof(FortPartyContext_GetLocalPartyProgression, ReturnValue) == 0x000000, "Member 'FortPartyContext_GetLocalPartyProgression::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.GetLocalPartyTeamFill
// 0x0001 (0x0001 - 0x0000)
struct FortPartyContext_GetLocalPartyTeamFill final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_GetLocalPartyTeamFill) == 0x000001, "Wrong alignment on FortPartyContext_GetLocalPartyTeamFill");
static_assert(sizeof(FortPartyContext_GetLocalPartyTeamFill) == 0x000001, "Wrong size on FortPartyContext_GetLocalPartyTeamFill");
static_assert(offsetof(FortPartyContext_GetLocalPartyTeamFill, ReturnValue) == 0x000000, "Member 'FortPartyContext_GetLocalPartyTeamFill::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.GetLocalPlayerDisplayName
// 0x0010 (0x0010 - 0x0000)
struct FortPartyContext_GetLocalPlayerDisplayName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_GetLocalPlayerDisplayName) == 0x000008, "Wrong alignment on FortPartyContext_GetLocalPlayerDisplayName");
static_assert(sizeof(FortPartyContext_GetLocalPlayerDisplayName) == 0x000010, "Wrong size on FortPartyContext_GetLocalPlayerDisplayName");
static_assert(offsetof(FortPartyContext_GetLocalPlayerDisplayName, ReturnValue) == 0x000000, "Member 'FortPartyContext_GetLocalPlayerDisplayName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.GetLocalPlayerTeam
// 0x0008 (0x0008 - 0x0000)
struct FortPartyContext_GetLocalPlayerTeam final
{
public:
	class UFortUITeamInfo*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_GetLocalPlayerTeam) == 0x000008, "Wrong alignment on FortPartyContext_GetLocalPlayerTeam");
static_assert(sizeof(FortPartyContext_GetLocalPlayerTeam) == 0x000008, "Wrong size on FortPartyContext_GetLocalPlayerTeam");
static_assert(offsetof(FortPartyContext_GetLocalPlayerTeam, ReturnValue) == 0x000000, "Member 'FortPartyContext_GetLocalPlayerTeam::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.GetLocalPlayerTeamMemberInfo
// 0x01A8 (0x01A8 - 0x0000)
struct FortPartyContext_GetLocalPlayerTeamMemberInfo final
{
public:
	struct FFortTeamMemberInfo                    LocalPlayerInfo;                                   // 0x0000(0x01A8)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_GetLocalPlayerTeamMemberInfo) == 0x000008, "Wrong alignment on FortPartyContext_GetLocalPlayerTeamMemberInfo");
static_assert(sizeof(FortPartyContext_GetLocalPlayerTeamMemberInfo) == 0x0001A8, "Wrong size on FortPartyContext_GetLocalPlayerTeamMemberInfo");
static_assert(offsetof(FortPartyContext_GetLocalPlayerTeamMemberInfo, LocalPlayerInfo) == 0x000000, "Member 'FortPartyContext_GetLocalPlayerTeamMemberInfo::LocalPlayerInfo' has a wrong offset!");

// Function FortniteGame.FortPartyContext.GetMaxTeamSizeForSelectedTheater
// 0x0004 (0x0004 - 0x0000)
struct FortPartyContext_GetMaxTeamSizeForSelectedTheater final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_GetMaxTeamSizeForSelectedTheater) == 0x000004, "Wrong alignment on FortPartyContext_GetMaxTeamSizeForSelectedTheater");
static_assert(sizeof(FortPartyContext_GetMaxTeamSizeForSelectedTheater) == 0x000004, "Wrong size on FortPartyContext_GetMaxTeamSizeForSelectedTheater");
static_assert(offsetof(FortPartyContext_GetMaxTeamSizeForSelectedTheater, ReturnValue) == 0x000000, "Member 'FortPartyContext_GetMaxTeamSizeForSelectedTheater::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.GetNumPlayersInLocalParty
// 0x0004 (0x0004 - 0x0000)
struct FortPartyContext_GetNumPlayersInLocalParty final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_GetNumPlayersInLocalParty) == 0x000004, "Wrong alignment on FortPartyContext_GetNumPlayersInLocalParty");
static_assert(sizeof(FortPartyContext_GetNumPlayersInLocalParty) == 0x000004, "Wrong size on FortPartyContext_GetNumPlayersInLocalParty");
static_assert(offsetof(FortPartyContext_GetNumPlayersInLocalParty, ReturnValue) == 0x000000, "Member 'FortPartyContext_GetNumPlayersInLocalParty::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.GetPartyMemberDisplayState
// 0x01B0 (0x01B0 - 0x0000)
struct FortPartyContext_GetPartyMemberDisplayState final
{
public:
	struct FFortTeamMemberInfo                    PartyMemberInfo;                                   // 0x0000(0x01A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EFortPartyMemberDisplayState                  ReturnValue;                                       // 0x01A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPartyContext_GetPartyMemberDisplayState) == 0x000008, "Wrong alignment on FortPartyContext_GetPartyMemberDisplayState");
static_assert(sizeof(FortPartyContext_GetPartyMemberDisplayState) == 0x0001B0, "Wrong size on FortPartyContext_GetPartyMemberDisplayState");
static_assert(offsetof(FortPartyContext_GetPartyMemberDisplayState, PartyMemberInfo) == 0x000000, "Member 'FortPartyContext_GetPartyMemberDisplayState::PartyMemberInfo' has a wrong offset!");
static_assert(offsetof(FortPartyContext_GetPartyMemberDisplayState, ReturnValue) == 0x0001A8, "Member 'FortPartyContext_GetPartyMemberDisplayState::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.HasPendingFriendRequest
// 0x0001 (0x0001 - 0x0000)
struct FortPartyContext_HasPendingFriendRequest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_HasPendingFriendRequest) == 0x000001, "Wrong alignment on FortPartyContext_HasPendingFriendRequest");
static_assert(sizeof(FortPartyContext_HasPendingFriendRequest) == 0x000001, "Wrong size on FortPartyContext_HasPendingFriendRequest");
static_assert(offsetof(FortPartyContext_HasPendingFriendRequest, ReturnValue) == 0x000000, "Member 'FortPartyContext_HasPendingFriendRequest::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.HasPendingPartyInvitation
// 0x0030 (0x0030 - 0x0000)
struct FortPartyContext_HasPendingPartyInvitation final
{
public:
	struct FUniqueNetIdRepl                       PlayerID;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPartyContext_HasPendingPartyInvitation) == 0x000008, "Wrong alignment on FortPartyContext_HasPendingPartyInvitation");
static_assert(sizeof(FortPartyContext_HasPendingPartyInvitation) == 0x000030, "Wrong size on FortPartyContext_HasPendingPartyInvitation");
static_assert(offsetof(FortPartyContext_HasPendingPartyInvitation, PlayerID) == 0x000000, "Member 'FortPartyContext_HasPendingPartyInvitation::PlayerID' has a wrong offset!");
static_assert(offsetof(FortPartyContext_HasPendingPartyInvitation, ReturnValue) == 0x000028, "Member 'FortPartyContext_HasPendingPartyInvitation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.IsAthenaPartyMemberReady
// 0x0030 (0x0030 - 0x0000)
struct FortPartyContext_IsAthenaPartyMemberReady final
{
public:
	struct FUniqueNetIdRepl                       MemberId;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPartyContext_IsAthenaPartyMemberReady) == 0x000008, "Wrong alignment on FortPartyContext_IsAthenaPartyMemberReady");
static_assert(sizeof(FortPartyContext_IsAthenaPartyMemberReady) == 0x000030, "Wrong size on FortPartyContext_IsAthenaPartyMemberReady");
static_assert(offsetof(FortPartyContext_IsAthenaPartyMemberReady, MemberId) == 0x000000, "Member 'FortPartyContext_IsAthenaPartyMemberReady::MemberId' has a wrong offset!");
static_assert(offsetof(FortPartyContext_IsAthenaPartyMemberReady, ReturnValue) == 0x000028, "Member 'FortPartyContext_IsAthenaPartyMemberReady::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.IsEntirePartyInFrontEnd
// 0x0001 (0x0001 - 0x0000)
struct FortPartyContext_IsEntirePartyInFrontEnd final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_IsEntirePartyInFrontEnd) == 0x000001, "Wrong alignment on FortPartyContext_IsEntirePartyInFrontEnd");
static_assert(sizeof(FortPartyContext_IsEntirePartyInFrontEnd) == 0x000001, "Wrong size on FortPartyContext_IsEntirePartyInFrontEnd");
static_assert(offsetof(FortPartyContext_IsEntirePartyInFrontEnd, ReturnValue) == 0x000000, "Member 'FortPartyContext_IsEntirePartyInFrontEnd::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.IsInLocalPlayersParty
// 0x0030 (0x0030 - 0x0000)
struct FortPartyContext_IsInLocalPlayersParty final
{
public:
	struct FUniqueNetIdRepl                       PlayerID;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPartyContext_IsInLocalPlayersParty) == 0x000008, "Wrong alignment on FortPartyContext_IsInLocalPlayersParty");
static_assert(sizeof(FortPartyContext_IsInLocalPlayersParty) == 0x000030, "Wrong size on FortPartyContext_IsInLocalPlayersParty");
static_assert(offsetof(FortPartyContext_IsInLocalPlayersParty, PlayerID) == 0x000000, "Member 'FortPartyContext_IsInLocalPlayersParty::PlayerID' has a wrong offset!");
static_assert(offsetof(FortPartyContext_IsInLocalPlayersParty, ReturnValue) == 0x000028, "Member 'FortPartyContext_IsInLocalPlayersParty::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.IsLocalPlayerInParty
// 0x0010 (0x0010 - 0x0000)
struct FortPartyContext_IsLocalPlayerInParty final
{
public:
	class UFortSocialItem*                        SocialItem;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPartyContext_IsLocalPlayerInParty) == 0x000008, "Wrong alignment on FortPartyContext_IsLocalPlayerInParty");
static_assert(sizeof(FortPartyContext_IsLocalPlayerInParty) == 0x000010, "Wrong size on FortPartyContext_IsLocalPlayerInParty");
static_assert(offsetof(FortPartyContext_IsLocalPlayerInParty, SocialItem) == 0x000000, "Member 'FortPartyContext_IsLocalPlayerInParty::SocialItem' has a wrong offset!");
static_assert(offsetof(FortPartyContext_IsLocalPlayerInParty, ReturnValue) == 0x000008, "Member 'FortPartyContext_IsLocalPlayerInParty::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.IsLocalPlayerInPersistentParty
// 0x0001 (0x0001 - 0x0000)
struct FortPartyContext_IsLocalPlayerInPersistentParty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_IsLocalPlayerInPersistentParty) == 0x000001, "Wrong alignment on FortPartyContext_IsLocalPlayerInPersistentParty");
static_assert(sizeof(FortPartyContext_IsLocalPlayerInPersistentParty) == 0x000001, "Wrong size on FortPartyContext_IsLocalPlayerInPersistentParty");
static_assert(offsetof(FortPartyContext_IsLocalPlayerInPersistentParty, ReturnValue) == 0x000000, "Member 'FortPartyContext_IsLocalPlayerInPersistentParty::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.IsLocalPlayerPartyLeader
// 0x0001 (0x0001 - 0x0000)
struct FortPartyContext_IsLocalPlayerPartyLeader final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_IsLocalPlayerPartyLeader) == 0x000001, "Wrong alignment on FortPartyContext_IsLocalPlayerPartyLeader");
static_assert(sizeof(FortPartyContext_IsLocalPlayerPartyLeader) == 0x000001, "Wrong size on FortPartyContext_IsLocalPlayerPartyLeader");
static_assert(offsetof(FortPartyContext_IsLocalPlayerPartyLeader, ReturnValue) == 0x000000, "Member 'FortPartyContext_IsLocalPlayerPartyLeader::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.IsPartyMemberMuted
// 0x0030 (0x0030 - 0x0000)
struct FortPartyContext_IsPartyMemberMuted final
{
public:
	struct FUniqueNetIdRepl                       PartyMemberId;                                     // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPartyContext_IsPartyMemberMuted) == 0x000008, "Wrong alignment on FortPartyContext_IsPartyMemberMuted");
static_assert(sizeof(FortPartyContext_IsPartyMemberMuted) == 0x000030, "Wrong size on FortPartyContext_IsPartyMemberMuted");
static_assert(offsetof(FortPartyContext_IsPartyMemberMuted, PartyMemberId) == 0x000000, "Member 'FortPartyContext_IsPartyMemberMuted::PartyMemberId' has a wrong offset!");
static_assert(offsetof(FortPartyContext_IsPartyMemberMuted, ReturnValue) == 0x000028, "Member 'FortPartyContext_IsPartyMemberMuted::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.IsPlayerBlocked
// 0x0030 (0x0030 - 0x0000)
struct FortPartyContext_IsPlayerBlocked final
{
public:
	struct FUniqueNetIdRepl                       PlayerID;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPartyContext_IsPlayerBlocked) == 0x000008, "Wrong alignment on FortPartyContext_IsPlayerBlocked");
static_assert(sizeof(FortPartyContext_IsPlayerBlocked) == 0x000030, "Wrong size on FortPartyContext_IsPlayerBlocked");
static_assert(offsetof(FortPartyContext_IsPlayerBlocked, PlayerID) == 0x000000, "Member 'FortPartyContext_IsPlayerBlocked::PlayerID' has a wrong offset!");
static_assert(offsetof(FortPartyContext_IsPlayerBlocked, ReturnValue) == 0x000028, "Member 'FortPartyContext_IsPlayerBlocked::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.IsPlayerInOurParty
// 0x0030 (0x0030 - 0x0000)
struct FortPartyContext_IsPlayerInOurParty final
{
public:
	struct FUniqueNetIdRepl                       PlayerIdToCheck;                                   // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPartyContext_IsPlayerInOurParty) == 0x000008, "Wrong alignment on FortPartyContext_IsPlayerInOurParty");
static_assert(sizeof(FortPartyContext_IsPlayerInOurParty) == 0x000030, "Wrong size on FortPartyContext_IsPlayerInOurParty");
static_assert(offsetof(FortPartyContext_IsPlayerInOurParty, PlayerIdToCheck) == 0x000000, "Member 'FortPartyContext_IsPlayerInOurParty::PlayerIdToCheck' has a wrong offset!");
static_assert(offsetof(FortPartyContext_IsPlayerInOurParty, ReturnValue) == 0x000028, "Member 'FortPartyContext_IsPlayerInOurParty::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.IsTeamMemberFriend
// 0x01B0 (0x01B0 - 0x0000)
struct FortPartyContext_IsTeamMemberFriend final
{
public:
	struct FFortTeamMemberInfo                    TeamMemberInfo;                                    // 0x0000(0x01A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x01A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPartyContext_IsTeamMemberFriend) == 0x000008, "Wrong alignment on FortPartyContext_IsTeamMemberFriend");
static_assert(sizeof(FortPartyContext_IsTeamMemberFriend) == 0x0001B0, "Wrong size on FortPartyContext_IsTeamMemberFriend");
static_assert(offsetof(FortPartyContext_IsTeamMemberFriend, TeamMemberInfo) == 0x000000, "Member 'FortPartyContext_IsTeamMemberFriend::TeamMemberInfo' has a wrong offset!");
static_assert(offsetof(FortPartyContext_IsTeamMemberFriend, ReturnValue) == 0x0001A8, "Member 'FortPartyContext_IsTeamMemberFriend::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.ShouldPartyInvitesBeEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortPartyContext_ShouldPartyInvitesBeEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_ShouldPartyInvitesBeEnabled) == 0x000001, "Wrong alignment on FortPartyContext_ShouldPartyInvitesBeEnabled");
static_assert(sizeof(FortPartyContext_ShouldPartyInvitesBeEnabled) == 0x000001, "Wrong size on FortPartyContext_ShouldPartyInvitesBeEnabled");
static_assert(offsetof(FortPartyContext_ShouldPartyInvitesBeEnabled, ReturnValue) == 0x000000, "Member 'FortPartyContext_ShouldPartyInvitesBeEnabled::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.ShouldShowHeroPortraits
// 0x0001 (0x0001 - 0x0000)
struct FortPartyContext_ShouldShowHeroPortraits final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_ShouldShowHeroPortraits) == 0x000001, "Wrong alignment on FortPartyContext_ShouldShowHeroPortraits");
static_assert(sizeof(FortPartyContext_ShouldShowHeroPortraits) == 0x000001, "Wrong size on FortPartyContext_ShouldShowHeroPortraits");
static_assert(offsetof(FortPartyContext_ShouldShowHeroPortraits, ReturnValue) == 0x000000, "Member 'FortPartyContext_ShouldShowHeroPortraits::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn_InteractablePawn.BlueprintOnInteract
// 0x0008 (0x0008 - 0x0000)
struct FortPawn_InteractablePawn_BlueprintOnInteract final
{
public:
	const class AFortPawn*                        InteractingPawn;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_InteractablePawn_BlueprintOnInteract) == 0x000008, "Wrong alignment on FortPawn_InteractablePawn_BlueprintOnInteract");
static_assert(sizeof(FortPawn_InteractablePawn_BlueprintOnInteract) == 0x000008, "Wrong size on FortPawn_InteractablePawn_BlueprintOnInteract");
static_assert(offsetof(FortPawn_InteractablePawn_BlueprintOnInteract, InteractingPawn) == 0x000000, "Member 'FortPawn_InteractablePawn_BlueprintOnInteract::InteractingPawn' has a wrong offset!");

// Function FortniteGame.FortPawn_InteractablePawn.BlueprintCanInteract
// 0x0010 (0x0010 - 0x0000)
struct FortPawn_InteractablePawn_BlueprintCanInteract final
{
public:
	const class AFortPawn*                        InteractingPawn;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPawn_InteractablePawn_BlueprintCanInteract) == 0x000008, "Wrong alignment on FortPawn_InteractablePawn_BlueprintCanInteract");
static_assert(sizeof(FortPawn_InteractablePawn_BlueprintCanInteract) == 0x000010, "Wrong size on FortPawn_InteractablePawn_BlueprintCanInteract");
static_assert(offsetof(FortPawn_InteractablePawn_BlueprintCanInteract, InteractingPawn) == 0x000000, "Member 'FortPawn_InteractablePawn_BlueprintCanInteract::InteractingPawn' has a wrong offset!");
static_assert(offsetof(FortPawn_InteractablePawn_BlueprintCanInteract, ReturnValue) == 0x000008, "Member 'FortPawn_InteractablePawn_BlueprintCanInteract::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn_InteractablePawn.BlueprintGetInteractionString
// 0x0020 (0x0020 - 0x0000)
struct FortPawn_InteractablePawn_BlueprintGetInteractionString final
{
public:
	const class AFortPawn*                        InteractingPawn;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_InteractablePawn_BlueprintGetInteractionString) == 0x000008, "Wrong alignment on FortPawn_InteractablePawn_BlueprintGetInteractionString");
static_assert(sizeof(FortPawn_InteractablePawn_BlueprintGetInteractionString) == 0x000020, "Wrong size on FortPawn_InteractablePawn_BlueprintGetInteractionString");
static_assert(offsetof(FortPawn_InteractablePawn_BlueprintGetInteractionString, InteractingPawn) == 0x000000, "Member 'FortPawn_InteractablePawn_BlueprintGetInteractionString::InteractingPawn' has a wrong offset!");
static_assert(offsetof(FortPawn_InteractablePawn_BlueprintGetInteractionString, ReturnValue) == 0x000008, "Member 'FortPawn_InteractablePawn_BlueprintGetInteractionString::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPermaniteStructureInterface.OnBoundariesChanged
// 0x000C (0x000C - 0x0000)
struct FortPermaniteStructureInterface_OnBoundariesChanged final
{
public:
	int32                                         MinLevel;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLevel;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentLevel;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPermaniteStructureInterface_OnBoundariesChanged) == 0x000004, "Wrong alignment on FortPermaniteStructureInterface_OnBoundariesChanged");
static_assert(sizeof(FortPermaniteStructureInterface_OnBoundariesChanged) == 0x00000C, "Wrong size on FortPermaniteStructureInterface_OnBoundariesChanged");
static_assert(offsetof(FortPermaniteStructureInterface_OnBoundariesChanged, MinLevel) == 0x000000, "Member 'FortPermaniteStructureInterface_OnBoundariesChanged::MinLevel' has a wrong offset!");
static_assert(offsetof(FortPermaniteStructureInterface_OnBoundariesChanged, MaxLevel) == 0x000004, "Member 'FortPermaniteStructureInterface_OnBoundariesChanged::MaxLevel' has a wrong offset!");
static_assert(offsetof(FortPermaniteStructureInterface_OnBoundariesChanged, CurrentLevel) == 0x000008, "Member 'FortPermaniteStructureInterface_OnBoundariesChanged::CurrentLevel' has a wrong offset!");

// Function FortniteGame.FortPersistentResourceItemDefinition.IsEventItem
// 0x0001 (0x0001 - 0x0000)
struct FortPersistentResourceItemDefinition_IsEventItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPersistentResourceItemDefinition_IsEventItem) == 0x000001, "Wrong alignment on FortPersistentResourceItemDefinition_IsEventItem");
static_assert(sizeof(FortPersistentResourceItemDefinition_IsEventItem) == 0x000001, "Wrong size on FortPersistentResourceItemDefinition_IsEventItem");
static_assert(offsetof(FortPersistentResourceItemDefinition_IsEventItem, ReturnValue) == 0x000000, "Member 'FortPersistentResourceItemDefinition_IsEventItem::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItemTypeFunctionLibrary.ToText
// 0x0020 (0x0020 - 0x0000)
struct FortItemTypeFunctionLibrary_ToText final
{
public:
	EFortItemType                                 ItemType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsePlural;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemTypeFunctionLibrary_ToText) == 0x000008, "Wrong alignment on FortItemTypeFunctionLibrary_ToText");
static_assert(sizeof(FortItemTypeFunctionLibrary_ToText) == 0x000020, "Wrong size on FortItemTypeFunctionLibrary_ToText");
static_assert(offsetof(FortItemTypeFunctionLibrary_ToText, ItemType) == 0x000000, "Member 'FortItemTypeFunctionLibrary_ToText::ItemType' has a wrong offset!");
static_assert(offsetof(FortItemTypeFunctionLibrary_ToText, UsePlural) == 0x000001, "Member 'FortItemTypeFunctionLibrary_ToText::UsePlural' has a wrong offset!");
static_assert(offsetof(FortItemTypeFunctionLibrary_ToText, ReturnValue) == 0x000008, "Member 'FortItemTypeFunctionLibrary_ToText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPickupEffect.ApplyCosmeticOverridesToMaterial
// 0x0018 (0x0018 - 0x0000)
struct FortPickupEffect_ApplyCosmeticOverridesToMaterial final
{
public:
	class UMeshComponent*                         MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MatIndex;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPickupEffect_ApplyCosmeticOverridesToMaterial) == 0x000008, "Wrong alignment on FortPickupEffect_ApplyCosmeticOverridesToMaterial");
static_assert(sizeof(FortPickupEffect_ApplyCosmeticOverridesToMaterial) == 0x000018, "Wrong size on FortPickupEffect_ApplyCosmeticOverridesToMaterial");
static_assert(offsetof(FortPickupEffect_ApplyCosmeticOverridesToMaterial, MeshComponent) == 0x000000, "Member 'FortPickupEffect_ApplyCosmeticOverridesToMaterial::MeshComponent' has a wrong offset!");
static_assert(offsetof(FortPickupEffect_ApplyCosmeticOverridesToMaterial, MatIndex) == 0x000008, "Member 'FortPickupEffect_ApplyCosmeticOverridesToMaterial::MatIndex' has a wrong offset!");
static_assert(offsetof(FortPickupEffect_ApplyCosmeticOverridesToMaterial, ReturnValue) == 0x000010, "Member 'FortPickupEffect_ApplyCosmeticOverridesToMaterial::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPickupEffect.OnAboutToEnterBackpack
// 0x0008 (0x0008 - 0x0000)
struct FortPickupEffect_OnAboutToEnterBackpack final
{
public:
	class AFortPawn*                              PickupTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPickupEffect_OnAboutToEnterBackpack) == 0x000008, "Wrong alignment on FortPickupEffect_OnAboutToEnterBackpack");
static_assert(sizeof(FortPickupEffect_OnAboutToEnterBackpack) == 0x000008, "Wrong size on FortPickupEffect_OnAboutToEnterBackpack");
static_assert(offsetof(FortPickupEffect_OnAboutToEnterBackpack, PickupTarget) == 0x000000, "Member 'FortPickupEffect_OnAboutToEnterBackpack::PickupTarget' has a wrong offset!");

// Function FortniteGame.FortPlacementActorTagTest.LineTraceByChannel
// 0x00C0 (0x00C0 - 0x0000)
struct FortPlacementActorTagTest_LineTraceByChannel final
{
public:
	class AFortPlacementActor*                    PlacementActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x0008(0x000C)(ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0014(0x000C)(ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               TraceChannel;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FHitResult                             OutHit;                                            // 0x0038(0x0080)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bIgnoreSelf;                                       // 0x00B8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B9(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BA[0x6];                                       // 0x00BA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlacementActorTagTest_LineTraceByChannel) == 0x000008, "Wrong alignment on FortPlacementActorTagTest_LineTraceByChannel");
static_assert(sizeof(FortPlacementActorTagTest_LineTraceByChannel) == 0x0000C0, "Wrong size on FortPlacementActorTagTest_LineTraceByChannel");
static_assert(offsetof(FortPlacementActorTagTest_LineTraceByChannel, PlacementActor) == 0x000000, "Member 'FortPlacementActorTagTest_LineTraceByChannel::PlacementActor' has a wrong offset!");
static_assert(offsetof(FortPlacementActorTagTest_LineTraceByChannel, Start) == 0x000008, "Member 'FortPlacementActorTagTest_LineTraceByChannel::Start' has a wrong offset!");
static_assert(offsetof(FortPlacementActorTagTest_LineTraceByChannel, End) == 0x000014, "Member 'FortPlacementActorTagTest_LineTraceByChannel::End' has a wrong offset!");
static_assert(offsetof(FortPlacementActorTagTest_LineTraceByChannel, TraceChannel) == 0x000020, "Member 'FortPlacementActorTagTest_LineTraceByChannel::TraceChannel' has a wrong offset!");
static_assert(offsetof(FortPlacementActorTagTest_LineTraceByChannel, bTraceComplex) == 0x000021, "Member 'FortPlacementActorTagTest_LineTraceByChannel::bTraceComplex' has a wrong offset!");
static_assert(offsetof(FortPlacementActorTagTest_LineTraceByChannel, ActorsToIgnore) == 0x000028, "Member 'FortPlacementActorTagTest_LineTraceByChannel::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(FortPlacementActorTagTest_LineTraceByChannel, OutHit) == 0x000038, "Member 'FortPlacementActorTagTest_LineTraceByChannel::OutHit' has a wrong offset!");
static_assert(offsetof(FortPlacementActorTagTest_LineTraceByChannel, bIgnoreSelf) == 0x0000B8, "Member 'FortPlacementActorTagTest_LineTraceByChannel::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(FortPlacementActorTagTest_LineTraceByChannel, ReturnValue) == 0x0000B9, "Member 'FortPlacementActorTagTest_LineTraceByChannel::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlacementActorTagTest.ShouldApplyTagsToPlacementActor
// 0x0018 (0x0018 - 0x0000)
struct FortPlacementActorTagTest_ShouldApplyTagsToPlacementActor final
{
public:
	class AFortPlacementActor*                    FocusPlacementActor;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AveragePlacementActorLocation;                     // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlacementActorTagTest_ShouldApplyTagsToPlacementActor) == 0x000008, "Wrong alignment on FortPlacementActorTagTest_ShouldApplyTagsToPlacementActor");
static_assert(sizeof(FortPlacementActorTagTest_ShouldApplyTagsToPlacementActor) == 0x000018, "Wrong size on FortPlacementActorTagTest_ShouldApplyTagsToPlacementActor");
static_assert(offsetof(FortPlacementActorTagTest_ShouldApplyTagsToPlacementActor, FocusPlacementActor) == 0x000000, "Member 'FortPlacementActorTagTest_ShouldApplyTagsToPlacementActor::FocusPlacementActor' has a wrong offset!");
static_assert(offsetof(FortPlacementActorTagTest_ShouldApplyTagsToPlacementActor, AveragePlacementActorLocation) == 0x000008, "Member 'FortPlacementActorTagTest_ShouldApplyTagsToPlacementActor::AveragePlacementActorLocation' has a wrong offset!");
static_assert(offsetof(FortPlacementActorTagTest_ShouldApplyTagsToPlacementActor, ReturnValue) == 0x000014, "Member 'FortPlacementActorTagTest_ShouldApplyTagsToPlacementActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItemDefinitionTooltip.GetTextForToken
// 0x0040 (0x0040 - 0x0000)
struct FortQuestItemDefinitionTooltip_GetTextForToken final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuestItemDefinitionTooltip_GetTextForToken) == 0x000008, "Wrong alignment on FortQuestItemDefinitionTooltip_GetTextForToken");
static_assert(sizeof(FortQuestItemDefinitionTooltip_GetTextForToken) == 0x000040, "Wrong size on FortQuestItemDefinitionTooltip_GetTextForToken");
static_assert(offsetof(FortQuestItemDefinitionTooltip_GetTextForToken, ObjectToDescribe) == 0x000000, "Member 'FortQuestItemDefinitionTooltip_GetTextForToken::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortQuestItemDefinitionTooltip_GetTextForToken, Tag) == 0x000008, "Member 'FortQuestItemDefinitionTooltip_GetTextForToken::Tag' has a wrong offset!");
static_assert(offsetof(FortQuestItemDefinitionTooltip_GetTextForToken, Context) == 0x000010, "Member 'FortQuestItemDefinitionTooltip_GetTextForToken::Context' has a wrong offset!");
static_assert(offsetof(FortQuestItemDefinitionTooltip_GetTextForToken, Token) == 0x000018, "Member 'FortQuestItemDefinitionTooltip_GetTextForToken::Token' has a wrong offset!");
static_assert(offsetof(FortQuestItemDefinitionTooltip_GetTextForToken, OutText) == 0x000020, "Member 'FortQuestItemDefinitionTooltip_GetTextForToken::OutText' has a wrong offset!");
static_assert(offsetof(FortQuestItemDefinitionTooltip_GetTextForToken, ReturnValue) == 0x000038, "Member 'FortQuestItemDefinitionTooltip_GetTextForToken::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItemDefinitionTooltip.GetTokenizedDescriptionText
// 0x0030 (0x0030 - 0x0000)
struct FortQuestItemDefinitionTooltip_GetTokenizedDescriptionText final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           OutDescription;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuestItemDefinitionTooltip_GetTokenizedDescriptionText) == 0x000008, "Wrong alignment on FortQuestItemDefinitionTooltip_GetTokenizedDescriptionText");
static_assert(sizeof(FortQuestItemDefinitionTooltip_GetTokenizedDescriptionText) == 0x000030, "Wrong size on FortQuestItemDefinitionTooltip_GetTokenizedDescriptionText");
static_assert(offsetof(FortQuestItemDefinitionTooltip_GetTokenizedDescriptionText, ObjectToDescribe) == 0x000000, "Member 'FortQuestItemDefinitionTooltip_GetTokenizedDescriptionText::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortQuestItemDefinitionTooltip_GetTokenizedDescriptionText, Tag) == 0x000008, "Member 'FortQuestItemDefinitionTooltip_GetTokenizedDescriptionText::Tag' has a wrong offset!");
static_assert(offsetof(FortQuestItemDefinitionTooltip_GetTokenizedDescriptionText, Context) == 0x000010, "Member 'FortQuestItemDefinitionTooltip_GetTokenizedDescriptionText::Context' has a wrong offset!");
static_assert(offsetof(FortQuestItemDefinitionTooltip_GetTokenizedDescriptionText, OutDescription) == 0x000018, "Member 'FortQuestItemDefinitionTooltip_GetTokenizedDescriptionText::OutDescription' has a wrong offset!");
static_assert(offsetof(FortQuestItemDefinitionTooltip_GetTokenizedDescriptionText, ReturnValue) == 0x000028, "Member 'FortQuestItemDefinitionTooltip_GetTokenizedDescriptionText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerPvP.ClientReceiveKillNotification
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerControllerPvP_ClientReceiveKillNotification final
{
public:
	class AFortPlayerStateZone*                   Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerStateZone*                   Killed;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerPvP_ClientReceiveKillNotification) == 0x000008, "Wrong alignment on FortPlayerControllerPvP_ClientReceiveKillNotification");
static_assert(sizeof(FortPlayerControllerPvP_ClientReceiveKillNotification) == 0x000010, "Wrong size on FortPlayerControllerPvP_ClientReceiveKillNotification");
static_assert(offsetof(FortPlayerControllerPvP_ClientReceiveKillNotification, Killer) == 0x000000, "Member 'FortPlayerControllerPvP_ClientReceiveKillNotification::Killer' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerPvP_ClientReceiveKillNotification, Killed) == 0x000008, "Member 'FortPlayerControllerPvP_ClientReceiveKillNotification::Killed' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerPvP.ClientShowGameOverWidget
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerControllerPvP_ClientShowGameOverWidget final
{
public:
	EFortPvPGameResult                            GameResult;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerPvP_ClientShowGameOverWidget) == 0x000001, "Wrong alignment on FortPlayerControllerPvP_ClientShowGameOverWidget");
static_assert(sizeof(FortPlayerControllerPvP_ClientShowGameOverWidget) == 0x000001, "Wrong size on FortPlayerControllerPvP_ClientShowGameOverWidget");
static_assert(offsetof(FortPlayerControllerPvP_ClientShowGameOverWidget, GameResult) == 0x000000, "Member 'FortPlayerControllerPvP_ClientShowGameOverWidget::GameResult' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerPvP.ServerAttemptSelectFOBCore
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerControllerPvP_ServerAttemptSelectFOBCore final
{
public:
	class ABuildingFOBConfigActor*                FOBToSelectOn;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortFOBCoreDecoItemDefinition*         DefToSelect;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerPvP_ServerAttemptSelectFOBCore) == 0x000008, "Wrong alignment on FortPlayerControllerPvP_ServerAttemptSelectFOBCore");
static_assert(sizeof(FortPlayerControllerPvP_ServerAttemptSelectFOBCore) == 0x000010, "Wrong size on FortPlayerControllerPvP_ServerAttemptSelectFOBCore");
static_assert(offsetof(FortPlayerControllerPvP_ServerAttemptSelectFOBCore, FOBToSelectOn) == 0x000000, "Member 'FortPlayerControllerPvP_ServerAttemptSelectFOBCore::FOBToSelectOn' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerPvP_ServerAttemptSelectFOBCore, DefToSelect) == 0x000008, "Member 'FortPlayerControllerPvP_ServerAttemptSelectFOBCore::DefToSelect' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerAthena.ClientBotStartDogpile
// 0x000C (0x000C - 0x0000)
struct FortPlayerControllerAthena_ClientBotStartDogpile final
{
public:
	struct FVector                                DogpilePosition;                                   // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerAthena_ClientBotStartDogpile) == 0x000004, "Wrong alignment on FortPlayerControllerAthena_ClientBotStartDogpile");
static_assert(sizeof(FortPlayerControllerAthena_ClientBotStartDogpile) == 0x00000C, "Wrong size on FortPlayerControllerAthena_ClientBotStartDogpile");
static_assert(offsetof(FortPlayerControllerAthena_ClientBotStartDogpile, DogpilePosition) == 0x000000, "Member 'FortPlayerControllerAthena_ClientBotStartDogpile::DogpilePosition' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerAthena.ClientSendEndBattleRoyaleMatchForPlayer
// 0x0038 (0x0038 - 0x0000)
struct FortPlayerControllerAthena_ClientSendEndBattleRoyaleMatchForPlayer final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAthenaRewardResult                    Result;                                            // 0x0008(0x0030)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerAthena_ClientSendEndBattleRoyaleMatchForPlayer) == 0x000008, "Wrong alignment on FortPlayerControllerAthena_ClientSendEndBattleRoyaleMatchForPlayer");
static_assert(sizeof(FortPlayerControllerAthena_ClientSendEndBattleRoyaleMatchForPlayer) == 0x000038, "Wrong size on FortPlayerControllerAthena_ClientSendEndBattleRoyaleMatchForPlayer");
static_assert(offsetof(FortPlayerControllerAthena_ClientSendEndBattleRoyaleMatchForPlayer, bSuccess) == 0x000000, "Member 'FortPlayerControllerAthena_ClientSendEndBattleRoyaleMatchForPlayer::bSuccess' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerAthena_ClientSendEndBattleRoyaleMatchForPlayer, Result) == 0x000008, "Member 'FortPlayerControllerAthena_ClientSendEndBattleRoyaleMatchForPlayer::Result' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerAthena.ClientSendMatchStatsForPlayer
// 0x0074 (0x0074 - 0x0000)
struct FortPlayerControllerAthena_ClientSendMatchStatsForPlayer final
{
public:
	struct FAthenaMatchStats                      Stats;                                             // 0x0000(0x0074)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerAthena_ClientSendMatchStatsForPlayer) == 0x000004, "Wrong alignment on FortPlayerControllerAthena_ClientSendMatchStatsForPlayer");
static_assert(sizeof(FortPlayerControllerAthena_ClientSendMatchStatsForPlayer) == 0x000074, "Wrong size on FortPlayerControllerAthena_ClientSendMatchStatsForPlayer");
static_assert(offsetof(FortPlayerControllerAthena_ClientSendMatchStatsForPlayer, Stats) == 0x000000, "Member 'FortPlayerControllerAthena_ClientSendMatchStatsForPlayer::Stats' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerAthena.ClientSendTeamStatsForPlayer
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerControllerAthena_ClientSendTeamStatsForPlayer final
{
public:
	struct FAthenaMatchTeamStats                  TeamStats;                                         // 0x0000(0x0008)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerAthena_ClientSendTeamStatsForPlayer) == 0x000004, "Wrong alignment on FortPlayerControllerAthena_ClientSendTeamStatsForPlayer");
static_assert(sizeof(FortPlayerControllerAthena_ClientSendTeamStatsForPlayer) == 0x000008, "Wrong size on FortPlayerControllerAthena_ClientSendTeamStatsForPlayer");
static_assert(offsetof(FortPlayerControllerAthena_ClientSendTeamStatsForPlayer, TeamStats) == 0x000000, "Member 'FortPlayerControllerAthena_ClientSendTeamStatsForPlayer::TeamStats' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerAthena.ClientStreamOutBuildingFoundation
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerControllerAthena_ClientStreamOutBuildingFoundation final
{
public:
	class ABuildingFoundation*                    FoundationActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerAthena_ClientStreamOutBuildingFoundation) == 0x000008, "Wrong alignment on FortPlayerControllerAthena_ClientStreamOutBuildingFoundation");
static_assert(sizeof(FortPlayerControllerAthena_ClientStreamOutBuildingFoundation) == 0x000008, "Wrong size on FortPlayerControllerAthena_ClientStreamOutBuildingFoundation");
static_assert(offsetof(FortPlayerControllerAthena_ClientStreamOutBuildingFoundation, FoundationActor) == 0x000000, "Member 'FortPlayerControllerAthena_ClientStreamOutBuildingFoundation::FoundationActor' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerAthena.ClientUnreliableSendMessage
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerControllerAthena_ClientUnreliableSendMessage final
{
public:
	class FText                                   MESSAGE;                                           // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerAthena_ClientUnreliableSendMessage) == 0x000008, "Wrong alignment on FortPlayerControllerAthena_ClientUnreliableSendMessage");
static_assert(sizeof(FortPlayerControllerAthena_ClientUnreliableSendMessage) == 0x000018, "Wrong size on FortPlayerControllerAthena_ClientUnreliableSendMessage");
static_assert(offsetof(FortPlayerControllerAthena_ClientUnreliableSendMessage, MESSAGE) == 0x000000, "Member 'FortPlayerControllerAthena_ClientUnreliableSendMessage::MESSAGE' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerAthena.ClientVoiceChat3DChannelJoin
// 0x0030 (0x0030 - 0x0000)
struct FortPlayerControllerAthena_ClientVoiceChat3DChannelJoin final
{
public:
	class FString                                 InVoiceChatPlayerName;                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InVoiceChatChannel;                                // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 JoinToken;                                         // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerAthena_ClientVoiceChat3DChannelJoin) == 0x000008, "Wrong alignment on FortPlayerControllerAthena_ClientVoiceChat3DChannelJoin");
static_assert(sizeof(FortPlayerControllerAthena_ClientVoiceChat3DChannelJoin) == 0x000030, "Wrong size on FortPlayerControllerAthena_ClientVoiceChat3DChannelJoin");
static_assert(offsetof(FortPlayerControllerAthena_ClientVoiceChat3DChannelJoin, InVoiceChatPlayerName) == 0x000000, "Member 'FortPlayerControllerAthena_ClientVoiceChat3DChannelJoin::InVoiceChatPlayerName' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerAthena_ClientVoiceChat3DChannelJoin, InVoiceChatChannel) == 0x000010, "Member 'FortPlayerControllerAthena_ClientVoiceChat3DChannelJoin::InVoiceChatChannel' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerAthena_ClientVoiceChat3DChannelJoin, JoinToken) == 0x000020, "Member 'FortPlayerControllerAthena_ClientVoiceChat3DChannelJoin::JoinToken' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerAthena.ClientVoiceChatChannelJoin
// 0x0030 (0x0030 - 0x0000)
struct FortPlayerControllerAthena_ClientVoiceChatChannelJoin final
{
public:
	class FString                                 InVoiceChatPlayerName;                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InVoiceChatChannel;                                // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 JoinToken;                                         // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerAthena_ClientVoiceChatChannelJoin) == 0x000008, "Wrong alignment on FortPlayerControllerAthena_ClientVoiceChatChannelJoin");
static_assert(sizeof(FortPlayerControllerAthena_ClientVoiceChatChannelJoin) == 0x000030, "Wrong size on FortPlayerControllerAthena_ClientVoiceChatChannelJoin");
static_assert(offsetof(FortPlayerControllerAthena_ClientVoiceChatChannelJoin, InVoiceChatPlayerName) == 0x000000, "Member 'FortPlayerControllerAthena_ClientVoiceChatChannelJoin::InVoiceChatPlayerName' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerAthena_ClientVoiceChatChannelJoin, InVoiceChatChannel) == 0x000010, "Member 'FortPlayerControllerAthena_ClientVoiceChatChannelJoin::InVoiceChatChannel' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerAthena_ClientVoiceChatChannelJoin, JoinToken) == 0x000020, "Member 'FortPlayerControllerAthena_ClientVoiceChatChannelJoin::JoinToken' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerAthena.ClientVoiceChatLogin
// 0x0020 (0x0020 - 0x0000)
struct FortPlayerControllerAthena_ClientVoiceChatLogin final
{
public:
	class FString                                 InVoiceChatPlayerName;                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LoginToken;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerAthena_ClientVoiceChatLogin) == 0x000008, "Wrong alignment on FortPlayerControllerAthena_ClientVoiceChatLogin");
static_assert(sizeof(FortPlayerControllerAthena_ClientVoiceChatLogin) == 0x000020, "Wrong size on FortPlayerControllerAthena_ClientVoiceChatLogin");
static_assert(offsetof(FortPlayerControllerAthena_ClientVoiceChatLogin, InVoiceChatPlayerName) == 0x000000, "Member 'FortPlayerControllerAthena_ClientVoiceChatLogin::InVoiceChatPlayerName' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerAthena_ClientVoiceChatLogin, LoginToken) == 0x000010, "Member 'FortPlayerControllerAthena_ClientVoiceChatLogin::LoginToken' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerAthena.FullscreenMapCursorHorizontal
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerControllerAthena_FullscreenMapCursorHorizontal final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerAthena_FullscreenMapCursorHorizontal) == 0x000004, "Wrong alignment on FortPlayerControllerAthena_FullscreenMapCursorHorizontal");
static_assert(sizeof(FortPlayerControllerAthena_FullscreenMapCursorHorizontal) == 0x000004, "Wrong size on FortPlayerControllerAthena_FullscreenMapCursorHorizontal");
static_assert(offsetof(FortPlayerControllerAthena_FullscreenMapCursorHorizontal, Value) == 0x000000, "Member 'FortPlayerControllerAthena_FullscreenMapCursorHorizontal::Value' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerAthena.FullscreenMapCursorHorizontal_Gamepad
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerControllerAthena_FullscreenMapCursorHorizontal_Gamepad final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerAthena_FullscreenMapCursorHorizontal_Gamepad) == 0x000004, "Wrong alignment on FortPlayerControllerAthena_FullscreenMapCursorHorizontal_Gamepad");
static_assert(sizeof(FortPlayerControllerAthena_FullscreenMapCursorHorizontal_Gamepad) == 0x000004, "Wrong size on FortPlayerControllerAthena_FullscreenMapCursorHorizontal_Gamepad");
static_assert(offsetof(FortPlayerControllerAthena_FullscreenMapCursorHorizontal_Gamepad, Value) == 0x000000, "Member 'FortPlayerControllerAthena_FullscreenMapCursorHorizontal_Gamepad::Value' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerAthena.FullscreenMapCursorVertical
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerControllerAthena_FullscreenMapCursorVertical final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerAthena_FullscreenMapCursorVertical) == 0x000004, "Wrong alignment on FortPlayerControllerAthena_FullscreenMapCursorVertical");
static_assert(sizeof(FortPlayerControllerAthena_FullscreenMapCursorVertical) == 0x000004, "Wrong size on FortPlayerControllerAthena_FullscreenMapCursorVertical");
static_assert(offsetof(FortPlayerControllerAthena_FullscreenMapCursorVertical, Value) == 0x000000, "Member 'FortPlayerControllerAthena_FullscreenMapCursorVertical::Value' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerAthena.FullscreenMapCursorVertical_Gamepad
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerControllerAthena_FullscreenMapCursorVertical_Gamepad final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerAthena_FullscreenMapCursorVertical_Gamepad) == 0x000004, "Wrong alignment on FortPlayerControllerAthena_FullscreenMapCursorVertical_Gamepad");
static_assert(sizeof(FortPlayerControllerAthena_FullscreenMapCursorVertical_Gamepad) == 0x000004, "Wrong size on FortPlayerControllerAthena_FullscreenMapCursorVertical_Gamepad");
static_assert(offsetof(FortPlayerControllerAthena_FullscreenMapCursorVertical_Gamepad, Value) == 0x000000, "Member 'FortPlayerControllerAthena_FullscreenMapCursorVertical_Gamepad::Value' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerAthena.GetFPSForHUD
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerControllerAthena_GetFPSForHUD final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerAthena_GetFPSForHUD) == 0x000004, "Wrong alignment on FortPlayerControllerAthena_GetFPSForHUD");
static_assert(sizeof(FortPlayerControllerAthena_GetFPSForHUD) == 0x000004, "Wrong size on FortPlayerControllerAthena_GetFPSForHUD");
static_assert(offsetof(FortPlayerControllerAthena_GetFPSForHUD, ReturnValue) == 0x000000, "Member 'FortPlayerControllerAthena_GetFPSForHUD::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerAthena.GetMatchReport
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerControllerAthena_GetMatchReport final
{
public:
	class UAthenaPlayerMatchReport*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerAthena_GetMatchReport) == 0x000008, "Wrong alignment on FortPlayerControllerAthena_GetMatchReport");
static_assert(sizeof(FortPlayerControllerAthena_GetMatchReport) == 0x000008, "Wrong size on FortPlayerControllerAthena_GetMatchReport");
static_assert(offsetof(FortPlayerControllerAthena_GetMatchReport, ReturnValue) == 0x000000, "Member 'FortPlayerControllerAthena_GetMatchReport::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerAthena.GetSpectatingPlayerName
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerControllerAthena_GetSpectatingPlayerName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerAthena_GetSpectatingPlayerName) == 0x000008, "Wrong alignment on FortPlayerControllerAthena_GetSpectatingPlayerName");
static_assert(sizeof(FortPlayerControllerAthena_GetSpectatingPlayerName) == 0x000010, "Wrong size on FortPlayerControllerAthena_GetSpectatingPlayerName");
static_assert(offsetof(FortPlayerControllerAthena_GetSpectatingPlayerName, ReturnValue) == 0x000000, "Member 'FortPlayerControllerAthena_GetSpectatingPlayerName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerAthena.GetSquadDBNO
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerControllerAthena_GetSquadDBNO final
{
public:
	TArray<bool>                                  DBNOStates;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerAthena_GetSquadDBNO) == 0x000008, "Wrong alignment on FortPlayerControllerAthena_GetSquadDBNO");
static_assert(sizeof(FortPlayerControllerAthena_GetSquadDBNO) == 0x000010, "Wrong size on FortPlayerControllerAthena_GetSquadDBNO");
static_assert(offsetof(FortPlayerControllerAthena_GetSquadDBNO, DBNOStates) == 0x000000, "Member 'FortPlayerControllerAthena_GetSquadDBNO::DBNOStates' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerAthena.GetSquadDead
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerControllerAthena_GetSquadDead final
{
public:
	TArray<bool>                                  DeadStates;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerAthena_GetSquadDead) == 0x000008, "Wrong alignment on FortPlayerControllerAthena_GetSquadDead");
static_assert(sizeof(FortPlayerControllerAthena_GetSquadDead) == 0x000010, "Wrong size on FortPlayerControllerAthena_GetSquadDead");
static_assert(offsetof(FortPlayerControllerAthena_GetSquadDead, DeadStates) == 0x000000, "Member 'FortPlayerControllerAthena_GetSquadDead::DeadStates' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerAthena.GetSquadHitPointFractions
// 0x0020 (0x0020 - 0x0000)
struct FortPlayerControllerAthena_GetSquadHitPointFractions final
{
public:
	TArray<float>                                 HealthFractions;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 ShieldFractions;                                   // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerAthena_GetSquadHitPointFractions) == 0x000008, "Wrong alignment on FortPlayerControllerAthena_GetSquadHitPointFractions");
static_assert(sizeof(FortPlayerControllerAthena_GetSquadHitPointFractions) == 0x000020, "Wrong size on FortPlayerControllerAthena_GetSquadHitPointFractions");
static_assert(offsetof(FortPlayerControllerAthena_GetSquadHitPointFractions, HealthFractions) == 0x000000, "Member 'FortPlayerControllerAthena_GetSquadHitPointFractions::HealthFractions' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerAthena_GetSquadHitPointFractions, ShieldFractions) == 0x000010, "Member 'FortPlayerControllerAthena_GetSquadHitPointFractions::ShieldFractions' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerAthena.GetSquadKills
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerControllerAthena_GetSquadKills final
{
public:
	TArray<int32>                                 Kills;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerAthena_GetSquadKills) == 0x000008, "Wrong alignment on FortPlayerControllerAthena_GetSquadKills");
static_assert(sizeof(FortPlayerControllerAthena_GetSquadKills) == 0x000010, "Wrong size on FortPlayerControllerAthena_GetSquadKills");
static_assert(offsetof(FortPlayerControllerAthena_GetSquadKills, Kills) == 0x000000, "Member 'FortPlayerControllerAthena_GetSquadKills::Kills' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerAthena.GetSquadMuted
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerControllerAthena_GetSquadMuted final
{
public:
	TArray<bool>                                  MutedStates;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerAthena_GetSquadMuted) == 0x000008, "Wrong alignment on FortPlayerControllerAthena_GetSquadMuted");
static_assert(sizeof(FortPlayerControllerAthena_GetSquadMuted) == 0x000010, "Wrong size on FortPlayerControllerAthena_GetSquadMuted");
static_assert(offsetof(FortPlayerControllerAthena_GetSquadMuted, MutedStates) == 0x000000, "Member 'FortPlayerControllerAthena_GetSquadMuted::MutedStates' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerAthena.GetSquadReviving
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerControllerAthena_GetSquadReviving final
{
public:
	TArray<bool>                                  RevivingStates;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerAthena_GetSquadReviving) == 0x000008, "Wrong alignment on FortPlayerControllerAthena_GetSquadReviving");
static_assert(sizeof(FortPlayerControllerAthena_GetSquadReviving) == 0x000010, "Wrong size on FortPlayerControllerAthena_GetSquadReviving");
static_assert(offsetof(FortPlayerControllerAthena_GetSquadReviving, RevivingStates) == 0x000000, "Member 'FortPlayerControllerAthena_GetSquadReviving::RevivingStates' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerAthena.GetSquadTalking
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerControllerAthena_GetSquadTalking final
{
public:
	TArray<bool>                                  TalkingStates;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerAthena_GetSquadTalking) == 0x000008, "Wrong alignment on FortPlayerControllerAthena_GetSquadTalking");
static_assert(sizeof(FortPlayerControllerAthena_GetSquadTalking) == 0x000010, "Wrong size on FortPlayerControllerAthena_GetSquadTalking");
static_assert(offsetof(FortPlayerControllerAthena_GetSquadTalking, TalkingStates) == 0x000000, "Member 'FortPlayerControllerAthena_GetSquadTalking::TalkingStates' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerAthena.HighlightNumberReturned
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerControllerAthena_HighlightNumberReturned final
{
public:
	int32                                         NumHighlights;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerAthena_HighlightNumberReturned) == 0x000004, "Wrong alignment on FortPlayerControllerAthena_HighlightNumberReturned");
static_assert(sizeof(FortPlayerControllerAthena_HighlightNumberReturned) == 0x000004, "Wrong size on FortPlayerControllerAthena_HighlightNumberReturned");
static_assert(offsetof(FortPlayerControllerAthena_HighlightNumberReturned, NumHighlights) == 0x000000, "Member 'FortPlayerControllerAthena_HighlightNumberReturned::NumHighlights' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerAthena.IsLocalPlayerFriendsWithSquadMember
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerControllerAthena_IsLocalPlayerFriendsWithSquadMember final
{
public:
	class AFortPlayerState*                       SquadMember;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerControllerAthena_IsLocalPlayerFriendsWithSquadMember) == 0x000008, "Wrong alignment on FortPlayerControllerAthena_IsLocalPlayerFriendsWithSquadMember");
static_assert(sizeof(FortPlayerControllerAthena_IsLocalPlayerFriendsWithSquadMember) == 0x000010, "Wrong size on FortPlayerControllerAthena_IsLocalPlayerFriendsWithSquadMember");
static_assert(offsetof(FortPlayerControllerAthena_IsLocalPlayerFriendsWithSquadMember, SquadMember) == 0x000000, "Member 'FortPlayerControllerAthena_IsLocalPlayerFriendsWithSquadMember::SquadMember' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerAthena_IsLocalPlayerFriendsWithSquadMember, ReturnValue) == 0x000008, "Member 'FortPlayerControllerAthena_IsLocalPlayerFriendsWithSquadMember::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerAthena.MutePlayer
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerControllerAthena_MutePlayer final
{
public:
	class AFortPlayerState*                       PS;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerAthena_MutePlayer) == 0x000008, "Wrong alignment on FortPlayerControllerAthena_MutePlayer");
static_assert(sizeof(FortPlayerControllerAthena_MutePlayer) == 0x000008, "Wrong size on FortPlayerControllerAthena_MutePlayer");
static_assert(offsetof(FortPlayerControllerAthena_MutePlayer, PS) == 0x000000, "Member 'FortPlayerControllerAthena_MutePlayer::PS' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerAthena.ServerAttemptAircraftJump
// 0x000C (0x000C - 0x0000)
struct FortPlayerControllerAthena_ServerAttemptAircraftJump final
{
public:
	struct FRotator                               ClientRotation;                                    // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerAthena_ServerAttemptAircraftJump) == 0x000004, "Wrong alignment on FortPlayerControllerAthena_ServerAttemptAircraftJump");
static_assert(sizeof(FortPlayerControllerAthena_ServerAttemptAircraftJump) == 0x00000C, "Wrong size on FortPlayerControllerAthena_ServerAttemptAircraftJump");
static_assert(offsetof(FortPlayerControllerAthena_ServerAttemptAircraftJump, ClientRotation) == 0x000000, "Member 'FortPlayerControllerAthena_ServerAttemptAircraftJump::ClientRotation' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerAthena.ServerDBNOReviveInterrupted
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerControllerAthena_ServerDBNOReviveInterrupted final
{
public:
	class AFortPlayerPawnAthena*                  DBNOPawn;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerAthena_ServerDBNOReviveInterrupted) == 0x000008, "Wrong alignment on FortPlayerControllerAthena_ServerDBNOReviveInterrupted");
static_assert(sizeof(FortPlayerControllerAthena_ServerDBNOReviveInterrupted) == 0x000008, "Wrong size on FortPlayerControllerAthena_ServerDBNOReviveInterrupted");
static_assert(offsetof(FortPlayerControllerAthena_ServerDBNOReviveInterrupted, DBNOPawn) == 0x000000, "Member 'FortPlayerControllerAthena_ServerDBNOReviveInterrupted::DBNOPawn' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerAthena.ServerDBNOReviveStarted
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerControllerAthena_ServerDBNOReviveStarted final
{
public:
	class AFortPlayerPawnAthena*                  DBNOPawn;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerAthena_ServerDBNOReviveStarted) == 0x000008, "Wrong alignment on FortPlayerControllerAthena_ServerDBNOReviveStarted");
static_assert(sizeof(FortPlayerControllerAthena_ServerDBNOReviveStarted) == 0x000008, "Wrong size on FortPlayerControllerAthena_ServerDBNOReviveStarted");
static_assert(offsetof(FortPlayerControllerAthena_ServerDBNOReviveStarted, DBNOPawn) == 0x000000, "Member 'FortPlayerControllerAthena_ServerDBNOReviveStarted::DBNOPawn' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerAthena.ServerFollowTeammate
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerControllerAthena_ServerFollowTeammate final
{
public:
	bool                                          bNext;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerAthena_ServerFollowTeammate) == 0x000001, "Wrong alignment on FortPlayerControllerAthena_ServerFollowTeammate");
static_assert(sizeof(FortPlayerControllerAthena_ServerFollowTeammate) == 0x000001, "Wrong size on FortPlayerControllerAthena_ServerFollowTeammate");
static_assert(offsetof(FortPlayerControllerAthena_ServerFollowTeammate, bNext) == 0x000000, "Member 'FortPlayerControllerAthena_ServerFollowTeammate::bNext' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerAthena.ServerPlaceMapCursor
// 0x000C (0x000C - 0x0000)
struct FortPlayerControllerAthena_ServerPlaceMapCursor final
{
public:
	struct FVector_NetQuantize                    CursorPos;                                         // 0x0000(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerAthena_ServerPlaceMapCursor) == 0x000004, "Wrong alignment on FortPlayerControllerAthena_ServerPlaceMapCursor");
static_assert(sizeof(FortPlayerControllerAthena_ServerPlaceMapCursor) == 0x00000C, "Wrong size on FortPlayerControllerAthena_ServerPlaceMapCursor");
static_assert(offsetof(FortPlayerControllerAthena_ServerPlaceMapCursor, CursorPos) == 0x000000, "Member 'FortPlayerControllerAthena_ServerPlaceMapCursor::CursorPos' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerAthena.ServerSendSquadFriend
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerControllerAthena_ServerSendSquadFriend final
{
public:
	class AFortPlayerStateAthena*                 FriendInSquad;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerAthena_ServerSendSquadFriend) == 0x000008, "Wrong alignment on FortPlayerControllerAthena_ServerSendSquadFriend");
static_assert(sizeof(FortPlayerControllerAthena_ServerSendSquadFriend) == 0x000008, "Wrong size on FortPlayerControllerAthena_ServerSendSquadFriend");
static_assert(offsetof(FortPlayerControllerAthena_ServerSendSquadFriend, FriendInSquad) == 0x000000, "Member 'FortPlayerControllerAthena_ServerSendSquadFriend::FriendInSquad' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerAthena.SpawnCar
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerControllerAthena_SpawnCar final
{
public:
	class FString                                 Command;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerAthena_SpawnCar) == 0x000008, "Wrong alignment on FortPlayerControllerAthena_SpawnCar");
static_assert(sizeof(FortPlayerControllerAthena_SpawnCar) == 0x000010, "Wrong size on FortPlayerControllerAthena_SpawnCar");
static_assert(offsetof(FortPlayerControllerAthena_SpawnCar, Command) == 0x000000, "Member 'FortPlayerControllerAthena_SpawnCar::Command' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerAthena.UnMutePlayer
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerControllerAthena_UnMutePlayer final
{
public:
	class AFortPlayerState*                       PS;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerAthena_UnMutePlayer) == 0x000008, "Wrong alignment on FortPlayerControllerAthena_UnMutePlayer");
static_assert(sizeof(FortPlayerControllerAthena_UnMutePlayer) == 0x000008, "Wrong size on FortPlayerControllerAthena_UnMutePlayer");
static_assert(offsetof(FortPlayerControllerAthena_UnMutePlayer, PS) == 0x000000, "Member 'FortPlayerControllerAthena_UnMutePlayer::PS' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerAthena.VoiceChatTalkingStateChanged
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerControllerAthena_VoiceChatTalkingStateChanged final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTalking;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerControllerAthena_VoiceChatTalkingStateChanged) == 0x000008, "Wrong alignment on FortPlayerControllerAthena_VoiceChatTalkingStateChanged");
static_assert(sizeof(FortPlayerControllerAthena_VoiceChatTalkingStateChanged) == 0x000018, "Wrong size on FortPlayerControllerAthena_VoiceChatTalkingStateChanged");
static_assert(offsetof(FortPlayerControllerAthena_VoiceChatTalkingStateChanged, PlayerName) == 0x000000, "Member 'FortPlayerControllerAthena_VoiceChatTalkingStateChanged::PlayerName' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerAthena_VoiceChatTalkingStateChanged, bIsTalking) == 0x000010, "Member 'FortPlayerControllerAthena_VoiceChatTalkingStateChanged::bIsTalking' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerAthena.CanFollowTeammate
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerControllerAthena_CanFollowTeammate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerAthena_CanFollowTeammate) == 0x000001, "Wrong alignment on FortPlayerControllerAthena_CanFollowTeammate");
static_assert(sizeof(FortPlayerControllerAthena_CanFollowTeammate) == 0x000001, "Wrong size on FortPlayerControllerAthena_CanFollowTeammate");
static_assert(offsetof(FortPlayerControllerAthena_CanFollowTeammate, ReturnValue) == 0x000000, "Member 'FortPlayerControllerAthena_CanFollowTeammate::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerAthena.GetRevertPlayerListenerChangeFlag
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerControllerAthena_GetRevertPlayerListenerChangeFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerAthena_GetRevertPlayerListenerChangeFlag) == 0x000001, "Wrong alignment on FortPlayerControllerAthena_GetRevertPlayerListenerChangeFlag");
static_assert(sizeof(FortPlayerControllerAthena_GetRevertPlayerListenerChangeFlag) == 0x000001, "Wrong size on FortPlayerControllerAthena_GetRevertPlayerListenerChangeFlag");
static_assert(offsetof(FortPlayerControllerAthena_GetRevertPlayerListenerChangeFlag, ReturnValue) == 0x000000, "Member 'FortPlayerControllerAthena_GetRevertPlayerListenerChangeFlag::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerAthena.IsInAircraft
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerControllerAthena_IsInAircraft final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerAthena_IsInAircraft) == 0x000001, "Wrong alignment on FortPlayerControllerAthena_IsInAircraft");
static_assert(sizeof(FortPlayerControllerAthena_IsInAircraft) == 0x000001, "Wrong size on FortPlayerControllerAthena_IsInAircraft");
static_assert(offsetof(FortPlayerControllerAthena_IsInAircraft, ReturnValue) == 0x000000, "Member 'FortPlayerControllerAthena_IsInAircraft::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerDeployableBase.ClientOnHordeTierComplete
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerControllerDeployableBase_ClientOnHordeTierComplete final
{
public:
	EFortCompletionResult                         Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerDeployableBase_ClientOnHordeTierComplete) == 0x000001, "Wrong alignment on FortPlayerControllerDeployableBase_ClientOnHordeTierComplete");
static_assert(sizeof(FortPlayerControllerDeployableBase_ClientOnHordeTierComplete) == 0x000001, "Wrong size on FortPlayerControllerDeployableBase_ClientOnHordeTierComplete");
static_assert(offsetof(FortPlayerControllerDeployableBase_ClientOnHordeTierComplete, Result) == 0x000000, "Member 'FortPlayerControllerDeployableBase_ClientOnHordeTierComplete::Result' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerDeployableBase.ClientOnHordeTierInitialized
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerControllerDeployableBase_ClientOnHordeTierInitialized final
{
public:
	TArray<struct FItemAndCount>                  Items;                                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerDeployableBase_ClientOnHordeTierInitialized) == 0x000008, "Wrong alignment on FortPlayerControllerDeployableBase_ClientOnHordeTierInitialized");
static_assert(sizeof(FortPlayerControllerDeployableBase_ClientOnHordeTierInitialized) == 0x000010, "Wrong size on FortPlayerControllerDeployableBase_ClientOnHordeTierInitialized");
static_assert(offsetof(FortPlayerControllerDeployableBase_ClientOnHordeTierInitialized, Items) == 0x000000, "Member 'FortPlayerControllerDeployableBase_ClientOnHordeTierInitialized::Items' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerDeployableBase.ClientOnHordeWaveComplete
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerControllerDeployableBase_ClientOnHordeWaveComplete final
{
public:
	int32                                         Wave;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FItemAndCount>                  Rewards;                                           // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerDeployableBase_ClientOnHordeWaveComplete) == 0x000008, "Wrong alignment on FortPlayerControllerDeployableBase_ClientOnHordeWaveComplete");
static_assert(sizeof(FortPlayerControllerDeployableBase_ClientOnHordeWaveComplete) == 0x000018, "Wrong size on FortPlayerControllerDeployableBase_ClientOnHordeWaveComplete");
static_assert(offsetof(FortPlayerControllerDeployableBase_ClientOnHordeWaveComplete, Wave) == 0x000000, "Member 'FortPlayerControllerDeployableBase_ClientOnHordeWaveComplete::Wave' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerDeployableBase_ClientOnHordeWaveComplete, Rewards) == 0x000008, "Member 'FortPlayerControllerDeployableBase_ClientOnHordeWaveComplete::Rewards' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerDeployableBase.MoveItemFromDeployableBase
// 0x0014 (0x0014 - 0x0000)
struct FortPlayerControllerDeployableBase_MoveItemFromDeployableBase final
{
public:
	struct FGuid                                  ItemOnPlot;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerDeployableBase_MoveItemFromDeployableBase) == 0x000004, "Wrong alignment on FortPlayerControllerDeployableBase_MoveItemFromDeployableBase");
static_assert(sizeof(FortPlayerControllerDeployableBase_MoveItemFromDeployableBase) == 0x000014, "Wrong size on FortPlayerControllerDeployableBase_MoveItemFromDeployableBase");
static_assert(offsetof(FortPlayerControllerDeployableBase_MoveItemFromDeployableBase, ItemOnPlot) == 0x000000, "Member 'FortPlayerControllerDeployableBase_MoveItemFromDeployableBase::ItemOnPlot' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerDeployableBase_MoveItemFromDeployableBase, Count) == 0x000010, "Member 'FortPlayerControllerDeployableBase_MoveItemFromDeployableBase::Count' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerDeployableBase.MoveItemToDeployableBase
// 0x0014 (0x0014 - 0x0000)
struct FortPlayerControllerDeployableBase_MoveItemToDeployableBase final
{
public:
	struct FGuid                                  ItemOnPlayer;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerDeployableBase_MoveItemToDeployableBase) == 0x000004, "Wrong alignment on FortPlayerControllerDeployableBase_MoveItemToDeployableBase");
static_assert(sizeof(FortPlayerControllerDeployableBase_MoveItemToDeployableBase) == 0x000014, "Wrong size on FortPlayerControllerDeployableBase_MoveItemToDeployableBase");
static_assert(offsetof(FortPlayerControllerDeployableBase_MoveItemToDeployableBase, ItemOnPlayer) == 0x000000, "Member 'FortPlayerControllerDeployableBase_MoveItemToDeployableBase::ItemOnPlayer' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerDeployableBase_MoveItemToDeployableBase, Count) == 0x000010, "Member 'FortPlayerControllerDeployableBase_MoveItemToDeployableBase::Count' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerDeployableBase.ServerMoveAllItemsFromDeployableBase
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerControllerDeployableBase_ServerMoveAllItemsFromDeployableBase final
{
public:
	const class ADeployableBasePlot*              ExpectedPlot;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerDeployableBase_ServerMoveAllItemsFromDeployableBase) == 0x000008, "Wrong alignment on FortPlayerControllerDeployableBase_ServerMoveAllItemsFromDeployableBase");
static_assert(sizeof(FortPlayerControllerDeployableBase_ServerMoveAllItemsFromDeployableBase) == 0x000008, "Wrong size on FortPlayerControllerDeployableBase_ServerMoveAllItemsFromDeployableBase");
static_assert(offsetof(FortPlayerControllerDeployableBase_ServerMoveAllItemsFromDeployableBase, ExpectedPlot) == 0x000000, "Member 'FortPlayerControllerDeployableBase_ServerMoveAllItemsFromDeployableBase::ExpectedPlot' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerDeployableBase.ServerMoveAllItemsToDeployableBase
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerControllerDeployableBase_ServerMoveAllItemsToDeployableBase final
{
public:
	const class ADeployableBasePlot*              ExpectedPlot;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerDeployableBase_ServerMoveAllItemsToDeployableBase) == 0x000008, "Wrong alignment on FortPlayerControllerDeployableBase_ServerMoveAllItemsToDeployableBase");
static_assert(sizeof(FortPlayerControllerDeployableBase_ServerMoveAllItemsToDeployableBase) == 0x000008, "Wrong size on FortPlayerControllerDeployableBase_ServerMoveAllItemsToDeployableBase");
static_assert(offsetof(FortPlayerControllerDeployableBase_ServerMoveAllItemsToDeployableBase, ExpectedPlot) == 0x000000, "Member 'FortPlayerControllerDeployableBase_ServerMoveAllItemsToDeployableBase::ExpectedPlot' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerDeployableBase.ServerMoveItemFromDeployableBase
// 0x0020 (0x0020 - 0x0000)
struct FortPlayerControllerDeployableBase_ServerMoveItemFromDeployableBase final
{
public:
	struct FGuid                                  ItemOnPlot;                                        // 0x0000(0x0010)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class ADeployableBasePlot*              ExpectedPlot;                                      // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerDeployableBase_ServerMoveItemFromDeployableBase) == 0x000008, "Wrong alignment on FortPlayerControllerDeployableBase_ServerMoveItemFromDeployableBase");
static_assert(sizeof(FortPlayerControllerDeployableBase_ServerMoveItemFromDeployableBase) == 0x000020, "Wrong size on FortPlayerControllerDeployableBase_ServerMoveItemFromDeployableBase");
static_assert(offsetof(FortPlayerControllerDeployableBase_ServerMoveItemFromDeployableBase, ItemOnPlot) == 0x000000, "Member 'FortPlayerControllerDeployableBase_ServerMoveItemFromDeployableBase::ItemOnPlot' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerDeployableBase_ServerMoveItemFromDeployableBase, Count) == 0x000010, "Member 'FortPlayerControllerDeployableBase_ServerMoveItemFromDeployableBase::Count' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerDeployableBase_ServerMoveItemFromDeployableBase, ExpectedPlot) == 0x000018, "Member 'FortPlayerControllerDeployableBase_ServerMoveItemFromDeployableBase::ExpectedPlot' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerDeployableBase.ServerMoveItemToDeployableBase
// 0x0020 (0x0020 - 0x0000)
struct FortPlayerControllerDeployableBase_ServerMoveItemToDeployableBase final
{
public:
	struct FGuid                                  ItemOnPlayer;                                      // 0x0000(0x0010)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class ADeployableBasePlot*              ExpectedPlot;                                      // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerDeployableBase_ServerMoveItemToDeployableBase) == 0x000008, "Wrong alignment on FortPlayerControllerDeployableBase_ServerMoveItemToDeployableBase");
static_assert(sizeof(FortPlayerControllerDeployableBase_ServerMoveItemToDeployableBase) == 0x000020, "Wrong size on FortPlayerControllerDeployableBase_ServerMoveItemToDeployableBase");
static_assert(offsetof(FortPlayerControllerDeployableBase_ServerMoveItemToDeployableBase, ItemOnPlayer) == 0x000000, "Member 'FortPlayerControllerDeployableBase_ServerMoveItemToDeployableBase::ItemOnPlayer' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerDeployableBase_ServerMoveItemToDeployableBase, Count) == 0x000010, "Member 'FortPlayerControllerDeployableBase_ServerMoveItemToDeployableBase::Count' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerDeployableBase_ServerMoveItemToDeployableBase, ExpectedPlot) == 0x000018, "Member 'FortPlayerControllerDeployableBase_ServerMoveItemToDeployableBase::ExpectedPlot' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerFOB.ServerAttemptSelectFOBCore
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerControllerFOB_ServerAttemptSelectFOBCore final
{
public:
	class ABuildingFOBConfigActor*                FOBToSelectOn;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortFOBCoreDecoItemDefinition*         DefToSelect;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerFOB_ServerAttemptSelectFOBCore) == 0x000008, "Wrong alignment on FortPlayerControllerFOB_ServerAttemptSelectFOBCore");
static_assert(sizeof(FortPlayerControllerFOB_ServerAttemptSelectFOBCore) == 0x000010, "Wrong size on FortPlayerControllerFOB_ServerAttemptSelectFOBCore");
static_assert(offsetof(FortPlayerControllerFOB_ServerAttemptSelectFOBCore, FOBToSelectOn) == 0x000000, "Member 'FortPlayerControllerFOB_ServerAttemptSelectFOBCore::FOBToSelectOn' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerFOB_ServerAttemptSelectFOBCore, DefToSelect) == 0x000008, "Member 'FortPlayerControllerFOB_ServerAttemptSelectFOBCore::DefToSelect' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerFOB.ServerReloadFOB
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerControllerFOB_ServerReloadFOB final
{
public:
	class ABuildingFOBConfigActor*                FOBToReload;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerFOB_ServerReloadFOB) == 0x000008, "Wrong alignment on FortPlayerControllerFOB_ServerReloadFOB");
static_assert(sizeof(FortPlayerControllerFOB_ServerReloadFOB) == 0x000008, "Wrong size on FortPlayerControllerFOB_ServerReloadFOB");
static_assert(offsetof(FortPlayerControllerFOB_ServerReloadFOB, FOBToReload) == 0x000000, "Member 'FortPlayerControllerFOB_ServerReloadFOB::FOBToReload' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerFOB.ServerResetFOB
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerControllerFOB_ServerResetFOB final
{
public:
	class ABuildingFOBConfigActor*                FOBToReset;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerFOB_ServerResetFOB) == 0x000008, "Wrong alignment on FortPlayerControllerFOB_ServerResetFOB");
static_assert(sizeof(FortPlayerControllerFOB_ServerResetFOB) == 0x000008, "Wrong size on FortPlayerControllerFOB_ServerResetFOB");
static_assert(offsetof(FortPlayerControllerFOB_ServerResetFOB, FOBToReset) == 0x000000, "Member 'FortPlayerControllerFOB_ServerResetFOB::FOBToReset' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerFOB.ServerSaveFOB
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerControllerFOB_ServerSaveFOB final
{
public:
	class ABuildingFOBConfigActor*                FOBToSave;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerFOB_ServerSaveFOB) == 0x000008, "Wrong alignment on FortPlayerControllerFOB_ServerSaveFOB");
static_assert(sizeof(FortPlayerControllerFOB_ServerSaveFOB) == 0x000008, "Wrong size on FortPlayerControllerFOB_ServerSaveFOB");
static_assert(offsetof(FortPlayerControllerFOB_ServerSaveFOB, FOBToSave) == 0x000000, "Member 'FortPlayerControllerFOB_ServerSaveFOB::FOBToSave' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerKeep.ClientSetPermaniteAvailability
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerControllerKeep_ClientSetPermaniteAvailability final
{
public:
	bool                                          bAvailable;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerKeep_ClientSetPermaniteAvailability) == 0x000001, "Wrong alignment on FortPlayerControllerKeep_ClientSetPermaniteAvailability");
static_assert(sizeof(FortPlayerControllerKeep_ClientSetPermaniteAvailability) == 0x000001, "Wrong size on FortPlayerControllerKeep_ClientSetPermaniteAvailability");
static_assert(offsetof(FortPlayerControllerKeep_ClientSetPermaniteAvailability, bAvailable) == 0x000000, "Member 'FortPlayerControllerKeep_ClientSetPermaniteAvailability::bAvailable' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerKeep.SetPermaniteAvailability
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerControllerKeep_SetPermaniteAvailability final
{
public:
	bool                                          bAvailable;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerKeep_SetPermaniteAvailability) == 0x000001, "Wrong alignment on FortPlayerControllerKeep_SetPermaniteAvailability");
static_assert(sizeof(FortPlayerControllerKeep_SetPermaniteAvailability) == 0x000001, "Wrong size on FortPlayerControllerKeep_SetPermaniteAvailability");
static_assert(offsetof(FortPlayerControllerKeep_SetPermaniteAvailability, bAvailable) == 0x000000, "Member 'FortPlayerControllerKeep_SetPermaniteAvailability::bAvailable' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerOutpost.ClientOnBuildingLevelChanged
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerControllerOutpost_ClientOnBuildingLevelChanged final
{
public:
	class UFortOutpostItemDefinition*             UpgradedBuilding;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InLevelBeforeUpgrade;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerControllerOutpost_ClientOnBuildingLevelChanged) == 0x000008, "Wrong alignment on FortPlayerControllerOutpost_ClientOnBuildingLevelChanged");
static_assert(sizeof(FortPlayerControllerOutpost_ClientOnBuildingLevelChanged) == 0x000010, "Wrong size on FortPlayerControllerOutpost_ClientOnBuildingLevelChanged");
static_assert(offsetof(FortPlayerControllerOutpost_ClientOnBuildingLevelChanged, UpgradedBuilding) == 0x000000, "Member 'FortPlayerControllerOutpost_ClientOnBuildingLevelChanged::UpgradedBuilding' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerOutpost_ClientOnBuildingLevelChanged, InLevelBeforeUpgrade) == 0x000008, "Member 'FortPlayerControllerOutpost_ClientOnBuildingLevelChanged::InLevelBeforeUpgrade' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerOutpost.ServerDepositPOSTResource
// 0x0014 (0x0014 - 0x0000)
struct FortPlayerControllerOutpost_ServerDepositPOSTResource final
{
public:
	struct FGuid                                  ItemGuid;                                          // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerOutpost_ServerDepositPOSTResource) == 0x000004, "Wrong alignment on FortPlayerControllerOutpost_ServerDepositPOSTResource");
static_assert(sizeof(FortPlayerControllerOutpost_ServerDepositPOSTResource) == 0x000014, "Wrong size on FortPlayerControllerOutpost_ServerDepositPOSTResource");
static_assert(offsetof(FortPlayerControllerOutpost_ServerDepositPOSTResource, ItemGuid) == 0x000000, "Member 'FortPlayerControllerOutpost_ServerDepositPOSTResource::ItemGuid' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerOutpost_ServerDepositPOSTResource, Count) == 0x000010, "Member 'FortPlayerControllerOutpost_ServerDepositPOSTResource::Count' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerOutpost.ServerDisintegrateItem
// 0x0014 (0x0014 - 0x0000)
struct FortPlayerControllerOutpost_ServerDisintegrateItem final
{
public:
	struct FGuid                                  ItemGuid;                                          // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerOutpost_ServerDisintegrateItem) == 0x000004, "Wrong alignment on FortPlayerControllerOutpost_ServerDisintegrateItem");
static_assert(sizeof(FortPlayerControllerOutpost_ServerDisintegrateItem) == 0x000014, "Wrong size on FortPlayerControllerOutpost_ServerDisintegrateItem");
static_assert(offsetof(FortPlayerControllerOutpost_ServerDisintegrateItem, ItemGuid) == 0x000000, "Member 'FortPlayerControllerOutpost_ServerDisintegrateItem::ItemGuid' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerOutpost_ServerDisintegrateItem, Count) == 0x000010, "Member 'FortPlayerControllerOutpost_ServerDisintegrateItem::Count' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerOutpost.ServerFabricateItem
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerControllerOutpost_ServerFabricateItem final
{
public:
	const class UFortWorldItemDefinition*         ItemDef;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerOutpost_ServerFabricateItem) == 0x000008, "Wrong alignment on FortPlayerControllerOutpost_ServerFabricateItem");
static_assert(sizeof(FortPlayerControllerOutpost_ServerFabricateItem) == 0x000008, "Wrong size on FortPlayerControllerOutpost_ServerFabricateItem");
static_assert(offsetof(FortPlayerControllerOutpost_ServerFabricateItem, ItemDef) == 0x000000, "Member 'FortPlayerControllerOutpost_ServerFabricateItem::ItemDef' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerOutpost.ServerMoveItemFromStorageVault
// 0x00B0 (0x00B0 - 0x0000)
struct FortPlayerControllerOutpost_ServerMoveItemFromStorageVault final
{
public:
	struct FFortItemEntry                         NewlyCollectedItem;                                // 0x0000(0x00B0)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerOutpost_ServerMoveItemFromStorageVault) == 0x000008, "Wrong alignment on FortPlayerControllerOutpost_ServerMoveItemFromStorageVault");
static_assert(sizeof(FortPlayerControllerOutpost_ServerMoveItemFromStorageVault) == 0x0000B0, "Wrong size on FortPlayerControllerOutpost_ServerMoveItemFromStorageVault");
static_assert(offsetof(FortPlayerControllerOutpost_ServerMoveItemFromStorageVault, NewlyCollectedItem) == 0x000000, "Member 'FortPlayerControllerOutpost_ServerMoveItemFromStorageVault::NewlyCollectedItem' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerOutpost.ServerMoveItemToStorageVault
// 0x00B0 (0x00B0 - 0x0000)
struct FortPlayerControllerOutpost_ServerMoveItemToStorageVault final
{
public:
	struct FFortItemEntry                         NewlyStoredItem;                                   // 0x0000(0x00B0)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerOutpost_ServerMoveItemToStorageVault) == 0x000008, "Wrong alignment on FortPlayerControllerOutpost_ServerMoveItemToStorageVault");
static_assert(sizeof(FortPlayerControllerOutpost_ServerMoveItemToStorageVault) == 0x0000B0, "Wrong size on FortPlayerControllerOutpost_ServerMoveItemToStorageVault");
static_assert(offsetof(FortPlayerControllerOutpost_ServerMoveItemToStorageVault, NewlyStoredItem) == 0x000000, "Member 'FortPlayerControllerOutpost_ServerMoveItemToStorageVault::NewlyStoredItem' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerOutpost.ServerUpgradeBuilding
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerControllerOutpost_ServerUpgradeBuilding final
{
public:
	class UFortOutpostItemDefinition*             BuildingToUpgrade;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerOutpost_ServerUpgradeBuilding) == 0x000008, "Wrong alignment on FortPlayerControllerOutpost_ServerUpgradeBuilding");
static_assert(sizeof(FortPlayerControllerOutpost_ServerUpgradeBuilding) == 0x000008, "Wrong size on FortPlayerControllerOutpost_ServerUpgradeBuilding");
static_assert(offsetof(FortPlayerControllerOutpost_ServerUpgradeBuilding, BuildingToUpgrade) == 0x000000, "Member 'FortPlayerControllerOutpost_ServerUpgradeBuilding::BuildingToUpgrade' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerOutpost.UpgradeBuilding
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerControllerOutpost_UpgradeBuilding final
{
public:
	EOutpostBuildings                             OutpostBuilding;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerOutpost_UpgradeBuilding) == 0x000001, "Wrong alignment on FortPlayerControllerOutpost_UpgradeBuilding");
static_assert(sizeof(FortPlayerControllerOutpost_UpgradeBuilding) == 0x000001, "Wrong size on FortPlayerControllerOutpost_UpgradeBuilding");
static_assert(offsetof(FortPlayerControllerOutpost_UpgradeBuilding, OutpostBuilding) == 0x000000, "Member 'FortPlayerControllerOutpost_UpgradeBuilding::OutpostBuilding' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerOutpost.UpgradeBuildingByDefinition
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerControllerOutpost_UpgradeBuildingByDefinition final
{
public:
	class UFortOutpostItemDefinition*             OutpostBuilding;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerOutpost_UpgradeBuildingByDefinition) == 0x000008, "Wrong alignment on FortPlayerControllerOutpost_UpgradeBuildingByDefinition");
static_assert(sizeof(FortPlayerControllerOutpost_UpgradeBuildingByDefinition) == 0x000008, "Wrong size on FortPlayerControllerOutpost_UpgradeBuildingByDefinition");
static_assert(offsetof(FortPlayerControllerOutpost_UpgradeBuildingByDefinition, OutpostBuilding) == 0x000000, "Member 'FortPlayerControllerOutpost_UpgradeBuildingByDefinition::OutpostBuilding' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerOutpost.CanUpgradeBuilding
// 0x0003 (0x0003 - 0x0000)
struct FortPlayerControllerOutpost_CanUpgradeBuilding final
{
public:
	EOutpostBuildings                             OutpostBuilding;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLog;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerOutpost_CanUpgradeBuilding) == 0x000001, "Wrong alignment on FortPlayerControllerOutpost_CanUpgradeBuilding");
static_assert(sizeof(FortPlayerControllerOutpost_CanUpgradeBuilding) == 0x000003, "Wrong size on FortPlayerControllerOutpost_CanUpgradeBuilding");
static_assert(offsetof(FortPlayerControllerOutpost_CanUpgradeBuilding, OutpostBuilding) == 0x000000, "Member 'FortPlayerControllerOutpost_CanUpgradeBuilding::OutpostBuilding' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerOutpost_CanUpgradeBuilding, bLog) == 0x000001, "Member 'FortPlayerControllerOutpost_CanUpgradeBuilding::bLog' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerOutpost_CanUpgradeBuilding, ReturnValue) == 0x000002, "Member 'FortPlayerControllerOutpost_CanUpgradeBuilding::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerOutpost.CanUpgradeBuildingFromDefinition
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerControllerOutpost_CanUpgradeBuildingFromDefinition final
{
public:
	class UFortOutpostItemDefinition*             OutpostBuilding;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLog;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerControllerOutpost_CanUpgradeBuildingFromDefinition) == 0x000008, "Wrong alignment on FortPlayerControllerOutpost_CanUpgradeBuildingFromDefinition");
static_assert(sizeof(FortPlayerControllerOutpost_CanUpgradeBuildingFromDefinition) == 0x000010, "Wrong size on FortPlayerControllerOutpost_CanUpgradeBuildingFromDefinition");
static_assert(offsetof(FortPlayerControllerOutpost_CanUpgradeBuildingFromDefinition, OutpostBuilding) == 0x000000, "Member 'FortPlayerControllerOutpost_CanUpgradeBuildingFromDefinition::OutpostBuilding' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerOutpost_CanUpgradeBuildingFromDefinition, bLog) == 0x000008, "Member 'FortPlayerControllerOutpost_CanUpgradeBuildingFromDefinition::bLog' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerOutpost_CanUpgradeBuildingFromDefinition, ReturnValue) == 0x000009, "Member 'FortPlayerControllerOutpost_CanUpgradeBuildingFromDefinition::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerOutpost.GetBuildingLevel
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerControllerOutpost_GetBuildingLevel final
{
public:
	EOutpostBuildings                             OutpostBuilding;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerOutpost_GetBuildingLevel) == 0x000004, "Wrong alignment on FortPlayerControllerOutpost_GetBuildingLevel");
static_assert(sizeof(FortPlayerControllerOutpost_GetBuildingLevel) == 0x000008, "Wrong size on FortPlayerControllerOutpost_GetBuildingLevel");
static_assert(offsetof(FortPlayerControllerOutpost_GetBuildingLevel, OutpostBuilding) == 0x000000, "Member 'FortPlayerControllerOutpost_GetBuildingLevel::OutpostBuilding' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerOutpost_GetBuildingLevel, ReturnValue) == 0x000004, "Member 'FortPlayerControllerOutpost_GetBuildingLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerOutpost.GetBuildingLevelFromDefinition
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerControllerOutpost_GetBuildingLevelFromDefinition final
{
public:
	class UFortOutpostItemDefinition*             OutpostBuilding;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerControllerOutpost_GetBuildingLevelFromDefinition) == 0x000008, "Wrong alignment on FortPlayerControllerOutpost_GetBuildingLevelFromDefinition");
static_assert(sizeof(FortPlayerControllerOutpost_GetBuildingLevelFromDefinition) == 0x000010, "Wrong size on FortPlayerControllerOutpost_GetBuildingLevelFromDefinition");
static_assert(offsetof(FortPlayerControllerOutpost_GetBuildingLevelFromDefinition, OutpostBuilding) == 0x000000, "Member 'FortPlayerControllerOutpost_GetBuildingLevelFromDefinition::OutpostBuilding' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerOutpost_GetBuildingLevelFromDefinition, ReturnValue) == 0x000008, "Member 'FortPlayerControllerOutpost_GetBuildingLevelFromDefinition::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerOutpost.GetBuildingMaxLevel
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerControllerOutpost_GetBuildingMaxLevel final
{
public:
	EOutpostBuildings                             OutpostBuilding;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerOutpost_GetBuildingMaxLevel) == 0x000004, "Wrong alignment on FortPlayerControllerOutpost_GetBuildingMaxLevel");
static_assert(sizeof(FortPlayerControllerOutpost_GetBuildingMaxLevel) == 0x000008, "Wrong size on FortPlayerControllerOutpost_GetBuildingMaxLevel");
static_assert(offsetof(FortPlayerControllerOutpost_GetBuildingMaxLevel, OutpostBuilding) == 0x000000, "Member 'FortPlayerControllerOutpost_GetBuildingMaxLevel::OutpostBuilding' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerOutpost_GetBuildingMaxLevel, ReturnValue) == 0x000004, "Member 'FortPlayerControllerOutpost_GetBuildingMaxLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerOutpost.GetBuildingMaxLevelFromDefinition
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerControllerOutpost_GetBuildingMaxLevelFromDefinition final
{
public:
	class UFortOutpostItemDefinition*             OutpostBuilding;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerControllerOutpost_GetBuildingMaxLevelFromDefinition) == 0x000008, "Wrong alignment on FortPlayerControllerOutpost_GetBuildingMaxLevelFromDefinition");
static_assert(sizeof(FortPlayerControllerOutpost_GetBuildingMaxLevelFromDefinition) == 0x000010, "Wrong size on FortPlayerControllerOutpost_GetBuildingMaxLevelFromDefinition");
static_assert(offsetof(FortPlayerControllerOutpost_GetBuildingMaxLevelFromDefinition, OutpostBuilding) == 0x000000, "Member 'FortPlayerControllerOutpost_GetBuildingMaxLevelFromDefinition::OutpostBuilding' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerOutpost_GetBuildingMaxLevelFromDefinition, ReturnValue) == 0x000008, "Member 'FortPlayerControllerOutpost_GetBuildingMaxLevelFromDefinition::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerOutpost.GetBuildingUpgradeCost
// 0x0028 (0x0028 - 0x0000)
struct FortPlayerControllerOutpost_GetBuildingUpgradeCost final
{
public:
	EOutpostBuildings                             OutpostBuilding;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortItemQuantityPair>          OutWorldItems;                                     // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortItemQuantityPair>          OutAccountItems;                                   // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerOutpost_GetBuildingUpgradeCost) == 0x000008, "Wrong alignment on FortPlayerControllerOutpost_GetBuildingUpgradeCost");
static_assert(sizeof(FortPlayerControllerOutpost_GetBuildingUpgradeCost) == 0x000028, "Wrong size on FortPlayerControllerOutpost_GetBuildingUpgradeCost");
static_assert(offsetof(FortPlayerControllerOutpost_GetBuildingUpgradeCost, OutpostBuilding) == 0x000000, "Member 'FortPlayerControllerOutpost_GetBuildingUpgradeCost::OutpostBuilding' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerOutpost_GetBuildingUpgradeCost, OutWorldItems) == 0x000008, "Member 'FortPlayerControllerOutpost_GetBuildingUpgradeCost::OutWorldItems' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerOutpost_GetBuildingUpgradeCost, OutAccountItems) == 0x000018, "Member 'FortPlayerControllerOutpost_GetBuildingUpgradeCost::OutAccountItems' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerOutpost.GetBuildingUpgradeCostFromDefinition
// 0x0028 (0x0028 - 0x0000)
struct FortPlayerControllerOutpost_GetBuildingUpgradeCostFromDefinition final
{
public:
	class UFortOutpostItemDefinition*             OutpostBuilding;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortItemQuantityPair>          OutWorldItems;                                     // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortItemQuantityPair>          OutAccountItems;                                   // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerOutpost_GetBuildingUpgradeCostFromDefinition) == 0x000008, "Wrong alignment on FortPlayerControllerOutpost_GetBuildingUpgradeCostFromDefinition");
static_assert(sizeof(FortPlayerControllerOutpost_GetBuildingUpgradeCostFromDefinition) == 0x000028, "Wrong size on FortPlayerControllerOutpost_GetBuildingUpgradeCostFromDefinition");
static_assert(offsetof(FortPlayerControllerOutpost_GetBuildingUpgradeCostFromDefinition, OutpostBuilding) == 0x000000, "Member 'FortPlayerControllerOutpost_GetBuildingUpgradeCostFromDefinition::OutpostBuilding' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerOutpost_GetBuildingUpgradeCostFromDefinition, OutWorldItems) == 0x000008, "Member 'FortPlayerControllerOutpost_GetBuildingUpgradeCostFromDefinition::OutWorldItems' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerOutpost_GetBuildingUpgradeCostFromDefinition, OutAccountItems) == 0x000018, "Member 'FortPlayerControllerOutpost_GetBuildingUpgradeCostFromDefinition::OutAccountItems' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerOutpost.GetOutpostCoreLevel
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerControllerOutpost_GetOutpostCoreLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerOutpost_GetOutpostCoreLevel) == 0x000004, "Wrong alignment on FortPlayerControllerOutpost_GetOutpostCoreLevel");
static_assert(sizeof(FortPlayerControllerOutpost_GetOutpostCoreLevel) == 0x000004, "Wrong size on FortPlayerControllerOutpost_GetOutpostCoreLevel");
static_assert(offsetof(FortPlayerControllerOutpost_GetOutpostCoreLevel, ReturnValue) == 0x000000, "Member 'FortPlayerControllerOutpost_GetOutpostCoreLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerOutpost.GetPendingFabricationProgress
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerControllerOutpost_GetPendingFabricationProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerOutpost_GetPendingFabricationProgress) == 0x000004, "Wrong alignment on FortPlayerControllerOutpost_GetPendingFabricationProgress");
static_assert(sizeof(FortPlayerControllerOutpost_GetPendingFabricationProgress) == 0x000004, "Wrong size on FortPlayerControllerOutpost_GetPendingFabricationProgress");
static_assert(offsetof(FortPlayerControllerOutpost_GetPendingFabricationProgress, ReturnValue) == 0x000000, "Member 'FortPlayerControllerOutpost_GetPendingFabricationProgress::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerOutpost.GetPendingItemToFabricate
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerControllerOutpost_GetPendingItemToFabricate final
{
public:
	class UFortWorldItemDefinition*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerOutpost_GetPendingItemToFabricate) == 0x000008, "Wrong alignment on FortPlayerControllerOutpost_GetPendingItemToFabricate");
static_assert(sizeof(FortPlayerControllerOutpost_GetPendingItemToFabricate) == 0x000008, "Wrong size on FortPlayerControllerOutpost_GetPendingItemToFabricate");
static_assert(offsetof(FortPlayerControllerOutpost_GetPendingItemToFabricate, ReturnValue) == 0x000000, "Member 'FortPlayerControllerOutpost_GetPendingItemToFabricate::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerOutpost.IsFabricationPending
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerControllerOutpost_IsFabricationPending final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerOutpost_IsFabricationPending) == 0x000001, "Wrong alignment on FortPlayerControllerOutpost_IsFabricationPending");
static_assert(sizeof(FortPlayerControllerOutpost_IsFabricationPending) == 0x000001, "Wrong size on FortPlayerControllerOutpost_IsFabricationPending");
static_assert(offsetof(FortPlayerControllerOutpost_IsFabricationPending, ReturnValue) == 0x000000, "Member 'FortPlayerControllerOutpost_IsFabricationPending::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerOutpost.IsOutpostOwner
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerControllerOutpost_IsOutpostOwner final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerOutpost_IsOutpostOwner) == 0x000001, "Wrong alignment on FortPlayerControllerOutpost_IsOutpostOwner");
static_assert(sizeof(FortPlayerControllerOutpost_IsOutpostOwner) == 0x000001, "Wrong size on FortPlayerControllerOutpost_IsOutpostOwner");
static_assert(offsetof(FortPlayerControllerOutpost_IsOutpostOwner, ReturnValue) == 0x000000, "Member 'FortPlayerControllerOutpost_IsOutpostOwner::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerMannequin.CyclePartBP
// 0x0003 (0x0003 - 0x0000)
struct FortPlayerMannequin_CyclePartBP final
{
public:
	EFortCustomPartType                           Part;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNextPart;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerMannequin_CyclePartBP) == 0x000001, "Wrong alignment on FortPlayerMannequin_CyclePartBP");
static_assert(sizeof(FortPlayerMannequin_CyclePartBP) == 0x000003, "Wrong size on FortPlayerMannequin_CyclePartBP");
static_assert(offsetof(FortPlayerMannequin_CyclePartBP, Part) == 0x000000, "Member 'FortPlayerMannequin_CyclePartBP::Part' has a wrong offset!");
static_assert(offsetof(FortPlayerMannequin_CyclePartBP, bNextPart) == 0x000001, "Member 'FortPlayerMannequin_CyclePartBP::bNextPart' has a wrong offset!");
static_assert(offsetof(FortPlayerMannequin_CyclePartBP, ReturnValue) == 0x000002, "Member 'FortPlayerMannequin_CyclePartBP::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerMannequin.GetAllPartSkeletalMeshComponents
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerMannequin_GetAllPartSkeletalMeshComponents final
{
public:
	TArray<class USkeletalMeshComponent*>         SkeletalMeshComponents;                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerMannequin_GetAllPartSkeletalMeshComponents) == 0x000008, "Wrong alignment on FortPlayerMannequin_GetAllPartSkeletalMeshComponents");
static_assert(sizeof(FortPlayerMannequin_GetAllPartSkeletalMeshComponents) == 0x000010, "Wrong size on FortPlayerMannequin_GetAllPartSkeletalMeshComponents");
static_assert(offsetof(FortPlayerMannequin_GetAllPartSkeletalMeshComponents, SkeletalMeshComponents) == 0x000000, "Member 'FortPlayerMannequin_GetAllPartSkeletalMeshComponents::SkeletalMeshComponents' has a wrong offset!");

// Function FortniteGame.FortPlayerMannequin.RemovePart
// 0x0002 (0x0002 - 0x0000)
struct FortPlayerMannequin_RemovePart final
{
public:
	EFortCustomPartType                           Part;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerMannequin_RemovePart) == 0x000001, "Wrong alignment on FortPlayerMannequin_RemovePart");
static_assert(sizeof(FortPlayerMannequin_RemovePart) == 0x000002, "Wrong size on FortPlayerMannequin_RemovePart");
static_assert(offsetof(FortPlayerMannequin_RemovePart, Part) == 0x000000, "Member 'FortPlayerMannequin_RemovePart::Part' has a wrong offset!");
static_assert(offsetof(FortPlayerMannequin_RemovePart, ReturnValue) == 0x000001, "Member 'FortPlayerMannequin_RemovePart::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerMannequin.SetHeroType
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerMannequin_SetHeroType final
{
public:
	class UFortHeroType*                          NewHeroType;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerMannequin_SetHeroType) == 0x000008, "Wrong alignment on FortPlayerMannequin_SetHeroType");
static_assert(sizeof(FortPlayerMannequin_SetHeroType) == 0x000008, "Wrong size on FortPlayerMannequin_SetHeroType");
static_assert(offsetof(FortPlayerMannequin_SetHeroType, NewHeroType) == 0x000000, "Member 'FortPlayerMannequin_SetHeroType::NewHeroType' has a wrong offset!");

// Function FortniteGame.FortPlayerMannequin.SetPart
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerMannequin_SetPart final
{
public:
	EFortCustomPartType                           Part;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCustomCharacterPart*                   PartAsset;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerMannequin_SetPart) == 0x000008, "Wrong alignment on FortPlayerMannequin_SetPart");
static_assert(sizeof(FortPlayerMannequin_SetPart) == 0x000018, "Wrong size on FortPlayerMannequin_SetPart");
static_assert(offsetof(FortPlayerMannequin_SetPart, Part) == 0x000000, "Member 'FortPlayerMannequin_SetPart::Part' has a wrong offset!");
static_assert(offsetof(FortPlayerMannequin_SetPart, PartAsset) == 0x000008, "Member 'FortPlayerMannequin_SetPart::PartAsset' has a wrong offset!");
static_assert(offsetof(FortPlayerMannequin_SetPart, ReturnValue) == 0x000010, "Member 'FortPlayerMannequin_SetPart::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerMannequin.SetSkeletalMesh
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerMannequin_SetSkeletalMesh final
{
public:
	class USkeletalMesh*                          SkeletalMesh;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerMannequin_SetSkeletalMesh) == 0x000008, "Wrong alignment on FortPlayerMannequin_SetSkeletalMesh");
static_assert(sizeof(FortPlayerMannequin_SetSkeletalMesh) == 0x000008, "Wrong size on FortPlayerMannequin_SetSkeletalMesh");
static_assert(offsetof(FortPlayerMannequin_SetSkeletalMesh, SkeletalMesh) == 0x000000, "Member 'FortPlayerMannequin_SetSkeletalMesh::SkeletalMesh' has a wrong offset!");

// Function FortniteGame.FortPlayerMannequin.SetWeaponSkeletalMesh
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerMannequin_SetWeaponSkeletalMesh final
{
public:
	class USkeletalMesh*                          SkeletalMesh;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerMannequin_SetWeaponSkeletalMesh) == 0x000008, "Wrong alignment on FortPlayerMannequin_SetWeaponSkeletalMesh");
static_assert(sizeof(FortPlayerMannequin_SetWeaponSkeletalMesh) == 0x000010, "Wrong size on FortPlayerMannequin_SetWeaponSkeletalMesh");
static_assert(offsetof(FortPlayerMannequin_SetWeaponSkeletalMesh, SkeletalMesh) == 0x000000, "Member 'FortPlayerMannequin_SetWeaponSkeletalMesh::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(FortPlayerMannequin_SetWeaponSkeletalMesh, ReturnValue) == 0x000008, "Member 'FortPlayerMannequin_SetWeaponSkeletalMesh::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerMannequin.GetGender
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerMannequin_GetGender final
{
public:
	EFortCustomGender                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerMannequin_GetGender) == 0x000001, "Wrong alignment on FortPlayerMannequin_GetGender");
static_assert(sizeof(FortPlayerMannequin_GetGender) == 0x000001, "Wrong size on FortPlayerMannequin_GetGender");
static_assert(offsetof(FortPlayerMannequin_GetGender, ReturnValue) == 0x000000, "Member 'FortPlayerMannequin_GetGender::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerMannequin.GetPartSkeletalMeshComponent
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerMannequin_GetPartSkeletalMeshComponent final
{
public:
	EFortCustomPartType                           Part;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerMannequin_GetPartSkeletalMeshComponent) == 0x000008, "Wrong alignment on FortPlayerMannequin_GetPartSkeletalMeshComponent");
static_assert(sizeof(FortPlayerMannequin_GetPartSkeletalMeshComponent) == 0x000010, "Wrong size on FortPlayerMannequin_GetPartSkeletalMeshComponent");
static_assert(offsetof(FortPlayerMannequin_GetPartSkeletalMeshComponent, Part) == 0x000000, "Member 'FortPlayerMannequin_GetPartSkeletalMeshComponent::Part' has a wrong offset!");
static_assert(offsetof(FortPlayerMannequin_GetPartSkeletalMeshComponent, ReturnValue) == 0x000008, "Member 'FortPlayerMannequin_GetPartSkeletalMeshComponent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.AddAttachment
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerPawn_AddAttachment final
{
public:
	class USkeletalMesh*                          Attachment;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_AddAttachment) == 0x000008, "Wrong alignment on FortPlayerPawn_AddAttachment");
static_assert(sizeof(FortPlayerPawn_AddAttachment) == 0x000008, "Wrong size on FortPlayerPawn_AddAttachment");
static_assert(offsetof(FortPlayerPawn_AddAttachment, Attachment) == 0x000000, "Member 'FortPlayerPawn_AddAttachment::Attachment' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.AnimTrailsNotify
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerPawn_AnimTrailsNotify final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_AnimTrailsNotify) == 0x000001, "Wrong alignment on FortPlayerPawn_AnimTrailsNotify");
static_assert(sizeof(FortPlayerPawn_AnimTrailsNotify) == 0x000001, "Wrong size on FortPlayerPawn_AnimTrailsNotify");
static_assert(offsetof(FortPlayerPawn_AnimTrailsNotify, bActive) == 0x000000, "Member 'FortPlayerPawn_AnimTrailsNotify::bActive' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.AnimTrailsSetup
// 0x0020 (0x0020 - 0x0000)
struct FortPlayerPawn_AnimTrailsSetup final
{
public:
	class UParticleSystem*                        ParticleSystemReference;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FirstSocketName;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SecondSocketName;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerPawn_AnimTrailsSetup) == 0x000008, "Wrong alignment on FortPlayerPawn_AnimTrailsSetup");
static_assert(sizeof(FortPlayerPawn_AnimTrailsSetup) == 0x000020, "Wrong size on FortPlayerPawn_AnimTrailsSetup");
static_assert(offsetof(FortPlayerPawn_AnimTrailsSetup, ParticleSystemReference) == 0x000000, "Member 'FortPlayerPawn_AnimTrailsSetup::ParticleSystemReference' has a wrong offset!");
static_assert(offsetof(FortPlayerPawn_AnimTrailsSetup, FirstSocketName) == 0x000008, "Member 'FortPlayerPawn_AnimTrailsSetup::FirstSocketName' has a wrong offset!");
static_assert(offsetof(FortPlayerPawn_AnimTrailsSetup, SecondSocketName) == 0x000010, "Member 'FortPlayerPawn_AnimTrailsSetup::SecondSocketName' has a wrong offset!");
static_assert(offsetof(FortPlayerPawn_AnimTrailsSetup, Width) == 0x000018, "Member 'FortPlayerPawn_AnimTrailsSetup::Width' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.CanPredictJumpApex
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerPawn_CanPredictJumpApex final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_CanPredictJumpApex) == 0x000001, "Wrong alignment on FortPlayerPawn_CanPredictJumpApex");
static_assert(sizeof(FortPlayerPawn_CanPredictJumpApex) == 0x000001, "Wrong size on FortPlayerPawn_CanPredictJumpApex");
static_assert(offsetof(FortPlayerPawn_CanPredictJumpApex, ReturnValue) == 0x000000, "Member 'FortPlayerPawn_CanPredictJumpApex::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.ClientNotifyAbilityFailed
// 0x0028 (0x0028 - 0x0000)
struct FortPlayerPawn_ClientNotifyAbilityFailed final
{
public:
	const class UGameplayAbility*                 FailedAbility;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  FailedReason;                                      // 0x0008(0x0020)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_ClientNotifyAbilityFailed) == 0x000008, "Wrong alignment on FortPlayerPawn_ClientNotifyAbilityFailed");
static_assert(sizeof(FortPlayerPawn_ClientNotifyAbilityFailed) == 0x000028, "Wrong size on FortPlayerPawn_ClientNotifyAbilityFailed");
static_assert(offsetof(FortPlayerPawn_ClientNotifyAbilityFailed, FailedAbility) == 0x000000, "Member 'FortPlayerPawn_ClientNotifyAbilityFailed::FailedAbility' has a wrong offset!");
static_assert(offsetof(FortPlayerPawn_ClientNotifyAbilityFailed, FailedReason) == 0x000008, "Member 'FortPlayerPawn_ClientNotifyAbilityFailed::FailedReason' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.InternalServerSetTargeting
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerPawn_InternalServerSetTargeting final
{
public:
	bool                                          bNewTargeting;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_InternalServerSetTargeting) == 0x000001, "Wrong alignment on FortPlayerPawn_InternalServerSetTargeting");
static_assert(sizeof(FortPlayerPawn_InternalServerSetTargeting) == 0x000001, "Wrong size on FortPlayerPawn_InternalServerSetTargeting");
static_assert(offsetof(FortPlayerPawn_InternalServerSetTargeting, bNewTargeting) == 0x000000, "Member 'FortPlayerPawn_InternalServerSetTargeting::bNewTargeting' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.RandomizeCharacter
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerPawn_RandomizeCharacter final
{
public:
	class FString                                 GenderString;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_RandomizeCharacter) == 0x000008, "Wrong alignment on FortPlayerPawn_RandomizeCharacter");
static_assert(sizeof(FortPlayerPawn_RandomizeCharacter) == 0x000010, "Wrong size on FortPlayerPawn_RandomizeCharacter");
static_assert(offsetof(FortPlayerPawn_RandomizeCharacter, GenderString) == 0x000000, "Member 'FortPlayerPawn_RandomizeCharacter::GenderString' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.ReviveFromDBNO
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerPawn_ReviveFromDBNO final
{
public:
	class AController*                            EventInstigator;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_ReviveFromDBNO) == 0x000008, "Wrong alignment on FortPlayerPawn_ReviveFromDBNO");
static_assert(sizeof(FortPlayerPawn_ReviveFromDBNO) == 0x000008, "Wrong size on FortPlayerPawn_ReviveFromDBNO");
static_assert(offsetof(FortPlayerPawn_ReviveFromDBNO, EventInstigator) == 0x000000, "Member 'FortPlayerPawn_ReviveFromDBNO::EventInstigator' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.ServerChooseGender
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerPawn_ServerChooseGender final
{
public:
	EFortCustomGender                             Gender;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_ServerChooseGender) == 0x000001, "Wrong alignment on FortPlayerPawn_ServerChooseGender");
static_assert(sizeof(FortPlayerPawn_ServerChooseGender) == 0x000001, "Wrong size on FortPlayerPawn_ServerChooseGender");
static_assert(offsetof(FortPlayerPawn_ServerChooseGender, Gender) == 0x000000, "Member 'FortPlayerPawn_ServerChooseGender::Gender' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.ServerChoosePart
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerPawn_ServerChoosePart final
{
public:
	EFortCustomPartType                           Part;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCustomCharacterPart*                   ChosenCharacterPart;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_ServerChoosePart) == 0x000008, "Wrong alignment on FortPlayerPawn_ServerChoosePart");
static_assert(sizeof(FortPlayerPawn_ServerChoosePart) == 0x000010, "Wrong size on FortPlayerPawn_ServerChoosePart");
static_assert(offsetof(FortPlayerPawn_ServerChoosePart, Part) == 0x000000, "Member 'FortPlayerPawn_ServerChoosePart::Part' has a wrong offset!");
static_assert(offsetof(FortPlayerPawn_ServerChoosePart, ChosenCharacterPart) == 0x000008, "Member 'FortPlayerPawn_ServerChoosePart::ChosenCharacterPart' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.ServerCycleAccessoryColorSwatch
// 0x0002 (0x0002 - 0x0000)
struct FortPlayerPawn_ServerCycleAccessoryColorSwatch final
{
public:
	EFortCustomPartType                           Part;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNext;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_ServerCycleAccessoryColorSwatch) == 0x000001, "Wrong alignment on FortPlayerPawn_ServerCycleAccessoryColorSwatch");
static_assert(sizeof(FortPlayerPawn_ServerCycleAccessoryColorSwatch) == 0x000002, "Wrong size on FortPlayerPawn_ServerCycleAccessoryColorSwatch");
static_assert(offsetof(FortPlayerPawn_ServerCycleAccessoryColorSwatch, Part) == 0x000000, "Member 'FortPlayerPawn_ServerCycleAccessoryColorSwatch::Part' has a wrong offset!");
static_assert(offsetof(FortPlayerPawn_ServerCycleAccessoryColorSwatch, bNext) == 0x000001, "Member 'FortPlayerPawn_ServerCycleAccessoryColorSwatch::bNext' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.ServerCycleColorSwatch
// 0x0002 (0x0002 - 0x0000)
struct FortPlayerPawn_ServerCycleColorSwatch final
{
public:
	EColorSwatchType                              SwatchType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNext;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_ServerCycleColorSwatch) == 0x000001, "Wrong alignment on FortPlayerPawn_ServerCycleColorSwatch");
static_assert(sizeof(FortPlayerPawn_ServerCycleColorSwatch) == 0x000002, "Wrong size on FortPlayerPawn_ServerCycleColorSwatch");
static_assert(offsetof(FortPlayerPawn_ServerCycleColorSwatch, SwatchType) == 0x000000, "Member 'FortPlayerPawn_ServerCycleColorSwatch::SwatchType' has a wrong offset!");
static_assert(offsetof(FortPlayerPawn_ServerCycleColorSwatch, bNext) == 0x000001, "Member 'FortPlayerPawn_ServerCycleColorSwatch::bNext' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.ServerCyclePart
// 0x0002 (0x0002 - 0x0000)
struct FortPlayerPawn_ServerCyclePart final
{
public:
	EFortCustomPartType                           Part;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNextPart;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_ServerCyclePart) == 0x000001, "Wrong alignment on FortPlayerPawn_ServerCyclePart");
static_assert(sizeof(FortPlayerPawn_ServerCyclePart) == 0x000002, "Wrong size on FortPlayerPawn_ServerCyclePart");
static_assert(offsetof(FortPlayerPawn_ServerCyclePart, Part) == 0x000000, "Member 'FortPlayerPawn_ServerCyclePart::Part' has a wrong offset!");
static_assert(offsetof(FortPlayerPawn_ServerCyclePart, bNextPart) == 0x000001, "Member 'FortPlayerPawn_ServerCyclePart::bNextPart' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.ServerHandlePickup
// 0x0020 (0x0020 - 0x0000)
struct FortPlayerPawn_ServerHandlePickup final
{
public:
	class AFortPickup*                            Pickup;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFlyTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InStartDirection;                                  // 0x000C(0x000C)(ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayPickupSound;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerPawn_ServerHandlePickup) == 0x000008, "Wrong alignment on FortPlayerPawn_ServerHandlePickup");
static_assert(sizeof(FortPlayerPawn_ServerHandlePickup) == 0x000020, "Wrong size on FortPlayerPawn_ServerHandlePickup");
static_assert(offsetof(FortPlayerPawn_ServerHandlePickup, Pickup) == 0x000000, "Member 'FortPlayerPawn_ServerHandlePickup::Pickup' has a wrong offset!");
static_assert(offsetof(FortPlayerPawn_ServerHandlePickup, InFlyTime) == 0x000008, "Member 'FortPlayerPawn_ServerHandlePickup::InFlyTime' has a wrong offset!");
static_assert(offsetof(FortPlayerPawn_ServerHandlePickup, InStartDirection) == 0x00000C, "Member 'FortPlayerPawn_ServerHandlePickup::InStartDirection' has a wrong offset!");
static_assert(offsetof(FortPlayerPawn_ServerHandlePickup, bPlayPickupSound) == 0x000018, "Member 'FortPlayerPawn_ServerHandlePickup::bPlayPickupSound' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.ServerReviveFromDBNO
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerPawn_ServerReviveFromDBNO final
{
public:
	class AController*                            EventInstigator;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_ServerReviveFromDBNO) == 0x000008, "Wrong alignment on FortPlayerPawn_ServerReviveFromDBNO");
static_assert(sizeof(FortPlayerPawn_ServerReviveFromDBNO) == 0x000008, "Wrong size on FortPlayerPawn_ServerReviveFromDBNO");
static_assert(offsetof(FortPlayerPawn_ServerReviveFromDBNO, EventInstigator) == 0x000000, "Member 'FortPlayerPawn_ServerReviveFromDBNO::EventInstigator' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.ServerRootMotionInterruptNotifyStopMontage
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerPawn_ServerRootMotionInterruptNotifyStopMontage final
{
public:
	class UAnimMontage*                           MontageToStop;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_ServerRootMotionInterruptNotifyStopMontage) == 0x000008, "Wrong alignment on FortPlayerPawn_ServerRootMotionInterruptNotifyStopMontage");
static_assert(sizeof(FortPlayerPawn_ServerRootMotionInterruptNotifyStopMontage) == 0x000008, "Wrong size on FortPlayerPawn_ServerRootMotionInterruptNotifyStopMontage");
static_assert(offsetof(FortPlayerPawn_ServerRootMotionInterruptNotifyStopMontage, MontageToStop) == 0x000000, "Member 'FortPlayerPawn_ServerRootMotionInterruptNotifyStopMontage::MontageToStop' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.ServerSendAimbotDetectionStatus
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerPawn_ServerSendAimbotDetectionStatus final
{
public:
	TArray<uint8>                                 Payload;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_ServerSendAimbotDetectionStatus) == 0x000008, "Wrong alignment on FortPlayerPawn_ServerSendAimbotDetectionStatus");
static_assert(sizeof(FortPlayerPawn_ServerSendAimbotDetectionStatus) == 0x000010, "Wrong size on FortPlayerPawn_ServerSendAimbotDetectionStatus");
static_assert(offsetof(FortPlayerPawn_ServerSendAimbotDetectionStatus, Payload) == 0x000000, "Member 'FortPlayerPawn_ServerSendAimbotDetectionStatus::Payload' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.ServerSetAimbotDetection
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerPawn_ServerSetAimbotDetection final
{
public:
	bool                                          bEnableDetection;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_ServerSetAimbotDetection) == 0x000001, "Wrong alignment on FortPlayerPawn_ServerSetAimbotDetection");
static_assert(sizeof(FortPlayerPawn_ServerSetAimbotDetection) == 0x000001, "Wrong size on FortPlayerPawn_ServerSetAimbotDetection");
static_assert(offsetof(FortPlayerPawn_ServerSetAimbotDetection, bEnableDetection) == 0x000000, "Member 'FortPlayerPawn_ServerSetAimbotDetection::bEnableDetection' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.ServerSetAttachment
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerPawn_ServerSetAttachment final
{
public:
	class USkeletalMesh*                          Attachment;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_ServerSetAttachment) == 0x000008, "Wrong alignment on FortPlayerPawn_ServerSetAttachment");
static_assert(sizeof(FortPlayerPawn_ServerSetAttachment) == 0x000008, "Wrong size on FortPlayerPawn_ServerSetAttachment");
static_assert(offsetof(FortPlayerPawn_ServerSetAttachment, Attachment) == 0x000000, "Member 'FortPlayerPawn_ServerSetAttachment::Attachment' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.SetFirstPersonCamera
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerPawn_SetFirstPersonCamera final
{
public:
	bool                                          bNewUseFirstPersonCamera;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_SetFirstPersonCamera) == 0x000001, "Wrong alignment on FortPlayerPawn_SetFirstPersonCamera");
static_assert(sizeof(FortPlayerPawn_SetFirstPersonCamera) == 0x000001, "Wrong size on FortPlayerPawn_SetFirstPersonCamera");
static_assert(offsetof(FortPlayerPawn_SetFirstPersonCamera, bNewUseFirstPersonCamera) == 0x000000, "Member 'FortPlayerPawn_SetFirstPersonCamera::bNewUseFirstPersonCamera' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.SetHomeActor
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerPawn_SetHomeActor final
{
public:
	class AActor*                                 NewActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_SetHomeActor) == 0x000008, "Wrong alignment on FortPlayerPawn_SetHomeActor");
static_assert(sizeof(FortPlayerPawn_SetHomeActor) == 0x000008, "Wrong size on FortPlayerPawn_SetHomeActor");
static_assert(offsetof(FortPlayerPawn_SetHomeActor, NewActor) == 0x000000, "Member 'FortPlayerPawn_SetHomeActor::NewActor' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.SetStasisMode
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerPawn_SetStasisMode final
{
public:
	EFortPawnStasisMode                           InStasisMode;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_SetStasisMode) == 0x000001, "Wrong alignment on FortPlayerPawn_SetStasisMode");
static_assert(sizeof(FortPlayerPawn_SetStasisMode) == 0x000001, "Wrong size on FortPlayerPawn_SetStasisMode");
static_assert(offsetof(FortPlayerPawn_SetStasisMode, InStasisMode) == 0x000000, "Member 'FortPlayerPawn_SetStasisMode::InStasisMode' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.SwitchToNextPart
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerPawn_SwitchToNextPart final
{
public:
	class FString                                 PartName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_SwitchToNextPart) == 0x000008, "Wrong alignment on FortPlayerPawn_SwitchToNextPart");
static_assert(sizeof(FortPlayerPawn_SwitchToNextPart) == 0x000010, "Wrong size on FortPlayerPawn_SwitchToNextPart");
static_assert(offsetof(FortPlayerPawn_SwitchToNextPart, PartName) == 0x000000, "Member 'FortPlayerPawn_SwitchToNextPart::PartName' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.SwitchToPreviousPart
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerPawn_SwitchToPreviousPart final
{
public:
	class FString                                 PartName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_SwitchToPreviousPart) == 0x000008, "Wrong alignment on FortPlayerPawn_SwitchToPreviousPart");
static_assert(sizeof(FortPlayerPawn_SwitchToPreviousPart) == 0x000010, "Wrong size on FortPlayerPawn_SwitchToPreviousPart");
static_assert(offsetof(FortPlayerPawn_SwitchToPreviousPart, PartName) == 0x000000, "Member 'FortPlayerPawn_SwitchToPreviousPart::PartName' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.GetCharacterBodyType
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerPawn_GetCharacterBodyType final
{
public:
	EFortCustomBodyType                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_GetCharacterBodyType) == 0x000001, "Wrong alignment on FortPlayerPawn_GetCharacterBodyType");
static_assert(sizeof(FortPlayerPawn_GetCharacterBodyType) == 0x000001, "Wrong size on FortPlayerPawn_GetCharacterBodyType");
static_assert(offsetof(FortPlayerPawn_GetCharacterBodyType, ReturnValue) == 0x000000, "Member 'FortPlayerPawn_GetCharacterBodyType::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.GetCharacterGender
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerPawn_GetCharacterGender final
{
public:
	EFortCustomGender                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_GetCharacterGender) == 0x000001, "Wrong alignment on FortPlayerPawn_GetCharacterGender");
static_assert(sizeof(FortPlayerPawn_GetCharacterGender) == 0x000001, "Wrong size on FortPlayerPawn_GetCharacterGender");
static_assert(offsetof(FortPlayerPawn_GetCharacterGender, ReturnValue) == 0x000000, "Member 'FortPlayerPawn_GetCharacterGender::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.GetExtraLives
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerPawn_GetExtraLives final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_GetExtraLives) == 0x000004, "Wrong alignment on FortPlayerPawn_GetExtraLives");
static_assert(sizeof(FortPlayerPawn_GetExtraLives) == 0x000004, "Wrong size on FortPlayerPawn_GetExtraLives");
static_assert(offsetof(FortPlayerPawn_GetExtraLives, ReturnValue) == 0x000000, "Member 'FortPlayerPawn_GetExtraLives::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.GetGender
// 0x0002 (0x0002 - 0x0000)
struct FortPlayerPawn_GetGender final
{
public:
	bool                                          IsMale;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFemale;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_GetGender) == 0x000001, "Wrong alignment on FortPlayerPawn_GetGender");
static_assert(sizeof(FortPlayerPawn_GetGender) == 0x000002, "Wrong size on FortPlayerPawn_GetGender");
static_assert(offsetof(FortPlayerPawn_GetGender, IsMale) == 0x000000, "Member 'FortPlayerPawn_GetGender::IsMale' has a wrong offset!");
static_assert(offsetof(FortPlayerPawn_GetGender, IsFemale) == 0x000001, "Member 'FortPlayerPawn_GetGender::IsFemale' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.GetHomeActor
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerPawn_GetHomeActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_GetHomeActor) == 0x000008, "Wrong alignment on FortPlayerPawn_GetHomeActor");
static_assert(sizeof(FortPlayerPawn_GetHomeActor) == 0x000008, "Wrong size on FortPlayerPawn_GetHomeActor");
static_assert(offsetof(FortPlayerPawn_GetHomeActor, ReturnValue) == 0x000000, "Member 'FortPlayerPawn_GetHomeActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.GetMaxStamina
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerPawn_GetMaxStamina final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_GetMaxStamina) == 0x000004, "Wrong alignment on FortPlayerPawn_GetMaxStamina");
static_assert(sizeof(FortPlayerPawn_GetMaxStamina) == 0x000004, "Wrong size on FortPlayerPawn_GetMaxStamina");
static_assert(offsetof(FortPlayerPawn_GetMaxStamina, ReturnValue) == 0x000000, "Member 'FortPlayerPawn_GetMaxStamina::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.GetSkeletalMeshForPartType
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerPawn_GetSkeletalMeshForPartType final
{
public:
	EFortCustomPartType                           PartType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_GetSkeletalMeshForPartType) == 0x000008, "Wrong alignment on FortPlayerPawn_GetSkeletalMeshForPartType");
static_assert(sizeof(FortPlayerPawn_GetSkeletalMeshForPartType) == 0x000010, "Wrong size on FortPlayerPawn_GetSkeletalMeshForPartType");
static_assert(offsetof(FortPlayerPawn_GetSkeletalMeshForPartType, PartType) == 0x000000, "Member 'FortPlayerPawn_GetSkeletalMeshForPartType::PartType' has a wrong offset!");
static_assert(offsetof(FortPlayerPawn_GetSkeletalMeshForPartType, ReturnValue) == 0x000008, "Member 'FortPlayerPawn_GetSkeletalMeshForPartType::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.GetStamina
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerPawn_GetStamina final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_GetStamina) == 0x000004, "Wrong alignment on FortPlayerPawn_GetStamina");
static_assert(sizeof(FortPlayerPawn_GetStamina) == 0x000004, "Wrong size on FortPlayerPawn_GetStamina");
static_assert(offsetof(FortPlayerPawn_GetStamina, ReturnValue) == 0x000000, "Member 'FortPlayerPawn_GetStamina::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.GetStasisMode
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerPawn_GetStasisMode final
{
public:
	EFortPawnStasisMode                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_GetStasisMode) == 0x000001, "Wrong alignment on FortPlayerPawn_GetStasisMode");
static_assert(sizeof(FortPlayerPawn_GetStasisMode) == 0x000001, "Wrong size on FortPlayerPawn_GetStasisMode");
static_assert(offsetof(FortPlayerPawn_GetStasisMode, ReturnValue) == 0x000000, "Member 'FortPlayerPawn_GetStasisMode::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.IsSprinting
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerPawn_IsSprinting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_IsSprinting) == 0x000001, "Wrong alignment on FortPlayerPawn_IsSprinting");
static_assert(sizeof(FortPlayerPawn_IsSprinting) == 0x000001, "Wrong size on FortPlayerPawn_IsSprinting");
static_assert(offsetof(FortPlayerPawn_IsSprinting, ReturnValue) == 0x000000, "Member 'FortPlayerPawn_IsSprinting::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.IsUsingHoverboard
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerPawn_IsUsingHoverboard final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_IsUsingHoverboard) == 0x000001, "Wrong alignment on FortPlayerPawn_IsUsingHoverboard");
static_assert(sizeof(FortPlayerPawn_IsUsingHoverboard) == 0x000001, "Wrong size on FortPlayerPawn_IsUsingHoverboard");
static_assert(offsetof(FortPlayerPawn_IsUsingHoverboard, ReturnValue) == 0x000000, "Member 'FortPlayerPawn_IsUsingHoverboard::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.ListCharacterParts
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerPawn_ListCharacterParts final
{
public:
	class FString                                 GenderAndOrPartString;                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_ListCharacterParts) == 0x000008, "Wrong alignment on FortPlayerPawn_ListCharacterParts");
static_assert(sizeof(FortPlayerPawn_ListCharacterParts) == 0x000010, "Wrong size on FortPlayerPawn_ListCharacterParts");
static_assert(offsetof(FortPlayerPawn_ListCharacterParts, GenderAndOrPartString) == 0x000000, "Member 'FortPlayerPawn_ListCharacterParts::GenderAndOrPartString' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.TimeFromJumpApex
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerPawn_TimeFromJumpApex final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_TimeFromJumpApex) == 0x000004, "Wrong alignment on FortPlayerPawn_TimeFromJumpApex");
static_assert(sizeof(FortPlayerPawn_TimeFromJumpApex) == 0x000004, "Wrong size on FortPlayerPawn_TimeFromJumpApex");
static_assert(offsetof(FortPlayerPawn_TimeFromJumpApex, ReturnValue) == 0x000000, "Member 'FortPlayerPawn_TimeFromJumpApex::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerPawnAthena.BushStateChanged
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerPawnAthena_BushStateChanged final
{
public:
	bool                                          bNewBushState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawnAthena_BushStateChanged) == 0x000001, "Wrong alignment on FortPlayerPawnAthena_BushStateChanged");
static_assert(sizeof(FortPlayerPawnAthena_BushStateChanged) == 0x000001, "Wrong size on FortPlayerPawnAthena_BushStateChanged");
static_assert(offsetof(FortPlayerPawnAthena_BushStateChanged, bNewBushState) == 0x000000, "Member 'FortPlayerPawnAthena_BushStateChanged::bNewBushState' has a wrong offset!");

// Function FortniteGame.FortPlayerPawnAthena.GameplayCue_Damage
// 0x00C0 (0x00C0 - 0x0000)
struct FortPlayerPawnAthena_GameplayCue_Damage final
{
public:
	EGameplayCueEvent                             EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00B8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawnAthena_GameplayCue_Damage) == 0x000008, "Wrong alignment on FortPlayerPawnAthena_GameplayCue_Damage");
static_assert(sizeof(FortPlayerPawnAthena_GameplayCue_Damage) == 0x0000C0, "Wrong size on FortPlayerPawnAthena_GameplayCue_Damage");
static_assert(offsetof(FortPlayerPawnAthena_GameplayCue_Damage, EventType) == 0x000000, "Member 'FortPlayerPawnAthena_GameplayCue_Damage::EventType' has a wrong offset!");
static_assert(offsetof(FortPlayerPawnAthena_GameplayCue_Damage, Parameters) == 0x000008, "Member 'FortPlayerPawnAthena_GameplayCue_Damage::Parameters' has a wrong offset!");

// Function FortniteGame.FortPlayerPawnAthena.MarkSafe
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerPawnAthena_MarkSafe final
{
public:
	TSubclassOf<class UGameplayEffect>            GEtoApply;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawnAthena_MarkSafe) == 0x000008, "Wrong alignment on FortPlayerPawnAthena_MarkSafe");
static_assert(sizeof(FortPlayerPawnAthena_MarkSafe) == 0x000008, "Wrong size on FortPlayerPawnAthena_MarkSafe");
static_assert(offsetof(FortPlayerPawnAthena_MarkSafe, GEtoApply) == 0x000000, "Member 'FortPlayerPawnAthena_MarkSafe::GEtoApply' has a wrong offset!");

// Function FortniteGame.FortPlayerPawnAthena.NetMulticast_Athena_BatchedDamageCues
// 0x0058 (0x0058 - 0x0000)
struct FortPlayerPawnAthena_NetMulticast_Athena_BatchedDamageCues final
{
public:
	struct FAthenaBatchedDamageGameplayCues       BatchData;                                         // 0x0000(0x0058)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawnAthena_NetMulticast_Athena_BatchedDamageCues) == 0x000008, "Wrong alignment on FortPlayerPawnAthena_NetMulticast_Athena_BatchedDamageCues");
static_assert(sizeof(FortPlayerPawnAthena_NetMulticast_Athena_BatchedDamageCues) == 0x000058, "Wrong size on FortPlayerPawnAthena_NetMulticast_Athena_BatchedDamageCues");
static_assert(offsetof(FortPlayerPawnAthena_NetMulticast_Athena_BatchedDamageCues, BatchData) == 0x000000, "Member 'FortPlayerPawnAthena_NetMulticast_Athena_BatchedDamageCues::BatchData' has a wrong offset!");

// Function FortniteGame.FortPlayerPawnAthena.NetMulticast_InvokeGameplayCueAdded
// 0x0038 (0x0038 - 0x0000)
struct FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAdded final
{
public:
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPredictionKey                         PredictionKey;                                     // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0020(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAdded) == 0x000008, "Wrong alignment on FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAdded");
static_assert(sizeof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAdded) == 0x000038, "Wrong size on FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAdded");
static_assert(offsetof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAdded, GameplayCueTag) == 0x000000, "Member 'FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAdded::GameplayCueTag' has a wrong offset!");
static_assert(offsetof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAdded, PredictionKey) == 0x000008, "Member 'FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAdded::PredictionKey' has a wrong offset!");
static_assert(offsetof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAdded, EffectContext) == 0x000020, "Member 'FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAdded::EffectContext' has a wrong offset!");

// Function FortniteGame.FortPlayerPawnAthena.NetMulticast_InvokeGameplayCueAdded_WithParams
// 0x00D8 (0x00D8 - 0x0000)
struct FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAdded_WithParams final
{
public:
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPredictionKey                         PredictionKey;                                     // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0020(0x00B8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAdded_WithParams) == 0x000008, "Wrong alignment on FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAdded_WithParams");
static_assert(sizeof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAdded_WithParams) == 0x0000D8, "Wrong size on FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAdded_WithParams");
static_assert(offsetof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAdded_WithParams, GameplayCueTag) == 0x000000, "Member 'FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAdded_WithParams::GameplayCueTag' has a wrong offset!");
static_assert(offsetof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAdded_WithParams, PredictionKey) == 0x000008, "Member 'FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAdded_WithParams::PredictionKey' has a wrong offset!");
static_assert(offsetof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAdded_WithParams, Parameters) == 0x000020, "Member 'FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAdded_WithParams::Parameters' has a wrong offset!");

// Function FortniteGame.FortPlayerPawnAthena.NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec
// 0x0090 (0x0090 - 0x0000)
struct FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec final
{
public:
	struct FGameplayEffectSpecForRPC              Spec;                                              // 0x0000(0x0078)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPredictionKey                         PredictionKey;                                     // 0x0078(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec) == 0x000008, "Wrong alignment on FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec");
static_assert(sizeof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec) == 0x000090, "Wrong size on FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec");
static_assert(offsetof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec, Spec) == 0x000000, "Member 'FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec::Spec' has a wrong offset!");
static_assert(offsetof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec, PredictionKey) == 0x000078, "Member 'FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec::PredictionKey' has a wrong offset!");

// Function FortniteGame.FortPlayerPawnAthena.NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams
// 0x00D8 (0x00D8 - 0x0000)
struct FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams final
{
public:
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPredictionKey                         PredictionKey;                                     // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 GameplayCueParameters;                             // 0x0020(0x00B8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams) == 0x000008, "Wrong alignment on FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams");
static_assert(sizeof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams) == 0x0000D8, "Wrong size on FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams");
static_assert(offsetof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams, GameplayCueTag) == 0x000000, "Member 'FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams::GameplayCueTag' has a wrong offset!");
static_assert(offsetof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams, PredictionKey) == 0x000008, "Member 'FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams::PredictionKey' has a wrong offset!");
static_assert(offsetof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams, GameplayCueParameters) == 0x000020, "Member 'FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams::GameplayCueParameters' has a wrong offset!");

// Function FortniteGame.FortPlayerPawnAthena.NetMulticast_InvokeGameplayCueExecuted
// 0x0038 (0x0038 - 0x0000)
struct FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueExecuted final
{
public:
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPredictionKey                         PredictionKey;                                     // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0020(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueExecuted) == 0x000008, "Wrong alignment on FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueExecuted");
static_assert(sizeof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueExecuted) == 0x000038, "Wrong size on FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueExecuted");
static_assert(offsetof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueExecuted, GameplayCueTag) == 0x000000, "Member 'FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueExecuted::GameplayCueTag' has a wrong offset!");
static_assert(offsetof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueExecuted, PredictionKey) == 0x000008, "Member 'FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueExecuted::PredictionKey' has a wrong offset!");
static_assert(offsetof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueExecuted, EffectContext) == 0x000020, "Member 'FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueExecuted::EffectContext' has a wrong offset!");

// Function FortniteGame.FortPlayerPawnAthena.NetMulticast_InvokeGameplayCueExecuted_FromSpec
// 0x0090 (0x0090 - 0x0000)
struct FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueExecuted_FromSpec final
{
public:
	struct FGameplayEffectSpecForRPC              Spec;                                              // 0x0000(0x0078)(ConstParm, Parm, NativeAccessSpecifierPublic)
	struct FPredictionKey                         PredictionKey;                                     // 0x0078(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueExecuted_FromSpec) == 0x000008, "Wrong alignment on FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueExecuted_FromSpec");
static_assert(sizeof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueExecuted_FromSpec) == 0x000090, "Wrong size on FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueExecuted_FromSpec");
static_assert(offsetof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueExecuted_FromSpec, Spec) == 0x000000, "Member 'FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueExecuted_FromSpec::Spec' has a wrong offset!");
static_assert(offsetof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueExecuted_FromSpec, PredictionKey) == 0x000078, "Member 'FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueExecuted_FromSpec::PredictionKey' has a wrong offset!");

// Function FortniteGame.FortPlayerPawnAthena.NetMulticast_InvokeGameplayCueExecuted_WithParams
// 0x00D8 (0x00D8 - 0x0000)
struct FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueExecuted_WithParams final
{
public:
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPredictionKey                         PredictionKey;                                     // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 GameplayCueParameters;                             // 0x0020(0x00B8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueExecuted_WithParams) == 0x000008, "Wrong alignment on FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueExecuted_WithParams");
static_assert(sizeof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueExecuted_WithParams) == 0x0000D8, "Wrong size on FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueExecuted_WithParams");
static_assert(offsetof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueExecuted_WithParams, GameplayCueTag) == 0x000000, "Member 'FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueExecuted_WithParams::GameplayCueTag' has a wrong offset!");
static_assert(offsetof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueExecuted_WithParams, PredictionKey) == 0x000008, "Member 'FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueExecuted_WithParams::PredictionKey' has a wrong offset!");
static_assert(offsetof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueExecuted_WithParams, GameplayCueParameters) == 0x000020, "Member 'FortPlayerPawnAthena_NetMulticast_InvokeGameplayCueExecuted_WithParams::GameplayCueParameters' has a wrong offset!");

// Function FortniteGame.FortPlayerPawnAthena.NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams
// 0x00F0 (0x00F0 - 0x0000)
struct FortPlayerPawnAthena_NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams final
{
public:
	struct FGameplayTagContainer                  GameplayCueTags;                                   // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	struct FPredictionKey                         PredictionKey;                                     // 0x0020(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 GameplayCueParameters;                             // 0x0038(0x00B8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams) == 0x000008, "Wrong alignment on FortPlayerPawnAthena_NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams");
static_assert(sizeof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams) == 0x0000F0, "Wrong size on FortPlayerPawnAthena_NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams");
static_assert(offsetof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams, GameplayCueTags) == 0x000000, "Member 'FortPlayerPawnAthena_NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams::GameplayCueTags' has a wrong offset!");
static_assert(offsetof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams, PredictionKey) == 0x000020, "Member 'FortPlayerPawnAthena_NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams::PredictionKey' has a wrong offset!");
static_assert(offsetof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams, GameplayCueParameters) == 0x000038, "Member 'FortPlayerPawnAthena_NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams::GameplayCueParameters' has a wrong offset!");

// Function FortniteGame.FortPlayerPawnAthena.NetMulticast_InvokeGameplayCuesExecuted
// 0x0050 (0x0050 - 0x0000)
struct FortPlayerPawnAthena_NetMulticast_InvokeGameplayCuesExecuted final
{
public:
	struct FGameplayTagContainer                  GameplayCueTags;                                   // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	struct FPredictionKey                         PredictionKey;                                     // 0x0020(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0038(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCuesExecuted) == 0x000008, "Wrong alignment on FortPlayerPawnAthena_NetMulticast_InvokeGameplayCuesExecuted");
static_assert(sizeof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCuesExecuted) == 0x000050, "Wrong size on FortPlayerPawnAthena_NetMulticast_InvokeGameplayCuesExecuted");
static_assert(offsetof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCuesExecuted, GameplayCueTags) == 0x000000, "Member 'FortPlayerPawnAthena_NetMulticast_InvokeGameplayCuesExecuted::GameplayCueTags' has a wrong offset!");
static_assert(offsetof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCuesExecuted, PredictionKey) == 0x000020, "Member 'FortPlayerPawnAthena_NetMulticast_InvokeGameplayCuesExecuted::PredictionKey' has a wrong offset!");
static_assert(offsetof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCuesExecuted, EffectContext) == 0x000038, "Member 'FortPlayerPawnAthena_NetMulticast_InvokeGameplayCuesExecuted::EffectContext' has a wrong offset!");

// Function FortniteGame.FortPlayerPawnAthena.NetMulticast_InvokeGameplayCuesExecuted_WithParams
// 0x00F0 (0x00F0 - 0x0000)
struct FortPlayerPawnAthena_NetMulticast_InvokeGameplayCuesExecuted_WithParams final
{
public:
	struct FGameplayTagContainer                  GameplayCueTags;                                   // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	struct FPredictionKey                         PredictionKey;                                     // 0x0020(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 GameplayCueParameters;                             // 0x0038(0x00B8)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCuesExecuted_WithParams) == 0x000008, "Wrong alignment on FortPlayerPawnAthena_NetMulticast_InvokeGameplayCuesExecuted_WithParams");
static_assert(sizeof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCuesExecuted_WithParams) == 0x0000F0, "Wrong size on FortPlayerPawnAthena_NetMulticast_InvokeGameplayCuesExecuted_WithParams");
static_assert(offsetof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCuesExecuted_WithParams, GameplayCueTags) == 0x000000, "Member 'FortPlayerPawnAthena_NetMulticast_InvokeGameplayCuesExecuted_WithParams::GameplayCueTags' has a wrong offset!");
static_assert(offsetof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCuesExecuted_WithParams, PredictionKey) == 0x000020, "Member 'FortPlayerPawnAthena_NetMulticast_InvokeGameplayCuesExecuted_WithParams::PredictionKey' has a wrong offset!");
static_assert(offsetof(FortPlayerPawnAthena_NetMulticast_InvokeGameplayCuesExecuted_WithParams, GameplayCueParameters) == 0x000038, "Member 'FortPlayerPawnAthena_NetMulticast_InvokeGameplayCuesExecuted_WithParams::GameplayCueParameters' has a wrong offset!");

// Function FortniteGame.FortPlayerPawnAthena.OnCapsuleBeginOverlap
// 0x00A0 (0x00A0 - 0x0000)
struct FortPlayerPawnAthena_OnCapsuleBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawnAthena_OnCapsuleBeginOverlap) == 0x000008, "Wrong alignment on FortPlayerPawnAthena_OnCapsuleBeginOverlap");
static_assert(sizeof(FortPlayerPawnAthena_OnCapsuleBeginOverlap) == 0x0000A0, "Wrong size on FortPlayerPawnAthena_OnCapsuleBeginOverlap");
static_assert(offsetof(FortPlayerPawnAthena_OnCapsuleBeginOverlap, OverlappedComp) == 0x000000, "Member 'FortPlayerPawnAthena_OnCapsuleBeginOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(FortPlayerPawnAthena_OnCapsuleBeginOverlap, OtherActor) == 0x000008, "Member 'FortPlayerPawnAthena_OnCapsuleBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(FortPlayerPawnAthena_OnCapsuleBeginOverlap, OtherComp) == 0x000010, "Member 'FortPlayerPawnAthena_OnCapsuleBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(FortPlayerPawnAthena_OnCapsuleBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'FortPlayerPawnAthena_OnCapsuleBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(FortPlayerPawnAthena_OnCapsuleBeginOverlap, bFromSweep) == 0x00001C, "Member 'FortPlayerPawnAthena_OnCapsuleBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(FortPlayerPawnAthena_OnCapsuleBeginOverlap, SweepResult) == 0x000020, "Member 'FortPlayerPawnAthena_OnCapsuleBeginOverlap::SweepResult' has a wrong offset!");

// Function FortniteGame.FortPlayerPawnAthena.OnRep_IsParachuteOpen
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerPawnAthena_OnRep_IsParachuteOpen final
{
public:
	bool                                          bPreviousState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawnAthena_OnRep_IsParachuteOpen) == 0x000001, "Wrong alignment on FortPlayerPawnAthena_OnRep_IsParachuteOpen");
static_assert(sizeof(FortPlayerPawnAthena_OnRep_IsParachuteOpen) == 0x000001, "Wrong size on FortPlayerPawnAthena_OnRep_IsParachuteOpen");
static_assert(offsetof(FortPlayerPawnAthena_OnRep_IsParachuteOpen, bPreviousState) == 0x000000, "Member 'FortPlayerPawnAthena_OnRep_IsParachuteOpen::bPreviousState' has a wrong offset!");

// Function FortniteGame.FortPlayerPawnAthena.OnRep_IsSkydiving
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerPawnAthena_OnRep_IsSkydiving final
{
public:
	bool                                          bPreviousState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawnAthena_OnRep_IsSkydiving) == 0x000001, "Wrong alignment on FortPlayerPawnAthena_OnRep_IsSkydiving");
static_assert(sizeof(FortPlayerPawnAthena_OnRep_IsSkydiving) == 0x000001, "Wrong size on FortPlayerPawnAthena_OnRep_IsSkydiving");
static_assert(offsetof(FortPlayerPawnAthena_OnRep_IsSkydiving, bPreviousState) == 0x000000, "Member 'FortPlayerPawnAthena_OnRep_IsSkydiving::bPreviousState' has a wrong offset!");

// Function FortniteGame.FortPlayerPawnAthena.OnSlidingStateChanged
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerPawnAthena_OnSlidingStateChanged final
{
public:
	bool                                          bNewSlidingState;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawnAthena_OnSlidingStateChanged) == 0x000001, "Wrong alignment on FortPlayerPawnAthena_OnSlidingStateChanged");
static_assert(sizeof(FortPlayerPawnAthena_OnSlidingStateChanged) == 0x000001, "Wrong size on FortPlayerPawnAthena_OnSlidingStateChanged");
static_assert(offsetof(FortPlayerPawnAthena_OnSlidingStateChanged, bNewSlidingState) == 0x000000, "Member 'FortPlayerPawnAthena_OnSlidingStateChanged::bNewSlidingState' has a wrong offset!");

// Function FortniteGame.FortPlayerPawnAthena.SetBushEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerPawnAthena_SetBushEnabled final
{
public:
	bool                                          bEnableBush;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawnAthena_SetBushEnabled) == 0x000001, "Wrong alignment on FortPlayerPawnAthena_SetBushEnabled");
static_assert(sizeof(FortPlayerPawnAthena_SetBushEnabled) == 0x000001, "Wrong size on FortPlayerPawnAthena_SetBushEnabled");
static_assert(offsetof(FortPlayerPawnAthena_SetBushEnabled, bEnableBush) == 0x000000, "Member 'FortPlayerPawnAthena_SetBushEnabled::bEnableBush' has a wrong offset!");

// Function FortniteGame.FortPlayerPawnAthena.StartConsumableUseAudio
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerPawnAthena_StartConsumableUseAudio final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawnAthena_StartConsumableUseAudio) == 0x000008, "Wrong alignment on FortPlayerPawnAthena_StartConsumableUseAudio");
static_assert(sizeof(FortPlayerPawnAthena_StartConsumableUseAudio) == 0x000008, "Wrong size on FortPlayerPawnAthena_StartConsumableUseAudio");
static_assert(offsetof(FortPlayerPawnAthena_StartConsumableUseAudio, Sound) == 0x000000, "Member 'FortPlayerPawnAthena_StartConsumableUseAudio::Sound' has a wrong offset!");

// Function FortniteGame.FortPlayerPawnAthena.GetIsSlopeSliding
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerPawnAthena_GetIsSlopeSliding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawnAthena_GetIsSlopeSliding) == 0x000001, "Wrong alignment on FortPlayerPawnAthena_GetIsSlopeSliding");
static_assert(sizeof(FortPlayerPawnAthena_GetIsSlopeSliding) == 0x000001, "Wrong size on FortPlayerPawnAthena_GetIsSlopeSliding");
static_assert(offsetof(FortPlayerPawnAthena_GetIsSlopeSliding, ReturnValue) == 0x000000, "Member 'FortPlayerPawnAthena_GetIsSlopeSliding::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerPawnAthena.GetPawnLOD
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerPawnAthena_GetPawnLOD final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawnAthena_GetPawnLOD) == 0x000004, "Wrong alignment on FortPlayerPawnAthena_GetPawnLOD");
static_assert(sizeof(FortPlayerPawnAthena_GetPawnLOD) == 0x000004, "Wrong size on FortPlayerPawnAthena_GetPawnLOD");
static_assert(offsetof(FortPlayerPawnAthena_GetPawnLOD, ReturnValue) == 0x000000, "Member 'FortPlayerPawnAthena_GetPawnLOD::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerPawnAthena.GetSlopeSlidingAngles
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerPawnAthena_GetSlopeSlidingAngles final
{
public:
	float                                         LocalPitch;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalRoll;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawnAthena_GetSlopeSlidingAngles) == 0x000004, "Wrong alignment on FortPlayerPawnAthena_GetSlopeSlidingAngles");
static_assert(sizeof(FortPlayerPawnAthena_GetSlopeSlidingAngles) == 0x000008, "Wrong size on FortPlayerPawnAthena_GetSlopeSlidingAngles");
static_assert(offsetof(FortPlayerPawnAthena_GetSlopeSlidingAngles, LocalPitch) == 0x000000, "Member 'FortPlayerPawnAthena_GetSlopeSlidingAngles::LocalPitch' has a wrong offset!");
static_assert(offsetof(FortPlayerPawnAthena_GetSlopeSlidingAngles, LocalRoll) == 0x000004, "Member 'FortPlayerPawnAthena_GetSlopeSlidingAngles::LocalRoll' has a wrong offset!");

// Function FortniteGame.FortPlayerPawnAthena.GetSlopeSlidingNormal
// 0x000C (0x000C - 0x0000)
struct FortPlayerPawnAthena_GetSlopeSlidingNormal final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawnAthena_GetSlopeSlidingNormal) == 0x000004, "Wrong alignment on FortPlayerPawnAthena_GetSlopeSlidingNormal");
static_assert(sizeof(FortPlayerPawnAthena_GetSlopeSlidingNormal) == 0x00000C, "Wrong size on FortPlayerPawnAthena_GetSlopeSlidingNormal");
static_assert(offsetof(FortPlayerPawnAthena_GetSlopeSlidingNormal, ReturnValue) == 0x000000, "Member 'FortPlayerPawnAthena_GetSlopeSlidingNormal::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerPawnAthena.IsActivelySkydiving
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerPawnAthena_IsActivelySkydiving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawnAthena_IsActivelySkydiving) == 0x000001, "Wrong alignment on FortPlayerPawnAthena_IsActivelySkydiving");
static_assert(sizeof(FortPlayerPawnAthena_IsActivelySkydiving) == 0x000001, "Wrong size on FortPlayerPawnAthena_IsActivelySkydiving");
static_assert(offsetof(FortPlayerPawnAthena_IsActivelySkydiving, ReturnValue) == 0x000000, "Member 'FortPlayerPawnAthena_IsActivelySkydiving::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerPawnAthena.IsActivelyStrafingInAir
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerPawnAthena_IsActivelyStrafingInAir final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawnAthena_IsActivelyStrafingInAir) == 0x000001, "Wrong alignment on FortPlayerPawnAthena_IsActivelyStrafingInAir");
static_assert(sizeof(FortPlayerPawnAthena_IsActivelyStrafingInAir) == 0x000001, "Wrong size on FortPlayerPawnAthena_IsActivelyStrafingInAir");
static_assert(offsetof(FortPlayerPawnAthena_IsActivelyStrafingInAir, ReturnValue) == 0x000000, "Member 'FortPlayerPawnAthena_IsActivelyStrafingInAir::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerPawnAthena.IsDrivingCar
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerPawnAthena_IsDrivingCar final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawnAthena_IsDrivingCar) == 0x000001, "Wrong alignment on FortPlayerPawnAthena_IsDrivingCar");
static_assert(sizeof(FortPlayerPawnAthena_IsDrivingCar) == 0x000001, "Wrong size on FortPlayerPawnAthena_IsDrivingCar");
static_assert(offsetof(FortPlayerPawnAthena_IsDrivingCar, ReturnValue) == 0x000000, "Member 'FortPlayerPawnAthena_IsDrivingCar::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerPawnAthena.IsParachuteForcedOpen
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerPawnAthena_IsParachuteForcedOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawnAthena_IsParachuteForcedOpen) == 0x000001, "Wrong alignment on FortPlayerPawnAthena_IsParachuteForcedOpen");
static_assert(sizeof(FortPlayerPawnAthena_IsParachuteForcedOpen) == 0x000001, "Wrong size on FortPlayerPawnAthena_IsParachuteForcedOpen");
static_assert(offsetof(FortPlayerPawnAthena_IsParachuteForcedOpen, ReturnValue) == 0x000000, "Member 'FortPlayerPawnAthena_IsParachuteForcedOpen::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerPawnAthena.IsParachuteOpen
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerPawnAthena_IsParachuteOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawnAthena_IsParachuteOpen) == 0x000001, "Wrong alignment on FortPlayerPawnAthena_IsParachuteOpen");
static_assert(sizeof(FortPlayerPawnAthena_IsParachuteOpen) == 0x000001, "Wrong size on FortPlayerPawnAthena_IsParachuteOpen");
static_assert(offsetof(FortPlayerPawnAthena_IsParachuteOpen, ReturnValue) == 0x000000, "Member 'FortPlayerPawnAthena_IsParachuteOpen::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerPawnAthena.IsPassivelySkydiving
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerPawnAthena_IsPassivelySkydiving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawnAthena_IsPassivelySkydiving) == 0x000001, "Wrong alignment on FortPlayerPawnAthena_IsPassivelySkydiving");
static_assert(sizeof(FortPlayerPawnAthena_IsPassivelySkydiving) == 0x000001, "Wrong size on FortPlayerPawnAthena_IsPassivelySkydiving");
static_assert(offsetof(FortPlayerPawnAthena_IsPassivelySkydiving, ReturnValue) == 0x000000, "Member 'FortPlayerPawnAthena_IsPassivelySkydiving::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerPawnAthena.IsSkydiving
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerPawnAthena_IsSkydiving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawnAthena_IsSkydiving) == 0x000001, "Wrong alignment on FortPlayerPawnAthena_IsSkydiving");
static_assert(sizeof(FortPlayerPawnAthena_IsSkydiving) == 0x000001, "Wrong size on FortPlayerPawnAthena_IsSkydiving");
static_assert(offsetof(FortPlayerPawnAthena_IsSkydiving, ReturnValue) == 0x000000, "Member 'FortPlayerPawnAthena_IsSkydiving::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerPawnAthena.IsSkydivingFromBus
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerPawnAthena_IsSkydivingFromBus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawnAthena_IsSkydivingFromBus) == 0x000001, "Wrong alignment on FortPlayerPawnAthena_IsSkydivingFromBus");
static_assert(sizeof(FortPlayerPawnAthena_IsSkydivingFromBus) == 0x000001, "Wrong size on FortPlayerPawnAthena_IsSkydivingFromBus");
static_assert(offsetof(FortPlayerPawnAthena_IsSkydivingFromBus, ReturnValue) == 0x000000, "Member 'FortPlayerPawnAthena_IsSkydivingFromBus::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerPawnAthena.IsSkydivingFromLaunchPad
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerPawnAthena_IsSkydivingFromLaunchPad final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawnAthena_IsSkydivingFromLaunchPad) == 0x000001, "Wrong alignment on FortPlayerPawnAthena_IsSkydivingFromLaunchPad");
static_assert(sizeof(FortPlayerPawnAthena_IsSkydivingFromLaunchPad) == 0x000001, "Wrong size on FortPlayerPawnAthena_IsSkydivingFromLaunchPad");
static_assert(offsetof(FortPlayerPawnAthena_IsSkydivingFromLaunchPad, ReturnValue) == 0x000000, "Member 'FortPlayerPawnAthena_IsSkydivingFromLaunchPad::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerPawnAthena.IsUsingUmbrella
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerPawnAthena_IsUsingUmbrella final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawnAthena_IsUsingUmbrella) == 0x000001, "Wrong alignment on FortPlayerPawnAthena_IsUsingUmbrella");
static_assert(sizeof(FortPlayerPawnAthena_IsUsingUmbrella) == 0x000001, "Wrong size on FortPlayerPawnAthena_IsUsingUmbrella");
static_assert(offsetof(FortPlayerPawnAthena_IsUsingUmbrella, ReturnValue) == 0x000000, "Member 'FortPlayerPawnAthena_IsUsingUmbrella::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerSpawnPad.ChestProgressionUpdate
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerSpawnPad_ChestProgressionUpdate final
{
public:
	struct FVector                                PrimaryChestOffset;                                // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ChestOffset;                                       // 0x000C(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSpawnPad_ChestProgressionUpdate) == 0x000004, "Wrong alignment on FortPlayerSpawnPad_ChestProgressionUpdate");
static_assert(sizeof(FortPlayerSpawnPad_ChestProgressionUpdate) == 0x000018, "Wrong size on FortPlayerSpawnPad_ChestProgressionUpdate");
static_assert(offsetof(FortPlayerSpawnPad_ChestProgressionUpdate, PrimaryChestOffset) == 0x000000, "Member 'FortPlayerSpawnPad_ChestProgressionUpdate::PrimaryChestOffset' has a wrong offset!");
static_assert(offsetof(FortPlayerSpawnPad_ChestProgressionUpdate, ChestOffset) == 0x00000C, "Member 'FortPlayerSpawnPad_ChestProgressionUpdate::ChestOffset' has a wrong offset!");

// Function FortniteGame.FortPlayerSpawnPad.GetPossessedPlayerPawnsByID
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerSpawnPad_GetPossessedPlayerPawnsByID final
{
public:
	TArray<class AFortPlayerPawn*>                SortedPlayerPawns;                                 // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSpawnPad_GetPossessedPlayerPawnsByID) == 0x000008, "Wrong alignment on FortPlayerSpawnPad_GetPossessedPlayerPawnsByID");
static_assert(sizeof(FortPlayerSpawnPad_GetPossessedPlayerPawnsByID) == 0x000010, "Wrong size on FortPlayerSpawnPad_GetPossessedPlayerPawnsByID");
static_assert(offsetof(FortPlayerSpawnPad_GetPossessedPlayerPawnsByID, SortedPlayerPawns) == 0x000000, "Member 'FortPlayerSpawnPad_GetPossessedPlayerPawnsByID::SortedPlayerPawns' has a wrong offset!");

// Function FortniteGame.FortPlayerSpawnPad.GetRewardedChestIndex
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerSpawnPad_GetRewardedChestIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSpawnPad_GetRewardedChestIndex) == 0x000004, "Wrong alignment on FortPlayerSpawnPad_GetRewardedChestIndex");
static_assert(sizeof(FortPlayerSpawnPad_GetRewardedChestIndex) == 0x000004, "Wrong size on FortPlayerSpawnPad_GetRewardedChestIndex");
static_assert(offsetof(FortPlayerSpawnPad_GetRewardedChestIndex, ReturnValue) == 0x000000, "Member 'FortPlayerSpawnPad_GetRewardedChestIndex::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSchematicItem.GetRequiredTeamLevelToCraft
// 0x0004 (0x0004 - 0x0000)
struct FortSchematicItem_GetRequiredTeamLevelToCraft final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSchematicItem_GetRequiredTeamLevelToCraft) == 0x000004, "Wrong alignment on FortSchematicItem_GetRequiredTeamLevelToCraft");
static_assert(sizeof(FortSchematicItem_GetRequiredTeamLevelToCraft) == 0x000004, "Wrong size on FortSchematicItem_GetRequiredTeamLevelToCraft");
static_assert(offsetof(FortSchematicItem_GetRequiredTeamLevelToCraft, ReturnValue) == 0x000000, "Member 'FortSchematicItem_GetRequiredTeamLevelToCraft::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSchematicItem.GetSchematicQuantityProduced
// 0x0004 (0x0004 - 0x0000)
struct FortSchematicItem_GetSchematicQuantityProduced final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSchematicItem_GetSchematicQuantityProduced) == 0x000004, "Wrong alignment on FortSchematicItem_GetSchematicQuantityProduced");
static_assert(sizeof(FortSchematicItem_GetSchematicQuantityProduced) == 0x000004, "Wrong size on FortSchematicItem_GetSchematicQuantityProduced");
static_assert(offsetof(FortSchematicItem_GetSchematicQuantityProduced, ReturnValue) == 0x000000, "Member 'FortSchematicItem_GetSchematicQuantityProduced::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSchematicItem.GetSchematicRecipe
// 0x0058 (0x0058 - 0x0000)
struct FortSchematicItem_GetSchematicRecipe final
{
public:
	struct FRecipe                                ReturnValue;                                       // 0x0000(0x0058)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSchematicItem_GetSchematicRecipe) == 0x000008, "Wrong alignment on FortSchematicItem_GetSchematicRecipe");
static_assert(sizeof(FortSchematicItem_GetSchematicRecipe) == 0x000058, "Wrong size on FortSchematicItem_GetSchematicRecipe");
static_assert(offsetof(FortSchematicItem_GetSchematicRecipe, ReturnValue) == 0x000000, "Member 'FortSchematicItem_GetSchematicRecipe::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerStatePvP.OnRep_TotalQuantum
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerStatePvP_OnRep_TotalQuantum final
{
public:
	int32                                         PrevTotalQuantum;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerStatePvP_OnRep_TotalQuantum) == 0x000004, "Wrong alignment on FortPlayerStatePvP_OnRep_TotalQuantum");
static_assert(sizeof(FortPlayerStatePvP_OnRep_TotalQuantum) == 0x000004, "Wrong size on FortPlayerStatePvP_OnRep_TotalQuantum");
static_assert(offsetof(FortPlayerStatePvP_OnRep_TotalQuantum, PrevTotalQuantum) == 0x000000, "Member 'FortPlayerStatePvP_OnRep_TotalQuantum::PrevTotalQuantum' has a wrong offset!");

// Function FortniteGame.FortPlayerStateAthena.ClientReportDBNO
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerStateAthena_ClientReportDBNO final
{
public:
	const class AFortPlayerStateAthena*           Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerStateAthena_ClientReportDBNO) == 0x000008, "Wrong alignment on FortPlayerStateAthena_ClientReportDBNO");
static_assert(sizeof(FortPlayerStateAthena_ClientReportDBNO) == 0x000008, "Wrong size on FortPlayerStateAthena_ClientReportDBNO");
static_assert(offsetof(FortPlayerStateAthena_ClientReportDBNO, Player) == 0x000000, "Member 'FortPlayerStateAthena_ClientReportDBNO::Player' has a wrong offset!");

// Function FortniteGame.FortPlayerStateAthena.ClientReportKill
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerStateAthena_ClientReportKill final
{
public:
	const class AFortPlayerStateAthena*           Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerStateAthena_ClientReportKill) == 0x000008, "Wrong alignment on FortPlayerStateAthena_ClientReportKill");
static_assert(sizeof(FortPlayerStateAthena_ClientReportKill) == 0x000008, "Wrong size on FortPlayerStateAthena_ClientReportKill");
static_assert(offsetof(FortPlayerStateAthena_ClientReportKill, Player) == 0x000000, "Member 'FortPlayerStateAthena_ClientReportKill::Player' has a wrong offset!");

// Function FortniteGame.FortProjectileBase.GetOwnerPlayerController
// 0x0008 (0x0008 - 0x0000)
struct FortProjectileBase_GetOwnerPlayerController final
{
public:
	class AFortPlayerController*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortProjectileBase_GetOwnerPlayerController) == 0x000008, "Wrong alignment on FortProjectileBase_GetOwnerPlayerController");
static_assert(sizeof(FortProjectileBase_GetOwnerPlayerController) == 0x000008, "Wrong size on FortProjectileBase_GetOwnerPlayerController");
static_assert(offsetof(FortProjectileBase_GetOwnerPlayerController, ReturnValue) == 0x000000, "Member 'FortProjectileBase_GetOwnerPlayerController::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortProjectileBase.OnBounce
// 0x0080 (0x0080 - 0x0000)
struct FortProjectileBase_OnBounce final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortProjectileBase_OnBounce) == 0x000008, "Wrong alignment on FortProjectileBase_OnBounce");
static_assert(sizeof(FortProjectileBase_OnBounce) == 0x000080, "Wrong size on FortProjectileBase_OnBounce");
static_assert(offsetof(FortProjectileBase_OnBounce, Hit) == 0x000000, "Member 'FortProjectileBase_OnBounce::Hit' has a wrong offset!");

// Function FortniteGame.FortProjectileBase.OnBounceCallback
// 0x0090 (0x0090 - 0x0000)
struct FortProjectileBase_OnBounceCallback final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                ImpactVelocity;                                    // 0x0080(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortProjectileBase_OnBounceCallback) == 0x000008, "Wrong alignment on FortProjectileBase_OnBounceCallback");
static_assert(sizeof(FortProjectileBase_OnBounceCallback) == 0x000090, "Wrong size on FortProjectileBase_OnBounceCallback");
static_assert(offsetof(FortProjectileBase_OnBounceCallback, Hit) == 0x000000, "Member 'FortProjectileBase_OnBounceCallback::Hit' has a wrong offset!");
static_assert(offsetof(FortProjectileBase_OnBounceCallback, ImpactVelocity) == 0x000080, "Member 'FortProjectileBase_OnBounceCallback::ImpactVelocity' has a wrong offset!");

// Function FortniteGame.FortProjectileBase.OnShot
// 0x0080 (0x0080 - 0x0000)
struct FortProjectileBase_OnShot final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortProjectileBase_OnShot) == 0x000008, "Wrong alignment on FortProjectileBase_OnShot");
static_assert(sizeof(FortProjectileBase_OnShot) == 0x000080, "Wrong size on FortProjectileBase_OnShot");
static_assert(offsetof(FortProjectileBase_OnShot, Hit) == 0x000000, "Member 'FortProjectileBase_OnShot::Hit' has a wrong offset!");

// Function FortniteGame.FortProjectileBase.OnStop
// 0x0080 (0x0080 - 0x0000)
struct FortProjectileBase_OnStop final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortProjectileBase_OnStop) == 0x000008, "Wrong alignment on FortProjectileBase_OnStop");
static_assert(sizeof(FortProjectileBase_OnStop) == 0x000080, "Wrong size on FortProjectileBase_OnStop");
static_assert(offsetof(FortProjectileBase_OnStop, Hit) == 0x000000, "Member 'FortProjectileBase_OnStop::Hit' has a wrong offset!");

// Function FortniteGame.FortProjectileBase.OnStopCallback
// 0x0080 (0x0080 - 0x0000)
struct FortProjectileBase_OnStopCallback final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortProjectileBase_OnStopCallback) == 0x000008, "Wrong alignment on FortProjectileBase_OnStopCallback");
static_assert(sizeof(FortProjectileBase_OnStopCallback) == 0x000080, "Wrong size on FortProjectileBase_OnStopCallback");
static_assert(offsetof(FortProjectileBase_OnStopCallback, Hit) == 0x000000, "Member 'FortProjectileBase_OnStopCallback::Hit' has a wrong offset!");

// Function FortniteGame.FortProjectileBase.SetGravityScale
// 0x0004 (0x0004 - 0x0000)
struct FortProjectileBase_SetGravityScale final
{
public:
	float                                         InitialGravityScale;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortProjectileBase_SetGravityScale) == 0x000004, "Wrong alignment on FortProjectileBase_SetGravityScale");
static_assert(sizeof(FortProjectileBase_SetGravityScale) == 0x000004, "Wrong size on FortProjectileBase_SetGravityScale");
static_assert(offsetof(FortProjectileBase_SetGravityScale, InitialGravityScale) == 0x000000, "Member 'FortProjectileBase_SetGravityScale::InitialGravityScale' has a wrong offset!");

// Function FortniteGame.FortProjectileBase.GetGravityScale
// 0x0004 (0x0004 - 0x0000)
struct FortProjectileBase_GetGravityScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortProjectileBase_GetGravityScale) == 0x000004, "Wrong alignment on FortProjectileBase_GetGravityScale");
static_assert(sizeof(FortProjectileBase_GetGravityScale) == 0x000004, "Wrong size on FortProjectileBase_GetGravityScale");
static_assert(offsetof(FortProjectileBase_GetGravityScale, ReturnValue) == 0x000000, "Member 'FortProjectileBase_GetGravityScale::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortProjectile_MOBATurret.OnHomingTargetDied
// 0x0050 (0x0050 - 0x0000)
struct FortProjectile_MOBATurret_OnHomingTargetDied final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0030(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Momentum;                                          // 0x0040(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortProjectile_MOBATurret_OnHomingTargetDied) == 0x000008, "Wrong alignment on FortProjectile_MOBATurret_OnHomingTargetDied");
static_assert(sizeof(FortProjectile_MOBATurret_OnHomingTargetDied) == 0x000050, "Wrong size on FortProjectile_MOBATurret_OnHomingTargetDied");
static_assert(offsetof(FortProjectile_MOBATurret_OnHomingTargetDied, DamagedActor) == 0x000000, "Member 'FortProjectile_MOBATurret_OnHomingTargetDied::DamagedActor' has a wrong offset!");
static_assert(offsetof(FortProjectile_MOBATurret_OnHomingTargetDied, Damage) == 0x000008, "Member 'FortProjectile_MOBATurret_OnHomingTargetDied::Damage' has a wrong offset!");
static_assert(offsetof(FortProjectile_MOBATurret_OnHomingTargetDied, InstigatedBy) == 0x000010, "Member 'FortProjectile_MOBATurret_OnHomingTargetDied::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortProjectile_MOBATurret_OnHomingTargetDied, DamageCauser) == 0x000018, "Member 'FortProjectile_MOBATurret_OnHomingTargetDied::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortProjectile_MOBATurret_OnHomingTargetDied, HitLocation) == 0x000020, "Member 'FortProjectile_MOBATurret_OnHomingTargetDied::HitLocation' has a wrong offset!");
static_assert(offsetof(FortProjectile_MOBATurret_OnHomingTargetDied, FHitComponent) == 0x000030, "Member 'FortProjectile_MOBATurret_OnHomingTargetDied::FHitComponent' has a wrong offset!");
static_assert(offsetof(FortProjectile_MOBATurret_OnHomingTargetDied, BoneName) == 0x000038, "Member 'FortProjectile_MOBATurret_OnHomingTargetDied::BoneName' has a wrong offset!");
static_assert(offsetof(FortProjectile_MOBATurret_OnHomingTargetDied, Momentum) == 0x000040, "Member 'FortProjectile_MOBATurret_OnHomingTargetDied::Momentum' has a wrong offset!");

// Function FortniteGame.FortProjectileAthena.ServerNotifyPawnHit
// 0x0080 (0x0080 - 0x0000)
struct FortProjectileAthena_ServerNotifyPawnHit final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0080)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortProjectileAthena_ServerNotifyPawnHit) == 0x000008, "Wrong alignment on FortProjectileAthena_ServerNotifyPawnHit");
static_assert(sizeof(FortProjectileAthena_ServerNotifyPawnHit) == 0x000080, "Wrong size on FortProjectileAthena_ServerNotifyPawnHit");
static_assert(offsetof(FortProjectileAthena_ServerNotifyPawnHit, Hit) == 0x000000, "Member 'FortProjectileAthena_ServerNotifyPawnHit::Hit' has a wrong offset!");

// Function FortniteGame.FortPrototypingContext.GetPrototypingStatus
// 0x0001 (0x0001 - 0x0000)
struct FortPrototypingContext_GetPrototypingStatus final
{
public:
	EFortPrototypingStatus                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPrototypingContext_GetPrototypingStatus) == 0x000001, "Wrong alignment on FortPrototypingContext_GetPrototypingStatus");
static_assert(sizeof(FortPrototypingContext_GetPrototypingStatus) == 0x000001, "Wrong size on FortPrototypingContext_GetPrototypingStatus");
static_assert(offsetof(FortPrototypingContext_GetPrototypingStatus, ReturnValue) == 0x000000, "Member 'FortPrototypingContext_GetPrototypingStatus::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPvPBaseCornerstone.OnInvincibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct FortPvPBaseCornerstone_OnInvincibilityChanged final
{
public:
	bool                                          bIsInvincible;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPvPBaseCornerstone_OnInvincibilityChanged) == 0x000001, "Wrong alignment on FortPvPBaseCornerstone_OnInvincibilityChanged");
static_assert(sizeof(FortPvPBaseCornerstone_OnInvincibilityChanged) == 0x000001, "Wrong size on FortPvPBaseCornerstone_OnInvincibilityChanged");
static_assert(offsetof(FortPvPBaseCornerstone_OnInvincibilityChanged, bIsInvincible) == 0x000000, "Member 'FortPvPBaseCornerstone_OnInvincibilityChanged::bIsInvincible' has a wrong offset!");

// Function FortniteGame.FortPvPBaseCornerstone.SetInvincibility
// 0x0001 (0x0001 - 0x0000)
struct FortPvPBaseCornerstone_SetInvincibility final
{
public:
	bool                                          bInInvincible;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPvPBaseCornerstone_SetInvincibility) == 0x000001, "Wrong alignment on FortPvPBaseCornerstone_SetInvincibility");
static_assert(sizeof(FortPvPBaseCornerstone_SetInvincibility) == 0x000001, "Wrong size on FortPvPBaseCornerstone_SetInvincibility");
static_assert(offsetof(FortPvPBaseCornerstone_SetInvincibility, bInInvincible) == 0x000000, "Member 'FortPvPBaseCornerstone_SetInvincibility::bInInvincible' has a wrong offset!");

// Function FortniteGame.FortPvPFunctionLibrary.DestroyAllFortPickupsWithItem
// 0x0010 (0x0010 - 0x0000)
struct FortPvPFunctionLibrary_DestroyAllFortPickupsWithItem final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortWorldItemDefinition*         ItemDefinitionToCheck;                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPvPFunctionLibrary_DestroyAllFortPickupsWithItem) == 0x000008, "Wrong alignment on FortPvPFunctionLibrary_DestroyAllFortPickupsWithItem");
static_assert(sizeof(FortPvPFunctionLibrary_DestroyAllFortPickupsWithItem) == 0x000010, "Wrong size on FortPvPFunctionLibrary_DestroyAllFortPickupsWithItem");
static_assert(offsetof(FortPvPFunctionLibrary_DestroyAllFortPickupsWithItem, WorldContextObject) == 0x000000, "Member 'FortPvPFunctionLibrary_DestroyAllFortPickupsWithItem::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortPvPFunctionLibrary_DestroyAllFortPickupsWithItem, ItemDefinitionToCheck) == 0x000008, "Member 'FortPvPFunctionLibrary_DestroyAllFortPickupsWithItem::ItemDefinitionToCheck' has a wrong offset!");

// Function FortniteGame.FortPvPFunctionLibrary.FirePvPVictoryMissionEvent
// 0x0010 (0x0010 - 0x0000)
struct FortPvPFunctionLibrary_FirePvPVictoryMissionEvent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortTeam                                     InWinningTeam;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPvPFunctionLibrary_FirePvPVictoryMissionEvent) == 0x000008, "Wrong alignment on FortPvPFunctionLibrary_FirePvPVictoryMissionEvent");
static_assert(sizeof(FortPvPFunctionLibrary_FirePvPVictoryMissionEvent) == 0x000010, "Wrong size on FortPvPFunctionLibrary_FirePvPVictoryMissionEvent");
static_assert(offsetof(FortPvPFunctionLibrary_FirePvPVictoryMissionEvent, WorldContextObject) == 0x000000, "Member 'FortPvPFunctionLibrary_FirePvPVictoryMissionEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortPvPFunctionLibrary_FirePvPVictoryMissionEvent, InWinningTeam) == 0x000008, "Member 'FortPvPFunctionLibrary_FirePvPVictoryMissionEvent::InWinningTeam' has a wrong offset!");

// Function FortniteGame.FortPvPFunctionLibrary.GetBaseBuildingCost
// 0x0010 (0x0010 - 0x0000)
struct FortPvPFunctionLibrary_GetBaseBuildingCost final
{
public:
	class ABuildingActor*                         BuildingActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPvPFunctionLibrary_GetBaseBuildingCost) == 0x000008, "Wrong alignment on FortPvPFunctionLibrary_GetBaseBuildingCost");
static_assert(sizeof(FortPvPFunctionLibrary_GetBaseBuildingCost) == 0x000010, "Wrong size on FortPvPFunctionLibrary_GetBaseBuildingCost");
static_assert(offsetof(FortPvPFunctionLibrary_GetBaseBuildingCost, BuildingActor) == 0x000000, "Member 'FortPvPFunctionLibrary_GetBaseBuildingCost::BuildingActor' has a wrong offset!");
static_assert(offsetof(FortPvPFunctionLibrary_GetBaseBuildingCost, ReturnValue) == 0x000008, "Member 'FortPvPFunctionLibrary_GetBaseBuildingCost::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPvPFunctionLibrary.GetBaseDestructionTeamInfo
// 0x0018 (0x0018 - 0x0000)
struct FortPvPFunctionLibrary_GetBaseDestructionTeamInfo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortTeam                                     Team;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortTeamInfoPvPBaseDestruction*        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPvPFunctionLibrary_GetBaseDestructionTeamInfo) == 0x000008, "Wrong alignment on FortPvPFunctionLibrary_GetBaseDestructionTeamInfo");
static_assert(sizeof(FortPvPFunctionLibrary_GetBaseDestructionTeamInfo) == 0x000018, "Wrong size on FortPvPFunctionLibrary_GetBaseDestructionTeamInfo");
static_assert(offsetof(FortPvPFunctionLibrary_GetBaseDestructionTeamInfo, WorldContextObject) == 0x000000, "Member 'FortPvPFunctionLibrary_GetBaseDestructionTeamInfo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortPvPFunctionLibrary_GetBaseDestructionTeamInfo, Team) == 0x000008, "Member 'FortPvPFunctionLibrary_GetBaseDestructionTeamInfo::Team' has a wrong offset!");
static_assert(offsetof(FortPvPFunctionLibrary_GetBaseDestructionTeamInfo, ReturnValue) == 0x000010, "Member 'FortPvPFunctionLibrary_GetBaseDestructionTeamInfo::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPvPFunctionLibrary.GetDifficultyRowNamesFromPvPRating
// 0x0018 (0x0018 - 0x0000)
struct FortPvPFunctionLibrary_GetDifficultyRowNamesFromPvPRating final
{
public:
	TArray<class FName>                           OutDifficultyRows;                                 // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         InPvPRating;                                       // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPvPFunctionLibrary_GetDifficultyRowNamesFromPvPRating) == 0x000008, "Wrong alignment on FortPvPFunctionLibrary_GetDifficultyRowNamesFromPvPRating");
static_assert(sizeof(FortPvPFunctionLibrary_GetDifficultyRowNamesFromPvPRating) == 0x000018, "Wrong size on FortPvPFunctionLibrary_GetDifficultyRowNamesFromPvPRating");
static_assert(offsetof(FortPvPFunctionLibrary_GetDifficultyRowNamesFromPvPRating, OutDifficultyRows) == 0x000000, "Member 'FortPvPFunctionLibrary_GetDifficultyRowNamesFromPvPRating::OutDifficultyRows' has a wrong offset!");
static_assert(offsetof(FortPvPFunctionLibrary_GetDifficultyRowNamesFromPvPRating, InPvPRating) == 0x000010, "Member 'FortPvPFunctionLibrary_GetDifficultyRowNamesFromPvPRating::InPvPRating' has a wrong offset!");

// Function FortniteGame.FortPvPFunctionLibrary.GetMatchLevel
// 0x0010 (0x0010 - 0x0000)
struct FortPvPFunctionLibrary_GetMatchLevel final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPvPFunctionLibrary_GetMatchLevel) == 0x000008, "Wrong alignment on FortPvPFunctionLibrary_GetMatchLevel");
static_assert(sizeof(FortPvPFunctionLibrary_GetMatchLevel) == 0x000010, "Wrong size on FortPvPFunctionLibrary_GetMatchLevel");
static_assert(offsetof(FortPvPFunctionLibrary_GetMatchLevel, WorldContextObject) == 0x000000, "Member 'FortPvPFunctionLibrary_GetMatchLevel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortPvPFunctionLibrary_GetMatchLevel, ReturnValue) == 0x000008, "Member 'FortPvPFunctionLibrary_GetMatchLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPvPFunctionLibrary.GetRoundTimeAccumulated
// 0x0010 (0x0010 - 0x0000)
struct FortPvPFunctionLibrary_GetRoundTimeAccumulated final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPvPFunctionLibrary_GetRoundTimeAccumulated) == 0x000008, "Wrong alignment on FortPvPFunctionLibrary_GetRoundTimeAccumulated");
static_assert(sizeof(FortPvPFunctionLibrary_GetRoundTimeAccumulated) == 0x000010, "Wrong size on FortPvPFunctionLibrary_GetRoundTimeAccumulated");
static_assert(offsetof(FortPvPFunctionLibrary_GetRoundTimeAccumulated, WorldContextObject) == 0x000000, "Member 'FortPvPFunctionLibrary_GetRoundTimeAccumulated::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortPvPFunctionLibrary_GetRoundTimeAccumulated, ReturnValue) == 0x000008, "Member 'FortPvPFunctionLibrary_GetRoundTimeAccumulated::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPvPFunctionLibrary.GetTeamCornerstone
// 0x0018 (0x0018 - 0x0000)
struct FortPvPFunctionLibrary_GetTeamCornerstone final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortTeam                                     Team;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPvPBaseCornerstone*                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPvPFunctionLibrary_GetTeamCornerstone) == 0x000008, "Wrong alignment on FortPvPFunctionLibrary_GetTeamCornerstone");
static_assert(sizeof(FortPvPFunctionLibrary_GetTeamCornerstone) == 0x000018, "Wrong size on FortPvPFunctionLibrary_GetTeamCornerstone");
static_assert(offsetof(FortPvPFunctionLibrary_GetTeamCornerstone, WorldContextObject) == 0x000000, "Member 'FortPvPFunctionLibrary_GetTeamCornerstone::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortPvPFunctionLibrary_GetTeamCornerstone, Team) == 0x000008, "Member 'FortPvPFunctionLibrary_GetTeamCornerstone::Team' has a wrong offset!");
static_assert(offsetof(FortPvPFunctionLibrary_GetTeamCornerstone, ReturnValue) == 0x000010, "Member 'FortPvPFunctionLibrary_GetTeamCornerstone::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPvPFunctionLibrary.GetTeamStrategicBuildingActor
// 0x0018 (0x0018 - 0x0000)
struct FortPvPFunctionLibrary_GetTeamStrategicBuildingActor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortTeam                                     Team;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTeamStrategicBuildingHandle           SBAHandle;                                         // 0x000C(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class AStrategicBuildingActor*                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPvPFunctionLibrary_GetTeamStrategicBuildingActor) == 0x000008, "Wrong alignment on FortPvPFunctionLibrary_GetTeamStrategicBuildingActor");
static_assert(sizeof(FortPvPFunctionLibrary_GetTeamStrategicBuildingActor) == 0x000018, "Wrong size on FortPvPFunctionLibrary_GetTeamStrategicBuildingActor");
static_assert(offsetof(FortPvPFunctionLibrary_GetTeamStrategicBuildingActor, WorldContextObject) == 0x000000, "Member 'FortPvPFunctionLibrary_GetTeamStrategicBuildingActor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortPvPFunctionLibrary_GetTeamStrategicBuildingActor, Team) == 0x000008, "Member 'FortPvPFunctionLibrary_GetTeamStrategicBuildingActor::Team' has a wrong offset!");
static_assert(offsetof(FortPvPFunctionLibrary_GetTeamStrategicBuildingActor, SBAHandle) == 0x00000C, "Member 'FortPvPFunctionLibrary_GetTeamStrategicBuildingActor::SBAHandle' has a wrong offset!");
static_assert(offsetof(FortPvPFunctionLibrary_GetTeamStrategicBuildingActor, ReturnValue) == 0x000010, "Member 'FortPvPFunctionLibrary_GetTeamStrategicBuildingActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPvPFunctionLibrary.SetMatchLevel
// 0x0010 (0x0010 - 0x0000)
struct FortPvPFunctionLibrary_SetMatchLevel final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MatchLevel;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPvPFunctionLibrary_SetMatchLevel) == 0x000008, "Wrong alignment on FortPvPFunctionLibrary_SetMatchLevel");
static_assert(sizeof(FortPvPFunctionLibrary_SetMatchLevel) == 0x000010, "Wrong size on FortPvPFunctionLibrary_SetMatchLevel");
static_assert(offsetof(FortPvPFunctionLibrary_SetMatchLevel, WorldContextObject) == 0x000000, "Member 'FortPvPFunctionLibrary_SetMatchLevel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortPvPFunctionLibrary_SetMatchLevel, MatchLevel) == 0x000008, "Member 'FortPvPFunctionLibrary_SetMatchLevel::MatchLevel' has a wrong offset!");

// Function FortniteGame.FortRegisteredPlayerInfo.GetAbilitySystemComponent
// 0x0008 (0x0008 - 0x0000)
struct FortRegisteredPlayerInfo_GetAbilitySystemComponent final
{
public:
	class UAbilitySystemComponent*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRegisteredPlayerInfo_GetAbilitySystemComponent) == 0x000008, "Wrong alignment on FortRegisteredPlayerInfo_GetAbilitySystemComponent");
static_assert(sizeof(FortRegisteredPlayerInfo_GetAbilitySystemComponent) == 0x000008, "Wrong size on FortRegisteredPlayerInfo_GetAbilitySystemComponent");
static_assert(offsetof(FortRegisteredPlayerInfo_GetAbilitySystemComponent, ReturnValue) == 0x000000, "Member 'FortRegisteredPlayerInfo_GetAbilitySystemComponent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortRegisteredPlayerInfo.GetPlayerName
// 0x0010 (0x0010 - 0x0000)
struct FortRegisteredPlayerInfo_GetPlayerName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRegisteredPlayerInfo_GetPlayerName) == 0x000008, "Wrong alignment on FortRegisteredPlayerInfo_GetPlayerName");
static_assert(sizeof(FortRegisteredPlayerInfo_GetPlayerName) == 0x000010, "Wrong size on FortRegisteredPlayerInfo_GetPlayerName");
static_assert(offsetof(FortRegisteredPlayerInfo_GetPlayerName, ReturnValue) == 0x000000, "Member 'FortRegisteredPlayerInfo_GetPlayerName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPvPMission_EnemyBaseDestruction.GetCornerstoneForTeam
// 0x0010 (0x0010 - 0x0000)
struct FortPvPMission_EnemyBaseDestruction_GetCornerstoneForTeam final
{
public:
	EFortTeam                                     InTeam;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPvPBaseCornerstone*                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPvPMission_EnemyBaseDestruction_GetCornerstoneForTeam) == 0x000008, "Wrong alignment on FortPvPMission_EnemyBaseDestruction_GetCornerstoneForTeam");
static_assert(sizeof(FortPvPMission_EnemyBaseDestruction_GetCornerstoneForTeam) == 0x000010, "Wrong size on FortPvPMission_EnemyBaseDestruction_GetCornerstoneForTeam");
static_assert(offsetof(FortPvPMission_EnemyBaseDestruction_GetCornerstoneForTeam, InTeam) == 0x000000, "Member 'FortPvPMission_EnemyBaseDestruction_GetCornerstoneForTeam::InTeam' has a wrong offset!");
static_assert(offsetof(FortPvPMission_EnemyBaseDestruction_GetCornerstoneForTeam, ReturnValue) == 0x000008, "Member 'FortPvPMission_EnemyBaseDestruction_GetCornerstoneForTeam::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortRarityData.BPGetRarityData
// 0x0088 (0x0088 - 0x0000)
struct FortRarityData_BPGetRarityData final
{
public:
	EFortRarity                                   Rarity;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortRarityItemData                    ReturnValue;                                       // 0x0008(0x0080)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRarityData_BPGetRarityData) == 0x000008, "Wrong alignment on FortRarityData_BPGetRarityData");
static_assert(sizeof(FortRarityData_BPGetRarityData) == 0x000088, "Wrong size on FortRarityData_BPGetRarityData");
static_assert(offsetof(FortRarityData_BPGetRarityData, Rarity) == 0x000000, "Member 'FortRarityData_BPGetRarityData::Rarity' has a wrong offset!");
static_assert(offsetof(FortRarityData_BPGetRarityData, ReturnValue) == 0x000008, "Member 'FortRarityData_BPGetRarityData::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItem.GetMissionConfigData
// 0x0010 (0x0010 - 0x0000)
struct FortQuestItem_GetMissionConfigData final
{
public:
	struct FGameplayTag                           InBucketTag;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortMissionConfigData*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItem_GetMissionConfigData) == 0x000008, "Wrong alignment on FortQuestItem_GetMissionConfigData");
static_assert(sizeof(FortQuestItem_GetMissionConfigData) == 0x000010, "Wrong size on FortQuestItem_GetMissionConfigData");
static_assert(offsetof(FortQuestItem_GetMissionConfigData, InBucketTag) == 0x000000, "Member 'FortQuestItem_GetMissionConfigData::InBucketTag' has a wrong offset!");
static_assert(offsetof(FortQuestItem_GetMissionConfigData, ReturnValue) == 0x000008, "Member 'FortQuestItem_GetMissionConfigData::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItem.CanPinQuest
// 0x0001 (0x0001 - 0x0000)
struct FortQuestItem_CanPinQuest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItem_CanPinQuest) == 0x000001, "Wrong alignment on FortQuestItem_CanPinQuest");
static_assert(sizeof(FortQuestItem_CanPinQuest) == 0x000001, "Wrong size on FortQuestItem_CanPinQuest");
static_assert(offsetof(FortQuestItem_CanPinQuest, ReturnValue) == 0x000000, "Member 'FortQuestItem_CanPinQuest::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItem.DoesQuestExpire
// 0x0001 (0x0001 - 0x0000)
struct FortQuestItem_DoesQuestExpire final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItem_DoesQuestExpire) == 0x000001, "Wrong alignment on FortQuestItem_DoesQuestExpire");
static_assert(sizeof(FortQuestItem_DoesQuestExpire) == 0x000001, "Wrong size on FortQuestItem_DoesQuestExpire");
static_assert(offsetof(FortQuestItem_DoesQuestExpire, ReturnValue) == 0x000000, "Member 'FortQuestItem_DoesQuestExpire::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItem.GetAchievedCount
// 0x0008 (0x0008 - 0x0000)
struct FortQuestItem_GetAchievedCount final
{
public:
	int32                                         OutTotalAchievedCount;                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutTotalRequiredCount;                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItem_GetAchievedCount) == 0x000004, "Wrong alignment on FortQuestItem_GetAchievedCount");
static_assert(sizeof(FortQuestItem_GetAchievedCount) == 0x000008, "Wrong size on FortQuestItem_GetAchievedCount");
static_assert(offsetof(FortQuestItem_GetAchievedCount, OutTotalAchievedCount) == 0x000000, "Member 'FortQuestItem_GetAchievedCount::OutTotalAchievedCount' has a wrong offset!");
static_assert(offsetof(FortQuestItem_GetAchievedCount, OutTotalRequiredCount) == 0x000004, "Member 'FortQuestItem_GetAchievedCount::OutTotalRequiredCount' has a wrong offset!");

// Function FortniteGame.FortQuestItem.GetBroadcasterGrantWindowEnd
// 0x0008 (0x0008 - 0x0000)
struct FortQuestItem_GetBroadcasterGrantWindowEnd final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItem_GetBroadcasterGrantWindowEnd) == 0x000008, "Wrong alignment on FortQuestItem_GetBroadcasterGrantWindowEnd");
static_assert(sizeof(FortQuestItem_GetBroadcasterGrantWindowEnd) == 0x000008, "Wrong size on FortQuestItem_GetBroadcasterGrantWindowEnd");
static_assert(offsetof(FortQuestItem_GetBroadcasterGrantWindowEnd, ReturnValue) == 0x000000, "Member 'FortQuestItem_GetBroadcasterGrantWindowEnd::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItem.GetObjectiveInfo
// 0x0018 (0x0018 - 0x0000)
struct FortQuestItem_GetObjectiveInfo final
{
public:
	struct FDataTableRowHandle                    ObjectiveStatHandle;                               // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UFortQuestObjectiveInfo*                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItem_GetObjectiveInfo) == 0x000008, "Wrong alignment on FortQuestItem_GetObjectiveInfo");
static_assert(sizeof(FortQuestItem_GetObjectiveInfo) == 0x000018, "Wrong size on FortQuestItem_GetObjectiveInfo");
static_assert(offsetof(FortQuestItem_GetObjectiveInfo, ObjectiveStatHandle) == 0x000000, "Member 'FortQuestItem_GetObjectiveInfo::ObjectiveStatHandle' has a wrong offset!");
static_assert(offsetof(FortQuestItem_GetObjectiveInfo, ReturnValue) == 0x000010, "Member 'FortQuestItem_GetObjectiveInfo::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItem.GetPercentageComplete
// 0x0004 (0x0004 - 0x0000)
struct FortQuestItem_GetPercentageComplete final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItem_GetPercentageComplete) == 0x000004, "Wrong alignment on FortQuestItem_GetPercentageComplete");
static_assert(sizeof(FortQuestItem_GetPercentageComplete) == 0x000004, "Wrong size on FortQuestItem_GetPercentageComplete");
static_assert(offsetof(FortQuestItem_GetPercentageComplete, ReturnValue) == 0x000000, "Member 'FortQuestItem_GetPercentageComplete::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItem.GetPreviewAllSelectableRewards
// 0x0010 (0x0010 - 0x0000)
struct FortQuestItem_GetPreviewAllSelectableRewards final
{
public:
	TArray<struct FFortItemInstanceQuantityPair>  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItem_GetPreviewAllSelectableRewards) == 0x000008, "Wrong alignment on FortQuestItem_GetPreviewAllSelectableRewards");
static_assert(sizeof(FortQuestItem_GetPreviewAllSelectableRewards) == 0x000010, "Wrong size on FortQuestItem_GetPreviewAllSelectableRewards");
static_assert(offsetof(FortQuestItem_GetPreviewAllSelectableRewards, ReturnValue) == 0x000000, "Member 'FortQuestItem_GetPreviewAllSelectableRewards::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItem.GetPreviewRewards
// 0x0010 (0x0010 - 0x0000)
struct FortQuestItem_GetPreviewRewards final
{
public:
	TArray<struct FFortItemInstanceQuantityPair>  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItem_GetPreviewRewards) == 0x000008, "Wrong alignment on FortQuestItem_GetPreviewRewards");
static_assert(sizeof(FortQuestItem_GetPreviewRewards) == 0x000010, "Wrong size on FortQuestItem_GetPreviewRewards");
static_assert(offsetof(FortQuestItem_GetPreviewRewards, ReturnValue) == 0x000000, "Member 'FortQuestItem_GetPreviewRewards::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItem.GetPreviewSelectableRewards
// 0x0018 (0x0018 - 0x0000)
struct FortQuestItem_GetPreviewSelectableRewards final
{
public:
	int32                                         RewardIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortItemInstanceQuantityPair>  ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItem_GetPreviewSelectableRewards) == 0x000008, "Wrong alignment on FortQuestItem_GetPreviewSelectableRewards");
static_assert(sizeof(FortQuestItem_GetPreviewSelectableRewards) == 0x000018, "Wrong size on FortQuestItem_GetPreviewSelectableRewards");
static_assert(offsetof(FortQuestItem_GetPreviewSelectableRewards, RewardIndex) == 0x000000, "Member 'FortQuestItem_GetPreviewSelectableRewards::RewardIndex' has a wrong offset!");
static_assert(offsetof(FortQuestItem_GetPreviewSelectableRewards, ReturnValue) == 0x000008, "Member 'FortQuestItem_GetPreviewSelectableRewards::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItem.GetQuestDefinitionBP
// 0x0008 (0x0008 - 0x0000)
struct FortQuestItem_GetQuestDefinitionBP final
{
public:
	class UFortQuestItemDefinition*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItem_GetQuestDefinitionBP) == 0x000008, "Wrong alignment on FortQuestItem_GetQuestDefinitionBP");
static_assert(sizeof(FortQuestItem_GetQuestDefinitionBP) == 0x000008, "Wrong size on FortQuestItem_GetQuestDefinitionBP");
static_assert(offsetof(FortQuestItem_GetQuestDefinitionBP, ReturnValue) == 0x000000, "Member 'FortQuestItem_GetQuestDefinitionBP::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItem.GetQuestState
// 0x0001 (0x0001 - 0x0000)
struct FortQuestItem_GetQuestState final
{
public:
	EFortQuestState                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItem_GetQuestState) == 0x000001, "Wrong alignment on FortQuestItem_GetQuestState");
static_assert(sizeof(FortQuestItem_GetQuestState) == 0x000001, "Wrong size on FortQuestItem_GetQuestState");
static_assert(offsetof(FortQuestItem_GetQuestState, ReturnValue) == 0x000000, "Member 'FortQuestItem_GetQuestState::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItem.GetRemainingExpirationDuration
// 0x0010 (0x0010 - 0x0000)
struct FortQuestItem_GetRemainingExpirationDuration final
{
public:
	struct FDateTime                              UtcNow;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItem_GetRemainingExpirationDuration) == 0x000008, "Wrong alignment on FortQuestItem_GetRemainingExpirationDuration");
static_assert(sizeof(FortQuestItem_GetRemainingExpirationDuration) == 0x000010, "Wrong size on FortQuestItem_GetRemainingExpirationDuration");
static_assert(offsetof(FortQuestItem_GetRemainingExpirationDuration, UtcNow) == 0x000000, "Member 'FortQuestItem_GetRemainingExpirationDuration::UtcNow' has a wrong offset!");
static_assert(offsetof(FortQuestItem_GetRemainingExpirationDuration, ReturnValue) == 0x000008, "Member 'FortQuestItem_GetRemainingExpirationDuration::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItem.GetTwitchBroadcasterChannelId
// 0x0010 (0x0010 - 0x0000)
struct FortQuestItem_GetTwitchBroadcasterChannelId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItem_GetTwitchBroadcasterChannelId) == 0x000008, "Wrong alignment on FortQuestItem_GetTwitchBroadcasterChannelId");
static_assert(sizeof(FortQuestItem_GetTwitchBroadcasterChannelId) == 0x000010, "Wrong size on FortQuestItem_GetTwitchBroadcasterChannelId");
static_assert(offsetof(FortQuestItem_GetTwitchBroadcasterChannelId, ReturnValue) == 0x000000, "Member 'FortQuestItem_GetTwitchBroadcasterChannelId::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItem.HasCompletedObjective
// 0x0018 (0x0018 - 0x0000)
struct FortQuestItem_HasCompletedObjective final
{
public:
	struct FDataTableRowHandle                    ObjectiveStatHandle;                               // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuestItem_HasCompletedObjective) == 0x000008, "Wrong alignment on FortQuestItem_HasCompletedObjective");
static_assert(sizeof(FortQuestItem_HasCompletedObjective) == 0x000018, "Wrong size on FortQuestItem_HasCompletedObjective");
static_assert(offsetof(FortQuestItem_HasCompletedObjective, ObjectiveStatHandle) == 0x000000, "Member 'FortQuestItem_HasCompletedObjective::ObjectiveStatHandle' has a wrong offset!");
static_assert(offsetof(FortQuestItem_HasCompletedObjective, ReturnValue) == 0x000010, "Member 'FortQuestItem_HasCompletedObjective::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItem.HasCompletedObjectiveWithName
// 0x0010 (0x0010 - 0x0000)
struct FortQuestItem_HasCompletedObjectiveWithName final
{
public:
	class FName                                   BackendName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuestItem_HasCompletedObjectiveWithName) == 0x000004, "Wrong alignment on FortQuestItem_HasCompletedObjectiveWithName");
static_assert(sizeof(FortQuestItem_HasCompletedObjectiveWithName) == 0x000010, "Wrong size on FortQuestItem_HasCompletedObjectiveWithName");
static_assert(offsetof(FortQuestItem_HasCompletedObjectiveWithName, BackendName) == 0x000000, "Member 'FortQuestItem_HasCompletedObjectiveWithName::BackendName' has a wrong offset!");
static_assert(offsetof(FortQuestItem_HasCompletedObjectiveWithName, ReturnValue) == 0x000008, "Member 'FortQuestItem_HasCompletedObjectiveWithName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItem.HasCompletedQuest
// 0x0001 (0x0001 - 0x0000)
struct FortQuestItem_HasCompletedQuest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItem_HasCompletedQuest) == 0x000001, "Wrong alignment on FortQuestItem_HasCompletedQuest");
static_assert(sizeof(FortQuestItem_HasCompletedQuest) == 0x000001, "Wrong size on FortQuestItem_HasCompletedQuest");
static_assert(offsetof(FortQuestItem_HasCompletedQuest, ReturnValue) == 0x000000, "Member 'FortQuestItem_HasCompletedQuest::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItem.HasQuestExpired
// 0x0010 (0x0010 - 0x0000)
struct FortQuestItem_HasQuestExpired final
{
public:
	struct FDateTime                              UtcNow;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuestItem_HasQuestExpired) == 0x000008, "Wrong alignment on FortQuestItem_HasQuestExpired");
static_assert(sizeof(FortQuestItem_HasQuestExpired) == 0x000010, "Wrong size on FortQuestItem_HasQuestExpired");
static_assert(offsetof(FortQuestItem_HasQuestExpired, UtcNow) == 0x000000, "Member 'FortQuestItem_HasQuestExpired::UtcNow' has a wrong offset!");
static_assert(offsetof(FortQuestItem_HasQuestExpired, ReturnValue) == 0x000008, "Member 'FortQuestItem_HasQuestExpired::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItem.HasVisibleRewards
// 0x0001 (0x0001 - 0x0000)
struct FortQuestItem_HasVisibleRewards final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItem_HasVisibleRewards) == 0x000001, "Wrong alignment on FortQuestItem_HasVisibleRewards");
static_assert(sizeof(FortQuestItem_HasVisibleRewards) == 0x000001, "Wrong size on FortQuestItem_HasVisibleRewards");
static_assert(offsetof(FortQuestItem_HasVisibleRewards, ReturnValue) == 0x000000, "Member 'FortQuestItem_HasVisibleRewards::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItem.IsObjectiveInProgress
// 0x0018 (0x0018 - 0x0000)
struct FortQuestItem_IsObjectiveInProgress final
{
public:
	struct FDataTableRowHandle                    ObjectiveStatHandle;                               // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuestItem_IsObjectiveInProgress) == 0x000008, "Wrong alignment on FortQuestItem_IsObjectiveInProgress");
static_assert(sizeof(FortQuestItem_IsObjectiveInProgress) == 0x000018, "Wrong size on FortQuestItem_IsObjectiveInProgress");
static_assert(offsetof(FortQuestItem_IsObjectiveInProgress, ObjectiveStatHandle) == 0x000000, "Member 'FortQuestItem_IsObjectiveInProgress::ObjectiveStatHandle' has a wrong offset!");
static_assert(offsetof(FortQuestItem_IsObjectiveInProgress, ReturnValue) == 0x000010, "Member 'FortQuestItem_IsObjectiveInProgress::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItem.IsObjectiveWithNameInProgress
// 0x0010 (0x0010 - 0x0000)
struct FortQuestItem_IsObjectiveWithNameInProgress final
{
public:
	class FName                                   BackendName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuestItem_IsObjectiveWithNameInProgress) == 0x000004, "Wrong alignment on FortQuestItem_IsObjectiveWithNameInProgress");
static_assert(sizeof(FortQuestItem_IsObjectiveWithNameInProgress) == 0x000010, "Wrong size on FortQuestItem_IsObjectiveWithNameInProgress");
static_assert(offsetof(FortQuestItem_IsObjectiveWithNameInProgress, BackendName) == 0x000000, "Member 'FortQuestItem_IsObjectiveWithNameInProgress::BackendName' has a wrong offset!");
static_assert(offsetof(FortQuestItem_IsObjectiveWithNameInProgress, ReturnValue) == 0x000008, "Member 'FortQuestItem_IsObjectiveWithNameInProgress::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItem.IsQuestInProgress
// 0x0001 (0x0001 - 0x0000)
struct FortQuestItem_IsQuestInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItem_IsQuestInProgress) == 0x000001, "Wrong alignment on FortQuestItem_IsQuestInProgress");
static_assert(sizeof(FortQuestItem_IsQuestInProgress) == 0x000001, "Wrong size on FortQuestItem_IsQuestInProgress");
static_assert(offsetof(FortQuestItem_IsQuestInProgress, ReturnValue) == 0x000000, "Member 'FortQuestItem_IsQuestInProgress::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItem.IsQuestPinned
// 0x0001 (0x0001 - 0x0000)
struct FortQuestItem_IsQuestPinned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItem_IsQuestPinned) == 0x000001, "Wrong alignment on FortQuestItem_IsQuestPinned");
static_assert(sizeof(FortQuestItem_IsQuestPinned) == 0x000001, "Wrong size on FortQuestItem_IsQuestPinned");
static_assert(offsetof(FortQuestItem_IsQuestPinned, ReturnValue) == 0x000000, "Member 'FortQuestItem_IsQuestPinned::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItem.IsVisibleToUser
// 0x0002 (0x0002 - 0x0000)
struct FortQuestItem_IsVisibleToUser final
{
public:
	bool                                          bAllowClaimedQuestsToBeVisible;                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItem_IsVisibleToUser) == 0x000001, "Wrong alignment on FortQuestItem_IsVisibleToUser");
static_assert(sizeof(FortQuestItem_IsVisibleToUser) == 0x000002, "Wrong size on FortQuestItem_IsVisibleToUser");
static_assert(offsetof(FortQuestItem_IsVisibleToUser, bAllowClaimedQuestsToBeVisible) == 0x000000, "Member 'FortQuestItem_IsVisibleToUser::bAllowClaimedQuestsToBeVisible' has a wrong offset!");
static_assert(offsetof(FortQuestItem_IsVisibleToUser, ReturnValue) == 0x000001, "Member 'FortQuestItem_IsVisibleToUser::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestObjectiveTooltip.GetNumericValue
// 0x0028 (0x0028 - 0x0000)
struct FortQuestObjectiveTooltip_GetNumericValue final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVal;                                            // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuestObjectiveTooltip_GetNumericValue) == 0x000008, "Wrong alignment on FortQuestObjectiveTooltip_GetNumericValue");
static_assert(sizeof(FortQuestObjectiveTooltip_GetNumericValue) == 0x000028, "Wrong size on FortQuestObjectiveTooltip_GetNumericValue");
static_assert(offsetof(FortQuestObjectiveTooltip_GetNumericValue, ObjectToDescribe) == 0x000000, "Member 'FortQuestObjectiveTooltip_GetNumericValue::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortQuestObjectiveTooltip_GetNumericValue, Tag) == 0x000008, "Member 'FortQuestObjectiveTooltip_GetNumericValue::Tag' has a wrong offset!");
static_assert(offsetof(FortQuestObjectiveTooltip_GetNumericValue, Context) == 0x000010, "Member 'FortQuestObjectiveTooltip_GetNumericValue::Context' has a wrong offset!");
static_assert(offsetof(FortQuestObjectiveTooltip_GetNumericValue, Token) == 0x000018, "Member 'FortQuestObjectiveTooltip_GetNumericValue::Token' has a wrong offset!");
static_assert(offsetof(FortQuestObjectiveTooltip_GetNumericValue, OutVal) == 0x000020, "Member 'FortQuestObjectiveTooltip_GetNumericValue::OutVal' has a wrong offset!");
static_assert(offsetof(FortQuestObjectiveTooltip_GetNumericValue, ReturnValue) == 0x000024, "Member 'FortQuestObjectiveTooltip_GetNumericValue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestObjectiveTooltip.GetTextForToken
// 0x0040 (0x0040 - 0x0000)
struct FortQuestObjectiveTooltip_GetTextForToken final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuestObjectiveTooltip_GetTextForToken) == 0x000008, "Wrong alignment on FortQuestObjectiveTooltip_GetTextForToken");
static_assert(sizeof(FortQuestObjectiveTooltip_GetTextForToken) == 0x000040, "Wrong size on FortQuestObjectiveTooltip_GetTextForToken");
static_assert(offsetof(FortQuestObjectiveTooltip_GetTextForToken, ObjectToDescribe) == 0x000000, "Member 'FortQuestObjectiveTooltip_GetTextForToken::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortQuestObjectiveTooltip_GetTextForToken, Tag) == 0x000008, "Member 'FortQuestObjectiveTooltip_GetTextForToken::Tag' has a wrong offset!");
static_assert(offsetof(FortQuestObjectiveTooltip_GetTextForToken, Context) == 0x000010, "Member 'FortQuestObjectiveTooltip_GetTextForToken::Context' has a wrong offset!");
static_assert(offsetof(FortQuestObjectiveTooltip_GetTextForToken, Token) == 0x000018, "Member 'FortQuestObjectiveTooltip_GetTextForToken::Token' has a wrong offset!");
static_assert(offsetof(FortQuestObjectiveTooltip_GetTextForToken, OutText) == 0x000020, "Member 'FortQuestObjectiveTooltip_GetTextForToken::OutText' has a wrong offset!");
static_assert(offsetof(FortQuestObjectiveTooltip_GetTextForToken, ReturnValue) == 0x000038, "Member 'FortQuestObjectiveTooltip_GetTextForToken::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestObjectiveTooltip.GetTokenizedDescriptionText
// 0x0030 (0x0030 - 0x0000)
struct FortQuestObjectiveTooltip_GetTokenizedDescriptionText final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           OutDescription;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuestObjectiveTooltip_GetTokenizedDescriptionText) == 0x000008, "Wrong alignment on FortQuestObjectiveTooltip_GetTokenizedDescriptionText");
static_assert(sizeof(FortQuestObjectiveTooltip_GetTokenizedDescriptionText) == 0x000030, "Wrong size on FortQuestObjectiveTooltip_GetTokenizedDescriptionText");
static_assert(offsetof(FortQuestObjectiveTooltip_GetTokenizedDescriptionText, ObjectToDescribe) == 0x000000, "Member 'FortQuestObjectiveTooltip_GetTokenizedDescriptionText::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortQuestObjectiveTooltip_GetTokenizedDescriptionText, Tag) == 0x000008, "Member 'FortQuestObjectiveTooltip_GetTokenizedDescriptionText::Tag' has a wrong offset!");
static_assert(offsetof(FortQuestObjectiveTooltip_GetTokenizedDescriptionText, Context) == 0x000010, "Member 'FortQuestObjectiveTooltip_GetTokenizedDescriptionText::Context' has a wrong offset!");
static_assert(offsetof(FortQuestObjectiveTooltip_GetTokenizedDescriptionText, OutDescription) == 0x000018, "Member 'FortQuestObjectiveTooltip_GetTokenizedDescriptionText::OutDescription' has a wrong offset!");
static_assert(offsetof(FortQuestObjectiveTooltip_GetTokenizedDescriptionText, ReturnValue) == 0x000028, "Member 'FortQuestObjectiveTooltip_GetTokenizedDescriptionText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuickBars.DisableSlot
// 0x0008 (0x0008 - 0x0000)
struct FortQuickBars_DisableSlot final
{
public:
	EFortQuickBars                                InQuickBar;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuickBars_DisableSlot) == 0x000004, "Wrong alignment on FortQuickBars_DisableSlot");
static_assert(sizeof(FortQuickBars_DisableSlot) == 0x000008, "Wrong size on FortQuickBars_DisableSlot");
static_assert(offsetof(FortQuickBars_DisableSlot, InQuickBar) == 0x000000, "Member 'FortQuickBars_DisableSlot::InQuickBar' has a wrong offset!");
static_assert(offsetof(FortQuickBars_DisableSlot, SlotIndex) == 0x000004, "Member 'FortQuickBars_DisableSlot::SlotIndex' has a wrong offset!");

// Function FortniteGame.FortQuickBars.Empty
// 0x0001 (0x0001 - 0x0000)
struct FortQuickBars_Empty final
{
public:
	EFortQuickBars                                InQuickBar;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuickBars_Empty) == 0x000001, "Wrong alignment on FortQuickBars_Empty");
static_assert(sizeof(FortQuickBars_Empty) == 0x000001, "Wrong size on FortQuickBars_Empty");
static_assert(offsetof(FortQuickBars_Empty, InQuickBar) == 0x000000, "Member 'FortQuickBars_Empty::InQuickBar' has a wrong offset!");

// Function FortniteGame.FortQuickBars.EmptySlot
// 0x0008 (0x0008 - 0x0000)
struct FortQuickBars_EmptySlot final
{
public:
	EFortQuickBars                                InQuickBar;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuickBars_EmptySlot) == 0x000004, "Wrong alignment on FortQuickBars_EmptySlot");
static_assert(sizeof(FortQuickBars_EmptySlot) == 0x000008, "Wrong size on FortQuickBars_EmptySlot");
static_assert(offsetof(FortQuickBars_EmptySlot, InQuickBar) == 0x000000, "Member 'FortQuickBars_EmptySlot::InQuickBar' has a wrong offset!");
static_assert(offsetof(FortQuickBars_EmptySlot, SlotIndex) == 0x000004, "Member 'FortQuickBars_EmptySlot::SlotIndex' has a wrong offset!");

// Function FortniteGame.FortQuickBars.EnableSlot
// 0x0008 (0x0008 - 0x0000)
struct FortQuickBars_EnableSlot final
{
public:
	EFortQuickBars                                InQuickBar;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuickBars_EnableSlot) == 0x000004, "Wrong alignment on FortQuickBars_EnableSlot");
static_assert(sizeof(FortQuickBars_EnableSlot) == 0x000008, "Wrong size on FortQuickBars_EnableSlot");
static_assert(offsetof(FortQuickBars_EnableSlot, InQuickBar) == 0x000000, "Member 'FortQuickBars_EnableSlot::InQuickBar' has a wrong offset!");
static_assert(offsetof(FortQuickBars_EnableSlot, SlotIndex) == 0x000004, "Member 'FortQuickBars_EnableSlot::SlotIndex' has a wrong offset!");

// Function FortniteGame.FortQuickBars.ServerActivateSlotInternal
// 0x0010 (0x0010 - 0x0000)
struct FortQuickBars_ServerActivateSlotInternal final
{
public:
	EFortQuickBars                                InQuickBar;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Slot;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActivateDelay;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdatePreviousFocusedSlot;                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuickBars_ServerActivateSlotInternal) == 0x000004, "Wrong alignment on FortQuickBars_ServerActivateSlotInternal");
static_assert(sizeof(FortQuickBars_ServerActivateSlotInternal) == 0x000010, "Wrong size on FortQuickBars_ServerActivateSlotInternal");
static_assert(offsetof(FortQuickBars_ServerActivateSlotInternal, InQuickBar) == 0x000000, "Member 'FortQuickBars_ServerActivateSlotInternal::InQuickBar' has a wrong offset!");
static_assert(offsetof(FortQuickBars_ServerActivateSlotInternal, Slot) == 0x000004, "Member 'FortQuickBars_ServerActivateSlotInternal::Slot' has a wrong offset!");
static_assert(offsetof(FortQuickBars_ServerActivateSlotInternal, ActivateDelay) == 0x000008, "Member 'FortQuickBars_ServerActivateSlotInternal::ActivateDelay' has a wrong offset!");
static_assert(offsetof(FortQuickBars_ServerActivateSlotInternal, bUpdatePreviousFocusedSlot) == 0x00000C, "Member 'FortQuickBars_ServerActivateSlotInternal::bUpdatePreviousFocusedSlot' has a wrong offset!");

// Function FortniteGame.FortQuickBars.ServerAddItemInternal
// 0x0018 (0x0018 - 0x0000)
struct FortQuickBars_ServerAddItemInternal final
{
public:
	struct FGuid                                  Item;                                              // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortQuickBars                                InQuickBar;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Slot;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuickBars_ServerAddItemInternal) == 0x000004, "Wrong alignment on FortQuickBars_ServerAddItemInternal");
static_assert(sizeof(FortQuickBars_ServerAddItemInternal) == 0x000018, "Wrong size on FortQuickBars_ServerAddItemInternal");
static_assert(offsetof(FortQuickBars_ServerAddItemInternal, Item) == 0x000000, "Member 'FortQuickBars_ServerAddItemInternal::Item' has a wrong offset!");
static_assert(offsetof(FortQuickBars_ServerAddItemInternal, InQuickBar) == 0x000010, "Member 'FortQuickBars_ServerAddItemInternal::InQuickBar' has a wrong offset!");
static_assert(offsetof(FortQuickBars_ServerAddItemInternal, Slot) == 0x000014, "Member 'FortQuickBars_ServerAddItemInternal::Slot' has a wrong offset!");

// Function FortniteGame.FortQuickBars.ServerRemoveItemInternal
// 0x0014 (0x0014 - 0x0000)
struct FortQuickBars_ServerRemoveItemInternal final
{
public:
	struct FGuid                                  Item;                                              // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFindReplacement;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuickBars_ServerRemoveItemInternal) == 0x000004, "Wrong alignment on FortQuickBars_ServerRemoveItemInternal");
static_assert(sizeof(FortQuickBars_ServerRemoveItemInternal) == 0x000014, "Wrong size on FortQuickBars_ServerRemoveItemInternal");
static_assert(offsetof(FortQuickBars_ServerRemoveItemInternal, Item) == 0x000000, "Member 'FortQuickBars_ServerRemoveItemInternal::Item' has a wrong offset!");
static_assert(offsetof(FortQuickBars_ServerRemoveItemInternal, bFindReplacement) == 0x000010, "Member 'FortQuickBars_ServerRemoveItemInternal::bFindReplacement' has a wrong offset!");
static_assert(offsetof(FortQuickBars_ServerRemoveItemInternal, bForce) == 0x000011, "Member 'FortQuickBars_ServerRemoveItemInternal::bForce' has a wrong offset!");

// Function FortniteGame.FortQuickBars.ServerSwapItemsInternal
// 0x0010 (0x0010 - 0x0000)
struct FortQuickBars_ServerSwapItemsInternal final
{
public:
	EFortQuickBars                                QuickBarA;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotIndexA;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortQuickBars                                QuickBarB;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotIndexB;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuickBars_ServerSwapItemsInternal) == 0x000004, "Wrong alignment on FortQuickBars_ServerSwapItemsInternal");
static_assert(sizeof(FortQuickBars_ServerSwapItemsInternal) == 0x000010, "Wrong size on FortQuickBars_ServerSwapItemsInternal");
static_assert(offsetof(FortQuickBars_ServerSwapItemsInternal, QuickBarA) == 0x000000, "Member 'FortQuickBars_ServerSwapItemsInternal::QuickBarA' has a wrong offset!");
static_assert(offsetof(FortQuickBars_ServerSwapItemsInternal, SlotIndexA) == 0x000004, "Member 'FortQuickBars_ServerSwapItemsInternal::SlotIndexA' has a wrong offset!");
static_assert(offsetof(FortQuickBars_ServerSwapItemsInternal, QuickBarB) == 0x000008, "Member 'FortQuickBars_ServerSwapItemsInternal::QuickBarB' has a wrong offset!");
static_assert(offsetof(FortQuickBars_ServerSwapItemsInternal, SlotIndexB) == 0x00000C, "Member 'FortQuickBars_ServerSwapItemsInternal::SlotIndexB' has a wrong offset!");

// Function FortniteGame.FortQuotaItem.GetCurrentQuotaAmount
// 0x0004 (0x0004 - 0x0000)
struct FortQuotaItem_GetCurrentQuotaAmount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuotaItem_GetCurrentQuotaAmount) == 0x000004, "Wrong alignment on FortQuotaItem_GetCurrentQuotaAmount");
static_assert(sizeof(FortQuotaItem_GetCurrentQuotaAmount) == 0x000004, "Wrong size on FortQuotaItem_GetCurrentQuotaAmount");
static_assert(offsetof(FortQuotaItem_GetCurrentQuotaAmount, ReturnValue) == 0x000000, "Member 'FortQuotaItem_GetCurrentQuotaAmount::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortRegisteredPlayerInfoTooltip.GetNumericValue
// 0x0028 (0x0028 - 0x0000)
struct FortRegisteredPlayerInfoTooltip_GetNumericValue final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVal;                                            // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortRegisteredPlayerInfoTooltip_GetNumericValue) == 0x000008, "Wrong alignment on FortRegisteredPlayerInfoTooltip_GetNumericValue");
static_assert(sizeof(FortRegisteredPlayerInfoTooltip_GetNumericValue) == 0x000028, "Wrong size on FortRegisteredPlayerInfoTooltip_GetNumericValue");
static_assert(offsetof(FortRegisteredPlayerInfoTooltip_GetNumericValue, ObjectToDescribe) == 0x000000, "Member 'FortRegisteredPlayerInfoTooltip_GetNumericValue::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortRegisteredPlayerInfoTooltip_GetNumericValue, Tag) == 0x000008, "Member 'FortRegisteredPlayerInfoTooltip_GetNumericValue::Tag' has a wrong offset!");
static_assert(offsetof(FortRegisteredPlayerInfoTooltip_GetNumericValue, Context) == 0x000010, "Member 'FortRegisteredPlayerInfoTooltip_GetNumericValue::Context' has a wrong offset!");
static_assert(offsetof(FortRegisteredPlayerInfoTooltip_GetNumericValue, Token) == 0x000018, "Member 'FortRegisteredPlayerInfoTooltip_GetNumericValue::Token' has a wrong offset!");
static_assert(offsetof(FortRegisteredPlayerInfoTooltip_GetNumericValue, OutVal) == 0x000020, "Member 'FortRegisteredPlayerInfoTooltip_GetNumericValue::OutVal' has a wrong offset!");
static_assert(offsetof(FortRegisteredPlayerInfoTooltip_GetNumericValue, ReturnValue) == 0x000024, "Member 'FortRegisteredPlayerInfoTooltip_GetNumericValue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortRegisteredPlayerInfoTooltip.GetTextForToken
// 0x0040 (0x0040 - 0x0000)
struct FortRegisteredPlayerInfoTooltip_GetTextForToken final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortRegisteredPlayerInfoTooltip_GetTextForToken) == 0x000008, "Wrong alignment on FortRegisteredPlayerInfoTooltip_GetTextForToken");
static_assert(sizeof(FortRegisteredPlayerInfoTooltip_GetTextForToken) == 0x000040, "Wrong size on FortRegisteredPlayerInfoTooltip_GetTextForToken");
static_assert(offsetof(FortRegisteredPlayerInfoTooltip_GetTextForToken, ObjectToDescribe) == 0x000000, "Member 'FortRegisteredPlayerInfoTooltip_GetTextForToken::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortRegisteredPlayerInfoTooltip_GetTextForToken, Tag) == 0x000008, "Member 'FortRegisteredPlayerInfoTooltip_GetTextForToken::Tag' has a wrong offset!");
static_assert(offsetof(FortRegisteredPlayerInfoTooltip_GetTextForToken, Context) == 0x000010, "Member 'FortRegisteredPlayerInfoTooltip_GetTextForToken::Context' has a wrong offset!");
static_assert(offsetof(FortRegisteredPlayerInfoTooltip_GetTextForToken, Token) == 0x000018, "Member 'FortRegisteredPlayerInfoTooltip_GetTextForToken::Token' has a wrong offset!");
static_assert(offsetof(FortRegisteredPlayerInfoTooltip_GetTextForToken, OutText) == 0x000020, "Member 'FortRegisteredPlayerInfoTooltip_GetTextForToken::OutText' has a wrong offset!");
static_assert(offsetof(FortRegisteredPlayerInfoTooltip_GetTextForToken, ReturnValue) == 0x000038, "Member 'FortRegisteredPlayerInfoTooltip_GetTextForToken::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortRegisteredPlayerInfoTooltip.GetTokenizedDescriptionText
// 0x0030 (0x0030 - 0x0000)
struct FortRegisteredPlayerInfoTooltip_GetTokenizedDescriptionText final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           OutDescription;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortRegisteredPlayerInfoTooltip_GetTokenizedDescriptionText) == 0x000008, "Wrong alignment on FortRegisteredPlayerInfoTooltip_GetTokenizedDescriptionText");
static_assert(sizeof(FortRegisteredPlayerInfoTooltip_GetTokenizedDescriptionText) == 0x000030, "Wrong size on FortRegisteredPlayerInfoTooltip_GetTokenizedDescriptionText");
static_assert(offsetof(FortRegisteredPlayerInfoTooltip_GetTokenizedDescriptionText, ObjectToDescribe) == 0x000000, "Member 'FortRegisteredPlayerInfoTooltip_GetTokenizedDescriptionText::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortRegisteredPlayerInfoTooltip_GetTokenizedDescriptionText, Tag) == 0x000008, "Member 'FortRegisteredPlayerInfoTooltip_GetTokenizedDescriptionText::Tag' has a wrong offset!");
static_assert(offsetof(FortRegisteredPlayerInfoTooltip_GetTokenizedDescriptionText, Context) == 0x000010, "Member 'FortRegisteredPlayerInfoTooltip_GetTokenizedDescriptionText::Context' has a wrong offset!");
static_assert(offsetof(FortRegisteredPlayerInfoTooltip_GetTokenizedDescriptionText, OutDescription) == 0x000018, "Member 'FortRegisteredPlayerInfoTooltip_GetTokenizedDescriptionText::OutDescription' has a wrong offset!");
static_assert(offsetof(FortRegisteredPlayerInfoTooltip_GetTokenizedDescriptionText, ReturnValue) == 0x000028, "Member 'FortRegisteredPlayerInfoTooltip_GetTokenizedDescriptionText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortRegisteredPlayerInfoTooltip.GetValueData
// 0x0090 (0x0090 - 0x0000)
struct FortRegisteredPlayerInfoTooltip_GetValueData final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0010(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortTooltipValueData                  OutData;                                           // 0x0018(0x0070)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortRegisteredPlayerInfoTooltip_GetValueData) == 0x000008, "Wrong alignment on FortRegisteredPlayerInfoTooltip_GetValueData");
static_assert(sizeof(FortRegisteredPlayerInfoTooltip_GetValueData) == 0x000090, "Wrong size on FortRegisteredPlayerInfoTooltip_GetValueData");
static_assert(offsetof(FortRegisteredPlayerInfoTooltip_GetValueData, ObjectToDescribe) == 0x000000, "Member 'FortRegisteredPlayerInfoTooltip_GetValueData::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortRegisteredPlayerInfoTooltip_GetValueData, Context) == 0x000008, "Member 'FortRegisteredPlayerInfoTooltip_GetValueData::Context' has a wrong offset!");
static_assert(offsetof(FortRegisteredPlayerInfoTooltip_GetValueData, Token) == 0x000010, "Member 'FortRegisteredPlayerInfoTooltip_GetValueData::Token' has a wrong offset!");
static_assert(offsetof(FortRegisteredPlayerInfoTooltip_GetValueData, OutData) == 0x000018, "Member 'FortRegisteredPlayerInfoTooltip_GetValueData::OutData' has a wrong offset!");
static_assert(offsetof(FortRegisteredPlayerInfoTooltip_GetValueData, ReturnValue) == 0x000088, "Member 'FortRegisteredPlayerInfoTooltip_GetValueData::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSchematicItemDefinition.GetCraftingSuccessSound
// 0x0008 (0x0008 - 0x0000)
struct FortSchematicItemDefinition_GetCraftingSuccessSound final
{
public:
	class USoundBase*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSchematicItemDefinition_GetCraftingSuccessSound) == 0x000008, "Wrong alignment on FortSchematicItemDefinition_GetCraftingSuccessSound");
static_assert(sizeof(FortSchematicItemDefinition_GetCraftingSuccessSound) == 0x000008, "Wrong size on FortSchematicItemDefinition_GetCraftingSuccessSound");
static_assert(offsetof(FortSchematicItemDefinition_GetCraftingSuccessSound, ReturnValue) == 0x000000, "Member 'FortSchematicItemDefinition_GetCraftingSuccessSound::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSchematicItemDefinition.GetCraftingTime
// 0x0008 (0x0008 - 0x0000)
struct FortSchematicItemDefinition_GetCraftingTime final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSchematicItemDefinition_GetCraftingTime) == 0x000004, "Wrong alignment on FortSchematicItemDefinition_GetCraftingTime");
static_assert(sizeof(FortSchematicItemDefinition_GetCraftingTime) == 0x000008, "Wrong size on FortSchematicItemDefinition_GetCraftingTime");
static_assert(offsetof(FortSchematicItemDefinition_GetCraftingTime, Level) == 0x000000, "Member 'FortSchematicItemDefinition_GetCraftingTime::Level' has a wrong offset!");
static_assert(offsetof(FortSchematicItemDefinition_GetCraftingTime, ReturnValue) == 0x000004, "Member 'FortSchematicItemDefinition_GetCraftingTime::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSchematicItemDefinition.GetCraftingTimeForCharacter
// 0x0018 (0x0018 - 0x0000)
struct FortSchematicItemDefinition_GetCraftingTimeForCharacter final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AFortPlayerPawn*                  FortPawn;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSchematicItemDefinition_GetCraftingTimeForCharacter) == 0x000008, "Wrong alignment on FortSchematicItemDefinition_GetCraftingTimeForCharacter");
static_assert(sizeof(FortSchematicItemDefinition_GetCraftingTimeForCharacter) == 0x000018, "Wrong size on FortSchematicItemDefinition_GetCraftingTimeForCharacter");
static_assert(offsetof(FortSchematicItemDefinition_GetCraftingTimeForCharacter, Level) == 0x000000, "Member 'FortSchematicItemDefinition_GetCraftingTimeForCharacter::Level' has a wrong offset!");
static_assert(offsetof(FortSchematicItemDefinition_GetCraftingTimeForCharacter, FortPawn) == 0x000008, "Member 'FortSchematicItemDefinition_GetCraftingTimeForCharacter::FortPawn' has a wrong offset!");
static_assert(offsetof(FortSchematicItemDefinition_GetCraftingTimeForCharacter, ReturnValue) == 0x000010, "Member 'FortSchematicItemDefinition_GetCraftingTimeForCharacter::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSchematicItemDefinition.GetQuantityProduced
// 0x0004 (0x0004 - 0x0000)
struct FortSchematicItemDefinition_GetQuantityProduced final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSchematicItemDefinition_GetQuantityProduced) == 0x000004, "Wrong alignment on FortSchematicItemDefinition_GetQuantityProduced");
static_assert(sizeof(FortSchematicItemDefinition_GetQuantityProduced) == 0x000004, "Wrong size on FortSchematicItemDefinition_GetQuantityProduced");
static_assert(offsetof(FortSchematicItemDefinition_GetQuantityProduced, ReturnValue) == 0x000000, "Member 'FortSchematicItemDefinition_GetQuantityProduced::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSchematicItemDefinition.GetRecipe
// 0x0058 (0x0058 - 0x0000)
struct FortSchematicItemDefinition_GetRecipe final
{
public:
	struct FRecipe                                ReturnValue;                                       // 0x0000(0x0058)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSchematicItemDefinition_GetRecipe) == 0x000008, "Wrong alignment on FortSchematicItemDefinition_GetRecipe");
static_assert(sizeof(FortSchematicItemDefinition_GetRecipe) == 0x000058, "Wrong size on FortSchematicItemDefinition_GetRecipe");
static_assert(offsetof(FortSchematicItemDefinition_GetRecipe, ReturnValue) == 0x000000, "Member 'FortSchematicItemDefinition_GetRecipe::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSchematicItemDefinition.GetResultWorldItemDefinition
// 0x0008 (0x0008 - 0x0000)
struct FortSchematicItemDefinition_GetResultWorldItemDefinition final
{
public:
	class UFortWorldItemDefinition*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSchematicItemDefinition_GetResultWorldItemDefinition) == 0x000008, "Wrong alignment on FortSchematicItemDefinition_GetResultWorldItemDefinition");
static_assert(sizeof(FortSchematicItemDefinition_GetResultWorldItemDefinition) == 0x000008, "Wrong size on FortSchematicItemDefinition_GetResultWorldItemDefinition");
static_assert(offsetof(FortSchematicItemDefinition_GetResultWorldItemDefinition, ReturnValue) == 0x000000, "Member 'FortSchematicItemDefinition_GetResultWorldItemDefinition::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSchematicTooltip.GetNumericValue
// 0x0028 (0x0028 - 0x0000)
struct FortSchematicTooltip_GetNumericValue final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVal;                                            // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSchematicTooltip_GetNumericValue) == 0x000008, "Wrong alignment on FortSchematicTooltip_GetNumericValue");
static_assert(sizeof(FortSchematicTooltip_GetNumericValue) == 0x000028, "Wrong size on FortSchematicTooltip_GetNumericValue");
static_assert(offsetof(FortSchematicTooltip_GetNumericValue, ObjectToDescribe) == 0x000000, "Member 'FortSchematicTooltip_GetNumericValue::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortSchematicTooltip_GetNumericValue, Tag) == 0x000008, "Member 'FortSchematicTooltip_GetNumericValue::Tag' has a wrong offset!");
static_assert(offsetof(FortSchematicTooltip_GetNumericValue, Context) == 0x000010, "Member 'FortSchematicTooltip_GetNumericValue::Context' has a wrong offset!");
static_assert(offsetof(FortSchematicTooltip_GetNumericValue, Token) == 0x000018, "Member 'FortSchematicTooltip_GetNumericValue::Token' has a wrong offset!");
static_assert(offsetof(FortSchematicTooltip_GetNumericValue, OutVal) == 0x000020, "Member 'FortSchematicTooltip_GetNumericValue::OutVal' has a wrong offset!");
static_assert(offsetof(FortSchematicTooltip_GetNumericValue, ReturnValue) == 0x000024, "Member 'FortSchematicTooltip_GetNumericValue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSchematicTooltip.GetTextForToken
// 0x0040 (0x0040 - 0x0000)
struct FortSchematicTooltip_GetTextForToken final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSchematicTooltip_GetTextForToken) == 0x000008, "Wrong alignment on FortSchematicTooltip_GetTextForToken");
static_assert(sizeof(FortSchematicTooltip_GetTextForToken) == 0x000040, "Wrong size on FortSchematicTooltip_GetTextForToken");
static_assert(offsetof(FortSchematicTooltip_GetTextForToken, ObjectToDescribe) == 0x000000, "Member 'FortSchematicTooltip_GetTextForToken::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortSchematicTooltip_GetTextForToken, Tag) == 0x000008, "Member 'FortSchematicTooltip_GetTextForToken::Tag' has a wrong offset!");
static_assert(offsetof(FortSchematicTooltip_GetTextForToken, Context) == 0x000010, "Member 'FortSchematicTooltip_GetTextForToken::Context' has a wrong offset!");
static_assert(offsetof(FortSchematicTooltip_GetTextForToken, Token) == 0x000018, "Member 'FortSchematicTooltip_GetTextForToken::Token' has a wrong offset!");
static_assert(offsetof(FortSchematicTooltip_GetTextForToken, OutText) == 0x000020, "Member 'FortSchematicTooltip_GetTextForToken::OutText' has a wrong offset!");
static_assert(offsetof(FortSchematicTooltip_GetTextForToken, ReturnValue) == 0x000038, "Member 'FortSchematicTooltip_GetTextForToken::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSchematicTooltip.GetTokenizedDescriptionText
// 0x0030 (0x0030 - 0x0000)
struct FortSchematicTooltip_GetTokenizedDescriptionText final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           OutDescription;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSchematicTooltip_GetTokenizedDescriptionText) == 0x000008, "Wrong alignment on FortSchematicTooltip_GetTokenizedDescriptionText");
static_assert(sizeof(FortSchematicTooltip_GetTokenizedDescriptionText) == 0x000030, "Wrong size on FortSchematicTooltip_GetTokenizedDescriptionText");
static_assert(offsetof(FortSchematicTooltip_GetTokenizedDescriptionText, ObjectToDescribe) == 0x000000, "Member 'FortSchematicTooltip_GetTokenizedDescriptionText::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortSchematicTooltip_GetTokenizedDescriptionText, Tag) == 0x000008, "Member 'FortSchematicTooltip_GetTokenizedDescriptionText::Tag' has a wrong offset!");
static_assert(offsetof(FortSchematicTooltip_GetTokenizedDescriptionText, Context) == 0x000010, "Member 'FortSchematicTooltip_GetTokenizedDescriptionText::Context' has a wrong offset!");
static_assert(offsetof(FortSchematicTooltip_GetTokenizedDescriptionText, OutDescription) == 0x000018, "Member 'FortSchematicTooltip_GetTokenizedDescriptionText::OutDescription' has a wrong offset!");
static_assert(offsetof(FortSchematicTooltip_GetTokenizedDescriptionText, ReturnValue) == 0x000028, "Member 'FortSchematicTooltip_GetTokenizedDescriptionText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortScriptedActionManager.HandleClientEvent_Undefined
// 0x0030 (0x0030 - 0x0000)
struct FortScriptedActionManager_HandleClientEvent_Undefined final
{
public:
	class UObject*                                EventSource;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                EventFocus;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortClientEvent                       ClientEvent;                                       // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortScriptedActionManager_HandleClientEvent_Undefined) == 0x000008, "Wrong alignment on FortScriptedActionManager_HandleClientEvent_Undefined");
static_assert(sizeof(FortScriptedActionManager_HandleClientEvent_Undefined) == 0x000030, "Wrong size on FortScriptedActionManager_HandleClientEvent_Undefined");
static_assert(offsetof(FortScriptedActionManager_HandleClientEvent_Undefined, EventSource) == 0x000000, "Member 'FortScriptedActionManager_HandleClientEvent_Undefined::EventSource' has a wrong offset!");
static_assert(offsetof(FortScriptedActionManager_HandleClientEvent_Undefined, EventFocus) == 0x000008, "Member 'FortScriptedActionManager_HandleClientEvent_Undefined::EventFocus' has a wrong offset!");
static_assert(offsetof(FortScriptedActionManager_HandleClientEvent_Undefined, ClientEvent) == 0x000010, "Member 'FortScriptedActionManager_HandleClientEvent_Undefined::ClientEvent' has a wrong offset!");

// Function FortniteGame.FortSocialItem.GetDisplayName
// 0x0018 (0x0018 - 0x0000)
struct FortSocialItem_GetDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSocialItem_GetDisplayName) == 0x000008, "Wrong alignment on FortSocialItem_GetDisplayName");
static_assert(sizeof(FortSocialItem_GetDisplayName) == 0x000018, "Wrong size on FortSocialItem_GetDisplayName");
static_assert(offsetof(FortSocialItem_GetDisplayName, ReturnValue) == 0x000000, "Member 'FortSocialItem_GetDisplayName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSocialItem.GetLocation
// 0x0018 (0x0018 - 0x0000)
struct FortSocialItem_GetLocation final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSocialItem_GetLocation) == 0x000008, "Wrong alignment on FortSocialItem_GetLocation");
static_assert(sizeof(FortSocialItem_GetLocation) == 0x000018, "Wrong size on FortSocialItem_GetLocation");
static_assert(offsetof(FortSocialItem_GetLocation, ReturnValue) == 0x000000, "Member 'FortSocialItem_GetLocation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSocialItem.GetPresenceStatus
// 0x0001 (0x0001 - 0x0000)
struct FortSocialItem_GetPresenceStatus final
{
public:
	EFortSocialItemPresenceStatus                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSocialItem_GetPresenceStatus) == 0x000001, "Wrong alignment on FortSocialItem_GetPresenceStatus");
static_assert(sizeof(FortSocialItem_GetPresenceStatus) == 0x000001, "Wrong size on FortSocialItem_GetPresenceStatus");
static_assert(offsetof(FortSocialItem_GetPresenceStatus, ReturnValue) == 0x000000, "Member 'FortSocialItem_GetPresenceStatus::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSocialItem.GetUniquePlayerId
// 0x0028 (0x0028 - 0x0000)
struct FortSocialItem_GetUniquePlayerId final
{
public:
	struct FUniqueNetIdRepl                       ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSocialItem_GetUniquePlayerId) == 0x000008, "Wrong alignment on FortSocialItem_GetUniquePlayerId");
static_assert(sizeof(FortSocialItem_GetUniquePlayerId) == 0x000028, "Wrong size on FortSocialItem_GetUniquePlayerId");
static_assert(offsetof(FortSocialItem_GetUniquePlayerId, ReturnValue) == 0x000000, "Member 'FortSocialItem_GetUniquePlayerId::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSpline.AddControlPoint
// 0x0010 (0x0010 - 0x0000)
struct FortSpline_AddControlPoint final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSpline_AddControlPoint) == 0x000004, "Wrong alignment on FortSpline_AddControlPoint");
static_assert(sizeof(FortSpline_AddControlPoint) == 0x000010, "Wrong size on FortSpline_AddControlPoint");
static_assert(offsetof(FortSpline_AddControlPoint, Point) == 0x000000, "Member 'FortSpline_AddControlPoint::Point' has a wrong offset!");
static_assert(offsetof(FortSpline_AddControlPoint, Param_Index) == 0x00000C, "Member 'FortSpline_AddControlPoint::Param_Index' has a wrong offset!");

// Function FortniteGame.FortSpline.DrawDebugSpline
// 0x0020 (0x0020 - 0x0000)
struct FortSpline_DrawDebugSpline final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Steps;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeTime;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPersistent;                                       // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bJustDrawSpline;                                   // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BasisLength;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSpline_DrawDebugSpline) == 0x000008, "Wrong alignment on FortSpline_DrawDebugSpline");
static_assert(sizeof(FortSpline_DrawDebugSpline) == 0x000020, "Wrong size on FortSpline_DrawDebugSpline");
static_assert(offsetof(FortSpline_DrawDebugSpline, WorldContextObject) == 0x000000, "Member 'FortSpline_DrawDebugSpline::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortSpline_DrawDebugSpline, Steps) == 0x000008, "Member 'FortSpline_DrawDebugSpline::Steps' has a wrong offset!");
static_assert(offsetof(FortSpline_DrawDebugSpline, LifeTime) == 0x00000C, "Member 'FortSpline_DrawDebugSpline::LifeTime' has a wrong offset!");
static_assert(offsetof(FortSpline_DrawDebugSpline, Thickness) == 0x000010, "Member 'FortSpline_DrawDebugSpline::Thickness' has a wrong offset!");
static_assert(offsetof(FortSpline_DrawDebugSpline, bPersistent) == 0x000014, "Member 'FortSpline_DrawDebugSpline::bPersistent' has a wrong offset!");
static_assert(offsetof(FortSpline_DrawDebugSpline, bJustDrawSpline) == 0x000015, "Member 'FortSpline_DrawDebugSpline::bJustDrawSpline' has a wrong offset!");
static_assert(offsetof(FortSpline_DrawDebugSpline, BasisLength) == 0x000018, "Member 'FortSpline_DrawDebugSpline::BasisLength' has a wrong offset!");

// Function FortniteGame.FortSpline.EnableConstantVelocity
// 0x0001 (0x0001 - 0x0000)
struct FortSpline_EnableConstantVelocity final
{
public:
	bool                                          ConstVelEnabled;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSpline_EnableConstantVelocity) == 0x000001, "Wrong alignment on FortSpline_EnableConstantVelocity");
static_assert(sizeof(FortSpline_EnableConstantVelocity) == 0x000001, "Wrong size on FortSpline_EnableConstantVelocity");
static_assert(offsetof(FortSpline_EnableConstantVelocity, ConstVelEnabled) == 0x000000, "Member 'FortSpline_EnableConstantVelocity::ConstVelEnabled' has a wrong offset!");

// Function FortniteGame.FortSpline.SetDuration
// 0x0004 (0x0004 - 0x0000)
struct FortSpline_SetDuration final
{
public:
	float                                         InDuration;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSpline_SetDuration) == 0x000004, "Wrong alignment on FortSpline_SetDuration");
static_assert(sizeof(FortSpline_SetDuration) == 0x000004, "Wrong size on FortSpline_SetDuration");
static_assert(offsetof(FortSpline_SetDuration, InDuration) == 0x000000, "Member 'FortSpline_SetDuration::InDuration' has a wrong offset!");

// Function FortniteGame.FortSpline.SetupSpline
// 0x0018 (0x0018 - 0x0000)
struct FortSpline_SetupSpline final
{
public:
	TArray<struct FVector>                        ControlPoints;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         InDuration;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSpline_SetupSpline) == 0x000008, "Wrong alignment on FortSpline_SetupSpline");
static_assert(sizeof(FortSpline_SetupSpline) == 0x000018, "Wrong size on FortSpline_SetupSpline");
static_assert(offsetof(FortSpline_SetupSpline, ControlPoints) == 0x000000, "Member 'FortSpline_SetupSpline::ControlPoints' has a wrong offset!");
static_assert(offsetof(FortSpline_SetupSpline, InDuration) == 0x000010, "Member 'FortSpline_SetupSpline::InDuration' has a wrong offset!");

// Function FortniteGame.FortSpline.GetBinormalFromTime
// 0x0010 (0x0010 - 0x0000)
struct FortSpline_GetBinormalFromTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSpline_GetBinormalFromTime) == 0x000004, "Wrong alignment on FortSpline_GetBinormalFromTime");
static_assert(sizeof(FortSpline_GetBinormalFromTime) == 0x000010, "Wrong size on FortSpline_GetBinormalFromTime");
static_assert(offsetof(FortSpline_GetBinormalFromTime, Time) == 0x000000, "Member 'FortSpline_GetBinormalFromTime::Time' has a wrong offset!");
static_assert(offsetof(FortSpline_GetBinormalFromTime, ReturnValue) == 0x000004, "Member 'FortSpline_GetBinormalFromTime::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSpline.GetDuration
// 0x0004 (0x0004 - 0x0000)
struct FortSpline_GetDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSpline_GetDuration) == 0x000004, "Wrong alignment on FortSpline_GetDuration");
static_assert(sizeof(FortSpline_GetDuration) == 0x000004, "Wrong size on FortSpline_GetDuration");
static_assert(offsetof(FortSpline_GetDuration, ReturnValue) == 0x000000, "Member 'FortSpline_GetDuration::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSpline.GetEndPoint
// 0x000C (0x000C - 0x0000)
struct FortSpline_GetEndPoint final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSpline_GetEndPoint) == 0x000004, "Wrong alignment on FortSpline_GetEndPoint");
static_assert(sizeof(FortSpline_GetEndPoint) == 0x00000C, "Wrong size on FortSpline_GetEndPoint");
static_assert(offsetof(FortSpline_GetEndPoint, ReturnValue) == 0x000000, "Member 'FortSpline_GetEndPoint::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSpline.GetNormalFromTime
// 0x0010 (0x0010 - 0x0000)
struct FortSpline_GetNormalFromTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSpline_GetNormalFromTime) == 0x000004, "Wrong alignment on FortSpline_GetNormalFromTime");
static_assert(sizeof(FortSpline_GetNormalFromTime) == 0x000010, "Wrong size on FortSpline_GetNormalFromTime");
static_assert(offsetof(FortSpline_GetNormalFromTime, Time) == 0x000000, "Member 'FortSpline_GetNormalFromTime::Time' has a wrong offset!");
static_assert(offsetof(FortSpline_GetNormalFromTime, ReturnValue) == 0x000004, "Member 'FortSpline_GetNormalFromTime::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSpline.GetPositionFromTime
// 0x0010 (0x0010 - 0x0000)
struct FortSpline_GetPositionFromTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSpline_GetPositionFromTime) == 0x000004, "Wrong alignment on FortSpline_GetPositionFromTime");
static_assert(sizeof(FortSpline_GetPositionFromTime) == 0x000010, "Wrong size on FortSpline_GetPositionFromTime");
static_assert(offsetof(FortSpline_GetPositionFromTime, Time) == 0x000000, "Member 'FortSpline_GetPositionFromTime::Time' has a wrong offset!");
static_assert(offsetof(FortSpline_GetPositionFromTime, ReturnValue) == 0x000004, "Member 'FortSpline_GetPositionFromTime::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSpline.GetSplineLength
// 0x0008 (0x0008 - 0x0000)
struct FortSpline_GetSplineLength final
{
public:
	float                                         StepSize;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSpline_GetSplineLength) == 0x000004, "Wrong alignment on FortSpline_GetSplineLength");
static_assert(sizeof(FortSpline_GetSplineLength) == 0x000008, "Wrong size on FortSpline_GetSplineLength");
static_assert(offsetof(FortSpline_GetSplineLength, StepSize) == 0x000000, "Member 'FortSpline_GetSplineLength::StepSize' has a wrong offset!");
static_assert(offsetof(FortSpline_GetSplineLength, ReturnValue) == 0x000004, "Member 'FortSpline_GetSplineLength::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSpline.GetSplineLengthAtTime
// 0x000C (0x000C - 0x0000)
struct FortSpline_GetSplineLengthAtTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepSize;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSpline_GetSplineLengthAtTime) == 0x000004, "Wrong alignment on FortSpline_GetSplineLengthAtTime");
static_assert(sizeof(FortSpline_GetSplineLengthAtTime) == 0x00000C, "Wrong size on FortSpline_GetSplineLengthAtTime");
static_assert(offsetof(FortSpline_GetSplineLengthAtTime, Time) == 0x000000, "Member 'FortSpline_GetSplineLengthAtTime::Time' has a wrong offset!");
static_assert(offsetof(FortSpline_GetSplineLengthAtTime, StepSize) == 0x000004, "Member 'FortSpline_GetSplineLengthAtTime::StepSize' has a wrong offset!");
static_assert(offsetof(FortSpline_GetSplineLengthAtTime, ReturnValue) == 0x000008, "Member 'FortSpline_GetSplineLengthAtTime::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSpline.GetStartPoint
// 0x000C (0x000C - 0x0000)
struct FortSpline_GetStartPoint final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSpline_GetStartPoint) == 0x000004, "Wrong alignment on FortSpline_GetStartPoint");
static_assert(sizeof(FortSpline_GetStartPoint) == 0x00000C, "Wrong size on FortSpline_GetStartPoint");
static_assert(offsetof(FortSpline_GetStartPoint, ReturnValue) == 0x000000, "Member 'FortSpline_GetStartPoint::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSpline.GetTangentFromTime
// 0x0010 (0x0010 - 0x0000)
struct FortSpline_GetTangentFromTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSpline_GetTangentFromTime) == 0x000004, "Wrong alignment on FortSpline_GetTangentFromTime");
static_assert(sizeof(FortSpline_GetTangentFromTime) == 0x000010, "Wrong size on FortSpline_GetTangentFromTime");
static_assert(offsetof(FortSpline_GetTangentFromTime, Time) == 0x000000, "Member 'FortSpline_GetTangentFromTime::Time' has a wrong offset!");
static_assert(offsetof(FortSpline_GetTangentFromTime, ReturnValue) == 0x000004, "Member 'FortSpline_GetTangentFromTime::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSpline.GetVelocityCorrectedTime
// 0x0008 (0x0008 - 0x0000)
struct FortSpline_GetVelocityCorrectedTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSpline_GetVelocityCorrectedTime) == 0x000004, "Wrong alignment on FortSpline_GetVelocityCorrectedTime");
static_assert(sizeof(FortSpline_GetVelocityCorrectedTime) == 0x000008, "Wrong size on FortSpline_GetVelocityCorrectedTime");
static_assert(offsetof(FortSpline_GetVelocityCorrectedTime, Time) == 0x000000, "Member 'FortSpline_GetVelocityCorrectedTime::Time' has a wrong offset!");
static_assert(offsetof(FortSpline_GetVelocityCorrectedTime, ReturnValue) == 0x000004, "Member 'FortSpline_GetVelocityCorrectedTime::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSpline.IsValid
// 0x0001 (0x0001 - 0x0000)
struct FortSpline_IsValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSpline_IsValid) == 0x000001, "Wrong alignment on FortSpline_IsValid");
static_assert(sizeof(FortSpline_IsValid) == 0x000001, "Wrong size on FortSpline_IsValid");
static_assert(offsetof(FortSpline_IsValid, ReturnValue) == 0x000000, "Member 'FortSpline_IsValid::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTheaterCamera.SetTileFocus
// 0x0008 (0x0008 - 0x0000)
struct FortTheaterCamera_SetTileFocus final
{
public:
	class AFortTheaterMapTile*                    TargetTile;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTheaterCamera_SetTileFocus) == 0x000008, "Wrong alignment on FortTheaterCamera_SetTileFocus");
static_assert(sizeof(FortTheaterCamera_SetTileFocus) == 0x000008, "Wrong size on FortTheaterCamera_SetTileFocus");
static_assert(offsetof(FortTheaterCamera_SetTileFocus, TargetTile) == 0x000000, "Member 'FortTheaterCamera_SetTileFocus::TargetTile' has a wrong offset!");

// Function FortniteGame.FortTheaterCamera.LimitToTheater
// 0x0018 (0x0018 - 0x0000)
struct FortTheaterCamera_LimitToTheater final
{
public:
	struct FVector                                DesiredPosition;                                   // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTheaterCamera_LimitToTheater) == 0x000004, "Wrong alignment on FortTheaterCamera_LimitToTheater");
static_assert(sizeof(FortTheaterCamera_LimitToTheater) == 0x000018, "Wrong size on FortTheaterCamera_LimitToTheater");
static_assert(offsetof(FortTheaterCamera_LimitToTheater, DesiredPosition) == 0x000000, "Member 'FortTheaterCamera_LimitToTheater::DesiredPosition' has a wrong offset!");
static_assert(offsetof(FortTheaterCamera_LimitToTheater, ReturnValue) == 0x00000C, "Member 'FortTheaterCamera_LimitToTheater::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTrackMovementComponent.GetDistanceAlongSpline
// 0x0004 (0x0004 - 0x0000)
struct FortTrackMovementComponent_GetDistanceAlongSpline final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTrackMovementComponent_GetDistanceAlongSpline) == 0x000004, "Wrong alignment on FortTrackMovementComponent_GetDistanceAlongSpline");
static_assert(sizeof(FortTrackMovementComponent_GetDistanceAlongSpline) == 0x000004, "Wrong size on FortTrackMovementComponent_GetDistanceAlongSpline");
static_assert(offsetof(FortTrackMovementComponent_GetDistanceAlongSpline, ReturnValue) == 0x000000, "Member 'FortTrackMovementComponent_GetDistanceAlongSpline::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTrackMovementComponent.GetSpline
// 0x0008 (0x0008 - 0x0000)
struct FortTrackMovementComponent_GetSpline final
{
public:
	class USplineComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTrackMovementComponent_GetSpline) == 0x000008, "Wrong alignment on FortTrackMovementComponent_GetSpline");
static_assert(sizeof(FortTrackMovementComponent_GetSpline) == 0x000008, "Wrong size on FortTrackMovementComponent_GetSpline");
static_assert(offsetof(FortTrackMovementComponent_GetSpline, ReturnValue) == 0x000000, "Member 'FortTrackMovementComponent_GetSpline::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTrackMovementComponent.GetTrack
// 0x0008 (0x0008 - 0x0000)
struct FortTrackMovementComponent_GetTrack final
{
public:
	class AFortTrack*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTrackMovementComponent_GetTrack) == 0x000008, "Wrong alignment on FortTrackMovementComponent_GetTrack");
static_assert(sizeof(FortTrackMovementComponent_GetTrack) == 0x000008, "Wrong size on FortTrackMovementComponent_GetTrack");
static_assert(offsetof(FortTrackMovementComponent_GetTrack, ReturnValue) == 0x000000, "Member 'FortTrackMovementComponent_GetTrack::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTrackMovementComponent.IsReverseDirection
// 0x0001 (0x0001 - 0x0000)
struct FortTrackMovementComponent_IsReverseDirection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTrackMovementComponent_IsReverseDirection) == 0x000001, "Wrong alignment on FortTrackMovementComponent_IsReverseDirection");
static_assert(sizeof(FortTrackMovementComponent_IsReverseDirection) == 0x000001, "Wrong size on FortTrackMovementComponent_IsReverseDirection");
static_assert(offsetof(FortTrackMovementComponent_IsReverseDirection, ReturnValue) == 0x000000, "Member 'FortTrackMovementComponent_IsReverseDirection::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTrapTooltip.GetNumericValue
// 0x0028 (0x0028 - 0x0000)
struct FortTrapTooltip_GetNumericValue final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVal;                                            // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTrapTooltip_GetNumericValue) == 0x000008, "Wrong alignment on FortTrapTooltip_GetNumericValue");
static_assert(sizeof(FortTrapTooltip_GetNumericValue) == 0x000028, "Wrong size on FortTrapTooltip_GetNumericValue");
static_assert(offsetof(FortTrapTooltip_GetNumericValue, ObjectToDescribe) == 0x000000, "Member 'FortTrapTooltip_GetNumericValue::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortTrapTooltip_GetNumericValue, Tag) == 0x000008, "Member 'FortTrapTooltip_GetNumericValue::Tag' has a wrong offset!");
static_assert(offsetof(FortTrapTooltip_GetNumericValue, Context) == 0x000010, "Member 'FortTrapTooltip_GetNumericValue::Context' has a wrong offset!");
static_assert(offsetof(FortTrapTooltip_GetNumericValue, Token) == 0x000018, "Member 'FortTrapTooltip_GetNumericValue::Token' has a wrong offset!");
static_assert(offsetof(FortTrapTooltip_GetNumericValue, OutVal) == 0x000020, "Member 'FortTrapTooltip_GetNumericValue::OutVal' has a wrong offset!");
static_assert(offsetof(FortTrapTooltip_GetNumericValue, ReturnValue) == 0x000024, "Member 'FortTrapTooltip_GetNumericValue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTrapTooltip.GetTextForToken
// 0x0040 (0x0040 - 0x0000)
struct FortTrapTooltip_GetTextForToken final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTrapTooltip_GetTextForToken) == 0x000008, "Wrong alignment on FortTrapTooltip_GetTextForToken");
static_assert(sizeof(FortTrapTooltip_GetTextForToken) == 0x000040, "Wrong size on FortTrapTooltip_GetTextForToken");
static_assert(offsetof(FortTrapTooltip_GetTextForToken, ObjectToDescribe) == 0x000000, "Member 'FortTrapTooltip_GetTextForToken::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortTrapTooltip_GetTextForToken, Tag) == 0x000008, "Member 'FortTrapTooltip_GetTextForToken::Tag' has a wrong offset!");
static_assert(offsetof(FortTrapTooltip_GetTextForToken, Context) == 0x000010, "Member 'FortTrapTooltip_GetTextForToken::Context' has a wrong offset!");
static_assert(offsetof(FortTrapTooltip_GetTextForToken, Token) == 0x000018, "Member 'FortTrapTooltip_GetTextForToken::Token' has a wrong offset!");
static_assert(offsetof(FortTrapTooltip_GetTextForToken, OutText) == 0x000020, "Member 'FortTrapTooltip_GetTextForToken::OutText' has a wrong offset!");
static_assert(offsetof(FortTrapTooltip_GetTextForToken, ReturnValue) == 0x000038, "Member 'FortTrapTooltip_GetTextForToken::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTrapTooltip.GetTokenizedDescriptionText
// 0x0030 (0x0030 - 0x0000)
struct FortTrapTooltip_GetTokenizedDescriptionText final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           OutDescription;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTrapTooltip_GetTokenizedDescriptionText) == 0x000008, "Wrong alignment on FortTrapTooltip_GetTokenizedDescriptionText");
static_assert(sizeof(FortTrapTooltip_GetTokenizedDescriptionText) == 0x000030, "Wrong size on FortTrapTooltip_GetTokenizedDescriptionText");
static_assert(offsetof(FortTrapTooltip_GetTokenizedDescriptionText, ObjectToDescribe) == 0x000000, "Member 'FortTrapTooltip_GetTokenizedDescriptionText::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortTrapTooltip_GetTokenizedDescriptionText, Tag) == 0x000008, "Member 'FortTrapTooltip_GetTokenizedDescriptionText::Tag' has a wrong offset!");
static_assert(offsetof(FortTrapTooltip_GetTokenizedDescriptionText, Context) == 0x000010, "Member 'FortTrapTooltip_GetTokenizedDescriptionText::Context' has a wrong offset!");
static_assert(offsetof(FortTrapTooltip_GetTokenizedDescriptionText, OutDescription) == 0x000018, "Member 'FortTrapTooltip_GetTokenizedDescriptionText::OutDescription' has a wrong offset!");
static_assert(offsetof(FortTrapTooltip_GetTokenizedDescriptionText, ReturnValue) == 0x000028, "Member 'FortTrapTooltip_GetTokenizedDescriptionText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortInventorySortFunctionLibrary.GetCriterionDisplayNameOfSortType
// 0x0020 (0x0020 - 0x0000)
struct FortInventorySortFunctionLibrary_GetCriterionDisplayNameOfSortType final
{
public:
	EInventoryContentSortType                     SortType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInventorySortFunctionLibrary_GetCriterionDisplayNameOfSortType) == 0x000008, "Wrong alignment on FortInventorySortFunctionLibrary_GetCriterionDisplayNameOfSortType");
static_assert(sizeof(FortInventorySortFunctionLibrary_GetCriterionDisplayNameOfSortType) == 0x000020, "Wrong size on FortInventorySortFunctionLibrary_GetCriterionDisplayNameOfSortType");
static_assert(offsetof(FortInventorySortFunctionLibrary_GetCriterionDisplayNameOfSortType, SortType) == 0x000000, "Member 'FortInventorySortFunctionLibrary_GetCriterionDisplayNameOfSortType::SortType' has a wrong offset!");
static_assert(offsetof(FortInventorySortFunctionLibrary_GetCriterionDisplayNameOfSortType, ReturnValue) == 0x000008, "Member 'FortInventorySortFunctionLibrary_GetCriterionDisplayNameOfSortType::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponRanged.InitializeBeamFX
// 0x0008 (0x0008 - 0x0000)
struct FortWeaponRanged_InitializeBeamFX final
{
public:
	class UParticleSystemComponent*               InBeamPSC;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponRanged_InitializeBeamFX) == 0x000008, "Wrong alignment on FortWeaponRanged_InitializeBeamFX");
static_assert(sizeof(FortWeaponRanged_InitializeBeamFX) == 0x000008, "Wrong size on FortWeaponRanged_InitializeBeamFX");
static_assert(offsetof(FortWeaponRanged_InitializeBeamFX, InBeamPSC) == 0x000000, "Member 'FortWeaponRanged_InitializeBeamFX::InBeamPSC' has a wrong offset!");

// Function FortniteGame.FortWeaponRanged.ShouldSpawnBulletShellFX
// 0x0001 (0x0001 - 0x0000)
struct FortWeaponRanged_ShouldSpawnBulletShellFX final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponRanged_ShouldSpawnBulletShellFX) == 0x000001, "Wrong alignment on FortWeaponRanged_ShouldSpawnBulletShellFX");
static_assert(sizeof(FortWeaponRanged_ShouldSpawnBulletShellFX) == 0x000001, "Wrong size on FortWeaponRanged_ShouldSpawnBulletShellFX");
static_assert(offsetof(FortWeaponRanged_ShouldSpawnBulletShellFX, ReturnValue) == 0x000000, "Member 'FortWeaponRanged_ShouldSpawnBulletShellFX::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponRanged.GetTimeToNextFire
// 0x0004 (0x0004 - 0x0000)
struct FortWeaponRanged_GetTimeToNextFire final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponRanged_GetTimeToNextFire) == 0x000004, "Wrong alignment on FortWeaponRanged_GetTimeToNextFire");
static_assert(sizeof(FortWeaponRanged_GetTimeToNextFire) == 0x000004, "Wrong size on FortWeaponRanged_GetTimeToNextFire");
static_assert(offsetof(FortWeaponRanged_GetTimeToNextFire, ReturnValue) == 0x000000, "Member 'FortWeaponRanged_GetTimeToNextFire::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponRanged.IsUsingFirstPersonCamera
// 0x0001 (0x0001 - 0x0000)
struct FortWeaponRanged_IsUsingFirstPersonCamera final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponRanged_IsUsingFirstPersonCamera) == 0x000001, "Wrong alignment on FortWeaponRanged_IsUsingFirstPersonCamera");
static_assert(sizeof(FortWeaponRanged_IsUsingFirstPersonCamera) == 0x000001, "Wrong size on FortWeaponRanged_IsUsingFirstPersonCamera");
static_assert(offsetof(FortWeaponRanged_IsUsingFirstPersonCamera, ReturnValue) == 0x000000, "Member 'FortWeaponRanged_IsUsingFirstPersonCamera::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponRanged.IsUsingScope
// 0x0001 (0x0001 - 0x0000)
struct FortWeaponRanged_IsUsingScope final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponRanged_IsUsingScope) == 0x000001, "Wrong alignment on FortWeaponRanged_IsUsingScope");
static_assert(sizeof(FortWeaponRanged_IsUsingScope) == 0x000001, "Wrong size on FortWeaponRanged_IsUsingScope");
static_assert(offsetof(FortWeaponRanged_IsUsingScope, ReturnValue) == 0x000000, "Member 'FortWeaponRanged_IsUsingScope::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponRanged.IsUsingScopeOrFirstPersonCamera
// 0x0001 (0x0001 - 0x0000)
struct FortWeaponRanged_IsUsingScopeOrFirstPersonCamera final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponRanged_IsUsingScopeOrFirstPersonCamera) == 0x000001, "Wrong alignment on FortWeaponRanged_IsUsingScopeOrFirstPersonCamera");
static_assert(sizeof(FortWeaponRanged_IsUsingScopeOrFirstPersonCamera) == 0x000001, "Wrong size on FortWeaponRanged_IsUsingScopeOrFirstPersonCamera");
static_assert(offsetof(FortWeaponRanged_IsUsingScopeOrFirstPersonCamera, ReturnValue) == 0x000000, "Member 'FortWeaponRanged_IsUsingScopeOrFirstPersonCamera::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponRanged.ShouldDisplayAmmoCounter
// 0x0001 (0x0001 - 0x0000)
struct FortWeaponRanged_ShouldDisplayAmmoCounter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponRanged_ShouldDisplayAmmoCounter) == 0x000001, "Wrong alignment on FortWeaponRanged_ShouldDisplayAmmoCounter");
static_assert(sizeof(FortWeaponRanged_ShouldDisplayAmmoCounter) == 0x000001, "Wrong size on FortWeaponRanged_ShouldDisplayAmmoCounter");
static_assert(offsetof(FortWeaponRanged_ShouldDisplayAmmoCounter, ReturnValue) == 0x000000, "Member 'FortWeaponRanged_ShouldDisplayAmmoCounter::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponRanged.UseScopeTargeting
// 0x0001 (0x0001 - 0x0000)
struct FortWeaponRanged_UseScopeTargeting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponRanged_UseScopeTargeting) == 0x000001, "Wrong alignment on FortWeaponRanged_UseScopeTargeting");
static_assert(sizeof(FortWeaponRanged_UseScopeTargeting) == 0x000001, "Wrong size on FortWeaponRanged_UseScopeTargeting");
static_assert(offsetof(FortWeaponRanged_UseScopeTargeting, ReturnValue) == 0x000000, "Member 'FortWeaponRanged_UseScopeTargeting::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponRangedItemDefinition.GetBulletShellFXTemplate
// 0x0008 (0x0008 - 0x0000)
struct FortWeaponRangedItemDefinition_GetBulletShellFXTemplate final
{
public:
	class UParticleSystem*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponRangedItemDefinition_GetBulletShellFXTemplate) == 0x000008, "Wrong alignment on FortWeaponRangedItemDefinition_GetBulletShellFXTemplate");
static_assert(sizeof(FortWeaponRangedItemDefinition_GetBulletShellFXTemplate) == 0x000008, "Wrong size on FortWeaponRangedItemDefinition_GetBulletShellFXTemplate");
static_assert(offsetof(FortWeaponRangedItemDefinition_GetBulletShellFXTemplate, ReturnValue) == 0x000000, "Member 'FortWeaponRangedItemDefinition_GetBulletShellFXTemplate::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponRangedItemDefinition.GetProjectileTemplate
// 0x0008 (0x0008 - 0x0000)
struct FortWeaponRangedItemDefinition_GetProjectileTemplate final
{
public:
	TSubclassOf<class AFortProjectileBase>        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponRangedItemDefinition_GetProjectileTemplate) == 0x000008, "Wrong alignment on FortWeaponRangedItemDefinition_GetProjectileTemplate");
static_assert(sizeof(FortWeaponRangedItemDefinition_GetProjectileTemplate) == 0x000008, "Wrong size on FortWeaponRangedItemDefinition_GetProjectileTemplate");
static_assert(offsetof(FortWeaponRangedItemDefinition_GetProjectileTemplate, ReturnValue) == 0x000000, "Member 'FortWeaponRangedItemDefinition_GetProjectileTemplate::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponRangedItemDefinition.ShouldSpawnBulletShellFX
// 0x0001 (0x0001 - 0x0000)
struct FortWeaponRangedItemDefinition_ShouldSpawnBulletShellFX final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponRangedItemDefinition_ShouldSpawnBulletShellFX) == 0x000001, "Wrong alignment on FortWeaponRangedItemDefinition_ShouldSpawnBulletShellFX");
static_assert(sizeof(FortWeaponRangedItemDefinition_ShouldSpawnBulletShellFX) == 0x000001, "Wrong size on FortWeaponRangedItemDefinition_ShouldSpawnBulletShellFX");
static_assert(offsetof(FortWeaponRangedItemDefinition_ShouldSpawnBulletShellFX, ReturnValue) == 0x000000, "Member 'FortWeaponRangedItemDefinition_ShouldSpawnBulletShellFX::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponRangedItemDefinition.ShouldTraceThroughPawns
// 0x0001 (0x0001 - 0x0000)
struct FortWeaponRangedItemDefinition_ShouldTraceThroughPawns final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponRangedItemDefinition_ShouldTraceThroughPawns) == 0x000001, "Wrong alignment on FortWeaponRangedItemDefinition_ShouldTraceThroughPawns");
static_assert(sizeof(FortWeaponRangedItemDefinition_ShouldTraceThroughPawns) == 0x000001, "Wrong size on FortWeaponRangedItemDefinition_ShouldTraceThroughPawns");
static_assert(offsetof(FortWeaponRangedItemDefinition_ShouldTraceThroughPawns, ReturnValue) == 0x000000, "Member 'FortWeaponRangedItemDefinition_ShouldTraceThroughPawns::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponRangedItemDefinition.ShouldUseNativeWeaponTrace
// 0x0001 (0x0001 - 0x0000)
struct FortWeaponRangedItemDefinition_ShouldUseNativeWeaponTrace final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponRangedItemDefinition_ShouldUseNativeWeaponTrace) == 0x000001, "Wrong alignment on FortWeaponRangedItemDefinition_ShouldUseNativeWeaponTrace");
static_assert(sizeof(FortWeaponRangedItemDefinition_ShouldUseNativeWeaponTrace) == 0x000001, "Wrong size on FortWeaponRangedItemDefinition_ShouldUseNativeWeaponTrace");
static_assert(offsetof(FortWeaponRangedItemDefinition_ShouldUseNativeWeaponTrace, ReturnValue) == 0x000000, "Member 'FortWeaponRangedItemDefinition_ShouldUseNativeWeaponTrace::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponRangedItemDefinition.ShouldUsePerfectAimWhenTargetingMinSpread
// 0x0001 (0x0001 - 0x0000)
struct FortWeaponRangedItemDefinition_ShouldUsePerfectAimWhenTargetingMinSpread final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponRangedItemDefinition_ShouldUsePerfectAimWhenTargetingMinSpread) == 0x000001, "Wrong alignment on FortWeaponRangedItemDefinition_ShouldUsePerfectAimWhenTargetingMinSpread");
static_assert(sizeof(FortWeaponRangedItemDefinition_ShouldUsePerfectAimWhenTargetingMinSpread) == 0x000001, "Wrong size on FortWeaponRangedItemDefinition_ShouldUsePerfectAimWhenTargetingMinSpread");
static_assert(offsetof(FortWeaponRangedItemDefinition_ShouldUsePerfectAimWhenTargetingMinSpread, ReturnValue) == 0x000000, "Member 'FortWeaponRangedItemDefinition_ShouldUsePerfectAimWhenTargetingMinSpread::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponRangedTooltip.GetNumericValue
// 0x0028 (0x0028 - 0x0000)
struct FortWeaponRangedTooltip_GetNumericValue final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVal;                                            // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortWeaponRangedTooltip_GetNumericValue) == 0x000008, "Wrong alignment on FortWeaponRangedTooltip_GetNumericValue");
static_assert(sizeof(FortWeaponRangedTooltip_GetNumericValue) == 0x000028, "Wrong size on FortWeaponRangedTooltip_GetNumericValue");
static_assert(offsetof(FortWeaponRangedTooltip_GetNumericValue, ObjectToDescribe) == 0x000000, "Member 'FortWeaponRangedTooltip_GetNumericValue::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortWeaponRangedTooltip_GetNumericValue, Tag) == 0x000008, "Member 'FortWeaponRangedTooltip_GetNumericValue::Tag' has a wrong offset!");
static_assert(offsetof(FortWeaponRangedTooltip_GetNumericValue, Context) == 0x000010, "Member 'FortWeaponRangedTooltip_GetNumericValue::Context' has a wrong offset!");
static_assert(offsetof(FortWeaponRangedTooltip_GetNumericValue, Token) == 0x000018, "Member 'FortWeaponRangedTooltip_GetNumericValue::Token' has a wrong offset!");
static_assert(offsetof(FortWeaponRangedTooltip_GetNumericValue, OutVal) == 0x000020, "Member 'FortWeaponRangedTooltip_GetNumericValue::OutVal' has a wrong offset!");
static_assert(offsetof(FortWeaponRangedTooltip_GetNumericValue, ReturnValue) == 0x000024, "Member 'FortWeaponRangedTooltip_GetNumericValue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponRangedTooltip.GetTextForToken
// 0x0040 (0x0040 - 0x0000)
struct FortWeaponRangedTooltip_GetTextForToken final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortWeaponRangedTooltip_GetTextForToken) == 0x000008, "Wrong alignment on FortWeaponRangedTooltip_GetTextForToken");
static_assert(sizeof(FortWeaponRangedTooltip_GetTextForToken) == 0x000040, "Wrong size on FortWeaponRangedTooltip_GetTextForToken");
static_assert(offsetof(FortWeaponRangedTooltip_GetTextForToken, ObjectToDescribe) == 0x000000, "Member 'FortWeaponRangedTooltip_GetTextForToken::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortWeaponRangedTooltip_GetTextForToken, Tag) == 0x000008, "Member 'FortWeaponRangedTooltip_GetTextForToken::Tag' has a wrong offset!");
static_assert(offsetof(FortWeaponRangedTooltip_GetTextForToken, Context) == 0x000010, "Member 'FortWeaponRangedTooltip_GetTextForToken::Context' has a wrong offset!");
static_assert(offsetof(FortWeaponRangedTooltip_GetTextForToken, Token) == 0x000018, "Member 'FortWeaponRangedTooltip_GetTextForToken::Token' has a wrong offset!");
static_assert(offsetof(FortWeaponRangedTooltip_GetTextForToken, OutText) == 0x000020, "Member 'FortWeaponRangedTooltip_GetTextForToken::OutText' has a wrong offset!");
static_assert(offsetof(FortWeaponRangedTooltip_GetTextForToken, ReturnValue) == 0x000038, "Member 'FortWeaponRangedTooltip_GetTextForToken::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponRangedTooltip.GetTokenizedDescriptionText
// 0x0030 (0x0030 - 0x0000)
struct FortWeaponRangedTooltip_GetTokenizedDescriptionText final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           OutDescription;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortWeaponRangedTooltip_GetTokenizedDescriptionText) == 0x000008, "Wrong alignment on FortWeaponRangedTooltip_GetTokenizedDescriptionText");
static_assert(sizeof(FortWeaponRangedTooltip_GetTokenizedDescriptionText) == 0x000030, "Wrong size on FortWeaponRangedTooltip_GetTokenizedDescriptionText");
static_assert(offsetof(FortWeaponRangedTooltip_GetTokenizedDescriptionText, ObjectToDescribe) == 0x000000, "Member 'FortWeaponRangedTooltip_GetTokenizedDescriptionText::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortWeaponRangedTooltip_GetTokenizedDescriptionText, Tag) == 0x000008, "Member 'FortWeaponRangedTooltip_GetTokenizedDescriptionText::Tag' has a wrong offset!");
static_assert(offsetof(FortWeaponRangedTooltip_GetTokenizedDescriptionText, Context) == 0x000010, "Member 'FortWeaponRangedTooltip_GetTokenizedDescriptionText::Context' has a wrong offset!");
static_assert(offsetof(FortWeaponRangedTooltip_GetTokenizedDescriptionText, OutDescription) == 0x000018, "Member 'FortWeaponRangedTooltip_GetTokenizedDescriptionText::OutDescription' has a wrong offset!");
static_assert(offsetof(FortWeaponRangedTooltip_GetTokenizedDescriptionText, ReturnValue) == 0x000028, "Member 'FortWeaponRangedTooltip_GetTokenizedDescriptionText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeatherAugment.GetWeatherTags
// 0x0020 (0x0020 - 0x0000)
struct FortWeatherAugment_GetWeatherTags final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeatherAugment_GetWeatherTags) == 0x000008, "Wrong alignment on FortWeatherAugment_GetWeatherTags");
static_assert(sizeof(FortWeatherAugment_GetWeatherTags) == 0x000020, "Wrong size on FortWeatherAugment_GetWeatherTags");
static_assert(offsetof(FortWeatherAugment_GetWeatherTags, ReturnValue) == 0x000000, "Member 'FortWeatherAugment_GetWeatherTags::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWindManager.BreakWindImpulseCylinder
// 0x006C (0x006C - 0x0000)
struct FortWindManager_BreakWindImpulseCylinder final
{
public:
	struct FFortWindImpulseCylinder               InWindImpulseCylinder;                             // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ImpulseLocation;                                   // 0x0048(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpulseInnerRadius;                                // 0x0054(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpulseOuterRadius;                                // 0x0058(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpulseMagnitude;                                  // 0x005C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImpulseDirection;                                  // 0x0060(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWindManager_BreakWindImpulseCylinder) == 0x000004, "Wrong alignment on FortWindManager_BreakWindImpulseCylinder");
static_assert(sizeof(FortWindManager_BreakWindImpulseCylinder) == 0x00006C, "Wrong size on FortWindManager_BreakWindImpulseCylinder");
static_assert(offsetof(FortWindManager_BreakWindImpulseCylinder, InWindImpulseCylinder) == 0x000000, "Member 'FortWindManager_BreakWindImpulseCylinder::InWindImpulseCylinder' has a wrong offset!");
static_assert(offsetof(FortWindManager_BreakWindImpulseCylinder, ImpulseLocation) == 0x000048, "Member 'FortWindManager_BreakWindImpulseCylinder::ImpulseLocation' has a wrong offset!");
static_assert(offsetof(FortWindManager_BreakWindImpulseCylinder, ImpulseInnerRadius) == 0x000054, "Member 'FortWindManager_BreakWindImpulseCylinder::ImpulseInnerRadius' has a wrong offset!");
static_assert(offsetof(FortWindManager_BreakWindImpulseCylinder, ImpulseOuterRadius) == 0x000058, "Member 'FortWindManager_BreakWindImpulseCylinder::ImpulseOuterRadius' has a wrong offset!");
static_assert(offsetof(FortWindManager_BreakWindImpulseCylinder, ImpulseMagnitude) == 0x00005C, "Member 'FortWindManager_BreakWindImpulseCylinder::ImpulseMagnitude' has a wrong offset!");
static_assert(offsetof(FortWindManager_BreakWindImpulseCylinder, ImpulseDirection) == 0x000060, "Member 'FortWindManager_BreakWindImpulseCylinder::ImpulseDirection' has a wrong offset!");

// Function FortniteGame.FortWindManager.BreakWindImpulseCylinderAdvanced
// 0x008C (0x008C - 0x0000)
struct FortWindManager_BreakWindImpulseCylinderAdvanced final
{
public:
	struct FFortWindImpulseCylinder               WindImpulseCylinder;                               // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                WindLocation;                                      // 0x0048(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindInnerRadius;                                   // 0x0054(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindOuterRadius;                                   // 0x0058(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WindWorldDirection;                                // 0x005C(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindMagnitude;                                     // 0x0068(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   WindWorldBounds;                                   // 0x006C(0x001C)(Parm, OutParm, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          bIsWindChanging;                                   // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsWindChangePending;                              // 0x0089(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x2];                                       // 0x008A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortWindManager_BreakWindImpulseCylinderAdvanced) == 0x000004, "Wrong alignment on FortWindManager_BreakWindImpulseCylinderAdvanced");
static_assert(sizeof(FortWindManager_BreakWindImpulseCylinderAdvanced) == 0x00008C, "Wrong size on FortWindManager_BreakWindImpulseCylinderAdvanced");
static_assert(offsetof(FortWindManager_BreakWindImpulseCylinderAdvanced, WindImpulseCylinder) == 0x000000, "Member 'FortWindManager_BreakWindImpulseCylinderAdvanced::WindImpulseCylinder' has a wrong offset!");
static_assert(offsetof(FortWindManager_BreakWindImpulseCylinderAdvanced, WindLocation) == 0x000048, "Member 'FortWindManager_BreakWindImpulseCylinderAdvanced::WindLocation' has a wrong offset!");
static_assert(offsetof(FortWindManager_BreakWindImpulseCylinderAdvanced, WindInnerRadius) == 0x000054, "Member 'FortWindManager_BreakWindImpulseCylinderAdvanced::WindInnerRadius' has a wrong offset!");
static_assert(offsetof(FortWindManager_BreakWindImpulseCylinderAdvanced, WindOuterRadius) == 0x000058, "Member 'FortWindManager_BreakWindImpulseCylinderAdvanced::WindOuterRadius' has a wrong offset!");
static_assert(offsetof(FortWindManager_BreakWindImpulseCylinderAdvanced, WindWorldDirection) == 0x00005C, "Member 'FortWindManager_BreakWindImpulseCylinderAdvanced::WindWorldDirection' has a wrong offset!");
static_assert(offsetof(FortWindManager_BreakWindImpulseCylinderAdvanced, WindMagnitude) == 0x000068, "Member 'FortWindManager_BreakWindImpulseCylinderAdvanced::WindMagnitude' has a wrong offset!");
static_assert(offsetof(FortWindManager_BreakWindImpulseCylinderAdvanced, WindWorldBounds) == 0x00006C, "Member 'FortWindManager_BreakWindImpulseCylinderAdvanced::WindWorldBounds' has a wrong offset!");
static_assert(offsetof(FortWindManager_BreakWindImpulseCylinderAdvanced, bIsWindChanging) == 0x000088, "Member 'FortWindManager_BreakWindImpulseCylinderAdvanced::bIsWindChanging' has a wrong offset!");
static_assert(offsetof(FortWindManager_BreakWindImpulseCylinderAdvanced, bIsWindChangePending) == 0x000089, "Member 'FortWindManager_BreakWindImpulseCylinderAdvanced::bIsWindChangePending' has a wrong offset!");

// Function FortniteGame.FortWindManager.BreakWindImpulseCylinderDelta
// 0x0120 (0x0120 - 0x0000)
struct FortWindManager_BreakWindImpulseCylinderDelta final
{
public:
	struct FFortWindImpulseCylinderDelta          WindImpulseCylinderDelta;                          // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                WindDeltaCenter;                                   // 0x0090(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWindImpulseInitialized;                           // 0x009C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWindRipplesOutward;                               // 0x009D(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9E[0x2];                                       // 0x009E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WindDeltaSectionWidth;                             // 0x00A0(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindDeltaInnerSectionRadius;                       // 0x00A4(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindDeltaOuterSectionRadius;                       // 0x00A8(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindDeltaMaximumRadius;                            // 0x00AC(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindDeltaDesiredOverallBlendTime;                  // 0x00B0(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindDeltaSectionBlendTime;                         // 0x00B4(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindDeltaSectionCurrentBlendTime;                  // 0x00B8(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindDeltaPreviousMagnitude;                        // 0x00BC(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindDeltaSectionCurrentMagnitude;                  // 0x00C0(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindDeltaDesiredMagnitude;                         // 0x00C4(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   WindDeltaOuterWorldBounds;                         // 0x00C8(0x001C)(Parm, OutParm, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FBox                                   WindDeltaInnerWorldBounds;                         // 0x00E4(0x001C)(Parm, OutParm, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FBox                                   WindImpulseBounds;                                 // 0x0100(0x001C)(Parm, OutParm, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FFortWindImpulseHandle                 WindImpulseHandleToModify;                         // 0x011C(0x0004)(Parm, OutParm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWindManager_BreakWindImpulseCylinderDelta) == 0x000004, "Wrong alignment on FortWindManager_BreakWindImpulseCylinderDelta");
static_assert(sizeof(FortWindManager_BreakWindImpulseCylinderDelta) == 0x000120, "Wrong size on FortWindManager_BreakWindImpulseCylinderDelta");
static_assert(offsetof(FortWindManager_BreakWindImpulseCylinderDelta, WindImpulseCylinderDelta) == 0x000000, "Member 'FortWindManager_BreakWindImpulseCylinderDelta::WindImpulseCylinderDelta' has a wrong offset!");
static_assert(offsetof(FortWindManager_BreakWindImpulseCylinderDelta, WindDeltaCenter) == 0x000090, "Member 'FortWindManager_BreakWindImpulseCylinderDelta::WindDeltaCenter' has a wrong offset!");
static_assert(offsetof(FortWindManager_BreakWindImpulseCylinderDelta, bWindImpulseInitialized) == 0x00009C, "Member 'FortWindManager_BreakWindImpulseCylinderDelta::bWindImpulseInitialized' has a wrong offset!");
static_assert(offsetof(FortWindManager_BreakWindImpulseCylinderDelta, bWindRipplesOutward) == 0x00009D, "Member 'FortWindManager_BreakWindImpulseCylinderDelta::bWindRipplesOutward' has a wrong offset!");
static_assert(offsetof(FortWindManager_BreakWindImpulseCylinderDelta, WindDeltaSectionWidth) == 0x0000A0, "Member 'FortWindManager_BreakWindImpulseCylinderDelta::WindDeltaSectionWidth' has a wrong offset!");
static_assert(offsetof(FortWindManager_BreakWindImpulseCylinderDelta, WindDeltaInnerSectionRadius) == 0x0000A4, "Member 'FortWindManager_BreakWindImpulseCylinderDelta::WindDeltaInnerSectionRadius' has a wrong offset!");
static_assert(offsetof(FortWindManager_BreakWindImpulseCylinderDelta, WindDeltaOuterSectionRadius) == 0x0000A8, "Member 'FortWindManager_BreakWindImpulseCylinderDelta::WindDeltaOuterSectionRadius' has a wrong offset!");
static_assert(offsetof(FortWindManager_BreakWindImpulseCylinderDelta, WindDeltaMaximumRadius) == 0x0000AC, "Member 'FortWindManager_BreakWindImpulseCylinderDelta::WindDeltaMaximumRadius' has a wrong offset!");
static_assert(offsetof(FortWindManager_BreakWindImpulseCylinderDelta, WindDeltaDesiredOverallBlendTime) == 0x0000B0, "Member 'FortWindManager_BreakWindImpulseCylinderDelta::WindDeltaDesiredOverallBlendTime' has a wrong offset!");
static_assert(offsetof(FortWindManager_BreakWindImpulseCylinderDelta, WindDeltaSectionBlendTime) == 0x0000B4, "Member 'FortWindManager_BreakWindImpulseCylinderDelta::WindDeltaSectionBlendTime' has a wrong offset!");
static_assert(offsetof(FortWindManager_BreakWindImpulseCylinderDelta, WindDeltaSectionCurrentBlendTime) == 0x0000B8, "Member 'FortWindManager_BreakWindImpulseCylinderDelta::WindDeltaSectionCurrentBlendTime' has a wrong offset!");
static_assert(offsetof(FortWindManager_BreakWindImpulseCylinderDelta, WindDeltaPreviousMagnitude) == 0x0000BC, "Member 'FortWindManager_BreakWindImpulseCylinderDelta::WindDeltaPreviousMagnitude' has a wrong offset!");
static_assert(offsetof(FortWindManager_BreakWindImpulseCylinderDelta, WindDeltaSectionCurrentMagnitude) == 0x0000C0, "Member 'FortWindManager_BreakWindImpulseCylinderDelta::WindDeltaSectionCurrentMagnitude' has a wrong offset!");
static_assert(offsetof(FortWindManager_BreakWindImpulseCylinderDelta, WindDeltaDesiredMagnitude) == 0x0000C4, "Member 'FortWindManager_BreakWindImpulseCylinderDelta::WindDeltaDesiredMagnitude' has a wrong offset!");
static_assert(offsetof(FortWindManager_BreakWindImpulseCylinderDelta, WindDeltaOuterWorldBounds) == 0x0000C8, "Member 'FortWindManager_BreakWindImpulseCylinderDelta::WindDeltaOuterWorldBounds' has a wrong offset!");
static_assert(offsetof(FortWindManager_BreakWindImpulseCylinderDelta, WindDeltaInnerWorldBounds) == 0x0000E4, "Member 'FortWindManager_BreakWindImpulseCylinderDelta::WindDeltaInnerWorldBounds' has a wrong offset!");
static_assert(offsetof(FortWindManager_BreakWindImpulseCylinderDelta, WindImpulseBounds) == 0x000100, "Member 'FortWindManager_BreakWindImpulseCylinderDelta::WindImpulseBounds' has a wrong offset!");
static_assert(offsetof(FortWindManager_BreakWindImpulseCylinderDelta, WindImpulseHandleToModify) == 0x00011C, "Member 'FortWindManager_BreakWindImpulseCylinderDelta::WindImpulseHandleToModify' has a wrong offset!");

// Function FortniteGame.FortWindManager.BreakWindImpulseRadius
// 0x0064 (0x0064 - 0x0000)
struct FortWindManager_BreakWindImpulseRadius final
{
public:
	struct FFortWindImpulseRadius                 InWindImpulseRadius;                               // 0x0000(0x004C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ImpulseLocation;                                   // 0x004C(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpulseRadius;                                     // 0x0058(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpulseMagnitude;                                  // 0x005C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpulseBlendTime;                                  // 0x0060(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWindManager_BreakWindImpulseRadius) == 0x000004, "Wrong alignment on FortWindManager_BreakWindImpulseRadius");
static_assert(sizeof(FortWindManager_BreakWindImpulseRadius) == 0x000064, "Wrong size on FortWindManager_BreakWindImpulseRadius");
static_assert(offsetof(FortWindManager_BreakWindImpulseRadius, InWindImpulseRadius) == 0x000000, "Member 'FortWindManager_BreakWindImpulseRadius::InWindImpulseRadius' has a wrong offset!");
static_assert(offsetof(FortWindManager_BreakWindImpulseRadius, ImpulseLocation) == 0x00004C, "Member 'FortWindManager_BreakWindImpulseRadius::ImpulseLocation' has a wrong offset!");
static_assert(offsetof(FortWindManager_BreakWindImpulseRadius, ImpulseRadius) == 0x000058, "Member 'FortWindManager_BreakWindImpulseRadius::ImpulseRadius' has a wrong offset!");
static_assert(offsetof(FortWindManager_BreakWindImpulseRadius, ImpulseMagnitude) == 0x00005C, "Member 'FortWindManager_BreakWindImpulseRadius::ImpulseMagnitude' has a wrong offset!");
static_assert(offsetof(FortWindManager_BreakWindImpulseRadius, ImpulseBlendTime) == 0x000060, "Member 'FortWindManager_BreakWindImpulseRadius::ImpulseBlendTime' has a wrong offset!");

// Function FortniteGame.FortWindManager.GetWindManager
// 0x0010 (0x0010 - 0x0000)
struct FortWindManager_GetWindManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortWindManager*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWindManager_GetWindManager) == 0x000008, "Wrong alignment on FortWindManager_GetWindManager");
static_assert(sizeof(FortWindManager_GetWindManager) == 0x000010, "Wrong size on FortWindManager_GetWindManager");
static_assert(offsetof(FortWindManager_GetWindManager, WorldContextObject) == 0x000000, "Member 'FortWindManager_GetWindManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortWindManager_GetWindManager, ReturnValue) == 0x000008, "Member 'FortWindManager_GetWindManager::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWindManager.MakeWindImpulseCylinder
// 0x006C (0x006C - 0x0000)
struct FortWindManager_MakeWindImpulseCylinder final
{
public:
	struct FVector                                ImpulseLocation;                                   // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpulseInnerRadius;                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpulseOuterRadius;                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpulseMagnitude;                                  // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImpulseDirection;                                  // 0x0018(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortWindImpulseCylinder               ReturnValue;                                       // 0x0024(0x0048)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWindManager_MakeWindImpulseCylinder) == 0x000004, "Wrong alignment on FortWindManager_MakeWindImpulseCylinder");
static_assert(sizeof(FortWindManager_MakeWindImpulseCylinder) == 0x00006C, "Wrong size on FortWindManager_MakeWindImpulseCylinder");
static_assert(offsetof(FortWindManager_MakeWindImpulseCylinder, ImpulseLocation) == 0x000000, "Member 'FortWindManager_MakeWindImpulseCylinder::ImpulseLocation' has a wrong offset!");
static_assert(offsetof(FortWindManager_MakeWindImpulseCylinder, ImpulseInnerRadius) == 0x00000C, "Member 'FortWindManager_MakeWindImpulseCylinder::ImpulseInnerRadius' has a wrong offset!");
static_assert(offsetof(FortWindManager_MakeWindImpulseCylinder, ImpulseOuterRadius) == 0x000010, "Member 'FortWindManager_MakeWindImpulseCylinder::ImpulseOuterRadius' has a wrong offset!");
static_assert(offsetof(FortWindManager_MakeWindImpulseCylinder, ImpulseMagnitude) == 0x000014, "Member 'FortWindManager_MakeWindImpulseCylinder::ImpulseMagnitude' has a wrong offset!");
static_assert(offsetof(FortWindManager_MakeWindImpulseCylinder, ImpulseDirection) == 0x000018, "Member 'FortWindManager_MakeWindImpulseCylinder::ImpulseDirection' has a wrong offset!");
static_assert(offsetof(FortWindManager_MakeWindImpulseCylinder, ReturnValue) == 0x000024, "Member 'FortWindManager_MakeWindImpulseCylinder::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWindManager.MakeWindImpulseRadius
// 0x0064 (0x0064 - 0x0000)
struct FortWindManager_MakeWindImpulseRadius final
{
public:
	struct FVector                                ImpulseLocation;                                   // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpulseRadius;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpulseMagnitude;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpulseBlendTime;                                  // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortWindImpulseRadius                 ReturnValue;                                       // 0x0018(0x004C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWindManager_MakeWindImpulseRadius) == 0x000004, "Wrong alignment on FortWindManager_MakeWindImpulseRadius");
static_assert(sizeof(FortWindManager_MakeWindImpulseRadius) == 0x000064, "Wrong size on FortWindManager_MakeWindImpulseRadius");
static_assert(offsetof(FortWindManager_MakeWindImpulseRadius, ImpulseLocation) == 0x000000, "Member 'FortWindManager_MakeWindImpulseRadius::ImpulseLocation' has a wrong offset!");
static_assert(offsetof(FortWindManager_MakeWindImpulseRadius, ImpulseRadius) == 0x00000C, "Member 'FortWindManager_MakeWindImpulseRadius::ImpulseRadius' has a wrong offset!");
static_assert(offsetof(FortWindManager_MakeWindImpulseRadius, ImpulseMagnitude) == 0x000010, "Member 'FortWindManager_MakeWindImpulseRadius::ImpulseMagnitude' has a wrong offset!");
static_assert(offsetof(FortWindManager_MakeWindImpulseRadius, ImpulseBlendTime) == 0x000014, "Member 'FortWindManager_MakeWindImpulseRadius::ImpulseBlendTime' has a wrong offset!");
static_assert(offsetof(FortWindManager_MakeWindImpulseRadius, ReturnValue) == 0x000018, "Member 'FortWindManager_MakeWindImpulseRadius::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWindManager.AddWindImpulse
// 0x0050 (0x0050 - 0x0000)
struct FortWindManager_AddWindImpulse final
{
public:
	struct FFortWindImpulseRadius                 WindImpulse;                                       // 0x0000(0x004C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortWindImpulseHandle                 ReturnValue;                                       // 0x004C(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWindManager_AddWindImpulse) == 0x000004, "Wrong alignment on FortWindManager_AddWindImpulse");
static_assert(sizeof(FortWindManager_AddWindImpulse) == 0x000050, "Wrong size on FortWindManager_AddWindImpulse");
static_assert(offsetof(FortWindManager_AddWindImpulse, WindImpulse) == 0x000000, "Member 'FortWindManager_AddWindImpulse::WindImpulse' has a wrong offset!");
static_assert(offsetof(FortWindManager_AddWindImpulse, ReturnValue) == 0x00004C, "Member 'FortWindManager_AddWindImpulse::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWindManager.AddWindImpulseCylinder
// 0x0050 (0x0050 - 0x0000)
struct FortWindManager_AddWindImpulseCylinder final
{
public:
	struct FFortWindImpulseCylinder               WindImpulseCylinder;                               // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortWindImpulseHandle                 ReturnValue;                                       // 0x004C(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWindManager_AddWindImpulseCylinder) == 0x000004, "Wrong alignment on FortWindManager_AddWindImpulseCylinder");
static_assert(sizeof(FortWindManager_AddWindImpulseCylinder) == 0x000050, "Wrong size on FortWindManager_AddWindImpulseCylinder");
static_assert(offsetof(FortWindManager_AddWindImpulseCylinder, WindImpulseCylinder) == 0x000000, "Member 'FortWindManager_AddWindImpulseCylinder::WindImpulseCylinder' has a wrong offset!");
static_assert(offsetof(FortWindManager_AddWindImpulseCylinder, BlendTime) == 0x000048, "Member 'FortWindManager_AddWindImpulseCylinder::BlendTime' has a wrong offset!");
static_assert(offsetof(FortWindManager_AddWindImpulseCylinder, ReturnValue) == 0x00004C, "Member 'FortWindManager_AddWindImpulseCylinder::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWindManager.AddWindParticleSystemComponent
// 0x0008 (0x0008 - 0x0000)
struct FortWindManager_AddWindParticleSystemComponent final
{
public:
	class UParticleSystemComponent*               ParticleSystemComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWindManager_AddWindParticleSystemComponent) == 0x000008, "Wrong alignment on FortWindManager_AddWindParticleSystemComponent");
static_assert(sizeof(FortWindManager_AddWindParticleSystemComponent) == 0x000008, "Wrong size on FortWindManager_AddWindParticleSystemComponent");
static_assert(offsetof(FortWindManager_AddWindParticleSystemComponent, ParticleSystemComponent) == 0x000000, "Member 'FortWindManager_AddWindParticleSystemComponent::ParticleSystemComponent' has a wrong offset!");

// Function FortniteGame.FortWindManager.OnWindAudioBecameActive
// 0x0008 (0x0008 - 0x0000)
struct FortWindManager_OnWindAudioBecameActive final
{
public:
	class UAudioComponent*                        WindAudioComp;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWindManager_OnWindAudioBecameActive) == 0x000008, "Wrong alignment on FortWindManager_OnWindAudioBecameActive");
static_assert(sizeof(FortWindManager_OnWindAudioBecameActive) == 0x000008, "Wrong size on FortWindManager_OnWindAudioBecameActive");
static_assert(offsetof(FortWindManager_OnWindAudioBecameActive, WindAudioComp) == 0x000000, "Member 'FortWindManager_OnWindAudioBecameActive::WindAudioComp' has a wrong offset!");

// Function FortniteGame.FortWindManager.OnWindAudioBecameInactive
// 0x0008 (0x0008 - 0x0000)
struct FortWindManager_OnWindAudioBecameInactive final
{
public:
	class UAudioComponent*                        WindAudioComp;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWindManager_OnWindAudioBecameInactive) == 0x000008, "Wrong alignment on FortWindManager_OnWindAudioBecameInactive");
static_assert(sizeof(FortWindManager_OnWindAudioBecameInactive) == 0x000008, "Wrong size on FortWindManager_OnWindAudioBecameInactive");
static_assert(offsetof(FortWindManager_OnWindAudioBecameInactive, WindAudioComp) == 0x000000, "Member 'FortWindManager_OnWindAudioBecameInactive::WindAudioComp' has a wrong offset!");

// Function FortniteGame.FortWindManager.OnWindImpulseCylinderCreation
// 0x00D8 (0x00D8 - 0x0000)
struct FortWindManager_OnWindImpulseCylinderCreation final
{
public:
	struct FFortWindImpulseCylinder               WindImpulseCylinder;                               // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortWindImpulseCylinderDelta          WindImpulseCylinderDelta;                          // 0x0048(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWindManager_OnWindImpulseCylinderCreation) == 0x000004, "Wrong alignment on FortWindManager_OnWindImpulseCylinderCreation");
static_assert(sizeof(FortWindManager_OnWindImpulseCylinderCreation) == 0x0000D8, "Wrong size on FortWindManager_OnWindImpulseCylinderCreation");
static_assert(offsetof(FortWindManager_OnWindImpulseCylinderCreation, WindImpulseCylinder) == 0x000000, "Member 'FortWindManager_OnWindImpulseCylinderCreation::WindImpulseCylinder' has a wrong offset!");
static_assert(offsetof(FortWindManager_OnWindImpulseCylinderCreation, WindImpulseCylinderDelta) == 0x000048, "Member 'FortWindManager_OnWindImpulseCylinderCreation::WindImpulseCylinderDelta' has a wrong offset!");

// Function FortniteGame.FortWindManager.OnWindImpulseCylinderDeath
// 0x0048 (0x0048 - 0x0000)
struct FortWindManager_OnWindImpulseCylinderDeath final
{
public:
	struct FFortWindImpulseCylinder               WindImpulseCylinder;                               // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWindManager_OnWindImpulseCylinderDeath) == 0x000004, "Wrong alignment on FortWindManager_OnWindImpulseCylinderDeath");
static_assert(sizeof(FortWindManager_OnWindImpulseCylinderDeath) == 0x000048, "Wrong size on FortWindManager_OnWindImpulseCylinderDeath");
static_assert(offsetof(FortWindManager_OnWindImpulseCylinderDeath, WindImpulseCylinder) == 0x000000, "Member 'FortWindManager_OnWindImpulseCylinderDeath::WindImpulseCylinder' has a wrong offset!");

// Function FortniteGame.FortWindManager.OnWindImpulseCylinderDeltaComplete
// 0x0048 (0x0048 - 0x0000)
struct FortWindManager_OnWindImpulseCylinderDeltaComplete final
{
public:
	struct FFortWindImpulseCylinder               WindImpulseCylinder;                               // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWindManager_OnWindImpulseCylinderDeltaComplete) == 0x000004, "Wrong alignment on FortWindManager_OnWindImpulseCylinderDeltaComplete");
static_assert(sizeof(FortWindManager_OnWindImpulseCylinderDeltaComplete) == 0x000048, "Wrong size on FortWindManager_OnWindImpulseCylinderDeltaComplete");
static_assert(offsetof(FortWindManager_OnWindImpulseCylinderDeltaComplete, WindImpulseCylinder) == 0x000000, "Member 'FortWindManager_OnWindImpulseCylinderDeltaComplete::WindImpulseCylinder' has a wrong offset!");

// Function FortniteGame.FortWindManager.RemoveWindImpulse
// 0x0008 (0x0008 - 0x0000)
struct FortWindManager_RemoveWindImpulse final
{
public:
	struct FFortWindImpulseHandle                 ImpulseHandle;                                     // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWindManager_RemoveWindImpulse) == 0x000004, "Wrong alignment on FortWindManager_RemoveWindImpulse");
static_assert(sizeof(FortWindManager_RemoveWindImpulse) == 0x000008, "Wrong size on FortWindManager_RemoveWindImpulse");
static_assert(offsetof(FortWindManager_RemoveWindImpulse, ImpulseHandle) == 0x000000, "Member 'FortWindManager_RemoveWindImpulse::ImpulseHandle' has a wrong offset!");
static_assert(offsetof(FortWindManager_RemoveWindImpulse, BlendTime) == 0x000004, "Member 'FortWindManager_RemoveWindImpulse::BlendTime' has a wrong offset!");

// Function FortniteGame.FortWindManager.RemoveWindParticleSystemComponent
// 0x0008 (0x0008 - 0x0000)
struct FortWindManager_RemoveWindParticleSystemComponent final
{
public:
	class UParticleSystemComponent*               ParticleSystemComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWindManager_RemoveWindParticleSystemComponent) == 0x000008, "Wrong alignment on FortWindManager_RemoveWindParticleSystemComponent");
static_assert(sizeof(FortWindManager_RemoveWindParticleSystemComponent) == 0x000008, "Wrong size on FortWindManager_RemoveWindParticleSystemComponent");
static_assert(offsetof(FortWindManager_RemoveWindParticleSystemComponent, ParticleSystemComponent) == 0x000000, "Member 'FortWindManager_RemoveWindParticleSystemComponent::ParticleSystemComponent' has a wrong offset!");

// Function FortniteGame.FortWindManager.SetWindImpulse
// 0x0054 (0x0054 - 0x0000)
struct FortWindManager_SetWindImpulse final
{
public:
	struct FFortWindImpulseHandle                 ImpulseHandle;                                     // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortWindImpulseRadius                 WindImpulse;                                       // 0x0004(0x004C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortWindManager_SetWindImpulse) == 0x000004, "Wrong alignment on FortWindManager_SetWindImpulse");
static_assert(sizeof(FortWindManager_SetWindImpulse) == 0x000054, "Wrong size on FortWindManager_SetWindImpulse");
static_assert(offsetof(FortWindManager_SetWindImpulse, ImpulseHandle) == 0x000000, "Member 'FortWindManager_SetWindImpulse::ImpulseHandle' has a wrong offset!");
static_assert(offsetof(FortWindManager_SetWindImpulse, WindImpulse) == 0x000004, "Member 'FortWindManager_SetWindImpulse::WindImpulse' has a wrong offset!");
static_assert(offsetof(FortWindManager_SetWindImpulse, ReturnValue) == 0x000050, "Member 'FortWindManager_SetWindImpulse::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWindManager.SetWindImpulseCylinderMagnitude
// 0x0010 (0x0010 - 0x0000)
struct FortWindManager_SetWindImpulseCylinderMagnitude final
{
public:
	struct FFortWindImpulseHandle                 ImpulseHandle;                                     // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         NewMagnitude;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortWindManager_SetWindImpulseCylinderMagnitude) == 0x000004, "Wrong alignment on FortWindManager_SetWindImpulseCylinderMagnitude");
static_assert(sizeof(FortWindManager_SetWindImpulseCylinderMagnitude) == 0x000010, "Wrong size on FortWindManager_SetWindImpulseCylinderMagnitude");
static_assert(offsetof(FortWindManager_SetWindImpulseCylinderMagnitude, ImpulseHandle) == 0x000000, "Member 'FortWindManager_SetWindImpulseCylinderMagnitude::ImpulseHandle' has a wrong offset!");
static_assert(offsetof(FortWindManager_SetWindImpulseCylinderMagnitude, NewMagnitude) == 0x000004, "Member 'FortWindManager_SetWindImpulseCylinderMagnitude::NewMagnitude' has a wrong offset!");
static_assert(offsetof(FortWindManager_SetWindImpulseCylinderMagnitude, BlendTime) == 0x000008, "Member 'FortWindManager_SetWindImpulseCylinderMagnitude::BlendTime' has a wrong offset!");
static_assert(offsetof(FortWindManager_SetWindImpulseCylinderMagnitude, ReturnValue) == 0x00000C, "Member 'FortWindManager_SetWindImpulseCylinderMagnitude::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWindManager.GetCurrentWindImpulseCylinderDelta
// 0x00DC (0x00DC - 0x0000)
struct FortWindManager_GetCurrentWindImpulseCylinderDelta final
{
public:
	struct FFortWindImpulseCylinder               WindImpulseCylinder;                               // 0x0000(0x0048)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortWindImpulseCylinderDelta          WindImpulseCylinderDelta;                          // 0x0048(0x0090)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00D8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortWindManager_GetCurrentWindImpulseCylinderDelta) == 0x000004, "Wrong alignment on FortWindManager_GetCurrentWindImpulseCylinderDelta");
static_assert(sizeof(FortWindManager_GetCurrentWindImpulseCylinderDelta) == 0x0000DC, "Wrong size on FortWindManager_GetCurrentWindImpulseCylinderDelta");
static_assert(offsetof(FortWindManager_GetCurrentWindImpulseCylinderDelta, WindImpulseCylinder) == 0x000000, "Member 'FortWindManager_GetCurrentWindImpulseCylinderDelta::WindImpulseCylinder' has a wrong offset!");
static_assert(offsetof(FortWindManager_GetCurrentWindImpulseCylinderDelta, WindImpulseCylinderDelta) == 0x000048, "Member 'FortWindManager_GetCurrentWindImpulseCylinderDelta::WindImpulseCylinderDelta' has a wrong offset!");
static_assert(offsetof(FortWindManager_GetCurrentWindImpulseCylinderDelta, ReturnValue) == 0x0000D8, "Member 'FortWindManager_GetCurrentWindImpulseCylinderDelta::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWindManager.GetGlobalWindIntensityAndDirection
// 0x0010 (0x0010 - 0x0000)
struct FortWindManager_GetGlobalWindIntensityAndDirection final
{
public:
	float                                         WindIntensity;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WindDirection;                                     // 0x0004(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWindManager_GetGlobalWindIntensityAndDirection) == 0x000004, "Wrong alignment on FortWindManager_GetGlobalWindIntensityAndDirection");
static_assert(sizeof(FortWindManager_GetGlobalWindIntensityAndDirection) == 0x000010, "Wrong size on FortWindManager_GetGlobalWindIntensityAndDirection");
static_assert(offsetof(FortWindManager_GetGlobalWindIntensityAndDirection, WindIntensity) == 0x000000, "Member 'FortWindManager_GetGlobalWindIntensityAndDirection::WindIntensity' has a wrong offset!");
static_assert(offsetof(FortWindManager_GetGlobalWindIntensityAndDirection, WindDirection) == 0x000004, "Member 'FortWindManager_GetGlobalWindIntensityAndDirection::WindDirection' has a wrong offset!");

// Function FortniteGame.FortWindManager.GetWindLocationFromWorldLocation
// 0x001C (0x001C - 0x0000)
struct FortWindManager_GetWindLocationFromWorldLocation final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WindWorldLocation;                                 // 0x000C(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortWindManager_GetWindLocationFromWorldLocation) == 0x000004, "Wrong alignment on FortWindManager_GetWindLocationFromWorldLocation");
static_assert(sizeof(FortWindManager_GetWindLocationFromWorldLocation) == 0x00001C, "Wrong size on FortWindManager_GetWindLocationFromWorldLocation");
static_assert(offsetof(FortWindManager_GetWindLocationFromWorldLocation, WorldLocation) == 0x000000, "Member 'FortWindManager_GetWindLocationFromWorldLocation::WorldLocation' has a wrong offset!");
static_assert(offsetof(FortWindManager_GetWindLocationFromWorldLocation, WindWorldLocation) == 0x00000C, "Member 'FortWindManager_GetWindLocationFromWorldLocation::WindWorldLocation' has a wrong offset!");
static_assert(offsetof(FortWindManager_GetWindLocationFromWorldLocation, ReturnValue) == 0x000018, "Member 'FortWindManager_GetWindLocationFromWorldLocation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWindManager.HasWindImpulse
// 0x0008 (0x0008 - 0x0000)
struct FortWindManager_HasWindImpulse final
{
public:
	struct FFortWindImpulseHandle                 WindImpulseHandle;                                 // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortWindManager_HasWindImpulse) == 0x000004, "Wrong alignment on FortWindManager_HasWindImpulse");
static_assert(sizeof(FortWindManager_HasWindImpulse) == 0x000008, "Wrong size on FortWindManager_HasWindImpulse");
static_assert(offsetof(FortWindManager_HasWindImpulse, WindImpulseHandle) == 0x000000, "Member 'FortWindManager_HasWindImpulse::WindImpulseHandle' has a wrong offset!");
static_assert(offsetof(FortWindManager_HasWindImpulse, ReturnValue) == 0x000004, "Member 'FortWindManager_HasWindImpulse::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWorkerTooltip.GetNumericValue
// 0x0028 (0x0028 - 0x0000)
struct FortWorkerTooltip_GetNumericValue final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVal;                                            // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortWorkerTooltip_GetNumericValue) == 0x000008, "Wrong alignment on FortWorkerTooltip_GetNumericValue");
static_assert(sizeof(FortWorkerTooltip_GetNumericValue) == 0x000028, "Wrong size on FortWorkerTooltip_GetNumericValue");
static_assert(offsetof(FortWorkerTooltip_GetNumericValue, ObjectToDescribe) == 0x000000, "Member 'FortWorkerTooltip_GetNumericValue::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortWorkerTooltip_GetNumericValue, Tag) == 0x000008, "Member 'FortWorkerTooltip_GetNumericValue::Tag' has a wrong offset!");
static_assert(offsetof(FortWorkerTooltip_GetNumericValue, Context) == 0x000010, "Member 'FortWorkerTooltip_GetNumericValue::Context' has a wrong offset!");
static_assert(offsetof(FortWorkerTooltip_GetNumericValue, Token) == 0x000018, "Member 'FortWorkerTooltip_GetNumericValue::Token' has a wrong offset!");
static_assert(offsetof(FortWorkerTooltip_GetNumericValue, OutVal) == 0x000020, "Member 'FortWorkerTooltip_GetNumericValue::OutVal' has a wrong offset!");
static_assert(offsetof(FortWorkerTooltip_GetNumericValue, ReturnValue) == 0x000024, "Member 'FortWorkerTooltip_GetNumericValue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWorkerTooltip.GetTextForToken
// 0x0040 (0x0040 - 0x0000)
struct FortWorkerTooltip_GetTextForToken final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Token;                                             // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0020(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortWorkerTooltip_GetTextForToken) == 0x000008, "Wrong alignment on FortWorkerTooltip_GetTextForToken");
static_assert(sizeof(FortWorkerTooltip_GetTextForToken) == 0x000040, "Wrong size on FortWorkerTooltip_GetTextForToken");
static_assert(offsetof(FortWorkerTooltip_GetTextForToken, ObjectToDescribe) == 0x000000, "Member 'FortWorkerTooltip_GetTextForToken::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortWorkerTooltip_GetTextForToken, Tag) == 0x000008, "Member 'FortWorkerTooltip_GetTextForToken::Tag' has a wrong offset!");
static_assert(offsetof(FortWorkerTooltip_GetTextForToken, Context) == 0x000010, "Member 'FortWorkerTooltip_GetTextForToken::Context' has a wrong offset!");
static_assert(offsetof(FortWorkerTooltip_GetTextForToken, Token) == 0x000018, "Member 'FortWorkerTooltip_GetTextForToken::Token' has a wrong offset!");
static_assert(offsetof(FortWorkerTooltip_GetTextForToken, OutText) == 0x000020, "Member 'FortWorkerTooltip_GetTextForToken::OutText' has a wrong offset!");
static_assert(offsetof(FortWorkerTooltip_GetTextForToken, ReturnValue) == 0x000038, "Member 'FortWorkerTooltip_GetTextForToken::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWorkerTooltip.GetTokenizedDescriptionText
// 0x0030 (0x0030 - 0x0000)
struct FortWorkerTooltip_GetTokenizedDescriptionText final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           OutDescription;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortWorkerTooltip_GetTokenizedDescriptionText) == 0x000008, "Wrong alignment on FortWorkerTooltip_GetTokenizedDescriptionText");
static_assert(sizeof(FortWorkerTooltip_GetTokenizedDescriptionText) == 0x000030, "Wrong size on FortWorkerTooltip_GetTokenizedDescriptionText");
static_assert(offsetof(FortWorkerTooltip_GetTokenizedDescriptionText, ObjectToDescribe) == 0x000000, "Member 'FortWorkerTooltip_GetTokenizedDescriptionText::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortWorkerTooltip_GetTokenizedDescriptionText, Tag) == 0x000008, "Member 'FortWorkerTooltip_GetTokenizedDescriptionText::Tag' has a wrong offset!");
static_assert(offsetof(FortWorkerTooltip_GetTokenizedDescriptionText, Context) == 0x000010, "Member 'FortWorkerTooltip_GetTokenizedDescriptionText::Context' has a wrong offset!");
static_assert(offsetof(FortWorkerTooltip_GetTokenizedDescriptionText, OutDescription) == 0x000018, "Member 'FortWorkerTooltip_GetTokenizedDescriptionText::OutDescription' has a wrong offset!");
static_assert(offsetof(FortWorkerTooltip_GetTokenizedDescriptionText, ReturnValue) == 0x000028, "Member 'FortWorkerTooltip_GetTokenizedDescriptionText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FrontendAnimInstance.OnPlayMontageFromGameplayTagQuery
// 0x0050 (0x0050 - 0x0000)
struct FrontendAnimInstance_OnPlayMontageFromGameplayTagQuery final
{
public:
	struct FGameplayTagQuery                      MatchingQuery;                                     // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UAnimMontage*                           MontagePlaying;                                    // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FrontendAnimInstance_OnPlayMontageFromGameplayTagQuery) == 0x000008, "Wrong alignment on FrontendAnimInstance_OnPlayMontageFromGameplayTagQuery");
static_assert(sizeof(FrontendAnimInstance_OnPlayMontageFromGameplayTagQuery) == 0x000050, "Wrong size on FrontendAnimInstance_OnPlayMontageFromGameplayTagQuery");
static_assert(offsetof(FrontendAnimInstance_OnPlayMontageFromGameplayTagQuery, MatchingQuery) == 0x000000, "Member 'FrontendAnimInstance_OnPlayMontageFromGameplayTagQuery::MatchingQuery' has a wrong offset!");
static_assert(offsetof(FrontendAnimInstance_OnPlayMontageFromGameplayTagQuery, MontagePlaying) == 0x000048, "Member 'FrontendAnimInstance_OnPlayMontageFromGameplayTagQuery::MontagePlaying' has a wrong offset!");

// Function FortniteGame.HoverDronePawn.GetAltitude
// 0x0004 (0x0004 - 0x0000)
struct HoverDronePawn_GetAltitude final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HoverDronePawn_GetAltitude) == 0x000004, "Wrong alignment on HoverDronePawn_GetAltitude");
static_assert(sizeof(HoverDronePawn_GetAltitude) == 0x000004, "Wrong size on HoverDronePawn_GetAltitude");
static_assert(offsetof(HoverDronePawn_GetAltitude, ReturnValue) == 0x000000, "Member 'HoverDronePawn_GetAltitude::ReturnValue' has a wrong offset!");

// Function FortniteGame.HoverDronePawn.IsMaintainingConstantAltitude
// 0x0001 (0x0001 - 0x0000)
struct HoverDronePawn_IsMaintainingConstantAltitude final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HoverDronePawn_IsMaintainingConstantAltitude) == 0x000001, "Wrong alignment on HoverDronePawn_IsMaintainingConstantAltitude");
static_assert(sizeof(HoverDronePawn_IsMaintainingConstantAltitude) == 0x000001, "Wrong size on HoverDronePawn_IsMaintainingConstantAltitude");
static_assert(offsetof(HoverDronePawn_IsMaintainingConstantAltitude, ReturnValue) == 0x000000, "Member 'HoverDronePawn_IsMaintainingConstantAltitude::ReturnValue' has a wrong offset!");

// Function FortniteGame.KeepHeartBase.IsKeepLoaded
// 0x0001 (0x0001 - 0x0000)
struct KeepHeartBase_IsKeepLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepHeartBase_IsKeepLoaded) == 0x000001, "Wrong alignment on KeepHeartBase_IsKeepLoaded");
static_assert(sizeof(KeepHeartBase_IsKeepLoaded) == 0x000001, "Wrong size on KeepHeartBase_IsKeepLoaded");
static_assert(offsetof(KeepHeartBase_IsKeepLoaded, ReturnValue) == 0x000000, "Member 'KeepHeartBase_IsKeepLoaded::ReturnValue' has a wrong offset!");

// Function FortniteGame.KeepHeartBase.IsKeepOwner
// 0x0010 (0x0010 - 0x0000)
struct KeepHeartBase_IsKeepOwner final
{
public:
	const class AFortPlayerController*            FortPC;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KeepHeartBase_IsKeepOwner) == 0x000008, "Wrong alignment on KeepHeartBase_IsKeepOwner");
static_assert(sizeof(KeepHeartBase_IsKeepOwner) == 0x000010, "Wrong size on KeepHeartBase_IsKeepOwner");
static_assert(offsetof(KeepHeartBase_IsKeepOwner, FortPC) == 0x000000, "Member 'KeepHeartBase_IsKeepOwner::FortPC' has a wrong offset!");
static_assert(offsetof(KeepHeartBase_IsKeepOwner, ReturnValue) == 0x000008, "Member 'KeepHeartBase_IsKeepOwner::ReturnValue' has a wrong offset!");

// Function FortniteGame.KeepHeartBase.LoadUserKeep
// 0x0008 (0x0008 - 0x0000)
struct KeepHeartBase_LoadUserKeep final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepHeartBase_LoadUserKeep) == 0x000008, "Wrong alignment on KeepHeartBase_LoadUserKeep");
static_assert(sizeof(KeepHeartBase_LoadUserKeep) == 0x000008, "Wrong size on KeepHeartBase_LoadUserKeep");
static_assert(offsetof(KeepHeartBase_LoadUserKeep, FortPC) == 0x000000, "Member 'KeepHeartBase_LoadUserKeep::FortPC' has a wrong offset!");

// Function FortniteGame.KeepHeartBase.ResetUserKeep
// 0x0010 (0x0010 - 0x0000)
struct KeepHeartBase_ResetUserKeep final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KeepHeartBase_ResetUserKeep) == 0x000008, "Wrong alignment on KeepHeartBase_ResetUserKeep");
static_assert(sizeof(KeepHeartBase_ResetUserKeep) == 0x000010, "Wrong size on KeepHeartBase_ResetUserKeep");
static_assert(offsetof(KeepHeartBase_ResetUserKeep, FortPC) == 0x000000, "Member 'KeepHeartBase_ResetUserKeep::FortPC' has a wrong offset!");
static_assert(offsetof(KeepHeartBase_ResetUserKeep, ReturnValue) == 0x000008, "Member 'KeepHeartBase_ResetUserKeep::ReturnValue' has a wrong offset!");

// Function FortniteGame.KeepHeartBase.SaveUserKeep
// 0x0010 (0x0010 - 0x0000)
struct KeepHeartBase_SaveUserKeep final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KeepHeartBase_SaveUserKeep) == 0x000008, "Wrong alignment on KeepHeartBase_SaveUserKeep");
static_assert(sizeof(KeepHeartBase_SaveUserKeep) == 0x000010, "Wrong size on KeepHeartBase_SaveUserKeep");
static_assert(offsetof(KeepHeartBase_SaveUserKeep, FortPC) == 0x000000, "Member 'KeepHeartBase_SaveUserKeep::FortPC' has a wrong offset!");
static_assert(offsetof(KeepHeartBase_SaveUserKeep, ReturnValue) == 0x000008, "Member 'KeepHeartBase_SaveUserKeep::ReturnValue' has a wrong offset!");

// Function FortniteGame.KeepHeartBase.SetAllowLooting
// 0x0001 (0x0001 - 0x0000)
struct KeepHeartBase_SetAllowLooting final
{
public:
	bool                                          bAllowed;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepHeartBase_SetAllowLooting) == 0x000001, "Wrong alignment on KeepHeartBase_SetAllowLooting");
static_assert(sizeof(KeepHeartBase_SetAllowLooting) == 0x000001, "Wrong size on KeepHeartBase_SetAllowLooting");
static_assert(offsetof(KeepHeartBase_SetAllowLooting, bAllowed) == 0x000000, "Member 'KeepHeartBase_SetAllowLooting::bAllowed' has a wrong offset!");

// Function FortniteGame.KeepHeart.DestroyNonPermaniteStructures
// 0x0001 (0x0001 - 0x0000)
struct KeepHeart_DestroyNonPermaniteStructures final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepHeart_DestroyNonPermaniteStructures) == 0x000001, "Wrong alignment on KeepHeart_DestroyNonPermaniteStructures");
static_assert(sizeof(KeepHeart_DestroyNonPermaniteStructures) == 0x000001, "Wrong size on KeepHeart_DestroyNonPermaniteStructures");
static_assert(offsetof(KeepHeart_DestroyNonPermaniteStructures, ReturnValue) == 0x000000, "Member 'KeepHeart_DestroyNonPermaniteStructures::ReturnValue' has a wrong offset!");

// Function FortniteGame.KeepHeart.GetAveragePermaniteLevel
// 0x0004 (0x0004 - 0x0000)
struct KeepHeart_GetAveragePermaniteLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepHeart_GetAveragePermaniteLevel) == 0x000004, "Wrong alignment on KeepHeart_GetAveragePermaniteLevel");
static_assert(sizeof(KeepHeart_GetAveragePermaniteLevel) == 0x000004, "Wrong size on KeepHeart_GetAveragePermaniteLevel");
static_assert(offsetof(KeepHeart_GetAveragePermaniteLevel, ReturnValue) == 0x000000, "Member 'KeepHeart_GetAveragePermaniteLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.KeepHeart.GetUpgradeAllPermaniteCost
// 0x0010 (0x0010 - 0x0000)
struct KeepHeart_GetUpgradeAllPermaniteCost final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bQuickUpgrade;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepHeart_GetUpgradeAllPermaniteCost) == 0x000008, "Wrong alignment on KeepHeart_GetUpgradeAllPermaniteCost");
static_assert(sizeof(KeepHeart_GetUpgradeAllPermaniteCost) == 0x000010, "Wrong size on KeepHeart_GetUpgradeAllPermaniteCost");
static_assert(offsetof(KeepHeart_GetUpgradeAllPermaniteCost, FortPC) == 0x000000, "Member 'KeepHeart_GetUpgradeAllPermaniteCost::FortPC' has a wrong offset!");
static_assert(offsetof(KeepHeart_GetUpgradeAllPermaniteCost, bQuickUpgrade) == 0x000008, "Member 'KeepHeart_GetUpgradeAllPermaniteCost::bQuickUpgrade' has a wrong offset!");
static_assert(offsetof(KeepHeart_GetUpgradeAllPermaniteCost, ReturnValue) == 0x00000C, "Member 'KeepHeart_GetUpgradeAllPermaniteCost::ReturnValue' has a wrong offset!");

// Function FortniteGame.KeepHeart.GetWorldStreamingInProgress
// 0x0004 (0x0004 - 0x0000)
struct KeepHeart_GetWorldStreamingInProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepHeart_GetWorldStreamingInProgress) == 0x000004, "Wrong alignment on KeepHeart_GetWorldStreamingInProgress");
static_assert(sizeof(KeepHeart_GetWorldStreamingInProgress) == 0x000004, "Wrong size on KeepHeart_GetWorldStreamingInProgress");
static_assert(offsetof(KeepHeart_GetWorldStreamingInProgress, ReturnValue) == 0x000000, "Member 'KeepHeart_GetWorldStreamingInProgress::ReturnValue' has a wrong offset!");

// Function FortniteGame.KeepHeart.HandleVoteComplete
// 0x0001 (0x0001 - 0x0000)
struct KeepHeart_HandleVoteComplete final
{
public:
	bool                                          bResult;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepHeart_HandleVoteComplete) == 0x000001, "Wrong alignment on KeepHeart_HandleVoteComplete");
static_assert(sizeof(KeepHeart_HandleVoteComplete) == 0x000001, "Wrong size on KeepHeart_HandleVoteComplete");
static_assert(offsetof(KeepHeart_HandleVoteComplete, bResult) == 0x000000, "Member 'KeepHeart_HandleVoteComplete::bResult' has a wrong offset!");

// Function FortniteGame.KeepHeart.IsWorldStreamedIn
// 0x0001 (0x0001 - 0x0000)
struct KeepHeart_IsWorldStreamedIn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepHeart_IsWorldStreamedIn) == 0x000001, "Wrong alignment on KeepHeart_IsWorldStreamedIn");
static_assert(sizeof(KeepHeart_IsWorldStreamedIn) == 0x000001, "Wrong size on KeepHeart_IsWorldStreamedIn");
static_assert(offsetof(KeepHeart_IsWorldStreamedIn, ReturnValue) == 0x000000, "Member 'KeepHeart_IsWorldStreamedIn::ReturnValue' has a wrong offset!");

// Function FortniteGame.KeepHeart.IsWorldStreamingIn
// 0x0001 (0x0001 - 0x0000)
struct KeepHeart_IsWorldStreamingIn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepHeart_IsWorldStreamingIn) == 0x000001, "Wrong alignment on KeepHeart_IsWorldStreamingIn");
static_assert(sizeof(KeepHeart_IsWorldStreamingIn) == 0x000001, "Wrong size on KeepHeart_IsWorldStreamingIn");
static_assert(offsetof(KeepHeart_IsWorldStreamingIn, ReturnValue) == 0x000000, "Member 'KeepHeart_IsWorldStreamingIn::ReturnValue' has a wrong offset!");

// Function FortniteGame.KeepHeart.NotifyEncounterEnded
// 0x0008 (0x0008 - 0x0000)
struct KeepHeart_NotifyEncounterEnded final
{
public:
	class UFortAIEncounterInfo*                   EndedEncounter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepHeart_NotifyEncounterEnded) == 0x000008, "Wrong alignment on KeepHeart_NotifyEncounterEnded");
static_assert(sizeof(KeepHeart_NotifyEncounterEnded) == 0x000008, "Wrong size on KeepHeart_NotifyEncounterEnded");
static_assert(offsetof(KeepHeart_NotifyEncounterEnded, EndedEncounter) == 0x000000, "Member 'KeepHeart_NotifyEncounterEnded::EndedEncounter' has a wrong offset!");

// Function FortniteGame.KeepHeart.NotifyEncounterStarted
// 0x0008 (0x0008 - 0x0000)
struct KeepHeart_NotifyEncounterStarted final
{
public:
	class UFortAIEncounterInfo*                   StartedEncounter;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepHeart_NotifyEncounterStarted) == 0x000008, "Wrong alignment on KeepHeart_NotifyEncounterStarted");
static_assert(sizeof(KeepHeart_NotifyEncounterStarted) == 0x000008, "Wrong size on KeepHeart_NotifyEncounterStarted");
static_assert(offsetof(KeepHeart_NotifyEncounterStarted, StartedEncounter) == 0x000000, "Member 'KeepHeart_NotifyEncounterStarted::StartedEncounter' has a wrong offset!");

// Function FortniteGame.KeepHeart.OnVoteComplete
// 0x0001 (0x0001 - 0x0000)
struct KeepHeart_OnVoteComplete final
{
public:
	bool                                          bResult;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepHeart_OnVoteComplete) == 0x000001, "Wrong alignment on KeepHeart_OnVoteComplete");
static_assert(sizeof(KeepHeart_OnVoteComplete) == 0x000001, "Wrong size on KeepHeart_OnVoteComplete");
static_assert(offsetof(KeepHeart_OnVoteComplete, bResult) == 0x000000, "Member 'KeepHeart_OnVoteComplete::bResult' has a wrong offset!");

// Function FortniteGame.KeepHeart.SetPermaniteAvailability
// 0x0001 (0x0001 - 0x0000)
struct KeepHeart_SetPermaniteAvailability final
{
public:
	bool                                          bAvailable;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepHeart_SetPermaniteAvailability) == 0x000001, "Wrong alignment on KeepHeart_SetPermaniteAvailability");
static_assert(sizeof(KeepHeart_SetPermaniteAvailability) == 0x000001, "Wrong size on KeepHeart_SetPermaniteAvailability");
static_assert(offsetof(KeepHeart_SetPermaniteAvailability, bAvailable) == 0x000000, "Member 'KeepHeart_SetPermaniteAvailability::bAvailable' has a wrong offset!");

// Function FortniteGame.KeepHeart.StartVote
// 0x0050 (0x0050 - 0x0000)
struct KeepHeart_StartVote final
{
public:
	class FText                                   VoteText;                                          // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   YesText;                                           // 0x0018(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   NoText;                                            // 0x0030(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         PercentageToPass;                                  // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipIfOnePlayerOnly;                              // 0x004C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KeepHeart_StartVote) == 0x000008, "Wrong alignment on KeepHeart_StartVote");
static_assert(sizeof(KeepHeart_StartVote) == 0x000050, "Wrong size on KeepHeart_StartVote");
static_assert(offsetof(KeepHeart_StartVote, VoteText) == 0x000000, "Member 'KeepHeart_StartVote::VoteText' has a wrong offset!");
static_assert(offsetof(KeepHeart_StartVote, YesText) == 0x000018, "Member 'KeepHeart_StartVote::YesText' has a wrong offset!");
static_assert(offsetof(KeepHeart_StartVote, NoText) == 0x000030, "Member 'KeepHeart_StartVote::NoText' has a wrong offset!");
static_assert(offsetof(KeepHeart_StartVote, PercentageToPass) == 0x000048, "Member 'KeepHeart_StartVote::PercentageToPass' has a wrong offset!");
static_assert(offsetof(KeepHeart_StartVote, bSkipIfOnePlayerOnly) == 0x00004C, "Member 'KeepHeart_StartVote::bSkipIfOnePlayerOnly' has a wrong offset!");

// Function FortniteGame.KeepHeart.UpgradeAllPermaniteStructures
// 0x0010 (0x0010 - 0x0000)
struct KeepHeart_UpgradeAllPermaniteStructures final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bQuickUpgrade;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KeepHeart_UpgradeAllPermaniteStructures) == 0x000008, "Wrong alignment on KeepHeart_UpgradeAllPermaniteStructures");
static_assert(sizeof(KeepHeart_UpgradeAllPermaniteStructures) == 0x000010, "Wrong size on KeepHeart_UpgradeAllPermaniteStructures");
static_assert(offsetof(KeepHeart_UpgradeAllPermaniteStructures, FortPC) == 0x000000, "Member 'KeepHeart_UpgradeAllPermaniteStructures::FortPC' has a wrong offset!");
static_assert(offsetof(KeepHeart_UpgradeAllPermaniteStructures, bQuickUpgrade) == 0x000008, "Member 'KeepHeart_UpgradeAllPermaniteStructures::bQuickUpgrade' has a wrong offset!");
static_assert(offsetof(KeepHeart_UpgradeAllPermaniteStructures, ReturnValue) == 0x000009, "Member 'KeepHeart_UpgradeAllPermaniteStructures::ReturnValue' has a wrong offset!");

// Function FortniteGame.KeepHeart.GetDefenseLevel
// 0x0004 (0x0004 - 0x0000)
struct KeepHeart_GetDefenseLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepHeart_GetDefenseLevel) == 0x000004, "Wrong alignment on KeepHeart_GetDefenseLevel");
static_assert(sizeof(KeepHeart_GetDefenseLevel) == 0x000004, "Wrong size on KeepHeart_GetDefenseLevel");
static_assert(offsetof(KeepHeart_GetDefenseLevel, ReturnValue) == 0x000000, "Member 'KeepHeart_GetDefenseLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.KeepHeart.IsDefenseActive
// 0x0001 (0x0001 - 0x0000)
struct KeepHeart_IsDefenseActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepHeart_IsDefenseActive) == 0x000001, "Wrong alignment on KeepHeart_IsDefenseActive");
static_assert(sizeof(KeepHeart_IsDefenseActive) == 0x000001, "Wrong size on KeepHeart_IsDefenseActive");
static_assert(offsetof(KeepHeart_IsDefenseActive, ReturnValue) == 0x000000, "Member 'KeepHeart_IsDefenseActive::ReturnValue' has a wrong offset!");

// Function FortniteGame.ManorHeart.TravelToNewWorld
// 0x0010 (0x0010 - 0x0000)
struct ManorHeart_TravelToNewWorld final
{
public:
	class FString                                 NewTheaterId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManorHeart_TravelToNewWorld) == 0x000008, "Wrong alignment on ManorHeart_TravelToNewWorld");
static_assert(sizeof(ManorHeart_TravelToNewWorld) == 0x000010, "Wrong size on ManorHeart_TravelToNewWorld");
static_assert(offsetof(ManorHeart_TravelToNewWorld, NewTheaterId) == 0x000000, "Member 'ManorHeart_TravelToNewWorld::NewTheaterId' has a wrong offset!");

// Function FortniteGame.ManorPortal.GetCurrencyCost
// 0x0010 (0x0010 - 0x0000)
struct ManorPortal_GetCurrencyCost final
{
public:
	class AFortPlayerController*                  Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ManorPortal_GetCurrencyCost) == 0x000008, "Wrong alignment on ManorPortal_GetCurrencyCost");
static_assert(sizeof(ManorPortal_GetCurrencyCost) == 0x000010, "Wrong size on ManorPortal_GetCurrencyCost");
static_assert(offsetof(ManorPortal_GetCurrencyCost, Player) == 0x000000, "Member 'ManorPortal_GetCurrencyCost::Player' has a wrong offset!");
static_assert(offsetof(ManorPortal_GetCurrencyCost, ReturnValue) == 0x000008, "Member 'ManorPortal_GetCurrencyCost::ReturnValue' has a wrong offset!");

// Function FortniteGame.ManorPortal.GetPlayerCurrencyAmount
// 0x0010 (0x0010 - 0x0000)
struct ManorPortal_GetPlayerCurrencyAmount final
{
public:
	class AFortPlayerController*                  Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ManorPortal_GetPlayerCurrencyAmount) == 0x000008, "Wrong alignment on ManorPortal_GetPlayerCurrencyAmount");
static_assert(sizeof(ManorPortal_GetPlayerCurrencyAmount) == 0x000010, "Wrong size on ManorPortal_GetPlayerCurrencyAmount");
static_assert(offsetof(ManorPortal_GetPlayerCurrencyAmount, Player) == 0x000000, "Member 'ManorPortal_GetPlayerCurrencyAmount::Player' has a wrong offset!");
static_assert(offsetof(ManorPortal_GetPlayerCurrencyAmount, ReturnValue) == 0x000008, "Member 'ManorPortal_GetPlayerCurrencyAmount::ReturnValue' has a wrong offset!");

// Function FortniteGame.ManorPortal.IsPortalUnlocked
// 0x0010 (0x0010 - 0x0000)
struct ManorPortal_IsPortalUnlocked final
{
public:
	class AFortPlayerController*                  Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ManorPortal_IsPortalUnlocked) == 0x000008, "Wrong alignment on ManorPortal_IsPortalUnlocked");
static_assert(sizeof(ManorPortal_IsPortalUnlocked) == 0x000010, "Wrong size on ManorPortal_IsPortalUnlocked");
static_assert(offsetof(ManorPortal_IsPortalUnlocked, Player) == 0x000000, "Member 'ManorPortal_IsPortalUnlocked::Player' has a wrong offset!");
static_assert(offsetof(ManorPortal_IsPortalUnlocked, ReturnValue) == 0x000008, "Member 'ManorPortal_IsPortalUnlocked::ReturnValue' has a wrong offset!");

// Function FortniteGame.ManorPortal.IsProfileValidToReadPortalAvailability
// 0x0010 (0x0010 - 0x0000)
struct ManorPortal_IsProfileValidToReadPortalAvailability final
{
public:
	class AFortPlayerController*                  Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ManorPortal_IsProfileValidToReadPortalAvailability) == 0x000008, "Wrong alignment on ManorPortal_IsProfileValidToReadPortalAvailability");
static_assert(sizeof(ManorPortal_IsProfileValidToReadPortalAvailability) == 0x000010, "Wrong size on ManorPortal_IsProfileValidToReadPortalAvailability");
static_assert(offsetof(ManorPortal_IsProfileValidToReadPortalAvailability, Player) == 0x000000, "Member 'ManorPortal_IsProfileValidToReadPortalAvailability::Player' has a wrong offset!");
static_assert(offsetof(ManorPortal_IsProfileValidToReadPortalAvailability, ReturnValue) == 0x000008, "Member 'ManorPortal_IsProfileValidToReadPortalAvailability::ReturnValue' has a wrong offset!");

// Function FortniteGame.ManorPortal.OpenUnlockMenu
// 0x0008 (0x0008 - 0x0000)
struct ManorPortal_OpenUnlockMenu final
{
public:
	class AFortPlayerController*                  Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManorPortal_OpenUnlockMenu) == 0x000008, "Wrong alignment on ManorPortal_OpenUnlockMenu");
static_assert(sizeof(ManorPortal_OpenUnlockMenu) == 0x000008, "Wrong size on ManorPortal_OpenUnlockMenu");
static_assert(offsetof(ManorPortal_OpenUnlockMenu, Player) == 0x000000, "Member 'ManorPortal_OpenUnlockMenu::Player' has a wrong offset!");

// Function FortniteGame.ManorPortal.UnlockPortal
// 0x0008 (0x0008 - 0x0000)
struct ManorPortal_UnlockPortal final
{
public:
	class AFortPlayerController*                  Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManorPortal_UnlockPortal) == 0x000008, "Wrong alignment on ManorPortal_UnlockPortal");
static_assert(sizeof(ManorPortal_UnlockPortal) == 0x000008, "Wrong size on ManorPortal_UnlockPortal");
static_assert(offsetof(ManorPortal_UnlockPortal, Player) == 0x000000, "Member 'ManorPortal_UnlockPortal::Player' has a wrong offset!");

// Function FortniteGame.FortItemCollectedParams.BreakParams
// 0x0018 (0x0018 - 0x0000)
struct FortItemCollectedParams_BreakParams final
{
public:
	class UFortWorldItemDefinition*               _CollectedItemDefinition;                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  _CollectedBy;                                      // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _AmountCollected;                                  // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemCollectedParams_BreakParams) == 0x000008, "Wrong alignment on FortItemCollectedParams_BreakParams");
static_assert(sizeof(FortItemCollectedParams_BreakParams) == 0x000018, "Wrong size on FortItemCollectedParams_BreakParams");
static_assert(offsetof(FortItemCollectedParams_BreakParams, _CollectedItemDefinition) == 0x000000, "Member 'FortItemCollectedParams_BreakParams::_CollectedItemDefinition' has a wrong offset!");
static_assert(offsetof(FortItemCollectedParams_BreakParams, _CollectedBy) == 0x000008, "Member 'FortItemCollectedParams_BreakParams::_CollectedBy' has a wrong offset!");
static_assert(offsetof(FortItemCollectedParams_BreakParams, _AmountCollected) == 0x000010, "Member 'FortItemCollectedParams_BreakParams::_AmountCollected' has a wrong offset!");

// Function FortniteGame.FortItemCollectedParams.SetParams
// 0x0020 (0x0020 - 0x0000)
struct FortItemCollectedParams_SetParams final
{
public:
	const class UFortWorldItemDefinition*         _CollectedItemDefinition;                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  _CollectedBy;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _AmountCollected;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItemCollectedParams*               ThisParam;                                         // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemCollectedParams_SetParams) == 0x000008, "Wrong alignment on FortItemCollectedParams_SetParams");
static_assert(sizeof(FortItemCollectedParams_SetParams) == 0x000020, "Wrong size on FortItemCollectedParams_SetParams");
static_assert(offsetof(FortItemCollectedParams_SetParams, _CollectedItemDefinition) == 0x000000, "Member 'FortItemCollectedParams_SetParams::_CollectedItemDefinition' has a wrong offset!");
static_assert(offsetof(FortItemCollectedParams_SetParams, _CollectedBy) == 0x000008, "Member 'FortItemCollectedParams_SetParams::_CollectedBy' has a wrong offset!");
static_assert(offsetof(FortItemCollectedParams_SetParams, _AmountCollected) == 0x000010, "Member 'FortItemCollectedParams_SetParams::_AmountCollected' has a wrong offset!");
static_assert(offsetof(FortItemCollectedParams_SetParams, ThisParam) == 0x000018, "Member 'FortItemCollectedParams_SetParams::ThisParam' has a wrong offset!");

// Function FortniteGame.FortEnemyKilledParams.BreakParams
// 0x0010 (0x0010 - 0x0000)
struct FortEnemyKilledParams_BreakParams final
{
public:
	class AFortPawn*                              _KilledPawn;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  _KilledBy;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEnemyKilledParams_BreakParams) == 0x000008, "Wrong alignment on FortEnemyKilledParams_BreakParams");
static_assert(sizeof(FortEnemyKilledParams_BreakParams) == 0x000010, "Wrong size on FortEnemyKilledParams_BreakParams");
static_assert(offsetof(FortEnemyKilledParams_BreakParams, _KilledPawn) == 0x000000, "Member 'FortEnemyKilledParams_BreakParams::_KilledPawn' has a wrong offset!");
static_assert(offsetof(FortEnemyKilledParams_BreakParams, _KilledBy) == 0x000008, "Member 'FortEnemyKilledParams_BreakParams::_KilledBy' has a wrong offset!");

// Function FortniteGame.FortEnemyKilledParams.SetParams
// 0x0018 (0x0018 - 0x0000)
struct FortEnemyKilledParams_SetParams final
{
public:
	class AFortPawn*                              _KilledPawn;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  _KilledBy;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortEnemyKilledParams*                 ThisParam;                                         // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEnemyKilledParams_SetParams) == 0x000008, "Wrong alignment on FortEnemyKilledParams_SetParams");
static_assert(sizeof(FortEnemyKilledParams_SetParams) == 0x000018, "Wrong size on FortEnemyKilledParams_SetParams");
static_assert(offsetof(FortEnemyKilledParams_SetParams, _KilledPawn) == 0x000000, "Member 'FortEnemyKilledParams_SetParams::_KilledPawn' has a wrong offset!");
static_assert(offsetof(FortEnemyKilledParams_SetParams, _KilledBy) == 0x000008, "Member 'FortEnemyKilledParams_SetParams::_KilledBy' has a wrong offset!");
static_assert(offsetof(FortEnemyKilledParams_SetParams, ThisParam) == 0x000010, "Member 'FortEnemyKilledParams_SetParams::ThisParam' has a wrong offset!");

// Function FortniteGame.FortEnemyDamagedParams.BreakParams
// 0x0018 (0x0018 - 0x0000)
struct FortEnemyDamagedParams_BreakParams final
{
public:
	class AFortPawn*                              _DamagedPawn;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  _DamagedBy;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _DamageAmount;                                     // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortEnemyDamagedParams_BreakParams) == 0x000008, "Wrong alignment on FortEnemyDamagedParams_BreakParams");
static_assert(sizeof(FortEnemyDamagedParams_BreakParams) == 0x000018, "Wrong size on FortEnemyDamagedParams_BreakParams");
static_assert(offsetof(FortEnemyDamagedParams_BreakParams, _DamagedPawn) == 0x000000, "Member 'FortEnemyDamagedParams_BreakParams::_DamagedPawn' has a wrong offset!");
static_assert(offsetof(FortEnemyDamagedParams_BreakParams, _DamagedBy) == 0x000008, "Member 'FortEnemyDamagedParams_BreakParams::_DamagedBy' has a wrong offset!");
static_assert(offsetof(FortEnemyDamagedParams_BreakParams, _DamageAmount) == 0x000010, "Member 'FortEnemyDamagedParams_BreakParams::_DamageAmount' has a wrong offset!");

// Function FortniteGame.FortEnemyDamagedParams.SetParams
// 0x0020 (0x0020 - 0x0000)
struct FortEnemyDamagedParams_SetParams final
{
public:
	class AFortPawn*                              _DamagedPawn;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  _DamagedBy;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _DamageAmount;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortEnemyDamagedParams*                ThisParam;                                         // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEnemyDamagedParams_SetParams) == 0x000008, "Wrong alignment on FortEnemyDamagedParams_SetParams");
static_assert(sizeof(FortEnemyDamagedParams_SetParams) == 0x000020, "Wrong size on FortEnemyDamagedParams_SetParams");
static_assert(offsetof(FortEnemyDamagedParams_SetParams, _DamagedPawn) == 0x000000, "Member 'FortEnemyDamagedParams_SetParams::_DamagedPawn' has a wrong offset!");
static_assert(offsetof(FortEnemyDamagedParams_SetParams, _DamagedBy) == 0x000008, "Member 'FortEnemyDamagedParams_SetParams::_DamagedBy' has a wrong offset!");
static_assert(offsetof(FortEnemyDamagedParams_SetParams, _DamageAmount) == 0x000010, "Member 'FortEnemyDamagedParams_SetParams::_DamageAmount' has a wrong offset!");
static_assert(offsetof(FortEnemyDamagedParams_SetParams, ThisParam) == 0x000018, "Member 'FortEnemyDamagedParams_SetParams::ThisParam' has a wrong offset!");

// Function FortniteGame.FortNewPlayerParams.BreakParams
// 0x0008 (0x0008 - 0x0000)
struct FortNewPlayerParams_BreakParams final
{
public:
	class AFortPlayerController*                  _NewPlayerController;                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortNewPlayerParams_BreakParams) == 0x000008, "Wrong alignment on FortNewPlayerParams_BreakParams");
static_assert(sizeof(FortNewPlayerParams_BreakParams) == 0x000008, "Wrong size on FortNewPlayerParams_BreakParams");
static_assert(offsetof(FortNewPlayerParams_BreakParams, _NewPlayerController) == 0x000000, "Member 'FortNewPlayerParams_BreakParams::_NewPlayerController' has a wrong offset!");

// Function FortniteGame.FortNewPlayerParams.SetParams
// 0x0010 (0x0010 - 0x0000)
struct FortNewPlayerParams_SetParams final
{
public:
	class AFortPlayerController*                  _NewPlayerController;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortNewPlayerParams*                   ThisParam;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortNewPlayerParams_SetParams) == 0x000008, "Wrong alignment on FortNewPlayerParams_SetParams");
static_assert(sizeof(FortNewPlayerParams_SetParams) == 0x000010, "Wrong size on FortNewPlayerParams_SetParams");
static_assert(offsetof(FortNewPlayerParams_SetParams, _NewPlayerController) == 0x000000, "Member 'FortNewPlayerParams_SetParams::_NewPlayerController' has a wrong offset!");
static_assert(offsetof(FortNewPlayerParams_SetParams, ThisParam) == 0x000008, "Member 'FortNewPlayerParams_SetParams::ThisParam' has a wrong offset!");

// Function FortniteGame.FortPlayerExitParams.BreakParams
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerExitParams_BreakParams final
{
public:
	class AFortPlayerController*                  _ExitingPlayerController;                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerExitParams_BreakParams) == 0x000008, "Wrong alignment on FortPlayerExitParams_BreakParams");
static_assert(sizeof(FortPlayerExitParams_BreakParams) == 0x000008, "Wrong size on FortPlayerExitParams_BreakParams");
static_assert(offsetof(FortPlayerExitParams_BreakParams, _ExitingPlayerController) == 0x000000, "Member 'FortPlayerExitParams_BreakParams::_ExitingPlayerController' has a wrong offset!");

// Function FortniteGame.FortPlayerExitParams.SetParams
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerExitParams_SetParams final
{
public:
	class AFortPlayerController*                  _ExitingPlayerController;                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortPlayerExitParams*                  ThisParam;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerExitParams_SetParams) == 0x000008, "Wrong alignment on FortPlayerExitParams_SetParams");
static_assert(sizeof(FortPlayerExitParams_SetParams) == 0x000010, "Wrong size on FortPlayerExitParams_SetParams");
static_assert(offsetof(FortPlayerExitParams_SetParams, _ExitingPlayerController) == 0x000000, "Member 'FortPlayerExitParams_SetParams::_ExitingPlayerController' has a wrong offset!");
static_assert(offsetof(FortPlayerExitParams_SetParams, ThisParam) == 0x000008, "Member 'FortPlayerExitParams_SetParams::ThisParam' has a wrong offset!");

// Function FortniteGame.FortPlayerSpawnedParams.BreakParams
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerSpawnedParams_BreakParams final
{
public:
	class AFortPlayerController*                  _SpawnedPlayerController;                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSpawnedParams_BreakParams) == 0x000008, "Wrong alignment on FortPlayerSpawnedParams_BreakParams");
static_assert(sizeof(FortPlayerSpawnedParams_BreakParams) == 0x000008, "Wrong size on FortPlayerSpawnedParams_BreakParams");
static_assert(offsetof(FortPlayerSpawnedParams_BreakParams, _SpawnedPlayerController) == 0x000000, "Member 'FortPlayerSpawnedParams_BreakParams::_SpawnedPlayerController' has a wrong offset!");

// Function FortniteGame.FortPlayerSpawnedParams.SetParams
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerSpawnedParams_SetParams final
{
public:
	class AFortPlayerController*                  _SpawnedPlayerController;                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortPlayerSpawnedParams*               ThisParam;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSpawnedParams_SetParams) == 0x000008, "Wrong alignment on FortPlayerSpawnedParams_SetParams");
static_assert(sizeof(FortPlayerSpawnedParams_SetParams) == 0x000010, "Wrong size on FortPlayerSpawnedParams_SetParams");
static_assert(offsetof(FortPlayerSpawnedParams_SetParams, _SpawnedPlayerController) == 0x000000, "Member 'FortPlayerSpawnedParams_SetParams::_SpawnedPlayerController' has a wrong offset!");
static_assert(offsetof(FortPlayerSpawnedParams_SetParams, ThisParam) == 0x000008, "Member 'FortPlayerSpawnedParams_SetParams::ThisParam' has a wrong offset!");

// Function FortniteGame.FortPlayerDBNORevivedParams.BreakParams
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerDBNORevivedParams_BreakParams final
{
public:
	class AFortPlayerPawn*                        _RevivedPlayer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            _RevivedBy;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerDBNORevivedParams_BreakParams) == 0x000008, "Wrong alignment on FortPlayerDBNORevivedParams_BreakParams");
static_assert(sizeof(FortPlayerDBNORevivedParams_BreakParams) == 0x000010, "Wrong size on FortPlayerDBNORevivedParams_BreakParams");
static_assert(offsetof(FortPlayerDBNORevivedParams_BreakParams, _RevivedPlayer) == 0x000000, "Member 'FortPlayerDBNORevivedParams_BreakParams::_RevivedPlayer' has a wrong offset!");
static_assert(offsetof(FortPlayerDBNORevivedParams_BreakParams, _RevivedBy) == 0x000008, "Member 'FortPlayerDBNORevivedParams_BreakParams::_RevivedBy' has a wrong offset!");

// Function FortniteGame.FortPlayerDBNORevivedParams.SetParams
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerDBNORevivedParams_SetParams final
{
public:
	class AFortPlayerPawn*                        _RevivedPlayer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            _RevivedBy;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortPlayerDBNORevivedParams*           ThisParam;                                         // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerDBNORevivedParams_SetParams) == 0x000008, "Wrong alignment on FortPlayerDBNORevivedParams_SetParams");
static_assert(sizeof(FortPlayerDBNORevivedParams_SetParams) == 0x000018, "Wrong size on FortPlayerDBNORevivedParams_SetParams");
static_assert(offsetof(FortPlayerDBNORevivedParams_SetParams, _RevivedPlayer) == 0x000000, "Member 'FortPlayerDBNORevivedParams_SetParams::_RevivedPlayer' has a wrong offset!");
static_assert(offsetof(FortPlayerDBNORevivedParams_SetParams, _RevivedBy) == 0x000008, "Member 'FortPlayerDBNORevivedParams_SetParams::_RevivedBy' has a wrong offset!");
static_assert(offsetof(FortPlayerDBNORevivedParams_SetParams, ThisParam) == 0x000010, "Member 'FortPlayerDBNORevivedParams_SetParams::ThisParam' has a wrong offset!");

// Function FortniteGame.FortDayPhaseChangeParams.BreakParams
// 0x0010 (0x0010 - 0x0000)
struct FortDayPhaseChangeParams_BreakParams final
{
public:
	class AFortTimeOfDayManager*                  _LightingAndFogManager;                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDayPhase                                 _NewDayPhase;                                      // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortDayPhaseChangeParams_BreakParams) == 0x000008, "Wrong alignment on FortDayPhaseChangeParams_BreakParams");
static_assert(sizeof(FortDayPhaseChangeParams_BreakParams) == 0x000010, "Wrong size on FortDayPhaseChangeParams_BreakParams");
static_assert(offsetof(FortDayPhaseChangeParams_BreakParams, _LightingAndFogManager) == 0x000000, "Member 'FortDayPhaseChangeParams_BreakParams::_LightingAndFogManager' has a wrong offset!");
static_assert(offsetof(FortDayPhaseChangeParams_BreakParams, _NewDayPhase) == 0x000008, "Member 'FortDayPhaseChangeParams_BreakParams::_NewDayPhase' has a wrong offset!");

// Function FortniteGame.FortDayPhaseChangeParams.SetParams
// 0x0018 (0x0018 - 0x0000)
struct FortDayPhaseChangeParams_SetParams final
{
public:
	class AFortTimeOfDayManager*                  _LightingAndFogManager;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDayPhase                                 _NewDayPhase;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortDayPhaseChangeParams*              ThisParam;                                         // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDayPhaseChangeParams_SetParams) == 0x000008, "Wrong alignment on FortDayPhaseChangeParams_SetParams");
static_assert(sizeof(FortDayPhaseChangeParams_SetParams) == 0x000018, "Wrong size on FortDayPhaseChangeParams_SetParams");
static_assert(offsetof(FortDayPhaseChangeParams_SetParams, _LightingAndFogManager) == 0x000000, "Member 'FortDayPhaseChangeParams_SetParams::_LightingAndFogManager' has a wrong offset!");
static_assert(offsetof(FortDayPhaseChangeParams_SetParams, _NewDayPhase) == 0x000008, "Member 'FortDayPhaseChangeParams_SetParams::_NewDayPhase' has a wrong offset!");
static_assert(offsetof(FortDayPhaseChangeParams_SetParams, ThisParam) == 0x000010, "Member 'FortDayPhaseChangeParams_SetParams::ThisParam' has a wrong offset!");

// Function FortniteGame.FortPlayerBuiltParams.BreakParams
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerBuiltParams_BreakParams final
{
public:
	class ABuildingActor*                         _Building;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuildingType                             _BuildingType;                                     // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerController*                  _Builder;                                          // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerBuiltParams_BreakParams) == 0x000008, "Wrong alignment on FortPlayerBuiltParams_BreakParams");
static_assert(sizeof(FortPlayerBuiltParams_BreakParams) == 0x000018, "Wrong size on FortPlayerBuiltParams_BreakParams");
static_assert(offsetof(FortPlayerBuiltParams_BreakParams, _Building) == 0x000000, "Member 'FortPlayerBuiltParams_BreakParams::_Building' has a wrong offset!");
static_assert(offsetof(FortPlayerBuiltParams_BreakParams, _BuildingType) == 0x000008, "Member 'FortPlayerBuiltParams_BreakParams::_BuildingType' has a wrong offset!");
static_assert(offsetof(FortPlayerBuiltParams_BreakParams, _Builder) == 0x000010, "Member 'FortPlayerBuiltParams_BreakParams::_Builder' has a wrong offset!");

// Function FortniteGame.FortPlayerBuiltParams.SetParams
// 0x0020 (0x0020 - 0x0000)
struct FortPlayerBuiltParams_SetParams final
{
public:
	class ABuildingActor*                         _Building;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuildingType                             _BuildingType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerController*                  _Builder;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortPlayerBuiltParams*                 ThisParam;                                         // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerBuiltParams_SetParams) == 0x000008, "Wrong alignment on FortPlayerBuiltParams_SetParams");
static_assert(sizeof(FortPlayerBuiltParams_SetParams) == 0x000020, "Wrong size on FortPlayerBuiltParams_SetParams");
static_assert(offsetof(FortPlayerBuiltParams_SetParams, _Building) == 0x000000, "Member 'FortPlayerBuiltParams_SetParams::_Building' has a wrong offset!");
static_assert(offsetof(FortPlayerBuiltParams_SetParams, _BuildingType) == 0x000008, "Member 'FortPlayerBuiltParams_SetParams::_BuildingType' has a wrong offset!");
static_assert(offsetof(FortPlayerBuiltParams_SetParams, _Builder) == 0x000010, "Member 'FortPlayerBuiltParams_SetParams::_Builder' has a wrong offset!");
static_assert(offsetof(FortPlayerBuiltParams_SetParams, ThisParam) == 0x000018, "Member 'FortPlayerBuiltParams_SetParams::ThisParam' has a wrong offset!");

// Function FortniteGame.FortBuildingDestroyedParams.BreakParams
// 0x0018 (0x0018 - 0x0000)
struct FortBuildingDestroyedParams_BreakParams final
{
public:
	class ABuildingActor*                         _Building;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuildingType                             _BuildingType;                                     // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            _Destroyer;                                        // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBuildingDestroyedParams_BreakParams) == 0x000008, "Wrong alignment on FortBuildingDestroyedParams_BreakParams");
static_assert(sizeof(FortBuildingDestroyedParams_BreakParams) == 0x000018, "Wrong size on FortBuildingDestroyedParams_BreakParams");
static_assert(offsetof(FortBuildingDestroyedParams_BreakParams, _Building) == 0x000000, "Member 'FortBuildingDestroyedParams_BreakParams::_Building' has a wrong offset!");
static_assert(offsetof(FortBuildingDestroyedParams_BreakParams, _BuildingType) == 0x000008, "Member 'FortBuildingDestroyedParams_BreakParams::_BuildingType' has a wrong offset!");
static_assert(offsetof(FortBuildingDestroyedParams_BreakParams, _Destroyer) == 0x000010, "Member 'FortBuildingDestroyedParams_BreakParams::_Destroyer' has a wrong offset!");

// Function FortniteGame.FortBuildingDestroyedParams.SetParams
// 0x0020 (0x0020 - 0x0000)
struct FortBuildingDestroyedParams_SetParams final
{
public:
	class ABuildingActor*                         _Building;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuildingType                             _BuildingType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            _Destroyer;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortBuildingDestroyedParams*           ThisParam;                                         // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBuildingDestroyedParams_SetParams) == 0x000008, "Wrong alignment on FortBuildingDestroyedParams_SetParams");
static_assert(sizeof(FortBuildingDestroyedParams_SetParams) == 0x000020, "Wrong size on FortBuildingDestroyedParams_SetParams");
static_assert(offsetof(FortBuildingDestroyedParams_SetParams, _Building) == 0x000000, "Member 'FortBuildingDestroyedParams_SetParams::_Building' has a wrong offset!");
static_assert(offsetof(FortBuildingDestroyedParams_SetParams, _BuildingType) == 0x000008, "Member 'FortBuildingDestroyedParams_SetParams::_BuildingType' has a wrong offset!");
static_assert(offsetof(FortBuildingDestroyedParams_SetParams, _Destroyer) == 0x000010, "Member 'FortBuildingDestroyedParams_SetParams::_Destroyer' has a wrong offset!");
static_assert(offsetof(FortBuildingDestroyedParams_SetParams, ThisParam) == 0x000018, "Member 'FortBuildingDestroyedParams_SetParams::ThisParam' has a wrong offset!");

// Function FortniteGame.FortBuildingDamagedParams.BreakParams
// 0x0020 (0x0020 - 0x0000)
struct FortBuildingDamagedParams_BreakParams final
{
public:
	class ABuildingActor*                         _Building;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuildingType                             _BuildingType;                                     // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            _DamagedBy;                                        // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _DamageAmount;                                     // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortBuildingDamagedParams_BreakParams) == 0x000008, "Wrong alignment on FortBuildingDamagedParams_BreakParams");
static_assert(sizeof(FortBuildingDamagedParams_BreakParams) == 0x000020, "Wrong size on FortBuildingDamagedParams_BreakParams");
static_assert(offsetof(FortBuildingDamagedParams_BreakParams, _Building) == 0x000000, "Member 'FortBuildingDamagedParams_BreakParams::_Building' has a wrong offset!");
static_assert(offsetof(FortBuildingDamagedParams_BreakParams, _BuildingType) == 0x000008, "Member 'FortBuildingDamagedParams_BreakParams::_BuildingType' has a wrong offset!");
static_assert(offsetof(FortBuildingDamagedParams_BreakParams, _DamagedBy) == 0x000010, "Member 'FortBuildingDamagedParams_BreakParams::_DamagedBy' has a wrong offset!");
static_assert(offsetof(FortBuildingDamagedParams_BreakParams, _DamageAmount) == 0x000018, "Member 'FortBuildingDamagedParams_BreakParams::_DamageAmount' has a wrong offset!");

// Function FortniteGame.FortBuildingDamagedParams.SetParams
// 0x0028 (0x0028 - 0x0000)
struct FortBuildingDamagedParams_SetParams final
{
public:
	class ABuildingActor*                         _Building;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuildingType                             _BuildingType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            _DamagedBy;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _DamageAmount;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortBuildingDamagedParams*             ThisParam;                                         // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBuildingDamagedParams_SetParams) == 0x000008, "Wrong alignment on FortBuildingDamagedParams_SetParams");
static_assert(sizeof(FortBuildingDamagedParams_SetParams) == 0x000028, "Wrong size on FortBuildingDamagedParams_SetParams");
static_assert(offsetof(FortBuildingDamagedParams_SetParams, _Building) == 0x000000, "Member 'FortBuildingDamagedParams_SetParams::_Building' has a wrong offset!");
static_assert(offsetof(FortBuildingDamagedParams_SetParams, _BuildingType) == 0x000008, "Member 'FortBuildingDamagedParams_SetParams::_BuildingType' has a wrong offset!");
static_assert(offsetof(FortBuildingDamagedParams_SetParams, _DamagedBy) == 0x000010, "Member 'FortBuildingDamagedParams_SetParams::_DamagedBy' has a wrong offset!");
static_assert(offsetof(FortBuildingDamagedParams_SetParams, _DamageAmount) == 0x000018, "Member 'FortBuildingDamagedParams_SetParams::_DamageAmount' has a wrong offset!");
static_assert(offsetof(FortBuildingDamagedParams_SetParams, ThisParam) == 0x000020, "Member 'FortBuildingDamagedParams_SetParams::ThisParam' has a wrong offset!");

// Function FortniteGame.FortMissionForceSuccessParams.BreakParams
// 0x0004 (0x0004 - 0x0000)
struct FortMissionForceSuccessParams_BreakParams final
{
public:
	float                                         _FractionCompleted;                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionForceSuccessParams_BreakParams) == 0x000004, "Wrong alignment on FortMissionForceSuccessParams_BreakParams");
static_assert(sizeof(FortMissionForceSuccessParams_BreakParams) == 0x000004, "Wrong size on FortMissionForceSuccessParams_BreakParams");
static_assert(offsetof(FortMissionForceSuccessParams_BreakParams, _FractionCompleted) == 0x000000, "Member 'FortMissionForceSuccessParams_BreakParams::_FractionCompleted' has a wrong offset!");

// Function FortniteGame.FortMissionForceSuccessParams.SetParams
// 0x0010 (0x0010 - 0x0000)
struct FortMissionForceSuccessParams_SetParams final
{
public:
	float                                         _FractionCompleted;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortMissionForceSuccessParams*         ThisParam;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionForceSuccessParams_SetParams) == 0x000008, "Wrong alignment on FortMissionForceSuccessParams_SetParams");
static_assert(sizeof(FortMissionForceSuccessParams_SetParams) == 0x000010, "Wrong size on FortMissionForceSuccessParams_SetParams");
static_assert(offsetof(FortMissionForceSuccessParams_SetParams, _FractionCompleted) == 0x000000, "Member 'FortMissionForceSuccessParams_SetParams::_FractionCompleted' has a wrong offset!");
static_assert(offsetof(FortMissionForceSuccessParams_SetParams, ThisParam) == 0x000008, "Member 'FortMissionForceSuccessParams_SetParams::ThisParam' has a wrong offset!");

// Function FortniteGame.FortMissionNeutralCompleteParams.BreakParams
// 0x0008 (0x0008 - 0x0000)
struct FortMissionNeutralCompleteParams_BreakParams final
{
public:
	class AFortMission*                           _NeutrallyCompletedMission;                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionNeutralCompleteParams_BreakParams) == 0x000008, "Wrong alignment on FortMissionNeutralCompleteParams_BreakParams");
static_assert(sizeof(FortMissionNeutralCompleteParams_BreakParams) == 0x000008, "Wrong size on FortMissionNeutralCompleteParams_BreakParams");
static_assert(offsetof(FortMissionNeutralCompleteParams_BreakParams, _NeutrallyCompletedMission) == 0x000000, "Member 'FortMissionNeutralCompleteParams_BreakParams::_NeutrallyCompletedMission' has a wrong offset!");

// Function FortniteGame.FortMissionNeutralCompleteParams.SetParams
// 0x0010 (0x0010 - 0x0000)
struct FortMissionNeutralCompleteParams_SetParams final
{
public:
	class AFortMission*                           _NeutrallyCompletedMission;                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortMissionNeutralCompleteParams*      ThisParam;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionNeutralCompleteParams_SetParams) == 0x000008, "Wrong alignment on FortMissionNeutralCompleteParams_SetParams");
static_assert(sizeof(FortMissionNeutralCompleteParams_SetParams) == 0x000010, "Wrong size on FortMissionNeutralCompleteParams_SetParams");
static_assert(offsetof(FortMissionNeutralCompleteParams_SetParams, _NeutrallyCompletedMission) == 0x000000, "Member 'FortMissionNeutralCompleteParams_SetParams::_NeutrallyCompletedMission' has a wrong offset!");
static_assert(offsetof(FortMissionNeutralCompleteParams_SetParams, ThisParam) == 0x000008, "Member 'FortMissionNeutralCompleteParams_SetParams::ThisParam' has a wrong offset!");

// Function FortniteGame.FortObjectiveSucceededParams.BreakParams
// 0x0008 (0x0008 - 0x0000)
struct FortObjectiveSucceededParams_BreakParams final
{
public:
	class AFortObjectiveBase*                     _SucceededObjective;                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveSucceededParams_BreakParams) == 0x000008, "Wrong alignment on FortObjectiveSucceededParams_BreakParams");
static_assert(sizeof(FortObjectiveSucceededParams_BreakParams) == 0x000008, "Wrong size on FortObjectiveSucceededParams_BreakParams");
static_assert(offsetof(FortObjectiveSucceededParams_BreakParams, _SucceededObjective) == 0x000000, "Member 'FortObjectiveSucceededParams_BreakParams::_SucceededObjective' has a wrong offset!");

// Function FortniteGame.FortObjectiveSucceededParams.SetParams
// 0x0010 (0x0010 - 0x0000)
struct FortObjectiveSucceededParams_SetParams final
{
public:
	class AFortObjectiveBase*                     _SucceededObjective;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortObjectiveSucceededParams*          ThisParam;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveSucceededParams_SetParams) == 0x000008, "Wrong alignment on FortObjectiveSucceededParams_SetParams");
static_assert(sizeof(FortObjectiveSucceededParams_SetParams) == 0x000010, "Wrong size on FortObjectiveSucceededParams_SetParams");
static_assert(offsetof(FortObjectiveSucceededParams_SetParams, _SucceededObjective) == 0x000000, "Member 'FortObjectiveSucceededParams_SetParams::_SucceededObjective' has a wrong offset!");
static_assert(offsetof(FortObjectiveSucceededParams_SetParams, ThisParam) == 0x000008, "Member 'FortObjectiveSucceededParams_SetParams::ThisParam' has a wrong offset!");

// Function FortniteGame.FortObjectiveFailedParams.BreakParams
// 0x0008 (0x0008 - 0x0000)
struct FortObjectiveFailedParams_BreakParams final
{
public:
	class AFortObjectiveBase*                     _FailedObjective;                                  // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveFailedParams_BreakParams) == 0x000008, "Wrong alignment on FortObjectiveFailedParams_BreakParams");
static_assert(sizeof(FortObjectiveFailedParams_BreakParams) == 0x000008, "Wrong size on FortObjectiveFailedParams_BreakParams");
static_assert(offsetof(FortObjectiveFailedParams_BreakParams, _FailedObjective) == 0x000000, "Member 'FortObjectiveFailedParams_BreakParams::_FailedObjective' has a wrong offset!");

// Function FortniteGame.FortObjectiveFailedParams.SetParams
// 0x0010 (0x0010 - 0x0000)
struct FortObjectiveFailedParams_SetParams final
{
public:
	class AFortObjectiveBase*                     _FailedObjective;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortObjectiveFailedParams*             ThisParam;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveFailedParams_SetParams) == 0x000008, "Wrong alignment on FortObjectiveFailedParams_SetParams");
static_assert(sizeof(FortObjectiveFailedParams_SetParams) == 0x000010, "Wrong size on FortObjectiveFailedParams_SetParams");
static_assert(offsetof(FortObjectiveFailedParams_SetParams, _FailedObjective) == 0x000000, "Member 'FortObjectiveFailedParams_SetParams::_FailedObjective' has a wrong offset!");
static_assert(offsetof(FortObjectiveFailedParams_SetParams, ThisParam) == 0x000008, "Member 'FortObjectiveFailedParams_SetParams::ThisParam' has a wrong offset!");

// Function FortniteGame.FortToggledCursorModeParams.BreakParams
// 0x0010 (0x0010 - 0x0000)
struct FortToggledCursorModeParams_BreakParams final
{
public:
	class AFortPlayerController*                  _PlayerThatToggledCursorMode;                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InCursorMode;                                      // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortToggledCursorModeParams_BreakParams) == 0x000008, "Wrong alignment on FortToggledCursorModeParams_BreakParams");
static_assert(sizeof(FortToggledCursorModeParams_BreakParams) == 0x000010, "Wrong size on FortToggledCursorModeParams_BreakParams");
static_assert(offsetof(FortToggledCursorModeParams_BreakParams, _PlayerThatToggledCursorMode) == 0x000000, "Member 'FortToggledCursorModeParams_BreakParams::_PlayerThatToggledCursorMode' has a wrong offset!");
static_assert(offsetof(FortToggledCursorModeParams_BreakParams, InCursorMode) == 0x000008, "Member 'FortToggledCursorModeParams_BreakParams::InCursorMode' has a wrong offset!");

// Function FortniteGame.FortToggledCursorModeParams.SetParams
// 0x0018 (0x0018 - 0x0000)
struct FortToggledCursorModeParams_SetParams final
{
public:
	class AFortPlayerController*                  _PlayerThatToggledCursorMode;                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InCursorMode;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortToggledCursorModeParams*           ThisParam;                                         // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortToggledCursorModeParams_SetParams) == 0x000008, "Wrong alignment on FortToggledCursorModeParams_SetParams");
static_assert(sizeof(FortToggledCursorModeParams_SetParams) == 0x000018, "Wrong size on FortToggledCursorModeParams_SetParams");
static_assert(offsetof(FortToggledCursorModeParams_SetParams, _PlayerThatToggledCursorMode) == 0x000000, "Member 'FortToggledCursorModeParams_SetParams::_PlayerThatToggledCursorMode' has a wrong offset!");
static_assert(offsetof(FortToggledCursorModeParams_SetParams, InCursorMode) == 0x000008, "Member 'FortToggledCursorModeParams_SetParams::InCursorMode' has a wrong offset!");
static_assert(offsetof(FortToggledCursorModeParams_SetParams, ThisParam) == 0x000010, "Member 'FortToggledCursorModeParams_SetParams::ThisParam' has a wrong offset!");

// Function FortniteGame.FortStartLeavingZoneParams.BreakParams
// 0x0008 (0x0008 - 0x0000)
struct FortStartLeavingZoneParams_BreakParams final
{
public:
	class AFortPlayerPawn*                        _PlayerRequestingLeaving;                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortStartLeavingZoneParams_BreakParams) == 0x000008, "Wrong alignment on FortStartLeavingZoneParams_BreakParams");
static_assert(sizeof(FortStartLeavingZoneParams_BreakParams) == 0x000008, "Wrong size on FortStartLeavingZoneParams_BreakParams");
static_assert(offsetof(FortStartLeavingZoneParams_BreakParams, _PlayerRequestingLeaving) == 0x000000, "Member 'FortStartLeavingZoneParams_BreakParams::_PlayerRequestingLeaving' has a wrong offset!");

// Function FortniteGame.PartyDisplayManager.BeginLoadingAssetsForItem
// 0x0018 (0x0018 - 0x0000)
struct PartyDisplayManager_BeginLoadingAssetsForItem final
{
public:
	class UFortItem*                              ItemToView;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UObject>>         AssetsToLoad;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyDisplayManager_BeginLoadingAssetsForItem) == 0x000008, "Wrong alignment on PartyDisplayManager_BeginLoadingAssetsForItem");
static_assert(sizeof(PartyDisplayManager_BeginLoadingAssetsForItem) == 0x000018, "Wrong size on PartyDisplayManager_BeginLoadingAssetsForItem");
static_assert(offsetof(PartyDisplayManager_BeginLoadingAssetsForItem, ItemToView) == 0x000000, "Member 'PartyDisplayManager_BeginLoadingAssetsForItem::ItemToView' has a wrong offset!");
static_assert(offsetof(PartyDisplayManager_BeginLoadingAssetsForItem, AssetsToLoad) == 0x000008, "Member 'PartyDisplayManager_BeginLoadingAssetsForItem::AssetsToLoad' has a wrong offset!");

// Function FortniteGame.PartyDisplayManager.GetHeroPlayerPawnForCurrentDisplayedItem
// 0x0008 (0x0008 - 0x0000)
struct PartyDisplayManager_GetHeroPlayerPawnForCurrentDisplayedItem final
{
public:
	class AFortPlayerPawn*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyDisplayManager_GetHeroPlayerPawnForCurrentDisplayedItem) == 0x000008, "Wrong alignment on PartyDisplayManager_GetHeroPlayerPawnForCurrentDisplayedItem");
static_assert(sizeof(PartyDisplayManager_GetHeroPlayerPawnForCurrentDisplayedItem) == 0x000008, "Wrong size on PartyDisplayManager_GetHeroPlayerPawnForCurrentDisplayedItem");
static_assert(offsetof(PartyDisplayManager_GetHeroPlayerPawnForCurrentDisplayedItem, ReturnValue) == 0x000000, "Member 'PartyDisplayManager_GetHeroPlayerPawnForCurrentDisplayedItem::ReturnValue' has a wrong offset!");

// Function FortniteGame.PartyDisplayManager.GetMeshForCurrentDisplayedItem
// 0x0008 (0x0008 - 0x0000)
struct PartyDisplayManager_GetMeshForCurrentDisplayedItem final
{
public:
	class UMeshComponent*                         OutDisplayedMesh;                                  // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyDisplayManager_GetMeshForCurrentDisplayedItem) == 0x000008, "Wrong alignment on PartyDisplayManager_GetMeshForCurrentDisplayedItem");
static_assert(sizeof(PartyDisplayManager_GetMeshForCurrentDisplayedItem) == 0x000008, "Wrong size on PartyDisplayManager_GetMeshForCurrentDisplayedItem");
static_assert(offsetof(PartyDisplayManager_GetMeshForCurrentDisplayedItem, OutDisplayedMesh) == 0x000000, "Member 'PartyDisplayManager_GetMeshForCurrentDisplayedItem::OutDisplayedMesh' has a wrong offset!");

// Function FortniteGame.PartyDisplayManager.HandleLoadingAssetsForItemCompleted
// 0x0018 (0x0018 - 0x0000)
struct PartyDisplayManager_HandleLoadingAssetsForItemCompleted final
{
public:
	class UFortItem*                              ItemWhoseAssetsWereLoaded;                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        LoadedAssets;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyDisplayManager_HandleLoadingAssetsForItemCompleted) == 0x000008, "Wrong alignment on PartyDisplayManager_HandleLoadingAssetsForItemCompleted");
static_assert(sizeof(PartyDisplayManager_HandleLoadingAssetsForItemCompleted) == 0x000018, "Wrong size on PartyDisplayManager_HandleLoadingAssetsForItemCompleted");
static_assert(offsetof(PartyDisplayManager_HandleLoadingAssetsForItemCompleted, ItemWhoseAssetsWereLoaded) == 0x000000, "Member 'PartyDisplayManager_HandleLoadingAssetsForItemCompleted::ItemWhoseAssetsWereLoaded' has a wrong offset!");
static_assert(offsetof(PartyDisplayManager_HandleLoadingAssetsForItemCompleted, LoadedAssets) == 0x000008, "Member 'PartyDisplayManager_HandleLoadingAssetsForItemCompleted::LoadedAssets' has a wrong offset!");

// Function FortniteGame.PartyDisplayManager.OnPawnBeginCursorOver
// 0x0008 (0x0008 - 0x0000)
struct PartyDisplayManager_OnPawnBeginCursorOver final
{
public:
	class AActor*                                 TouchedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyDisplayManager_OnPawnBeginCursorOver) == 0x000008, "Wrong alignment on PartyDisplayManager_OnPawnBeginCursorOver");
static_assert(sizeof(PartyDisplayManager_OnPawnBeginCursorOver) == 0x000008, "Wrong size on PartyDisplayManager_OnPawnBeginCursorOver");
static_assert(offsetof(PartyDisplayManager_OnPawnBeginCursorOver, TouchedActor) == 0x000000, "Member 'PartyDisplayManager_OnPawnBeginCursorOver::TouchedActor' has a wrong offset!");

// Function FortniteGame.PartyDisplayManager.OnPawnClicked
// 0x0020 (0x0020 - 0x0000)
struct PartyDisplayManager_OnPawnClicked final
{
public:
	class AActor*                                 TouchedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   ButtonPressed;                                     // 0x0008(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyDisplayManager_OnPawnClicked) == 0x000008, "Wrong alignment on PartyDisplayManager_OnPawnClicked");
static_assert(sizeof(PartyDisplayManager_OnPawnClicked) == 0x000020, "Wrong size on PartyDisplayManager_OnPawnClicked");
static_assert(offsetof(PartyDisplayManager_OnPawnClicked, TouchedActor) == 0x000000, "Member 'PartyDisplayManager_OnPawnClicked::TouchedActor' has a wrong offset!");
static_assert(offsetof(PartyDisplayManager_OnPawnClicked, ButtonPressed) == 0x000008, "Member 'PartyDisplayManager_OnPawnClicked::ButtonPressed' has a wrong offset!");

// Function FortniteGame.PartyDisplayManager.OnPawnEndCursorOver
// 0x0008 (0x0008 - 0x0000)
struct PartyDisplayManager_OnPawnEndCursorOver final
{
public:
	class AActor*                                 TouchedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyDisplayManager_OnPawnEndCursorOver) == 0x000008, "Wrong alignment on PartyDisplayManager_OnPawnEndCursorOver");
static_assert(sizeof(PartyDisplayManager_OnPawnEndCursorOver) == 0x000008, "Wrong size on PartyDisplayManager_OnPawnEndCursorOver");
static_assert(offsetof(PartyDisplayManager_OnPawnEndCursorOver, TouchedActor) == 0x000000, "Member 'PartyDisplayManager_OnPawnEndCursorOver::TouchedActor' has a wrong offset!");

// Function FortniteGame.PartyDisplayManager.ShowItem
// 0x0008 (0x0008 - 0x0000)
struct PartyDisplayManager_ShowItem final
{
public:
	class UFortItem*                              ItemToView;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PartyDisplayManager_ShowItem) == 0x000008, "Wrong alignment on PartyDisplayManager_ShowItem");
static_assert(sizeof(PartyDisplayManager_ShowItem) == 0x000008, "Wrong size on PartyDisplayManager_ShowItem");
static_assert(offsetof(PartyDisplayManager_ShowItem, ItemToView) == 0x000000, "Member 'PartyDisplayManager_ShowItem::ItemToView' has a wrong offset!");

// Function FortniteGame.WorldMapPin.SetTheaterId
// 0x0010 (0x0010 - 0x0000)
struct WorldMapPin_SetTheaterId final
{
public:
	class FString                                 NewId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldMapPin_SetTheaterId) == 0x000008, "Wrong alignment on WorldMapPin_SetTheaterId");
static_assert(sizeof(WorldMapPin_SetTheaterId) == 0x000010, "Wrong size on WorldMapPin_SetTheaterId");
static_assert(offsetof(WorldMapPin_SetTheaterId, NewId) == 0x000000, "Member 'WorldMapPin_SetTheaterId::NewId' has a wrong offset!");

}

