#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GCN_MiniBoss

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function GCN_MiniBoss.GCN_MiniBoss_C.ExecuteUbergraph_GCN_MiniBoss
// 0x0004 (0x0004 - 0x0000)
struct GCN_MiniBoss_C_ExecuteUbergraph_GCN_MiniBoss final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GCN_MiniBoss_C_ExecuteUbergraph_GCN_MiniBoss) == 0x000004, "Wrong alignment on GCN_MiniBoss_C_ExecuteUbergraph_GCN_MiniBoss");
static_assert(sizeof(GCN_MiniBoss_C_ExecuteUbergraph_GCN_MiniBoss) == 0x000004, "Wrong size on GCN_MiniBoss_C_ExecuteUbergraph_GCN_MiniBoss");
static_assert(offsetof(GCN_MiniBoss_C_ExecuteUbergraph_GCN_MiniBoss, EntryPoint) == 0x000000, "Member 'GCN_MiniBoss_C_ExecuteUbergraph_GCN_MiniBoss::EntryPoint' has a wrong offset!");

// Function GCN_MiniBoss.GCN_MiniBoss_C.OnRemove
// 0x00C8 (0x00C8 - 0x0000)
struct GCN_MiniBoss_C_OnRemove final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00B8)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x00C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GCN_MiniBoss_C_OnRemove) == 0x000008, "Wrong alignment on GCN_MiniBoss_C_OnRemove");
static_assert(sizeof(GCN_MiniBoss_C_OnRemove) == 0x0000C8, "Wrong size on GCN_MiniBoss_C_OnRemove");
static_assert(offsetof(GCN_MiniBoss_C_OnRemove, MyTarget) == 0x000000, "Member 'GCN_MiniBoss_C_OnRemove::MyTarget' has a wrong offset!");
static_assert(offsetof(GCN_MiniBoss_C_OnRemove, Parameters) == 0x000008, "Member 'GCN_MiniBoss_C_OnRemove::Parameters' has a wrong offset!");
static_assert(offsetof(GCN_MiniBoss_C_OnRemove, ReturnValue) == 0x0000C0, "Member 'GCN_MiniBoss_C_OnRemove::ReturnValue' has a wrong offset!");

// Function GCN_MiniBoss.GCN_MiniBoss_C.OnActive
// 0x00F8 (0x00F8 - 0x0000)
struct GCN_MiniBoss_C_OnActive final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00B8)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x00C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FParticleSysParam>              K2Node_MakeArray_Array;                            // 0x00C8(0x0010)(ZeroConstructor, ReferenceParm)
	class AEnemyPawn_Parent_C*                    K2Node_DynamicCast_AsEnemy_Pawn_Parent;            // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00E4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_SpawnParticleSystemOnCharacterMesh_PSComponentReference; // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GCN_MiniBoss_C_OnActive) == 0x000008, "Wrong alignment on GCN_MiniBoss_C_OnActive");
static_assert(sizeof(GCN_MiniBoss_C_OnActive) == 0x0000F8, "Wrong size on GCN_MiniBoss_C_OnActive");
static_assert(offsetof(GCN_MiniBoss_C_OnActive, MyTarget) == 0x000000, "Member 'GCN_MiniBoss_C_OnActive::MyTarget' has a wrong offset!");
static_assert(offsetof(GCN_MiniBoss_C_OnActive, Parameters) == 0x000008, "Member 'GCN_MiniBoss_C_OnActive::Parameters' has a wrong offset!");
static_assert(offsetof(GCN_MiniBoss_C_OnActive, ReturnValue) == 0x0000C0, "Member 'GCN_MiniBoss_C_OnActive::ReturnValue' has a wrong offset!");
static_assert(offsetof(GCN_MiniBoss_C_OnActive, K2Node_MakeArray_Array) == 0x0000C8, "Member 'GCN_MiniBoss_C_OnActive::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(GCN_MiniBoss_C_OnActive, K2Node_DynamicCast_AsEnemy_Pawn_Parent) == 0x0000D8, "Member 'GCN_MiniBoss_C_OnActive::K2Node_DynamicCast_AsEnemy_Pawn_Parent' has a wrong offset!");
static_assert(offsetof(GCN_MiniBoss_C_OnActive, K2Node_DynamicCast_bSuccess) == 0x0000E0, "Member 'GCN_MiniBoss_C_OnActive::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GCN_MiniBoss_C_OnActive, CallFunc_MakeVector_ReturnValue) == 0x0000E4, "Member 'GCN_MiniBoss_C_OnActive::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GCN_MiniBoss_C_OnActive, CallFunc_SpawnParticleSystemOnCharacterMesh_PSComponentReference) == 0x0000F0, "Member 'GCN_MiniBoss_C_OnActive::CallFunc_SpawnParticleSystemOnCharacterMesh_PSComponentReference' has a wrong offset!");

// Function GCN_MiniBoss.GCN_MiniBoss_C.OverwriteElementalParticles
// 0x0088 (0x0088 - 0x0000)
struct GCN_MiniBoss_C_OverwriteElementalParticles final
{
public:
	class AEnemyPawn_Parent_C*                    Enemy_Pawn_Parent;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 TagName;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	bool                                          TagWasFound;                                       // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_MakeLiteralString_ReturnValue;            // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Select_Default;                             // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UParticleSystem*                        CallFunc_Map_Find_Value;                           // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Map_Contains_ReturnValue;                 // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GCN_MiniBoss_C_OverwriteElementalParticles) == 0x000008, "Wrong alignment on GCN_MiniBoss_C_OverwriteElementalParticles");
static_assert(sizeof(GCN_MiniBoss_C_OverwriteElementalParticles) == 0x000088, "Wrong size on GCN_MiniBoss_C_OverwriteElementalParticles");
static_assert(offsetof(GCN_MiniBoss_C_OverwriteElementalParticles, Enemy_Pawn_Parent) == 0x000000, "Member 'GCN_MiniBoss_C_OverwriteElementalParticles::Enemy_Pawn_Parent' has a wrong offset!");
static_assert(offsetof(GCN_MiniBoss_C_OverwriteElementalParticles, TagName) == 0x000008, "Member 'GCN_MiniBoss_C_OverwriteElementalParticles::TagName' has a wrong offset!");
static_assert(offsetof(GCN_MiniBoss_C_OverwriteElementalParticles, TagWasFound) == 0x000018, "Member 'GCN_MiniBoss_C_OverwriteElementalParticles::TagWasFound' has a wrong offset!");
static_assert(offsetof(GCN_MiniBoss_C_OverwriteElementalParticles, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'GCN_MiniBoss_C_OverwriteElementalParticles::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GCN_MiniBoss_C_OverwriteElementalParticles, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'GCN_MiniBoss_C_OverwriteElementalParticles::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GCN_MiniBoss_C_OverwriteElementalParticles, CallFunc_Array_Length_ReturnValue) == 0x000024, "Member 'GCN_MiniBoss_C_OverwriteElementalParticles::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GCN_MiniBoss_C_OverwriteElementalParticles, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'GCN_MiniBoss_C_OverwriteElementalParticles::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GCN_MiniBoss_C_OverwriteElementalParticles, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'GCN_MiniBoss_C_OverwriteElementalParticles::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GCN_MiniBoss_C_OverwriteElementalParticles, Temp_bool_True_if_break_was_hit_Variable) == 0x00002A, "Member 'GCN_MiniBoss_C_OverwriteElementalParticles::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(GCN_MiniBoss_C_OverwriteElementalParticles, Temp_int_Array_Index_Variable) == 0x00002C, "Member 'GCN_MiniBoss_C_OverwriteElementalParticles::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GCN_MiniBoss_C_OverwriteElementalParticles, CallFunc_Array_Get_Item) == 0x000030, "Member 'GCN_MiniBoss_C_OverwriteElementalParticles::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GCN_MiniBoss_C_OverwriteElementalParticles, CallFunc_Conv_NameToString_ReturnValue) == 0x000038, "Member 'GCN_MiniBoss_C_OverwriteElementalParticles::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(GCN_MiniBoss_C_OverwriteElementalParticles, CallFunc_Not_PreBool_ReturnValue) == 0x000048, "Member 'GCN_MiniBoss_C_OverwriteElementalParticles::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GCN_MiniBoss_C_OverwriteElementalParticles, CallFunc_BooleanAND_ReturnValue) == 0x000049, "Member 'GCN_MiniBoss_C_OverwriteElementalParticles::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(GCN_MiniBoss_C_OverwriteElementalParticles, Temp_bool_Variable) == 0x00004A, "Member 'GCN_MiniBoss_C_OverwriteElementalParticles::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(GCN_MiniBoss_C_OverwriteElementalParticles, CallFunc_MakeLiteralString_ReturnValue) == 0x000050, "Member 'GCN_MiniBoss_C_OverwriteElementalParticles::CallFunc_MakeLiteralString_ReturnValue' has a wrong offset!");
static_assert(offsetof(GCN_MiniBoss_C_OverwriteElementalParticles, CallFunc_IsDedicatedServer_ReturnValue) == 0x000060, "Member 'GCN_MiniBoss_C_OverwriteElementalParticles::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(GCN_MiniBoss_C_OverwriteElementalParticles, K2Node_Select_Default) == 0x000068, "Member 'GCN_MiniBoss_C_OverwriteElementalParticles::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GCN_MiniBoss_C_OverwriteElementalParticles, CallFunc_Map_Find_Value) == 0x000078, "Member 'GCN_MiniBoss_C_OverwriteElementalParticles::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(GCN_MiniBoss_C_OverwriteElementalParticles, CallFunc_Map_Find_ReturnValue) == 0x000080, "Member 'GCN_MiniBoss_C_OverwriteElementalParticles::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(GCN_MiniBoss_C_OverwriteElementalParticles, CallFunc_Map_Contains_ReturnValue) == 0x000081, "Member 'GCN_MiniBoss_C_OverwriteElementalParticles::CallFunc_Map_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(GCN_MiniBoss_C_OverwriteElementalParticles, CallFunc_IsValid_ReturnValue2) == 0x000082, "Member 'GCN_MiniBoss_C_OverwriteElementalParticles::CallFunc_IsValid_ReturnValue2' has a wrong offset!");

}

