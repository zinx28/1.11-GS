#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ItemDetailsStackCounter

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "FortniteUI_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass ItemDetailsStackCounter.ItemDetailsStackCounter_C
// 0x0570 (0x07C8 - 0x0258)
class UItemDetailsStackCounter_C final : public UFortItemDetailElementWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0258(0x0008)(Transient, DuplicateTransient)
	class USizeBox*                               _SizeBox_;                                         // 0x0260(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonBorder*                          BorderBase;                                        // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       TextCounter;                                       // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FFortMultiSizeBrush                    MultiSizeBase;                                     // 0x0278(0x02D0)(Edit, BlueprintVisible)
	struct FFortMultiSizeFont                     MultiSizeFont;                                     // 0x0548(0x0210)(Edit, BlueprintVisible)
	struct FFortMultiSizeMargin                   MultiSizeMargin;                                   // 0x0758(0x0060)(Edit, BlueprintVisible, NoDestructor)
	EFortBrushSize                                Brush_Size;                                        // 0x07B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B9[0x3];                                      // 0x07B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Count;                                             // 0x07BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AlwaysVisible;                                     // 0x07C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          TruncateValue;                                     // 0x07C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)

public:
	void ExecuteUbergraph_ItemDetailsStackCounter(int32 EntryPoint);
	void HandleOnItemChanged(bool bItemChanged, bool bAmmoChanged, bool bIngredientsChanged);
	void HandlePostDifferentItemToDetailSet();
	void HandlePreDifferentItemToDetailSet();
	void Construct();
	void PreConstruct(bool IsDesignTime);
	void Update_Stack_Count();
	void Refresh_Visibility();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ItemDetailsStackCounter_C">();
	}
	static class UItemDetailsStackCounter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItemDetailsStackCounter_C>();
	}
};
static_assert(alignof(UItemDetailsStackCounter_C) == 0x000008, "Wrong alignment on UItemDetailsStackCounter_C");
static_assert(sizeof(UItemDetailsStackCounter_C) == 0x0007C8, "Wrong size on UItemDetailsStackCounter_C");
static_assert(offsetof(UItemDetailsStackCounter_C, UberGraphFrame) == 0x000258, "Member 'UItemDetailsStackCounter_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UItemDetailsStackCounter_C, _SizeBox_) == 0x000260, "Member 'UItemDetailsStackCounter_C::_SizeBox_' has a wrong offset!");
static_assert(offsetof(UItemDetailsStackCounter_C, BorderBase) == 0x000268, "Member 'UItemDetailsStackCounter_C::BorderBase' has a wrong offset!");
static_assert(offsetof(UItemDetailsStackCounter_C, TextCounter) == 0x000270, "Member 'UItemDetailsStackCounter_C::TextCounter' has a wrong offset!");
static_assert(offsetof(UItemDetailsStackCounter_C, MultiSizeBase) == 0x000278, "Member 'UItemDetailsStackCounter_C::MultiSizeBase' has a wrong offset!");
static_assert(offsetof(UItemDetailsStackCounter_C, MultiSizeFont) == 0x000548, "Member 'UItemDetailsStackCounter_C::MultiSizeFont' has a wrong offset!");
static_assert(offsetof(UItemDetailsStackCounter_C, MultiSizeMargin) == 0x000758, "Member 'UItemDetailsStackCounter_C::MultiSizeMargin' has a wrong offset!");
static_assert(offsetof(UItemDetailsStackCounter_C, Brush_Size) == 0x0007B8, "Member 'UItemDetailsStackCounter_C::Brush_Size' has a wrong offset!");
static_assert(offsetof(UItemDetailsStackCounter_C, Count) == 0x0007BC, "Member 'UItemDetailsStackCounter_C::Count' has a wrong offset!");
static_assert(offsetof(UItemDetailsStackCounter_C, AlwaysVisible) == 0x0007C0, "Member 'UItemDetailsStackCounter_C::AlwaysVisible' has a wrong offset!");
static_assert(offsetof(UItemDetailsStackCounter_C, TruncateValue) == 0x0007C1, "Member 'UItemDetailsStackCounter_C::TruncateValue' has a wrong offset!");

}

