#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ItemManagementEquipSlot

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function ItemManagementEquipSlot.ItemManagementEquipSlot_C.ExecuteUbergraph_ItemManagementEquipSlot
// 0x00B0 (0x00B0 - 0x0000)
struct ItemManagementEquipSlot_C_ExecuteUbergraph_ItemManagementEquipSlot final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable2;                               // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortGlobalUIContext*                   CallFunc_GetContext_ReturnValue;                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUsingGamepad_ReturnValue;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFocusEvent                            K2Node_Event_InFocusEvent;                         // 0x0014(0x0008)(NoDestructor)
	bool                                          K2Node_ComponentBoundEvent_bUsingGamepad;          // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSelected_Selected;                      // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          K2Node_Event_PointerEvent;                         // 0x0020(0x0070)()
	class UDragDropOperation*                     K2Node_Event_Operation;                            // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UItemManagementInventoryPanel_C*        K2Node_DynamicCast_AsItem_Management_Inventory_Panel; // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ItemManagementEquipSlot_C_ExecuteUbergraph_ItemManagementEquipSlot) == 0x000008, "Wrong alignment on ItemManagementEquipSlot_C_ExecuteUbergraph_ItemManagementEquipSlot");
static_assert(sizeof(ItemManagementEquipSlot_C_ExecuteUbergraph_ItemManagementEquipSlot) == 0x0000B0, "Wrong size on ItemManagementEquipSlot_C_ExecuteUbergraph_ItemManagementEquipSlot");
static_assert(offsetof(ItemManagementEquipSlot_C_ExecuteUbergraph_ItemManagementEquipSlot, EntryPoint) == 0x000000, "Member 'ItemManagementEquipSlot_C_ExecuteUbergraph_ItemManagementEquipSlot::EntryPoint' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_ExecuteUbergraph_ItemManagementEquipSlot, Temp_byte_Variable) == 0x000004, "Member 'ItemManagementEquipSlot_C_ExecuteUbergraph_ItemManagementEquipSlot::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_ExecuteUbergraph_ItemManagementEquipSlot, Temp_byte_Variable2) == 0x000005, "Member 'ItemManagementEquipSlot_C_ExecuteUbergraph_ItemManagementEquipSlot::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_ExecuteUbergraph_ItemManagementEquipSlot, CallFunc_GetContext_ReturnValue) == 0x000008, "Member 'ItemManagementEquipSlot_C_ExecuteUbergraph_ItemManagementEquipSlot::CallFunc_GetContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_ExecuteUbergraph_ItemManagementEquipSlot, CallFunc_IsUsingGamepad_ReturnValue) == 0x000010, "Member 'ItemManagementEquipSlot_C_ExecuteUbergraph_ItemManagementEquipSlot::CallFunc_IsUsingGamepad_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_ExecuteUbergraph_ItemManagementEquipSlot, K2Node_Event_InFocusEvent) == 0x000014, "Member 'ItemManagementEquipSlot_C_ExecuteUbergraph_ItemManagementEquipSlot::K2Node_Event_InFocusEvent' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_ExecuteUbergraph_ItemManagementEquipSlot, K2Node_ComponentBoundEvent_bUsingGamepad) == 0x00001C, "Member 'ItemManagementEquipSlot_C_ExecuteUbergraph_ItemManagementEquipSlot::K2Node_ComponentBoundEvent_bUsingGamepad' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_ExecuteUbergraph_ItemManagementEquipSlot, CallFunc_IsSelected_Selected) == 0x00001D, "Member 'ItemManagementEquipSlot_C_ExecuteUbergraph_ItemManagementEquipSlot::CallFunc_IsSelected_Selected' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_ExecuteUbergraph_ItemManagementEquipSlot, CallFunc_BooleanAND_ReturnValue) == 0x00001E, "Member 'ItemManagementEquipSlot_C_ExecuteUbergraph_ItemManagementEquipSlot::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_ExecuteUbergraph_ItemManagementEquipSlot, Temp_bool_Variable) == 0x00001F, "Member 'ItemManagementEquipSlot_C_ExecuteUbergraph_ItemManagementEquipSlot::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_ExecuteUbergraph_ItemManagementEquipSlot, K2Node_Event_PointerEvent) == 0x000020, "Member 'ItemManagementEquipSlot_C_ExecuteUbergraph_ItemManagementEquipSlot::K2Node_Event_PointerEvent' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_ExecuteUbergraph_ItemManagementEquipSlot, K2Node_Event_Operation) == 0x000090, "Member 'ItemManagementEquipSlot_C_ExecuteUbergraph_ItemManagementEquipSlot::K2Node_Event_Operation' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_ExecuteUbergraph_ItemManagementEquipSlot, K2Node_Select_Default) == 0x000098, "Member 'ItemManagementEquipSlot_C_ExecuteUbergraph_ItemManagementEquipSlot::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_ExecuteUbergraph_ItemManagementEquipSlot, K2Node_DynamicCast_AsItem_Management_Inventory_Panel) == 0x0000A0, "Member 'ItemManagementEquipSlot_C_ExecuteUbergraph_ItemManagementEquipSlot::K2Node_DynamicCast_AsItem_Management_Inventory_Panel' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_ExecuteUbergraph_ItemManagementEquipSlot, K2Node_DynamicCast_bSuccess) == 0x0000A8, "Member 'ItemManagementEquipSlot_C_ExecuteUbergraph_ItemManagementEquipSlot::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function ItemManagementEquipSlot.ItemManagementEquipSlot_C.OnDragCancelled
// 0x0078 (0x0078 - 0x0000)
struct ItemManagementEquipSlot_C_OnDragCancelled final
{
public:
	struct FPointerEvent                          PointerEvent;                                      // 0x0000(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UDragDropOperation*                     Operation;                                         // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ItemManagementEquipSlot_C_OnDragCancelled) == 0x000008, "Wrong alignment on ItemManagementEquipSlot_C_OnDragCancelled");
static_assert(sizeof(ItemManagementEquipSlot_C_OnDragCancelled) == 0x000078, "Wrong size on ItemManagementEquipSlot_C_OnDragCancelled");
static_assert(offsetof(ItemManagementEquipSlot_C_OnDragCancelled, PointerEvent) == 0x000000, "Member 'ItemManagementEquipSlot_C_OnDragCancelled::PointerEvent' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_OnDragCancelled, Operation) == 0x000070, "Member 'ItemManagementEquipSlot_C_OnDragCancelled::Operation' has a wrong offset!");

// Function ItemManagementEquipSlot.ItemManagementEquipSlot_C.BndEvt__InputActionWidget_K2Node_ComponentBoundEvent_6_OnInputMethodChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct ItemManagementEquipSlot_C_BndEvt__InputActionWidget_K2Node_ComponentBoundEvent_6_OnInputMethodChanged__DelegateSignature final
{
public:
	bool                                          bUsingGamepad;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ItemManagementEquipSlot_C_BndEvt__InputActionWidget_K2Node_ComponentBoundEvent_6_OnInputMethodChanged__DelegateSignature) == 0x000001, "Wrong alignment on ItemManagementEquipSlot_C_BndEvt__InputActionWidget_K2Node_ComponentBoundEvent_6_OnInputMethodChanged__DelegateSignature");
static_assert(sizeof(ItemManagementEquipSlot_C_BndEvt__InputActionWidget_K2Node_ComponentBoundEvent_6_OnInputMethodChanged__DelegateSignature) == 0x000001, "Wrong size on ItemManagementEquipSlot_C_BndEvt__InputActionWidget_K2Node_ComponentBoundEvent_6_OnInputMethodChanged__DelegateSignature");
static_assert(offsetof(ItemManagementEquipSlot_C_BndEvt__InputActionWidget_K2Node_ComponentBoundEvent_6_OnInputMethodChanged__DelegateSignature, bUsingGamepad) == 0x000000, "Member 'ItemManagementEquipSlot_C_BndEvt__InputActionWidget_K2Node_ComponentBoundEvent_6_OnInputMethodChanged__DelegateSignature::bUsingGamepad' has a wrong offset!");

// Function ItemManagementEquipSlot.ItemManagementEquipSlot_C.OnFocusLost
// 0x0008 (0x0008 - 0x0000)
struct ItemManagementEquipSlot_C_OnFocusLost final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(ItemManagementEquipSlot_C_OnFocusLost) == 0x000004, "Wrong alignment on ItemManagementEquipSlot_C_OnFocusLost");
static_assert(sizeof(ItemManagementEquipSlot_C_OnFocusLost) == 0x000008, "Wrong size on ItemManagementEquipSlot_C_OnFocusLost");
static_assert(offsetof(ItemManagementEquipSlot_C_OnFocusLost, InFocusEvent) == 0x000000, "Member 'ItemManagementEquipSlot_C_OnFocusLost::InFocusEvent' has a wrong offset!");

// Function ItemManagementEquipSlot.ItemManagementEquipSlot_C.RefreshItem
// 0x0018 (0x0018 - 0x0000)
struct ItemManagementEquipSlot_C_RefreshItem final
{
public:
	class UFortInventoryContext*                  CallFunc_GetContext_ReturnValue;                   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortItem*                              CallFunc_GetQuickBarSlottedItem_ReturnValue;       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ItemManagementEquipSlot_C_RefreshItem) == 0x000008, "Wrong alignment on ItemManagementEquipSlot_C_RefreshItem");
static_assert(sizeof(ItemManagementEquipSlot_C_RefreshItem) == 0x000018, "Wrong size on ItemManagementEquipSlot_C_RefreshItem");
static_assert(offsetof(ItemManagementEquipSlot_C_RefreshItem, CallFunc_GetContext_ReturnValue) == 0x000000, "Member 'ItemManagementEquipSlot_C_RefreshItem::CallFunc_GetContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_RefreshItem, CallFunc_GetQuickBarSlottedItem_ReturnValue) == 0x000008, "Member 'ItemManagementEquipSlot_C_RefreshItem::CallFunc_GetQuickBarSlottedItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_RefreshItem, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'ItemManagementEquipSlot_C_RefreshItem::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function ItemManagementEquipSlot.ItemManagementEquipSlot_C.OnDrop
// 0x00E8 (0x00E8 - 0x0000)
struct ItemManagementEquipSlot_C_OnDrop final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          PointerEvent;                                      // 0x0038(0x0070)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UDragDropOperation*                     Operation;                                         // 0x00A8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItem*                              K2Node_DynamicCast_AsFort_Item;                    // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UItemManagementInventoryPanel_C*        K2Node_DynamicCast_AsItem_Management_Inventory_Panel; // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortInventoryContext*                  CallFunc_GetContext_ReturnValue;                   // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DropItemOnQuickBar_ReturnValue;           // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ItemManagementEquipSlot_C_OnDrop) == 0x000008, "Wrong alignment on ItemManagementEquipSlot_C_OnDrop");
static_assert(sizeof(ItemManagementEquipSlot_C_OnDrop) == 0x0000E8, "Wrong size on ItemManagementEquipSlot_C_OnDrop");
static_assert(offsetof(ItemManagementEquipSlot_C_OnDrop, MyGeometry) == 0x000000, "Member 'ItemManagementEquipSlot_C_OnDrop::MyGeometry' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_OnDrop, PointerEvent) == 0x000038, "Member 'ItemManagementEquipSlot_C_OnDrop::PointerEvent' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_OnDrop, Operation) == 0x0000A8, "Member 'ItemManagementEquipSlot_C_OnDrop::Operation' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_OnDrop, ReturnValue) == 0x0000B0, "Member 'ItemManagementEquipSlot_C_OnDrop::ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_OnDrop, K2Node_DynamicCast_AsFort_Item) == 0x0000B8, "Member 'ItemManagementEquipSlot_C_OnDrop::K2Node_DynamicCast_AsFort_Item' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_OnDrop, K2Node_DynamicCast_bSuccess) == 0x0000C0, "Member 'ItemManagementEquipSlot_C_OnDrop::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_OnDrop, K2Node_DynamicCast_AsItem_Management_Inventory_Panel) == 0x0000C8, "Member 'ItemManagementEquipSlot_C_OnDrop::K2Node_DynamicCast_AsItem_Management_Inventory_Panel' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_OnDrop, K2Node_DynamicCast_bSuccess2) == 0x0000D0, "Member 'ItemManagementEquipSlot_C_OnDrop::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_OnDrop, CallFunc_GetContext_ReturnValue) == 0x0000D8, "Member 'ItemManagementEquipSlot_C_OnDrop::CallFunc_GetContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_OnDrop, CallFunc_DropItemOnQuickBar_ReturnValue) == 0x0000E0, "Member 'ItemManagementEquipSlot_C_OnDrop::CallFunc_DropItemOnQuickBar_ReturnValue' has a wrong offset!");

// Function ItemManagementEquipSlot.ItemManagementEquipSlot_C.OnMouseButtonDown
// 0x02E8 (0x02E8 - 0x0000)
struct ItemManagementEquipSlot_C_OnMouseButtonDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0160(0x00B8)()
	struct FEventReply                            CallFunc_DetectDragIfPressed_ReturnValue;          // 0x0218(0x00B8)()
	class UFortGlobalUIContext*                   CallFunc_GetContext_ReturnValue;                   // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortItem*                              CallFunc_GetItemToDetail_ReturnValue;              // 0x02D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUsingGamepad_ReturnValue;               // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ItemManagementEquipSlot_C_OnMouseButtonDown) == 0x000008, "Wrong alignment on ItemManagementEquipSlot_C_OnMouseButtonDown");
static_assert(sizeof(ItemManagementEquipSlot_C_OnMouseButtonDown) == 0x0002E8, "Wrong size on ItemManagementEquipSlot_C_OnMouseButtonDown");
static_assert(offsetof(ItemManagementEquipSlot_C_OnMouseButtonDown, MyGeometry) == 0x000000, "Member 'ItemManagementEquipSlot_C_OnMouseButtonDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_OnMouseButtonDown, MouseEvent) == 0x000038, "Member 'ItemManagementEquipSlot_C_OnMouseButtonDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_OnMouseButtonDown, ReturnValue) == 0x0000A8, "Member 'ItemManagementEquipSlot_C_OnMouseButtonDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_OnMouseButtonDown, CallFunc_Handled_ReturnValue) == 0x000160, "Member 'ItemManagementEquipSlot_C_OnMouseButtonDown::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_OnMouseButtonDown, CallFunc_DetectDragIfPressed_ReturnValue) == 0x000218, "Member 'ItemManagementEquipSlot_C_OnMouseButtonDown::CallFunc_DetectDragIfPressed_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_OnMouseButtonDown, CallFunc_GetContext_ReturnValue) == 0x0002D0, "Member 'ItemManagementEquipSlot_C_OnMouseButtonDown::CallFunc_GetContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_OnMouseButtonDown, CallFunc_GetItemToDetail_ReturnValue) == 0x0002D8, "Member 'ItemManagementEquipSlot_C_OnMouseButtonDown::CallFunc_GetItemToDetail_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_OnMouseButtonDown, CallFunc_IsUsingGamepad_ReturnValue) == 0x0002E0, "Member 'ItemManagementEquipSlot_C_OnMouseButtonDown::CallFunc_IsUsingGamepad_ReturnValue' has a wrong offset!");

// Function ItemManagementEquipSlot.ItemManagementEquipSlot_C.OnDragDetected
// 0x0118 (0x0118 - 0x0000)
struct ItemManagementEquipSlot_C_OnDragDetected final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          PointerEvent;                                      // 0x0038(0x0070)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UDragDropOperation*                     Operation;                                         // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDragDropOperation*                     CallFunc_CreateDragDropOperation_ReturnValue;      // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UItemManagementInventoryPanel_C*        K2Node_DynamicCast_AsItem_Management_Inventory_Panel; // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              CallFunc_GetSmallPreviewImage_ReturnValue;         // 0x00C8(0x0028)(HasGetValueTypeHash)
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue; // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_DynamicCast_AsTexture_2D;                   // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UItemDragIcon_C*                        CallFunc_Create_ReturnValue;                       // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ItemManagementEquipSlot_C_OnDragDetected) == 0x000008, "Wrong alignment on ItemManagementEquipSlot_C_OnDragDetected");
static_assert(sizeof(ItemManagementEquipSlot_C_OnDragDetected) == 0x000118, "Wrong size on ItemManagementEquipSlot_C_OnDragDetected");
static_assert(offsetof(ItemManagementEquipSlot_C_OnDragDetected, MyGeometry) == 0x000000, "Member 'ItemManagementEquipSlot_C_OnDragDetected::MyGeometry' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_OnDragDetected, PointerEvent) == 0x000038, "Member 'ItemManagementEquipSlot_C_OnDragDetected::PointerEvent' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_OnDragDetected, Operation) == 0x0000A8, "Member 'ItemManagementEquipSlot_C_OnDragDetected::Operation' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_OnDragDetected, CallFunc_CreateDragDropOperation_ReturnValue) == 0x0000B0, "Member 'ItemManagementEquipSlot_C_OnDragDetected::CallFunc_CreateDragDropOperation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_OnDragDetected, K2Node_DynamicCast_AsItem_Management_Inventory_Panel) == 0x0000B8, "Member 'ItemManagementEquipSlot_C_OnDragDetected::K2Node_DynamicCast_AsItem_Management_Inventory_Panel' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_OnDragDetected, K2Node_DynamicCast_bSuccess) == 0x0000C0, "Member 'ItemManagementEquipSlot_C_OnDragDetected::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_OnDragDetected, CallFunc_IsValid_ReturnValue) == 0x0000C1, "Member 'ItemManagementEquipSlot_C_OnDragDetected::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_OnDragDetected, CallFunc_GetSmallPreviewImage_ReturnValue) == 0x0000C8, "Member 'ItemManagementEquipSlot_C_OnDragDetected::CallFunc_GetSmallPreviewImage_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_OnDragDetected, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue) == 0x0000F0, "Member 'ItemManagementEquipSlot_C_OnDragDetected::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_OnDragDetected, CallFunc_GetOwningPlayer_ReturnValue) == 0x0000F8, "Member 'ItemManagementEquipSlot_C_OnDragDetected::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_OnDragDetected, K2Node_DynamicCast_AsTexture_2D) == 0x000100, "Member 'ItemManagementEquipSlot_C_OnDragDetected::K2Node_DynamicCast_AsTexture_2D' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_OnDragDetected, K2Node_DynamicCast_bSuccess2) == 0x000108, "Member 'ItemManagementEquipSlot_C_OnDragDetected::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_OnDragDetected, CallFunc_Create_ReturnValue) == 0x000110, "Member 'ItemManagementEquipSlot_C_OnDragDetected::CallFunc_Create_ReturnValue' has a wrong offset!");

// Function ItemManagementEquipSlot.ItemManagementEquipSlot_C.SetSelected
// 0x0005 (0x0005 - 0x0000)
struct ItemManagementEquipSlot_C_SetSelected final
{
public:
	bool                                          Selected;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable2;                               // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ItemManagementEquipSlot_C_SetSelected) == 0x000001, "Wrong alignment on ItemManagementEquipSlot_C_SetSelected");
static_assert(sizeof(ItemManagementEquipSlot_C_SetSelected) == 0x000005, "Wrong size on ItemManagementEquipSlot_C_SetSelected");
static_assert(offsetof(ItemManagementEquipSlot_C_SetSelected, Selected) == 0x000000, "Member 'ItemManagementEquipSlot_C_SetSelected::Selected' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_SetSelected, Temp_bool_Variable) == 0x000001, "Member 'ItemManagementEquipSlot_C_SetSelected::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_SetSelected, Temp_byte_Variable) == 0x000002, "Member 'ItemManagementEquipSlot_C_SetSelected::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_SetSelected, Temp_byte_Variable2) == 0x000003, "Member 'ItemManagementEquipSlot_C_SetSelected::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_SetSelected, K2Node_Select_Default) == 0x000004, "Member 'ItemManagementEquipSlot_C_SetSelected::K2Node_Select_Default' has a wrong offset!");

// Function ItemManagementEquipSlot.ItemManagementEquipSlot_C.OnFocusReceived
// 0x01B0 (0x01B0 - 0x0000)
struct ItemManagementEquipSlot_C_OnFocusReceived final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FFocusEvent                            InFocusEvent;                                      // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FEventReply                            ReturnValue;                                       // 0x0040(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x00F8(0x00B8)()
};
static_assert(alignof(ItemManagementEquipSlot_C_OnFocusReceived) == 0x000008, "Wrong alignment on ItemManagementEquipSlot_C_OnFocusReceived");
static_assert(sizeof(ItemManagementEquipSlot_C_OnFocusReceived) == 0x0001B0, "Wrong size on ItemManagementEquipSlot_C_OnFocusReceived");
static_assert(offsetof(ItemManagementEquipSlot_C_OnFocusReceived, MyGeometry) == 0x000000, "Member 'ItemManagementEquipSlot_C_OnFocusReceived::MyGeometry' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_OnFocusReceived, InFocusEvent) == 0x000038, "Member 'ItemManagementEquipSlot_C_OnFocusReceived::InFocusEvent' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_OnFocusReceived, ReturnValue) == 0x000040, "Member 'ItemManagementEquipSlot_C_OnFocusReceived::ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_OnFocusReceived, CallFunc_Handled_ReturnValue) == 0x0000F8, "Member 'ItemManagementEquipSlot_C_OnFocusReceived::CallFunc_Handled_ReturnValue' has a wrong offset!");

// Function ItemManagementEquipSlot.ItemManagementEquipSlot_C.IsSelected
// 0x0003 (0x0003 - 0x0000)
struct ItemManagementEquipSlot_C_IsSelected final
{
public:
	bool                                          Selected;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              CallFunc_GetVisibility_ReturnValue;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ItemManagementEquipSlot_C_IsSelected) == 0x000001, "Wrong alignment on ItemManagementEquipSlot_C_IsSelected");
static_assert(sizeof(ItemManagementEquipSlot_C_IsSelected) == 0x000003, "Wrong size on ItemManagementEquipSlot_C_IsSelected");
static_assert(offsetof(ItemManagementEquipSlot_C_IsSelected, Selected) == 0x000000, "Member 'ItemManagementEquipSlot_C_IsSelected::Selected' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_IsSelected, CallFunc_GetVisibility_ReturnValue) == 0x000001, "Member 'ItemManagementEquipSlot_C_IsSelected::CallFunc_GetVisibility_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemManagementEquipSlot_C_IsSelected, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'ItemManagementEquipSlot_C_IsSelected::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

}

