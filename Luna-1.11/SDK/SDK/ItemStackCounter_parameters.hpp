#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ItemStackCounter

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK::Params
{

// Function ItemStackCounter.ItemStackCounter_C.ExecuteUbergraph_ItemStackCounter
// 0x0008 (0x0008 - 0x0000)
struct ItemStackCounter_C_ExecuteUbergraph_ItemStackCounter final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ItemStackCounter_C_ExecuteUbergraph_ItemStackCounter) == 0x000004, "Wrong alignment on ItemStackCounter_C_ExecuteUbergraph_ItemStackCounter");
static_assert(sizeof(ItemStackCounter_C_ExecuteUbergraph_ItemStackCounter) == 0x000008, "Wrong size on ItemStackCounter_C_ExecuteUbergraph_ItemStackCounter");
static_assert(offsetof(ItemStackCounter_C_ExecuteUbergraph_ItemStackCounter, EntryPoint) == 0x000000, "Member 'ItemStackCounter_C_ExecuteUbergraph_ItemStackCounter::EntryPoint' has a wrong offset!");
static_assert(offsetof(ItemStackCounter_C_ExecuteUbergraph_ItemStackCounter, K2Node_Event_IsDesignTime) == 0x000004, "Member 'ItemStackCounter_C_ExecuteUbergraph_ItemStackCounter::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function ItemStackCounter.ItemStackCounter_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct ItemStackCounter_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ItemStackCounter_C_PreConstruct) == 0x000001, "Wrong alignment on ItemStackCounter_C_PreConstruct");
static_assert(sizeof(ItemStackCounter_C_PreConstruct) == 0x000001, "Wrong size on ItemStackCounter_C_PreConstruct");
static_assert(offsetof(ItemStackCounter_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'ItemStackCounter_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function ItemStackCounter.ItemStackCounter_C.Update
// 0x00A8 (0x00A8 - 0x0000)
struct ItemStackCounter_C_Update final
{
public:
	EFortBrushSize                                Param_Brush_Size;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_Count;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBorderSlot*                            K2Node_DynamicCast_AsBorder_Slot;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                CallFunc_GetMarginBySizeFromMultiSizeMargin_ReturnValue; // 0x0014(0x0010)(NoDestructor)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue; // 0x0028(0x0078)()
	float                                         CallFunc_BreakVector2D_X;                          // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ItemStackCounter_C_Update) == 0x000008, "Wrong alignment on ItemStackCounter_C_Update");
static_assert(sizeof(ItemStackCounter_C_Update) == 0x0000A8, "Wrong size on ItemStackCounter_C_Update");
static_assert(offsetof(ItemStackCounter_C_Update, Param_Brush_Size) == 0x000000, "Member 'ItemStackCounter_C_Update::Param_Brush_Size' has a wrong offset!");
static_assert(offsetof(ItemStackCounter_C_Update, Param_Count) == 0x000004, "Member 'ItemStackCounter_C_Update::Param_Count' has a wrong offset!");
static_assert(offsetof(ItemStackCounter_C_Update, K2Node_DynamicCast_AsBorder_Slot) == 0x000008, "Member 'ItemStackCounter_C_Update::K2Node_DynamicCast_AsBorder_Slot' has a wrong offset!");
static_assert(offsetof(ItemStackCounter_C_Update, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'ItemStackCounter_C_Update::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ItemStackCounter_C_Update, CallFunc_GetMarginBySizeFromMultiSizeMargin_ReturnValue) == 0x000014, "Member 'ItemStackCounter_C_Update::CallFunc_GetMarginBySizeFromMultiSizeMargin_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemStackCounter_C_Update, CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue) == 0x000028, "Member 'ItemStackCounter_C_Update::CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemStackCounter_C_Update, CallFunc_BreakVector2D_X) == 0x0000A0, "Member 'ItemStackCounter_C_Update::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(ItemStackCounter_C_Update, CallFunc_BreakVector2D_Y) == 0x0000A4, "Member 'ItemStackCounter_C_Update::CallFunc_BreakVector2D_Y' has a wrong offset!");

// Function ItemStackCounter.ItemStackCounter_C.Set Stack Count
// 0x0050 (0x0050 - 0x0000)
struct ItemStackCounter_C_Set_Stack_Count final
{
public:
	int32                                         Param_Count;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0008(0x0018)()
	class FText                                   CallFunc_Truncate_Integer_Value_Formatted_Value;   // 0x0020(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x0038(0x0018)()
};
static_assert(alignof(ItemStackCounter_C_Set_Stack_Count) == 0x000008, "Wrong alignment on ItemStackCounter_C_Set_Stack_Count");
static_assert(sizeof(ItemStackCounter_C_Set_Stack_Count) == 0x000050, "Wrong size on ItemStackCounter_C_Set_Stack_Count");
static_assert(offsetof(ItemStackCounter_C_Set_Stack_Count, Param_Count) == 0x000000, "Member 'ItemStackCounter_C_Set_Stack_Count::Param_Count' has a wrong offset!");
static_assert(offsetof(ItemStackCounter_C_Set_Stack_Count, Temp_bool_Variable) == 0x000004, "Member 'ItemStackCounter_C_Set_Stack_Count::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ItemStackCounter_C_Set_Stack_Count, CallFunc_Conv_IntToText_ReturnValue) == 0x000008, "Member 'ItemStackCounter_C_Set_Stack_Count::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemStackCounter_C_Set_Stack_Count, CallFunc_Truncate_Integer_Value_Formatted_Value) == 0x000020, "Member 'ItemStackCounter_C_Set_Stack_Count::CallFunc_Truncate_Integer_Value_Formatted_Value' has a wrong offset!");
static_assert(offsetof(ItemStackCounter_C_Set_Stack_Count, K2Node_Select_Default) == 0x000038, "Member 'ItemStackCounter_C_Set_Stack_Count::K2Node_Select_Default' has a wrong offset!");

// Function ItemStackCounter.ItemStackCounter_C.Refresh Visibility
// 0x0006 (0x0006 - 0x0000)
struct ItemStackCounter_C_Refresh_Visibility final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable2;                               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ItemStackCounter_C_Refresh_Visibility) == 0x000001, "Wrong alignment on ItemStackCounter_C_Refresh_Visibility");
static_assert(sizeof(ItemStackCounter_C_Refresh_Visibility) == 0x000006, "Wrong size on ItemStackCounter_C_Refresh_Visibility");
static_assert(offsetof(ItemStackCounter_C_Refresh_Visibility, Temp_bool_Variable) == 0x000000, "Member 'ItemStackCounter_C_Refresh_Visibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ItemStackCounter_C_Refresh_Visibility, Temp_byte_Variable) == 0x000001, "Member 'ItemStackCounter_C_Refresh_Visibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ItemStackCounter_C_Refresh_Visibility, Temp_byte_Variable2) == 0x000002, "Member 'ItemStackCounter_C_Refresh_Visibility::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(ItemStackCounter_C_Refresh_Visibility, CallFunc_Greater_IntInt_ReturnValue) == 0x000003, "Member 'ItemStackCounter_C_Refresh_Visibility::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemStackCounter_C_Refresh_Visibility, CallFunc_BooleanOR_ReturnValue) == 0x000004, "Member 'ItemStackCounter_C_Refresh_Visibility::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemStackCounter_C_Refresh_Visibility, K2Node_Select_Default) == 0x000005, "Member 'ItemStackCounter_C_Refresh_Visibility::K2Node_Select_Default' has a wrong offset!");

}

