#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: McpProfileSys

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "McpProfileSys_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class McpProfileSys.McpItemAware
// 0x0000 (0x0028 - 0x0028)
class IMcpItemAware final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"McpItemAware">();
	}
	static class IMcpItemAware* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMcpItemAware>();
	}
};
static_assert(alignof(IMcpItemAware) == 0x000008, "Wrong alignment on IMcpItemAware");
static_assert(sizeof(IMcpItemAware) == 0x000028, "Wrong size on IMcpItemAware");

// Class McpProfileSys.McpItemDefinitionBase
// 0x0000 (0x0030 - 0x0030)
class UMcpItemDefinitionBase : public UPrimaryDataAsset
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"McpItemDefinitionBase">();
	}
	static class UMcpItemDefinitionBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMcpItemDefinitionBase>();
	}
};
static_assert(alignof(UMcpItemDefinitionBase) == 0x000008, "Wrong alignment on UMcpItemDefinitionBase");
static_assert(sizeof(UMcpItemDefinitionBase) == 0x000030, "Wrong size on UMcpItemDefinitionBase");

// Class McpProfileSys.McpProfileGroup
// 0x0268 (0x0290 - 0x0028)
class UMcpProfileGroup final : public UObject
{
public:
	uint8                                         Pad_28[0xF0];                                      // 0x0028(0x00F0)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DelayMcpResults;                                   // 0x0118(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FProfileEntry>                  ProfileList;                                       // 0x0120(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	bool                                          bIsInitialized;                                    // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerName;                                        // 0x0138(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsServer;                                         // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ProfileNotificationsStompTopic;                    // 0x0150(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_160[0x40];                                     // 0x0160(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LastMcpVersion;                                    // 0x01A0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 LastContentVersion;                                // 0x01B0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTimespan                              LocalTimeOffset;                                   // 0x01C0(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FProfileHttpRequest>            PendingRequests;                                   // 0x01C8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1D8[0x10];                                     // 0x01D8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsProcessingRequestGenerator;                     // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1E9[0x7];                                      // 0x01E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LockCode;                                          // 0x01F0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UMcpProfile*>                    LockedProfiles;                                    // 0x0200(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class FString                                 LockedProfilesString;                              // 0x0210(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ProfileWriteLockTimeoutSecs;                       // 0x0220(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bSubscribedToNotifications;                        // 0x0224(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_225[0x3];                                      // 0x0225(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ApplyStashEndPoint;                                // 0x0228(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bPendingInterceptedRequest;                        // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_239[0xF];                                      // 0x0239(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bSendProfileCommandRevisions;                      // 0x0248(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_249[0x47];                                     // 0x0249(0x0047)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"McpProfileGroup">();
	}
	static class UMcpProfileGroup* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMcpProfileGroup>();
	}
};
static_assert(alignof(UMcpProfileGroup) == 0x000008, "Wrong alignment on UMcpProfileGroup");
static_assert(sizeof(UMcpProfileGroup) == 0x000290, "Wrong size on UMcpProfileGroup");
static_assert(offsetof(UMcpProfileGroup, DelayMcpResults) == 0x000118, "Member 'UMcpProfileGroup::DelayMcpResults' has a wrong offset!");
static_assert(offsetof(UMcpProfileGroup, ProfileList) == 0x000120, "Member 'UMcpProfileGroup::ProfileList' has a wrong offset!");
static_assert(offsetof(UMcpProfileGroup, bIsInitialized) == 0x000130, "Member 'UMcpProfileGroup::bIsInitialized' has a wrong offset!");
static_assert(offsetof(UMcpProfileGroup, PlayerName) == 0x000138, "Member 'UMcpProfileGroup::PlayerName' has a wrong offset!");
static_assert(offsetof(UMcpProfileGroup, bIsServer) == 0x000148, "Member 'UMcpProfileGroup::bIsServer' has a wrong offset!");
static_assert(offsetof(UMcpProfileGroup, ProfileNotificationsStompTopic) == 0x000150, "Member 'UMcpProfileGroup::ProfileNotificationsStompTopic' has a wrong offset!");
static_assert(offsetof(UMcpProfileGroup, LastMcpVersion) == 0x0001A0, "Member 'UMcpProfileGroup::LastMcpVersion' has a wrong offset!");
static_assert(offsetof(UMcpProfileGroup, LastContentVersion) == 0x0001B0, "Member 'UMcpProfileGroup::LastContentVersion' has a wrong offset!");
static_assert(offsetof(UMcpProfileGroup, LocalTimeOffset) == 0x0001C0, "Member 'UMcpProfileGroup::LocalTimeOffset' has a wrong offset!");
static_assert(offsetof(UMcpProfileGroup, PendingRequests) == 0x0001C8, "Member 'UMcpProfileGroup::PendingRequests' has a wrong offset!");
static_assert(offsetof(UMcpProfileGroup, bIsProcessingRequestGenerator) == 0x0001E8, "Member 'UMcpProfileGroup::bIsProcessingRequestGenerator' has a wrong offset!");
static_assert(offsetof(UMcpProfileGroup, LockCode) == 0x0001F0, "Member 'UMcpProfileGroup::LockCode' has a wrong offset!");
static_assert(offsetof(UMcpProfileGroup, LockedProfiles) == 0x000200, "Member 'UMcpProfileGroup::LockedProfiles' has a wrong offset!");
static_assert(offsetof(UMcpProfileGroup, LockedProfilesString) == 0x000210, "Member 'UMcpProfileGroup::LockedProfilesString' has a wrong offset!");
static_assert(offsetof(UMcpProfileGroup, ProfileWriteLockTimeoutSecs) == 0x000220, "Member 'UMcpProfileGroup::ProfileWriteLockTimeoutSecs' has a wrong offset!");
static_assert(offsetof(UMcpProfileGroup, bSubscribedToNotifications) == 0x000224, "Member 'UMcpProfileGroup::bSubscribedToNotifications' has a wrong offset!");
static_assert(offsetof(UMcpProfileGroup, ApplyStashEndPoint) == 0x000228, "Member 'UMcpProfileGroup::ApplyStashEndPoint' has a wrong offset!");
static_assert(offsetof(UMcpProfileGroup, bPendingInterceptedRequest) == 0x000238, "Member 'UMcpProfileGroup::bPendingInterceptedRequest' has a wrong offset!");
static_assert(offsetof(UMcpProfileGroup, bSendProfileCommandRevisions) == 0x000248, "Member 'UMcpProfileGroup::bSendProfileCommandRevisions' has a wrong offset!");

// Class McpProfileSys.McpProfile
// 0x0288 (0x02B0 - 0x0028)
class UMcpProfile : public UObject
{
public:
	EServerClientFlag                             AllowSubscriptionToNotificationsService;           // 0x0028(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_29[0xA7];                                      // 0x0029(0x00A7)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DebugName;                                         // 0x00D0(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bProfileLockOperationPending;                      // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bProfileUnlockOperationPending;                    // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableMocks;                                      // 0x00E2(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E3[0xD];                                       // 0x00E3(0x000D)(Fixing Size After Last Property [ Dumper-7 ])
	class UMcpProfileGroup*                       ProfileGroup;                                      // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ProfileId;                                         // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int64                                         ProfileRevision;                                   // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         FullProfileQueryQueued;                            // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bShouldCreateInstances;                            // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bProfileWriteLocked;                               // 0x0115(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_116[0x2];                                      // 0x0116(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              ProfileWriteLockExpireTime;                        // 0x0118(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CommandRevision;                                   // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_124[0x18C];                                    // 0x0124(0x018C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DeleteAllProfiles(struct FClientUrlContext* Context);
	void DeleteProfile(struct FClientUrlContext* Context);
	void LockProfileForWrite(const class FString& Code, int32 Timeout, struct FDedicatedServerUrlContext* Context);
	void QueryProfile(struct FBaseUrlContext* Context);
	void UnlockProfileForWrite(const class FString& Code, struct FDedicatedServerUrlContext* Context);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"McpProfile">();
	}
	static class UMcpProfile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMcpProfile>();
	}
};
static_assert(alignof(UMcpProfile) == 0x000008, "Wrong alignment on UMcpProfile");
static_assert(sizeof(UMcpProfile) == 0x0002B0, "Wrong size on UMcpProfile");
static_assert(offsetof(UMcpProfile, AllowSubscriptionToNotificationsService) == 0x000028, "Member 'UMcpProfile::AllowSubscriptionToNotificationsService' has a wrong offset!");
static_assert(offsetof(UMcpProfile, DebugName) == 0x0000D0, "Member 'UMcpProfile::DebugName' has a wrong offset!");
static_assert(offsetof(UMcpProfile, bProfileLockOperationPending) == 0x0000E0, "Member 'UMcpProfile::bProfileLockOperationPending' has a wrong offset!");
static_assert(offsetof(UMcpProfile, bProfileUnlockOperationPending) == 0x0000E1, "Member 'UMcpProfile::bProfileUnlockOperationPending' has a wrong offset!");
static_assert(offsetof(UMcpProfile, bEnableMocks) == 0x0000E2, "Member 'UMcpProfile::bEnableMocks' has a wrong offset!");
static_assert(offsetof(UMcpProfile, ProfileGroup) == 0x0000F0, "Member 'UMcpProfile::ProfileGroup' has a wrong offset!");
static_assert(offsetof(UMcpProfile, ProfileId) == 0x0000F8, "Member 'UMcpProfile::ProfileId' has a wrong offset!");
static_assert(offsetof(UMcpProfile, ProfileRevision) == 0x000108, "Member 'UMcpProfile::ProfileRevision' has a wrong offset!");
static_assert(offsetof(UMcpProfile, FullProfileQueryQueued) == 0x000110, "Member 'UMcpProfile::FullProfileQueryQueued' has a wrong offset!");
static_assert(offsetof(UMcpProfile, bShouldCreateInstances) == 0x000114, "Member 'UMcpProfile::bShouldCreateInstances' has a wrong offset!");
static_assert(offsetof(UMcpProfile, bProfileWriteLocked) == 0x000115, "Member 'UMcpProfile::bProfileWriteLocked' has a wrong offset!");
static_assert(offsetof(UMcpProfile, ProfileWriteLockExpireTime) == 0x000118, "Member 'UMcpProfile::ProfileWriteLockExpireTime' has a wrong offset!");
static_assert(offsetof(UMcpProfile, CommandRevision) == 0x000120, "Member 'UMcpProfile::CommandRevision' has a wrong offset!");

// Class McpProfileSys.McpProfileManager
// 0x0030 (0x0058 - 0x0028)
class UMcpProfileManager final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FProfileGroupEntry>             ServerProfileGroups;                               // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FProfileGroupEntry>             ClientProfileGroups;                               // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"McpProfileManager">();
	}
	static class UMcpProfileManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMcpProfileManager>();
	}
};
static_assert(alignof(UMcpProfileManager) == 0x000008, "Wrong alignment on UMcpProfileManager");
static_assert(sizeof(UMcpProfileManager) == 0x000058, "Wrong size on UMcpProfileManager");
static_assert(offsetof(UMcpProfileManager, ServerProfileGroups) == 0x000038, "Member 'UMcpProfileManager::ServerProfileGroups' has a wrong offset!");
static_assert(offsetof(UMcpProfileManager, ClientProfileGroups) == 0x000048, "Member 'UMcpProfileManager::ClientProfileGroups' has a wrong offset!");

}

