#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MinibossDetails

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "Slate_structs.hpp"


namespace SDK::Params
{

// Function MinibossDetails.MinibossDetails_C.ExecuteUbergraph_MinibossDetails
// 0x0070 (0x0070 - 0x0000)
struct MinibossDetails_C_ExecuteUbergraph_MinibossDetails final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetHUDTargetHealthPercentage_ReturnValue; // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetHUDTargetHealthPercentage_ReturnValue2; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetHUDTargetUpgradeDisplayName_ReturnValue; // 0x0010(0x0018)()
	class FText                                   CallFunc_GetHUDTargetDisplayName_ReturnValue;      // 0x0028(0x0018)()
	TArray<class FText>                           CallFunc_GetHUDTargetDisplayModifiers_ReturnValue; // 0x0040(0x0010)(ZeroConstructor, ReferenceParm)
	class UObject*                                CallFunc_Conv_InterfaceToObject_ReturnValue;       // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_Conv_InterfaceToObject_ReturnValue2;      // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MinibossDetails_C_ExecuteUbergraph_MinibossDetails) == 0x000008, "Wrong alignment on MinibossDetails_C_ExecuteUbergraph_MinibossDetails");
static_assert(sizeof(MinibossDetails_C_ExecuteUbergraph_MinibossDetails) == 0x000070, "Wrong size on MinibossDetails_C_ExecuteUbergraph_MinibossDetails");
static_assert(offsetof(MinibossDetails_C_ExecuteUbergraph_MinibossDetails, EntryPoint) == 0x000000, "Member 'MinibossDetails_C_ExecuteUbergraph_MinibossDetails::EntryPoint' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_ExecuteUbergraph_MinibossDetails, CallFunc_GetHUDTargetHealthPercentage_ReturnValue) == 0x000004, "Member 'MinibossDetails_C_ExecuteUbergraph_MinibossDetails::CallFunc_GetHUDTargetHealthPercentage_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_ExecuteUbergraph_MinibossDetails, CallFunc_GetHUDTargetHealthPercentage_ReturnValue2) == 0x000008, "Member 'MinibossDetails_C_ExecuteUbergraph_MinibossDetails::CallFunc_GetHUDTargetHealthPercentage_ReturnValue2' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_ExecuteUbergraph_MinibossDetails, CallFunc_GetHUDTargetUpgradeDisplayName_ReturnValue) == 0x000010, "Member 'MinibossDetails_C_ExecuteUbergraph_MinibossDetails::CallFunc_GetHUDTargetUpgradeDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_ExecuteUbergraph_MinibossDetails, CallFunc_GetHUDTargetDisplayName_ReturnValue) == 0x000028, "Member 'MinibossDetails_C_ExecuteUbergraph_MinibossDetails::CallFunc_GetHUDTargetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_ExecuteUbergraph_MinibossDetails, CallFunc_GetHUDTargetDisplayModifiers_ReturnValue) == 0x000040, "Member 'MinibossDetails_C_ExecuteUbergraph_MinibossDetails::CallFunc_GetHUDTargetDisplayModifiers_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_ExecuteUbergraph_MinibossDetails, CallFunc_Conv_InterfaceToObject_ReturnValue) == 0x000050, "Member 'MinibossDetails_C_ExecuteUbergraph_MinibossDetails::CallFunc_Conv_InterfaceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_ExecuteUbergraph_MinibossDetails, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'MinibossDetails_C_ExecuteUbergraph_MinibossDetails::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_ExecuteUbergraph_MinibossDetails, CallFunc_Conv_InterfaceToObject_ReturnValue2) == 0x000060, "Member 'MinibossDetails_C_ExecuteUbergraph_MinibossDetails::CallFunc_Conv_InterfaceToObject_ReturnValue2' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_ExecuteUbergraph_MinibossDetails, CallFunc_IsValid_ReturnValue2) == 0x000068, "Member 'MinibossDetails_C_ExecuteUbergraph_MinibossDetails::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_ExecuteUbergraph_MinibossDetails, CallFunc_IsVisible_ReturnValue) == 0x000069, "Member 'MinibossDetails_C_ExecuteUbergraph_MinibossDetails::CallFunc_IsVisible_ReturnValue' has a wrong offset!");

// Function MinibossDetails.MinibossDetails_C.InitializeMiniBossDetails
// 0x0070 (0x0070 - 0x0000)
struct MinibossDetails_C_InitializeMiniBossDetails final
{
public:
	TArray<class FText>                           InModifiers;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	class FText                                   InName;                                            // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   InUpgradeName;                                     // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	float                                         InHealthPercent;                                   // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowName;                                          // 0x0044(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ShowPortrait;                                      // 0x0045(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 NameStyle;                                         // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ModifiersStyle;                                    // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETextJustify                                  Name_Alignment;                                    // 0x0058(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETextJustify                                  Modifiers_Alignment;                               // 0x0059(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Health_Bar_Width;                                  // 0x005C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable2;                               // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable3;                               // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable4;                               // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable2;                               // 0x0066(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0067(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select2_Default;                            // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinibossDetails_C_InitializeMiniBossDetails) == 0x000008, "Wrong alignment on MinibossDetails_C_InitializeMiniBossDetails");
static_assert(sizeof(MinibossDetails_C_InitializeMiniBossDetails) == 0x000070, "Wrong size on MinibossDetails_C_InitializeMiniBossDetails");
static_assert(offsetof(MinibossDetails_C_InitializeMiniBossDetails, InModifiers) == 0x000000, "Member 'MinibossDetails_C_InitializeMiniBossDetails::InModifiers' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_InitializeMiniBossDetails, InName) == 0x000010, "Member 'MinibossDetails_C_InitializeMiniBossDetails::InName' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_InitializeMiniBossDetails, InUpgradeName) == 0x000028, "Member 'MinibossDetails_C_InitializeMiniBossDetails::InUpgradeName' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_InitializeMiniBossDetails, InHealthPercent) == 0x000040, "Member 'MinibossDetails_C_InitializeMiniBossDetails::InHealthPercent' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_InitializeMiniBossDetails, ShowName) == 0x000044, "Member 'MinibossDetails_C_InitializeMiniBossDetails::ShowName' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_InitializeMiniBossDetails, ShowPortrait) == 0x000045, "Member 'MinibossDetails_C_InitializeMiniBossDetails::ShowPortrait' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_InitializeMiniBossDetails, NameStyle) == 0x000048, "Member 'MinibossDetails_C_InitializeMiniBossDetails::NameStyle' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_InitializeMiniBossDetails, ModifiersStyle) == 0x000050, "Member 'MinibossDetails_C_InitializeMiniBossDetails::ModifiersStyle' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_InitializeMiniBossDetails, Name_Alignment) == 0x000058, "Member 'MinibossDetails_C_InitializeMiniBossDetails::Name_Alignment' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_InitializeMiniBossDetails, Modifiers_Alignment) == 0x000059, "Member 'MinibossDetails_C_InitializeMiniBossDetails::Modifiers_Alignment' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_InitializeMiniBossDetails, Health_Bar_Width) == 0x00005C, "Member 'MinibossDetails_C_InitializeMiniBossDetails::Health_Bar_Width' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_InitializeMiniBossDetails, Temp_byte_Variable) == 0x000060, "Member 'MinibossDetails_C_InitializeMiniBossDetails::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_InitializeMiniBossDetails, Temp_byte_Variable2) == 0x000061, "Member 'MinibossDetails_C_InitializeMiniBossDetails::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_InitializeMiniBossDetails, CallFunc_TextIsEmpty_ReturnValue) == 0x000062, "Member 'MinibossDetails_C_InitializeMiniBossDetails::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_InitializeMiniBossDetails, Temp_bool_Variable) == 0x000063, "Member 'MinibossDetails_C_InitializeMiniBossDetails::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_InitializeMiniBossDetails, Temp_byte_Variable3) == 0x000064, "Member 'MinibossDetails_C_InitializeMiniBossDetails::Temp_byte_Variable3' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_InitializeMiniBossDetails, Temp_byte_Variable4) == 0x000065, "Member 'MinibossDetails_C_InitializeMiniBossDetails::Temp_byte_Variable4' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_InitializeMiniBossDetails, Temp_bool_Variable2) == 0x000066, "Member 'MinibossDetails_C_InitializeMiniBossDetails::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_InitializeMiniBossDetails, K2Node_Select_Default) == 0x000067, "Member 'MinibossDetails_C_InitializeMiniBossDetails::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_InitializeMiniBossDetails, K2Node_Select2_Default) == 0x000068, "Member 'MinibossDetails_C_InitializeMiniBossDetails::K2Node_Select2_Default' has a wrong offset!");

// Function MinibossDetails.MinibossDetails_C.PopulateModifiers
// 0x01A8 (0x01A8 - 0x0000)
struct MinibossDetails_C_PopulateModifiers final
{
public:
	TArray<class FText>                           InModifiersArray;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	class FText                                   Temp_text_Variable;                                // 0x0010(0x0018)()
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Array_Get_Item;                           // 0x0030(0x0018)()
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0050(0x0040)(HasGetValueTypeHash)
	class FText                                   CallFunc_GetEmptyText_ReturnValue;                 // 0x0090(0x0018)()
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AE[0x2];                                       // 0x00AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x00B0(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData2;             // 0x00C8(0x0040)(HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetEmptyText_ReturnValue2;                // 0x0110(0x0018)()
	class FText                                   CallFunc_GetText_ReturnValue;                      // 0x0128(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData3;             // 0x0140(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0180(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0190(0x0018)()
};
static_assert(alignof(MinibossDetails_C_PopulateModifiers) == 0x000008, "Wrong alignment on MinibossDetails_C_PopulateModifiers");
static_assert(sizeof(MinibossDetails_C_PopulateModifiers) == 0x0001A8, "Wrong size on MinibossDetails_C_PopulateModifiers");
static_assert(offsetof(MinibossDetails_C_PopulateModifiers, InModifiersArray) == 0x000000, "Member 'MinibossDetails_C_PopulateModifiers::InModifiersArray' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_PopulateModifiers, Temp_text_Variable) == 0x000010, "Member 'MinibossDetails_C_PopulateModifiers::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_PopulateModifiers, Temp_int_Array_Index_Variable) == 0x000028, "Member 'MinibossDetails_C_PopulateModifiers::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_PopulateModifiers, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00002C, "Member 'MinibossDetails_C_PopulateModifiers::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_PopulateModifiers, CallFunc_Array_Get_Item) == 0x000030, "Member 'MinibossDetails_C_PopulateModifiers::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_PopulateModifiers, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'MinibossDetails_C_PopulateModifiers::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_PopulateModifiers, K2Node_MakeStruct_FormatArgumentData) == 0x000050, "Member 'MinibossDetails_C_PopulateModifiers::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_PopulateModifiers, CallFunc_GetEmptyText_ReturnValue) == 0x000090, "Member 'MinibossDetails_C_PopulateModifiers::CallFunc_GetEmptyText_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_PopulateModifiers, Temp_int_Loop_Counter_Variable) == 0x0000A8, "Member 'MinibossDetails_C_PopulateModifiers::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_PopulateModifiers, Temp_bool_Variable) == 0x0000AC, "Member 'MinibossDetails_C_PopulateModifiers::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_PopulateModifiers, CallFunc_Less_IntInt_ReturnValue) == 0x0000AD, "Member 'MinibossDetails_C_PopulateModifiers::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_PopulateModifiers, K2Node_Select_Default) == 0x0000B0, "Member 'MinibossDetails_C_PopulateModifiers::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_PopulateModifiers, K2Node_MakeStruct_FormatArgumentData2) == 0x0000C8, "Member 'MinibossDetails_C_PopulateModifiers::K2Node_MakeStruct_FormatArgumentData2' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_PopulateModifiers, CallFunc_Add_IntInt_ReturnValue) == 0x000108, "Member 'MinibossDetails_C_PopulateModifiers::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_PopulateModifiers, CallFunc_GetEmptyText_ReturnValue2) == 0x000110, "Member 'MinibossDetails_C_PopulateModifiers::CallFunc_GetEmptyText_ReturnValue2' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_PopulateModifiers, CallFunc_GetText_ReturnValue) == 0x000128, "Member 'MinibossDetails_C_PopulateModifiers::CallFunc_GetText_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_PopulateModifiers, K2Node_MakeStruct_FormatArgumentData3) == 0x000140, "Member 'MinibossDetails_C_PopulateModifiers::K2Node_MakeStruct_FormatArgumentData3' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_PopulateModifiers, K2Node_MakeArray_Array) == 0x000180, "Member 'MinibossDetails_C_PopulateModifiers::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_PopulateModifiers, CallFunc_Format_ReturnValue) == 0x000190, "Member 'MinibossDetails_C_PopulateModifiers::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function MinibossDetails.MinibossDetails_C.Update Health
// 0x0004 (0x0004 - 0x0000)
struct MinibossDetails_C_Update_Health final
{
public:
	float                                         InPercent;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinibossDetails_C_Update_Health) == 0x000004, "Wrong alignment on MinibossDetails_C_Update_Health");
static_assert(sizeof(MinibossDetails_C_Update_Health) == 0x000004, "Wrong size on MinibossDetails_C_Update_Health");
static_assert(offsetof(MinibossDetails_C_Update_Health, InPercent) == 0x000000, "Member 'MinibossDetails_C_Update_Health::InPercent' has a wrong offset!");

// Function MinibossDetails.MinibossDetails_C.Intro
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) MinibossDetails_C_Intro final
{
public:
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue2;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MinibossDetails_C_Intro) == 0x000008, "Wrong alignment on MinibossDetails_C_Intro");
static_assert(sizeof(MinibossDetails_C_Intro) == 0x000020, "Wrong size on MinibossDetails_C_Intro");
static_assert(offsetof(MinibossDetails_C_Intro, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000000, "Member 'MinibossDetails_C_Intro::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_Intro, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'MinibossDetails_C_Intro::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_Intro, CallFunc_IsAnimationPlaying_ReturnValue2) == 0x000018, "Member 'MinibossDetails_C_Intro::CallFunc_IsAnimationPlaying_ReturnValue2' has a wrong offset!");

// Function MinibossDetails.MinibossDetails_C.Outro
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) MinibossDetails_C_Outro final
{
public:
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue2;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MinibossDetails_C_Outro) == 0x000008, "Wrong alignment on MinibossDetails_C_Outro");
static_assert(sizeof(MinibossDetails_C_Outro) == 0x000020, "Wrong size on MinibossDetails_C_Outro");
static_assert(offsetof(MinibossDetails_C_Outro, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000000, "Member 'MinibossDetails_C_Outro::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_Outro, CallFunc_IsAnimationPlaying_ReturnValue2) == 0x000001, "Member 'MinibossDetails_C_Outro::CallFunc_IsAnimationPlaying_ReturnValue2' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_Outro, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'MinibossDetails_C_Outro::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_Outro, CallFunc_IsVisible_ReturnValue) == 0x000018, "Member 'MinibossDetails_C_Outro::CallFunc_IsVisible_ReturnValue' has a wrong offset!");

// Function MinibossDetails.MinibossDetails_C.Kill
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) MinibossDetails_C_Kill final
{
public:
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue2;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MinibossDetails_C_Kill) == 0x000008, "Wrong alignment on MinibossDetails_C_Kill");
static_assert(sizeof(MinibossDetails_C_Kill) == 0x000020, "Wrong size on MinibossDetails_C_Kill");
static_assert(offsetof(MinibossDetails_C_Kill, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000000, "Member 'MinibossDetails_C_Kill::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_Kill, CallFunc_IsAnimationPlaying_ReturnValue2) == 0x000001, "Member 'MinibossDetails_C_Kill::CallFunc_IsAnimationPlaying_ReturnValue2' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_Kill, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'MinibossDetails_C_Kill::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_Kill, CallFunc_IsVisible_ReturnValue) == 0x000018, "Member 'MinibossDetails_C_Kill::CallFunc_IsVisible_ReturnValue' has a wrong offset!");

// Function MinibossDetails.MinibossDetails_C.OnKillAnimationFinished
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) MinibossDetails_C_OnKillAnimationFinished final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(MinibossDetails_C_OnKillAnimationFinished) == 0x000008, "Wrong alignment on MinibossDetails_C_OnKillAnimationFinished");
static_assert(sizeof(MinibossDetails_C_OnKillAnimationFinished) == 0x000010, "Wrong size on MinibossDetails_C_OnKillAnimationFinished");
static_assert(offsetof(MinibossDetails_C_OnKillAnimationFinished, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'MinibossDetails_C_OnKillAnimationFinished::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function MinibossDetails.MinibossDetails_C.StopKillAnimation
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) MinibossDetails_C_StopKillAnimation final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(MinibossDetails_C_StopKillAnimation) == 0x000008, "Wrong alignment on MinibossDetails_C_StopKillAnimation");
static_assert(sizeof(MinibossDetails_C_StopKillAnimation) == 0x000010, "Wrong size on MinibossDetails_C_StopKillAnimation");
static_assert(offsetof(MinibossDetails_C_StopKillAnimation, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'MinibossDetails_C_StopKillAnimation::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function MinibossDetails.MinibossDetails_C.OnOutroAnimationFinished
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) MinibossDetails_C_OnOutroAnimationFinished final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(MinibossDetails_C_OnOutroAnimationFinished) == 0x000008, "Wrong alignment on MinibossDetails_C_OnOutroAnimationFinished");
static_assert(sizeof(MinibossDetails_C_OnOutroAnimationFinished) == 0x000010, "Wrong size on MinibossDetails_C_OnOutroAnimationFinished");
static_assert(offsetof(MinibossDetails_C_OnOutroAnimationFinished, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'MinibossDetails_C_OnOutroAnimationFinished::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function MinibossDetails.MinibossDetails_C.StopOutroAnimation
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) MinibossDetails_C_StopOutroAnimation final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(MinibossDetails_C_StopOutroAnimation) == 0x000008, "Wrong alignment on MinibossDetails_C_StopOutroAnimation");
static_assert(sizeof(MinibossDetails_C_StopOutroAnimation) == 0x000010, "Wrong size on MinibossDetails_C_StopOutroAnimation");
static_assert(offsetof(MinibossDetails_C_StopOutroAnimation, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'MinibossDetails_C_StopOutroAnimation::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function MinibossDetails.MinibossDetails_C.OnIntroAnimationFinished
// 0x0020 (0x0020 - 0x0000)
struct MinibossDetails_C_OnIntroAnimationFinished final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
	class UObject*                                CallFunc_Conv_InterfaceToObject_ReturnValue;       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MinibossDetails_C_OnIntroAnimationFinished) == 0x000008, "Wrong alignment on MinibossDetails_C_OnIntroAnimationFinished");
static_assert(sizeof(MinibossDetails_C_OnIntroAnimationFinished) == 0x000020, "Wrong size on MinibossDetails_C_OnIntroAnimationFinished");
static_assert(offsetof(MinibossDetails_C_OnIntroAnimationFinished, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'MinibossDetails_C_OnIntroAnimationFinished::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_OnIntroAnimationFinished, CallFunc_Conv_InterfaceToObject_ReturnValue) == 0x000010, "Member 'MinibossDetails_C_OnIntroAnimationFinished::CallFunc_Conv_InterfaceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinibossDetails_C_OnIntroAnimationFinished, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'MinibossDetails_C_OnIntroAnimationFinished::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function MinibossDetails.MinibossDetails_C.StopIntroAnimation
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) MinibossDetails_C_StopIntroAnimation final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(MinibossDetails_C_StopIntroAnimation) == 0x000008, "Wrong alignment on MinibossDetails_C_StopIntroAnimation");
static_assert(sizeof(MinibossDetails_C_StopIntroAnimation) == 0x000010, "Wrong size on MinibossDetails_C_StopIntroAnimation");
static_assert(offsetof(MinibossDetails_C_StopIntroAnimation, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'MinibossDetails_C_StopIntroAnimation::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

}

