#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PerkWidgetNew

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "FortniteUI_classes.hpp"
#include "SlateCore_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass PerkWidgetNew.PerkWidgetNew_C
// 0x0198 (0x0450 - 0x02B8)
class UPerkWidgetNew_C final : public UFortPerkWidget_NUI
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B8(0x0008)(Transient, DuplicateTransient)
	class UBorder*                                BorderAbility;                                     // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                BorderHighlightBorder;                             // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                BorderHightlightBackground;                        // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonBorder*                          Divider;                                           // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonBorder*                          EvolutionBorder;                                   // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HorizontalBox_1;                                   // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ImageAbilityIcon;                                  // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ImageHeroBonusIcon;                                // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ImageLockAbility;                                  // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ImageLockPerk;                                     // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ImagePerkIcon;                                     // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ImageTier;                                         // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonWidgetSwitcher*                  InfoSwitcher;                                      // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       LargeInfo;                                         // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       LevelTextNew;                                      // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               OverlayAbilityPerk;                                // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               OverlayBadge;                                      // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               OverlayBasicPerk;                                  // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               OverlayImagePerk;                                  // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               OverlayLevel;                                      // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       SkillDescription;                                  // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       SkillName;                                         // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           SmallInfo;                                         // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        WidgetSwitcherBasicPerkOrAbilityPerk;              // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        WidgetSwitcherTierOrLevel;                         // 0x0380(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FSlateBrush                            DemoImage;                                         // 0x0388(0x0078)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bIncludeName;                                      // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          bIncludeDescription;                               // 0x0401(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_402[0x6];                                      // 0x0402(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextBlock*                             LevelText_0;                                       // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortBrushSize                                IconSize;                                          // 0x0410(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bUseLargeFormatName;                               // 0x0411(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_412[0x6];                                      // 0x0412(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Locked_Text_Style;                                 // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Locked_Description_Style;                          // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                ListPadding;                                       // 0x0428(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	class UClass*                                 Default_Description_Style;                         // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Default_Text_Style;                                // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableMouseTooltips;                              // 0x0448(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)

public:
	void ExecuteUbergraph_PerkWidgetNew(int32 EntryPoint);
	void Construct();
	void PreConstruct(bool IsDesignTime);
	void InitializeBasicPerk();
	void InitializeAbilityPerk();
	void GetTierAbilityBrush(struct FSlateBrush* SlateBrush);
	void GetHighlightColor(struct FLinearColor* Color);
	void ShouldFadePerk(bool* Result);
	void InitializeText();
	void InitializeHeroBonusIcon();
	void SetupBadge();
	void ShowTierImage();
	void GetPerkStat(struct FTooltipStat* TooltipStat);
	void HighlightBadge();
	void InitializeSettings(bool Param_bIncludeName, bool Param_bIncludeDescription, EFortBrushSize Param_IconSize, bool Param_bUseLargeFormatName, const struct FFortUIPerk& Param_Perk, bool ShowMouseTooltips);
	class UWidget* Get_OverlayAbilityPerk_ToolTipWidget();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PerkWidgetNew_C">();
	}
	static class UPerkWidgetNew_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPerkWidgetNew_C>();
	}
};
static_assert(alignof(UPerkWidgetNew_C) == 0x000008, "Wrong alignment on UPerkWidgetNew_C");
static_assert(sizeof(UPerkWidgetNew_C) == 0x000450, "Wrong size on UPerkWidgetNew_C");
static_assert(offsetof(UPerkWidgetNew_C, UberGraphFrame) == 0x0002B8, "Member 'UPerkWidgetNew_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UPerkWidgetNew_C, BorderAbility) == 0x0002C0, "Member 'UPerkWidgetNew_C::BorderAbility' has a wrong offset!");
static_assert(offsetof(UPerkWidgetNew_C, BorderHighlightBorder) == 0x0002C8, "Member 'UPerkWidgetNew_C::BorderHighlightBorder' has a wrong offset!");
static_assert(offsetof(UPerkWidgetNew_C, BorderHightlightBackground) == 0x0002D0, "Member 'UPerkWidgetNew_C::BorderHightlightBackground' has a wrong offset!");
static_assert(offsetof(UPerkWidgetNew_C, Divider) == 0x0002D8, "Member 'UPerkWidgetNew_C::Divider' has a wrong offset!");
static_assert(offsetof(UPerkWidgetNew_C, EvolutionBorder) == 0x0002E0, "Member 'UPerkWidgetNew_C::EvolutionBorder' has a wrong offset!");
static_assert(offsetof(UPerkWidgetNew_C, HorizontalBox_1) == 0x0002E8, "Member 'UPerkWidgetNew_C::HorizontalBox_1' has a wrong offset!");
static_assert(offsetof(UPerkWidgetNew_C, ImageAbilityIcon) == 0x0002F0, "Member 'UPerkWidgetNew_C::ImageAbilityIcon' has a wrong offset!");
static_assert(offsetof(UPerkWidgetNew_C, ImageHeroBonusIcon) == 0x0002F8, "Member 'UPerkWidgetNew_C::ImageHeroBonusIcon' has a wrong offset!");
static_assert(offsetof(UPerkWidgetNew_C, ImageLockAbility) == 0x000300, "Member 'UPerkWidgetNew_C::ImageLockAbility' has a wrong offset!");
static_assert(offsetof(UPerkWidgetNew_C, ImageLockPerk) == 0x000308, "Member 'UPerkWidgetNew_C::ImageLockPerk' has a wrong offset!");
static_assert(offsetof(UPerkWidgetNew_C, ImagePerkIcon) == 0x000310, "Member 'UPerkWidgetNew_C::ImagePerkIcon' has a wrong offset!");
static_assert(offsetof(UPerkWidgetNew_C, ImageTier) == 0x000318, "Member 'UPerkWidgetNew_C::ImageTier' has a wrong offset!");
static_assert(offsetof(UPerkWidgetNew_C, InfoSwitcher) == 0x000320, "Member 'UPerkWidgetNew_C::InfoSwitcher' has a wrong offset!");
static_assert(offsetof(UPerkWidgetNew_C, LargeInfo) == 0x000328, "Member 'UPerkWidgetNew_C::LargeInfo' has a wrong offset!");
static_assert(offsetof(UPerkWidgetNew_C, LevelTextNew) == 0x000330, "Member 'UPerkWidgetNew_C::LevelTextNew' has a wrong offset!");
static_assert(offsetof(UPerkWidgetNew_C, OverlayAbilityPerk) == 0x000338, "Member 'UPerkWidgetNew_C::OverlayAbilityPerk' has a wrong offset!");
static_assert(offsetof(UPerkWidgetNew_C, OverlayBadge) == 0x000340, "Member 'UPerkWidgetNew_C::OverlayBadge' has a wrong offset!");
static_assert(offsetof(UPerkWidgetNew_C, OverlayBasicPerk) == 0x000348, "Member 'UPerkWidgetNew_C::OverlayBasicPerk' has a wrong offset!");
static_assert(offsetof(UPerkWidgetNew_C, OverlayImagePerk) == 0x000350, "Member 'UPerkWidgetNew_C::OverlayImagePerk' has a wrong offset!");
static_assert(offsetof(UPerkWidgetNew_C, OverlayLevel) == 0x000358, "Member 'UPerkWidgetNew_C::OverlayLevel' has a wrong offset!");
static_assert(offsetof(UPerkWidgetNew_C, SkillDescription) == 0x000360, "Member 'UPerkWidgetNew_C::SkillDescription' has a wrong offset!");
static_assert(offsetof(UPerkWidgetNew_C, SkillName) == 0x000368, "Member 'UPerkWidgetNew_C::SkillName' has a wrong offset!");
static_assert(offsetof(UPerkWidgetNew_C, SmallInfo) == 0x000370, "Member 'UPerkWidgetNew_C::SmallInfo' has a wrong offset!");
static_assert(offsetof(UPerkWidgetNew_C, WidgetSwitcherBasicPerkOrAbilityPerk) == 0x000378, "Member 'UPerkWidgetNew_C::WidgetSwitcherBasicPerkOrAbilityPerk' has a wrong offset!");
static_assert(offsetof(UPerkWidgetNew_C, WidgetSwitcherTierOrLevel) == 0x000380, "Member 'UPerkWidgetNew_C::WidgetSwitcherTierOrLevel' has a wrong offset!");
static_assert(offsetof(UPerkWidgetNew_C, DemoImage) == 0x000388, "Member 'UPerkWidgetNew_C::DemoImage' has a wrong offset!");
static_assert(offsetof(UPerkWidgetNew_C, bIncludeName) == 0x000400, "Member 'UPerkWidgetNew_C::bIncludeName' has a wrong offset!");
static_assert(offsetof(UPerkWidgetNew_C, bIncludeDescription) == 0x000401, "Member 'UPerkWidgetNew_C::bIncludeDescription' has a wrong offset!");
static_assert(offsetof(UPerkWidgetNew_C, LevelText_0) == 0x000408, "Member 'UPerkWidgetNew_C::LevelText_0' has a wrong offset!");
static_assert(offsetof(UPerkWidgetNew_C, IconSize) == 0x000410, "Member 'UPerkWidgetNew_C::IconSize' has a wrong offset!");
static_assert(offsetof(UPerkWidgetNew_C, bUseLargeFormatName) == 0x000411, "Member 'UPerkWidgetNew_C::bUseLargeFormatName' has a wrong offset!");
static_assert(offsetof(UPerkWidgetNew_C, Locked_Text_Style) == 0x000418, "Member 'UPerkWidgetNew_C::Locked_Text_Style' has a wrong offset!");
static_assert(offsetof(UPerkWidgetNew_C, Locked_Description_Style) == 0x000420, "Member 'UPerkWidgetNew_C::Locked_Description_Style' has a wrong offset!");
static_assert(offsetof(UPerkWidgetNew_C, ListPadding) == 0x000428, "Member 'UPerkWidgetNew_C::ListPadding' has a wrong offset!");
static_assert(offsetof(UPerkWidgetNew_C, Default_Description_Style) == 0x000438, "Member 'UPerkWidgetNew_C::Default_Description_Style' has a wrong offset!");
static_assert(offsetof(UPerkWidgetNew_C, Default_Text_Style) == 0x000440, "Member 'UPerkWidgetNew_C::Default_Text_Style' has a wrong offset!");
static_assert(offsetof(UPerkWidgetNew_C, bEnableMouseTooltips) == 0x000448, "Member 'UPerkWidgetNew_C::bEnableMouseTooltips' has a wrong offset!");

}

