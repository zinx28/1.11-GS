#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AthenaPlayerLevel

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CommonUI_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass AthenaPlayerLevel.AthenaPlayerLevel_C
// 0x0098 (0x02A8 - 0x0210)
class UAthenaPlayerLevel_C final : public UCommonUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0210(0x0008)(Transient, DuplicateTransient)
	class UWidgetAnimation*                       AnimateXpAndLevel;                                 // 0x0218(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetAnimation*                       AnimateXp;                                         // 0x0220(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Divider;                                           // 0x0228(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UNamedSlot*                             ExtraContentArea;                                  // 0x0230(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UNamedSlot*                             LevelRewardArea;                                   // 0x0238(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       LevelText;                                         // 0x0240(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UPlayerRankEmblem_C*                    PlayerBanner;                                      // 0x0248(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 RewardArrowImage;                                  // 0x0250(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 XpBar;                                             // 0x0258(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       XPneeded;                                          // 0x0260(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       XPOwned;                                           // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          Animating;                                         // 0x0270(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_271[0x3];                                      // 0x0271(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentXP;                                         // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TargetXp;                                          // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WrapAroundXp;                                      // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         XpToAdd;                                           // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         XpLerp;                                            // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentLevel;                                      // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxLevel;                                          // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LevelXpForLevel;                                   // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_294[0x4];                                      // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   LevelChanged;                                      // 0x0298(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void LevelChanged__DelegateSignature(int32 Level);
	void ExecuteUbergraph_AthenaPlayerLevel(int32 EntryPoint);
	void Destruct();
	void EventTrack_Leveled();
	void Play_XP_Reward_Directly(int32 Param_XpToAdd);
	void BndEvt__AnimateXpAndLevel_K2Node_ComponentBoundEvent_1_OnWidgetAnimationPlaybackStatusChanged__DelegateSignature();
	void BndEvt__AnimateXp_K2Node_ComponentBoundEvent_0_OnWidgetAnimationPlaybackStatusChanged__DelegateSignature();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void Play_Xp_Reward(const struct FAthenaMatchXpReward& Reward);
	void InitializeFromAccount(struct FFortPublicAccountInfo& FortPublicAccountInfo);
	void InitializeFromLevelInfo(const struct FAthenaLevelInfo& LevelInfo);
	void IsReadyForNextXpReward(bool* Ready);
	void UpdateXp(int32 LevelXp, int32 Param_LevelXpForLevel, int32 Level, int32 Param_MaxLevel);
	void UpdateLevel(int32 Value);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AthenaPlayerLevel_C">();
	}
	static class UAthenaPlayerLevel_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaPlayerLevel_C>();
	}
};
static_assert(alignof(UAthenaPlayerLevel_C) == 0x000008, "Wrong alignment on UAthenaPlayerLevel_C");
static_assert(sizeof(UAthenaPlayerLevel_C) == 0x0002A8, "Wrong size on UAthenaPlayerLevel_C");
static_assert(offsetof(UAthenaPlayerLevel_C, UberGraphFrame) == 0x000210, "Member 'UAthenaPlayerLevel_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerLevel_C, AnimateXpAndLevel) == 0x000218, "Member 'UAthenaPlayerLevel_C::AnimateXpAndLevel' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerLevel_C, AnimateXp) == 0x000220, "Member 'UAthenaPlayerLevel_C::AnimateXp' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerLevel_C, Divider) == 0x000228, "Member 'UAthenaPlayerLevel_C::Divider' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerLevel_C, ExtraContentArea) == 0x000230, "Member 'UAthenaPlayerLevel_C::ExtraContentArea' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerLevel_C, LevelRewardArea) == 0x000238, "Member 'UAthenaPlayerLevel_C::LevelRewardArea' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerLevel_C, LevelText) == 0x000240, "Member 'UAthenaPlayerLevel_C::LevelText' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerLevel_C, PlayerBanner) == 0x000248, "Member 'UAthenaPlayerLevel_C::PlayerBanner' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerLevel_C, RewardArrowImage) == 0x000250, "Member 'UAthenaPlayerLevel_C::RewardArrowImage' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerLevel_C, XpBar) == 0x000258, "Member 'UAthenaPlayerLevel_C::XpBar' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerLevel_C, XPneeded) == 0x000260, "Member 'UAthenaPlayerLevel_C::XPneeded' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerLevel_C, XPOwned) == 0x000268, "Member 'UAthenaPlayerLevel_C::XPOwned' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerLevel_C, Animating) == 0x000270, "Member 'UAthenaPlayerLevel_C::Animating' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerLevel_C, CurrentXP) == 0x000274, "Member 'UAthenaPlayerLevel_C::CurrentXP' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerLevel_C, TargetXp) == 0x000278, "Member 'UAthenaPlayerLevel_C::TargetXp' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerLevel_C, WrapAroundXp) == 0x00027C, "Member 'UAthenaPlayerLevel_C::WrapAroundXp' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerLevel_C, XpToAdd) == 0x000280, "Member 'UAthenaPlayerLevel_C::XpToAdd' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerLevel_C, XpLerp) == 0x000284, "Member 'UAthenaPlayerLevel_C::XpLerp' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerLevel_C, CurrentLevel) == 0x000288, "Member 'UAthenaPlayerLevel_C::CurrentLevel' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerLevel_C, MaxLevel) == 0x00028C, "Member 'UAthenaPlayerLevel_C::MaxLevel' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerLevel_C, LevelXpForLevel) == 0x000290, "Member 'UAthenaPlayerLevel_C::LevelXpForLevel' has a wrong offset!");
static_assert(offsetof(UAthenaPlayerLevel_C, LevelChanged) == 0x000298, "Member 'UAthenaPlayerLevel_C::LevelChanged' has a wrong offset!");

}

