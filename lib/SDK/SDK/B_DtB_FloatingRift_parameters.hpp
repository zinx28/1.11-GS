#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_DtB_FloatingRift

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function B_DtB_FloatingRift.B_DtB_FloatingRift_C.RiftLocated__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct B_DtB_FloatingRift_C_RiftLocated__DelegateSignature final
{
public:
	class AFortPlayerPawn*                        FortPlayPawn;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_DtB_FloatingRift_C_RiftLocated__DelegateSignature) == 0x000008, "Wrong alignment on B_DtB_FloatingRift_C_RiftLocated__DelegateSignature");
static_assert(sizeof(B_DtB_FloatingRift_C_RiftLocated__DelegateSignature) == 0x000008, "Wrong size on B_DtB_FloatingRift_C_RiftLocated__DelegateSignature");
static_assert(offsetof(B_DtB_FloatingRift_C_RiftLocated__DelegateSignature, FortPlayPawn) == 0x000000, "Member 'B_DtB_FloatingRift_C_RiftLocated__DelegateSignature::FortPlayPawn' has a wrong offset!");

// Function B_DtB_FloatingRift.B_DtB_FloatingRift_C.CallOutVolumeOverlap__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct B_DtB_FloatingRift_C_CallOutVolumeOverlap__DelegateSignature final
{
public:
	class AFortPlayerPawn*                        FortPlayerPawn;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_DtB_FloatingRift_C_CallOutVolumeOverlap__DelegateSignature) == 0x000008, "Wrong alignment on B_DtB_FloatingRift_C_CallOutVolumeOverlap__DelegateSignature");
static_assert(sizeof(B_DtB_FloatingRift_C_CallOutVolumeOverlap__DelegateSignature) == 0x000008, "Wrong size on B_DtB_FloatingRift_C_CallOutVolumeOverlap__DelegateSignature");
static_assert(offsetof(B_DtB_FloatingRift_C_CallOutVolumeOverlap__DelegateSignature, FortPlayerPawn) == 0x000000, "Member 'B_DtB_FloatingRift_C_CallOutVolumeOverlap__DelegateSignature::FortPlayerPawn' has a wrong offset!");

// Function B_DtB_FloatingRift.B_DtB_FloatingRift_C.ExecuteUbergraph_B_DtB_FloatingRift
// 0x03B8 (0x03B8 - 0x0000)
struct B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0004(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent4;   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor4;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp4;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex4;        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep3;            // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult3;           // 0x0030(0x0080)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent3;   // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor3;            // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp3;             // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex3;        // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        K2Node_DynamicCast_AsFort_Player_Pawn;             // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        K2Node_DynamicCast_AsFort_Player_Pawn2;            // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors;   // 0x00F0(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0105(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0106(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_107[0x1];                                      // 0x0107(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent2;   // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor2;            // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp2;             // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex2;        // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep2;            // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_125[0x3];                                      // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult2;           // 0x0128(0x0080)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AFortPlayerPawn*                        K2Node_DynamicCast_AsFort_Player_Pawn3;            // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess3;                      // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B1[0x3];                                      // 0x01B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  K2Node_HandleMissionEvent_MissionGuid;             // 0x01B4(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C4[0x4];                                      // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  K2Node_HandleMissionEvent_ObjectiveHandle;         // 0x01C8(0x0020)()
	class UFortMissionEventParams*                K2Node_HandleMissionEvent_Params;                  // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_HandleMissionEvent_DO_NOT_USE_THIS_OR_VARIABLES_BELOW; // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_HandleMissionEvent_EventFocus;              // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataAsset*                             K2Node_HandleMissionEvent_EventContent;            // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_HandleMissionEvent_EventInstigator;         // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_HandleMissionEvent_GenericInt;              // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_HandleMissionEvent_GenericFloat;            // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_HandleMissionEvent_GenericText;             // 0x0218(0x0018)()
	struct FGameplayTagContainer                  K2Node_HandleMissionEvent_GameplayTags;            // 0x0230(0x0020)()
	struct FFortMissionEvent                      K2Node_HandleMissionEvent_MissionEvent;            // 0x0250(0x0098)()
	bool                                          CallFunc_DoesAnyoneRequireQuest_SomePlayerNeedsTheQuest; // 0x02E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoesAnyoneRequireQuest_SomePlayerNeedsTheQuest2; // 0x02E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2EA[0x6];                                      // 0x02EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x02F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0300(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0308(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x030C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30D[0x3];                                      // 0x030D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0310(0x0080)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AFortPlayerPawn*                        K2Node_DynamicCast_AsFort_Player_Pawn4;            // 0x0390(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess4;                      // 0x0398(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_399[0x7];                                      // 0x0399(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_ComponentBoundEvent_EventName;              // 0x03A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_ComponentBoundEvent_EmitterTime;            // 0x03A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_ParticleCount;          // 0x03AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x03B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift) == 0x000008, "Wrong alignment on B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift");
static_assert(sizeof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift) == 0x0003B8, "Wrong size on B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, EntryPoint) == 0x000000, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::EntryPoint' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000004, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_ComponentBoundEvent_OverlappedComponent4) == 0x000010, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_ComponentBoundEvent_OverlappedComponent4' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_ComponentBoundEvent_OtherActor4) == 0x000018, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_ComponentBoundEvent_OtherActor4' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_ComponentBoundEvent_OtherComp4) == 0x000020, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_ComponentBoundEvent_OtherComp4' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_ComponentBoundEvent_OtherBodyIndex4) == 0x000028, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_ComponentBoundEvent_OtherBodyIndex4' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_ComponentBoundEvent_bFromSweep3) == 0x00002C, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_ComponentBoundEvent_bFromSweep3' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_ComponentBoundEvent_SweepResult3) == 0x000030, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_ComponentBoundEvent_SweepResult3' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_ComponentBoundEvent_OverlappedComponent3) == 0x0000B0, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_ComponentBoundEvent_OverlappedComponent3' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_ComponentBoundEvent_OtherActor3) == 0x0000B8, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_ComponentBoundEvent_OtherActor3' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_ComponentBoundEvent_OtherComp3) == 0x0000C0, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_ComponentBoundEvent_OtherComp3' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_ComponentBoundEvent_OtherBodyIndex3) == 0x0000C8, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_ComponentBoundEvent_OtherBodyIndex3' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_DynamicCast_AsFort_Player_Pawn) == 0x0000D0, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_DynamicCast_AsFort_Player_Pawn' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_DynamicCast_bSuccess) == 0x0000D8, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_DynamicCast_AsFort_Player_Pawn2) == 0x0000E0, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_DynamicCast_AsFort_Player_Pawn2' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_DynamicCast_bSuccess2) == 0x0000E8, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, CallFunc_GetOverlappingActors_OverlappingActors) == 0x0000F0, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::CallFunc_GetOverlappingActors_OverlappingActors' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, CallFunc_Array_Length_ReturnValue) == 0x000100, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, Temp_bool_IsClosed_Variable) == 0x000104, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000105, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, Temp_bool_Has_Been_Initd_Variable) == 0x000106, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_ComponentBoundEvent_OverlappedComponent2) == 0x000108, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_ComponentBoundEvent_OverlappedComponent2' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_ComponentBoundEvent_OtherActor2) == 0x000110, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_ComponentBoundEvent_OtherActor2' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_ComponentBoundEvent_OtherComp2) == 0x000118, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_ComponentBoundEvent_OtherComp2' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_ComponentBoundEvent_OtherBodyIndex2) == 0x000120, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_ComponentBoundEvent_OtherBodyIndex2' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_ComponentBoundEvent_bFromSweep2) == 0x000124, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_ComponentBoundEvent_bFromSweep2' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_ComponentBoundEvent_SweepResult2) == 0x000128, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_ComponentBoundEvent_SweepResult2' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_DynamicCast_AsFort_Player_Pawn3) == 0x0001A8, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_DynamicCast_AsFort_Player_Pawn3' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_DynamicCast_bSuccess3) == 0x0001B0, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_DynamicCast_bSuccess3' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_HandleMissionEvent_MissionGuid) == 0x0001B4, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_HandleMissionEvent_MissionGuid' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_HandleMissionEvent_ObjectiveHandle) == 0x0001C8, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_HandleMissionEvent_ObjectiveHandle' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_HandleMissionEvent_Params) == 0x0001E8, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_HandleMissionEvent_Params' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_HandleMissionEvent_DO_NOT_USE_THIS_OR_VARIABLES_BELOW) == 0x0001F0, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_HandleMissionEvent_DO_NOT_USE_THIS_OR_VARIABLES_BELOW' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_HandleMissionEvent_EventFocus) == 0x0001F8, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_HandleMissionEvent_EventFocus' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_HandleMissionEvent_EventContent) == 0x000200, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_HandleMissionEvent_EventContent' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_HandleMissionEvent_EventInstigator) == 0x000208, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_HandleMissionEvent_EventInstigator' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_HandleMissionEvent_GenericInt) == 0x000210, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_HandleMissionEvent_GenericInt' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_HandleMissionEvent_GenericFloat) == 0x000214, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_HandleMissionEvent_GenericFloat' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_HandleMissionEvent_GenericText) == 0x000218, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_HandleMissionEvent_GenericText' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_HandleMissionEvent_GameplayTags) == 0x000230, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_HandleMissionEvent_GameplayTags' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_HandleMissionEvent_MissionEvent) == 0x000250, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_HandleMissionEvent_MissionEvent' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, CallFunc_DoesAnyoneRequireQuest_SomePlayerNeedsTheQuest) == 0x0002E8, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::CallFunc_DoesAnyoneRequireQuest_SomePlayerNeedsTheQuest' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, CallFunc_DoesAnyoneRequireQuest_SomePlayerNeedsTheQuest2) == 0x0002E9, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::CallFunc_DoesAnyoneRequireQuest_SomePlayerNeedsTheQuest2' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x0002F0, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_ComponentBoundEvent_OtherActor) == 0x0002F8, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_ComponentBoundEvent_OtherComp) == 0x000300, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000308, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_ComponentBoundEvent_bFromSweep) == 0x00030C, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_ComponentBoundEvent_SweepResult) == 0x000310, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_DynamicCast_AsFort_Player_Pawn4) == 0x000390, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_DynamicCast_AsFort_Player_Pawn4' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_DynamicCast_bSuccess4) == 0x000398, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_DynamicCast_bSuccess4' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_ComponentBoundEvent_EventName) == 0x0003A0, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_ComponentBoundEvent_EventName' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_ComponentBoundEvent_EmitterTime) == 0x0003A8, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_ComponentBoundEvent_EmitterTime' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, K2Node_ComponentBoundEvent_ParticleCount) == 0x0003AC, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::K2Node_ComponentBoundEvent_ParticleCount' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift, CallFunc_EqualEqual_NameName_ReturnValue) == 0x0003B0, "Member 'B_DtB_FloatingRift_C_ExecuteUbergraph_B_DtB_FloatingRift::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");

// Function B_DtB_FloatingRift.B_DtB_FloatingRift_C.BndEvt__P_DtBRiftCore_K2Node_ComponentBoundEvent_12_ParticleBurstSignature__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) B_DtB_FloatingRift_C_BndEvt__P_DtBRiftCore_K2Node_ComponentBoundEvent_12_ParticleBurstSignature__DelegateSignature final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EmitterTime;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ParticleCount;                                     // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_DtB_FloatingRift_C_BndEvt__P_DtBRiftCore_K2Node_ComponentBoundEvent_12_ParticleBurstSignature__DelegateSignature) == 0x000008, "Wrong alignment on B_DtB_FloatingRift_C_BndEvt__P_DtBRiftCore_K2Node_ComponentBoundEvent_12_ParticleBurstSignature__DelegateSignature");
static_assert(sizeof(B_DtB_FloatingRift_C_BndEvt__P_DtBRiftCore_K2Node_ComponentBoundEvent_12_ParticleBurstSignature__DelegateSignature) == 0x000010, "Wrong size on B_DtB_FloatingRift_C_BndEvt__P_DtBRiftCore_K2Node_ComponentBoundEvent_12_ParticleBurstSignature__DelegateSignature");
static_assert(offsetof(B_DtB_FloatingRift_C_BndEvt__P_DtBRiftCore_K2Node_ComponentBoundEvent_12_ParticleBurstSignature__DelegateSignature, EventName) == 0x000000, "Member 'B_DtB_FloatingRift_C_BndEvt__P_DtBRiftCore_K2Node_ComponentBoundEvent_12_ParticleBurstSignature__DelegateSignature::EventName' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_BndEvt__P_DtBRiftCore_K2Node_ComponentBoundEvent_12_ParticleBurstSignature__DelegateSignature, EmitterTime) == 0x000008, "Member 'B_DtB_FloatingRift_C_BndEvt__P_DtBRiftCore_K2Node_ComponentBoundEvent_12_ParticleBurstSignature__DelegateSignature::EmitterTime' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_BndEvt__P_DtBRiftCore_K2Node_ComponentBoundEvent_12_ParticleBurstSignature__DelegateSignature, ParticleCount) == 0x00000C, "Member 'B_DtB_FloatingRift_C_BndEvt__P_DtBRiftCore_K2Node_ComponentBoundEvent_12_ParticleBurstSignature__DelegateSignature::ParticleCount' has a wrong offset!");

// Function B_DtB_FloatingRift.B_DtB_FloatingRift_C.BndEvt__DispatcherCallOutVolume_K2Node_ComponentBoundEvent_70_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A0 (0x00A0 - 0x0000)
struct B_DtB_FloatingRift_C_BndEvt__DispatcherCallOutVolume_K2Node_ComponentBoundEvent_70_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0080)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(B_DtB_FloatingRift_C_BndEvt__DispatcherCallOutVolume_K2Node_ComponentBoundEvent_70_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on B_DtB_FloatingRift_C_BndEvt__DispatcherCallOutVolume_K2Node_ComponentBoundEvent_70_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(B_DtB_FloatingRift_C_BndEvt__DispatcherCallOutVolume_K2Node_ComponentBoundEvent_70_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A0, "Wrong size on B_DtB_FloatingRift_C_BndEvt__DispatcherCallOutVolume_K2Node_ComponentBoundEvent_70_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(B_DtB_FloatingRift_C_BndEvt__DispatcherCallOutVolume_K2Node_ComponentBoundEvent_70_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'B_DtB_FloatingRift_C_BndEvt__DispatcherCallOutVolume_K2Node_ComponentBoundEvent_70_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_BndEvt__DispatcherCallOutVolume_K2Node_ComponentBoundEvent_70_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'B_DtB_FloatingRift_C_BndEvt__DispatcherCallOutVolume_K2Node_ComponentBoundEvent_70_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_BndEvt__DispatcherCallOutVolume_K2Node_ComponentBoundEvent_70_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'B_DtB_FloatingRift_C_BndEvt__DispatcherCallOutVolume_K2Node_ComponentBoundEvent_70_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_BndEvt__DispatcherCallOutVolume_K2Node_ComponentBoundEvent_70_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'B_DtB_FloatingRift_C_BndEvt__DispatcherCallOutVolume_K2Node_ComponentBoundEvent_70_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_BndEvt__DispatcherCallOutVolume_K2Node_ComponentBoundEvent_70_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'B_DtB_FloatingRift_C_BndEvt__DispatcherCallOutVolume_K2Node_ComponentBoundEvent_70_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_BndEvt__DispatcherCallOutVolume_K2Node_ComponentBoundEvent_70_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'B_DtB_FloatingRift_C_BndEvt__DispatcherCallOutVolume_K2Node_ComponentBoundEvent_70_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function B_DtB_FloatingRift.B_DtB_FloatingRift_C.HandleMissionEvent_NewPlayer
// 0x0130 (0x0130 - 0x0000)
struct B_DtB_FloatingRift_C_HandleMissionEvent_NewPlayer final
{
public:
	struct FGuid                                  MissionGuid;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  ObjectiveHandle;                                   // 0x0010(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UFortMissionEventParams*                Params_0;                                          // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DO_NOT_USE_THIS_OR_VARIABLES_BELOW;                // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                EventFocus;                                        // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UDataAsset*                       EventContent;                                      // 0x0048(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 EventInstigator;                                   // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GenericInt;                                        // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GenericFloat;                                      // 0x005C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   GenericText;                                       // 0x0060(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0078(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FFortMissionEvent                      MissionEvent;                                      // 0x0098(0x0098)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(B_DtB_FloatingRift_C_HandleMissionEvent_NewPlayer) == 0x000008, "Wrong alignment on B_DtB_FloatingRift_C_HandleMissionEvent_NewPlayer");
static_assert(sizeof(B_DtB_FloatingRift_C_HandleMissionEvent_NewPlayer) == 0x000130, "Wrong size on B_DtB_FloatingRift_C_HandleMissionEvent_NewPlayer");
static_assert(offsetof(B_DtB_FloatingRift_C_HandleMissionEvent_NewPlayer, MissionGuid) == 0x000000, "Member 'B_DtB_FloatingRift_C_HandleMissionEvent_NewPlayer::MissionGuid' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_HandleMissionEvent_NewPlayer, ObjectiveHandle) == 0x000010, "Member 'B_DtB_FloatingRift_C_HandleMissionEvent_NewPlayer::ObjectiveHandle' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_HandleMissionEvent_NewPlayer, Params_0) == 0x000030, "Member 'B_DtB_FloatingRift_C_HandleMissionEvent_NewPlayer::Params_0' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_HandleMissionEvent_NewPlayer, DO_NOT_USE_THIS_OR_VARIABLES_BELOW) == 0x000038, "Member 'B_DtB_FloatingRift_C_HandleMissionEvent_NewPlayer::DO_NOT_USE_THIS_OR_VARIABLES_BELOW' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_HandleMissionEvent_NewPlayer, EventFocus) == 0x000040, "Member 'B_DtB_FloatingRift_C_HandleMissionEvent_NewPlayer::EventFocus' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_HandleMissionEvent_NewPlayer, EventContent) == 0x000048, "Member 'B_DtB_FloatingRift_C_HandleMissionEvent_NewPlayer::EventContent' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_HandleMissionEvent_NewPlayer, EventInstigator) == 0x000050, "Member 'B_DtB_FloatingRift_C_HandleMissionEvent_NewPlayer::EventInstigator' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_HandleMissionEvent_NewPlayer, GenericInt) == 0x000058, "Member 'B_DtB_FloatingRift_C_HandleMissionEvent_NewPlayer::GenericInt' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_HandleMissionEvent_NewPlayer, GenericFloat) == 0x00005C, "Member 'B_DtB_FloatingRift_C_HandleMissionEvent_NewPlayer::GenericFloat' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_HandleMissionEvent_NewPlayer, GenericText) == 0x000060, "Member 'B_DtB_FloatingRift_C_HandleMissionEvent_NewPlayer::GenericText' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_HandleMissionEvent_NewPlayer, GameplayTags) == 0x000078, "Member 'B_DtB_FloatingRift_C_HandleMissionEvent_NewPlayer::GameplayTags' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_HandleMissionEvent_NewPlayer, MissionEvent) == 0x000098, "Member 'B_DtB_FloatingRift_C_HandleMissionEvent_NewPlayer::MissionEvent' has a wrong offset!");

// Function B_DtB_FloatingRift.B_DtB_FloatingRift_C.BndEvt__KillVolume_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A0 (0x00A0 - 0x0000)
struct B_DtB_FloatingRift_C_BndEvt__KillVolume_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0080)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(B_DtB_FloatingRift_C_BndEvt__KillVolume_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on B_DtB_FloatingRift_C_BndEvt__KillVolume_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(B_DtB_FloatingRift_C_BndEvt__KillVolume_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A0, "Wrong size on B_DtB_FloatingRift_C_BndEvt__KillVolume_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(B_DtB_FloatingRift_C_BndEvt__KillVolume_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'B_DtB_FloatingRift_C_BndEvt__KillVolume_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_BndEvt__KillVolume_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'B_DtB_FloatingRift_C_BndEvt__KillVolume_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_BndEvt__KillVolume_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'B_DtB_FloatingRift_C_BndEvt__KillVolume_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_BndEvt__KillVolume_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'B_DtB_FloatingRift_C_BndEvt__KillVolume_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_BndEvt__KillVolume_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'B_DtB_FloatingRift_C_BndEvt__KillVolume_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_BndEvt__KillVolume_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'B_DtB_FloatingRift_C_BndEvt__KillVolume_K2Node_ComponentBoundEvent_84_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function B_DtB_FloatingRift.B_DtB_FloatingRift_C.BndEvt__RiftArcTriggerVolume_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct B_DtB_FloatingRift_C_BndEvt__RiftArcTriggerVolume_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_DtB_FloatingRift_C_BndEvt__RiftArcTriggerVolume_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on B_DtB_FloatingRift_C_BndEvt__RiftArcTriggerVolume_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(B_DtB_FloatingRift_C_BndEvt__RiftArcTriggerVolume_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on B_DtB_FloatingRift_C_BndEvt__RiftArcTriggerVolume_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(B_DtB_FloatingRift_C_BndEvt__RiftArcTriggerVolume_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'B_DtB_FloatingRift_C_BndEvt__RiftArcTriggerVolume_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_BndEvt__RiftArcTriggerVolume_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'B_DtB_FloatingRift_C_BndEvt__RiftArcTriggerVolume_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_BndEvt__RiftArcTriggerVolume_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'B_DtB_FloatingRift_C_BndEvt__RiftArcTriggerVolume_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_BndEvt__RiftArcTriggerVolume_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'B_DtB_FloatingRift_C_BndEvt__RiftArcTriggerVolume_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function B_DtB_FloatingRift.B_DtB_FloatingRift_C.BndEvt__RiftArcTriggerVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A0 (0x00A0 - 0x0000)
struct B_DtB_FloatingRift_C_BndEvt__RiftArcTriggerVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0080)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(B_DtB_FloatingRift_C_BndEvt__RiftArcTriggerVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on B_DtB_FloatingRift_C_BndEvt__RiftArcTriggerVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(B_DtB_FloatingRift_C_BndEvt__RiftArcTriggerVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A0, "Wrong size on B_DtB_FloatingRift_C_BndEvt__RiftArcTriggerVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(B_DtB_FloatingRift_C_BndEvt__RiftArcTriggerVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'B_DtB_FloatingRift_C_BndEvt__RiftArcTriggerVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_BndEvt__RiftArcTriggerVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'B_DtB_FloatingRift_C_BndEvt__RiftArcTriggerVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_BndEvt__RiftArcTriggerVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'B_DtB_FloatingRift_C_BndEvt__RiftArcTriggerVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_BndEvt__RiftArcTriggerVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'B_DtB_FloatingRift_C_BndEvt__RiftArcTriggerVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_BndEvt__RiftArcTriggerVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'B_DtB_FloatingRift_C_BndEvt__RiftArcTriggerVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(B_DtB_FloatingRift_C_BndEvt__RiftArcTriggerVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'B_DtB_FloatingRift_C_BndEvt__RiftArcTriggerVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

}

