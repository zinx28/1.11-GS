#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CommonUI

#include "Basic.hpp"

#include "Slate_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "CommonUI_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "BlueprintContext_classes.hpp"
#include "WidgetCarousel_structs.hpp"


namespace SDK
{

// Class CommonUI.CommonUserWidget
// 0x0008 (0x0210 - 0x0208)
class UCommonUserWidget : public UUserWidget
{
public:
	bool                                          bConsumePointerInput;                              // 0x0208(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_209[0x7];                                      // 0x0209(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetConsumePointerInput(bool bInConsumePointerInput);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonUserWidget">();
	}
	static class UCommonUserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonUserWidget>();
	}
};
static_assert(alignof(UCommonUserWidget) == 0x000008, "Wrong alignment on UCommonUserWidget");
static_assert(sizeof(UCommonUserWidget) == 0x000210, "Wrong size on UCommonUserWidget");
static_assert(offsetof(UCommonUserWidget, bConsumePointerInput) == 0x000208, "Member 'UCommonUserWidget::bConsumePointerInput' has a wrong offset!");

// Class CommonUI.CommonButton
// 0x0570 (0x0780 - 0x0210)
class UCommonButton : public UCommonUserWidget
{
public:
	UMulticastDelegateProperty_                   OnSelectedChanged;                                 // 0x0210(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnButtonClicked;                                   // 0x0220(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnButtonDoubleClicked;                             // 0x0230(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnButtonHovered;                                   // 0x0240(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnButtonUnhovered;                                 // 0x0250(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                         MinWidth;                                          // 0x0260(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MinHeight;                                         // 0x0264(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCommonButtonStyle>         Style;                                             // 0x0268(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSlateSound                            PressedSlateSoundOverride;                         // 0x0270(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FSlateSound                            HoveredSlateSoundOverride;                         // 0x0288(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         bApplyAlphaOnDisable : 1;                          // 0x02A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bSelectable : 1;                                   // 0x02A0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bShouldSelectUponReceivingFocus : 1;               // 0x02A0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bInteractableWhenSelected : 1;                     // 0x02A0(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bToggleable : 1;                                   // 0x02A0(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bDisplayInputActionWhenNotInteractable : 1;        // 0x02A0(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bHideInputActionWithKeyboard : 1;                  // 0x02A0(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bShouldUseFallbackDefaultInputAction : 1;          // 0x02A0(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_2A1[0x1];                                      // 0x02A1(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	EButtonClickMethod                            ClickMethod;                                       // 0x02A2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A3[0x1];                                      // 0x02A3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InputPriority;                                     // 0x02A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    TriggeringInputAction;                             // 0x02A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, ExposeOnSpawn, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B8[0x40];                                     // 0x02B8(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonActionWidget*                    InputActionWidget;                                 // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInstanceDynamic*               SingleMaterialStyleMID;                            // 0x0300(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FButtonStyle                           NormalStyle;                                       // 0x0308(0x0238)(NativeAccessSpecifierPrivate)
	struct FButtonStyle                           SelectedStyle;                                     // 0x0540(0x0238)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_778[0x8];                                      // 0x0778(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearSelection();
	void DisableButton();
	void DisableButtonWithReason(const class FText& DisabledReason);
	void EnableButton();
	void HandleButtonClicked();
	void HandleButtonDoubleClicked();
	void HandleButtonPressed();
	void HandleButtonReleased();
	void HandleFocusReceived();
	void HandleTriggeringActionCommited(bool* bPassThrough);
	void NativeOnActionComplete();
	void NativeOnActionProgress(float HeldPercent);
	void OnActionComplete();
	void OnActionProgress(float HeldPercent);
	void OnClicked();
	void OnCurrentTextStyleChanged();
	void OnDeselected();
	void OnDisabled();
	void OnDoubleClicked();
	void OnEnabled();
	void OnHovered();
	void OnInputMethodChanged(bool bUsingGamepad);
	void OnSelected();
	void OnTriggeredInputActionChanged(const struct FDataTableRowHandle& NewTriggeredAction);
	void OnUnhovered();
	void SetInputActionProgressMaterial(const struct FSlateBrush& InProgressMaterialBrush, const class FName& InProgressMaterialParam);
	void SetIsInteractionEnabled(bool bInIsInteractionEnabled);
	void SetIsSelectable(bool bInIsSelectable);
	void SetIsSelected(bool InSelected, bool bGiveClickFeedback);
	void SetIsToggleable(bool bInIsToggleable);
	void SetMinDimensions(int32 InMinWidth, int32 InMinHeight);
	void SetSelectedInternal(bool bInSelected, bool bAllowSound, bool bBroadcast);
	void SetShouldSelectUponReceivingFocus(bool bInShouldSelectUponReceivingFocus);
	void SetStyle(TSubclassOf<class UCommonButtonStyle> InStyle);
	void SetTriggeredInputAction(const struct FDataTableRowHandle& InputActionRow, class UCommonActivatablePanel* OldPanel);

	void GetCurrentButtonPadding(struct FMargin* OutButtonPadding) const;
	void GetCurrentCustomPadding(struct FMargin* OutCustomPadding) const;
	class UCommonTextStyle* GetCurrentTextStyle() const;
	TSubclassOf<class UCommonTextStyle> GetCurrentTextStyleClass() const;
	bool GetInputAction(struct FDataTableRowHandle* InputActionRow) const;
	bool GetSelected() const;
	bool GetShouldSelectUponReceivingFocus() const;
	class UMaterialInstanceDynamic* GetSingleMaterialStyleMID() const;
	class UCommonButtonStyle* GetStyle() const;
	bool IsHovered() const;
	bool IsInteractionEnabled() const;
	bool IsPressed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonButton">();
	}
	static class UCommonButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonButton>();
	}
};
static_assert(alignof(UCommonButton) == 0x000008, "Wrong alignment on UCommonButton");
static_assert(sizeof(UCommonButton) == 0x000780, "Wrong size on UCommonButton");
static_assert(offsetof(UCommonButton, OnSelectedChanged) == 0x000210, "Member 'UCommonButton::OnSelectedChanged' has a wrong offset!");
static_assert(offsetof(UCommonButton, OnButtonClicked) == 0x000220, "Member 'UCommonButton::OnButtonClicked' has a wrong offset!");
static_assert(offsetof(UCommonButton, OnButtonDoubleClicked) == 0x000230, "Member 'UCommonButton::OnButtonDoubleClicked' has a wrong offset!");
static_assert(offsetof(UCommonButton, OnButtonHovered) == 0x000240, "Member 'UCommonButton::OnButtonHovered' has a wrong offset!");
static_assert(offsetof(UCommonButton, OnButtonUnhovered) == 0x000250, "Member 'UCommonButton::OnButtonUnhovered' has a wrong offset!");
static_assert(offsetof(UCommonButton, MinWidth) == 0x000260, "Member 'UCommonButton::MinWidth' has a wrong offset!");
static_assert(offsetof(UCommonButton, MinHeight) == 0x000264, "Member 'UCommonButton::MinHeight' has a wrong offset!");
static_assert(offsetof(UCommonButton, Style) == 0x000268, "Member 'UCommonButton::Style' has a wrong offset!");
static_assert(offsetof(UCommonButton, PressedSlateSoundOverride) == 0x000270, "Member 'UCommonButton::PressedSlateSoundOverride' has a wrong offset!");
static_assert(offsetof(UCommonButton, HoveredSlateSoundOverride) == 0x000288, "Member 'UCommonButton::HoveredSlateSoundOverride' has a wrong offset!");
static_assert(offsetof(UCommonButton, ClickMethod) == 0x0002A2, "Member 'UCommonButton::ClickMethod' has a wrong offset!");
static_assert(offsetof(UCommonButton, InputPriority) == 0x0002A4, "Member 'UCommonButton::InputPriority' has a wrong offset!");
static_assert(offsetof(UCommonButton, TriggeringInputAction) == 0x0002A8, "Member 'UCommonButton::TriggeringInputAction' has a wrong offset!");
static_assert(offsetof(UCommonButton, InputActionWidget) == 0x0002F8, "Member 'UCommonButton::InputActionWidget' has a wrong offset!");
static_assert(offsetof(UCommonButton, SingleMaterialStyleMID) == 0x000300, "Member 'UCommonButton::SingleMaterialStyleMID' has a wrong offset!");
static_assert(offsetof(UCommonButton, NormalStyle) == 0x000308, "Member 'UCommonButton::NormalStyle' has a wrong offset!");
static_assert(offsetof(UCommonButton, SelectedStyle) == 0x000540, "Member 'UCommonButton::SelectedStyle' has a wrong offset!");

// Class CommonUI.CommonBorder
// 0x0020 (0x0270 - 0x0250)
class UCommonBorder : public UBorder
{
public:
	TSubclassOf<class UCommonBorderStyle>         Style;                                             // 0x0250(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReducePaddingBySafezone;                          // 0x0258(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_259[0x3];                                      // 0x0259(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                MinimumPadding;                                    // 0x025C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_26C[0x4];                                      // 0x026C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetStyle(TSubclassOf<class UCommonBorderStyle> InStyle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonBorder">();
	}
	static class UCommonBorder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonBorder>();
	}
};
static_assert(alignof(UCommonBorder) == 0x000008, "Wrong alignment on UCommonBorder");
static_assert(sizeof(UCommonBorder) == 0x000270, "Wrong size on UCommonBorder");
static_assert(offsetof(UCommonBorder, Style) == 0x000250, "Member 'UCommonBorder::Style' has a wrong offset!");
static_assert(offsetof(UCommonBorder, bReducePaddingBySafezone) == 0x000258, "Member 'UCommonBorder::bReducePaddingBySafezone' has a wrong offset!");
static_assert(offsetof(UCommonBorder, MinimumPadding) == 0x00025C, "Member 'UCommonBorder::MinimumPadding' has a wrong offset!");

// Class CommonUI.CommonActivatablePanel
// 0x01B0 (0x03C0 - 0x0210)
class UCommonActivatablePanel : public UCommonUserWidget
{
public:
	uint8                                         Pad_210[0x8];                                      // 0x0210(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnWidgetActivated;                                 // 0x0218(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnWidgetDeactivated;                               // 0x0228(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_238[0x108];                                    // 0x0238(0x0108)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bConsumeAllActions;                                // 0x0340(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bExposeActionsExternally;                          // 0x0341(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldBypassStack;                                // 0x0342(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_343[0x7D];                                     // 0x0343(0x007D)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddInputActionHandler(class UDataTable* DataTable, class FName RowName, TDelegate<void(bool* bPassThrough)> CommitedEvent);
	void AddInputActionHandlerWithProgress(class UDataTable* DataTable, class FName RowName, TDelegate<void(bool* bPassThrough)> CommitedEvent, TDelegate<void(float HeldPercent)> ProgressEvent);
	void AddInputActionNoHandler(class UDataTable* DataTable, class FName RowName);
	void BeginIntro();
	void BeginOutro();
	void EndIntro();
	void EndOutro();
	void OnActivated();
	void OnBeginIntro();
	void OnBeginOutro();
	void OnDeactivated();
	void OnInputModeChanged(bool bUsingGamepad);
	void PopPanel();
	void RemoveAllInputActionHandlers();
	void RemoveInputActionHandler(const struct FDataTableRowHandle& InputActionRow);
	void SetActionHandlerState(class UDataTable* DataTable, class FName RowName, EInputActionState State);
	void SetActionHandlerStateFromHandle(const struct FDataTableRowHandle& InputActionRow, EInputActionState State);
	void SetActionHandlerStateFromHandleWithDisabledCommitEvent(const struct FDataTableRowHandle& InputActionRow, EInputActionState State, TDelegate<void(bool* bPassThrough)> DisabledCommitEvent);
	void SetActionHandlerStateWithDisabledCommitEvent(class UDataTable* DataTable, class FName RowName, EInputActionState State, TDelegate<void(bool* bPassThrough)> DisabledCommitEvent);
	void SetInputActionHandler(const struct FDataTableRowHandle& InputActionRow, TDelegate<void(bool* bPassThrough)> CommitedEvent);
	void SetInputActionHandlerWithProgress(const struct FDataTableRowHandle& InputActionRow, TDelegate<void(bool* bPassThrough)> CommitedEvent, TDelegate<void(float HeldPercent)> ProgressEvent);

	bool GetInputActions(TArray<struct FCommonInputActionHandlerData>* InputActionDataRows) const;
	bool HasInputActionHandler(const struct FDataTableRowHandle& InputActionRow) const;
	bool IsActivated() const;
	bool IsIntroed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonActivatablePanel">();
	}
	static class UCommonActivatablePanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonActivatablePanel>();
	}
};
static_assert(alignof(UCommonActivatablePanel) == 0x000008, "Wrong alignment on UCommonActivatablePanel");
static_assert(sizeof(UCommonActivatablePanel) == 0x0003C0, "Wrong size on UCommonActivatablePanel");
static_assert(offsetof(UCommonActivatablePanel, OnWidgetActivated) == 0x000218, "Member 'UCommonActivatablePanel::OnWidgetActivated' has a wrong offset!");
static_assert(offsetof(UCommonActivatablePanel, OnWidgetDeactivated) == 0x000228, "Member 'UCommonActivatablePanel::OnWidgetDeactivated' has a wrong offset!");
static_assert(offsetof(UCommonActivatablePanel, bConsumeAllActions) == 0x000340, "Member 'UCommonActivatablePanel::bConsumeAllActions' has a wrong offset!");
static_assert(offsetof(UCommonActivatablePanel, bExposeActionsExternally) == 0x000341, "Member 'UCommonActivatablePanel::bExposeActionsExternally' has a wrong offset!");
static_assert(offsetof(UCommonActivatablePanel, bShouldBypassStack) == 0x000342, "Member 'UCommonActivatablePanel::bShouldBypassStack' has a wrong offset!");

// Class CommonUI.CommonWidgetGroupBase
// 0x0000 (0x0028 - 0x0028)
class UCommonWidgetGroupBase : public UObject
{
public:
	void AddWidget(class UWidget* InWidget);
	void RemoveAll();
	void RemoveWidget(class UWidget* InWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonWidgetGroupBase">();
	}
	static class UCommonWidgetGroupBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonWidgetGroupBase>();
	}
};
static_assert(alignof(UCommonWidgetGroupBase) == 0x000008, "Wrong alignment on UCommonWidgetGroupBase");
static_assert(sizeof(UCommonWidgetGroupBase) == 0x000028, "Wrong size on UCommonWidgetGroupBase");

// Class CommonUI.CommonButtonGroup
// 0x0070 (0x0098 - 0x0028)
class UCommonButtonGroup : public UCommonWidgetGroupBase
{
public:
	UMulticastDelegateProperty_                   OnSelectedButtonChanged;                           // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnHoveredButtonChanged;                            // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnButtonClicked;                                   // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnButtonDoubleClicked;                             // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnSelectionCleared;                                // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bSelectionRequired;                                // 0x0078(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_79[0x1F];                                      // 0x0079(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DeselectAll();
	void OnButtonHovered(class UCommonButton* BaseButton);
	void OnButtonUnhovered(class UCommonButton* BaseButton);
	void OnHandleButtonClicked(class UCommonButton* BaseButton);
	void OnHandleButtonDoubleClicked(class UCommonButton* BaseButton);
	void OnSelectionStateChanged(class UCommonButton* BaseButton, bool bIsSelected);
	void SelectButtonAtIndex(int32 ButtonIndex);
	void SelectNextButton(bool bAllowWrap);
	void SelectPreviousButton(bool bAllowWrap);
	void SetSelectionRequired(bool bRequireSelection);

	int32 FindButtonIndex(const class UCommonButton* ButtonToFind) const;
	class UCommonButton* GetButtonAtIndex(int32 Param_Index) const;
	int32 GetSelectedButtonIndex() const;
	bool HasAnyButtons() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonButtonGroup">();
	}
	static class UCommonButtonGroup* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonButtonGroup>();
	}
};
static_assert(alignof(UCommonButtonGroup) == 0x000008, "Wrong alignment on UCommonButtonGroup");
static_assert(sizeof(UCommonButtonGroup) == 0x000098, "Wrong size on UCommonButtonGroup");
static_assert(offsetof(UCommonButtonGroup, OnSelectedButtonChanged) == 0x000028, "Member 'UCommonButtonGroup::OnSelectedButtonChanged' has a wrong offset!");
static_assert(offsetof(UCommonButtonGroup, OnHoveredButtonChanged) == 0x000038, "Member 'UCommonButtonGroup::OnHoveredButtonChanged' has a wrong offset!");
static_assert(offsetof(UCommonButtonGroup, OnButtonClicked) == 0x000048, "Member 'UCommonButtonGroup::OnButtonClicked' has a wrong offset!");
static_assert(offsetof(UCommonButtonGroup, OnButtonDoubleClicked) == 0x000058, "Member 'UCommonButtonGroup::OnButtonDoubleClicked' has a wrong offset!");
static_assert(offsetof(UCommonButtonGroup, OnSelectionCleared) == 0x000068, "Member 'UCommonButtonGroup::OnSelectionCleared' has a wrong offset!");
static_assert(offsetof(UCommonButtonGroup, bSelectionRequired) == 0x000078, "Member 'UCommonButtonGroup::bSelectionRequired' has a wrong offset!");

// Class CommonUI.CommonUIContext
// 0x00B8 (0x00E0 - 0x0028)
class UCommonUIContext final : public UBlueprintContextBase
{
public:
	UMulticastDelegateProperty_                   OnInputMethodChanged;                              // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x78];                                      // 0x0038(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnInputSuspensionChanged;                          // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_C0[0x10];                                      // 0x00C0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonInputManager*                    CommonInputManager;                                // 0x00D0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsUsingGamepad;                                   // 0x00D8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsUsingTouch;                                     // 0x00D9(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ECommonInputType                              GamepadInputType;                                  // 0x00DA(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_DB[0x5];                                       // 0x00DB(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InputMethodChangedDelegate__DelegateSignature(bool bUsingGamepad);
	void InputSuspensionChanged__DelegateSignature(bool bInputSuspended);
	void SetGamepadInputType(ECommonInputType InGamepadInputType);

	ECommonInputType GetCurrentInputType() const;
	struct FSlateBrush GetInputActionButtonIcon(const struct FDataTableRowHandle& InputActionRowHandle, ECommonInputType InputType) const;
	class UCommonInputManager* GetInputManager() const;
	bool IsUsingGamepad() const;
	bool IsUsingPointerInput() const;
	bool IsUsingTouch() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonUIContext">();
	}
	static class UCommonUIContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonUIContext>();
	}
};
static_assert(alignof(UCommonUIContext) == 0x000008, "Wrong alignment on UCommonUIContext");
static_assert(sizeof(UCommonUIContext) == 0x0000E0, "Wrong size on UCommonUIContext");
static_assert(offsetof(UCommonUIContext, OnInputMethodChanged) == 0x000028, "Member 'UCommonUIContext::OnInputMethodChanged' has a wrong offset!");
static_assert(offsetof(UCommonUIContext, OnInputSuspensionChanged) == 0x0000B0, "Member 'UCommonUIContext::OnInputSuspensionChanged' has a wrong offset!");
static_assert(offsetof(UCommonUIContext, CommonInputManager) == 0x0000D0, "Member 'UCommonUIContext::CommonInputManager' has a wrong offset!");
static_assert(offsetof(UCommonUIContext, bIsUsingGamepad) == 0x0000D8, "Member 'UCommonUIContext::bIsUsingGamepad' has a wrong offset!");
static_assert(offsetof(UCommonUIContext, bIsUsingTouch) == 0x0000D9, "Member 'UCommonUIContext::bIsUsingTouch' has a wrong offset!");
static_assert(offsetof(UCommonUIContext, GamepadInputType) == 0x0000DA, "Member 'UCommonUIContext::GamepadInputType' has a wrong offset!");

// Class CommonUI.CommonTextBlock
// 0x0050 (0x0270 - 0x0220)
class UCommonTextBlock : public UTextBlock
{
public:
	TSubclassOf<class UCommonTextStyle>           Style;                                             // 0x0220(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCommonTextScrollStyle>     ScrollStyle;                                       // 0x0228(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_230[0x40];                                     // 0x0230(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ResetScrollState();
	void SetProperties(TSubclassOf<class UCommonTextStyle> InStyle, TSubclassOf<class UCommonTextScrollStyle> InScrollStyle);
	void SetScrollStyle(TSubclassOf<class UCommonTextScrollStyle> InScrollStyle);
	void SetStyle(TSubclassOf<class UCommonTextStyle> InStyle);
	void SetWrapTextWidth(int32 InWrapTextAt);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonTextBlock">();
	}
	static class UCommonTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonTextBlock>();
	}
};
static_assert(alignof(UCommonTextBlock) == 0x000008, "Wrong alignment on UCommonTextBlock");
static_assert(sizeof(UCommonTextBlock) == 0x000270, "Wrong size on UCommonTextBlock");
static_assert(offsetof(UCommonTextBlock, Style) == 0x000220, "Member 'UCommonTextBlock::Style' has a wrong offset!");
static_assert(offsetof(UCommonTextBlock, ScrollStyle) == 0x000228, "Member 'UCommonTextBlock::ScrollStyle' has a wrong offset!");

// Class CommonUI.CommonPoolableWidgetInterface
// 0x0000 (0x0028 - 0x0028)
class ICommonPoolableWidgetInterface : public IInterface
{
public:
	void OnAcquireFromPool();
	void OnReleaseToPool();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonPoolableWidgetInterface">();
	}
	static class ICommonPoolableWidgetInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ICommonPoolableWidgetInterface>();
	}
};
static_assert(alignof(ICommonPoolableWidgetInterface) == 0x000008, "Wrong alignment on ICommonPoolableWidgetInterface");
static_assert(sizeof(ICommonPoolableWidgetInterface) == 0x000028, "Wrong size on ICommonPoolableWidgetInterface");

// Class CommonUI.CommonListItem
// 0x0000 (0x0028 - 0x0028)
class ICommonListItem : public ICommonPoolableWidgetInterface
{
public:
	void Private_OnExpanderArrowShiftClicked();
	void RegisterOnClicked(const TDelegate<void(class UUserWidget* Widget)>& Callback);
	void SetExpanded(bool bExpanded);
	void SetIndexInList(int32 InIndexInList);
	void SetSelected(bool bSelected);
	void ToggleExpansion();

	int32 DoesItemHaveChildren() const;
	int32 GetIndentLevel() const;
	bool IsItemExpanded() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonListItem">();
	}
	static class ICommonListItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ICommonListItem>();
	}
};
static_assert(alignof(ICommonListItem) == 0x000008, "Wrong alignment on ICommonListItem");
static_assert(sizeof(ICommonListItem) == 0x000028, "Wrong size on ICommonListItem");

// Class CommonUI.CommonListView
// 0x01F8 (0x02F8 - 0x0100)
#pragma pack(push, 0x1)
class alignas(0x08) UCommonListView : public UWidget
{
public:
	UMulticastDelegateProperty_                   OnItemClicked;                                     // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnItemDoubleClicked;                               // 0x0110(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnItemHovered;                                     // 0x0120(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnItemSelected;                                    // 0x0130(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnItemWidgetCreated;                               // 0x0140(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnItemWidgetDestroyed;                             // 0x0150(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         ItemHeight;                                        // 0x0160(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                DesiredItemPadding;                                // 0x0164(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UUserWidget>                ListItemClass;                                     // 0x0178(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESelectionMode                                SelectionMode;                                     // 0x0180(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EConsumeMouseWheel                            ConsumeMouseWheel;                                 // 0x0181(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bClearSelectionOnClick;                            // 0x0182(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_183[0x1];                                      // 0x0183(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumPreAllocatedEntries;                            // 0x0184(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSimulateDoubleClickOnSelectedItemClick;           // 0x0188(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_189[0x167];                                    // 0x0189(0x0167)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonListViewNullItem*                NullItem;                                          // 0x02F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void CancelScrollIntoView();
	void Clear();
	void ClearSelection();
	void DynamicHandleItemClickedCommonButton(class UCommonButton* Button);
	void DynamicHandleItemClickedUserWidget(class UUserWidget* Widget);
	void DynamicHandleItemDoubleClickedCommonButton(class UCommonButton* Button);
	void DynamicHandleItemHoveredCommonButton(class UCommonButton* Button);
	void DynamicHandleItemUnhoveredCommonButton(class UCommonButton* Button);
	void ScrollIntoView(class UObject* Item, const bool NavigateOnScrollIntoView);
	void SetDataProvider(const TArray<class UObject*>& InDataProvider);
	void SetDesiredItemPadding(const struct FMargin& DesiredPadding);
	void SetItemHeight(float NewHeight);
	void SetItemSelection(class UObject* Item, bool bSelected);
	bool SetSelectedIndex(int32 Param_Index);
	bool SetSelectedItem(class UObject* Item, bool bWaitIfPendingRefresh);
	void SetSelectionMode(ESelectionMode Param_SelectionMode);
	void SetSimulateDoubleClickOnSelectedItemClick(bool bInSimulateDoubleClick);

	void AddItem(class UObject* Item) const;
	int32 GetIndexForItem(class UObject* Item) const;
	class UObject* GetItemAt(int32 Param_Index) const;
	int32 GetNumItems() const;
	int32 GetNumItemsSelected() const;
	class UObject* GetSelectedItem() const;
	bool GetSelectedItems(TArray<class UObject*>* Items) const;
	ESelectionMode GetSelectionModeBP() const;
	bool IsItemVisible(class UObject* Item) const;
	bool IsRefreshPending() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonListView">();
	}
	static class UCommonListView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonListView>();
	}
};
#pragma pack(pop)
static_assert(alignof(UCommonListView) == 0x000008, "Wrong alignment on UCommonListView");
static_assert(sizeof(UCommonListView) == 0x0002F8, "Wrong size on UCommonListView");
static_assert(offsetof(UCommonListView, OnItemClicked) == 0x000100, "Member 'UCommonListView::OnItemClicked' has a wrong offset!");
static_assert(offsetof(UCommonListView, OnItemDoubleClicked) == 0x000110, "Member 'UCommonListView::OnItemDoubleClicked' has a wrong offset!");
static_assert(offsetof(UCommonListView, OnItemHovered) == 0x000120, "Member 'UCommonListView::OnItemHovered' has a wrong offset!");
static_assert(offsetof(UCommonListView, OnItemSelected) == 0x000130, "Member 'UCommonListView::OnItemSelected' has a wrong offset!");
static_assert(offsetof(UCommonListView, OnItemWidgetCreated) == 0x000140, "Member 'UCommonListView::OnItemWidgetCreated' has a wrong offset!");
static_assert(offsetof(UCommonListView, OnItemWidgetDestroyed) == 0x000150, "Member 'UCommonListView::OnItemWidgetDestroyed' has a wrong offset!");
static_assert(offsetof(UCommonListView, ItemHeight) == 0x000160, "Member 'UCommonListView::ItemHeight' has a wrong offset!");
static_assert(offsetof(UCommonListView, DesiredItemPadding) == 0x000164, "Member 'UCommonListView::DesiredItemPadding' has a wrong offset!");
static_assert(offsetof(UCommonListView, ListItemClass) == 0x000178, "Member 'UCommonListView::ListItemClass' has a wrong offset!");
static_assert(offsetof(UCommonListView, SelectionMode) == 0x000180, "Member 'UCommonListView::SelectionMode' has a wrong offset!");
static_assert(offsetof(UCommonListView, ConsumeMouseWheel) == 0x000181, "Member 'UCommonListView::ConsumeMouseWheel' has a wrong offset!");
static_assert(offsetof(UCommonListView, bClearSelectionOnClick) == 0x000182, "Member 'UCommonListView::bClearSelectionOnClick' has a wrong offset!");
static_assert(offsetof(UCommonListView, NumPreAllocatedEntries) == 0x000184, "Member 'UCommonListView::NumPreAllocatedEntries' has a wrong offset!");
static_assert(offsetof(UCommonListView, bSimulateDoubleClickOnSelectedItemClick) == 0x000188, "Member 'UCommonListView::bSimulateDoubleClickOnSelectedItemClick' has a wrong offset!");
static_assert(offsetof(UCommonListView, NullItem) == 0x0002F0, "Member 'UCommonListView::NullItem' has a wrong offset!");

// Class CommonUI.CommonCustomNavigation
// 0x0010 (0x0260 - 0x0250)
class UCommonCustomNavigation final : public UBorder
{
public:
	TDelegate<void(EUINavigation NavigationType)> OnNavigationEvent;                                 // 0x0250(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonCustomNavigation">();
	}
	static class UCommonCustomNavigation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonCustomNavigation>();
	}
};
static_assert(alignof(UCommonCustomNavigation) == 0x000008, "Wrong alignment on UCommonCustomNavigation");
static_assert(sizeof(UCommonCustomNavigation) == 0x000260, "Wrong size on UCommonCustomNavigation");
static_assert(offsetof(UCommonCustomNavigation, OnNavigationEvent) == 0x000250, "Member 'UCommonCustomNavigation::OnNavigationEvent' has a wrong offset!");

// Class CommonUI.CommonTileView
// 0x0018 (0x0310 - 0x02F8)
class UCommonTileView : public UCommonListView
{
public:
	EItemAlignment                                ItemAlignment;                                     // 0x02F8(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F9[0x3];                                      // 0x02F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ItemWidth;                                         // 0x02FC(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_300[0x10];                                     // 0x0300(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetItemWidth(float NewWidth);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonTileView">();
	}
	static class UCommonTileView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonTileView>();
	}
};
static_assert(alignof(UCommonTileView) == 0x000008, "Wrong alignment on UCommonTileView");
static_assert(sizeof(UCommonTileView) == 0x000310, "Wrong size on UCommonTileView");
static_assert(offsetof(UCommonTileView, ItemAlignment) == 0x0002F8, "Member 'UCommonTileView::ItemAlignment' has a wrong offset!");
static_assert(offsetof(UCommonTileView, ItemWidth) == 0x0002FC, "Member 'UCommonTileView::ItemWidth' has a wrong offset!");

// Class CommonUI.CommonNumericTextBlock
// 0x0088 (0x02F8 - 0x0270)
class UCommonNumericTextBlock : public UCommonTextBlock
{
public:
	uint8                                         Pad_270[0x8];                                      // 0x0270(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnOutroEvent;                                      // 0x0278(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnInterpolationEndedEvent;                         // 0x0288(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         CurrentNumericValue;                               // 0x0298(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommonNumericType                            NumericType;                                       // 0x029C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29D[0x3];                                      // 0x029D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCommonNumberFormattingOptions         FormattingSpecification;                           // 0x02A0(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         EaseOutInterpolationExponent;                      // 0x02B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpolationUpdateInterval;                       // 0x02B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PostInterpolationShrinkDuration;                   // 0x02BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PerformSizeInterpolation;                          // 0x02C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPercentage;                                      // 0x02C1(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C2[0x36];                                     // 0x02C2(0x0036)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InterpolateToValue(const float TargetValue, float MaximumInterpolationDuration, float MinimumChangeRate, float OutroOffset);
	void OnInterpolationEnded__DelegateSignature(class UCommonNumericTextBlock* NumericTextBlock, const bool HadCompleted);
	void OnOutro__DelegateSignature(class UCommonNumericTextBlock* NumericTextBlock);
	void SetCurrentValue(const float NewValue);

	float GetTargetValue() const;
	bool IsInterpolatingNumericValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonNumericTextBlock">();
	}
	static class UCommonNumericTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonNumericTextBlock>();
	}
};
static_assert(alignof(UCommonNumericTextBlock) == 0x000008, "Wrong alignment on UCommonNumericTextBlock");
static_assert(sizeof(UCommonNumericTextBlock) == 0x0002F8, "Wrong size on UCommonNumericTextBlock");
static_assert(offsetof(UCommonNumericTextBlock, OnOutroEvent) == 0x000278, "Member 'UCommonNumericTextBlock::OnOutroEvent' has a wrong offset!");
static_assert(offsetof(UCommonNumericTextBlock, OnInterpolationEndedEvent) == 0x000288, "Member 'UCommonNumericTextBlock::OnInterpolationEndedEvent' has a wrong offset!");
static_assert(offsetof(UCommonNumericTextBlock, CurrentNumericValue) == 0x000298, "Member 'UCommonNumericTextBlock::CurrentNumericValue' has a wrong offset!");
static_assert(offsetof(UCommonNumericTextBlock, NumericType) == 0x00029C, "Member 'UCommonNumericTextBlock::NumericType' has a wrong offset!");
static_assert(offsetof(UCommonNumericTextBlock, FormattingSpecification) == 0x0002A0, "Member 'UCommonNumericTextBlock::FormattingSpecification' has a wrong offset!");
static_assert(offsetof(UCommonNumericTextBlock, EaseOutInterpolationExponent) == 0x0002B4, "Member 'UCommonNumericTextBlock::EaseOutInterpolationExponent' has a wrong offset!");
static_assert(offsetof(UCommonNumericTextBlock, InterpolationUpdateInterval) == 0x0002B8, "Member 'UCommonNumericTextBlock::InterpolationUpdateInterval' has a wrong offset!");
static_assert(offsetof(UCommonNumericTextBlock, PostInterpolationShrinkDuration) == 0x0002BC, "Member 'UCommonNumericTextBlock::PostInterpolationShrinkDuration' has a wrong offset!");
static_assert(offsetof(UCommonNumericTextBlock, PerformSizeInterpolation) == 0x0002C0, "Member 'UCommonNumericTextBlock::PerformSizeInterpolation' has a wrong offset!");
static_assert(offsetof(UCommonNumericTextBlock, IsPercentage) == 0x0002C1, "Member 'UCommonNumericTextBlock::IsPercentage' has a wrong offset!");

// Class CommonUI.CommonPopupMenu
// 0x0010 (0x03D0 - 0x03C0)
class UCommonPopupMenu : public UCommonActivatablePanel
{
public:
	TWeakObjectPtr<class UMenuAnchor>             OwningMenuAnchor;                                  // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UObject>                 ContextProvidingObject;                            // 0x03C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HandlePostDifferentContextProviderSet();
	void HandlePreDifferentContextProviderSet();
	void OnIsOpenChanged(bool IsOpen);
	void RequestClose();
	void SetContextProvider(const class UObject* Param_ContextProvidingObject);
	void SetOwningMenuAnchor(const class UMenuAnchor* MenuAnchor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonPopupMenu">();
	}
	static class UCommonPopupMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonPopupMenu>();
	}
};
static_assert(alignof(UCommonPopupMenu) == 0x000008, "Wrong alignment on UCommonPopupMenu");
static_assert(sizeof(UCommonPopupMenu) == 0x0003D0, "Wrong size on UCommonPopupMenu");
static_assert(offsetof(UCommonPopupMenu, OwningMenuAnchor) == 0x0003C0, "Member 'UCommonPopupMenu::OwningMenuAnchor' has a wrong offset!");
static_assert(offsetof(UCommonPopupMenu, ContextProvidingObject) == 0x0003C8, "Member 'UCommonPopupMenu::ContextProvidingObject' has a wrong offset!");

// Class CommonUI.CommonTabListWidget
// 0x00C8 (0x02D8 - 0x0210)
class UCommonTabListWidget : public UCommonUserWidget
{
public:
	UMulticastDelegateProperty_                   OnTabSelected;                                     // 0x0210(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnTabButtonCreated;                                // 0x0220(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnTabButtonRemoved;                                // 0x0230(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    NextTabInputActionData;                            // 0x0240(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FDataTableRowHandle                    PreviousTabInputActionData;                        // 0x0250(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bAutoListenForInput;                               // 0x0260(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_261[0x7];                                      // 0x0261(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonWidgetSwitcher*                  LinkedSwitcher;                                    // 0x0268(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class FName, struct FCommonRegisteredTabInfo> RegisteredTabsByID;                                // 0x0270(0x0050)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class UCommonButtonGroup*                     TabButtonGroup;                                    // 0x02C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C8[0x10];                                     // 0x02C8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisableTabWithReason(class FName TabNameID, const class FText& Reason);
	class UCommonButton* GetTabButtonByID(class FName TabNameID);
	void HandleNextTabInputAction(bool* bPassThrough);
	void HandlePostLinkedSwitcherChanged_BP();
	void HandlePreLinkedSwitcherChanged_BP();
	void HandlePreviousTabInputAction(bool* bPassThrough);
	void HandleTabButtonSelected(class UCommonButton* SelectedTabButton, int32 ButtonIndex);
	void HandleTabCreated(class FName TabNameID, class UCommonButton* TabButton);
	void HandleTabRemoved(class FName TabNameID, class UCommonButton* TabButton);
	void OnTabButtonCreated__DelegateSignature(class FName TabId, class UCommonButton* TabButton);
	void OnTabButtonRemoved__DelegateSignature(class FName TabId, class UCommonButton* TabButton);
	void OnTabSelected__DelegateSignature(class FName TabId);
	bool RegisterTab(class FName TabNameID, TSubclassOf<class UCommonButton> ButtonWidgetType, class UWidget* ContentWidget);
	void RemoveAllTabs();
	bool RemoveTab(class FName TabNameID);
	bool SelectTabByID(class FName TabNameID, bool bSuppressClickFeedback);
	void SetLinkedSwitcher(class UCommonWidgetSwitcher* CommonSwitcher);
	void SetListeningForInput(bool bShouldListen);
	void SetTabEnabled(class FName TabNameID, bool bEnable);
	void SetTabVisibility(class FName TabNameID, ESlateVisibility NewVisibility);

	class FName GetActiveTab() const;
	class UCommonWidgetSwitcher* GetLinkedSwitcher() const;
	class FName GetSelectedTabId() const;
	int32 GetTabCount() const;
	class FName GetTabIdAtIndex(int32 Param_Index) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonTabListWidget">();
	}
	static class UCommonTabListWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonTabListWidget>();
	}
};
static_assert(alignof(UCommonTabListWidget) == 0x000008, "Wrong alignment on UCommonTabListWidget");
static_assert(sizeof(UCommonTabListWidget) == 0x0002D8, "Wrong size on UCommonTabListWidget");
static_assert(offsetof(UCommonTabListWidget, OnTabSelected) == 0x000210, "Member 'UCommonTabListWidget::OnTabSelected' has a wrong offset!");
static_assert(offsetof(UCommonTabListWidget, OnTabButtonCreated) == 0x000220, "Member 'UCommonTabListWidget::OnTabButtonCreated' has a wrong offset!");
static_assert(offsetof(UCommonTabListWidget, OnTabButtonRemoved) == 0x000230, "Member 'UCommonTabListWidget::OnTabButtonRemoved' has a wrong offset!");
static_assert(offsetof(UCommonTabListWidget, NextTabInputActionData) == 0x000240, "Member 'UCommonTabListWidget::NextTabInputActionData' has a wrong offset!");
static_assert(offsetof(UCommonTabListWidget, PreviousTabInputActionData) == 0x000250, "Member 'UCommonTabListWidget::PreviousTabInputActionData' has a wrong offset!");
static_assert(offsetof(UCommonTabListWidget, bAutoListenForInput) == 0x000260, "Member 'UCommonTabListWidget::bAutoListenForInput' has a wrong offset!");
static_assert(offsetof(UCommonTabListWidget, LinkedSwitcher) == 0x000268, "Member 'UCommonTabListWidget::LinkedSwitcher' has a wrong offset!");
static_assert(offsetof(UCommonTabListWidget, RegisteredTabsByID) == 0x000270, "Member 'UCommonTabListWidget::RegisteredTabsByID' has a wrong offset!");
static_assert(offsetof(UCommonTabListWidget, TabButtonGroup) == 0x0002C0, "Member 'UCommonTabListWidget::TabButtonGroup' has a wrong offset!");

// Class CommonUI.AnalogSlider
// 0x0010 (0x03A8 - 0x0398)
class UAnalogSlider final : public USlider
{
public:
	UMulticastDelegateProperty_                   OnAnalogCapture;                                   // 0x0398(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnalogSlider">();
	}
	static class UAnalogSlider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnalogSlider>();
	}
};
static_assert(alignof(UAnalogSlider) == 0x000008, "Wrong alignment on UAnalogSlider");
static_assert(sizeof(UAnalogSlider) == 0x0003A8, "Wrong size on UAnalogSlider");
static_assert(offsetof(UAnalogSlider, OnAnalogCapture) == 0x000398, "Member 'UAnalogSlider::OnAnalogCapture' has a wrong offset!");

// Class CommonUI.CommonActionHandlerInterface
// 0x0000 (0x0028 - 0x0028)
class ICommonActionHandlerInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonActionHandlerInterface">();
	}
	static class ICommonActionHandlerInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ICommonActionHandlerInterface>();
	}
};
static_assert(alignof(ICommonActionHandlerInterface) == 0x000008, "Wrong alignment on ICommonActionHandlerInterface");
static_assert(sizeof(ICommonActionHandlerInterface) == 0x000028, "Wrong size on ICommonActionHandlerInterface");

// Class CommonUI.CommonActionWidget
// 0x01E0 (0x02E0 - 0x0100)
class UCommonActionWidget final : public UWidget
{
public:
	UMulticastDelegateProperty_                   OnInputMethodChanged;                              // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    InputActionDataRow;                                // 0x0110(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ProgressMaterialBrush;                             // 0x0120(0x0078)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   ProgressMaterialParam;                             // 0x0198(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            IconRimBrush;                                      // 0x01A0(0x0078)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               ProgressDynamicMaterial;                           // 0x0218(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_220[0xC0];                                     // 0x0220(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnInputMethodChanged__DelegateSignature(bool bUsingGamepad);
	void SetInputAction(const struct FDataTableRowHandle& InputActionRow);

	class FText GetDisplayText() const;
	struct FSlateBrush GetIcon() const;
	bool IsHeldAction() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonActionWidget">();
	}
	static class UCommonActionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonActionWidget>();
	}
};
static_assert(alignof(UCommonActionWidget) == 0x000008, "Wrong alignment on UCommonActionWidget");
static_assert(sizeof(UCommonActionWidget) == 0x0002E0, "Wrong size on UCommonActionWidget");
static_assert(offsetof(UCommonActionWidget, OnInputMethodChanged) == 0x000100, "Member 'UCommonActionWidget::OnInputMethodChanged' has a wrong offset!");
static_assert(offsetof(UCommonActionWidget, InputActionDataRow) == 0x000110, "Member 'UCommonActionWidget::InputActionDataRow' has a wrong offset!");
static_assert(offsetof(UCommonActionWidget, ProgressMaterialBrush) == 0x000120, "Member 'UCommonActionWidget::ProgressMaterialBrush' has a wrong offset!");
static_assert(offsetof(UCommonActionWidget, ProgressMaterialParam) == 0x000198, "Member 'UCommonActionWidget::ProgressMaterialParam' has a wrong offset!");
static_assert(offsetof(UCommonActionWidget, IconRimBrush) == 0x0001A0, "Member 'UCommonActionWidget::IconRimBrush' has a wrong offset!");
static_assert(offsetof(UCommonActionWidget, ProgressDynamicMaterial) == 0x000218, "Member 'UCommonActionWidget::ProgressDynamicMaterial' has a wrong offset!");

// Class CommonUI.CommonBorderStyle
// 0x0078 (0x00A0 - 0x0028)
class UCommonBorderStyle : public UObject
{
public:
	struct FSlateBrush                            Background;                                        // 0x0028(0x0078)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	void GetBackgroundBrush(struct FSlateBrush* Brush) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonBorderStyle">();
	}
	static class UCommonBorderStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonBorderStyle>();
	}
};
static_assert(alignof(UCommonBorderStyle) == 0x000008, "Wrong alignment on UCommonBorderStyle");
static_assert(sizeof(UCommonBorderStyle) == 0x0000A0, "Wrong size on UCommonBorderStyle");
static_assert(offsetof(UCommonBorderStyle, Background) == 0x000028, "Member 'UCommonBorderStyle::Background' has a wrong offset!");

// Class CommonUI.CommonButtonStyle
// 0x0448 (0x0470 - 0x0028)
class UCommonButtonStyle : public UObject
{
public:
	bool                                          bSingleMaterial;                                   // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            SingleMaterialBrush;                               // 0x0030(0x0078)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            NormalBase;                                        // 0x00A8(0x0078)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            NormalHovered;                                     // 0x0120(0x0078)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            NormalPressed;                                     // 0x0198(0x0078)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            SelectedBase;                                      // 0x0210(0x0078)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            SelectedHovered;                                   // 0x0288(0x0078)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            SelectedPressed;                                   // 0x0300(0x0078)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Disabled;                                          // 0x0378(0x0078)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FMargin                                ButtonPadding;                                     // 0x03F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                CustomPadding;                                     // 0x0400(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         MinWidth;                                          // 0x0410(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinHeight;                                         // 0x0414(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCommonTextStyle>           NormalTextStyle;                                   // 0x0418(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCommonTextStyle>           NormalHoveredTextStyle;                            // 0x0420(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCommonTextStyle>           SelectedTextStyle;                                 // 0x0428(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCommonTextStyle>           SelectedHoveredTextStyle;                          // 0x0430(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCommonTextStyle>           DisabledTextStyle;                                 // 0x0438(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateSound                            PressedSlateSound;                                 // 0x0440(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateSound                            HoveredSlateSound;                                 // 0x0458(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)

public:
	void GetButtonPadding(struct FMargin* OutButtonPadding) const;
	void GetCustomPadding(struct FMargin* OutCustomPadding) const;
	void GetDisabledBrush(struct FSlateBrush* Brush) const;
	class UCommonTextStyle* GetDisabledTextStyle() const;
	void GetMaterialBrush(struct FSlateBrush* Brush) const;
	void GetNormalBaseBrush(struct FSlateBrush* Brush) const;
	void GetNormalHoveredBrush(struct FSlateBrush* Brush) const;
	class UCommonTextStyle* GetNormalHoveredTextStyle() const;
	void GetNormalPressedBrush(struct FSlateBrush* Brush) const;
	class UCommonTextStyle* GetNormalTextStyle() const;
	void GetSelectedBaseBrush(struct FSlateBrush* Brush) const;
	void GetSelectedHoveredBrush(struct FSlateBrush* Brush) const;
	class UCommonTextStyle* GetSelectedHoveredTextStyle() const;
	void GetSelectedPressedBrush(struct FSlateBrush* Brush) const;
	class UCommonTextStyle* GetSelectedTextStyle() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonButtonStyle">();
	}
	static class UCommonButtonStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonButtonStyle>();
	}
};
static_assert(alignof(UCommonButtonStyle) == 0x000008, "Wrong alignment on UCommonButtonStyle");
static_assert(sizeof(UCommonButtonStyle) == 0x000470, "Wrong size on UCommonButtonStyle");
static_assert(offsetof(UCommonButtonStyle, bSingleMaterial) == 0x000028, "Member 'UCommonButtonStyle::bSingleMaterial' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, SingleMaterialBrush) == 0x000030, "Member 'UCommonButtonStyle::SingleMaterialBrush' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, NormalBase) == 0x0000A8, "Member 'UCommonButtonStyle::NormalBase' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, NormalHovered) == 0x000120, "Member 'UCommonButtonStyle::NormalHovered' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, NormalPressed) == 0x000198, "Member 'UCommonButtonStyle::NormalPressed' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, SelectedBase) == 0x000210, "Member 'UCommonButtonStyle::SelectedBase' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, SelectedHovered) == 0x000288, "Member 'UCommonButtonStyle::SelectedHovered' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, SelectedPressed) == 0x000300, "Member 'UCommonButtonStyle::SelectedPressed' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, Disabled) == 0x000378, "Member 'UCommonButtonStyle::Disabled' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, ButtonPadding) == 0x0003F0, "Member 'UCommonButtonStyle::ButtonPadding' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, CustomPadding) == 0x000400, "Member 'UCommonButtonStyle::CustomPadding' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, MinWidth) == 0x000410, "Member 'UCommonButtonStyle::MinWidth' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, MinHeight) == 0x000414, "Member 'UCommonButtonStyle::MinHeight' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, NormalTextStyle) == 0x000418, "Member 'UCommonButtonStyle::NormalTextStyle' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, NormalHoveredTextStyle) == 0x000420, "Member 'UCommonButtonStyle::NormalHoveredTextStyle' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, SelectedTextStyle) == 0x000428, "Member 'UCommonButtonStyle::SelectedTextStyle' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, SelectedHoveredTextStyle) == 0x000430, "Member 'UCommonButtonStyle::SelectedHoveredTextStyle' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, DisabledTextStyle) == 0x000438, "Member 'UCommonButtonStyle::DisabledTextStyle' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, PressedSlateSound) == 0x000440, "Member 'UCommonButtonStyle::PressedSlateSound' has a wrong offset!");
static_assert(offsetof(UCommonButtonStyle, HoveredSlateSound) == 0x000458, "Member 'UCommonButtonStyle::HoveredSlateSound' has a wrong offset!");

// Class CommonUI.CommonButtonInternal
// 0x0080 (0x0460 - 0x03E0)
class UCommonButtonInternal final : public UButton
{
public:
	UMulticastDelegateProperty_                   OnDoubleClicked;                                   // 0x03E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F0[0x40];                                     // 0x03F0(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinWidth;                                          // 0x0430(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MinHeight;                                         // 0x0434(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bButtonEnabled;                                    // 0x0438(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInteractionEnabled;                               // 0x0439(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_43A[0x26];                                     // 0x043A(0x0026)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonButtonInternal">();
	}
	static class UCommonButtonInternal* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonButtonInternal>();
	}
};
static_assert(alignof(UCommonButtonInternal) == 0x000008, "Wrong alignment on UCommonButtonInternal");
static_assert(sizeof(UCommonButtonInternal) == 0x000460, "Wrong size on UCommonButtonInternal");
static_assert(offsetof(UCommonButtonInternal, OnDoubleClicked) == 0x0003E0, "Member 'UCommonButtonInternal::OnDoubleClicked' has a wrong offset!");
static_assert(offsetof(UCommonButtonInternal, MinWidth) == 0x000430, "Member 'UCommonButtonInternal::MinWidth' has a wrong offset!");
static_assert(offsetof(UCommonButtonInternal, MinHeight) == 0x000434, "Member 'UCommonButtonInternal::MinHeight' has a wrong offset!");
static_assert(offsetof(UCommonButtonInternal, bButtonEnabled) == 0x000438, "Member 'UCommonButtonInternal::bButtonEnabled' has a wrong offset!");
static_assert(offsetof(UCommonButtonInternal, bInteractionEnabled) == 0x000439, "Member 'UCommonButtonInternal::bInteractionEnabled' has a wrong offset!");

// Class CommonUI.CommonDateTimeTextBlock
// 0x0020 (0x0290 - 0x0270)
class UCommonDateTimeTextBlock final : public UCommonTextBlock
{
public:
	uint8                                         Pad_270[0x20];                                     // 0x0270(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetDateTimeValue(const struct FDateTime& InDateTime, bool bShowAsCountdown);
	void SetTimespanValue(const struct FTimespan& InTimespan);

	struct FDateTime GetDateTime() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonDateTimeTextBlock">();
	}
	static class UCommonDateTimeTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonDateTimeTextBlock>();
	}
};
static_assert(alignof(UCommonDateTimeTextBlock) == 0x000008, "Wrong alignment on UCommonDateTimeTextBlock");
static_assert(sizeof(UCommonDateTimeTextBlock) == 0x000290, "Wrong size on UCommonDateTimeTextBlock");

// Class CommonUI.CommonGlobalInputHandler
// 0x0048 (0x0070 - 0x0028)
class UCommonGlobalInputHandler final : public UObject
{
public:
	uint8                                         Pad_28[0x48];                                      // 0x0028(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonGlobalInputHandler">();
	}
	static class UCommonGlobalInputHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonGlobalInputHandler>();
	}
};
static_assert(alignof(UCommonGlobalInputHandler) == 0x000008, "Wrong alignment on UCommonGlobalInputHandler");
static_assert(sizeof(UCommonGlobalInputHandler) == 0x000070, "Wrong size on UCommonGlobalInputHandler");

// Class CommonUI.CommonInputManager
// 0x0298 (0x02C0 - 0x0028)
class UCommonInputManager final : public UObject
{
public:
	uint8                                         Pad_28[0x238];                                     // 0x0028(0x0238)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ICommonActionHandlerInterface> CurrentlyHeldActionInputHandler;                   // 0x0260(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UCommonActivatablePanel*>        ActivatablePanelStack;                             // 0x0270(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class UCommonGlobalInputHandler*              GlobalInputHandler;                                // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_288[0x10];                                     // 0x0288(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FOperation>                     Operations;                                        // 0x0298(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A8[0x18];                                     // 0x02A8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetAvailableInputActions(TArray<struct FCommonInputActionHandlerData>* AvailableInputActions);
	void PopActivatablePanel(class UCommonActivatablePanel* ActivatablePanel);
	void PushActivatablePanel(class UCommonActivatablePanel* ActivatablePanel, bool bIntroPanel, bool bOutroPanelBelow);
	void ResumeStartingOperationProcessing();
	void SetGlobalInputHandlerPriorityFilter(int32 InFilterPriority);
	bool StartListeningForExistingHeldAction(const struct FDataTableRowHandle& InputActionDataRow, const TDelegate<void()>& CompleteEvent, const TDelegate<void(float HeldPercent)>& ProgressEvent);
	bool StopListeningForExistingHeldAction(const struct FDataTableRowHandle& InputActionDataRow, const TDelegate<void()>& CompleteEvent, const TDelegate<void(float HeldPercent)>& ProgressEvent);
	void SuspendStartingOperationProcessing();

	int32 GetGlobalInputHandlerPriorityFilter() const;
	bool IsInputSuspended() const;
	bool IsPanelOnStack(const class UCommonActivatablePanel* InPanel) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonInputManager">();
	}
	static class UCommonInputManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonInputManager>();
	}
};
static_assert(alignof(UCommonInputManager) == 0x000008, "Wrong alignment on UCommonInputManager");
static_assert(sizeof(UCommonInputManager) == 0x0002C0, "Wrong size on UCommonInputManager");
static_assert(offsetof(UCommonInputManager, CurrentlyHeldActionInputHandler) == 0x000260, "Member 'UCommonInputManager::CurrentlyHeldActionInputHandler' has a wrong offset!");
static_assert(offsetof(UCommonInputManager, ActivatablePanelStack) == 0x000270, "Member 'UCommonInputManager::ActivatablePanelStack' has a wrong offset!");
static_assert(offsetof(UCommonInputManager, GlobalInputHandler) == 0x000280, "Member 'UCommonInputManager::GlobalInputHandler' has a wrong offset!");
static_assert(offsetof(UCommonInputManager, Operations) == 0x000298, "Member 'UCommonInputManager::Operations' has a wrong offset!");

// Class CommonUI.CommonInputReflector
// 0x0030 (0x0240 - 0x0210)
class UCommonInputReflector : public UCommonUserWidget
{
public:
	TSubclassOf<class UCommonButton>              ButtonType;                                        // 0x0210(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UCommonButton*>                  ActiveButtons;                                     // 0x0218(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UCommonButton*>                  InactiveButtons;                                   // 0x0228(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_238[0x8];                                      // 0x0238(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearButtons();
	void OnButtonAdded(class UCommonButton* AddedButton, const struct FCommonInputActionHandlerData& Data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonInputReflector">();
	}
	static class UCommonInputReflector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonInputReflector>();
	}
};
static_assert(alignof(UCommonInputReflector) == 0x000008, "Wrong alignment on UCommonInputReflector");
static_assert(sizeof(UCommonInputReflector) == 0x000240, "Wrong size on UCommonInputReflector");
static_assert(offsetof(UCommonInputReflector, ButtonType) == 0x000210, "Member 'UCommonInputReflector::ButtonType' has a wrong offset!");
static_assert(offsetof(UCommonInputReflector, ActiveButtons) == 0x000218, "Member 'UCommonInputReflector::ActiveButtons' has a wrong offset!");
static_assert(offsetof(UCommonInputReflector, InactiveButtons) == 0x000228, "Member 'UCommonInputReflector::InactiveButtons' has a wrong offset!");

// Class CommonUI.CommonLazyImage
// 0x0048 (0x0210 - 0x01C8)
class UCommonLazyImage : public UImage
{
public:
	UMulticastDelegateProperty_                   OnLoadingStateChanged;                             // 0x01C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D8[0x30];                                     // 0x01D8(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonLoadGuard*                       LoadGuard;                                         // 0x0208(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void ForwardLoadingStateChanged(bool bIsLoading);
	void SetBrushFromLazyDisplayAsset(const TSoftObjectPtr<class UObject>& LazyObject, bool bMatchTextureSize);
	void SetBrushFromLazyMaterial(const TSoftObjectPtr<class UMaterialInterface>& LazyMaterial);
	void SetBrushFromLazyTexture(const TSoftObjectPtr<class UTexture2D>& LazyTexture, bool bMatchSize);
	void ShowDefaultImage();

	bool IsLoading() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonLazyImage">();
	}
	static class UCommonLazyImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonLazyImage>();
	}
};
static_assert(alignof(UCommonLazyImage) == 0x000008, "Wrong alignment on UCommonLazyImage");
static_assert(sizeof(UCommonLazyImage) == 0x000210, "Wrong size on UCommonLazyImage");
static_assert(offsetof(UCommonLazyImage, OnLoadingStateChanged) == 0x0001C8, "Member 'UCommonLazyImage::OnLoadingStateChanged' has a wrong offset!");
static_assert(offsetof(UCommonLazyImage, LoadGuard) == 0x000208, "Member 'UCommonLazyImage::LoadGuard' has a wrong offset!");

// Class CommonUI.CommonListViewNullItem
// 0x0000 (0x0028 - 0x0028)
class UCommonListViewNullItem final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonListViewNullItem">();
	}
	static class UCommonListViewNullItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonListViewNullItem>();
	}
};
static_assert(alignof(UCommonListViewNullItem) == 0x000008, "Wrong alignment on UCommonListViewNullItem");
static_assert(sizeof(UCommonListViewNullItem) == 0x000028, "Wrong size on UCommonListViewNullItem");

// Class CommonUI.CommonLoadGuard
// 0x0090 (0x01A8 - 0x0118)
class UCommonLoadGuard final : public UContentWidget
{
public:
	UMulticastDelegateProperty_                   OnLoadingStateChanged;                             // 0x0118(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          ThrobberAlignment;                                 // 0x0128(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                ThrobberPadding;                                   // 0x012C(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   LoadingText;                                       // 0x0140(0x0018)(Edit, NativeAccessSpecifierPrivate)
	struct FSoftClassPath                         TextStyleClass;                                    // 0x0158(0x0018)(Config, NativeAccessSpecifierPrivate)
	TSubclassOf<class UCommonTextStyle>           TextStyle;                                         // 0x0170(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCommonTextBlock*                       Text_LoadingText;                                  // 0x0178(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_180[0x28];                                     // 0x0180(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_GuardAndLoadAsset(const TSoftObjectPtr<class UObject>& InLazyAsset, const TDelegate<void(class UObject* Object)>& OnAssetLoaded);
	void OnAssetLoaded__DelegateSignature(class UObject* Object);
	void SetIsLoading(bool bInIsLoading);
	void SetLoadingText(const class FText& InLoadingText);

	bool IsLoading() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonLoadGuard">();
	}
	static class UCommonLoadGuard* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonLoadGuard>();
	}
};
static_assert(alignof(UCommonLoadGuard) == 0x000008, "Wrong alignment on UCommonLoadGuard");
static_assert(sizeof(UCommonLoadGuard) == 0x0001A8, "Wrong size on UCommonLoadGuard");
static_assert(offsetof(UCommonLoadGuard, OnLoadingStateChanged) == 0x000118, "Member 'UCommonLoadGuard::OnLoadingStateChanged' has a wrong offset!");
static_assert(offsetof(UCommonLoadGuard, ThrobberAlignment) == 0x000128, "Member 'UCommonLoadGuard::ThrobberAlignment' has a wrong offset!");
static_assert(offsetof(UCommonLoadGuard, ThrobberPadding) == 0x00012C, "Member 'UCommonLoadGuard::ThrobberPadding' has a wrong offset!");
static_assert(offsetof(UCommonLoadGuard, LoadingText) == 0x000140, "Member 'UCommonLoadGuard::LoadingText' has a wrong offset!");
static_assert(offsetof(UCommonLoadGuard, TextStyleClass) == 0x000158, "Member 'UCommonLoadGuard::TextStyleClass' has a wrong offset!");
static_assert(offsetof(UCommonLoadGuard, TextStyle) == 0x000170, "Member 'UCommonLoadGuard::TextStyle' has a wrong offset!");
static_assert(offsetof(UCommonLoadGuard, Text_LoadingText) == 0x000178, "Member 'UCommonLoadGuard::Text_LoadingText' has a wrong offset!");

// Class CommonUI.CommonObjectListItem
// 0x0000 (0x0028 - 0x0028)
class ICommonObjectListItem final : public ICommonListItem
{
public:
	void Reset();
	void SetData(class UObject* InData, class UCommonListView* OwningList);

	class UObject* GetData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonObjectListItem">();
	}
	static class ICommonObjectListItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ICommonObjectListItem>();
	}
};
static_assert(alignof(ICommonObjectListItem) == 0x000008, "Wrong alignment on ICommonObjectListItem");
static_assert(sizeof(ICommonObjectListItem) == 0x000028, "Wrong size on ICommonObjectListItem");

// Class CommonUI.CommonRotator
// 0x0080 (0x0800 - 0x0780)
class UCommonRotator : public UCommonButton
{
public:
	uint8                                         Pad_780[0x40];                                     // 0x0780(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnRotated;                                         // 0x07C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UCommonButton*                          ButtonLeft;                                        // 0x07D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonButton*                          ButtonRight;                                       // 0x07D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       MyText;                                            // 0x07E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7E8[0x18];                                     // 0x07E8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PopulateTextLabels(const TArray<class FText>& Labels);
	void SetSelectedItem(int32 InValue);
	void ShiftTextLeft();
	void ShiftTextRight();

	int32 GetSelectedIndex() const;
	class FText GetSelectedText() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonRotator">();
	}
	static class UCommonRotator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonRotator>();
	}
};
static_assert(alignof(UCommonRotator) == 0x000008, "Wrong alignment on UCommonRotator");
static_assert(sizeof(UCommonRotator) == 0x000800, "Wrong size on UCommonRotator");
static_assert(offsetof(UCommonRotator, OnRotated) == 0x0007C0, "Member 'UCommonRotator::OnRotated' has a wrong offset!");
static_assert(offsetof(UCommonRotator, ButtonLeft) == 0x0007D0, "Member 'UCommonRotator::ButtonLeft' has a wrong offset!");
static_assert(offsetof(UCommonRotator, ButtonRight) == 0x0007D8, "Member 'UCommonRotator::ButtonRight' has a wrong offset!");
static_assert(offsetof(UCommonRotator, MyText) == 0x0007E0, "Member 'UCommonRotator::MyText' has a wrong offset!");

// Class CommonUI.CommonTextStyle
// 0x0098 (0x00C0 - 0x0028)
class UCommonTextStyle : public UObject
{
public:
	struct FSlateFontInfo                         Font;                                              // 0x0028(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsesDropShadow;                                   // 0x0090(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ShadowOffset;                                      // 0x0094(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColor;                                       // 0x009C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                Margin;                                            // 0x00AC(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                         LineHeightPercentage;                              // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void GetColor(struct FLinearColor* OutColor) const;
	void GetFont(struct FSlateFontInfo* OutFont) const;
	float GetLineHeightPercentage() const;
	void GetMargin(struct FMargin* OutMargin) const;
	void GetShadowColor(struct FLinearColor* OutColor) const;
	void GetShadowOffset(struct FVector2D* OutShadowOffset) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonTextStyle">();
	}
	static class UCommonTextStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonTextStyle>();
	}
};
static_assert(alignof(UCommonTextStyle) == 0x000008, "Wrong alignment on UCommonTextStyle");
static_assert(sizeof(UCommonTextStyle) == 0x0000C0, "Wrong size on UCommonTextStyle");
static_assert(offsetof(UCommonTextStyle, Font) == 0x000028, "Member 'UCommonTextStyle::Font' has a wrong offset!");
static_assert(offsetof(UCommonTextStyle, Color) == 0x000080, "Member 'UCommonTextStyle::Color' has a wrong offset!");
static_assert(offsetof(UCommonTextStyle, bUsesDropShadow) == 0x000090, "Member 'UCommonTextStyle::bUsesDropShadow' has a wrong offset!");
static_assert(offsetof(UCommonTextStyle, ShadowOffset) == 0x000094, "Member 'UCommonTextStyle::ShadowOffset' has a wrong offset!");
static_assert(offsetof(UCommonTextStyle, ShadowColor) == 0x00009C, "Member 'UCommonTextStyle::ShadowColor' has a wrong offset!");
static_assert(offsetof(UCommonTextStyle, Margin) == 0x0000AC, "Member 'UCommonTextStyle::Margin' has a wrong offset!");
static_assert(offsetof(UCommonTextStyle, LineHeightPercentage) == 0x0000BC, "Member 'UCommonTextStyle::LineHeightPercentage' has a wrong offset!");

// Class CommonUI.CommonTextScrollStyle
// 0x0018 (0x0040 - 0x0028)
class UCommonTextScrollStyle : public UObject
{
public:
	float                                         Speed;                                             // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDelay;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndDelay;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInDelay;                                       // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutDelay;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonTextScrollStyle">();
	}
	static class UCommonTextScrollStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonTextScrollStyle>();
	}
};
static_assert(alignof(UCommonTextScrollStyle) == 0x000008, "Wrong alignment on UCommonTextScrollStyle");
static_assert(sizeof(UCommonTextScrollStyle) == 0x000040, "Wrong size on UCommonTextScrollStyle");
static_assert(offsetof(UCommonTextScrollStyle, Speed) == 0x000028, "Member 'UCommonTextScrollStyle::Speed' has a wrong offset!");
static_assert(offsetof(UCommonTextScrollStyle, StartDelay) == 0x00002C, "Member 'UCommonTextScrollStyle::StartDelay' has a wrong offset!");
static_assert(offsetof(UCommonTextScrollStyle, EndDelay) == 0x000030, "Member 'UCommonTextScrollStyle::EndDelay' has a wrong offset!");
static_assert(offsetof(UCommonTextScrollStyle, FadeInDelay) == 0x000034, "Member 'UCommonTextScrollStyle::FadeInDelay' has a wrong offset!");
static_assert(offsetof(UCommonTextScrollStyle, FadeOutDelay) == 0x000038, "Member 'UCommonTextScrollStyle::FadeOutDelay' has a wrong offset!");

// Class CommonUI.CommonTreeView
// 0x0028 (0x0320 - 0x02F8)
class UCommonTreeView final : public UCommonListView
{
public:
	TDelegate<void(class UObject* Item)>          OnGetChildrenForCategory;                          // 0x02F8(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAllowInvisibleItemSelection;                      // 0x0308(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_309[0x17];                                     // 0x0309(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DynamicHandleItemClickedCommonButton(class UCommonButton* Button);
	void RequestRefresh();
	void SetItemExpansion(class UObject* Item, bool InShouldExpandItem);
	void SetSelection(class UObject* InItem);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonTreeView">();
	}
	static class UCommonTreeView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonTreeView>();
	}
};
static_assert(alignof(UCommonTreeView) == 0x000008, "Wrong alignment on UCommonTreeView");
static_assert(sizeof(UCommonTreeView) == 0x000320, "Wrong size on UCommonTreeView");
static_assert(offsetof(UCommonTreeView, OnGetChildrenForCategory) == 0x0002F8, "Member 'UCommonTreeView::OnGetChildrenForCategory' has a wrong offset!");
static_assert(offsetof(UCommonTreeView, bAllowInvisibleItemSelection) == 0x000308, "Member 'UCommonTreeView::bAllowInvisibleItemSelection' has a wrong offset!");

// Class CommonUI.CommonUILibrary
// 0x0000 (0x0028 - 0x0028)
class UCommonUILibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UWidget* FindParentWidgetOfType(class UWidget* StartingWidget, TSubclassOf<class UWidget> Type);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonUILibrary">();
	}
	static class UCommonUILibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonUILibrary>();
	}
};
static_assert(alignof(UCommonUILibrary) == 0x000008, "Wrong alignment on UCommonUILibrary");
static_assert(sizeof(UCommonUILibrary) == 0x000028, "Wrong size on UCommonUILibrary");

// Class CommonUI.CommonUISettings
// 0x0080 (0x00A8 - 0x0028)
class UCommonUISettings final : public UObject
{
public:
	struct FSoftClassPath                         DefaultTextStyle_StringRef;                        // 0x0028(0x0018)(Edit, Config, NativeAccessSpecifierPublic)
	TSubclassOf<class UCommonTextStyle>           DefaultTextStyle;                                  // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         DefaultButtonStyle_StringRef;                      // 0x0048(0x0018)(Edit, Config, NativeAccessSpecifierPublic)
	TSubclassOf<class UCommonButtonStyle>         DefaultButtonStyle;                                // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         DefaultBorderStyle_StringRef;                      // 0x0068(0x0018)(Edit, Config, NativeAccessSpecifierPublic)
	TSubclassOf<class UCommonBorderStyle>         DefaultBorderStyle;                                // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCommonInputKeyDisplayConfiguration> InputKeyToPlatformSpecificDisplayDataMap;          // 0x0088(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    DefaultClickAction;                                // 0x0098(0x0010)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonUISettings">();
	}
	static class UCommonUISettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonUISettings>();
	}
};
static_assert(alignof(UCommonUISettings) == 0x000008, "Wrong alignment on UCommonUISettings");
static_assert(sizeof(UCommonUISettings) == 0x0000A8, "Wrong size on UCommonUISettings");
static_assert(offsetof(UCommonUISettings, DefaultTextStyle_StringRef) == 0x000028, "Member 'UCommonUISettings::DefaultTextStyle_StringRef' has a wrong offset!");
static_assert(offsetof(UCommonUISettings, DefaultTextStyle) == 0x000040, "Member 'UCommonUISettings::DefaultTextStyle' has a wrong offset!");
static_assert(offsetof(UCommonUISettings, DefaultButtonStyle_StringRef) == 0x000048, "Member 'UCommonUISettings::DefaultButtonStyle_StringRef' has a wrong offset!");
static_assert(offsetof(UCommonUISettings, DefaultButtonStyle) == 0x000060, "Member 'UCommonUISettings::DefaultButtonStyle' has a wrong offset!");
static_assert(offsetof(UCommonUISettings, DefaultBorderStyle_StringRef) == 0x000068, "Member 'UCommonUISettings::DefaultBorderStyle_StringRef' has a wrong offset!");
static_assert(offsetof(UCommonUISettings, DefaultBorderStyle) == 0x000080, "Member 'UCommonUISettings::DefaultBorderStyle' has a wrong offset!");
static_assert(offsetof(UCommonUISettings, InputKeyToPlatformSpecificDisplayDataMap) == 0x000088, "Member 'UCommonUISettings::InputKeyToPlatformSpecificDisplayDataMap' has a wrong offset!");
static_assert(offsetof(UCommonUISettings, DefaultClickAction) == 0x000098, "Member 'UCommonUISettings::DefaultClickAction' has a wrong offset!");

// Class CommonUI.CommonVisibilityWidget
// 0x0010 (0x0280 - 0x0270)
class UCommonVisibilityWidget final : public UCommonBorder
{
public:
	bool                                          bShowForGamepad;                                   // 0x0270(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowForMouseAndKeyboard;                          // 0x0271(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowForTouch;                                     // 0x0272(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowForPC;                                        // 0x0273(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowForMac;                                       // 0x0274(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowForPS4;                                       // 0x0275(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowForXBox;                                      // 0x0276(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowForIOS;                                       // 0x0277(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowForAndroid;                                   // 0x0278(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                              VisibleType;                                       // 0x0279(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                              HiddenType;                                        // 0x027A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27B[0x5];                                      // 0x027B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonVisibilityWidget">();
	}
	static class UCommonVisibilityWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonVisibilityWidget>();
	}
};
static_assert(alignof(UCommonVisibilityWidget) == 0x000008, "Wrong alignment on UCommonVisibilityWidget");
static_assert(sizeof(UCommonVisibilityWidget) == 0x000280, "Wrong size on UCommonVisibilityWidget");
static_assert(offsetof(UCommonVisibilityWidget, bShowForGamepad) == 0x000270, "Member 'UCommonVisibilityWidget::bShowForGamepad' has a wrong offset!");
static_assert(offsetof(UCommonVisibilityWidget, bShowForMouseAndKeyboard) == 0x000271, "Member 'UCommonVisibilityWidget::bShowForMouseAndKeyboard' has a wrong offset!");
static_assert(offsetof(UCommonVisibilityWidget, bShowForTouch) == 0x000272, "Member 'UCommonVisibilityWidget::bShowForTouch' has a wrong offset!");
static_assert(offsetof(UCommonVisibilityWidget, bShowForPC) == 0x000273, "Member 'UCommonVisibilityWidget::bShowForPC' has a wrong offset!");
static_assert(offsetof(UCommonVisibilityWidget, bShowForMac) == 0x000274, "Member 'UCommonVisibilityWidget::bShowForMac' has a wrong offset!");
static_assert(offsetof(UCommonVisibilityWidget, bShowForPS4) == 0x000275, "Member 'UCommonVisibilityWidget::bShowForPS4' has a wrong offset!");
static_assert(offsetof(UCommonVisibilityWidget, bShowForXBox) == 0x000276, "Member 'UCommonVisibilityWidget::bShowForXBox' has a wrong offset!");
static_assert(offsetof(UCommonVisibilityWidget, bShowForIOS) == 0x000277, "Member 'UCommonVisibilityWidget::bShowForIOS' has a wrong offset!");
static_assert(offsetof(UCommonVisibilityWidget, bShowForAndroid) == 0x000278, "Member 'UCommonVisibilityWidget::bShowForAndroid' has a wrong offset!");
static_assert(offsetof(UCommonVisibilityWidget, VisibleType) == 0x000279, "Member 'UCommonVisibilityWidget::VisibleType' has a wrong offset!");
static_assert(offsetof(UCommonVisibilityWidget, HiddenType) == 0x00027A, "Member 'UCommonVisibilityWidget::HiddenType' has a wrong offset!");

// Class CommonUI.CommonWidgetCarousel
// 0x0778 (0x0890 - 0x0118)
class UCommonWidgetCarousel final : public UPanelWidget
{
public:
	int32                                         ActiveWidgetIndex;                                 // 0x0118(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnCurrentPageIndexChanged;                         // 0x0120(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FWidgetCarouselNavigationBarStyle      NavigationStyle;                                   // 0x0130(0x0728)(Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_858[0x38];                                     // 0x0858(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BeginAutoScrolling(float ScrollInterval);
	void EndAutoScrolling();
	void NextPage();
	void PreviousPage();
	void SetActiveWidget(class UWidget* Widget);
	void SetActiveWidgetIndex(int32 Param_Index);

	int32 GetActiveWidgetIndex() const;
	class UWidget* GetWidgetAtIndex(int32 Param_Index) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonWidgetCarousel">();
	}
	static class UCommonWidgetCarousel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonWidgetCarousel>();
	}
};
static_assert(alignof(UCommonWidgetCarousel) == 0x000008, "Wrong alignment on UCommonWidgetCarousel");
static_assert(sizeof(UCommonWidgetCarousel) == 0x000890, "Wrong size on UCommonWidgetCarousel");
static_assert(offsetof(UCommonWidgetCarousel, ActiveWidgetIndex) == 0x000118, "Member 'UCommonWidgetCarousel::ActiveWidgetIndex' has a wrong offset!");
static_assert(offsetof(UCommonWidgetCarousel, OnCurrentPageIndexChanged) == 0x000120, "Member 'UCommonWidgetCarousel::OnCurrentPageIndexChanged' has a wrong offset!");
static_assert(offsetof(UCommonWidgetCarousel, NavigationStyle) == 0x000130, "Member 'UCommonWidgetCarousel::NavigationStyle' has a wrong offset!");

// Class CommonUI.CommonWidgetSwitcher
// 0x0050 (0x0180 - 0x0130)
class UCommonWidgetSwitcher : public UWidgetSwitcher
{
public:
	UMulticastDelegateProperty_                   OnActiveWidgetDeactivated;                         // 0x0130(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnActiveWidgetChanged;                             // 0x0140(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	ECommonSwitcherTransition                     TransitionType;                                    // 0x0150(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETransitionCurve                              TransitionCurveType;                               // 0x0151(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_152[0x2];                                      // 0x0152(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TransitionDuration;                                // 0x0154(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_158[0x22];                                     // 0x0158(0x0022)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bWidgetActivationEnabled;                          // 0x017A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bOutroPanelBelow;                                  // 0x017B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActivateNextWidget(bool bCanWrap);
	void ActivatePreviousWidget(bool bCanWrap);
	void ActivateWidget();
	void DeactivateWidget();
	void HandleActiveWidgetDeactivated(class UCommonActivatablePanel* DeactivatedPanel);
	void SetActiveWidget_Advanced(class UWidget* Widget, const bool AttemptActivationChange);
	void SetActiveWidgetIndex_Advanced(const int32 Param_Index, const bool AttemptActivationChange);

	bool HasWidgets() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonWidgetSwitcher">();
	}
	static class UCommonWidgetSwitcher* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonWidgetSwitcher>();
	}
};
static_assert(alignof(UCommonWidgetSwitcher) == 0x000008, "Wrong alignment on UCommonWidgetSwitcher");
static_assert(sizeof(UCommonWidgetSwitcher) == 0x000180, "Wrong size on UCommonWidgetSwitcher");
static_assert(offsetof(UCommonWidgetSwitcher, OnActiveWidgetDeactivated) == 0x000130, "Member 'UCommonWidgetSwitcher::OnActiveWidgetDeactivated' has a wrong offset!");
static_assert(offsetof(UCommonWidgetSwitcher, OnActiveWidgetChanged) == 0x000140, "Member 'UCommonWidgetSwitcher::OnActiveWidgetChanged' has a wrong offset!");
static_assert(offsetof(UCommonWidgetSwitcher, TransitionType) == 0x000150, "Member 'UCommonWidgetSwitcher::TransitionType' has a wrong offset!");
static_assert(offsetof(UCommonWidgetSwitcher, TransitionCurveType) == 0x000151, "Member 'UCommonWidgetSwitcher::TransitionCurveType' has a wrong offset!");
static_assert(offsetof(UCommonWidgetSwitcher, TransitionDuration) == 0x000154, "Member 'UCommonWidgetSwitcher::TransitionDuration' has a wrong offset!");
static_assert(offsetof(UCommonWidgetSwitcher, bWidgetActivationEnabled) == 0x00017A, "Member 'UCommonWidgetSwitcher::bWidgetActivationEnabled' has a wrong offset!");
static_assert(offsetof(UCommonWidgetSwitcher, bOutroPanelBelow) == 0x00017B, "Member 'UCommonWidgetSwitcher::bOutroPanelBelow' has a wrong offset!");

// Class CommonUI.CommonWidgetStack
// 0x0000 (0x0180 - 0x0180)
class UCommonWidgetStack final : public UCommonWidgetSwitcher
{
public:
	void ActivateWidget();
	void DeactivateWidget();
	class UWidget* PopWigdet();
	void PushWidget(class UWidget* InWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonWidgetStack">();
	}
	static class UCommonWidgetStack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonWidgetStack>();
	}
};
static_assert(alignof(UCommonWidgetStack) == 0x000008, "Wrong alignment on UCommonWidgetStack");
static_assert(sizeof(UCommonWidgetStack) == 0x000180, "Wrong size on UCommonWidgetStack");

}

