#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CommonUI

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "InputCore_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// Enum CommonUI.ECommonNumericType
// NumValues: 0x0005
enum class ECommonNumericType : uint8
{
	Number                                   = 0,
	Percentage                               = 1,
	Seconds                                  = 2,
	Distance                                 = 3,
	ECommonNumericType_MAX                   = 4,
};

// Enum CommonUI.ECommonInputType
// NumValues: 0x0006
enum class ECommonInputType : uint8
{
	MouseAndKeyboard                         = 0,
	XboxOneController                        = 1,
	PS4Controller                            = 2,
	Touch                                    = 3,
	Count                                    = 4,
	ECommonInputType_MAX                     = 5,
};

// Enum CommonUI.EInputActionState
// NumValues: 0x0005
enum class EInputActionState : uint8
{
	Enabled                                  = 0,
	Disabled                                 = 1,
	Hidden                                   = 2,
	HiddenAndDisabled                        = 3,
	EInputActionState_MAX                    = 4,
};

// Enum CommonUI.EItemAlignment
// NumValues: 0x0008
enum class EItemAlignment : uint8
{
	EvenlyDistributed                        = 0,
	EvenlySize                               = 1,
	EvenlyWide                               = 2,
	LeftAligned                              = 3,
	RightAligned                             = 4,
	CenterAligned                            = 5,
	Fill                                     = 6,
	EItemAlignment_MAX                       = 7,
};

// Enum CommonUI.EOperation
// NumValues: 0x0006
enum class EOperation : uint8
{
	Intro                                    = 0,
	Outro                                    = 1,
	Push                                     = 2,
	Pop                                      = 3,
	Invalid                                  = 4,
	EOperation_MAX                           = 5,
};

// Enum CommonUI.ECommonPlatformType
// NumValues: 0x0008
enum class ECommonPlatformType : uint8
{
	PC                                       = 0,
	Mac                                      = 1,
	PS4                                      = 2,
	XBox                                     = 3,
	IOS                                      = 4,
	Android                                  = 5,
	Count                                    = 6,
	ECommonPlatformType_MAX                  = 7,
};

// Enum CommonUI.ETransitionCurve
// NumValues: 0x0008
enum class ETransitionCurve : uint8
{
	Linear                                   = 0,
	QuadIn                                   = 1,
	QuadOut                                  = 2,
	QuadInOut                                = 3,
	CubicIn                                  = 4,
	CubicOut                                 = 5,
	CubicInOut                               = 6,
	ETransitionCurve_MAX                     = 7,
};

// Enum CommonUI.ECommonSwitcherTransition
// NumValues: 0x0005
enum class ECommonSwitcherTransition : uint8
{
	FadeOnly                                 = 0,
	Horizontal                               = 1,
	Vertical                                 = 2,
	Zoom                                     = 3,
	ECommonSwitcherTransition_MAX            = 4,
};

// ScriptStruct CommonUI.CommonInputKeyDisplayData
// 0x01E0 (0x01E0 - 0x0000)
struct FCommonInputKeyDisplayData final
{
public:
	struct FSlateBrush                            PlatformSpecificBrush[0x4];                        // 0x0000(0x0078)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommonInputKeyDisplayData) == 0x000008, "Wrong alignment on FCommonInputKeyDisplayData");
static_assert(sizeof(FCommonInputKeyDisplayData) == 0x0001E0, "Wrong size on FCommonInputKeyDisplayData");
static_assert(offsetof(FCommonInputKeyDisplayData, PlatformSpecificBrush) == 0x000000, "Member 'FCommonInputKeyDisplayData::PlatformSpecificBrush' has a wrong offset!");

// ScriptStruct CommonUI.Operation
// 0x0018 (0x0018 - 0x0000)
struct FOperation final
{
public:
	EOperation                                    Operation;                                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonActivatablePanel*                Panel;                                             // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIntroPanel;                                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutroPanelBelow;                                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOperation) == 0x000008, "Wrong alignment on FOperation");
static_assert(sizeof(FOperation) == 0x000018, "Wrong size on FOperation");
static_assert(offsetof(FOperation, Operation) == 0x000000, "Member 'FOperation::Operation' has a wrong offset!");
static_assert(offsetof(FOperation, Panel) == 0x000008, "Member 'FOperation::Panel' has a wrong offset!");
static_assert(offsetof(FOperation, bIntroPanel) == 0x000010, "Member 'FOperation::bIntroPanel' has a wrong offset!");
static_assert(offsetof(FOperation, bOutroPanelBelow) == 0x000011, "Member 'FOperation::bOutroPanelBelow' has a wrong offset!");

// ScriptStruct CommonUI.CommonNumberFormattingOptions
// 0x0014 (0x0014 - 0x0000)
struct FCommonNumberFormattingOptions final
{
public:
	ERoundingMode                                 RoundingMode;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseGrouping;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinimumIntegralDigits;                             // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaximumIntegralDigits;                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinimumFractionalDigits;                           // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaximumFractionalDigits;                           // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommonNumberFormattingOptions) == 0x000004, "Wrong alignment on FCommonNumberFormattingOptions");
static_assert(sizeof(FCommonNumberFormattingOptions) == 0x000014, "Wrong size on FCommonNumberFormattingOptions");
static_assert(offsetof(FCommonNumberFormattingOptions, RoundingMode) == 0x000000, "Member 'FCommonNumberFormattingOptions::RoundingMode' has a wrong offset!");
static_assert(offsetof(FCommonNumberFormattingOptions, UseGrouping) == 0x000001, "Member 'FCommonNumberFormattingOptions::UseGrouping' has a wrong offset!");
static_assert(offsetof(FCommonNumberFormattingOptions, MinimumIntegralDigits) == 0x000004, "Member 'FCommonNumberFormattingOptions::MinimumIntegralDigits' has a wrong offset!");
static_assert(offsetof(FCommonNumberFormattingOptions, MaximumIntegralDigits) == 0x000008, "Member 'FCommonNumberFormattingOptions::MaximumIntegralDigits' has a wrong offset!");
static_assert(offsetof(FCommonNumberFormattingOptions, MinimumFractionalDigits) == 0x00000C, "Member 'FCommonNumberFormattingOptions::MinimumFractionalDigits' has a wrong offset!");
static_assert(offsetof(FCommonNumberFormattingOptions, MaximumFractionalDigits) == 0x000010, "Member 'FCommonNumberFormattingOptions::MaximumFractionalDigits' has a wrong offset!");

// ScriptStruct CommonUI.CommonRegisteredTabInfo
// 0x0018 (0x0018 - 0x0000)
struct FCommonRegisteredTabInfo final
{
public:
	int32                                         TabIndex;                                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButton*                          TabButton;                                         // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                ContentInstance;                                   // 0x0010(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommonRegisteredTabInfo) == 0x000008, "Wrong alignment on FCommonRegisteredTabInfo");
static_assert(sizeof(FCommonRegisteredTabInfo) == 0x000018, "Wrong size on FCommonRegisteredTabInfo");
static_assert(offsetof(FCommonRegisteredTabInfo, TabIndex) == 0x000000, "Member 'FCommonRegisteredTabInfo::TabIndex' has a wrong offset!");
static_assert(offsetof(FCommonRegisteredTabInfo, TabButton) == 0x000008, "Member 'FCommonRegisteredTabInfo::TabButton' has a wrong offset!");
static_assert(offsetof(FCommonRegisteredTabInfo, ContentInstance) == 0x000010, "Member 'FCommonRegisteredTabInfo::ContentInstance' has a wrong offset!");

// ScriptStruct CommonUI.CommonInputActionData
// 0x0268 (0x0270 - 0x0008)
struct FCommonInputActionData final : public FTableRowBase
{
public:
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FKey                                   PlatformSpecificKeys[0x4];                         // 0x0020(0x0018)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputActionState                             OverrrideStateForInputType[0x4];                   // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            InputTypeOverrideBrush[0x4];                       // 0x0088(0x0078)(Edit, NativeAccessSpecifierPublic)
	bool                                          bActionRequiresHold;                               // 0x0268(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_269[0x3];                                      // 0x0269(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HoldTime;                                          // 0x026C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommonInputActionData) == 0x000008, "Wrong alignment on FCommonInputActionData");
static_assert(sizeof(FCommonInputActionData) == 0x000270, "Wrong size on FCommonInputActionData");
static_assert(offsetof(FCommonInputActionData, DisplayName) == 0x000008, "Member 'FCommonInputActionData::DisplayName' has a wrong offset!");
static_assert(offsetof(FCommonInputActionData, PlatformSpecificKeys) == 0x000020, "Member 'FCommonInputActionData::PlatformSpecificKeys' has a wrong offset!");
static_assert(offsetof(FCommonInputActionData, OverrrideStateForInputType) == 0x000080, "Member 'FCommonInputActionData::OverrrideStateForInputType' has a wrong offset!");
static_assert(offsetof(FCommonInputActionData, InputTypeOverrideBrush) == 0x000088, "Member 'FCommonInputActionData::InputTypeOverrideBrush' has a wrong offset!");
static_assert(offsetof(FCommonInputActionData, bActionRequiresHold) == 0x000268, "Member 'FCommonInputActionData::bActionRequiresHold' has a wrong offset!");
static_assert(offsetof(FCommonInputActionData, HoldTime) == 0x00026C, "Member 'FCommonInputActionData::HoldTime' has a wrong offset!");

// ScriptStruct CommonUI.CommonInputActionHandlerData
// 0x0018 (0x0018 - 0x0000)
struct FCommonInputActionHandlerData final
{
public:
	struct FDataTableRowHandle                    InputActionRow;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	EInputActionState                             State;                                             // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommonInputActionHandlerData) == 0x000008, "Wrong alignment on FCommonInputActionHandlerData");
static_assert(sizeof(FCommonInputActionHandlerData) == 0x000018, "Wrong size on FCommonInputActionHandlerData");
static_assert(offsetof(FCommonInputActionHandlerData, InputActionRow) == 0x000000, "Member 'FCommonInputActionHandlerData::InputActionRow' has a wrong offset!");
static_assert(offsetof(FCommonInputActionHandlerData, State) == 0x000010, "Member 'FCommonInputActionHandlerData::State' has a wrong offset!");

// ScriptStruct CommonUI.CommonInputKeyDisplayConfiguration
// 0x01F8 (0x01F8 - 0x0000)
struct FCommonInputKeyDisplayConfiguration final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCommonInputKeyDisplayData             Value;                                             // 0x0018(0x01E0)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommonInputKeyDisplayConfiguration) == 0x000008, "Wrong alignment on FCommonInputKeyDisplayConfiguration");
static_assert(sizeof(FCommonInputKeyDisplayConfiguration) == 0x0001F8, "Wrong size on FCommonInputKeyDisplayConfiguration");
static_assert(offsetof(FCommonInputKeyDisplayConfiguration, Key) == 0x000000, "Member 'FCommonInputKeyDisplayConfiguration::Key' has a wrong offset!");
static_assert(offsetof(FCommonInputKeyDisplayConfiguration, Value) == 0x000018, "Member 'FCommonInputKeyDisplayConfiguration::Value' has a wrong offset!");

}

