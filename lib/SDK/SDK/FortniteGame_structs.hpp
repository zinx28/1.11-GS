#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FortniteGame

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "OnlineSubsystemUtils_structs.hpp"
#include "SlateCore_structs.hpp"
#include "McpProfileSys_structs.hpp"
#include "InputCore_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "Party_structs.hpp"
#include "AIModule_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "UMG_structs.hpp"
#include "Account_structs.hpp"


namespace SDK
{

// Enum FortniteGame.EFortAIDirectorEvent
// NumValues: 0x0019
enum class EFortAIDirectorEvent : uint8
{
	PlayerAIEnemies                          = 0,
	PlayerTakeDamage                         = 1,
	PlayerHealth                             = 2,
	PlayerDeath                              = 3,
	PlayerLookAtAIEnemy                      = 4,
	PlayerDamageAIEnemy                      = 5,
	PlayerKillAIEnemy                        = 6,
	PlayerHealingPotential                   = 7,
	PlayerAmmoLight                          = 8,
	PlayerAmmoMedium                         = 9,
	PlayerAmmoHeavy                          = 10,
	PlayerAmmoShells                         = 11,
	PlayerAmmoEnergy                         = 12,
	PlayerAINear                             = 13,
	PlayerMovement                           = 14,
	ObjectiveTakeDamage                      = 15,
	ObjectiveHealth                          = 16,
	ObjectiveDestroyed                       = 17,
	TrapFired                                = 18,
	TrapDamagedAIEnemy                       = 19,
	ObjectivePathCost                        = 20,
	PlayerPathCost                           = 21,
	ObjectiveNearbyBuildingDamaged           = 22,
	Max_None                                 = 23,
	EFortAIDirectorEvent_MAX                 = 24,
};

// Enum FortniteGame.EKeepDefenseState
// NumValues: 0x0005
enum class EKeepDefenseState : uint8
{
	Inactive                                 = 0,
	Warmup                                   = 1,
	Defense                                  = 2,
	LastAlive                                = 3,
	Max                                      = 4,
};

// Enum FortniteGame.EFortDayPhase
// NumValues: 0x0006
enum class EFortDayPhase : uint8
{
	Morning                                  = 0,
	Day                                      = 1,
	Evening                                  = 2,
	Night                                    = 3,
	NumPhases                                = 4,
	EFortDayPhase_MAX                        = 5,
};

// Enum FortniteGame.EFortInventoryType
// NumValues: 0x0004
enum class EFortInventoryType : uint8
{
	World                                    = 0,
	Account                                  = 1,
	Outpost                                  = 2,
	MAX                                      = 3,
};

// Enum FortniteGame.EOfferPurchaseError
// NumValues: 0x0009
enum class EOfferPurchaseError : uint8
{
	NoError                                  = 0,
	PendingServerConfirmation                = 1,
	CannotAffordItem                         = 2,
	InvalidOfferID                           = 3,
	InvalidPriceIndex                        = 4,
	NoneLeft                                 = 5,
	PurchaseAlreadyPending                   = 6,
	NoConnection                             = 7,
	EOfferPurchaseError_MAX                  = 8,
};

// Enum FortniteGame.EFortAlteration
// NumValues: 0x000A
enum class EFortAlteration : uint8
{
	AttributeSlot                            = 0,
	GameplaySlot                             = 1,
	ComplexCosmeticSlot                      = 2,
	ColorSlot                                = 3,
	HeroSpecializationTier1Slot              = 4,
	HeroSpecializationTier2Slot              = 5,
	HeroSpecializationTier3Slot              = 6,
	HeroSpecializationTier4Slot              = 7,
	HeroSpecializationTier5Slot              = 8,
	EFortAlteration_MAX                      = 9,
};

// Enum FortniteGame.EFortItemType
// NumValues: 0x0049
enum class EFortItemType : uint8
{
	WorldItem                                = 0,
	Ammo                                     = 1,
	Badge                                    = 2,
	BackpackPickup                           = 3,
	BuildingPiece                            = 4,
	CharacterPart                            = 5,
	Consumable                               = 6,
	Deco                                     = 7,
	EditTool                                 = 8,
	Ingredient                               = 9,
	Food                                     = 10,
	Gadget                                   = 11,
	HomebaseGadget                           = 12,
	HeroAbility                              = 13,
	MissionItem                              = 14,
	Trap                                     = 15,
	Weapon                                   = 16,
	WeaponMelee                              = 17,
	WeaponRanged                             = 18,
	WeaponHarvest                            = 19,
	WorldResource                            = 20,
	AccountItem                              = 21,
	AccountResource                          = 22,
	CollectedResource                        = 23,
	Alteration                               = 24,
	CardPack                                 = 25,
	CharacterCosmetic                        = 26,
	Currency                                 = 27,
	Hero                                     = 28,
	Schematic                                = 29,
	Worker                                   = 30,
	Token                                    = 31,
	DailyRewardScheduleToken                 = 32,
	CodeToken                                = 33,
	Buff                                     = 34,
	BuffCredit                               = 35,
	Quest                                    = 36,
	Compendium                               = 37,
	CompendiumBundle                         = 38,
	GameplayModifier                         = 39,
	Outpost                                  = 40,
	HomebaseNode                             = 41,
	Defender                                 = 42,
	ConversionControl                        = 43,
	DeployableBaseCloudSave                  = 44,
	ConsumableAccountItem                    = 45,
	Quota                                    = 46,
	Expedition                               = 47,
	HomebaseBannerIcon                       = 48,
	HomebaseBannerColor                      = 49,
	AthenaGlider                             = 50,
	AthenaPickaxe                            = 51,
	AthenaHat                                = 52,
	AthenaBackpack                           = 53,
	AthenaCharacter                          = 54,
	AthenaDance                              = 55,
	AthenaConsumableEmote                    = 56,
	AthenaLoadingScreen                      = 57,
	AthenaBattleBus                          = 58,
	AthenaVictoryPose                        = 59,
	AthenaSeasonTreasure                     = 60,
	AthenaSeason                             = 61,
	EventDescription                         = 62,
	AthenaMedal                              = 63,
	AthenaEventToken                         = 64,
	EventPurchaseTracker                     = 65,
	SpecialItem                              = 66,
	Emote                                    = 67,
	Stack                                    = 68,
	CollectionBookPage                       = 69,
	Profile                                  = 70,
	Max_None                                 = 71,
	EFortItemType_MAX                        = 72,
};

// Enum FortniteGame.EFortTeam
// NumValues: 0x0069
enum class EFortTeam : uint8
{
	HumanCampaign                            = 0,
	Monster                                  = 1,
	HumanPvP_Team1                           = 2,
	HumanPvP_Team2                           = 3,
	HumanPvP_Team3                           = 4,
	HumanPvP_Team4                           = 5,
	HumanPvP_Team5                           = 6,
	HumanPvP_Team6                           = 7,
	HumanPvP_Team7                           = 8,
	HumanPvP_Team8                           = 9,
	HumanPvP_Team9                           = 10,
	HumanPvP_Team10                          = 11,
	HumanPvP_Team11                          = 12,
	HumanPvP_Team12                          = 13,
	HumanPvP_Team13                          = 14,
	HumanPvP_Team14                          = 15,
	HumanPvP_Team15                          = 16,
	HumanPvP_Team16                          = 17,
	HumanPvP_Team17                          = 18,
	HumanPvP_Team18                          = 19,
	HumanPvP_Team19                          = 20,
	HumanPvP_Team20                          = 21,
	HumanPvP_Team21                          = 22,
	HumanPvP_Team22                          = 23,
	HumanPvP_Team23                          = 24,
	HumanPvP_Team24                          = 25,
	HumanPvP_Team25                          = 26,
	HumanPvP_Team26                          = 27,
	HumanPvP_Team27                          = 28,
	HumanPvP_Team28                          = 29,
	HumanPvP_Team29                          = 30,
	HumanPvP_Team30                          = 31,
	HumanPvP_Team31                          = 32,
	HumanPvP_Team32                          = 33,
	HumanPvP_Team33                          = 34,
	HumanPvP_Team34                          = 35,
	HumanPvP_Team35                          = 36,
	HumanPvP_Team36                          = 37,
	HumanPvP_Team37                          = 38,
	HumanPvP_Team38                          = 39,
	HumanPvP_Team39                          = 40,
	HumanPvP_Team40                          = 41,
	HumanPvP_Team41                          = 42,
	HumanPvP_Team42                          = 43,
	HumanPvP_Team43                          = 44,
	HumanPvP_Team44                          = 45,
	HumanPvP_Team45                          = 46,
	HumanPvP_Team46                          = 47,
	HumanPvP_Team47                          = 48,
	HumanPvP_Team48                          = 49,
	HumanPvP_Team49                          = 50,
	HumanPvP_Team50                          = 51,
	HumanPvP_Team51                          = 52,
	HumanPvP_Team52                          = 53,
	HumanPvP_Team53                          = 54,
	HumanPvP_Team54                          = 55,
	HumanPvP_Team55                          = 56,
	HumanPvP_Team56                          = 57,
	HumanPvP_Team57                          = 58,
	HumanPvP_Team58                          = 59,
	HumanPvP_Team59                          = 60,
	HumanPvP_Team60                          = 61,
	HumanPvP_Team61                          = 62,
	HumanPvP_Team62                          = 63,
	HumanPvP_Team63                          = 64,
	HumanPvP_Team64                          = 65,
	HumanPvP_Team65                          = 66,
	HumanPvP_Team66                          = 67,
	HumanPvP_Team67                          = 68,
	HumanPvP_Team68                          = 69,
	HumanPvP_Team69                          = 70,
	HumanPvP_Team70                          = 71,
	HumanPvP_Team71                          = 72,
	HumanPvP_Team72                          = 73,
	HumanPvP_Team73                          = 74,
	HumanPvP_Team74                          = 75,
	HumanPvP_Team75                          = 76,
	HumanPvP_Team76                          = 77,
	HumanPvP_Team77                          = 78,
	HumanPvP_Team78                          = 79,
	HumanPvP_Team79                          = 80,
	HumanPvP_Team80                          = 81,
	HumanPvP_Team81                          = 82,
	HumanPvP_Team82                          = 83,
	HumanPvP_Team83                          = 84,
	HumanPvP_Team84                          = 85,
	HumanPvP_Team85                          = 86,
	HumanPvP_Team86                          = 87,
	HumanPvP_Team87                          = 88,
	HumanPvP_Team88                          = 89,
	HumanPvP_Team89                          = 90,
	HumanPvP_Team90                          = 91,
	HumanPvP_Team91                          = 92,
	HumanPvP_Team92                          = 93,
	HumanPvP_Team93                          = 94,
	HumanPvP_Team94                          = 95,
	HumanPvP_Team95                          = 96,
	HumanPvP_Team96                          = 97,
	HumanPvP_Team97                          = 98,
	HumanPvP_Team98                          = 99,
	HumanPvP_Team99                          = 100,
	HumanPvP_Team100                         = 101,
	HumanPvP_Team101                         = 102,
	Spectator                                = 103,
	MAX                                      = 104,
};

// Enum FortniteGame.EFortCustomPartType
// NumValues: 0x0008
enum class EFortCustomPartType : uint8
{
	Head                                     = 0,
	Body                                     = 1,
	Hat                                      = 2,
	Backpack                                 = 3,
	Charm                                    = 4,
	Face                                     = 5,
	NumTypes                                 = 6,
	EFortCustomPartType_MAX                  = 7,
};

// Enum FortniteGame.EFortReportDayPhase
// NumValues: 0x0005
enum class EFortReportDayPhase : uint8
{
	Dawn                                     = 0,
	Dusk                                     = 1,
	ZoneFinished                             = 2,
	PlayerLogout                             = 3,
	EFortReportDayPhase_MAX                  = 4,
};

// Enum FortniteGame.ERewardSource
// NumValues: 0x000B
enum class ERewardSource : uint8
{
	Invalid                                  = 0,
	MinutesPlayed                            = 1,
	FirstKill                                = 2,
	TeamKills                                = 3,
	Placement                                = 4,
	Medals                                   = 5,
	FirstWin                                 = 6,
	SeasonLevelUp                            = 7,
	BookLevelUp                              = 8,
	MAX_COUNT                                = 9,
	ERewardSource_MAX                        = 10,
};

// Enum FortniteGame.EAthenaMatchXpMultiplierSource
// NumValues: 0x0006
enum class EAthenaMatchXpMultiplierSource : uint8
{
	Invalid                                  = 0,
	BattlePassSelf                           = 1,
	BattlePassFriends                        = 2,
	CosmeticSet                              = 3,
	MAX_COUNT                                = 4,
	EAthenaMatchXpMultiplierSource_MAX       = 5,
};

// Enum FortniteGame.EAthenaGamePhase
// NumValues: 0x0007
enum class EAthenaGamePhase : uint8
{
	None                                     = 0,
	Setup                                    = 1,
	Warmup                                   = 2,
	Aircraft                                 = 3,
	SafeZones                                = 4,
	EndGame                                  = 5,
	EAthenaGamePhase_MAX                     = 6,
};

// Enum FortniteGame.EAthenaGamePhaseStep
// NumValues: 0x000B
enum class EAthenaGamePhaseStep : uint8
{
	None                                     = 0,
	Setup                                    = 1,
	Warmup                                   = 2,
	GetReady                                 = 3,
	BusLocked                                = 4,
	BusFlying                                = 5,
	StormForming                             = 6,
	StormHolding                             = 7,
	StormShrinking                           = 8,
	EndGame                                  = 9,
	EAthenaGamePhaseStep_MAX                 = 10,
};

// Enum FortniteGame.ECaptureState
// NumValues: 0x0007
enum class ECaptureState : uint8
{
	CS_Idle                                  = 0,
	CS_Capturing                             = 1,
	CS_Contested                             = 2,
	CS_Resetting                             = 3,
	CS_Captured                              = 4,
	CS_Reset                                 = 5,
	CS_MAX                                   = 6,
};

// Enum FortniteGame.EFOBIOStatus
// NumValues: 0x0004
enum class EFOBIOStatus : uint8
{
	Saving                                   = 0,
	Loading                                  = 1,
	Free                                     = 2,
	EFOBIOStatus_MAX                         = 3,
};

// Enum FortniteGame.ECollectionBookRewardType
// NumValues: 0x0005
enum class ECollectionBookRewardType : uint8
{
	Uninitialized                            = 0,
	Book                                     = 1,
	Page                                     = 2,
	Section                                  = 3,
	ECollectionBookRewardType_MAX            = 4,
};

// Enum FortniteGame.EFortObjectiveStatus
// NumValues: 0x0007
enum class EFortObjectiveStatus : uint8
{
	Created                                  = 0,
	InProgress                               = 1,
	Succeeded                                = 2,
	Failed                                   = 3,
	NeutralCompletion                        = 4,
	Max_None                                 = 5,
	EFortObjectiveStatus_MAX                 = 6,
};

// Enum FortniteGame.EFortMissionVisibilityOverride
// NumValues: 0x0004
enum class EFortMissionVisibilityOverride : uint8
{
	Visible                                  = 0,
	Invisible                                = 1,
	Max_None                                 = 2,
	EFortMissionVisibilityOverride_MAX       = 3,
};

// Enum FortniteGame.EFortPrototypingStatus
// NumValues: 0x0004
enum class EFortPrototypingStatus : uint8
{
	Unknown                                  = 0,
	Disabled                                 = 1,
	Enabled                                  = 2,
	EFortPrototypingStatus_MAX               = 3,
};

// Enum FortniteGame.EMatchmakingCompleteResult
// NumValues: 0x0009
enum class EMatchmakingCompleteResult : uint8
{
	NotStarted                               = 0,
	UpdateNeeded                             = 1,
	OutpostNotFound                          = 2,
	Cancelled                                = 3,
	NoResults                                = 4,
	Failure                                  = 5,
	CreateFailure                            = 6,
	Success                                  = 7,
	EMatchmakingCompleteResult_MAX           = 8,
};

// Enum FortniteGame.EMatchmakingState
// NumValues: 0x000F
enum class EMatchmakingState : uint8
{
	NotMatchmaking                           = 0,
	CancelingMatchmaking                     = 1,
	ReleasingLock                            = 2,
	AcquiringLock                            = 3,
	LockAcquistionFailure                    = 4,
	FindingEmptyServer                       = 5,
	FindingExistingSession                   = 6,
	TestingEmptyServers                      = 7,
	TestingExistingSessions                  = 8,
	JoiningExistingSession                   = 9,
	NoMatchesAvailable                       = 10,
	CleaningUpExisting                       = 11,
	HandlingFailure                          = 12,
	JoinSuccess                              = 13,
	EMatchmakingState_MAX                    = 14,
};

// Enum FortniteGame.EFortPartyRestriction
// NumValues: 0x000A
enum class EFortPartyRestriction : uint8
{
	Invalid                                  = 0,
	PartyCreatePending                       = 1,
	AlreadyInParty                           = 2,
	PartyFull                                = 3,
	GameFull                                 = 4,
	Private                                  = 5,
	CurrentlyNotAvailable                    = 6,
	NotPlayingThisGame                       = 7,
	GameModeRestricted                       = 8,
	Max                                      = 9,
};

// Enum FortniteGame.EFortFriendRequestStatus
// NumValues: 0x0005
enum class EFortFriendRequestStatus : uint8
{
	None                                     = 0,
	Accepted                                 = 1,
	PendingReceived                          = 2,
	PendingSent                              = 3,
	EFortFriendRequestStatus_MAX             = 4,
};

// Enum FortniteGame.EFortPartyMemberLocation
// NumValues: 0x0008
enum class EFortPartyMemberLocation : uint8
{
	PreLobby                                 = 0,
	ConnectingToLobby                        = 1,
	Lobby                                    = 2,
	JoiningGame                              = 3,
	ProcessingRejoin                         = 4,
	InGame                                   = 5,
	ReturningToFrontEnd                      = 6,
	EFortPartyMemberLocation_MAX             = 7,
};

// Enum FortniteGame.EFortAthenaPlaylist
// NumValues: 0x000D
enum class EFortAthenaPlaylist : uint8
{
	AthenaSolo                               = 0,
	AthenaDuo                                = 1,
	AthenaSquad                              = 2,
	AthenaFiftyFifty                         = 3,
	AthenaEvent1                             = 4,
	AthenaEvent2                             = 5,
	AthenaEvent3                             = 6,
	AthenaEvent4                             = 7,
	AthenaEvent5                             = 8,
	AthenaEvent6                             = 9,
	AthenaEvent7                             = 10,
	AthenaEvent8                             = 11,
	EFortAthenaPlaylist_MAX                  = 12,
};

// Enum FortniteGame.EFortPartyState
// NumValues: 0x000B
enum class EFortPartyState : uint8
{
	Undetermined                             = 0,
	WorldView                                = 1,
	TheaterView                              = 2,
	Matchmaking                              = 3,
	PostMatchmaking                          = 4,
	ReturningToFrontEnd                      = 5,
	BattleRoyaleView                         = 6,
	BattleRoyalePreloading                   = 7,
	BattleRoyaleMatchmaking                  = 8,
	BattleRoyalePostMatchmaking              = 9,
	EFortPartyState_MAX                      = 10,
};

// Enum FortniteGame.EFortPartyMemberDisplayState
// NumValues: 0x0004
enum class EFortPartyMemberDisplayState : uint8
{
	Open                                     = 0,
	Connecting                               = 1,
	Connected                                = 2,
	Max                                      = 3,
};

// Enum FortniteGame.EFortPartyTransition
// NumValues: 0x0004
enum class EFortPartyTransition : uint8
{
	Idle                                     = 0,
	Joining                                  = 1,
	Leaving                                  = 2,
	Max                                      = 3,
};

// Enum FortniteGame.EFortSocialItemHeaderType
// NumValues: 0x0004
enum class EFortSocialItemHeaderType : uint8
{
	PartyInvites                             = 0,
	Friends                                  = 1,
	None                                     = 2,
	EFortSocialItemHeaderType_MAX            = 3,
};

// Enum FortniteGame.EFortDialogFeedbackType
// NumValues: 0x0005
enum class EFortDialogFeedbackType : uint8
{
	FriendRequestSent                        = 0,
	FriendRequestReceived                    = 1,
	FriendRequestAccepted                    = 2,
	Default                                  = 3,
	EFortDialogFeedbackType_MAX              = 4,
};

// Enum FortniteGame.EFortEncounterDirection
// NumValues: 0x000A
enum class EFortEncounterDirection : uint8
{
	North                                    = 0,
	NorthEast                                = 1,
	East                                     = 2,
	SouthEast                                = 3,
	South                                    = 4,
	SouthWest                                = 5,
	West                                     = 6,
	NorthWest                                = 7,
	Max_None                                 = 8,
	EFortEncounterDirection_MAX              = 9,
};

// Enum FortniteGame.EAIHotSpotAssignmentFilter
// NumValues: 0x0004
enum class EAIHotSpotAssignmentFilter : uint8
{
	All                                      = 0,
	WithSlots                                = 1,
	WaitingList                              = 2,
	EAIHotSpotAssignmentFilter_MAX           = 3,
};

// Enum FortniteGame.EAIHotSpotSlotFilter
// NumValues: 0x0004
enum class EAIHotSpotSlotFilter : uint8
{
	All                                      = 0,
	AvailableOnly                            = 1,
	UnavailableOnly                          = 2,
	EAIHotSpotSlotFilter_MAX                 = 3,
};

// Enum FortniteGame.EAIHotSpotSlot
// NumValues: 0x0006
enum class EAIHotSpotSlot : uint8
{
	Free                                     = 0,
	Claimed                                  = 1,
	Occupied                                 = 2,
	Blocked                                  = 3,
	Disabled                                 = 4,
	EAIHotSpotSlot_MAX                       = 5,
};

// Enum FortniteGame.EBoundingBoxSlotDirectionCalculation
// NumValues: 0x0005
enum class EBoundingBoxSlotDirectionCalculation : uint8
{
	Auto                                     = 0,
	FaceWall                                 = 1,
	FaceAwayFromWall                         = 2,
	FaceCenter                               = 3,
	EBoundingBoxSlotDirectionCalculation_MAX = 4,
};

// Enum FortniteGame.EAthenaPlaylistFillType
// NumValues: 0x0005
enum class EAthenaPlaylistFillType : uint8
{
	NoFill                                   = 0,
	OptionalFill_DefaultOff                  = 1,
	OptionalFill_DefaultOn                   = 2,
	MandatoryFill                            = 3,
	EAthenaPlaylistFillType_MAX              = 4,
};

// Enum FortniteGame.EEventTokenType
// NumValues: 0x0003
enum class EEventTokenType : uint8
{
	Invite                                   = 0,
	Creation                                 = 1,
	EEventTokenType_MAX                      = 2,
};

// Enum FortniteGame.EAthenaSeasonRewardTrack
// NumValues: 0x0005
enum class EAthenaSeasonRewardTrack : uint8
{
	Invalid                                  = 0,
	SeasonProgressionTrack                   = 1,
	CompendiumFreeTrack                      = 2,
	CompendiumPaidTrack                      = 3,
	EAthenaSeasonRewardTrack_MAX             = 4,
};

// Enum FortniteGame.EAthenaSeasonShopVisibility
// NumValues: 0x0004
enum class EAthenaSeasonShopVisibility : uint8
{
	Hide                                     = 0,
	ShowIfOffersAvailable                    = 1,
	ShowAlways                               = 2,
	EAthenaSeasonShopVisibility_MAX          = 3,
};

// Enum FortniteGame.EAbilitySystemComponentCreationPolicy
// NumValues: 0x0004
enum class EAbilitySystemComponentCreationPolicy : uint8
{
	Never                                    = 0,
	Lazy                                     = 1,
	Always                                   = 2,
	EAbilitySystemComponentCreationPolicy_MAX = 3,
};

// Enum FortniteGame.EAttributeInitLevelSource
// NumValues: 0x0003
enum class EAttributeInitLevelSource : uint8
{
	WorldDifficulty                          = 0,
	PlayerBuildingSkill                      = 1,
	EAttributeInitLevelSource_MAX            = 2,
};

// Enum FortniteGame.EDynamicBuildingPlacementType
// NumValues: 0x0004
enum class EDynamicBuildingPlacementType : uint8
{
	CountsTowardsBounds                      = 0,
	DestroyIfColliding                       = 1,
	DestroyAnythingThatCollides              = 2,
	EDynamicBuildingPlacementType_MAX        = 3,
};

// Enum FortniteGame.EUnlockRules
// NumValues: 0x0004
enum class EUnlockRules : uint8
{
	UR_Reset                                 = 0,
	UR_MaintainState                         = 1,
	UR_ResetDeactivate                       = 2,
	UR_MAX                                   = 3,
};

// Enum FortniteGame.EContentionRules
// NumValues: 0x0003
enum class EContentionRules : uint8
{
	CR_MajorityWins                          = 0,
	CR_OneTeamOnlyWins                       = 1,
	CR_MAX                                   = 2,
};

// Enum FortniteGame.EBinaryToggleValues
// NumValues: 0x0004
enum class EBinaryToggleValues : uint8
{
	BTV_Active                               = 0,
	BTV_Inactive                             = 1,
	BTV_Either                               = 2,
	BTV_MAX                                  = 3,
};

// Enum FortniteGame.EAuxIndicatorStates
// NumValues: 0x0005
enum class EAuxIndicatorStates : uint8
{
	AIS_GuidingArrow                         = 0,
	AIS_ConfirmedArrow                       = 1,
	AIS_Inactive                             = 2,
	AIS_Active                               = 3,
	AIS_MAX                                  = 4,
};

// Enum FortniteGame.EFOBFileHeaderStatus
// NumValues: 0x0004
enum class EFOBFileHeaderStatus : uint8
{
	NoExistingFile                           = 0,
	HasExistingFile                          = 1,
	UnableToDetermine                        = 2,
	EFOBFileHeaderStatus_MAX                 = 3,
};

// Enum FortniteGame.EFOBInitStatus
// NumValues: 0x0008
enum class EFOBInitStatus : uint8
{
	Successful                               = 0,
	Failure_CloudStorageDisabled             = 1,
	Failure_PreviouslyInitialized            = 2,
	Failure_DataOwner                        = 3,
	Failure_CloudStorageError                = 4,
	Failure_MissingFileName                  = 5,
	Failure_Generic                          = 6,
	EFOBInitStatus_MAX                       = 7,
};

// Enum FortniteGame.EFOBMode
// NumValues: 0x0004
enum class EFOBMode : uint8
{
	Uninitialized                            = 0,
	Creation                                 = 1,
	Deployment                               = 2,
	EFOBMode_MAX                             = 3,
};

// Enum FortniteGame.EBuildingFoundationType
// NumValues: 0x0005
enum class EBuildingFoundationType : uint8
{
	BFT_3x3                                  = 0,
	BFT_5x5                                  = 1,
	BFT_5x10                                 = 2,
	BFT_None                                 = 3,
	BFT_MAX                                  = 4,
};

// Enum FortniteGame.EFortItemCollectorBehavior
// NumValues: 0x0004
enum class EFortItemCollectorBehavior : uint8
{
	FirstToGoal                              = 0,
	FreeForAll                               = 1,
	TugOfWar                                 = 2,
	EFortItemCollectorBehavior_MAX           = 3,
};

// Enum FortniteGame.EFortItemCollectorState
// NumValues: 0x0006
enum class EFortItemCollectorState : uint8
{
	CanInteract                              = 0,
	Active                                   = 1,
	Inactive                                 = 2,
	Captured                                 = 3,
	Invalid                                  = 4,
	EFortItemCollectorState_MAX              = 5,
};

// Enum FortniteGame.ELayoutRequirementStatus
// NumValues: 0x0004
enum class ELayoutRequirementStatus : uint8
{
	Inactive_Invisible                       = 0,
	Active_Invisible                         = 1,
	Active_Visible                           = 2,
	ELayoutRequirementStatus_MAX             = 3,
};

// Enum FortniteGame.EFortRiftSlotStatus
// NumValues: 0x0004
enum class EFortRiftSlotStatus : uint8
{
	Reserved                                 = 0,
	Occupied                                 = 1,
	Max_None                                 = 2,
	EFortRiftSlotStatus_MAX                  = 3,
};

// Enum FortniteGame.EBuildingNavObstacleType
// NumValues: 0x0007
enum class EBuildingNavObstacleType : uint8
{
	UnwalkableAll                            = 0,
	UnwalkableHuskOnly                       = 1,
	SmashWhenLowHeight                       = 2,
	SmashOnlyLowHeight                       = 3,
	SmashSmasherOnly                         = 4,
	SmashAll                                 = 5,
	EBuildingNavObstacleType_MAX             = 6,
};

// Enum FortniteGame.EFortDamageVisualsState
// NumValues: 0x0004
enum class EFortDamageVisualsState : uint8
{
	UnDamaged                                = 0,
	DamagedAndAnimating                      = 1,
	DamagedAndStatic                         = 2,
	EFortDamageVisualsState_MAX              = 3,
};

// Enum FortniteGame.EStructuralSupportCheck
// NumValues: 0x0004
enum class EStructuralSupportCheck : uint8
{
	Stable                                   = 0,
	Unstable                                 = 1,
	Max_None                                 = 2,
	EStructuralSupportCheck_MAX              = 3,
};

// Enum FortniteGame.EBuildingReplacementType
// NumValues: 0x0004
enum class EBuildingReplacementType : uint8
{
	BRT_None                                 = 0,
	BRT_Edited                               = 1,
	BRT_Conversion                           = 2,
	BRT_MAX                                  = 3,
};

// Enum FortniteGame.EPlacementType
// NumValues: 0x0004
enum class EPlacementType : uint8
{
	Free                                     = 0,
	Grid                                     = 1,
	None                                     = 2,
	EPlacementType_MAX                       = 3,
};

// Enum FortniteGame.EBuildingAttachmentSide
// NumValues: 0x0004
enum class EBuildingAttachmentSide : uint8
{
	Front                                    = 0,
	Back                                     = 1,
	Any                                      = 2,
	EBuildingAttachmentSide_MAX              = 3,
};

// Enum FortniteGame.EBuildingAttachmentSlot
// NumValues: 0x0005
enum class EBuildingAttachmentSlot : uint8
{
	SLOT_Floor                               = 0,
	SLOT_Wall                                = 1,
	SLOT_Ceiling                             = 2,
	SLOT_None                                = 3,
	SLOT_MAX                                 = 4,
};

// Enum FortniteGame.EBuildingAnim
// NumValues: 0x0008
enum class EBuildingAnim : uint8
{
	EBA_None                                 = 0,
	EBA_Building                             = 1,
	EBA_Breaking                             = 2,
	EBA_Destruction                          = 3,
	EBA_Placement                            = 4,
	EBA_DynamicLOD                           = 5,
	EBA_DynamicShrink                        = 6,
	EBA_MAX                                  = 7,
};

// Enum FortniteGame.EFortDefenderInteractionError
// NumValues: 0x0005
enum class EFortDefenderInteractionError : uint8
{
	None                                     = 0,
	Obstructed                               = 1,
	NoEditPermission                         = 2,
	UsedByAnotherPlayer                      = 3,
	EFortDefenderInteractionError_MAX        = 4,
};

// Enum FortniteGame.EFortBounceType
// NumValues: 0x0004
enum class EFortBounceType : uint8
{
	Hit                                      = 0,
	Interact                                 = 1,
	EditPlaced                               = 2,
	EFortBounceType_MAX                      = 3,
};

// Enum FortniteGame.EBuildingHighlightType
// NumValues: 0x0004
enum class EBuildingHighlightType : uint8
{
	Primary                                  = 0,
	Interact                                 = 1,
	WillBeDestroyed                          = 2,
	MAX                                      = 3,
};

// Enum FortniteGame.EFortConnectivityCubeFace
// NumValues: 0x0007
enum class EFortConnectivityCubeFace : uint8
{
	Front                                    = 0,
	Left                                     = 1,
	Back                                     = 2,
	Right                                    = 3,
	Upper                                    = 4,
	Lower                                    = 5,
	MAX                                      = 6,
};

// Enum FortniteGame.EFortDecoPlacementQueryResults
// NumValues: 0x000E
enum class EFortDecoPlacementQueryResults : uint8
{
	CanAdd                                   = 0,
	ExistingTrap                             = 1,
	ExistingObject                           = 2,
	Obstructed                               = 3,
	NoLocation                               = 4,
	WrongType                                = 5,
	WrongShape                               = 6,
	BeingModified                            = 7,
	WrongTeam                                = 8,
	BlueprintFailure                         = 9,
	AbilityFailure                           = 10,
	RequiresPlayerBuildableActor             = 11,
	NoEditPermission                         = 12,
	EFortDecoPlacementQueryResults_MAX       = 13,
};

// Enum FortniteGame.EFortStructuralGridQueryResults
// NumValues: 0x000C
enum class EFortStructuralGridQueryResults : uint8
{
	CanAdd                                   = 0,
	ExistingActor                            = 1,
	Obstructed                               = 2,
	NoStructuralSupport                      = 3,
	InvalidActor                             = 4,
	ReachedLimit                             = 5,
	NoEditPermission                         = 6,
	PatternNotPermittedByLayoutRequirement   = 7,
	ResourceTypeNotPermittedByLayoutRequirement = 8,
	BuildingAtRequirementsDisabled           = 9,
	BuildingOtherThanRequirementsDisabled    = 10,
	EFortStructuralGridQueryResults_MAX      = 11,
};

// Enum FortniteGame.EFortCostInfoTypes
// NumValues: 0x0006
enum class EFortCostInfoTypes : uint8
{
	Placement                                = 0,
	Repair                                   = 1,
	Conversion                               = 2,
	Ability                                  = 3,
	None                                     = 4,
	EFortCostInfoTypes_MAX                   = 5,
};

// Enum FortniteGame.EFortBuildingInitializationReason
// NumValues: 0x0009
enum class EFortBuildingInitializationReason : uint8
{
	StaticallyPlaced                         = 0,
	Spawned                                  = 1,
	Replaced                                 = 2,
	LoadedFromSave                           = 3,
	DynamicBuilderPlaced                     = 4,
	PlacementTool                            = 5,
	TrapTool                                 = 6,
	None                                     = 7,
	EFortBuildingInitializationReason_MAX    = 8,
};

// Enum FortniteGame.EFortBuildingPersistentState
// NumValues: 0x0007
enum class EFortBuildingPersistentState : uint8
{
	Default                                  = 0,
	New                                      = 1,
	Constructed                              = 2,
	Destroyed                                = 3,
	Searched                                 = 4,
	None                                     = 5,
	EFortBuildingPersistentState_MAX         = 6,
};

// Enum FortniteGame.EFortBuildingState
// NumValues: 0x0004
enum class EFortBuildingState : uint8
{
	Placement                                = 0,
	EditMode                                 = 1,
	None                                     = 2,
	EFortBuildingState_MAX                   = 3,
};

// Enum FortniteGame.EFortResourceLevel
// NumValues: 0x0009
enum class EFortResourceLevel : uint8
{
	First                                    = 0,
	Second                                   = 1,
	Third                                    = 2,
	Fourth                                   = 3,
	Fifth                                    = 4,
	Sixth                                    = 5,
	NumLevels                                = 6,
	Invalid                                  = 7,
	EFortResourceLevel_MAX                   = 8,
};

// Enum FortniteGame.EFortResourceType
// NumValues: 0x0006
enum class EFortResourceType : uint8
{
	Wood                                     = 0,
	Stone                                    = 1,
	Metal                                    = 2,
	Permanite                                = 3,
	None                                     = 4,
	EFortResourceType_MAX                    = 5,
};

// Enum FortniteGame.EFortTextureDataSlot
// NumValues: 0x0006
enum class EFortTextureDataSlot : uint8
{
	Primary                                  = 0,
	Secondary                                = 1,
	Tertiary                                 = 2,
	Fourth                                   = 3,
	NumSlots                                 = 4,
	EFortTextureDataSlot_MAX                 = 5,
};

// Enum FortniteGame.EFortTextureDataType
// NumValues: 0x000C
enum class EFortTextureDataType : uint8
{
	Any                                      = 0,
	OuterWall                                = 1,
	InnerWall                                = 2,
	Corner                                   = 3,
	Floor                                    = 4,
	Ceiling                                  = 5,
	Trim                                     = 6,
	Roof                                     = 7,
	Pillar                                   = 8,
	Shingle                                  = 9,
	None                                     = 10,
	EFortTextureDataType_MAX                 = 11,
};

// Enum FortniteGame.EBuildingAttachmentType
// NumValues: 0x0008
enum class EBuildingAttachmentType : uint8
{
	ATTACH_Floor                             = 0,
	ATTACH_Wall                              = 1,
	ATTACH_Ceiling                           = 2,
	ATTACH_Corner                            = 3,
	ATTACH_All                               = 4,
	ATTACH_WallThenFloor                     = 5,
	ATTACH_None                              = 6,
	ATTACH_MAX                               = 7,
};

// Enum FortniteGame.EFortBuildingType
// NumValues: 0x000E
enum class EFortBuildingType : uint8
{
	Wall                                     = 0,
	Floor                                    = 1,
	Corner                                   = 2,
	Deco                                     = 3,
	Prop                                     = 4,
	Stairs                                   = 5,
	Roof                                     = 6,
	Pillar                                   = 7,
	SpawnedItem                              = 8,
	Container                                = 9,
	Trap                                     = 10,
	GenericCenterCellActor                   = 11,
	None                                     = 12,
	EFortBuildingType_MAX                    = 13,
};

// Enum FortniteGame.EAccessoryColorName
// NumValues: 0x0005
enum class EAccessoryColorName : uint8
{
	EAccessoryColorName_AccessoryColor1      = 0,
	EAccessoryColorName_AccessoryColor2      = 1,
	EAccessoryColorName_AccessoryColor3      = 2,
	EAccessoryColorName_NumTypes             = 3,
	EAccessoryColorName_MAX                  = 4,
};

// Enum FortniteGame.ECustomHatType
// NumValues: 0x0007
enum class ECustomHatType : uint8
{
	ECustomHatType_None                      = 0,
	ECustomHatType_Cap                       = 1,
	ECustomHatType_Helmet                    = 2,
	ECustomHatType_Mask                      = 3,
	ECustomHatType_Hat                       = 4,
	ECustomHatType_HeadReplacement           = 5,
	ECustomHatType_MAX                       = 6,
};

// Enum FortniteGame.EClothingColorName
// NumValues: 0x0004
enum class EClothingColorName : uint8
{
	EClothingColorName_AccessoryColor1       = 0,
	EClothingColorName_AccessoryColor2       = 1,
	EClothingColorName_NumTypes              = 2,
	EClothingColorName_MAX                   = 3,
};

// Enum FortniteGame.EColorSwatchType
// NumValues: 0x0006
enum class EColorSwatchType : uint8
{
	EColorSwatchType_Skin                    = 0,
	EColorSwatchType_Hair                    = 1,
	EColorSwatchType_BodyAccessory           = 2,
	EColorSwatchType_Accessory               = 3,
	EColorSwatchType_NumTypes                = 4,
	EColorSwatchType_MAX                     = 5,
};

// Enum FortniteGame.ECharacterColorSwatchType
// NumValues: 0x0004
enum class ECharacterColorSwatchType : uint8
{
	ECharacterColorSwatchType_Skin           = 0,
	ECharacterColorSwatchType_Hair           = 1,
	ECharacterColorSwatchType_NumTypes       = 2,
	ECharacterColorSwatchType_MAX            = 3,
};

// Enum FortniteGame.EDeployableBaseConstructionStatus
// NumValues: 0x0004
enum class EDeployableBaseConstructionStatus : uint8
{
	Constructing                             = 0,
	Destroying                               = 1,
	Finished                                 = 2,
	EDeployableBaseConstructionStatus_MAX    = 3,
};

// Enum FortniteGame.EDeployableBaseBuildingState
// NumValues: 0x000A
enum class EDeployableBaseBuildingState : uint8
{
	Empty                                    = 0,
	Built                                    = 1,
	Unoccupied                               = 2,
	WaitingToBuild                           = 3,
	Building                                 = 4,
	WaitingToDestroy                         = 5,
	Destroying                               = 6,
	WaitingToReset                           = 7,
	Resetting                                = 8,
	EDeployableBaseBuildingState_MAX         = 9,
};

// Enum FortniteGame.EDeployableBaseBoxType
// NumValues: 0x0005
enum class EDeployableBaseBoxType : uint8
{
	BuildSpace                               = 0,
	SaveSpace                                = 1,
	PlotSpace                                = 2,
	NumSpaceTypes                            = 3,
	EDeployableBaseBoxType_MAX               = 4,
};

// Enum FortniteGame.EFortStatDisplayType
// NumValues: 0x0006
enum class EFortStatDisplayType : uint8
{
	Category                                 = 0,
	Buff                                     = 1,
	Debuff                                   = 2,
	Neutral                                  = 3,
	DoNotDisplay                             = 4,
	EFortStatDisplayType_MAX                 = 5,
};

// Enum FortniteGame.EFortAbilityTargetSelectionUsage
// NumValues: 0x0004
enum class EFortAbilityTargetSelectionUsage : uint8
{
	BothTargetingAndCanHit                   = 0,
	OnlyTargeting                            = 1,
	OnlyCanHit                               = 2,
	EFortAbilityTargetSelectionUsage_MAX     = 3,
};

// Enum FortniteGame.EFortDirectedMovementSpace
// NumValues: 0x0005
enum class EFortDirectedMovementSpace : uint8
{
	WorldSpace                               = 0,
	ActorLocRelative                         = 1,
	ActorLocRotRelative                      = 2,
	CameraRelative                           = 3,
	EFortDirectedMovementSpace_MAX           = 4,
};

// Enum FortniteGame.EFortProximityBasedGEApplicationType
// NumValues: 0x0004
enum class EFortProximityBasedGEApplicationType : uint8
{
	ApplyOnProximityPulse                    = 0,
	ApplyOnProximityTouch                    = 1,
	ApplyOnlyDuringProximityTouch            = 2,
	EFortProximityBasedGEApplicationType_MAX = 3,
};

// Enum FortniteGame.EFortDeliveryInfoBuildingActorSpecification
// NumValues: 0x0004
enum class EFortDeliveryInfoBuildingActorSpecification : uint8
{
	All                                      = 0,
	PlayerBuildable                          = 1,
	NonPlayerBuildable                       = 2,
	EFortDeliveryInfoBuildingActorSpecification_MAX = 3,
};

// Enum FortniteGame.EFortEncounterUtilityDesire
// NumValues: 0x0006
enum class EFortEncounterUtilityDesire : uint8
{
	Low                                      = 0,
	Medium                                   = 1,
	High                                     = 2,
	VeryHigh                                 = 3,
	Max_None                                 = 4,
	EFortEncounterUtilityDesire_MAX          = 5,
};

// Enum FortniteGame.EFortAIDirectorFactorContribution
// NumValues: 0x0003
enum class EFortAIDirectorFactorContribution : uint8
{
	Direct                                   = 0,
	Inverse                                  = 1,
	EFortAIDirectorFactorContribution_MAX    = 2,
};

// Enum FortniteGame.EFortAIDirectorEventContribution
// NumValues: 0x0003
enum class EFortAIDirectorEventContribution : uint8
{
	Increment                                = 0,
	Set                                      = 1,
	EFortAIDirectorEventContribution_MAX     = 2,
};

// Enum FortniteGame.EFortAIWaveProgressSection
// NumValues: 0x0004
enum class EFortAIWaveProgressSection : uint8
{
	SectionOne                               = 0,
	SectionTwo                               = 1,
	Max_None                                 = 2,
	EFortAIWaveProgressSection_MAX           = 3,
};

// Enum FortniteGame.EFortEncounterState
// NumValues: 0x0007
enum class EFortEncounterState : uint8
{
	Uninitialized                            = 0,
	InitializingProperties                   = 1,
	InitializingRiftManager                  = 2,
	AwaitingActivation                       = 3,
	Active                                   = 4,
	Max_None                                 = 5,
	EFortEncounterState_MAX                  = 6,
};

// Enum FortniteGame.EFortEncounterPacingState
// NumValues: 0x0006
enum class EFortEncounterPacingState : uint8
{
	Ramp                                     = 0,
	Peak                                     = 1,
	Fade                                     = 2,
	Rest                                     = 3,
	Max_None                                 = 4,
	EFortEncounterPacingState_MAX            = 5,
};

// Enum FortniteGame.EFortEncounterSequenceResult
// NumValues: 0x0003
enum class EFortEncounterSequenceResult : uint8
{
	Success                                  = 0,
	FailedEncounterInProgress                = 1,
	EFortEncounterSequenceResult_MAX         = 2,
};

// Enum FortniteGame.EAssignmentCreationResult
// NumValues: 0x0004
enum class EAssignmentCreationResult : uint8
{
	AssignmentNotFoundOrCreated              = 0,
	AssignmentCreated                        = 1,
	AssignmentFound                          = 2,
	EAssignmentCreationResult_MAX            = 3,
};

// Enum FortniteGame.ETagGoalScoringCategory
// NumValues: 0x0004
enum class ETagGoalScoringCategory : uint8
{
	Ignore                                   = 0,
	HighInterest                             = 1,
	NumCategories                            = 2,
	ETagGoalScoringCategory_MAX              = 3,
};

// Enum FortniteGame.EFortAIPawnGender
// NumValues: 0x0004
enum class EFortAIPawnGender : uint8
{
	FAPG_Default                             = 0,
	FAPG_Female                              = 1,
	FAPG_Male                                = 2,
	FAPG_MAX                                 = 3,
};

// Enum FortniteGame.EFortAILevelRatingDisplayType
// NumValues: 0x0004
enum class EFortAILevelRatingDisplayType : uint8
{
	DisplayRatingBasedOnDifficulty           = 0,
	DisplayAIDifficultyAsRating              = 1,
	DontDisplayRating                        = 2,
	EFortAILevelRatingDisplayType_MAX        = 3,
};

// Enum FortniteGame.EFortressAIType
// NumValues: 0x0007
enum class EFortressAIType : uint8
{
	FAT_Dormant                              = 0,
	FAT_Cleaner                              = 1,
	FAT_DayWanderer                          = 2,
	FAT_NightWanderer                        = 3,
	FAT_DebugOnly                            = 4,
	FAT_Encounter                            = 5,
	FAT_MAX                                  = 6,
};

// Enum FortniteGame.ECorePerceptionTypes
// NumValues: 0x0007
enum class ECorePerceptionTypes : uint8
{
	Sight                                    = 0,
	Hearing                                  = 1,
	Damage                                   = 2,
	Touch                                    = 3,
	Team                                     = 4,
	Prediction                               = 5,
	MAX                                      = 6,
};

// Enum FortniteGame.ENavigationObstacleOverride
// NumValues: 0x0004
enum class ENavigationObstacleOverride : uint8
{
	UseMeshSettings                          = 0,
	ForceEnabled                             = 1,
	ForceDisabled                            = 2,
	ENavigationObstacleOverride_MAX          = 3,
};

// Enum FortniteGame.EFortPartialPathUsage
// NumValues: 0x0004
enum class EFortPartialPathUsage : uint8
{
	Always                                   = 0,
	OnlyGoalsOnDestructible                  = 1,
	Never                                    = 2,
	EFortPartialPathUsage_MAX                = 3,
};

// Enum FortniteGame.EHotspotTypeConfigMode
// NumValues: 0x0004
enum class EHotspotTypeConfigMode : uint8
{
	AlwaysAdd                                = 0,
	WhenNotDefined                           = 1,
	WhenNotValid                             = 2,
	EHotspotTypeConfigMode_MAX               = 3,
};

// Enum FortniteGame.EFortHotSpotPreview
// NumValues: 0x0004
enum class EFortHotSpotPreview : uint8
{
	None                                     = 0,
	Smashing                                 = 1,
	Shooting                                 = 2,
	EFortHotSpotPreview_MAX                  = 3,
};

// Enum FortniteGame.EFortHotSpotDirection
// NumValues: 0x0008
enum class EFortHotSpotDirection : uint8
{
	PositiveX                                = 0,
	NegativeX                                = 1,
	PositiveY                                = 2,
	NegativeY                                = 3,
	PositiveZ                                = 4,
	NegativeZ                                = 5,
	Any                                      = 6,
	EFortHotSpotDirection_MAX                = 7,
};

// Enum FortniteGame.EFortHotSpotSlot
// NumValues: 0x0005
enum class EFortHotSpotSlot : uint8
{
	Melee                                    = 0,
	MeleeHuge                                = 1,
	Ranged                                   = 2,
	None                                     = 3,
	EFortHotSpotSlot_MAX                     = 4,
};

// Enum FortniteGame.EBuildingFloorRailing
// NumValues: 0x0003
enum class EBuildingFloorRailing : uint8
{
	None                                     = 0,
	Balcony                                  = 1,
	EBuildingFloorRailing_MAX                = 2,
};

// Enum FortniteGame.EBuildingStairsRailing
// NumValues: 0x0004
enum class EBuildingStairsRailing : uint8
{
	None                                     = 0,
	Partial                                  = 1,
	Full                                     = 2,
	EBuildingStairsRailing_MAX               = 3,
};

// Enum FortniteGame.EBuildingWallArea
// NumValues: 0x0004
enum class EBuildingWallArea : uint8
{
	Regular                                  = 0,
	Flat                                     = 1,
	Special                                  = 2,
	EBuildingWallArea_MAX                    = 3,
};

// Enum FortniteGame.EAssignmentType
// NumValues: 0x0006
enum class EAssignmentType : uint8
{
	Invalid                                  = 0,
	Encounter                                = 1,
	World                                    = 2,
	Enemy                                    = 3,
	NumAssignmentTypes                       = 4,
	EAssignmentType_MAX                      = 5,
};

// Enum FortniteGame.EFortAILODLevel
// NumValues: 0x0007
enum class EFortAILODLevel : uint8
{
	Invalid                                  = 0,
	Lowest                                   = 1,
	Lower                                    = 2,
	BelowNormal                              = 3,
	Normal                                   = 4,
	AboveNormal                              = 5,
	EFortAILODLevel_MAX                      = 6,
};

// Enum FortniteGame.ESpeedWarpingAxisMode
// NumValues: 0x0007
enum class ESpeedWarpingAxisMode : uint8
{
	IKFootRootLocalX                         = 0,
	IKFootRootLocalY                         = 1,
	IKFootRootLocalZ                         = 2,
	WorldSpaceVectorInput                    = 3,
	ComponentSpaceVectorInput                = 4,
	ActorSpaceVectorInput                    = 5,
	ESpeedWarpingAxisMode_MAX                = 6,
};

// Enum FortniteGame.EMontageInterrupt
// NumValues: 0x0004
enum class EMontageInterrupt : uint8
{
	Any                                      = 0,
	RootMotionOnly                           = 1,
	None                                     = 2,
	EMontageInterrupt_MAX                    = 3,
};

// Enum FortniteGame.EFortAttributeDisplay
// NumValues: 0x000B
enum class EFortAttributeDisplay : uint8
{
	BasicInt                                 = 0,
	NegativeImpliesInfiniteInt               = 1,
	BasicFloat                               = 2,
	NegativeImpliesInfiniteFloat             = 3,
	BasicString                              = 4,
	NormalizedPercentage                     = 5,
	StringArray                              = 6,
	SlateBrush                               = 7,
	DoNotDisplay                             = 8,
	None_Max                                 = 9,
	EFortAttributeDisplay_MAX                = 10,
};

// Enum FortniteGame.ETargetDistanceComparisonType
// NumValues: 0x0004
enum class ETargetDistanceComparisonType : uint8
{
	TwoDimensions                            = 0,
	ThreeDimensions                          = 1,
	CollisionHalfHeightMultiplier            = 2,
	ETargetDistanceComparisonType_MAX        = 3,
};

// Enum FortniteGame.ECameraOrigin
// NumValues: 0x0003
enum class ECameraOrigin : uint8
{
	ViewTargetTransform                      = 0,
	BoneTransform                            = 1,
	ECameraOrigin_MAX                        = 2,
};

// Enum FortniteGame.EFortCharacterCosmetic
// NumValues: 0x000A
enum class EFortCharacterCosmetic : uint8
{
	Head                                     = 0,
	Texture                                  = 1,
	Color                                    = 2,
	Trinket                                  = 3,
	Face                                     = 4,
	Gadget                                   = 5,
	Body                                     = 6,
	ClassFlair                               = 7,
	Max_Invalid                              = 8,
	EFortCharacterCosmetic_MAX               = 9,
};

// Enum FortniteGame.EFortAnnouncementDisplayPreference
// NumValues: 0x0004
enum class EFortAnnouncementDisplayPreference : uint8
{
	Default_HUD                              = 0,
	QuestIntroduction                        = 1,
	QuestJournal                             = 2,
	EFortAnnouncementDisplayPreference_MAX   = 3,
};

// Enum FortniteGame.EFortAnnouncementChannel
// NumValues: 0x0005
enum class EFortAnnouncementChannel : uint8
{
	Primary                                  = 0,
	Conversation                             = 1,
	Tutorial                                 = 2,
	Max_None                                 = 3,
	EFortAnnouncementChannel_MAX             = 4,
};

// Enum FortniteGame.EFortAnnouncementDelivery
// NumValues: 0x0007
enum class EFortAnnouncementDelivery : uint8
{
	Created                                  = 0,
	Received                                 = 1,
	Ignored                                  = 2,
	Active                                   = 3,
	Stopped                                  = 4,
	Max_None                                 = 5,
	EFortAnnouncementDelivery_MAX            = 6,
};

// Enum FortniteGame.ECodeTokenPlatform
// NumValues: 0x0004
enum class ECodeTokenPlatform : uint8
{
	PC                                       = 0,
	PS4                                      = 1,
	XBOX                                     = 2,
	ECodeTokenPlatform_MAX                   = 3,
};

// Enum FortniteGame.EFortCollectionBookState
// NumValues: 0x0004
enum class EFortCollectionBookState : uint8
{
	Active                                   = 0,
	Completed                                = 1,
	Claimed                                  = 2,
	EFortCollectionBookState_MAX             = 3,
};

// Enum FortniteGame.EFortPIDValueGraphElements
// NumValues: 0x0004
enum class EFortPIDValueGraphElements : uint8
{
	Proportional                             = 0,
	Integral                                 = 1,
	Max_None                                 = 2,
	EFortPIDValueGraphElements_MAX           = 3,
};

// Enum FortniteGame.EFortIntensityGraphElements
// NumValues: 0x0004
enum class EFortIntensityGraphElements : uint8
{
	ActualIntensity                          = 0,
	DesiredIntensity                         = 1,
	Max_None                                 = 2,
	EFortIntensityGraphElements_MAX          = 3,
};

// Enum FortniteGame.EFortContributionGraphElements
// NumValues: 0x0007
enum class EFortContributionGraphElements : uint8
{
	ProportionalLine                         = 0,
	IntegralLine                             = 1,
	TotalLine                                = 2,
	PendingLine                              = 3,
	ActionLine                               = 4,
	Max_None                                 = 5,
	EFortContributionGraphElements_MAX       = 6,
};

// Enum FortniteGame.EFortFactorContributionType
// NumValues: 0x0005
enum class EFortFactorContributionType : uint8
{
	CurrentValue_Direct                      = 0,
	CurrentValue_Inverse                     = 1,
	AverageValue_Direct                      = 2,
	AverageValue_Inverse                     = 3,
	EFortFactorContributionType_MAX          = 4,
};

// Enum FortniteGame.EFortAIDirectorFactor
// NumValues: 0x000E
enum class EFortAIDirectorFactor : uint8
{
	PlayerDamageThreat                       = 0,
	ObjectiveDamageThreat                    = 1,
	ObjectivePathCost                        = 2,
	PlayerPathCost                           = 3,
	PlayerMovement                           = 4,
	TrapsEffective                           = 5,
	PlayerWander                             = 6,
	NearbyEnemyPresence                      = 7,
	OffensiveResources                       = 8,
	DefensiveResources                       = 9,
	Boredom                                  = 10,
	ArtilleryVulnerability                   = 11,
	Max_None                                 = 12,
	EFortAIDirectorFactor_MAX                = 13,
};

// Enum FortniteGame.EFortCombatFactors
// NumValues: 0x000E
enum class EFortCombatFactors : uint8
{
	PlayerDamageThreat                       = 0,
	ObjectiveDamageThreat                    = 1,
	ObjectivePathCost                        = 2,
	PlayerPathCost                           = 3,
	PlayerMovement                           = 4,
	TrapsEffective                           = 5,
	PlayerWander                             = 6,
	NearbyEnemyPresence                      = 7,
	OffensiveResources                       = 8,
	DefensiveResources                       = 9,
	Boredom                                  = 10,
	ArtilleryVulnerability                   = 11,
	Max_None                                 = 12,
	EFortCombatFactors_MAX                   = 13,
};

// Enum FortniteGame.EFortCombatEvents
// NumValues: 0x0018
enum class EFortCombatEvents : uint8
{
	HuskFollowing                            = 0,
	SmasherFollowing                         = 1,
	TrollFollowing                           = 2,
	TakerFollowing                           = 3,
	PlayerTakeDamage                         = 4,
	PlayerHealth                             = 5,
	PlayerLookAtEnemy                        = 6,
	PlayerDamageEnemy                        = 7,
	PlayerKilledEnemy                        = 8,
	AtlasTakeDamage                          = 9,
	AtlasHealth                              = 10,
	AtlasDestroyed                           = 11,
	TrapFiring                               = 12,
	BuildingTakeDamage                       = 13,
	FoodHealingPotential                     = 14,
	PlayerAmmo                               = 15,
	EnemiesNear                              = 16,
	PlayerMovement                           = 17,
	BuildingDamagedNearObjective             = 18,
	TrapDamageEnemy                          = 19,
	ObjectivePathCost                        = 20,
	PlayerPathCost                           = 21,
	Max_None                                 = 22,
	EFortCombatEvents_MAX                    = 23,
};

// Enum FortniteGame.EFortAIDirectorEventParticipant
// NumValues: 0x0005
enum class EFortAIDirectorEventParticipant : uint8
{
	Target                                   = 0,
	Source                                   = 1,
	Either                                   = 2,
	Max_None                                 = 3,
	EFortAIDirectorEventParticipant_MAX      = 4,
};

// Enum FortniteGame.EFortCombatThresholds
// NumValues: 0x0006
enum class EFortCombatThresholds : uint8
{
	Low                                      = 0,
	Medium                                   = 1,
	High                                     = 2,
	Extreme                                  = 3,
	Max_None                                 = 4,
	EFortCombatThresholds_MAX                = 5,
};

// Enum FortniteGame.EFortElementalDamageType
// NumValues: 0x0005
enum class EFortElementalDamageType : uint8
{
	None                                     = 0,
	Fire                                     = 1,
	Ice                                      = 2,
	Lightning                                = 3,
	MAX                                      = 4,
};

// Enum FortniteGame.EFortDamageZone
// NumValues: 0x0005
enum class EFortDamageZone : uint8
{
	Light                                    = 0,
	Normal                                   = 1,
	Critical                                 = 2,
	Vulnerability                            = 3,
	Max                                      = 4,
};

// Enum FortniteGame.EFortBaseWeaponDamage
// NumValues: 0x0003
enum class EFortBaseWeaponDamage : uint8
{
	Combat                                   = 0,
	Environmental                            = 1,
	EFortBaseWeaponDamage_MAX                = 2,
};

// Enum FortniteGame.EFortWeaponCoreAnimation
// NumValues: 0x0011
enum class EFortWeaponCoreAnimation : uint8
{
	Melee                                    = 0,
	Pistol                                   = 1,
	Shotgun                                  = 2,
	PaperBlueprint                           = 3,
	Rifle                                    = 4,
	MeleeOneHand                             = 5,
	MachinePistol                            = 6,
	RocketLauncher                           = 7,
	GrenadeLauncher                          = 8,
	GoingCommando                            = 9,
	AssaultRifle                             = 10,
	TacticalShotgun                          = 11,
	SniperRifle                              = 12,
	TrapPlacement                            = 13,
	ShoulderLauncher                         = 14,
	AbilityDecoTool                          = 15,
	EFortWeaponCoreAnimation_MAX             = 16,
};

// Enum FortniteGame.EFortReloadFXState
// NumValues: 0x0005
enum class EFortReloadFXState : uint8
{
	ReloadStart                              = 0,
	ReloadCartridge                          = 1,
	ReloadEnd                                = 2,
	Max_None                                 = 3,
	EFortReloadFXState_MAX                   = 4,
};

// Enum FortniteGame.EFortWeaponSoundState
// NumValues: 0x0005
enum class EFortWeaponSoundState : uint8
{
	Normal                                   = 0,
	LowAmmo                                  = 1,
	Degraded                                 = 2,
	Max_None                                 = 3,
	EFortWeaponSoundState_MAX                = 4,
};

// Enum FortniteGame.EFortMontageInputType
// NumValues: 0x0004
enum class EFortMontageInputType : uint8
{
	WindowClickOrHold                        = 0,
	WindowHoldOnly                           = 1,
	InstantClick                             = 2,
	EFortMontageInputType_MAX                = 3,
};

// Enum FortniteGame.EFortAbilityTargetingSource
// NumValues: 0x0008
enum class EFortAbilityTargetingSource : uint8
{
	Camera                                   = 0,
	PawnForward                              = 1,
	PawnTowardsFocus                         = 2,
	WeaponForward                            = 3,
	WeaponTowardsFocus                       = 4,
	Custom                                   = 5,
	Max_None                                 = 6,
	EFortAbilityTargetingSource_MAX          = 7,
};

// Enum FortniteGame.EFortAmmoType
// NumValues: 0x0006
enum class EFortAmmoType : uint8
{
	Pistol                                   = 0,
	Shotgun                                  = 1,
	Assault                                  = 2,
	Sniper                                   = 3,
	Energy                                   = 4,
	EFortAmmoType_MAX                        = 5,
};

// Enum FortniteGame.EFortSentenceAudioPreference
// NumValues: 0x0003
enum class EFortSentenceAudioPreference : uint8
{
	AudioAsset                               = 0,
	FeedbackBank                             = 1,
	EFortSentenceAudioPreference_MAX         = 2,
};

// Enum FortniteGame.EFortDamageNumberType
// NumValues: 0x0008
enum class EFortDamageNumberType : uint8
{
	None                                     = 0,
	Pawn                                     = 1,
	Building                                 = 2,
	Player                                   = 3,
	Shield                                   = 4,
	Score                                    = 5,
	DBNO                                     = 6,
	EFortDamageNumberType_MAX                = 7,
};

// Enum FortniteGame.ETimespanAsTextFormat
// NumValues: 0x0003
enum class ETimespanAsTextFormat : uint8
{
	DaysHoursMinutesSeconds                  = 0,
	Colons                                   = 1,
	ETimespanAsTextFormat_MAX                = 2,
};

// Enum FortniteGame.EFortDefenderSubtype
// NumValues: 0x0007
enum class EFortDefenderSubtype : uint8
{
	AssaultRifle                             = 0,
	Pistol                                   = 1,
	Melee                                    = 2,
	Sniper                                   = 3,
	Shotgun                                  = 4,
	Invalid                                  = 5,
	EFortDefenderSubtype_MAX                 = 6,
};

// Enum FortniteGame.EHordeTierStartStatus
// NumValues: 0x0005
enum class EHordeTierStartStatus : uint8
{
	ReadyToStart                             = 0,
	WaitingForPlayer                         = 1,
	WaitingForDBM                            = 2,
	GenericNotReadyToStart                   = 3,
	EHordeTierStartStatus_MAX                = 4,
};

// Enum FortniteGame.EHordeWaveStingerType
// NumValues: 0x0005
enum class EHordeWaveStingerType : uint8
{
	WaveSuccess                              = 0,
	WaveFailure                              = 1,
	WaveIncoming                             = 2,
	WaveStarted                              = 3,
	EHordeWaveStingerType_MAX                = 4,
};

// Enum FortniteGame.EQueueActionType
// NumValues: 0x0004
enum class EQueueActionType : uint8
{
	Plot                                     = 0,
	ZoneCleanup                              = 1,
	EnvironmentActorRestoration              = 2,
	EQueueActionType_MAX                     = 3,
};

// Enum FortniteGame.EAthenaPIEStartupMode
// NumValues: 0x0007
enum class EAthenaPIEStartupMode : uint8
{
	UseDefaults                              = 0,
	Warmup                                   = 1,
	WarmupPaused                             = 2,
	Aircraft                                 = 3,
	AircraftPaused                           = 4,
	Gameplay                                 = 5,
	EAthenaPIEStartupMode_MAX                = 6,
};

// Enum FortniteGame.FDynamicBuildOrder
// NumValues: 0x0005
enum class EFDynamicBuildOrder : uint8
{
	X                                        = 0,
	Y                                        = 1,
	Z                                        = 2,
	None                                     = 3,
	FDynamicBuildOrder_MAX                   = 4,
};

// Enum FortniteGame.EFortFeedbackBroadcastFilter
// NumValues: 0x0007
enum class EFortFeedbackBroadcastFilter : uint8
{
	FFBF_Speaker                             = 0,
	FFBF_SpeakerTeam                         = 1,
	FFBF_SpeakerAdressee                     = 2,
	FFBF_HumanPvP_Team1                      = 3,
	FFBF_HumanPvP_Team2                      = 4,
	FFBF_None_Max                            = 5,
	FFBF_MAX                                 = 6,
};

// Enum FortniteGame.EFortFeedbackSelectionMethod
// NumValues: 0x0009
enum class EFortFeedbackSelectionMethod : uint8
{
	FFSM_Instigator                          = 0,
	FFSM_Recipient                           = 1,
	FFSM_TeamWitness                         = 2,
	FFSM_EnemyWitness                        = 3,
	FFSM_Random                              = 4,
	FFSM_Priority_IRTE                       = 5,
	FFSM_AllPawns                            = 6,
	FFSM_Announcer                           = 7,
	FFSM_MAX                                 = 8,
};

// Enum FortniteGame.EFortFeedbackAddressee
// NumValues: 0x0004
enum class EFortFeedbackAddressee : uint8
{
	FFA_Instigator                           = 0,
	FFA_Recipient                            = 1,
	FFA_All                                  = 2,
	FFA_MAX                                  = 3,
};

// Enum FortniteGame.EFortFeedbackContext
// NumValues: 0x0008
enum class EFortFeedbackContext : uint8
{
	FFC_Instigator                           = 0,
	FFC_Recipient                            = 1,
	FFC_TeamWitness                          = 2,
	FFC_EnemyWitness                         = 3,
	FFC_AllPawns                             = 4,
	FFC_Announcer                            = 5,
	FFC_None_Max                             = 6,
	FFC_MAX                                  = 7,
};

// Enum FortniteGame.EFortFootstepSurfaceType
// NumValues: 0x0008
enum class EFortFootstepSurfaceType : uint8
{
	Default                                  = 0,
	Wood                                     = 1,
	Stone                                    = 2,
	Metal                                    = 3,
	Water                                    = 4,
	Snow                                     = 5,
	Max_None                                 = 6,
	EFortFootstepSurfaceType_MAX             = 7,
};

// Enum FortniteGame.EFortFootstepAudioType
// NumValues: 0x0009
enum class EFortFootstepAudioType : uint8
{
	Crouch                                   = 0,
	CrouchSprint                             = 1,
	Walk                                     = 2,
	Sprint                                   = 3,
	Jump                                     = 4,
	Land                                     = 5,
	LandHard                                 = 6,
	Max_None                                 = 7,
	EFortFootstepAudioType_MAX               = 8,
};

// Enum FortniteGame.EWaveRules
// NumValues: 0x0004
enum class EWaveRules : uint8
{
	KillAllEnemies                           = 0,
	Timed                                    = 1,
	KillPoints                               = 2,
	EWaveRules_MAX                           = 3,
};

// Enum FortniteGame.EFriendFeedbackType
// NumValues: 0x0005
enum class EFriendFeedbackType : uint8
{
	FriendRequestSent                        = 0,
	FriendRequestReceived                    = 1,
	FriendRequestAccepted                    = 2,
	Default                                  = 3,
	EFriendFeedbackType_MAX                  = 4,
};

// Enum FortniteGame.EClampType
// NumValues: 0x0003
enum class EClampType : uint8
{
	Minimum                                  = 0,
	Maximum                                  = 1,
	EClampType_MAX                           = 2,
};

// Enum FortniteGame.EFortAbilityCostSource
// NumValues: 0x0006
enum class EFortAbilityCostSource : uint8
{
	Stamina                                  = 0,
	Durability                               = 1,
	AmmoMagazine                             = 2,
	AmmoPrimary                              = 3,
	Item                                     = 4,
	EFortAbilityCostSource_MAX               = 5,
};

// Enum FortniteGame.EFortGameplayAbilityActivation
// NumValues: 0x0004
enum class EFortGameplayAbilityActivation : uint8
{
	Passive                                  = 0,
	Triggered                                = 1,
	Active                                   = 2,
	EFortGameplayAbilityActivation_MAX       = 3,
};

// Enum FortniteGame.EFortAIWeaponUsage
// NumValues: 0x0004
enum class EFortAIWeaponUsage : uint8
{
	NoWeaponUsage                            = 0,
	UsesRangedWeapon                         = 1,
	UsesMeleeWeapon                          = 2,
	EFortAIWeaponUsage_MAX                   = 3,
};

// Enum FortniteGame.EFortGameplayAbilityMontageSectionToPlay
// NumValues: 0x0004
enum class EFortGameplayAbilityMontageSectionToPlay : uint8
{
	FirstSection                             = 0,
	RandomSection                            = 1,
	TestedRandomSection                      = 2,
	EFortGameplayAbilityMontageSectionToPlay_MAX = 3,
};

// Enum FortniteGame.EPvPGameEndReasons
// NumValues: 0x0005
enum class EPvPGameEndReasons : uint8
{
	PVPGER_TeamScoreLimit                    = 0,
	PVPGER_LastManStanding                   = 1,
	PVPGER_TimeExpired                       = 2,
	PVPGER_MissionCompletion                 = 3,
	PVPGER_MAX                               = 4,
};

// Enum FortniteGame.EFortServerGameMode
// NumValues: 0x0006
enum class EFortServerGameMode : uint8
{
	Idle                                     = 0,
	LobbyPvE                                 = 1,
	LobbyPvP                                 = 2,
	ZonePvP                                  = 3,
	ZonePvE                                  = 4,
	EFortServerGameMode_MAX                  = 5,
};

// Enum FortniteGame.EFortBanHammerNotificationAction
// NumValues: 0x0004
enum class EFortBanHammerNotificationAction : uint8
{
	DelayedBanAndKick                        = 0,
	ImmediateBanAndKick                      = 1,
	ImmediateKick                            = 2,
	EFortBanHammerNotificationAction_MAX     = 3,
};

// Enum FortniteGame.ETeamChatRoomState
// NumValues: 0x0005
enum class ETeamChatRoomState : uint8
{
	NotCreated                               = 0,
	Creating                                 = 1,
	Created                                  = 2,
	Timeout                                  = 3,
	ETeamChatRoomState_MAX                   = 4,
};

// Enum FortniteGame.EAthenaAerialPhase
// NumValues: 0x0006
enum class EAthenaAerialPhase : uint8
{
	None                                     = 0,
	BusCantExit                              = 1,
	BusCanExit                               = 2,
	Skydiving                                = 3,
	Parachuting                              = 4,
	EAthenaAerialPhase_MAX                   = 5,
};

// Enum FortniteGame.EFortAccountLinkingUIConfig
// NumValues: 0x0005
enum class EFortAccountLinkingUIConfig : uint8
{
	Disabled                                 = 0,
	Default                                  = 1,
	ExternalViewerOnly                       = 2,
	FullExternal                             = 3,
	EFortAccountLinkingUIConfig_MAX          = 4,
};

// Enum FortniteGame.ESpecializationType
// NumValues: 0x0006
enum class ESpecializationType : uint8
{
	Tier1                                    = 0,
	Tier2                                    = 1,
	Tier3                                    = 2,
	Tier4                                    = 3,
	NumTiers                                 = 4,
	ESpecializationType_MAX                  = 5,
};

// Enum FortniteGame.EFortSupportBonusType
// NumValues: 0x0004
enum class EFortSupportBonusType : uint8
{
	Normal                                   = 0,
	Tactical                                 = 1,
	Max_None                                 = 2,
	EFortSupportBonusType_MAX                = 3,
};

// Enum FortniteGame.EFortHexTileAdjacency
// NumValues: 0x0008
enum class EFortHexTileAdjacency : uint8
{
	North                                    = 0,
	NorthEast                                = 1,
	SouthEast                                = 2,
	South                                    = 3,
	SouthWest                                = 4,
	NorthWest                                = 5,
	Max_None                                 = 6,
	EFortHexTileAdjacency_MAX                = 7,
};

// Enum FortniteGame.EPrereqNodeType
// NumValues: 0x0005
enum class EPrereqNodeType : uint8
{
	Invalid                                  = 0,
	SkillPoint                               = 1,
	ResearchPoint                            = 2,
	All                                      = 3,
	EPrereqNodeType_MAX                      = 4,
};

// Enum FortniteGame.EFortHomebaseNodeActionType
// NumValues: 0x0005
enum class EFortHomebaseNodeActionType : uint8
{
	None                                     = 0,
	DrillDown                                = 1,
	CollectResources                         = 2,
	Max_None                                 = 3,
	EFortHomebaseNodeActionType_MAX          = 4,
};

// Enum FortniteGame.EFortHomebaseNodeMagnitude
// NumValues: 0x0005
enum class EFortHomebaseNodeMagnitude : uint8
{
	Small                                    = 0,
	Medium                                   = 1,
	Large                                    = 2,
	Max_None                                 = 3,
	EFortHomebaseNodeMagnitude_MAX           = 4,
};

// Enum FortniteGame.EFortHomebaseNodeDisplayType
// NumValues: 0x0008
enum class EFortHomebaseNodeDisplayType : uint8
{
	Stat                                     = 0,
	SquadSlot                                = 1,
	Gadget                                   = 2,
	Inventory                                = 3,
	Hero                                     = 4,
	ExitNode                                 = 5,
	Max_None                                 = 6,
	EFortHomebaseNodeDisplayType_MAX         = 7,
};

// Enum FortniteGame.EFortHomebaseSquadSlotType
// NumValues: 0x0005
enum class EFortHomebaseSquadSlotType : uint8
{
	GroundSlot                               = 0,
	SupportSlot                              = 1,
	TacticalSlot                             = 2,
	Max_None                                 = 3,
	EFortHomebaseSquadSlotType_MAX           = 4,
};

// Enum FortniteGame.EFortHomebaseSquadType
// NumValues: 0x0006
enum class EFortHomebaseSquadType : uint8
{
	AttributeSquad                           = 0,
	CombatSquad                              = 1,
	DefenderSquad                            = 2,
	ExpeditionSquad                          = 3,
	Max_None                                 = 4,
	EFortHomebaseSquadType_MAX               = 5,
};

// Enum FortniteGame.EFortHuskAnimType
// NumValues: 0x0009
enum class EFortHuskAnimType : uint8
{
	Basic                                    = 0,
	Dwarf                                    = 1,
	BlasterBig                               = 2,
	Weak                                     = 3,
	TinyHead                                 = 4,
	Beehive                                  = 5,
	Husky                                    = 6,
	Sploder                                  = 7,
	EFortHuskAnimType_MAX                    = 8,
};

// Enum FortniteGame.EFortIntensityCurveSequenceType
// NumValues: 0x0005
enum class EFortIntensityCurveSequenceType : uint8
{
	Sequence                                 = 0,
	Loop                                     = 1,
	Random                                   = 2,
	Max_None                                 = 3,
	EFortIntensityCurveSequenceType_MAX      = 4,
};

// Enum FortniteGame.TInteractionType
// NumValues: 0x0007
enum class ETInteractionType : uint8
{
	IT_NoInteraction                         = 0,
	IT_Simple                                = 1,
	IT_LongPress                             = 2,
	IT_BuildingEdit                          = 3,
	IT_BuildingImprovement                   = 4,
	IT_TrapPlacement                         = 5,
	IT_MAX                                   = 6,
};

// Enum FortniteGame.EItemEvolutionRestrictionReason
// NumValues: 0x0007
enum class EItemEvolutionRestrictionReason : uint8
{
	NoEvolutions                             = 0,
	BelowMaximumLevel                        = 1,
	VaultOverflow                            = 2,
	MissingCatalyst                          = 3,
	MissingCosts                             = 4,
	NoRarityUpgrade                          = 5,
	EItemEvolutionRestrictionReason_MAX      = 6,
};

// Enum FortniteGame.EItemUpgradeRestrictionReason
// NumValues: 0x0004
enum class EItemUpgradeRestrictionReason : uint8
{
	NoAdditionalLevels                       = 0,
	MaximumLevelAchieved                     = 1,
	VaultOverflow                            = 2,
	EItemUpgradeRestrictionReason_MAX        = 3,
};

// Enum FortniteGame.EFortTemplateAccess
// NumValues: 0x0004
enum class EFortTemplateAccess : uint8
{
	Normal                                   = 0,
	Trusted                                  = 1,
	Private                                  = 2,
	EFortTemplateAccess_MAX                  = 3,
};

// Enum FortniteGame.EFortItemEntryState
// NumValues: 0x000C
enum class EFortItemEntryState : uint8
{
	NoneState                                = 0,
	NewItemCount                             = 1,
	ShouldShowItemToast                      = 2,
	DurabilityInitialized                    = 3,
	DoNotShowSpawnParticles                  = 4,
	FromRecoveredBackpack                    = 5,
	FromGift                                 = 6,
	PendingUpgradeCriteriaProgress           = 7,
	OwnerBuildingHandle                      = 8,
	FromDroppedPickup                        = 9,
	CraftAndSlotTarget                       = 10,
	EFortItemEntryState_MAX                  = 11,
};

// Enum FortniteGame.ELobbyMissionGeneratorDetailsRequirement
// NumValues: 0x0004
enum class ELobbyMissionGeneratorDetailsRequirement : uint8
{
	Unknown                                  = 0,
	NotRequired                              = 1,
	Required                                 = 2,
	ELobbyMissionGeneratorDetailsRequirement_MAX = 3,
};

// Enum FortniteGame.ELootQuotaLevel
// NumValues: 0x0014
enum class ELootQuotaLevel : uint8
{
	Unlimited                                = 0,
	Level1                                   = 1,
	Level2                                   = 2,
	Level3                                   = 3,
	Level4                                   = 4,
	Level5                                   = 5,
	Level6                                   = 6,
	Level7                                   = 7,
	Level8                                   = 8,
	Level9                                   = 9,
	Level10                                  = 10,
	Level11                                  = 11,
	Level12                                  = 12,
	Level13                                  = 13,
	Level14                                  = 14,
	Level15                                  = 15,
	Level16                                  = 16,
	Level17                                  = 17,
	NumLevels                                = 18,
	ELootQuotaLevel_MAX                      = 19,
};

// Enum FortniteGame.EFortMatchmakingType
// NumValues: 0x0005
enum class EFortMatchmakingType : uint8
{
	Gathering                                = 0,
	CriticalMission                          = 1,
	QuickPlay                                = 2,
	Session                                  = 3,
	EFortMatchmakingType_MAX                 = 4,
};

// Enum FortniteGame.EFortSessionHelperJoinResult
// NumValues: 0x0025
enum class EFortSessionHelperJoinResult : uint8
{
	NoResult                                 = 0,
	ReservationSuccess                       = 1,
	ReservationFailure_PartyLimitReached     = 2,
	ReservationFailure_IncorrectPlayerCount  = 3,
	ReservationFailure_RequestTimedOut       = 4,
	ReservationFailure_ReservationNotFound   = 5,
	ReservationFailure_ReservationDenied     = 6,
	ReservationFailure_ReservationDenied_Banned = 7,
	ReservationFailure_ReservationRequestCanceled = 8,
	ReservationFailure_ReservationInvalid    = 9,
	ReservationFailure_BadSessionId          = 10,
	ReservationFailure_ReservationDenied_ContainsExistingPlayers = 11,
	ReservationFailure_GeneralError          = 12,
	ReservationFailure_NoSubsystem           = 13,
	ReservationFailure_NoIdentity            = 14,
	ReservationFailure_InvalidSession        = 15,
	ReservationFailure_InvalidUser           = 16,
	ReservationFailure_EncryptionKey         = 17,
	ReservationFailure_RefreshAuth           = 18,
	ReservationFailure_AlreadyJoiningDuringReserve = 19,
	ReservationFailure_AlreadyJoiningDuringSkip = 20,
	JoinSessionSuccess                       = 21,
	JoinSessionFailure_SessionIsFull         = 22,
	JoinSessionFailure_SessionDoesNotExist   = 23,
	JoinSessionFailure_CouldNotRetrieveAddress = 24,
	JoinSessionFailure_AlreadyInSession      = 25,
	JoinSessionFailure_UnknownError          = 26,
	JoinSessionFailure_InvalidSession        = 27,
	JoinSessionFailure_InvalidSearchResultIndex = 28,
	JoinSessionFailure_AlreadyJoiningDuringJoin = 29,
	SearchPassFailure_NoSessionHelper        = 30,
	SearchPassFailure_InvalidUser            = 31,
	SearchPassFailure_NoIdentity             = 32,
	SearchPassFailure_InvalidSearchResult    = 33,
	SearchPassFailure_InvalidSearchResultIndex = 34,
	JoinSessionCanceled                      = 35,
	EFortSessionHelperJoinResult_MAX         = 36,
};

// Enum FortniteGame.EFortMatchmakingPool
// NumValues: 0x0006
enum class EFortMatchmakingPool : uint8
{
	Any                                      = 0,
	Desktop                                  = 1,
	PS4                                      = 2,
	XboxOne                                  = 3,
	Mobile                                   = 4,
	EFortMatchmakingPool_MAX                 = 5,
};

// Enum FortniteGame.EFortMatchmakingPrivacyConfiguration
// NumValues: 0x0004
enum class EFortMatchmakingPrivacyConfiguration : uint8
{
	UserPartyConfigured                      = 0,
	ForcePrivate                             = 1,
	ForcePublic                              = 2,
	EFortMatchmakingPrivacyConfiguration_MAX = 3,
};

// Enum FortniteGame.EMatchmakingFlags
// NumValues: 0x0006
enum class EMatchmakingFlags : uint8
{
	None                                     = 0,
	CreateNewOnly                            = 1,
	NoReservation                            = 2,
	Private                                  = 4,
	UseWorldDataOwner                        = 8,
	EMatchmakingFlags_MAX                    = 9,
};

// Enum FortniteGame.EMatchmakingStartLocation
// NumValues: 0x0005
enum class EMatchmakingStartLocation : uint8
{
	Lobby                                    = 0,
	Game                                     = 1,
	CreateNew                                = 2,
	FindSingle                               = 3,
	EMatchmakingStartLocation_MAX            = 4,
};

// Enum FortniteGame.EFortMtxPlatform
// NumValues: 0x0005
enum class EFortMtxPlatform : uint8
{
	Epic                                     = 0,
	PSN                                      = 1,
	Live                                     = 2,
	Shared                                   = 3,
	EFortMtxPlatform_MAX                     = 4,
};

// Enum FortniteGame.EAthenaProgressiveCosmeticType
// NumValues: 0x0003
enum class EAthenaProgressiveCosmeticType : uint8
{
	None                                     = 0,
	AllTimeWins                              = 1,
	EAthenaProgressiveCosmeticType_MAX       = 2,
};

// Enum FortniteGame.EAthenaCustomizationCategory
// NumValues: 0x000C
enum class EAthenaCustomizationCategory : uint8
{
	None                                     = 0,
	Glider                                   = 1,
	Pickaxe                                  = 2,
	Hat                                      = 3,
	Backpack                                 = 4,
	Character                                = 5,
	LoadingScreen                            = 6,
	BattleBus                                = 7,
	Dance                                    = 8,
	ConsumableEmote                          = 9,
	VictoryPose                              = 10,
	EAthenaCustomizationCategory_MAX         = 11,
};

// Enum FortniteGame.ETwitchViewerStatusType
// NumValues: 0x0005
enum class ETwitchViewerStatusType : uint8
{
	TwitchViewerStatus_Unknown               = 0,
	TwitchViewerStatus_Nonsubscriber         = 1,
	TwitchViewerStatus_Subscriber            = 2,
	TwitchViewerStatus_Broadcaster           = 3,
	TwitchViewerStatus_Max                   = 4,
};

// Enum FortniteGame.EMcpLeaderboardTimeWindow
// NumValues: 0x0005
enum class EMcpLeaderboardTimeWindow : uint8
{
	Daily                                    = 0,
	Weekly                                   = 1,
	Monthly                                  = 2,
	AllTime                                  = 3,
	EMcpLeaderboardTimeWindow_MAX            = 4,
};

// Enum FortniteGame.EFortMiniMapIconRotation
// NumValues: 0x0004
enum class EFortMiniMapIconRotation : uint8
{
	EFMMIR_None                              = 0,
	EFMMIR_Absolute                          = 1,
	EFMMIR_Relative                          = 2,
	EFMMIR_MAX                               = 3,
};

// Enum FortniteGame.EFortMiniMapContext
// NumValues: 0x0003
enum class EFortMiniMapContext : uint8
{
	EFMC_MiniMap                             = 0,
	EFMC_FullScreenMap                       = 1,
	EFMC_MAX                                 = 2,
};

// Enum FortniteGame.EFortMiniMapHeight
// NumValues: 0x0004
enum class EFortMiniMapHeight : uint8
{
	EFMH_Equal                               = 0,
	EFMH_Below                               = 1,
	EFMH_Above                               = 2,
	EFMH_MAX                                 = 3,
};

// Enum FortniteGame.EFortCheatMissionGenType
// NumValues: 0x0004
enum class EFortCheatMissionGenType : uint8
{
	NewGeneration                            = 0,
	OldGeneration                            = 1,
	Max_None                                 = 2,
	EFortCheatMissionGenType_MAX             = 3,
};

// Enum FortniteGame.EFortOptionGenerationResult
// NumValues: 0x0004
enum class EFortOptionGenerationResult : uint8
{
	NoOptionsGenerated                       = 0,
	NewOptionsGenerated                      = 1,
	ExistingOptionsGenerated                 = 2,
	EFortOptionGenerationResult_MAX          = 3,
};

// Enum FortniteGame.EPollActorsInVolumeTypes
// NumValues: 0x0004
enum class EPollActorsInVolumeTypes : uint8
{
	DesignerPlacedOnly                       = 0,
	PlayerBuiltOnly                          = 1,
	All                                      = 2,
	EPollActorsInVolumeTypes_MAX             = 3,
};

// Enum FortniteGame.EMissionReplyTypes
// NumValues: 0x0003
enum class EMissionReplyTypes : uint8
{
	Handled                                  = 0,
	NotHandled                               = 1,
	EMissionReplyTypes_MAX                   = 2,
};

// Enum FortniteGame.ETimerOverrideSetting
// NumValues: 0x0004
enum class ETimerOverrideSetting : uint8
{
	DefaultBehavior                          = 0,
	ForceShow                                = 1,
	ForceHide                                = 2,
	ETimerOverrideSetting_MAX                = 3,
};

// Enum FortniteGame.EMusicChannel
// NumValues: 0x0005
enum class EMusicChannel : uint8
{
	A                                        = 0,
	B                                        = 1,
	Stinger                                  = 2,
	Max_None                                 = 3,
	EMusicChannel_MAX                        = 4,
};

// Enum FortniteGame.EMusicFadeStyles
// NumValues: 0x0004
enum class EMusicFadeStyles : uint8
{
	CrossFade                                = 0,
	FadeOutThenIn                            = 1,
	Max_None                                 = 2,
	EMusicFadeStyles_MAX                     = 3,
};

// Enum FortniteGame.EFortAreaFlag
// NumValues: 0x0006
enum class EFortAreaFlag : uint8
{
	Default                                  = 0,
	Obstacle                                 = 1,
	Smashable                                = 2,
	Unwalkable                               = 3,
	Interactable                             = 4,
	EFortAreaFlag_MAX                        = 5,
};

// Enum FortniteGame.EFortNavLinkPattern
// NumValues: 0x0005
enum class EFortNavLinkPattern : uint8
{
	Floor                                    = 0,
	Stairs                                   = 1,
	Roof                                     = 2,
	Manual                                   = 3,
	EFortNavLinkPattern_MAX                  = 4,
};

// Enum FortniteGame.EFortNamedNavmesh
// NumValues: 0x0003
enum class EFortNamedNavmesh : uint8
{
	Husk                                     = 0,
	Smasher                                  = 1,
	MAX                                      = 2,
};

// Enum FortniteGame.EPathUndermineEvent
// NumValues: 0x0004
enum class EPathUndermineEvent : uint8
{
	Predicted                                = 0,
	Started                                  = 1,
	Finished                                 = 2,
	EPathUndermineEvent_MAX                  = 3,
};

// Enum FortniteGame.EPathObstacleAction
// NumValues: 0x0005
enum class EPathObstacleAction : uint8
{
	Melee                                    = 0,
	Ignore                                   = 1,
	AbortMoveAsFailed                        = 2,
	FinishMoveAsSucceeded                    = 3,
	EPathObstacleAction_MAX                  = 4,
};

// Enum FortniteGame.EWardAffectType
// NumValues: 0x0004
enum class EWardAffectType : uint8
{
	AffectsBothStartAndEndPoints             = 0,
	AffectsOnlyStartPoints                   = 1,
	AffectsOnlyEndPoints                     = 2,
	EWardAffectType_MAX                      = 3,
};

// Enum FortniteGame.EFortControlRecoveryBehavior
// NumValues: 0x0004
enum class EFortControlRecoveryBehavior : uint8
{
	DefaultControl                           = 0,
	LimitedControl                           = 1,
	ChainControl                             = 2,
	EFortControlRecoveryBehavior_MAX         = 3,
};

// Enum FortniteGame.EFortPawnPushSize
// NumValues: 0x0005
enum class EFortPawnPushSize : uint8
{
	FFPS_Normal                              = 0,
	FPPS_Player                              = 1,
	FPPS_Large                               = 2,
	FPPS_SuperLarge                          = 3,
	EFortPawnPushSize_MAX                    = 4,
};

// Enum FortniteGame.EFortAnnouncerTeamVocalChords
// NumValues: 0x0004
enum class EFortAnnouncerTeamVocalChords : uint8
{
	Team1                                    = 0,
	Team2                                    = 1,
	Max_None                                 = 2,
	EFortAnnouncerTeamVocalChords_MAX        = 3,
};

// Enum FortniteGame.EFortIsFinalXpUpdate
// NumValues: 0x0004
enum class EFortIsFinalXpUpdate : uint8
{
	Uninitialized                            = 0,
	NotFinal                                 = 1,
	Final                                    = 2,
	EFortIsFinalXpUpdate_MAX                 = 3,
};

// Enum FortniteGame.EFortRewardType
// NumValues: 0x0004
enum class EFortRewardType : uint8
{
	Default                                  = 0,
	Missed                                   = 1,
	Max_None                                 = 2,
	EFortRewardType_MAX                      = 3,
};

// Enum FortniteGame.EFortRewardActivityType
// NumValues: 0x0006
enum class EFortRewardActivityType : uint8
{
	General                                  = 0,
	MissionPrimary                           = 1,
	MissionSecondary                         = 2,
	AccountLevelUp                           = 3,
	Max_None                                 = 4,
	EFortRewardActivityType_MAX              = 5,
};

// Enum FortniteGame.EStatCategory
// NumValues: 0x0005
enum class EStatCategory : uint8
{
	Combat                                   = 0,
	Building                                 = 1,
	Utility                                  = 2,
	Max_None                                 = 3,
	EStatCategory_MAX                        = 4,
};

// Enum FortniteGame.EFortReplicatedStat
// NumValues: 0x0023
enum class EFortReplicatedStat : uint8
{
	MonsterKills                             = 0,
	MonsterDamagePoints                      = 1,
	PlayerKills                              = 2,
	WoodGathered                             = 3,
	StoneGathered                            = 4,
	MetalGathered                            = 5,
	Deaths                                   = 6,
	BuildingsBuilt                           = 7,
	BuildingsBuilt_Wood                      = 8,
	BuildingsBuilt_Stone                     = 9,
	BuildingsBuilt_Metal                     = 10,
	BuildingsUpgraded_Wood2                  = 11,
	BuildingsUpgraded_Wood3                  = 12,
	BuildingsUpgraded_Stone2                 = 13,
	BuildingsUpgraded_Stone3                 = 14,
	BuildingsUpgraded_Metal2                 = 15,
	BuildingsUpgraded_Metal3                 = 16,
	BuildingsDestroyed                       = 17,
	Repair_Wood                              = 18,
	Repair_Stone                             = 19,
	Repair_Metal                             = 20,
	FlagsCaptured                            = 21,
	FlagsReturned                            = 22,
	ContainersLooted                         = 23,
	CraftingPoints                           = 24,
	TrapPlacementPoints                      = 25,
	TrapActivationPoints                     = 26,
	TotalScore                               = 27,
	OldTotalScore                            = 28,
	CombatScore                              = 29,
	BuildingScore                            = 30,
	UtilityScore                             = 31,
	BadgesScore                              = 32,
	None                                     = 33,
	MAX                                      = 34,
};

// Enum FortniteGame.EFortReplenishmentType
// NumValues: 0x0005
enum class EFortReplenishmentType : uint8
{
	Restricted                               = 0,
	ClampMin                                 = 1,
	Add                                      = 2,
	Ability                                  = 3,
	EFortReplenishmentType_MAX               = 4,
};

// Enum FortniteGame.EFortPickupTossState
// NumValues: 0x0004
enum class EFortPickupTossState : uint8
{
	NotTossed                                = 0,
	InProgress                               = 1,
	AtRest                                   = 2,
	EFortPickupTossState_MAX                 = 3,
};

// Enum FortniteGame.EFortCardinalDirection
// NumValues: 0x0005
enum class EFortCardinalDirection : uint8
{
	North                                    = 0,
	East                                     = 1,
	South                                    = 2,
	West                                     = 3,
	EFortCardinalDirection_MAX               = 4,
};

// Enum FortniteGame.EFortPickerToDisplay
// NumValues: 0x0007
enum class EFortPickerToDisplay : uint8
{
	TrapPicker                               = 0,
	WeaponPicker                             = 1,
	SocialPicker                             = 2,
	ChatPicker                               = 3,
	NotePicker                               = 4,
	EmotePicker                              = 5,
	EFortPickerToDisplay_MAX                 = 6,
};

// Enum FortniteGame.EFortInputActionGroup
// NumValues: 0x0007
enum class EFortInputActionGroup : uint8
{
	AllModes                                 = 0,
	Combat                                   = 1,
	Building                                 = 2,
	Edit                                     = 3,
	Death                                    = 4,
	Cinematic                                = 5,
	EFortInputActionGroup_MAX                = 6,
};

// Enum FortniteGame.EFortInputActionType
// NumValues: 0x0005
enum class EFortInputActionType : uint8
{
	Press                                    = 0,
	Click                                    = 1,
	Hold                                     = 2,
	Release                                  = 3,
	EFortInputActionType_MAX                 = 4,
};

// Enum FortniteGame.EFortPawnStasisMode
// NumValues: 0x0004
enum class EFortPawnStasisMode : uint8
{
	None                                     = 0,
	NoMovement                               = 1,
	NoMovementOrTurning                      = 2,
	EFortPawnStasisMode_MAX                  = 3,
};

// Enum FortniteGame.ETrustedPlatformType
// NumValues: 0x0005
enum class ETrustedPlatformType : uint8
{
	Unknown                                  = 0,
	Desktop                                  = 1,
	PS4                                      = 2,
	XboxOne                                  = 3,
	ETrustedPlatformType_MAX                 = 4,
};

// Enum FortniteGame.EDeathCause
// NumValues: 0x0011
enum class EDeathCause : uint8
{
	OutsideSafeZone                          = 0,
	FallDamage                               = 1,
	Pistol                                   = 2,
	Shotgun                                  = 3,
	Rifle                                    = 4,
	SMG                                      = 5,
	Sniper                                   = 6,
	Melee                                    = 7,
	Grenade                                  = 8,
	GrenadeLauncher                          = 9,
	RocketLauncher                           = 10,
	Trap                                     = 11,
	DBNOTimeout                              = 12,
	Banhammer                                = 13,
	RemovedFromGame                          = 14,
	Unspecified                              = 15,
	EDeathCause_MAX                          = 16,
};

// Enum FortniteGame.EFortPointsFromNavGraphGoalPathDistanceFilterOperator
// NumValues: 0x0003
enum class EFortPointsFromNavGraphGoalPathDistanceFilterOperator : uint8
{
	AllGoalsInRange                          = 0,
	AnyGoalInRange                           = 1,
	EFortPointsFromNavGraphGoalPathDistanceFilterOperator_MAX = 2,
};

// Enum FortniteGame.EFortTestGoalActorDot
// NumValues: 0x0003
enum class EFortTestGoalActorDot : uint8
{
	Dot3D                                    = 0,
	Dot2D                                    = 1,
	EFortTestGoalActorDot_MAX                = 2,
};

// Enum FortniteGame.EDistanceMode
// NumValues: 0x0004
enum class EDistanceMode : uint8
{
	DistItemToContext                        = 0,
	DistItemGoalActorToContext               = 1,
	DistItemToItemGoalActor                  = 2,
	EDistanceMode_MAX                        = 3,
};

// Enum FortniteGame.ECountAIAssignedToType
// NumValues: 0x0004
enum class ECountAIAssignedToType : uint8
{
	Goal                                     = 0,
	Actor                                    = 1,
	Assignment                               = 2,
	ECountAIAssignedToType_MAX               = 3,
};

// Enum FortniteGame.ETwoPointSolverRotationA
// NumValues: 0x0006
enum class ETwoPointSolverRotationA : uint8
{
	PointAToQuerier                          = 0,
	QuerierToPointA                          = 1,
	PointAToQuerierWithRandomOffset          = 2,
	QuerierToPointAWithRandomOffset          = 3,
	Custom                                   = 4,
	ETwoPointSolverRotationA_MAX             = 5,
};

// Enum FortniteGame.EFortQuestRewardType
// NumValues: 0x0003
enum class EFortQuestRewardType : uint8
{
	BasicRewards                             = 0,
	BasicPlusSingleChoice                    = 1,
	EFortQuestRewardType_MAX                 = 2,
};

// Enum FortniteGame.EFortQuestType
// NumValues: 0x0010
enum class EFortQuestType : uint8
{
	Task                                     = 0,
	Optional                                 = 1,
	DailyQuest                               = 2,
	TransientQuest                           = 3,
	SurvivorQuest                            = 4,
	Achievement                              = 5,
	Onboarding                               = 6,
	StreamBroadcaster                        = 7,
	StreamViewer                             = 8,
	StreamSubscriber                         = 9,
	Athena                                   = 10,
	AthenaDailyQuest                         = 11,
	AthenaEvent                              = 12,
	AthenaBattlePassQuest                    = 13,
	All                                      = 14,
	EFortQuestType_MAX                       = 15,
};

// Enum FortniteGame.EFortQuestObjectiveItemEvent
// NumValues: 0x0016
enum class EFortQuestObjectiveItemEvent : uint8
{
	Craft                                    = 0,
	Collect                                  = 1,
	Acquire                                  = 2,
	Consume                                  = 3,
	OpenCardPack                             = 4,
	PurchaseCardPack                         = 5,
	Convert                                  = 6,
	Upgrade                                  = 7,
	UpgradeRarity                            = 8,
	QuestComplete                            = 9,
	AssignWorker                             = 10,
	LevelUpCollectionBook                    = 11,
	HasItem                                  = 12,
	SlotInCollection                         = 13,
	HasCompletedQuest                        = 14,
	HasAssignedWorker                        = 15,
	HasUpgraded                              = 16,
	HasConverted                             = 17,
	HasUpgradedRarity                        = 18,
	HasLeveledUpCollectionBook               = 19,
	Max_None                                 = 20,
	EFortQuestObjectiveItemEvent_MAX         = 21,
};

// Enum FortniteGame.EFortQuestObjectiveStatEvent
// NumValues: 0x002B
enum class EFortQuestObjectiveStatEvent : uint8
{
	Kill                                     = 0,
	TeamKill                                 = 1,
	KillContribution                         = 2,
	Build                                    = 3,
	BuildingEdit                             = 4,
	BuildingRepair                           = 5,
	BuildingUpgrade                          = 6,
	Complete                                 = 7,
	Craft                                    = 8,
	Collect                                  = 9,
	Win                                      = 10,
	Interact                                 = 11,
	Destroy                                  = 12,
	Ability                                  = 13,
	WaveComplete                             = 14,
	Custom                                   = 15,
	Client                                   = 16,
	AthenaRank                               = 17,
	AthenaOutlive                            = 18,
	RevivePlayer                             = 19,
	NumGameplayEvents                        = 20,
	Acquire                                  = 21,
	Consume                                  = 22,
	OpenCardPack                             = 23,
	PurchaseCardPack                         = 24,
	Convert                                  = 25,
	Upgrade                                  = 26,
	UpgradeRarity                            = 27,
	QuestComplete                            = 28,
	AssignWorker                             = 29,
	CollectExpedition                        = 30,
	CollectSuccessfulExpedition              = 31,
	LevelUpCollectionBook                    = 32,
	HasItem                                  = 33,
	SlotInCollection                         = 34,
	HasCompletedQuest                        = 35,
	HasAssignedWorker                        = 36,
	HasUpgraded                              = 37,
	HasConverted                             = 38,
	HasUpgradedRarity                        = 39,
	HasLeveledUpCollectionBook               = 40,
	Max_None                                 = 41,
	EFortQuestObjectiveStatEvent_MAX         = 42,
};

// Enum FortniteGame.EFortQuestState
// NumValues: 0x0005
enum class EFortQuestState : uint8
{
	Inactive                                 = 0,
	Active                                   = 1,
	Completed                                = 2,
	Claimed                                  = 3,
	EFortQuestState_MAX                      = 4,
};

// Enum FortniteGame.EFortQuickBars
// NumValues: 0x0004
enum class EFortQuickBars : uint8
{
	Primary                                  = 0,
	Secondary                                = 1,
	Max_None                                 = 2,
	EFortQuickBars_MAX                       = 3,
};

// Enum FortniteGame.ERegisteredPlayerUnregistrationStatus
// NumValues: 0x0007
enum class ERegisteredPlayerUnregistrationStatus : uint8
{
	Registered                               = 0,
	UnregistrationStarting                   = 1,
	UnregistrationWaitingForInitialLock      = 2,
	UnregistrationWaitingForFinalSave        = 3,
	UnregistrationWaitingForProfileUnlock    = 4,
	UnregistrationComplete                   = 5,
	ERegisteredPlayerUnregistrationStatus_MAX = 6,
};

// Enum FortniteGame.ESpectatorCameraType
// NumValues: 0x0003
enum class ESpectatorCameraType : uint8
{
	Chase                                    = 0,
	Drone                                    = 1,
	MAX                                      = 2,
};

// Enum FortniteGame.EFocusMethod
// NumValues: 0x0004
enum class EFocusMethod : uint8
{
	NoFocus                                  = 0,
	AutoFocus                                = 1,
	ManualFocus                              = 2,
	EFocusMethod_MAX                         = 3,
};

// Enum FortniteGame.EFortSafeZoneState
// NumValues: 0x0005
enum class EFortSafeZoneState : uint8
{
	None                                     = 0,
	Starting                                 = 1,
	Holding                                  = 2,
	Shrinking                                = 3,
	EFortSafeZoneState_MAX                   = 4,
};

// Enum FortniteGame.EFortUIScoreType
// NumValues: 0x0008
enum class EFortUIScoreType : uint8
{
	Combat                                   = 0,
	Building                                 = 1,
	Utility                                  = 2,
	Badges                                   = 3,
	Bonus                                    = 4,
	Total                                    = 5,
	Max_None                                 = 6,
	EFortUIScoreType_MAX                     = 7,
};

// Enum FortniteGame.EFortScriptedActionEnvironment
// NumValues: 0x0005
enum class EFortScriptedActionEnvironment : uint8
{
	FrontEnd                                 = 0,
	GameServer                               = 1,
	GameClient                               = 2,
	Max_None                                 = 3,
	EFortScriptedActionEnvironment_MAX       = 4,
};

// Enum FortniteGame.EFortScriptedActionSource
// NumValues: 0x0005
enum class EFortScriptedActionSource : uint8
{
	Quest                                    = 0,
	Token                                    = 1,
	Manual                                   = 2,
	Max_None                                 = 3,
	EFortScriptedActionSource_MAX            = 4,
};

// Enum FortniteGame.EFortSessionHelperJoinState
// NumValues: 0x0009
enum class EFortSessionHelperJoinState : uint8
{
	NotJoining                               = 0,
	RequestingReservation                    = 1,
	FailedReservation                        = 2,
	WaitingOnGame                            = 3,
	AttemptingJoin                           = 4,
	JoiningSession                           = 5,
	FailedJoin                               = 6,
	CanceledJoin                             = 7,
	EFortSessionHelperJoinState_MAX          = 8,
};

// Enum FortniteGame.EFortSocialItemPresenceStatus
// NumValues: 0x0005
enum class EFortSocialItemPresenceStatus : uint8
{
	Offline                                  = 0,
	InGame                                   = 1,
	Away                                     = 2,
	Unknown                                  = 3,
	EFortSocialItemPresenceStatus_MAX        = 4,
};

// Enum FortniteGame.EFortSocialItemType
// NumValues: 0x0005
enum class EFortSocialItemType : uint8
{
	Header                                   = 0,
	Friend                                   = 1,
	PartyInvite                              = 2,
	RecentPlayer                             = 3,
	Max                                      = 4,
};

// Enum FortniteGame.EFortEventConditionType
// NumValues: 0x0003
enum class EFortEventConditionType : uint8
{
	EFEC_StatCompare                         = 0,
	EFEC_CanCraft                            = 1,
	EFEC_MAX                                 = 2,
};

// Enum FortniteGame.EFortCompare
// NumValues: 0x0006
enum class EFortCompare : uint8
{
	EFC_LessThan                             = 0,
	EFC_LessThanOrEqual                      = 1,
	EFC_GreaterThan                          = 2,
	EFC_GreaterThanOrEqual                   = 3,
	EFC_Equals                               = 4,
	EFC_MAX                                  = 5,
};

// Enum FortniteGame.EFortEventRepeat
// NumValues: 0x0006
enum class EFortEventRepeat : uint8
{
	EFER_Inactive                            = 0,
	EFER_Always                              = 1,
	EFER_OncePerPlayer                       = 2,
	EFER_OncePerCampaign                     = 3,
	EFER_OncePerMap                          = 4,
	EFER_MAX                                 = 5,
};

// Enum FortniteGame.EFortAutoTestState
// NumValues: 0x000A
enum class EFortAutoTestState : uint8
{
	InitialLoad                              = 0,
	Login                                    = 1,
	FrontendLoad                             = 2,
	FrontendPvELoad                          = 3,
	FrontendPvETest                          = 4,
	PvEMatchmaking                           = 5,
	ZoneLoad                                 = 6,
	ZoneTest                                 = 7,
	Finished                                 = 8,
	MAX                                      = 9,
};

// Enum FortniteGame.EFortTheaterType
// NumValues: 0x0009
enum class EFortTheaterType : uint8
{
	Standard                                 = 0,
	Elder                                    = 1,
	PvP                                      = 2,
	PvP2                                     = 3,
	Tutorial                                 = 4,
	TutorialGate                             = 5,
	Test                                     = 6,
	Max_None                                 = 7,
	EFortTheaterType_MAX                     = 8,
};

// Enum FortniteGame.EFortTheaterMapTileType
// NumValues: 0x0007
enum class EFortTheaterMapTileType : uint8
{
	Normal                                   = 0,
	CriticalMission                          = 1,
	AlwaysActive                             = 2,
	Outpost                                  = 3,
	NonMission                               = 4,
	PvPFOB                                   = 5,
	EFortTheaterMapTileType_MAX              = 6,
};

// Enum FortniteGame.EFortMissionQuestValidityResult
// NumValues: 0x0006
enum class EFortMissionQuestValidityResult : uint8
{
	Invalid                                  = 0,
	InvalidNotPlayable                       = 1,
	ValidLinked                              = 2,
	ValidObjectiveCondition                  = 3,
	ValidFallback                            = 4,
	EFortMissionQuestValidityResult_MAX      = 5,
};

// Enum FortniteGame.ECollectionSelectionMethod
// NumValues: 0x0006
enum class ECollectionSelectionMethod : uint8
{
	TierAsIndex                              = 0,
	TierAsIndexOverflowToLastValid           = 1,
	Modulo                                   = 2,
	Random                                   = 3,
	None                                     = 4,
	ECollectionSelectionMethod_MAX           = 5,
};

// Enum FortniteGame.ETrackVerticality
// NumValues: 0x0005
enum class ETrackVerticality : uint8
{
	Floor                                    = 0,
	Ramp                                     = 1,
	GradualRamp                              = 2,
	Max_None                                 = 3,
	ETrackVerticality_MAX                    = 4,
};

// Enum FortniteGame.ETrackIncline
// NumValues: 0x0008
enum class ETrackIncline : uint8
{
	NoNeighbor                               = 0,
	Flat                                     = 1,
	Up                                       = 2,
	Down                                     = 3,
	GradualUp                                = 4,
	GradualDown                              = 5,
	Max_None                                 = 6,
	ETrackIncline_MAX                        = 7,
};

// Enum FortniteGame.ETrackPieceType
// NumValues: 0x0007
enum class ETrackPieceType : uint8
{
	None                                     = 0,
	Straight                                 = 1,
	Turn                                     = 2,
	TShape                                   = 3,
	Cross                                    = 4,
	Max_None                                 = 5,
	ETrackPieceType_MAX                      = 6,
};

// Enum FortniteGame.ETrackDirection
// NumValues: 0x0006
enum class ETrackDirection : uint8
{
	YNegative                                = 0,
	XPositive                                = 1,
	YPositive                                = 2,
	XNegative                                = 3,
	Max_None                                 = 4,
	ETrackDirection_MAX                      = 5,
};

// Enum FortniteGame.EFortGliderType
// NumValues: 0x0003
enum class EFortGliderType : uint8
{
	Glider                                   = 0,
	Umbrella                                 = 1,
	EFortGliderType_MAX                      = 2,
};

// Enum FortniteGame.EFortMissionAlertCategory
// NumValues: 0x000A
enum class EFortMissionAlertCategory : uint8
{
	General                                  = 0,
	Storm                                    = 1,
	Horde                                    = 2,
	StormLow                                 = 3,
	Halloween                                = 4,
	MiniBoss                                 = 5,
	Survival3Day                             = 6,
	Survival7Day                             = 7,
	Total                                    = 8,
	EFortMissionAlertCategory_MAX            = 9,
};

// Enum FortniteGame.EItemTileViewDisplayType
// NumValues: 0x0005
enum class EItemTileViewDisplayType : uint8
{
	World                                    = 0,
	Outpost                                  = 1,
	Account                                  = 2,
	DeployableBase                           = 3,
	Max                                      = 4,
};

// Enum FortniteGame.EOutpostBuildings
// NumValues: 0x0007
enum class EOutpostBuildings : uint8
{
	StormShield                              = 0,
	CraftingTable                            = 1,
	Fabricator                               = 2,
	HarvestingOptimizer                      = 3,
	StorageVault                             = 4,
	POST                                     = 5,
	EOutpostBuildings_MAX                    = 6,
};

// Enum FortniteGame.EFortClientAnnouncementQueueType
// NumValues: 0x0003
enum class EFortClientAnnouncementQueueType : uint8
{
	Toasts                                   = 0,
	Stickies                                 = 1,
	Max                                      = 2,
};

// Enum FortniteGame.EFortNotificationQueueType
// NumValues: 0x0004
enum class EFortNotificationQueueType : uint8
{
	Toasts                                   = 0,
	Stickies                                 = 1,
	Messages                                 = 2,
	Max                                      = 3,
};

// Enum FortniteGame.EFortDialogResult
// NumValues: 0x0007
enum class EFortDialogResult : uint8
{
	Confirmed                                = 0,
	Declined                                 = 1,
	Ignored                                  = 2,
	Killed                                   = 3,
	TimedOut                                 = 4,
	Unknown                                  = 5,
	EFortDialogResult_MAX                    = 6,
};

// Enum FortniteGame.EFortBangType
// NumValues: 0x001F
enum class EFortBangType : uint8
{
	Invalid                                  = 0,
	Custom                                   = 1,
	PlayTab                                  = 2,
	HeroesTab                                = 3,
	VaultTab                                 = 4,
	StoreTab                                 = 5,
	FriendsButton                            = 6,
	PartyInviteButton                        = 7,
	SubGameAccessChanged                     = 8,
	DailyRewardsButton                       = 9,
	QuestsButton                             = 10,
	CompletedExpeditions                     = 11,
	MainMenu                                 = 12,
	VaultSchematics                          = 13,
	VaultLeadSurvivors                       = 14,
	VaultSurvivors                           = 15,
	VaultHeroes                              = 16,
	VaultDefenders                           = 17,
	VaultResources                           = 18,
	VaultMelee                               = 19,
	VaultRanged                              = 20,
	VaultConsumables                         = 21,
	VaultIngredients                         = 22,
	VaultTraps                               = 23,
	CosmeticsTab                             = 24,
	CosmeticsOutfit                          = 25,
	CosmeticGlider                           = 26,
	CosmeticPickaxe                          = 27,
	CosmeticDance                            = 28,
	PlayerBanners                            = 29,
	EFortBangType_MAX                        = 30,
};

// Enum FortniteGame.EFortEventNameType
// NumValues: 0x0003
enum class EFortEventNameType : uint8
{
	Mission                                  = 0,
	Client                                   = 1,
	EFortEventNameType_MAX                   = 2,
};

// Enum FortniteGame.EFortCraftFailCause
// NumValues: 0x0008
enum class EFortCraftFailCause : uint8
{
	Unknown                                  = 0,
	NotEnoughResources                       = 1,
	InventoryFull                            = 2,
	InsufficientTeamLevel                    = 3,
	CraftingQueueFull                        = 4,
	CurrentlyLocked                          = 5,
	OverflowSchematic                        = 6,
	EFortCraftFailCause_MAX                  = 7,
};

// Enum FortniteGame.EKeepContainerType
// NumValues: 0x0007
enum class EKeepContainerType : uint8
{
	Base                                     = 0,
	Storeroom                                = 1,
	FirstAid                                 = 2,
	Armory                                   = 3,
	Workshop                                 = 4,
	AmmoStash                                = 5,
	Max                                      = 6,
};

// Enum FortniteGame.EFortIndicatorState
// NumValues: 0x0004
enum class EFortIndicatorState : uint8
{
	Hidden                                   = 0,
	OnlyFriendsVisible                       = 1,
	Visible                                  = 2,
	EFortIndicatorState_MAX                  = 3,
};

// Enum FortniteGame.EReadyCheckState
// NumValues: 0x0004
enum class EReadyCheckState : uint8
{
	CheckStarted                             = 0,
	Ready                                    = 1,
	NotReady                                 = 2,
	EReadyCheckState_MAX                     = 3,
};

// Enum FortniteGame.ERichPresenceStateChange
// NumValues: 0x0006
enum class ERichPresenceStateChange : uint8
{
	AutoUpdate                               = 0,
	Idle                                     = 1,
	Active                                   = 2,
	Busy                                     = 3,
	NotBusy                                  = 4,
	ERichPresenceStateChange_MAX             = 5,
};

// Enum FortniteGame.EFortTeamAffiliation
// NumValues: 0x0004
enum class EFortTeamAffiliation : uint8
{
	Friendly                                 = 0,
	Neutral                                  = 1,
	Hostile                                  = 2,
	EFortTeamAffiliation_MAX                 = 3,
};

// Enum FortniteGame.EFortAIUtility
// NumValues: 0x0011
enum class EFortAIUtility : uint8
{
	KillPlayersMelee                         = 0,
	KillPlayersRanged                        = 1,
	KillPlayersArtillery                     = 2,
	DestroyBuildingsMelee                    = 3,
	DestroyBuildingsRanged                   = 4,
	DestroyBuildingsArtillery                = 5,
	DestroyTraps                             = 6,
	Tank                                     = 7,
	Infiltrate                               = 8,
	Mob                                      = 9,
	Support                                  = 10,
	Kiting                                   = 11,
	AreaOfDenial                             = 12,
	DisableTraps                             = 13,
	Dormant                                  = 14,
	Assassin                                 = 15,
	MAX                                      = 16,
};

// Enum FortniteGame.EFortTileEdgeType
// NumValues: 0x0008
enum class EFortTileEdgeType : uint8
{
	Undefined                                = 0,
	Outer_1                                  = 1,
	Transition_2                             = 2,
	Inner_3                                  = 3,
	Border_4                                 = 4,
	BorderTransitionSingle_5                 = 5,
	BorderTransitionDouble_6                 = 6,
	MAX                                      = 7,
};

// Enum FortniteGame.EFortRequestedGameplayAction
// NumValues: 0x0009
enum class EFortRequestedGameplayAction : uint8
{
	ContinuePlaying                          = 0,
	StartPlaying                             = 1,
	StopPlaying                              = 2,
	EnterZone                                = 3,
	LeaveZone                                = 4,
	ReturnToMainMenu                         = 5,
	QuitGame                                 = 6,
	Invalid                                  = 7,
	EFortRequestedGameplayAction_MAX         = 8,
};

// Enum FortniteGame.EFortGameplayState
// NumValues: 0x0007
enum class EFortGameplayState : uint8
{
	NormalGameplay                           = 0,
	WaitingToStart                           = 1,
	EndOfZone                                = 2,
	EnteringZone                             = 3,
	LeavingZone                              = 4,
	Invalid                                  = 5,
	EFortGameplayState_MAX                   = 6,
};

// Enum FortniteGame.EFortMovementUrgency
// NumValues: 0x0006
enum class EFortMovementUrgency : uint8
{
	None                                     = 0,
	Low                                      = 1,
	Medium                                   = 2,
	High                                     = 3,
	NumLevels                                = 4,
	EFortMovementUrgency_MAX                 = 5,
};

// Enum FortniteGame.EFortMovementStyle
// NumValues: 0x0006
enum class EFortMovementStyle : uint8
{
	Running                                  = 0,
	Walking                                  = 1,
	Charging                                 = 2,
	Sprinting                                = 3,
	Hoverboard                               = 4,
	EFortMovementStyle_MAX                   = 5,
};

// Enum FortniteGame.EFortWeaponReloadType
// NumValues: 0x0005
enum class EFortWeaponReloadType : uint8
{
	ReloadWholeClip                          = 0,
	ReloadIndividualBullets                  = 1,
	ReloadBasedOnAmmoCostPerFire             = 2,
	ReloadBasedOnCartridgePerFire            = 3,
	EFortWeaponReloadType_MAX                = 4,
};

// Enum FortniteGame.EFortWeaponTriggerType
// NumValues: 0x0005
enum class EFortWeaponTriggerType : uint8
{
	OnPress                                  = 0,
	Automatic                                = 1,
	OnRelease                                = 2,
	OnPressAndRelease                        = 3,
	EFortWeaponTriggerType_MAX               = 4,
};

// Enum FortniteGame.EFortJumpStaminaCost
// NumValues: 0x0005
enum class EFortJumpStaminaCost : uint8
{
	None                                     = 0,
	Trigger                                  = 1,
	SprintTrigger                            = 2,
	SprintAir                                = 3,
	EFortJumpStaminaCost_MAX                 = 4,
};

// Enum FortniteGame.EFortDayPhasePrio
// NumValues: 0x0003
enum class EFortDayPhasePrio : uint8
{
	Default                                  = 0,
	DailySummary                             = 1,
	EFortDayPhasePrio_MAX                    = 2,
};

// Enum FortniteGame.EFortCustomBodyType
// NumValues: 0x0009
enum class EFortCustomBodyType : uint8
{
	Small                                    = 1,
	Medium                                   = 2,
	MediumAndSmall                           = 3,
	Large                                    = 4,
	LargeAndSmall                            = 5,
	LargeAndMedium                           = 6,
	All                                      = 7,
	Deprecated                               = 8,
	EFortCustomBodyType_MAX                  = 9,
};

// Enum FortniteGame.EFortDisplayGender
// NumValues: 0x0005
enum class EFortDisplayGender : uint8
{
	Unknown                                  = 0,
	Male                                     = 1,
	Female                                   = 2,
	NumTypes                                 = 3,
	EFortDisplayGender_MAX                   = 4,
};

// Enum FortniteGame.EFortCustomGender
// NumValues: 0x0005
enum class EFortCustomGender : uint8
{
	Invalid                                  = 0,
	Male                                     = 1,
	Female                                   = 2,
	Both                                     = 3,
	EFortCustomGender_MAX                    = 4,
};

// Enum FortniteGame.EFortCompletionResult
// NumValues: 0x0005
enum class EFortCompletionResult : uint8
{
	Win                                      = 0,
	Loss                                     = 1,
	Draw                                     = 2,
	Undefined                                = 3,
	EFortCompletionResult_MAX                = 4,
};

// Enum FortniteGame.EFortPvPGameResult
// NumValues: 0x0004
enum class EFortPvPGameResult : uint8
{
	Win                                      = 0,
	Loss                                     = 1,
	Draw                                     = 2,
	EFortPvPGameResult_MAX                   = 3,
};

// Enum FortniteGame.EFortItemTier
// NumValues: 0x000D
enum class EFortItemTier : uint8
{
	No_Tier                                  = 0,
	I                                        = 1,
	II                                       = 2,
	III                                      = 3,
	IV                                       = 4,
	V                                        = 5,
	VI                                       = 6,
	VII                                      = 7,
	VIII                                     = 8,
	IX                                       = 9,
	X                                        = 10,
	NumItemTierValues                        = 11,
	EFortItemTier_MAX                        = 12,
};

// Enum FortniteGame.EFortQuality
// NumValues: 0x0005
enum class EFortQuality : uint8
{
	Common                                   = 0,
	Uncommon                                 = 1,
	Rare                                     = 2,
	NumQualityValues                         = 3,
	EFortQuality_MAX                         = 4,
};

// Enum FortniteGame.EFortRarity
// NumValues: 0x000C
enum class EFortRarity : uint8
{
	Handmade                                 = 0,
	Ordinary                                 = 1,
	Sturdy                                   = 2,
	Quality                                  = 3,
	Fine                                     = 4,
	Elegant                                  = 5,
	Masterwork                               = 6,
	Epic                                     = 7,
	Badass                                   = 8,
	Legendary                                = 9,
	NumRarityValues                          = 10,
	EFortRarity_MAX                          = 11,
};

// Enum FortniteGame.EFortTargetSelectionFilter
// NumValues: 0x000C
enum class EFortTargetSelectionFilter : uint8
{
	Damageable                               = 0,
	Everything                               = 1,
	Pawns                                    = 2,
	Buildings                                = 3,
	Walls                                    = 4,
	Traps                                    = 5,
	Players                                  = 6,
	AIPawns                                  = 7,
	Instigator                               = 8,
	WeakSpots                                = 9,
	World                                    = 10,
	Max                                      = 11,
};

// Enum FortniteGame.EFortTargetSelectionTestType
// NumValues: 0x0004
enum class EFortTargetSelectionTestType : uint8
{
	Overlap                                  = 0,
	Swept                                    = 1,
	Ballistic                                = 2,
	EFortTargetSelectionTestType_MAX         = 3,
};

// Enum FortniteGame.EFortTargetSelectionShape
// NumValues: 0x0007
enum class EFortTargetSelectionShape : uint8
{
	Sphere                                   = 0,
	Cone                                     = 1,
	Box                                      = 2,
	Capsule                                  = 3,
	Line                                     = 4,
	Custom                                   = 5,
	EFortTargetSelectionShape_MAX            = 6,
};

// Enum FortniteGame.EFortBrushSize
// NumValues: 0x0007
enum class EFortBrushSize : uint8
{
	VeryVerySmall                            = 0,
	VerySmall                                = 1,
	Small                                    = 2,
	Medium                                   = 3,
	Large                                    = 4,
	VeryLarge                                = 5,
	EFortBrushSize_MAX                       = 6,
};

// Enum FortniteGame.EInventoryContentSortType
// NumValues: 0x000A
enum class EInventoryContentSortType : uint8
{
	ByName                                   = 0,
	ByRating                                 = 1,
	ByLevel                                  = 2,
	ByCategory                               = 3,
	ByRarity                                 = 4,
	ByLocation                               = 5,
	ByPersonality                            = 6,
	ByBonus                                  = 7,
	BySubtype                                = 8,
	EInventoryContentSortType_MAX            = 9,
};

// Enum FortniteGame.EFortFrontendInventoryFilter
// NumValues: 0x000C
enum class EFortFrontendInventoryFilter : uint8
{
	Schematics                               = 0,
	WorldItems                               = 1,
	WorldItemsInGame                         = 2,
	WorldItemsStorage                        = 3,
	WorldItemsTransfer                       = 4,
	ConsumablesAndAccountResources           = 5,
	Heroes                                   = 6,
	Defenders                                = 7,
	Survivors                                = 8,
	Invisible                                = 9,
	Max_None                                 = 10,
	EFortFrontendInventoryFilter_MAX         = 11,
};

// Enum FortniteGame.EFortInventoryFilter
// NumValues: 0x0013
enum class EFortInventoryFilter : uint8
{
	WeaponMelee                              = 0,
	WeaponRanged                             = 1,
	Ammo                                     = 2,
	Traps                                    = 3,
	Consumables                              = 4,
	Ingredients                              = 5,
	Gadget                                   = 6,
	Decorations                              = 7,
	Badges                                   = 8,
	Heroes                                   = 9,
	LeadSurvivors                            = 10,
	Survivors                                = 11,
	Defenders                                = 12,
	Resources                                = 13,
	ConversionControl                        = 14,
	AthenaCosmetics                          = 15,
	Invisible                                = 16,
	Max_None                                 = 17,
	EFortInventoryFilter_MAX                 = 18,
};

// Enum FortniteGame.EFortItemCategoryOrdinal
// NumValues: 0x0004
enum class EFortItemCategoryOrdinal : uint8
{
	Primary                                  = 0,
	Secondary                                = 1,
	Tertiary                                 = 2,
	EFortItemCategoryOrdinal_MAX             = 3,
};

// Enum FortniteGame.ESubGameMatchmakingStatus
// NumValues: 0x0003
enum class ESubGameMatchmakingStatus : uint8
{
	Disabled                                 = 0,
	Enabled                                  = 1,
	ESubGameMatchmakingStatus_MAX            = 2,
};

// Enum FortniteGame.ESubGameAccessStatus
// NumValues: 0x0004
enum class ESubGameAccessStatus : uint8
{
	Disabled                                 = 0,
	LimitedAccess                            = 1,
	OpenAccess                               = 2,
	ESubGameAccessStatus_MAX                 = 3,
};

// Enum FortniteGame.ESubGame
// NumValues: 0x0004
enum class ESubGame : uint8
{
	Campaign                                 = 0,
	Athena                                   = 1,
	Invalid                                  = 2,
	ESubGame_MAX                             = 3,
};

// Enum FortniteGame.EFortUIFriendNotificationType
// NumValues: 0x0004
enum class EFortUIFriendNotificationType : uint8
{
	Default                                  = 0,
	FriendRequest                            = 1,
	PartyInvite                              = 2,
	EFortUIFriendNotificationType_MAX        = 3,
};

// Enum FortniteGame.EFortNotificationPriority
// NumValues: 0x0006
enum class EFortNotificationPriority : uint8
{
	Friend                                   = 0,
	BoostedXP                                = 1,
	TwitchHigh                               = 2,
	GeneralSendNotification                  = 3,
	TwitchLow                                = 10,
	Max                                      = 11,
};

// Enum FortniteGame.EFortNotificationType
// NumValues: 0x0004
enum class EFortNotificationType : uint8
{
	Default                                  = 0,
	Power                                    = 1,
	HealthWarning                            = 2,
	Max                                      = 3,
};

// Enum FortniteGame.EFortContextualReticleTypes
// NumValues: 0x000A
enum class EFortContextualReticleTypes : uint8
{
	FCR_GenericFailure                       = 0,
	FCR_Upgrade                              = 1,
	FCR_Repair                               = 2,
	FCR_Locked                               = 3,
	FCR_Placement                            = 4,
	FCR_Edit                                 = 5,
	FCR_NoTarget                             = 6,
	FCR_InProgress                           = 7,
	FCR_None                                 = 8,
	FCR_MAX                                  = 9,
};

// Enum FortniteGame.EFortUserCloudRequestResult
// NumValues: 0x0006
enum class EFortUserCloudRequestResult : uint8
{
	Success                                  = 0,
	Failure_CloudStorageDisabled             = 1,
	Failure_CloudStorageError                = 2,
	Failure_FileNotFoundInUserFileList       = 3,
	Failure_SavingNotAllowedForSpecifiedUser = 4,
	EFortUserCloudRequestResult_MAX          = 5,
};

// Enum FortniteGame.EFortUserCloudRequestType
// NumValues: 0x0003
enum class EFortUserCloudRequestType : uint8
{
	LoadCloudFile                            = 0,
	SaveCloudFile                            = 1,
	EFortUserCloudRequestType_MAX            = 2,
};

// Enum FortniteGame.EFortVisibilityBehavior
// NumValues: 0x0005
enum class EFortVisibilityBehavior : uint8
{
	Proximity                                = 0,
	OnceSeenAlwaysSeen                       = 1,
	AlwaysSeen                               = 2,
	Invalid                                  = 3,
	EFortVisibilityBehavior_MAX              = 4,
};

// Enum FortniteGame.EFortReloadMontageSection
// NumValues: 0x0004
enum class EFortReloadMontageSection : uint8
{
	Intro                                    = 0,
	Loop                                     = 1,
	Outro                                    = 2,
	EFortReloadMontageSection_MAX            = 3,
};

// Enum FortniteGame.EFortDisplayTier
// NumValues: 0x000C
enum class EFortDisplayTier : uint8
{
	Invalid                                  = 0,
	Handmade                                 = 1,
	Copper                                   = 2,
	Silver                                   = 3,
	Malachite                                = 4,
	Obsidian                                 = 5,
	Brightcore                               = 6,
	Spectrolite                              = 7,
	Shadowshard                              = 8,
	Sunbeam                                  = 9,
	Moonglow                                 = 10,
	EFortDisplayTier_MAX                     = 11,
};

// Enum FortniteGame.EFortWorldManagerState
// NumValues: 0x0008
enum class EFortWorldManagerState : uint8
{
	WMS_Created                              = 0,
	WMS_QueryingWorld                        = 1,
	WMS_WorldQueryComplete                   = 2,
	WMS_CreatingNewWorld                     = 3,
	WMS_LoadingExistingWorld                 = 4,
	WMS_Running                              = 5,
	WMS_Failed                               = 6,
	WMS_MAX                                  = 7,
};

// Enum FortniteGame.EFortLevelStreamingState
// NumValues: 0x0008
enum class EFortLevelStreamingState : uint8
{
	LSS_Unloaded                             = 0,
	LSS_Loaded                               = 1,
	LSS_UnconditionalFoundationsUpdated      = 2,
	LSS_AllFoundationsUpdated                = 3,
	LSS_NewActorsCreatedButNotUpdated        = 4,
	LSS_AllUpdated                           = 5,
	LSS_Ready                                = 6,
	LSS_MAX                                  = 7,
};

// Enum FortniteGame.EFortQueuedActionUserStatus
// NumValues: 0x0005
enum class EFortQueuedActionUserStatus : uint8
{
	Succeeded                                = 0,
	Failed                                   = 1,
	WaitingForCloudRequest                   = 2,
	WaitingForProfileSave                    = 3,
	EFortQueuedActionUserStatus_MAX          = 4,
};

// Enum FortniteGame.EFortWorldRecordState
// NumValues: 0x000D
enum class EFortWorldRecordState : uint8
{
	StartProcessing                          = 0,
	WaitingForResponse                       = 1,
	RetrievingTheaterInformation             = 2,
	RetrievingZoneInformation                = 3,
	LoadingWorldRecord                       = 4,
	LoadingZoneRecord                        = 5,
	SavingZoneRecord                         = 6,
	SavingPlayerProfiles                     = 7,
	SavingPlayerDeployableBases              = 8,
	Succeeded                                = 9,
	Failed                                   = 10,
	Max_None                                 = 11,
	EFortWorldRecordState_MAX                = 12,
};

// Enum FortniteGame.EFortWorldRecordAction
// NumValues: 0x0007
enum class EFortWorldRecordAction : uint8
{
	LoadWorldOnly                            = 0,
	SaveWorldOnly                            = 1,
	SaveZoneAndWorld                         = 2,
	LoadZoneAndWorld                         = 3,
	SaveDeployableBasesAndWorld              = 4,
	Max_None                                 = 5,
	EFortWorldRecordAction_MAX               = 6,
};

// Enum FortniteGame.EDeployableBaseUseType
// NumValues: 0x0003
enum class EDeployableBaseUseType : uint8
{
	Neighborhood                             = 0,
	PvECombat                                = 1,
	EDeployableBaseUseType_MAX               = 2,
};

// Enum FortniteGame.EFortZoneType
// NumValues: 0x0006
enum class EFortZoneType : uint8
{
	PVE                                      = 0,
	PVP                                      = 1,
	Keep                                     = 2,
	SingleZone                               = 3,
	Max_None                                 = 4,
	EFortZoneType_MAX                        = 5,
};

// Enum FortniteGame.EFrontEndCamera
// NumValues: 0x0014
enum class EFrontEndCamera : uint8
{
	Invalid                                  = 0,
	HomeBase                                 = 1,
	MissionControl                           = 2,
	Store                                    = 3,
	Vault                                    = 4,
	SkillTrees                               = 5,
	Heroes                                   = 6,
	Login                                    = 7,
	TutorialPhaseOne                         = 8,
	TutorialPhaseTwo                         = 9,
	TutorialPhaseThree                       = 10,
	HeroSelect                               = 11,
	Party                                    = 12,
	WorldMap                                 = 13,
	Home                                     = 14,
	StoreItemInspect                         = 15,
	Cosmetics                                = 16,
	SmallCosmetics                           = 17,
	SpecialEvent                             = 18,
	EFrontEndCamera_MAX                      = 19,
};

// Enum FortniteGame.EFortEncounterSpawnLimitType
// NumValues: 0x0005
enum class EFortEncounterSpawnLimitType : uint8
{
	NoLimit                                  = 0,
	NumPawnsLimit                            = 1,
	SpawnPointLimit                          = 2,
	UserDefined                              = 3,
	MAX                                      = 4,
};

// Enum FortniteGame.EFortEncounterUtilitiesMode
// NumValues: 0x0003
enum class EFortEncounterUtilitiesMode : uint8
{
	LockedOnly                               = 0,
	LockedAndFree                            = 1,
	EFortEncounterUtilitiesMode_MAX          = 2,
};

// Enum FortniteGame.EFortEncounterSpawnLocationPlacementMode
// NumValues: 0x0006
enum class EFortEncounterSpawnLocationPlacementMode : uint8
{
	Directional                              = 0,
	Ring                                     = 1,
	Volume                                   = 2,
	Custom                                   = 3,
	Max_None                                 = 4,
	EFortEncounterSpawnLocationPlacementMode_MAX = 5,
};

// Enum FortniteGame.EFortEncounterPacingMode
// NumValues: 0x0004
enum class EFortEncounterPacingMode : uint8
{
	SpawnPointsPercentageCurve               = 0,
	IntensityCurve                           = 1,
	Burst                                    = 2,
	EFortEncounterPacingMode_MAX             = 3,
};

// Enum FortniteGame.EFortMissionAudibility
// NumValues: 0x0004
enum class EFortMissionAudibility : uint8
{
	UseVisibility                            = 0,
	Audible                                  = 1,
	Inaudible                                = 2,
	EFortMissionAudibility_MAX               = 3,
};

// Enum FortniteGame.EFortMissionType
// NumValues: 0x0004
enum class EFortMissionType : uint8
{
	Primary                                  = 0,
	Secondary                                = 1,
	Max_None                                 = 2,
	EFortMissionType_MAX                     = 3,
};

// Enum FortniteGame.EFortObjectiveRequirement
// NumValues: 0x0004
enum class EFortObjectiveRequirement : uint8
{
	Optional                                 = 0,
	Required                                 = 1,
	RequiredButCanFail                       = 2,
	EFortObjectiveRequirement_MAX            = 3,
};

// Enum FortniteGame.EFortMissionStatus
// NumValues: 0x0008
enum class EFortMissionStatus : uint8
{
	Created                                  = 0,
	InProgress                               = 1,
	Succeeded                                = 2,
	Failed                                   = 3,
	NeutralCompletion                        = 4,
	Quit                                     = 5,
	Max_None                                 = 6,
	EFortMissionStatus_MAX                   = 7,
};

// Enum FortniteGame.EMissionGenerationCategory
// NumValues: 0x0006
enum class EMissionGenerationCategory : uint8
{
	Primary                                  = 0,
	Secondary                                = 1,
	Tertiary                                 = 2,
	Survivor                                 = 3,
	Max_None                                 = 4,
	EMissionGenerationCategory_MAX           = 5,
};

// Enum FortniteGame.EStatRecordingPeriod
// NumValues: 0x0006
enum class EStatRecordingPeriod : uint8
{
	Minute                                   = 0,
	Life                                     = 1,
	Map                                      = 2,
	Campaign                                 = 3,
	Persistent                               = 4,
	Max                                      = 5,
};

// Enum FortniteGame.EStatMod
// NumValues: 0x0004
enum class EStatMod : uint8
{
	Delta                                    = 0,
	Set                                      = 1,
	Maximum                                  = 2,
	EStatMod_MAX                             = 3,
};

// Enum FortniteGame.EFortStrategicBuildingLevelCriteriaDisplayRepresentation
// NumValues: 0x0003
enum class EFortStrategicBuildingLevelCriteriaDisplayRepresentation : uint8
{
	Integer                                  = 0,
	Float                                    = 1,
	EFortStrategicBuildingLevelCriteriaDisplayRepresentation_MAX = 2,
};

// Enum FortniteGame.EFortStrategicBuildingCategory
// NumValues: 0x0004
enum class EFortStrategicBuildingCategory : uint8
{
	Defensive                                = 0,
	Offensive                                = 1,
	Utility                                  = 2,
	EFortStrategicBuildingCategory_MAX       = 3,
};

// Enum FortniteGame.EFortThreatDeactivationType
// NumValues: 0x0003
enum class EFortThreatDeactivationType : uint8
{
	Off                                      = 0,
	Dormant                                  = 1,
	EFortThreatDeactivationType_MAX          = 2,
};

// ScriptStruct FortniteGame.GoalSelectionCriteria
// 0x0008 (0x0008 - 0x0000)
struct FGoalSelectionCriteria final
{
public:
	class UEnvQuery*                              GoalSelectionQuery;                                // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGoalSelectionCriteria) == 0x000008, "Wrong alignment on FGoalSelectionCriteria");
static_assert(sizeof(FGoalSelectionCriteria) == 0x000008, "Wrong size on FGoalSelectionCriteria");
static_assert(offsetof(FGoalSelectionCriteria, GoalSelectionQuery) == 0x000000, "Member 'FGoalSelectionCriteria::GoalSelectionQuery' has a wrong offset!");

// ScriptStruct FortniteGame.PawnGoalSelectionCriteria
// 0x0050 (0x0050 - 0x0000)
struct FPawnGoalSelectionCriteria final
{
public:
	struct FGameplayTagContainer                  IncludeEnemiesWithTags;                            // 0x0000(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ExcludeEnemiesWithTags;                            // 0x0020(0x0020)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FGoalSelectionCriteria>         GoalSelectionCriteria;                             // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPawnGoalSelectionCriteria) == 0x000008, "Wrong alignment on FPawnGoalSelectionCriteria");
static_assert(sizeof(FPawnGoalSelectionCriteria) == 0x000050, "Wrong size on FPawnGoalSelectionCriteria");
static_assert(offsetof(FPawnGoalSelectionCriteria, IncludeEnemiesWithTags) == 0x000000, "Member 'FPawnGoalSelectionCriteria::IncludeEnemiesWithTags' has a wrong offset!");
static_assert(offsetof(FPawnGoalSelectionCriteria, ExcludeEnemiesWithTags) == 0x000020, "Member 'FPawnGoalSelectionCriteria::ExcludeEnemiesWithTags' has a wrong offset!");
static_assert(offsetof(FPawnGoalSelectionCriteria, GoalSelectionCriteria) == 0x000040, "Member 'FPawnGoalSelectionCriteria::GoalSelectionCriteria' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaMatchXpMultiplierGroup
// 0x0008 (0x0008 - 0x0000)
struct FAthenaMatchXpMultiplierGroup final
{
public:
	EAthenaMatchXpMultiplierSource                Source;                                            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Amount;                                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaMatchXpMultiplierGroup) == 0x000004, "Wrong alignment on FAthenaMatchXpMultiplierGroup");
static_assert(sizeof(FAthenaMatchXpMultiplierGroup) == 0x000008, "Wrong size on FAthenaMatchXpMultiplierGroup");
static_assert(offsetof(FAthenaMatchXpMultiplierGroup, Source) == 0x000000, "Member 'FAthenaMatchXpMultiplierGroup::Source' has a wrong offset!");
static_assert(offsetof(FAthenaMatchXpMultiplierGroup, Amount) == 0x000004, "Member 'FAthenaMatchXpMultiplierGroup::Amount' has a wrong offset!");

// ScriptStruct FortniteGame.FortEffectDistanceQuality
// 0x0018 (0x0018 - 0x0000)
struct FFortEffectDistanceQuality final
{
public:
	float                                         MinDistanceCinematic;                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDistanceEpic;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDistanceHigh;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDistanceMedium;                                 // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDistanceLow;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAllowCinematic : 1;                               // 0x0014(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAllowEpic : 1;                                    // 0x0014(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAllowHigh : 1;                                    // 0x0014(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAllowMedium : 1;                                  // 0x0014(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAllowLow : 1;                                     // 0x0014(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortEffectDistanceQuality) == 0x000004, "Wrong alignment on FFortEffectDistanceQuality");
static_assert(sizeof(FFortEffectDistanceQuality) == 0x000018, "Wrong size on FFortEffectDistanceQuality");
static_assert(offsetof(FFortEffectDistanceQuality, MinDistanceCinematic) == 0x000000, "Member 'FFortEffectDistanceQuality::MinDistanceCinematic' has a wrong offset!");
static_assert(offsetof(FFortEffectDistanceQuality, MinDistanceEpic) == 0x000004, "Member 'FFortEffectDistanceQuality::MinDistanceEpic' has a wrong offset!");
static_assert(offsetof(FFortEffectDistanceQuality, MinDistanceHigh) == 0x000008, "Member 'FFortEffectDistanceQuality::MinDistanceHigh' has a wrong offset!");
static_assert(offsetof(FFortEffectDistanceQuality, MinDistanceMedium) == 0x00000C, "Member 'FFortEffectDistanceQuality::MinDistanceMedium' has a wrong offset!");
static_assert(offsetof(FFortEffectDistanceQuality, MinDistanceLow) == 0x000010, "Member 'FFortEffectDistanceQuality::MinDistanceLow' has a wrong offset!");

// ScriptStruct FortniteGame.ProjectileEventData
// 0x0028 (0x0028 - 0x0000)
struct FProjectileEventData final
{
public:
	class AFortProjectileBase*                    SpawnedProjectile;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHitResult>                     Hits;                                              // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ExplodedActors;                                    // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProjectileEventData) == 0x000008, "Wrong alignment on FProjectileEventData");
static_assert(sizeof(FProjectileEventData) == 0x000028, "Wrong size on FProjectileEventData");
static_assert(offsetof(FProjectileEventData, SpawnedProjectile) == 0x000000, "Member 'FProjectileEventData::SpawnedProjectile' has a wrong offset!");
static_assert(offsetof(FProjectileEventData, Hits) == 0x000008, "Member 'FProjectileEventData::Hits' has a wrong offset!");
static_assert(offsetof(FProjectileEventData, ExplodedActors) == 0x000018, "Member 'FProjectileEventData::ExplodedActors' has a wrong offset!");

// ScriptStruct FortniteGame.FortSpawnPointsPercentageCurve
// 0x0018 (0x0020 - 0x0008)
struct FFortSpawnPointsPercentageCurve final : public FTableRowBase
{
public:
	class UCurveTable*                            SpawnPointsPercentageCurveTable;                   // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   SpawnPointsPercentageCurveTableRow;                // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxRampTime;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortSpawnPointsPercentageCurve) == 0x000008, "Wrong alignment on FFortSpawnPointsPercentageCurve");
static_assert(sizeof(FFortSpawnPointsPercentageCurve) == 0x000020, "Wrong size on FFortSpawnPointsPercentageCurve");
static_assert(offsetof(FFortSpawnPointsPercentageCurve, SpawnPointsPercentageCurveTable) == 0x000008, "Member 'FFortSpawnPointsPercentageCurve::SpawnPointsPercentageCurveTable' has a wrong offset!");
static_assert(offsetof(FFortSpawnPointsPercentageCurve, SpawnPointsPercentageCurveTableRow) == 0x000010, "Member 'FFortSpawnPointsPercentageCurve::SpawnPointsPercentageCurveTableRow' has a wrong offset!");
static_assert(offsetof(FFortSpawnPointsPercentageCurve, MaxRampTime) == 0x000018, "Member 'FFortSpawnPointsPercentageCurve::MaxRampTime' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIEncounterPawnDifficultyLevelModifier
// 0x0058 (0x0058 - 0x0000)
struct FFortAIEncounterPawnDifficultyLevelModifier final
{
public:
	struct FGameplayTagQuery                      EncounterTagRequirementsQuery;                     // 0x0000(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   DifficultyLevelModifierCurve;                      // 0x0048(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIEncounterPawnDifficultyLevelModifier) == 0x000008, "Wrong alignment on FFortAIEncounterPawnDifficultyLevelModifier");
static_assert(sizeof(FFortAIEncounterPawnDifficultyLevelModifier) == 0x000058, "Wrong size on FFortAIEncounterPawnDifficultyLevelModifier");
static_assert(offsetof(FFortAIEncounterPawnDifficultyLevelModifier, EncounterTagRequirementsQuery) == 0x000000, "Member 'FFortAIEncounterPawnDifficultyLevelModifier::EncounterTagRequirementsQuery' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterPawnDifficultyLevelModifier, DifficultyLevelModifierCurve) == 0x000048, "Member 'FFortAIEncounterPawnDifficultyLevelModifier::DifficultyLevelModifierCurve' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaRewardItemReference
// 0x0040 (0x0040 - 0x0000)
struct FAthenaRewardItemReference final
{
public:
	TSoftObjectPtr<class UFortItemDefinition>     ItemDefinition;                                    // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TemplateId;                                        // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsChaseReward;                                     // 0x003C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAthenaRewardItemReference) == 0x000008, "Wrong alignment on FAthenaRewardItemReference");
static_assert(sizeof(FAthenaRewardItemReference) == 0x000040, "Wrong size on FAthenaRewardItemReference");
static_assert(offsetof(FAthenaRewardItemReference, ItemDefinition) == 0x000000, "Member 'FAthenaRewardItemReference::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FAthenaRewardItemReference, TemplateId) == 0x000028, "Member 'FAthenaRewardItemReference::TemplateId' has a wrong offset!");
static_assert(offsetof(FAthenaRewardItemReference, Quantity) == 0x000038, "Member 'FAthenaRewardItemReference::Quantity' has a wrong offset!");
static_assert(offsetof(FAthenaRewardItemReference, IsChaseReward) == 0x00003C, "Member 'FAthenaRewardItemReference::IsChaseReward' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaSeasonRewardLevelInfo
// 0x0020 (0x0020 - 0x0000)
struct FAthenaSeasonRewardLevelInfo final
{
public:
	EAthenaSeasonRewardTrack                      Track;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XpToNextLevel;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAthenaRewardItemReference>     Rewards;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaSeasonRewardLevelInfo) == 0x000008, "Wrong alignment on FAthenaSeasonRewardLevelInfo");
static_assert(sizeof(FAthenaSeasonRewardLevelInfo) == 0x000020, "Wrong size on FAthenaSeasonRewardLevelInfo");
static_assert(offsetof(FAthenaSeasonRewardLevelInfo, Track) == 0x000000, "Member 'FAthenaSeasonRewardLevelInfo::Track' has a wrong offset!");
static_assert(offsetof(FAthenaSeasonRewardLevelInfo, Level) == 0x000004, "Member 'FAthenaSeasonRewardLevelInfo::Level' has a wrong offset!");
static_assert(offsetof(FAthenaSeasonRewardLevelInfo, XpToNextLevel) == 0x000008, "Member 'FAthenaSeasonRewardLevelInfo::XpToNextLevel' has a wrong offset!");
static_assert(offsetof(FAthenaSeasonRewardLevelInfo, Rewards) == 0x000010, "Member 'FAthenaSeasonRewardLevelInfo::Rewards' has a wrong offset!");

// ScriptStruct FortniteGame.GameSummaryInfo
// 0x0018 (0x0018 - 0x0000)
struct FGameSummaryInfo final
{
public:
	class FString                                 GameSessionID;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Completed;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameSummaryInfo) == 0x000008, "Wrong alignment on FGameSummaryInfo");
static_assert(sizeof(FGameSummaryInfo) == 0x000018, "Wrong size on FGameSummaryInfo");
static_assert(offsetof(FGameSummaryInfo, GameSessionID) == 0x000000, "Member 'FGameSummaryInfo::GameSessionID' has a wrong offset!");
static_assert(offsetof(FGameSummaryInfo, Completed) == 0x000010, "Member 'FGameSummaryInfo::Completed' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaLevelInfo
// 0x0024 (0x0024 - 0x0000)
struct FAthenaLevelInfo final
{
public:
	int32                                         AccountLevel;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLevel;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelXp;                                           // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelXpForLevel;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BookLevel;                                         // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BookMaxLevel;                                      // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BookLevelXp;                                       // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BookLevelXpForLevel;                               // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaLevelInfo) == 0x000004, "Wrong alignment on FAthenaLevelInfo");
static_assert(sizeof(FAthenaLevelInfo) == 0x000024, "Wrong size on FAthenaLevelInfo");
static_assert(offsetof(FAthenaLevelInfo, AccountLevel) == 0x000000, "Member 'FAthenaLevelInfo::AccountLevel' has a wrong offset!");
static_assert(offsetof(FAthenaLevelInfo, Level) == 0x000004, "Member 'FAthenaLevelInfo::Level' has a wrong offset!");
static_assert(offsetof(FAthenaLevelInfo, MaxLevel) == 0x000008, "Member 'FAthenaLevelInfo::MaxLevel' has a wrong offset!");
static_assert(offsetof(FAthenaLevelInfo, LevelXp) == 0x00000C, "Member 'FAthenaLevelInfo::LevelXp' has a wrong offset!");
static_assert(offsetof(FAthenaLevelInfo, LevelXpForLevel) == 0x000010, "Member 'FAthenaLevelInfo::LevelXpForLevel' has a wrong offset!");
static_assert(offsetof(FAthenaLevelInfo, BookLevel) == 0x000014, "Member 'FAthenaLevelInfo::BookLevel' has a wrong offset!");
static_assert(offsetof(FAthenaLevelInfo, BookMaxLevel) == 0x000018, "Member 'FAthenaLevelInfo::BookMaxLevel' has a wrong offset!");
static_assert(offsetof(FAthenaLevelInfo, BookLevelXp) == 0x00001C, "Member 'FAthenaLevelInfo::BookLevelXp' has a wrong offset!");
static_assert(offsetof(FAthenaLevelInfo, BookLevelXpForLevel) == 0x000020, "Member 'FAthenaLevelInfo::BookLevelXpForLevel' has a wrong offset!");

// ScriptStruct FortniteGame.FortPublicAccountInfo
// 0x0034 (0x0034 - 0x0000)
struct FFortPublicAccountInfo
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLevel;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelXp;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelXpForLevel;                                   // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAthenaLevelInfo                       BattleRoyaleLevel;                                 // 0x0010(0x0024)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPublicAccountInfo) == 0x000004, "Wrong alignment on FFortPublicAccountInfo");
static_assert(sizeof(FFortPublicAccountInfo) == 0x000034, "Wrong size on FFortPublicAccountInfo");
static_assert(offsetof(FFortPublicAccountInfo, Level) == 0x000000, "Member 'FFortPublicAccountInfo::Level' has a wrong offset!");
static_assert(offsetof(FFortPublicAccountInfo, MaxLevel) == 0x000004, "Member 'FFortPublicAccountInfo::MaxLevel' has a wrong offset!");
static_assert(offsetof(FFortPublicAccountInfo, LevelXp) == 0x000008, "Member 'FFortPublicAccountInfo::LevelXp' has a wrong offset!");
static_assert(offsetof(FFortPublicAccountInfo, LevelXpForLevel) == 0x00000C, "Member 'FFortPublicAccountInfo::LevelXpForLevel' has a wrong offset!");
static_assert(offsetof(FFortPublicAccountInfo, BattleRoyaleLevel) == 0x000010, "Member 'FFortPublicAccountInfo::BattleRoyaleLevel' has a wrong offset!");

// ScriptStruct FortniteGame.FortPrivateAccountInfo
// 0x0004 (0x0038 - 0x0034)
struct FFortPrivateAccountInfo final : public FFortPublicAccountInfo
{
public:
	int32                                         MtxBalance;                                        // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPrivateAccountInfo) == 0x000004, "Wrong alignment on FFortPrivateAccountInfo");
static_assert(sizeof(FFortPrivateAccountInfo) == 0x000038, "Wrong size on FFortPrivateAccountInfo");
static_assert(offsetof(FFortPrivateAccountInfo, MtxBalance) == 0x000034, "Member 'FFortPrivateAccountInfo::MtxBalance' has a wrong offset!");

// ScriptStruct FortniteGame.EarnedBadgePlayerData
// 0x0030 (0x0030 - 0x0000)
struct FEarnedBadgePlayerData final
{
public:
	struct FUniqueNetIdRepl                       PlayerID;                                          // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEarnedBadgePlayerData) == 0x000008, "Wrong alignment on FEarnedBadgePlayerData");
static_assert(sizeof(FEarnedBadgePlayerData) == 0x000030, "Wrong size on FEarnedBadgePlayerData");
static_assert(offsetof(FEarnedBadgePlayerData, PlayerID) == 0x000000, "Member 'FEarnedBadgePlayerData::PlayerID' has a wrong offset!");
static_assert(offsetof(FEarnedBadgePlayerData, Count) == 0x000028, "Member 'FEarnedBadgePlayerData::Count' has a wrong offset!");

// ScriptStruct FortniteGame.EarnedBadgeEntry
// 0x0024 (0x0030 - 0x000C)
struct FEarnedBadgeEntry final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortBadgeItemDefinition*               Badge;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEarnedBadgePlayerData>         PlayerData;                                        // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	EFortRewardType                               RewardType;                                        // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEarnedBadgeEntry) == 0x000008, "Wrong alignment on FEarnedBadgeEntry");
static_assert(sizeof(FEarnedBadgeEntry) == 0x000030, "Wrong size on FEarnedBadgeEntry");
static_assert(offsetof(FEarnedBadgeEntry, Badge) == 0x000010, "Member 'FEarnedBadgeEntry::Badge' has a wrong offset!");
static_assert(offsetof(FEarnedBadgeEntry, PlayerData) == 0x000018, "Member 'FEarnedBadgeEntry::PlayerData' has a wrong offset!");
static_assert(offsetof(FEarnedBadgeEntry, RewardType) == 0x000028, "Member 'FEarnedBadgeEntry::RewardType' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaSeasonalXPCurveEntry
// 0x0010 (0x0018 - 0x0008)
struct FAthenaSeasonalXPCurveEntry final : public FTableRowBase
{
public:
	int32                                         Level;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XpToNextLevel;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XpTotal;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAthenaSeasonalXPCurveEntry) == 0x000008, "Wrong alignment on FAthenaSeasonalXPCurveEntry");
static_assert(sizeof(FAthenaSeasonalXPCurveEntry) == 0x000018, "Wrong size on FAthenaSeasonalXPCurveEntry");
static_assert(offsetof(FAthenaSeasonalXPCurveEntry, Level) == 0x000008, "Member 'FAthenaSeasonalXPCurveEntry::Level' has a wrong offset!");
static_assert(offsetof(FAthenaSeasonalXPCurveEntry, XpToNextLevel) == 0x00000C, "Member 'FAthenaSeasonalXPCurveEntry::XpToNextLevel' has a wrong offset!");
static_assert(offsetof(FAthenaSeasonalXPCurveEntry, XpTotal) == 0x000010, "Member 'FAthenaSeasonalXPCurveEntry::XpTotal' has a wrong offset!");

// ScriptStruct FortniteGame.OutpostPrestigeEffects
// 0x0010 (0x0010 - 0x0000)
struct FOutpostPrestigeEffects final
{
public:
	TArray<TSubclassOf<class UGameplayEffect>>    EnemyPrestigeEffect;                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOutpostPrestigeEffects) == 0x000008, "Wrong alignment on FOutpostPrestigeEffects");
static_assert(sizeof(FOutpostPrestigeEffects) == 0x000010, "Wrong size on FOutpostPrestigeEffects");
static_assert(offsetof(FOutpostPrestigeEffects, EnemyPrestigeEffect) == 0x000000, "Member 'FOutpostPrestigeEffects::EnemyPrestigeEffect' has a wrong offset!");

// ScriptStruct FortniteGame.OutpostPrestigeEffectsPerTheater
// 0x0018 (0x0018 - 0x0000)
struct FOutpostPrestigeEffectsPerTheater final
{
public:
	int32                                         TheaterSlot;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FOutpostPrestigeEffects                PrestigeEffects;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOutpostPrestigeEffectsPerTheater) == 0x000008, "Wrong alignment on FOutpostPrestigeEffectsPerTheater");
static_assert(sizeof(FOutpostPrestigeEffectsPerTheater) == 0x000018, "Wrong size on FOutpostPrestigeEffectsPerTheater");
static_assert(offsetof(FOutpostPrestigeEffectsPerTheater, TheaterSlot) == 0x000000, "Member 'FOutpostPrestigeEffectsPerTheater::TheaterSlot' has a wrong offset!");
static_assert(offsetof(FOutpostPrestigeEffectsPerTheater, PrestigeEffects) == 0x000008, "Member 'FOutpostPrestigeEffectsPerTheater::PrestigeEffects' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIDirectorEvent
// 0x0020 (0x0020 - 0x0000)
struct FFortAIDirectorEvent final
{
public:
	EFortAIDirectorEvent                          Event;                                             // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                EventSource;                                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                EventTarget;                                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EventValue;                                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAIDirectorEvent) == 0x000008, "Wrong alignment on FFortAIDirectorEvent");
static_assert(sizeof(FFortAIDirectorEvent) == 0x000020, "Wrong size on FFortAIDirectorEvent");
static_assert(offsetof(FFortAIDirectorEvent, Event) == 0x000000, "Member 'FFortAIDirectorEvent::Event' has a wrong offset!");
static_assert(offsetof(FFortAIDirectorEvent, EventSource) == 0x000008, "Member 'FFortAIDirectorEvent::EventSource' has a wrong offset!");
static_assert(offsetof(FFortAIDirectorEvent, EventTarget) == 0x000010, "Member 'FFortAIDirectorEvent::EventTarget' has a wrong offset!");
static_assert(offsetof(FFortAIDirectorEvent, EventValue) == 0x000018, "Member 'FFortAIDirectorEvent::EventValue' has a wrong offset!");

// ScriptStruct FortniteGame.FortTierProgressionInfo
// 0x0018 (0x0018 - 0x0000)
struct FFortTierProgressionInfo final
{
public:
	class FString                                 ProgressionLayoutGuid;                             // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HighestDefeatedTier;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortTierProgressionInfo) == 0x000008, "Wrong alignment on FFortTierProgressionInfo");
static_assert(sizeof(FFortTierProgressionInfo) == 0x000018, "Wrong size on FFortTierProgressionInfo");
static_assert(offsetof(FFortTierProgressionInfo, ProgressionLayoutGuid) == 0x000000, "Member 'FFortTierProgressionInfo::ProgressionLayoutGuid' has a wrong offset!");
static_assert(offsetof(FFortTierProgressionInfo, HighestDefeatedTier) == 0x000010, "Member 'FFortTierProgressionInfo::HighestDefeatedTier' has a wrong offset!");

// ScriptStruct FortniteGame.FortTierProgression
// 0x0010 (0x0010 - 0x0000)
struct FFortTierProgression final
{
public:
	TArray<struct FFortTierProgressionInfo>       ProgressionInfo;                                   // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTierProgression) == 0x000008, "Wrong alignment on FFortTierProgression");
static_assert(sizeof(FFortTierProgression) == 0x000010, "Wrong size on FFortTierProgression");
static_assert(offsetof(FFortTierProgression, ProgressionInfo) == 0x000000, "Member 'FFortTierProgression::ProgressionInfo' has a wrong offset!");

// ScriptStruct FortniteGame.CachedPlayerFOBInformation
// 0x0030 (0x0030 - 0x0000)
struct FCachedPlayerFOBInformation final
{
public:
	struct FUniqueNetIdRepl                       PlayerID;                                          // 0x0000(0x0028)(Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortTeam                                     Team;                                              // 0x0028(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCachedPlayerFOBInformation) == 0x000008, "Wrong alignment on FCachedPlayerFOBInformation");
static_assert(sizeof(FCachedPlayerFOBInformation) == 0x000030, "Wrong size on FCachedPlayerFOBInformation");
static_assert(offsetof(FCachedPlayerFOBInformation, PlayerID) == 0x000000, "Member 'FCachedPlayerFOBInformation::PlayerID' has a wrong offset!");
static_assert(offsetof(FCachedPlayerFOBInformation, Team) == 0x000028, "Member 'FCachedPlayerFOBInformation::Team' has a wrong offset!");

// ScriptStruct FortniteGame.MtxPackage
// 0x00A0 (0x00A0 - 0x0000)
struct FMtxPackage final
{
public:
	class FString                                 StorefrontName;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OfferId;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         TotalAmount;                                       // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BonusAmount;                                       // 0x0054(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Price;                                             // 0x0058(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_70[0x8];                                       // 0x0070(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   SaleBasePrice;                                     // 0x0078(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 DisplayAssetPath;                                  // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMtxPackage) == 0x000008, "Wrong alignment on FMtxPackage");
static_assert(sizeof(FMtxPackage) == 0x0000A0, "Wrong size on FMtxPackage");
static_assert(offsetof(FMtxPackage, StorefrontName) == 0x000000, "Member 'FMtxPackage::StorefrontName' has a wrong offset!");
static_assert(offsetof(FMtxPackage, OfferId) == 0x000010, "Member 'FMtxPackage::OfferId' has a wrong offset!");
static_assert(offsetof(FMtxPackage, Title) == 0x000020, "Member 'FMtxPackage::Title' has a wrong offset!");
static_assert(offsetof(FMtxPackage, Description) == 0x000038, "Member 'FMtxPackage::Description' has a wrong offset!");
static_assert(offsetof(FMtxPackage, TotalAmount) == 0x000050, "Member 'FMtxPackage::TotalAmount' has a wrong offset!");
static_assert(offsetof(FMtxPackage, BonusAmount) == 0x000054, "Member 'FMtxPackage::BonusAmount' has a wrong offset!");
static_assert(offsetof(FMtxPackage, Price) == 0x000058, "Member 'FMtxPackage::Price' has a wrong offset!");
static_assert(offsetof(FMtxPackage, SaleBasePrice) == 0x000078, "Member 'FMtxPackage::SaleBasePrice' has a wrong offset!");
static_assert(offsetof(FMtxPackage, DisplayAssetPath) == 0x000090, "Member 'FMtxPackage::DisplayAssetPath' has a wrong offset!");

// ScriptStruct FortniteGame.EncounterEnvironmentQueryInfo
// 0x0028 (0x0028 - 0x0000)
struct FEncounterEnvironmentQueryInfo final
{
public:
	class UEnvQuery*                              EnvironmentQuery;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEnvNamedValue>                 QueryParams;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsDirectional;                                    // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEncounterEnvironmentQueryInfo) == 0x000008, "Wrong alignment on FEncounterEnvironmentQueryInfo");
static_assert(sizeof(FEncounterEnvironmentQueryInfo) == 0x000028, "Wrong size on FEncounterEnvironmentQueryInfo");
static_assert(offsetof(FEncounterEnvironmentQueryInfo, EnvironmentQuery) == 0x000000, "Member 'FEncounterEnvironmentQueryInfo::EnvironmentQuery' has a wrong offset!");
static_assert(offsetof(FEncounterEnvironmentQueryInfo, QueryParams) == 0x000008, "Member 'FEncounterEnvironmentQueryInfo::QueryParams' has a wrong offset!");
static_assert(offsetof(FEncounterEnvironmentQueryInfo, bIsDirectional) == 0x000020, "Member 'FEncounterEnvironmentQueryInfo::bIsDirectional' has a wrong offset!");

// ScriptStruct FortniteGame.EncounterEnvironmentQueryInstance
// 0x0048 (0x0048 - 0x0000)
struct FEncounterEnvironmentQueryInstance final
{
public:
	struct FEncounterEnvironmentQueryInfo         EnvironmentQueryInfo;                              // 0x0000(0x0028)(NativeAccessSpecifierPublic)
	int32                                         QueryID;                                           // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsWaitingForQueryResults;                         // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortEncounterDirection                       ChosenDirection;                                   // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        QueryLocations;                                    // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NumTimesUsed;                                      // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEncounterEnvironmentQueryInstance) == 0x000008, "Wrong alignment on FEncounterEnvironmentQueryInstance");
static_assert(sizeof(FEncounterEnvironmentQueryInstance) == 0x000048, "Wrong size on FEncounterEnvironmentQueryInstance");
static_assert(offsetof(FEncounterEnvironmentQueryInstance, EnvironmentQueryInfo) == 0x000000, "Member 'FEncounterEnvironmentQueryInstance::EnvironmentQueryInfo' has a wrong offset!");
static_assert(offsetof(FEncounterEnvironmentQueryInstance, QueryID) == 0x000028, "Member 'FEncounterEnvironmentQueryInstance::QueryID' has a wrong offset!");
static_assert(offsetof(FEncounterEnvironmentQueryInstance, bIsWaitingForQueryResults) == 0x00002C, "Member 'FEncounterEnvironmentQueryInstance::bIsWaitingForQueryResults' has a wrong offset!");
static_assert(offsetof(FEncounterEnvironmentQueryInstance, ChosenDirection) == 0x00002D, "Member 'FEncounterEnvironmentQueryInstance::ChosenDirection' has a wrong offset!");
static_assert(offsetof(FEncounterEnvironmentQueryInstance, QueryLocations) == 0x000030, "Member 'FEncounterEnvironmentQueryInstance::QueryLocations' has a wrong offset!");
static_assert(offsetof(FEncounterEnvironmentQueryInstance, NumTimesUsed) == 0x000040, "Member 'FEncounterEnvironmentQueryInstance::NumTimesUsed' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIEncounterRift
// 0x0018 (0x0018 - 0x0000)
struct FFortAIEncounterRift final
{
public:
	int32                                         QueryID;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RiftLocation;                                      // 0x0004(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABuildingRift*                          RiftActor;                                         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIEncounterRift) == 0x000008, "Wrong alignment on FFortAIEncounterRift");
static_assert(sizeof(FFortAIEncounterRift) == 0x000018, "Wrong size on FFortAIEncounterRift");
static_assert(offsetof(FFortAIEncounterRift, QueryID) == 0x000000, "Member 'FFortAIEncounterRift::QueryID' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterRift, RiftLocation) == 0x000004, "Member 'FFortAIEncounterRift::RiftLocation' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterRift, RiftActor) == 0x000010, "Member 'FFortAIEncounterRift::RiftActor' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIEncounterSpawnArea
// 0x0048 (0x0048 - 0x0000)
struct FFortAIEncounterSpawnArea final
{
public:
	TArray<struct FEncounterEnvironmentQueryInstance> QueryInstances;                                    // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortAIEncounterRift>           PendingRifts;                                      // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortAIEncounterRift>           Rifts;                                             // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UFortPathCostEstimator*>         PathEstimators;                                    // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIsActive;                                         // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsingFallbackQuery;                               // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAIEncounterSpawnArea) == 0x000008, "Wrong alignment on FFortAIEncounterSpawnArea");
static_assert(sizeof(FFortAIEncounterSpawnArea) == 0x000048, "Wrong size on FFortAIEncounterSpawnArea");
static_assert(offsetof(FFortAIEncounterSpawnArea, QueryInstances) == 0x000000, "Member 'FFortAIEncounterSpawnArea::QueryInstances' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnArea, PendingRifts) == 0x000010, "Member 'FFortAIEncounterSpawnArea::PendingRifts' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnArea, Rifts) == 0x000020, "Member 'FFortAIEncounterSpawnArea::Rifts' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnArea, PathEstimators) == 0x000030, "Member 'FFortAIEncounterSpawnArea::PathEstimators' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnArea, bIsActive) == 0x000040, "Member 'FFortAIEncounterSpawnArea::bIsActive' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnArea, bUsingFallbackQuery) == 0x000041, "Member 'FFortAIEncounterSpawnArea::bUsingFallbackQuery' has a wrong offset!");

// ScriptStruct FortniteGame.FortItemQuantityPair
// 0x0030 (0x0030 - 0x0000)
struct FFortItemQuantityPair final
{
public:
	TSoftObjectPtr<class UFortItemDefinition>     ItemDefinition;                                    // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemQuantityPair) == 0x000008, "Wrong alignment on FFortItemQuantityPair");
static_assert(sizeof(FFortItemQuantityPair) == 0x000030, "Wrong size on FFortItemQuantityPair");
static_assert(offsetof(FFortItemQuantityPair, ItemDefinition) == 0x000000, "Member 'FFortItemQuantityPair::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FFortItemQuantityPair, Quantity) == 0x000028, "Member 'FFortItemQuantityPair::Quantity' has a wrong offset!");

// ScriptStruct FortniteGame.FortSelectableRewardOption
// 0x0010 (0x0010 - 0x0000)
struct FFortSelectableRewardOption final
{
public:
	TArray<struct FFortItemQuantityPair>          Rewards;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortSelectableRewardOption) == 0x000008, "Wrong alignment on FFortSelectableRewardOption");
static_assert(sizeof(FFortSelectableRewardOption) == 0x000010, "Wrong size on FFortSelectableRewardOption");
static_assert(offsetof(FFortSelectableRewardOption, Rewards) == 0x000000, "Member 'FFortSelectableRewardOption::Rewards' has a wrong offset!");

// ScriptStruct FortniteGame.WindScalarMaterialInterpolationData
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FWindScalarMaterialInterpolationData final
{
public:
	class FName                                   MaterialParameterName;                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialParameterIndex;                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LerpFromValue;                                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LerpToValue;                                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWindScalarMaterialInterpolationData) == 0x000008, "Wrong alignment on FWindScalarMaterialInterpolationData");
static_assert(sizeof(FWindScalarMaterialInterpolationData) == 0x000018, "Wrong size on FWindScalarMaterialInterpolationData");
static_assert(offsetof(FWindScalarMaterialInterpolationData, MaterialParameterName) == 0x000000, "Member 'FWindScalarMaterialInterpolationData::MaterialParameterName' has a wrong offset!");
static_assert(offsetof(FWindScalarMaterialInterpolationData, MaterialParameterIndex) == 0x000008, "Member 'FWindScalarMaterialInterpolationData::MaterialParameterIndex' has a wrong offset!");
static_assert(offsetof(FWindScalarMaterialInterpolationData, LerpFromValue) == 0x00000C, "Member 'FWindScalarMaterialInterpolationData::LerpFromValue' has a wrong offset!");
static_assert(offsetof(FWindScalarMaterialInterpolationData, LerpToValue) == 0x000010, "Member 'FWindScalarMaterialInterpolationData::LerpToValue' has a wrong offset!");

// ScriptStruct FortniteGame.FortHomeBaseInfo
// 0x0040 (0x0040 - 0x0000)
struct FFortHomeBaseInfo final
{
public:
	class FString                                 BannerIconId;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BannerColorId;                                     // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          ValidData;                                         // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortHomeBaseInfo) == 0x000008, "Wrong alignment on FFortHomeBaseInfo");
static_assert(sizeof(FFortHomeBaseInfo) == 0x000040, "Wrong size on FFortHomeBaseInfo");
static_assert(offsetof(FFortHomeBaseInfo, BannerIconId) == 0x000000, "Member 'FFortHomeBaseInfo::BannerIconId' has a wrong offset!");
static_assert(offsetof(FFortHomeBaseInfo, BannerColorId) == 0x000010, "Member 'FFortHomeBaseInfo::BannerColorId' has a wrong offset!");
static_assert(offsetof(FFortHomeBaseInfo, Name) == 0x000020, "Member 'FFortHomeBaseInfo::Name' has a wrong offset!");
static_assert(offsetof(FFortHomeBaseInfo, ValidData) == 0x000038, "Member 'FFortHomeBaseInfo::ValidData' has a wrong offset!");

// ScriptStruct FortniteGame.LiveDamageNumberComponent
// 0x0018 (0x0018 - 0x0000)
struct FLiveDamageNumberComponent final
{
public:
	class UStaticMeshComponent*                   Component;                                         // 0x0000(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLiveDamageNumberComponent) == 0x000008, "Wrong alignment on FLiveDamageNumberComponent");
static_assert(sizeof(FLiveDamageNumberComponent) == 0x000018, "Wrong size on FLiveDamageNumberComponent");
static_assert(offsetof(FLiveDamageNumberComponent, Component) == 0x000000, "Member 'FLiveDamageNumberComponent::Component' has a wrong offset!");

// ScriptStruct FortniteGame.HomebaseSquadSlotId
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FHomebaseSquadSlotId final
{
public:
	class FName                                   SquadId;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SquadSlotIndex;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHomebaseSquadSlotId) == 0x000008, "Wrong alignment on FHomebaseSquadSlotId");
static_assert(sizeof(FHomebaseSquadSlotId) == 0x000010, "Wrong size on FHomebaseSquadSlotId");
static_assert(offsetof(FHomebaseSquadSlotId, SquadId) == 0x000000, "Member 'FHomebaseSquadSlotId::SquadId' has a wrong offset!");
static_assert(offsetof(FHomebaseSquadSlotId, SquadSlotIndex) == 0x000008, "Member 'FHomebaseSquadSlotId::SquadSlotIndex' has a wrong offset!");

// ScriptStruct FortniteGame.FortActorRecord
// 0x0070 (0x0070 - 0x0000)
struct FFortActorRecord final
{
public:
	struct FGuid                                  ActorGuid;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuildingPersistentState                  ActorState;                                        // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ABuildingActor>             ActorClass;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ActorTransform;                                    // 0x0020(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bSpawnedActor;                                     // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ActorData;                                         // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortActorRecord) == 0x000010, "Wrong alignment on FFortActorRecord");
static_assert(sizeof(FFortActorRecord) == 0x000070, "Wrong size on FFortActorRecord");
static_assert(offsetof(FFortActorRecord, ActorGuid) == 0x000000, "Member 'FFortActorRecord::ActorGuid' has a wrong offset!");
static_assert(offsetof(FFortActorRecord, ActorState) == 0x000010, "Member 'FFortActorRecord::ActorState' has a wrong offset!");
static_assert(offsetof(FFortActorRecord, ActorClass) == 0x000018, "Member 'FFortActorRecord::ActorClass' has a wrong offset!");
static_assert(offsetof(FFortActorRecord, ActorTransform) == 0x000020, "Member 'FFortActorRecord::ActorTransform' has a wrong offset!");
static_assert(offsetof(FFortActorRecord, bSpawnedActor) == 0x000050, "Member 'FFortActorRecord::bSpawnedActor' has a wrong offset!");
static_assert(offsetof(FFortActorRecord, ActorData) == 0x000058, "Member 'FFortActorRecord::ActorData' has a wrong offset!");

// ScriptStruct FortniteGame.FortBattlePassInfo
// 0x0014 (0x0014 - 0x0000)
struct FFortBattlePassInfo final
{
public:
	bool                                          bOwnsBattlePass;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BattlePassLevel;                                   // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelfMatchBoostXp;                                  // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FriendMatchBoostXp;                                // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValidData;                                        // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortBattlePassInfo) == 0x000004, "Wrong alignment on FFortBattlePassInfo");
static_assert(sizeof(FFortBattlePassInfo) == 0x000014, "Wrong size on FFortBattlePassInfo");
static_assert(offsetof(FFortBattlePassInfo, bOwnsBattlePass) == 0x000000, "Member 'FFortBattlePassInfo::bOwnsBattlePass' has a wrong offset!");
static_assert(offsetof(FFortBattlePassInfo, BattlePassLevel) == 0x000004, "Member 'FFortBattlePassInfo::BattlePassLevel' has a wrong offset!");
static_assert(offsetof(FFortBattlePassInfo, SelfMatchBoostXp) == 0x000008, "Member 'FFortBattlePassInfo::SelfMatchBoostXp' has a wrong offset!");
static_assert(offsetof(FFortBattlePassInfo, FriendMatchBoostXp) == 0x00000C, "Member 'FFortBattlePassInfo::FriendMatchBoostXp' has a wrong offset!");
static_assert(offsetof(FFortBattlePassInfo, bValidData) == 0x000010, "Member 'FFortBattlePassInfo::bValidData' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaRewardScheduleLevel
// 0x0010 (0x0010 - 0x0000)
struct FAthenaRewardScheduleLevel final
{
public:
	TArray<struct FAthenaRewardItemReference>     Rewards;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaRewardScheduleLevel) == 0x000008, "Wrong alignment on FAthenaRewardScheduleLevel");
static_assert(sizeof(FAthenaRewardScheduleLevel) == 0x000010, "Wrong size on FAthenaRewardScheduleLevel");
static_assert(offsetof(FAthenaRewardScheduleLevel, Rewards) == 0x000000, "Member 'FAthenaRewardScheduleLevel::Rewards' has a wrong offset!");

// ScriptStruct FortniteGame.FortExpeditionResultNotification
// 0x0018 (0x0018 - 0x0000)
struct FFortExpeditionResultNotification final
{
public:
	bool                                          bExpeditionSucceeded;                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMcpLootEntry>                  ExpeditionRewards;                                 // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortExpeditionResultNotification) == 0x000008, "Wrong alignment on FFortExpeditionResultNotification");
static_assert(sizeof(FFortExpeditionResultNotification) == 0x000018, "Wrong size on FFortExpeditionResultNotification");
static_assert(offsetof(FFortExpeditionResultNotification, bExpeditionSucceeded) == 0x000000, "Member 'FFortExpeditionResultNotification::bExpeditionSucceeded' has a wrong offset!");
static_assert(offsetof(FFortExpeditionResultNotification, ExpeditionRewards) == 0x000008, "Member 'FFortExpeditionResultNotification::ExpeditionRewards' has a wrong offset!");

// ScriptStruct FortniteGame.HomebaseNodePage
// 0x0058 (0x0060 - 0x0008)
struct FHomebaseNodePage final : public FTableRowBase
{
public:
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 EventID;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PositionIndex;                                     // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           NodeList;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHomebaseNodePage) == 0x000008, "Wrong alignment on FHomebaseNodePage");
static_assert(sizeof(FHomebaseNodePage) == 0x000060, "Wrong size on FHomebaseNodePage");
static_assert(offsetof(FHomebaseNodePage, DisplayName) == 0x000008, "Member 'FHomebaseNodePage::DisplayName' has a wrong offset!");
static_assert(offsetof(FHomebaseNodePage, Description) == 0x000020, "Member 'FHomebaseNodePage::Description' has a wrong offset!");
static_assert(offsetof(FHomebaseNodePage, EventID) == 0x000038, "Member 'FHomebaseNodePage::EventID' has a wrong offset!");
static_assert(offsetof(FHomebaseNodePage, PositionIndex) == 0x000048, "Member 'FHomebaseNodePage::PositionIndex' has a wrong offset!");
static_assert(offsetof(FHomebaseNodePage, NodeList) == 0x000050, "Member 'FHomebaseNodePage::NodeList' has a wrong offset!");

// ScriptStruct FortniteGame.FortCosmeticModification
// 0x0B20 (0x0B20 - 0x0000)
struct FFortCosmeticModification final
{
public:
	TSoftObjectPtr<class UMaterialInterface>      CosmeticMaterial;                                  // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UParticleSystem>         AmbientParticleSystem;                             // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UParticleSystem>         MuzzleParticleSystem;                              // 0x0050(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UParticleSystem>         ReloadParticleSystem;                              // 0x0078(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UParticleSystem>         BeamParticleSystem;                                // 0x00A0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UParticleSystem>         ImpactPhysicalSurfaceEffects[0x3F];                // 0x00C8(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   TracerTemplate;                                    // 0x0AA0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bModifyColor;                                      // 0x0AC8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC9[0x3];                                      // 0x0AC9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ColorAlteration;                                   // 0x0ACC(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_ADC[0x4];                                      // 0x0ADC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ColorParameterName;                                // 0x0AE0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bModifyDecalColour;                                // 0x0AE8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AE9[0x3];                                      // 0x0AE9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           DecalColourAlterationStart;                        // 0x0AEC(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DecalColourAlterationEnd;                          // 0x0AFC(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bModifyShellColour;                                // 0x0B0C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B0D[0x3];                                      // 0x0B0D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ShellColourAlteration;                             // 0x0B10(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCosmeticModification) == 0x000008, "Wrong alignment on FFortCosmeticModification");
static_assert(sizeof(FFortCosmeticModification) == 0x000B20, "Wrong size on FFortCosmeticModification");
static_assert(offsetof(FFortCosmeticModification, CosmeticMaterial) == 0x000000, "Member 'FFortCosmeticModification::CosmeticMaterial' has a wrong offset!");
static_assert(offsetof(FFortCosmeticModification, AmbientParticleSystem) == 0x000028, "Member 'FFortCosmeticModification::AmbientParticleSystem' has a wrong offset!");
static_assert(offsetof(FFortCosmeticModification, MuzzleParticleSystem) == 0x000050, "Member 'FFortCosmeticModification::MuzzleParticleSystem' has a wrong offset!");
static_assert(offsetof(FFortCosmeticModification, ReloadParticleSystem) == 0x000078, "Member 'FFortCosmeticModification::ReloadParticleSystem' has a wrong offset!");
static_assert(offsetof(FFortCosmeticModification, BeamParticleSystem) == 0x0000A0, "Member 'FFortCosmeticModification::BeamParticleSystem' has a wrong offset!");
static_assert(offsetof(FFortCosmeticModification, ImpactPhysicalSurfaceEffects) == 0x0000C8, "Member 'FFortCosmeticModification::ImpactPhysicalSurfaceEffects' has a wrong offset!");
static_assert(offsetof(FFortCosmeticModification, TracerTemplate) == 0x000AA0, "Member 'FFortCosmeticModification::TracerTemplate' has a wrong offset!");
static_assert(offsetof(FFortCosmeticModification, bModifyColor) == 0x000AC8, "Member 'FFortCosmeticModification::bModifyColor' has a wrong offset!");
static_assert(offsetof(FFortCosmeticModification, ColorAlteration) == 0x000ACC, "Member 'FFortCosmeticModification::ColorAlteration' has a wrong offset!");
static_assert(offsetof(FFortCosmeticModification, ColorParameterName) == 0x000AE0, "Member 'FFortCosmeticModification::ColorParameterName' has a wrong offset!");
static_assert(offsetof(FFortCosmeticModification, bModifyDecalColour) == 0x000AE8, "Member 'FFortCosmeticModification::bModifyDecalColour' has a wrong offset!");
static_assert(offsetof(FFortCosmeticModification, DecalColourAlterationStart) == 0x000AEC, "Member 'FFortCosmeticModification::DecalColourAlterationStart' has a wrong offset!");
static_assert(offsetof(FFortCosmeticModification, DecalColourAlterationEnd) == 0x000AFC, "Member 'FFortCosmeticModification::DecalColourAlterationEnd' has a wrong offset!");
static_assert(offsetof(FFortCosmeticModification, bModifyShellColour) == 0x000B0C, "Member 'FFortCosmeticModification::bModifyShellColour' has a wrong offset!");
static_assert(offsetof(FFortCosmeticModification, ShellColourAlteration) == 0x000B10, "Member 'FFortCosmeticModification::ShellColourAlteration' has a wrong offset!");

// ScriptStruct FortniteGame.FortConditionalCosmeticModification
// 0x0B40 (0x0B40 - 0x0000)
struct FFortConditionalCosmeticModification final
{
public:
	struct FFortCosmeticModification              CosmeticModification;                              // 0x0000(0x0B20)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ConditionalTags;                                   // 0x0B20(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortConditionalCosmeticModification) == 0x000008, "Wrong alignment on FFortConditionalCosmeticModification");
static_assert(sizeof(FFortConditionalCosmeticModification) == 0x000B40, "Wrong size on FFortConditionalCosmeticModification");
static_assert(offsetof(FFortConditionalCosmeticModification, CosmeticModification) == 0x000000, "Member 'FFortConditionalCosmeticModification::CosmeticModification' has a wrong offset!");
static_assert(offsetof(FFortConditionalCosmeticModification, ConditionalTags) == 0x000B20, "Member 'FFortConditionalCosmeticModification::ConditionalTags' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaAwardGroup
// 0x0028 (0x0028 - 0x0000)
struct FAthenaAwardGroup final
{
public:
	ERewardSource                                 RewardSource;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMcpLootEntry>                  Items;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SeasonXp;                                          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BookXp;                                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAthenaAwardGroup) == 0x000008, "Wrong alignment on FAthenaAwardGroup");
static_assert(sizeof(FAthenaAwardGroup) == 0x000028, "Wrong size on FAthenaAwardGroup");
static_assert(offsetof(FAthenaAwardGroup, RewardSource) == 0x000000, "Member 'FAthenaAwardGroup::RewardSource' has a wrong offset!");
static_assert(offsetof(FAthenaAwardGroup, Items) == 0x000008, "Member 'FAthenaAwardGroup::Items' has a wrong offset!");
static_assert(offsetof(FAthenaAwardGroup, Score) == 0x000018, "Member 'FAthenaAwardGroup::Score' has a wrong offset!");
static_assert(offsetof(FAthenaAwardGroup, SeasonXp) == 0x00001C, "Member 'FAthenaAwardGroup::SeasonXp' has a wrong offset!");
static_assert(offsetof(FAthenaAwardGroup, BookXp) == 0x000020, "Member 'FAthenaAwardGroup::BookXp' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaRewardResult
// 0x0030 (0x0030 - 0x0000)
struct FAthenaRewardResult final
{
public:
	int32                                         LevelsGained;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BookLevelsGained;                                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalSeasonXpGained;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalBookXpGained;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAthenaMatchXpMultiplierGroup>  XpMultipliers;                                     // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAthenaAwardGroup>              Rewards;                                           // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaRewardResult) == 0x000008, "Wrong alignment on FAthenaRewardResult");
static_assert(sizeof(FAthenaRewardResult) == 0x000030, "Wrong size on FAthenaRewardResult");
static_assert(offsetof(FAthenaRewardResult, LevelsGained) == 0x000000, "Member 'FAthenaRewardResult::LevelsGained' has a wrong offset!");
static_assert(offsetof(FAthenaRewardResult, BookLevelsGained) == 0x000004, "Member 'FAthenaRewardResult::BookLevelsGained' has a wrong offset!");
static_assert(offsetof(FAthenaRewardResult, TotalSeasonXpGained) == 0x000008, "Member 'FAthenaRewardResult::TotalSeasonXpGained' has a wrong offset!");
static_assert(offsetof(FAthenaRewardResult, TotalBookXpGained) == 0x00000C, "Member 'FAthenaRewardResult::TotalBookXpGained' has a wrong offset!");
static_assert(offsetof(FAthenaRewardResult, XpMultipliers) == 0x000010, "Member 'FAthenaRewardResult::XpMultipliers' has a wrong offset!");
static_assert(offsetof(FAthenaRewardResult, Rewards) == 0x000020, "Member 'FAthenaRewardResult::Rewards' has a wrong offset!");

// ScriptStruct FortniteGame.FortCollectionBookSlotSourceData
// 0x0018 (0x0020 - 0x0008)
struct FFortCollectionBookSlotSourceData final : public FTableRowBase
{
public:
	class FText                                   Description;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCollectionBookSlotSourceData) == 0x000008, "Wrong alignment on FFortCollectionBookSlotSourceData");
static_assert(sizeof(FFortCollectionBookSlotSourceData) == 0x000020, "Wrong size on FFortCollectionBookSlotSourceData");
static_assert(offsetof(FFortCollectionBookSlotSourceData, Description) == 0x000008, "Member 'FFortCollectionBookSlotSourceData::Description' has a wrong offset!");

// ScriptStruct FortniteGame.FortEncounterTransitionSettings
// 0x0001 (0x0001 - 0x0000)
struct FFortEncounterTransitionSettings final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortEncounterTransitionSettings) == 0x000001, "Wrong alignment on FFortEncounterTransitionSettings");
static_assert(sizeof(FFortEncounterTransitionSettings) == 0x000001, "Wrong size on FFortEncounterTransitionSettings");

// ScriptStruct FortniteGame.FortEncounterProfile
// 0x0060 (0x0060 - 0x0000)
struct FFortEncounterProfile final
{
public:
	TSoftObjectPtr<class UFortDifficultyOptionSetEncounter> EncounterOptions;                                  // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortDifficultyOptionCategoryEncounter*> OverrideCategories;                                // 0x0028(0x0010)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bShouldReselectOptionsPerInstance;                 // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  EncounterTypeTags;                                 // 0x0040(0x0020)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEncounterProfile) == 0x000008, "Wrong alignment on FFortEncounterProfile");
static_assert(sizeof(FFortEncounterProfile) == 0x000060, "Wrong size on FFortEncounterProfile");
static_assert(offsetof(FFortEncounterProfile, EncounterOptions) == 0x000000, "Member 'FFortEncounterProfile::EncounterOptions' has a wrong offset!");
static_assert(offsetof(FFortEncounterProfile, OverrideCategories) == 0x000028, "Member 'FFortEncounterProfile::OverrideCategories' has a wrong offset!");
static_assert(offsetof(FFortEncounterProfile, bShouldReselectOptionsPerInstance) == 0x000038, "Member 'FFortEncounterProfile::bShouldReselectOptionsPerInstance' has a wrong offset!");
static_assert(offsetof(FFortEncounterProfile, EncounterTypeTags) == 0x000040, "Member 'FFortEncounterProfile::EncounterTypeTags' has a wrong offset!");

// ScriptStruct FortniteGame.FortEncounterSequenceSettings
// 0x0038 (0x0038 - 0x0000)
struct FFortEncounterSequenceSettings final
{
public:
	struct FFortEncounterTransitionSettings       TransitionSettings;                                // 0x0000(0x0001)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortEncounterProfile>          EncounterSequence;                                 // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  SequenceTags;                                      // 0x0018(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEncounterSequenceSettings) == 0x000008, "Wrong alignment on FFortEncounterSequenceSettings");
static_assert(sizeof(FFortEncounterSequenceSettings) == 0x000038, "Wrong size on FFortEncounterSequenceSettings");
static_assert(offsetof(FFortEncounterSequenceSettings, TransitionSettings) == 0x000000, "Member 'FFortEncounterSequenceSettings::TransitionSettings' has a wrong offset!");
static_assert(offsetof(FFortEncounterSequenceSettings, EncounterSequence) == 0x000008, "Member 'FFortEncounterSequenceSettings::EncounterSequence' has a wrong offset!");
static_assert(offsetof(FFortEncounterSequenceSettings, SequenceTags) == 0x000018, "Member 'FFortEncounterSequenceSettings::SequenceTags' has a wrong offset!");

// ScriptStruct FortniteGame.FortItemInstanceQuantityPair
// 0x0010 (0x0010 - 0x0000)
struct FFortItemInstanceQuantityPair final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortInventoryType                            InventoryType;                                     // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Quantity;                                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemInstanceQuantityPair) == 0x000008, "Wrong alignment on FFortItemInstanceQuantityPair");
static_assert(sizeof(FFortItemInstanceQuantityPair) == 0x000010, "Wrong size on FFortItemInstanceQuantityPair");
static_assert(offsetof(FFortItemInstanceQuantityPair, Item) == 0x000000, "Member 'FFortItemInstanceQuantityPair::Item' has a wrong offset!");
static_assert(offsetof(FFortItemInstanceQuantityPair, InventoryType) == 0x000008, "Member 'FFortItemInstanceQuantityPair::InventoryType' has a wrong offset!");
static_assert(offsetof(FFortItemInstanceQuantityPair, Quantity) == 0x00000C, "Member 'FFortItemInstanceQuantityPair::Quantity' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIPawnUpgradeProbability
// 0x0058 (0x0058 - 0x0000)
struct FFortAIPawnUpgradeProbability final
{
public:
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0000(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   UpgradeProbability;                                // 0x0048(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIPawnUpgradeProbability) == 0x000008, "Wrong alignment on FFortAIPawnUpgradeProbability");
static_assert(sizeof(FFortAIPawnUpgradeProbability) == 0x000058, "Wrong size on FFortAIPawnUpgradeProbability");
static_assert(offsetof(FFortAIPawnUpgradeProbability, TagQuery) == 0x000000, "Member 'FFortAIPawnUpgradeProbability::TagQuery' has a wrong offset!");
static_assert(offsetof(FFortAIPawnUpgradeProbability, UpgradeProbability) == 0x000048, "Member 'FFortAIPawnUpgradeProbability::UpgradeProbability' has a wrong offset!");

// ScriptStruct FortniteGame.MissionGenerationInfo
// 0x0050 (0x0050 - 0x0000)
struct FMissionGenerationInfo final
{
public:
	int32                                         NumMissionsRequired;                               // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      MissionTagRequirements;                            // 0x0008(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMissionGenerationInfo) == 0x000008, "Wrong alignment on FMissionGenerationInfo");
static_assert(sizeof(FMissionGenerationInfo) == 0x000050, "Wrong size on FMissionGenerationInfo");
static_assert(offsetof(FMissionGenerationInfo, NumMissionsRequired) == 0x000000, "Member 'FMissionGenerationInfo::NumMissionsRequired' has a wrong offset!");
static_assert(offsetof(FMissionGenerationInfo, MissionTagRequirements) == 0x000008, "Member 'FMissionGenerationInfo::MissionTagRequirements' has a wrong offset!");

// ScriptStruct FortniteGame.FortTooltipDisplayStatInfo
// 0x0050 (0x0050 - 0x0000)
struct FFortTooltipDisplayStatInfo final
{
public:
	struct FGameplayTag                           Token;                                             // 0x0000(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     Attribute;                                         // 0x0008(0x0020)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ContextTags;                                       // 0x0028(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bLowerIsBetter;                                    // 0x0048(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortTooltipDisplayStatInfo) == 0x000008, "Wrong alignment on FFortTooltipDisplayStatInfo");
static_assert(sizeof(FFortTooltipDisplayStatInfo) == 0x000050, "Wrong size on FFortTooltipDisplayStatInfo");
static_assert(offsetof(FFortTooltipDisplayStatInfo, Token) == 0x000000, "Member 'FFortTooltipDisplayStatInfo::Token' has a wrong offset!");
static_assert(offsetof(FFortTooltipDisplayStatInfo, Attribute) == 0x000008, "Member 'FFortTooltipDisplayStatInfo::Attribute' has a wrong offset!");
static_assert(offsetof(FFortTooltipDisplayStatInfo, ContextTags) == 0x000028, "Member 'FFortTooltipDisplayStatInfo::ContextTags' has a wrong offset!");
static_assert(offsetof(FFortTooltipDisplayStatInfo, bLowerIsBetter) == 0x000048, "Member 'FFortTooltipDisplayStatInfo::bLowerIsBetter' has a wrong offset!");

// ScriptStruct FortniteGame.FriendCode
// 0x0020 (0x0020 - 0x0000)
struct FFriendCode final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CodeType;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFriendCode) == 0x000008, "Wrong alignment on FFriendCode");
static_assert(sizeof(FFriendCode) == 0x000020, "Wrong size on FFriendCode");
static_assert(offsetof(FFriendCode, Code) == 0x000000, "Member 'FFriendCode::Code' has a wrong offset!");
static_assert(offsetof(FFriendCode, CodeType) == 0x000010, "Member 'FFriendCode::CodeType' has a wrong offset!");

// ScriptStruct FortniteGame.BuildingClassData
// 0x0010 (0x0010 - 0x0000)
struct FBuildingClassData final
{
public:
	TSubclassOf<class ABuildingActor>             BuildingClass;                                     // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreviousBuildingLevel;                             // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UpgradeLevel;                                      // 0x000C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildingClassData) == 0x000008, "Wrong alignment on FBuildingClassData");
static_assert(sizeof(FBuildingClassData) == 0x000010, "Wrong size on FBuildingClassData");
static_assert(offsetof(FBuildingClassData, BuildingClass) == 0x000000, "Member 'FBuildingClassData::BuildingClass' has a wrong offset!");
static_assert(offsetof(FBuildingClassData, PreviousBuildingLevel) == 0x000008, "Member 'FBuildingClassData::PreviousBuildingLevel' has a wrong offset!");
static_assert(offsetof(FBuildingClassData, UpgradeLevel) == 0x00000C, "Member 'FBuildingClassData::UpgradeLevel' has a wrong offset!");

// ScriptStruct FortniteGame.FortEncounterLockedUtility
// 0x0002 (0x0002 - 0x0000)
struct FFortEncounterLockedUtility final
{
public:
	EFortAIUtility                                Utility;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortEncounterUtilityDesire                   UtilityDesire;                                     // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEncounterLockedUtility) == 0x000001, "Wrong alignment on FFortEncounterLockedUtility");
static_assert(sizeof(FFortEncounterLockedUtility) == 0x000002, "Wrong size on FFortEncounterLockedUtility");
static_assert(offsetof(FFortEncounterLockedUtility, Utility) == 0x000000, "Member 'FFortEncounterLockedUtility::Utility' has a wrong offset!");
static_assert(offsetof(FFortEncounterLockedUtility, UtilityDesire) == 0x000001, "Member 'FFortEncounterLockedUtility::UtilityDesire' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionAlertClaimData
// 0x0020 (0x0020 - 0x0000)
struct FFortMissionAlertClaimData final
{
public:
	TArray<class FString>                         MissionAlertGUIDs;                                 // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDateTime>                      LastClaimedTimes;                                  // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionAlertClaimData) == 0x000008, "Wrong alignment on FFortMissionAlertClaimData");
static_assert(sizeof(FFortMissionAlertClaimData) == 0x000020, "Wrong size on FFortMissionAlertClaimData");
static_assert(offsetof(FFortMissionAlertClaimData, MissionAlertGUIDs) == 0x000000, "Member 'FFortMissionAlertClaimData::MissionAlertGUIDs' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertClaimData, LastClaimedTimes) == 0x000010, "Member 'FFortMissionAlertClaimData::LastClaimedTimes' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionAlertRecord
// 0x0080 (0x0080 - 0x0000)
struct FFortMissionAlertRecord final
{
public:
	TMap<EFortMissionAlertCategory, struct FFortMissionAlertClaimData> LastClaimTimesMap;                                 // 0x0000(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 OldestClaimIndexForCategory;                       // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FMcpLootResult                         PendingMissionAlertRewards;                        // 0x0060(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionAlertRecord) == 0x000008, "Wrong alignment on FFortMissionAlertRecord");
static_assert(sizeof(FFortMissionAlertRecord) == 0x000080, "Wrong size on FFortMissionAlertRecord");
static_assert(offsetof(FFortMissionAlertRecord, LastClaimTimesMap) == 0x000000, "Member 'FFortMissionAlertRecord::LastClaimTimesMap' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertRecord, OldestClaimIndexForCategory) == 0x000050, "Member 'FFortMissionAlertRecord::OldestClaimIndexForCategory' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertRecord, PendingMissionAlertRewards) == 0x000060, "Member 'FFortMissionAlertRecord::PendingMissionAlertRewards' has a wrong offset!");

// ScriptStruct FortniteGame.AIHotSpotSlotInfo
// 0x0010 (0x0010 - 0x0000)
struct FAIHotSpotSlotInfo
{
public:
	class AAIHotSpot*                             HotSpot;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIHotSpotSlotInfo) == 0x000008, "Wrong alignment on FAIHotSpotSlotInfo");
static_assert(sizeof(FAIHotSpotSlotInfo) == 0x000010, "Wrong size on FAIHotSpotSlotInfo");
static_assert(offsetof(FAIHotSpotSlotInfo, HotSpot) == 0x000000, "Member 'FAIHotSpotSlotInfo::HotSpot' has a wrong offset!");
static_assert(offsetof(FAIHotSpotSlotInfo, SlotIndex) == 0x000008, "Member 'FAIHotSpotSlotInfo::SlotIndex' has a wrong offset!");

// ScriptStruct FortniteGame.AIHotSpotUseInfo
// 0x0008 (0x0018 - 0x0010)
struct FAIHotSpotUseInfo final : public FAIHotSpotSlotInfo
{
public:
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIHotSpotUseInfo) == 0x000008, "Wrong alignment on FAIHotSpotUseInfo");
static_assert(sizeof(FAIHotSpotUseInfo) == 0x000018, "Wrong size on FAIHotSpotUseInfo");

// ScriptStruct FortniteGame.FortActiveMontageDecisionWindow
// 0x0018 (0x0018 - 0x0000)
struct FFortActiveMontageDecisionWindow final
{
public:
	class UFortAnimNotifyState_AbilityDecisionWindow* DecisionWindow;                                    // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      DecisionAnimation;                                 // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReceivedPrimaryInput;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReceivedSecondaryInput;                           // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlreadyProcessedInput;                            // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortActiveMontageDecisionWindow) == 0x000008, "Wrong alignment on FFortActiveMontageDecisionWindow");
static_assert(sizeof(FFortActiveMontageDecisionWindow) == 0x000018, "Wrong size on FFortActiveMontageDecisionWindow");
static_assert(offsetof(FFortActiveMontageDecisionWindow, DecisionWindow) == 0x000000, "Member 'FFortActiveMontageDecisionWindow::DecisionWindow' has a wrong offset!");
static_assert(offsetof(FFortActiveMontageDecisionWindow, DecisionAnimation) == 0x000008, "Member 'FFortActiveMontageDecisionWindow::DecisionAnimation' has a wrong offset!");
static_assert(offsetof(FFortActiveMontageDecisionWindow, bReceivedPrimaryInput) == 0x000010, "Member 'FFortActiveMontageDecisionWindow::bReceivedPrimaryInput' has a wrong offset!");
static_assert(offsetof(FFortActiveMontageDecisionWindow, bReceivedSecondaryInput) == 0x000011, "Member 'FFortActiveMontageDecisionWindow::bReceivedSecondaryInput' has a wrong offset!");
static_assert(offsetof(FFortActiveMontageDecisionWindow, bAlreadyProcessedInput) == 0x000012, "Member 'FFortActiveMontageDecisionWindow::bAlreadyProcessedInput' has a wrong offset!");

// ScriptStruct FortniteGame.FortAthenaLoadout
// 0x0070 (0x0070 - 0x0000)
struct FFortAthenaLoadout final
{
public:
	class FString                                 BannerIconId;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BannerColorId;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAthenaGliderItemDefinition*            Glider;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAthenaPickaxeItemDefinition*           Pickaxe;                                           // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAthenaCharacterItemDefinition*         Character;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAthenaHatItemDefinition*               Hat;                                               // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAthenaBackpackItemDefinition*          Backpack;                                          // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAthenaLoadingScreenItemDefinition*     LoadingScreen;                                     // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAthenaBattleBusItemDefinition*         BattleBus;                                         // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAthenaDanceItemDefinition*>     Dances;                                            // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UAthenaVictoryPoseItemDefinition*       VictoryPose;                                       // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAthenaLoadout) == 0x000008, "Wrong alignment on FFortAthenaLoadout");
static_assert(sizeof(FFortAthenaLoadout) == 0x000070, "Wrong size on FFortAthenaLoadout");
static_assert(offsetof(FFortAthenaLoadout, BannerIconId) == 0x000000, "Member 'FFortAthenaLoadout::BannerIconId' has a wrong offset!");
static_assert(offsetof(FFortAthenaLoadout, BannerColorId) == 0x000010, "Member 'FFortAthenaLoadout::BannerColorId' has a wrong offset!");
static_assert(offsetof(FFortAthenaLoadout, Glider) == 0x000020, "Member 'FFortAthenaLoadout::Glider' has a wrong offset!");
static_assert(offsetof(FFortAthenaLoadout, Pickaxe) == 0x000028, "Member 'FFortAthenaLoadout::Pickaxe' has a wrong offset!");
static_assert(offsetof(FFortAthenaLoadout, Character) == 0x000030, "Member 'FFortAthenaLoadout::Character' has a wrong offset!");
static_assert(offsetof(FFortAthenaLoadout, Hat) == 0x000038, "Member 'FFortAthenaLoadout::Hat' has a wrong offset!");
static_assert(offsetof(FFortAthenaLoadout, Backpack) == 0x000040, "Member 'FFortAthenaLoadout::Backpack' has a wrong offset!");
static_assert(offsetof(FFortAthenaLoadout, LoadingScreen) == 0x000048, "Member 'FFortAthenaLoadout::LoadingScreen' has a wrong offset!");
static_assert(offsetof(FFortAthenaLoadout, BattleBus) == 0x000050, "Member 'FFortAthenaLoadout::BattleBus' has a wrong offset!");
static_assert(offsetof(FFortAthenaLoadout, Dances) == 0x000058, "Member 'FFortAthenaLoadout::Dances' has a wrong offset!");
static_assert(offsetof(FFortAthenaLoadout, VictoryPose) == 0x000068, "Member 'FFortAthenaLoadout::VictoryPose' has a wrong offset!");

// ScriptStruct FortniteGame.FriendCodeLocString
// 0x0020 (0x0020 - 0x0000)
struct FFriendCodeLocString final
{
public:
	class FString                                 Lang;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFriendCodeLocString) == 0x000008, "Wrong alignment on FFriendCodeLocString");
static_assert(sizeof(FFriendCodeLocString) == 0x000020, "Wrong size on FFriendCodeLocString");
static_assert(offsetof(FFriendCodeLocString, Lang) == 0x000000, "Member 'FFriendCodeLocString::Lang' has a wrong offset!");
static_assert(offsetof(FFriendCodeLocString, Text) == 0x000010, "Member 'FFriendCodeLocString::Text' has a wrong offset!");

// ScriptStruct FortniteGame.FriendCodeIssuedNotification
// 0x0020 (0x0020 - 0x0000)
struct FFriendCodeIssuedNotification final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CodeType;                                          // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFriendCodeIssuedNotification) == 0x000008, "Wrong alignment on FFriendCodeIssuedNotification");
static_assert(sizeof(FFriendCodeIssuedNotification) == 0x000020, "Wrong size on FFriendCodeIssuedNotification");
static_assert(offsetof(FFriendCodeIssuedNotification, Code) == 0x000000, "Member 'FFriendCodeIssuedNotification::Code' has a wrong offset!");
static_assert(offsetof(FFriendCodeIssuedNotification, CodeType) == 0x000010, "Member 'FFriendCodeIssuedNotification::CodeType' has a wrong offset!");

// ScriptStruct FortniteGame.PlayerStatsRecord
// 0x0088 (0x0088 - 0x0000)
struct FPlayerStatsRecord final
{
public:
	int32                                         Stats[0x22];                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerStatsRecord) == 0x000004, "Wrong alignment on FPlayerStatsRecord");
static_assert(sizeof(FPlayerStatsRecord) == 0x000088, "Wrong size on FPlayerStatsRecord");
static_assert(offsetof(FPlayerStatsRecord, Stats) == 0x000000, "Member 'FPlayerStatsRecord::Stats' has a wrong offset!");

// ScriptStruct FortniteGame.StatRecord
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FStatRecord final
{
public:
	class FName                                   StatName;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StatValue;                                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStatRecord) == 0x000008, "Wrong alignment on FStatRecord");
static_assert(sizeof(FStatRecord) == 0x000010, "Wrong size on FStatRecord");
static_assert(offsetof(FStatRecord, StatName) == 0x000000, "Member 'FStatRecord::StatName' has a wrong offset!");
static_assert(offsetof(FStatRecord, StatValue) == 0x000008, "Member 'FStatRecord::StatValue' has a wrong offset!");

// ScriptStruct FortniteGame.StatManagerPeriodRecord
// 0x0010 (0x0010 - 0x0000)
struct FStatManagerPeriodRecord final
{
public:
	TArray<struct FStatRecord>                    StatRecords;                                       // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStatManagerPeriodRecord) == 0x000008, "Wrong alignment on FStatManagerPeriodRecord");
static_assert(sizeof(FStatManagerPeriodRecord) == 0x000010, "Wrong size on FStatManagerPeriodRecord");
static_assert(offsetof(FStatManagerPeriodRecord, StatRecords) == 0x000000, "Member 'FStatManagerPeriodRecord::StatRecords' has a wrong offset!");

// ScriptStruct FortniteGame.PinnedSchematicsRecord
// 0x0010 (0x0010 - 0x0000)
struct FPinnedSchematicsRecord final
{
public:
	TArray<class FString>                         PinnedSchematicInstances;                          // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPinnedSchematicsRecord) == 0x000008, "Wrong alignment on FPinnedSchematicsRecord");
static_assert(sizeof(FPinnedSchematicsRecord) == 0x000010, "Wrong size on FPinnedSchematicsRecord");
static_assert(offsetof(FPinnedSchematicsRecord, PinnedSchematicInstances) == 0x000000, "Member 'FPinnedSchematicsRecord::PinnedSchematicInstances' has a wrong offset!");

// ScriptStruct FortniteGame.QuickBarSlot
// 0x0018 (0x0018 - 0x0000)
struct FQuickBarSlot final
{
public:
	TArray<struct FGuid>                          Items;                                             // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	bool                                          bEnabled;                                          // 0x0010(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuickBarSlot) == 0x000008, "Wrong alignment on FQuickBarSlot");
static_assert(sizeof(FQuickBarSlot) == 0x000018, "Wrong size on FQuickBarSlot");
static_assert(offsetof(FQuickBarSlot, Items) == 0x000000, "Member 'FQuickBarSlot::Items' has a wrong offset!");
static_assert(offsetof(FQuickBarSlot, bEnabled) == 0x000010, "Member 'FQuickBarSlot::bEnabled' has a wrong offset!");

// ScriptStruct FortniteGame.QuickBarSlotData
// 0x0040 (0x0040 - 0x0000)
struct FQuickBarSlotData final
{
public:
	TArray<EFortItemType>                         AcceptedItemTypes;                                 // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bStaticSlot;                                       // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UFortWorldItemDefinition> DefaultItem;                                       // 0x0018(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuickBarSlotData) == 0x000008, "Wrong alignment on FQuickBarSlotData");
static_assert(sizeof(FQuickBarSlotData) == 0x000040, "Wrong size on FQuickBarSlotData");
static_assert(offsetof(FQuickBarSlotData, AcceptedItemTypes) == 0x000000, "Member 'FQuickBarSlotData::AcceptedItemTypes' has a wrong offset!");
static_assert(offsetof(FQuickBarSlotData, bStaticSlot) == 0x000010, "Member 'FQuickBarSlotData::bStaticSlot' has a wrong offset!");
static_assert(offsetof(FQuickBarSlotData, DefaultItem) == 0x000018, "Member 'FQuickBarSlotData::DefaultItem' has a wrong offset!");

// ScriptStruct FortniteGame.QuickBarData
// 0x0010 (0x0010 - 0x0000)
struct FQuickBarData final
{
public:
	TArray<struct FQuickBarSlotData>              QuickbarSlots;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuickBarData) == 0x000008, "Wrong alignment on FQuickBarData");
static_assert(sizeof(FQuickBarData) == 0x000010, "Wrong size on FQuickBarData");
static_assert(offsetof(FQuickBarData, QuickbarSlots) == 0x000000, "Member 'FQuickBarData::QuickbarSlots' has a wrong offset!");

// ScriptStruct FortniteGame.QuickBar
// 0x0090 (0x0090 - 0x0000)
struct FQuickBar final
{
public:
	int32                                         CurrentFocusedSlot;                                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreviousFocusedSlot;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SecondaryFocusedSlot;                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FQuickBarSlot>                  Slots;                                             // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FQuickBarData                          DataDefinition;                                    // 0x0020(0x0010)(NativeAccessSpecifierPrivate)
	TSet<class UFortItemDefinition*>              EquippedItemDefinitions;                           // 0x0030(0x0050)(ZeroConstructor, Transient, RepSkip, NativeAccessSpecifierPrivate)
	TArray<int32>                                 SharedVisibleSlotIndicesWhenUsingGamepad;          // 0x0080(0x0010)(ZeroConstructor, Transient, RepSkip, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FQuickBar) == 0x000008, "Wrong alignment on FQuickBar");
static_assert(sizeof(FQuickBar) == 0x000090, "Wrong size on FQuickBar");
static_assert(offsetof(FQuickBar, CurrentFocusedSlot) == 0x000000, "Member 'FQuickBar::CurrentFocusedSlot' has a wrong offset!");
static_assert(offsetof(FQuickBar, PreviousFocusedSlot) == 0x000004, "Member 'FQuickBar::PreviousFocusedSlot' has a wrong offset!");
static_assert(offsetof(FQuickBar, SecondaryFocusedSlot) == 0x000008, "Member 'FQuickBar::SecondaryFocusedSlot' has a wrong offset!");
static_assert(offsetof(FQuickBar, Slots) == 0x000010, "Member 'FQuickBar::Slots' has a wrong offset!");
static_assert(offsetof(FQuickBar, DataDefinition) == 0x000020, "Member 'FQuickBar::DataDefinition' has a wrong offset!");
static_assert(offsetof(FQuickBar, EquippedItemDefinitions) == 0x000030, "Member 'FQuickBar::EquippedItemDefinitions' has a wrong offset!");
static_assert(offsetof(FQuickBar, SharedVisibleSlotIndicesWhenUsingGamepad) == 0x000080, "Member 'FQuickBar::SharedVisibleSlotIndicesWhenUsingGamepad' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlayerRecord
// 0x0200 (0x0200 - 0x0000)
struct FFortPlayerRecord final
{
public:
	class FString                                 DisplayName;                                       // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UniqueId;                                          // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 BackpackData;                                      // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bPlayerIsNew;                                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerStatsRecord                     PlayerStatsData;                                   // 0x0034(0x0088)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStatManagerPeriodRecord               CampaignPeriodRecord;                              // 0x00C0(0x0010)(NativeAccessSpecifierPublic)
	struct FPinnedSchematicsRecord                PinnedSchematicsRecord;                            // 0x00D0(0x0010)(NativeAccessSpecifierPublic)
	struct FQuickBar                              PrimaryQuickBarRecord;                             // 0x00E0(0x0090)(NativeAccessSpecifierPublic)
	struct FQuickBar                              SecondaryQuickBarRecord;                           // 0x0170(0x0090)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerRecord) == 0x000008, "Wrong alignment on FFortPlayerRecord");
static_assert(sizeof(FFortPlayerRecord) == 0x000200, "Wrong size on FFortPlayerRecord");
static_assert(offsetof(FFortPlayerRecord, DisplayName) == 0x000000, "Member 'FFortPlayerRecord::DisplayName' has a wrong offset!");
static_assert(offsetof(FFortPlayerRecord, UniqueId) == 0x000010, "Member 'FFortPlayerRecord::UniqueId' has a wrong offset!");
static_assert(offsetof(FFortPlayerRecord, BackpackData) == 0x000020, "Member 'FFortPlayerRecord::BackpackData' has a wrong offset!");
static_assert(offsetof(FFortPlayerRecord, bPlayerIsNew) == 0x000030, "Member 'FFortPlayerRecord::bPlayerIsNew' has a wrong offset!");
static_assert(offsetof(FFortPlayerRecord, PlayerStatsData) == 0x000034, "Member 'FFortPlayerRecord::PlayerStatsData' has a wrong offset!");
static_assert(offsetof(FFortPlayerRecord, CampaignPeriodRecord) == 0x0000C0, "Member 'FFortPlayerRecord::CampaignPeriodRecord' has a wrong offset!");
static_assert(offsetof(FFortPlayerRecord, PinnedSchematicsRecord) == 0x0000D0, "Member 'FFortPlayerRecord::PinnedSchematicsRecord' has a wrong offset!");
static_assert(offsetof(FFortPlayerRecord, PrimaryQuickBarRecord) == 0x0000E0, "Member 'FFortPlayerRecord::PrimaryQuickBarRecord' has a wrong offset!");
static_assert(offsetof(FFortPlayerRecord, SecondaryQuickBarRecord) == 0x000170, "Member 'FFortPlayerRecord::SecondaryQuickBarRecord' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIEncounterPIDControllerSettings
// 0x0030 (0x0030 - 0x0000)
struct FFortAIEncounterPIDControllerSettings final
{
public:
	struct FCurveTableRowHandle                   ProportionalGain;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   IntegralGain;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   DerivativeGain;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIEncounterPIDControllerSettings) == 0x000008, "Wrong alignment on FFortAIEncounterPIDControllerSettings");
static_assert(sizeof(FFortAIEncounterPIDControllerSettings) == 0x000030, "Wrong size on FFortAIEncounterPIDControllerSettings");
static_assert(offsetof(FFortAIEncounterPIDControllerSettings, ProportionalGain) == 0x000000, "Member 'FFortAIEncounterPIDControllerSettings::ProportionalGain' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterPIDControllerSettings, IntegralGain) == 0x000010, "Member 'FFortAIEncounterPIDControllerSettings::IntegralGain' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterPIDControllerSettings, DerivativeGain) == 0x000020, "Member 'FFortAIEncounterPIDControllerSettings::DerivativeGain' has a wrong offset!");

// ScriptStruct FortniteGame.FortDialogDescription
// 0x0150 (0x0150 - 0x0000)
struct alignas(0x10) FFortDialogDescription final
{
public:
	struct FSlateBrush                            Icon;                                              // 0x0000(0x0078)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   MessageHeader;                                     // 0x0078(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   MessageBody;                                       // 0x0090(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   AcceptButtonText;                                  // 0x00A8(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   IgnoreButtonText;                                  // 0x00C0(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   DismissButtonText;                                 // 0x00D8(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         DisplayTime;                                       // 0x00F0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            AdditionalContent;                                 // 0x00F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDialogFeedbackType                       FeedBackType;                                      // 0x0100(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Dismissable;                                       // 0x0101(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_102[0x6];                                      // 0x0102(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortNotificationHandler*               NotificationHandler;                               // 0x0108(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_110[0x40];                                     // 0x0110(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortDialogDescription) == 0x000010, "Wrong alignment on FFortDialogDescription");
static_assert(sizeof(FFortDialogDescription) == 0x000150, "Wrong size on FFortDialogDescription");
static_assert(offsetof(FFortDialogDescription, Icon) == 0x000000, "Member 'FFortDialogDescription::Icon' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription, MessageHeader) == 0x000078, "Member 'FFortDialogDescription::MessageHeader' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription, MessageBody) == 0x000090, "Member 'FFortDialogDescription::MessageBody' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription, AcceptButtonText) == 0x0000A8, "Member 'FFortDialogDescription::AcceptButtonText' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription, IgnoreButtonText) == 0x0000C0, "Member 'FFortDialogDescription::IgnoreButtonText' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription, DismissButtonText) == 0x0000D8, "Member 'FFortDialogDescription::DismissButtonText' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription, DisplayTime) == 0x0000F0, "Member 'FFortDialogDescription::DisplayTime' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription, AdditionalContent) == 0x0000F8, "Member 'FFortDialogDescription::AdditionalContent' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription, FeedBackType) == 0x000100, "Member 'FFortDialogDescription::FeedBackType' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription, Dismissable) == 0x000101, "Member 'FFortDialogDescription::Dismissable' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription, NotificationHandler) == 0x000108, "Member 'FFortDialogDescription::NotificationHandler' has a wrong offset!");

// ScriptStruct FortniteGame.FortDeliveryInfoRequirementsFilter
// 0x0098 (0x0098 - 0x0000)
struct FFortDeliveryInfoRequirementsFilter final
{
public:
	struct FGameplayTagRequirements               SourceTagRequirements;                             // 0x0000(0x0040)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagRequirements               TargetTagRequirements;                             // 0x0040(0x0040)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EFortTeamAffiliation                          ApplicableTeamAffiliation;                         // 0x0080(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bConsiderTeamAffiliationToInstigator : 1;          // 0x0084(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EFortTeam                                     ApplicableTeam;                                    // 0x0088(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bConsiderTeam : 1;                                 // 0x008C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bApplyToPlayerPawns : 1;                           // 0x008C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bApplyToAIPawns : 1;                               // 0x008C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bApplyToBuildingActors : 1;                        // 0x008C(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EFortDeliveryInfoBuildingActorSpecification   BuildingActorSpecification;                        // 0x0090(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bApplyToGlobalEnvironmentAbilityActor : 1;         // 0x0094(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortDeliveryInfoRequirementsFilter) == 0x000008, "Wrong alignment on FFortDeliveryInfoRequirementsFilter");
static_assert(sizeof(FFortDeliveryInfoRequirementsFilter) == 0x000098, "Wrong size on FFortDeliveryInfoRequirementsFilter");
static_assert(offsetof(FFortDeliveryInfoRequirementsFilter, SourceTagRequirements) == 0x000000, "Member 'FFortDeliveryInfoRequirementsFilter::SourceTagRequirements' has a wrong offset!");
static_assert(offsetof(FFortDeliveryInfoRequirementsFilter, TargetTagRequirements) == 0x000040, "Member 'FFortDeliveryInfoRequirementsFilter::TargetTagRequirements' has a wrong offset!");
static_assert(offsetof(FFortDeliveryInfoRequirementsFilter, ApplicableTeamAffiliation) == 0x000080, "Member 'FFortDeliveryInfoRequirementsFilter::ApplicableTeamAffiliation' has a wrong offset!");
static_assert(offsetof(FFortDeliveryInfoRequirementsFilter, ApplicableTeam) == 0x000088, "Member 'FFortDeliveryInfoRequirementsFilter::ApplicableTeam' has a wrong offset!");
static_assert(offsetof(FFortDeliveryInfoRequirementsFilter, BuildingActorSpecification) == 0x000090, "Member 'FFortDeliveryInfoRequirementsFilter::BuildingActorSpecification' has a wrong offset!");

// ScriptStruct FortniteGame.GameplayEffectApplicationInfo
// 0x0030 (0x0030 - 0x0000)
struct FGameplayEffectApplicationInfo final
{
public:
	TSoftClassPtr<class UClass>                   GameplayEffect;                                    // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Level;                                             // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayEffectApplicationInfo) == 0x000008, "Wrong alignment on FGameplayEffectApplicationInfo");
static_assert(sizeof(FGameplayEffectApplicationInfo) == 0x000030, "Wrong size on FGameplayEffectApplicationInfo");
static_assert(offsetof(FGameplayEffectApplicationInfo, GameplayEffect) == 0x000000, "Member 'FGameplayEffectApplicationInfo::GameplayEffect' has a wrong offset!");
static_assert(offsetof(FGameplayEffectApplicationInfo, Level) == 0x000028, "Member 'FGameplayEffectApplicationInfo::Level' has a wrong offset!");

// ScriptStruct FortniteGame.ProximityBasedGEDeliveryInfo
// 0x00B0 (0x00B0 - 0x0000)
struct FProximityBasedGEDeliveryInfo final
{
public:
	struct FFortDeliveryInfoRequirementsFilter    DeliveryRequirements;                              // 0x0000(0x0098)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FGameplayEffectApplicationInfo> EffectsToApply;                                    // 0x0098(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	EFortProximityBasedGEApplicationType          ProximityApplicationType;                          // 0x00A8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProximityBasedGEDeliveryInfo) == 0x000008, "Wrong alignment on FProximityBasedGEDeliveryInfo");
static_assert(sizeof(FProximityBasedGEDeliveryInfo) == 0x0000B0, "Wrong size on FProximityBasedGEDeliveryInfo");
static_assert(offsetof(FProximityBasedGEDeliveryInfo, DeliveryRequirements) == 0x000000, "Member 'FProximityBasedGEDeliveryInfo::DeliveryRequirements' has a wrong offset!");
static_assert(offsetof(FProximityBasedGEDeliveryInfo, EffectsToApply) == 0x000098, "Member 'FProximityBasedGEDeliveryInfo::EffectsToApply' has a wrong offset!");
static_assert(offsetof(FProximityBasedGEDeliveryInfo, ProximityApplicationType) == 0x0000A8, "Member 'FProximityBasedGEDeliveryInfo::ProximityApplicationType' has a wrong offset!");

// ScriptStruct FortniteGame.FortAbilitySetDeliveryInfo
// 0x00A8 (0x00A8 - 0x0000)
struct FFortAbilitySetDeliveryInfo final
{
public:
	struct FFortDeliveryInfoRequirementsFilter    DeliveryRequirements;                              // 0x0000(0x0098)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<TSoftObjectPtr<class UFortAbilitySet>> AbilitySets;                                       // 0x0098(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortAbilitySetDeliveryInfo) == 0x000008, "Wrong alignment on FFortAbilitySetDeliveryInfo");
static_assert(sizeof(FFortAbilitySetDeliveryInfo) == 0x0000A8, "Wrong size on FFortAbilitySetDeliveryInfo");
static_assert(offsetof(FFortAbilitySetDeliveryInfo, DeliveryRequirements) == 0x000000, "Member 'FFortAbilitySetDeliveryInfo::DeliveryRequirements' has a wrong offset!");
static_assert(offsetof(FFortAbilitySetDeliveryInfo, AbilitySets) == 0x000098, "Member 'FFortAbilitySetDeliveryInfo::AbilitySets' has a wrong offset!");

// ScriptStruct FortniteGame.FortAbilitySetHandle
// 0x0028 (0x0028 - 0x0000)
struct FFortAbilitySetHandle final
{
public:
	TWeakObjectPtr<class UAbilitySystemComponent> TargetAbilitySystemComponent;                      // 0x0000(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FGameplayAbilitySpecHandle>     GrantedAbilityHandles;                             // 0x0008(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<struct FActiveGameplayEffectHandle>    AppliedEffectHandles;                              // 0x0018(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortAbilitySetHandle) == 0x000008, "Wrong alignment on FFortAbilitySetHandle");
static_assert(sizeof(FFortAbilitySetHandle) == 0x000028, "Wrong size on FFortAbilitySetHandle");
static_assert(offsetof(FFortAbilitySetHandle, TargetAbilitySystemComponent) == 0x000000, "Member 'FFortAbilitySetHandle::TargetAbilitySystemComponent' has a wrong offset!");
static_assert(offsetof(FFortAbilitySetHandle, GrantedAbilityHandles) == 0x000008, "Member 'FFortAbilitySetHandle::GrantedAbilityHandles' has a wrong offset!");
static_assert(offsetof(FFortAbilitySetHandle, AppliedEffectHandles) == 0x000018, "Member 'FFortAbilitySetHandle::AppliedEffectHandles' has a wrong offset!");

// ScriptStruct FortniteGame.BuildingGameplayActorAbilityDeliveryBucket
// 0x0090 (0x0090 - 0x0000)
struct FBuildingGameplayActorAbilityDeliveryBucket final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FProximityBasedGEDeliveryInfo>  ProximityBasedEffectBuckets;                       // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FFortAbilitySetDeliveryInfo>    PawnPersistentAbilitySetBuckets;                   // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FFortAbilitySetHandle>          PersistentlyAppliedAbilitySets;                    // 0x0028(0x0010)(ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         bEnabled : 1;                                      // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bEnabledByDefault : 1;                             // 0x0038(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bHasGEsToApplyOnTouch : 1;                         // 0x0038(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bHasGEsToApplyOnPulseTimer : 1;                    // 0x0038(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bHasPersistentEffects : 1;                         // 0x0038(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_39[0x57];                                      // 0x0039(0x0057)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingGameplayActorAbilityDeliveryBucket) == 0x000008, "Wrong alignment on FBuildingGameplayActorAbilityDeliveryBucket");
static_assert(sizeof(FBuildingGameplayActorAbilityDeliveryBucket) == 0x000090, "Wrong size on FBuildingGameplayActorAbilityDeliveryBucket");
static_assert(offsetof(FBuildingGameplayActorAbilityDeliveryBucket, Tag) == 0x000000, "Member 'FBuildingGameplayActorAbilityDeliveryBucket::Tag' has a wrong offset!");
static_assert(offsetof(FBuildingGameplayActorAbilityDeliveryBucket, ProximityBasedEffectBuckets) == 0x000008, "Member 'FBuildingGameplayActorAbilityDeliveryBucket::ProximityBasedEffectBuckets' has a wrong offset!");
static_assert(offsetof(FBuildingGameplayActorAbilityDeliveryBucket, PawnPersistentAbilitySetBuckets) == 0x000018, "Member 'FBuildingGameplayActorAbilityDeliveryBucket::PawnPersistentAbilitySetBuckets' has a wrong offset!");
static_assert(offsetof(FBuildingGameplayActorAbilityDeliveryBucket, PersistentlyAppliedAbilitySets) == 0x000028, "Member 'FBuildingGameplayActorAbilityDeliveryBucket::PersistentlyAppliedAbilitySets' has a wrong offset!");

// ScriptStruct FortniteGame.BuildingGameplayActorAbilityDeliveryInfo
// 0x0080 (0x0080 - 0x0000)
struct alignas(0x10) FBuildingGameplayActorAbilityDeliveryInfo final
{
public:
	TArray<struct FBuildingGameplayActorAbilityDeliveryBucket> DeliveryBuckets;                                   // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	float                                         ProximityPulseInterval;                            // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bHasGEsToApplyOnTouch : 1;                         // 0x0014(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bHasGEsToApplyOnPulseTimer : 1;                    // 0x0014(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bHasPersistentEffects : 1;                         // 0x0014(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABuildingGameplayActor*                 OwningActor;                                       // 0x0018(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AActor*>                         DeferredTouchActorsToProcess;                      // 0x0020(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_30[0x50];                                      // 0x0030(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingGameplayActorAbilityDeliveryInfo) == 0x000010, "Wrong alignment on FBuildingGameplayActorAbilityDeliveryInfo");
static_assert(sizeof(FBuildingGameplayActorAbilityDeliveryInfo) == 0x000080, "Wrong size on FBuildingGameplayActorAbilityDeliveryInfo");
static_assert(offsetof(FBuildingGameplayActorAbilityDeliveryInfo, DeliveryBuckets) == 0x000000, "Member 'FBuildingGameplayActorAbilityDeliveryInfo::DeliveryBuckets' has a wrong offset!");
static_assert(offsetof(FBuildingGameplayActorAbilityDeliveryInfo, ProximityPulseInterval) == 0x000010, "Member 'FBuildingGameplayActorAbilityDeliveryInfo::ProximityPulseInterval' has a wrong offset!");
static_assert(offsetof(FBuildingGameplayActorAbilityDeliveryInfo, OwningActor) == 0x000018, "Member 'FBuildingGameplayActorAbilityDeliveryInfo::OwningActor' has a wrong offset!");
static_assert(offsetof(FBuildingGameplayActorAbilityDeliveryInfo, DeferredTouchActorsToProcess) == 0x000020, "Member 'FBuildingGameplayActorAbilityDeliveryInfo::DeferredTouchActorsToProcess' has a wrong offset!");

// ScriptStruct FortniteGame.ChoiceDataEntry
// 0x0050 (0x0050 - 0x0000)
struct FChoiceDataEntry final
{
public:
	class FText                                   ButtonText;                                        // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ButtonDescription;                                 // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ConfirmText;                                       // 0x0030(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequireConfirmation;                              // 0x0049(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCloseAfterSelection;                              // 0x004A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChoiceDataEntry) == 0x000008, "Wrong alignment on FChoiceDataEntry");
static_assert(sizeof(FChoiceDataEntry) == 0x000050, "Wrong size on FChoiceDataEntry");
static_assert(offsetof(FChoiceDataEntry, ButtonText) == 0x000000, "Member 'FChoiceDataEntry::ButtonText' has a wrong offset!");
static_assert(offsetof(FChoiceDataEntry, ButtonDescription) == 0x000018, "Member 'FChoiceDataEntry::ButtonDescription' has a wrong offset!");
static_assert(offsetof(FChoiceDataEntry, ConfirmText) == 0x000030, "Member 'FChoiceDataEntry::ConfirmText' has a wrong offset!");
static_assert(offsetof(FChoiceDataEntry, bEnabled) == 0x000048, "Member 'FChoiceDataEntry::bEnabled' has a wrong offset!");
static_assert(offsetof(FChoiceDataEntry, bRequireConfirmation) == 0x000049, "Member 'FChoiceDataEntry::bRequireConfirmation' has a wrong offset!");
static_assert(offsetof(FChoiceDataEntry, bCloseAfterSelection) == 0x00004A, "Member 'FChoiceDataEntry::bCloseAfterSelection' has a wrong offset!");

// ScriptStruct FortniteGame.ChoiceData
// 0x0030 (0x0030 - 0x0000)
struct FChoiceData final
{
public:
	int32                                         MenuIdentifier;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowCloseButton;                                  // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Title;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FChoiceDataEntry>               Items;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChoiceData) == 0x000008, "Wrong alignment on FChoiceData");
static_assert(sizeof(FChoiceData) == 0x000030, "Wrong size on FChoiceData");
static_assert(offsetof(FChoiceData, MenuIdentifier) == 0x000000, "Member 'FChoiceData::MenuIdentifier' has a wrong offset!");
static_assert(offsetof(FChoiceData, bShowCloseButton) == 0x000004, "Member 'FChoiceData::bShowCloseButton' has a wrong offset!");
static_assert(offsetof(FChoiceData, Title) == 0x000008, "Member 'FChoiceData::Title' has a wrong offset!");
static_assert(offsetof(FChoiceData, Items) == 0x000020, "Member 'FChoiceData::Items' has a wrong offset!");

// ScriptStruct FortniteGame.FortTeamMemberInfo
// 0x01A8 (0x01A8 - 0x0000)
struct FFortTeamMemberInfo final
{
public:
	struct FUniqueNetIdRepl                       MemberUniqueId;                                    // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       PartyLeaderUniqueId;                               // 0x0028(0x0028)(BlueprintVisible, BlueprintReadOnly, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       ConsoleUniqueId;                                   // 0x0050(0x0028)(BlueprintVisible, BlueprintReadOnly, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   PlayerName;                                        // 0x0078(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bPartyLeader;                                      // 0x0090(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInZone;                                         // 0x0091(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasBoostXp;                                       // 0x0092(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasRestXp;                                        // 0x0093(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPlayersInParty;                                 // 0x0094(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0098(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortTeam                                     TeamAffiliation;                                   // 0x009C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   HeroClass;                                         // 0x00A0(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   HeroLevel;                                         // 0x00B8(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         HeroXP;                                            // 0x00D0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItem*                              HeroItem;                                          // 0x00D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortItem*>                      SelectedGadgetItems;                               // 0x00E0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSlateBrush                            HeroIcon;                                          // 0x00F0(0x0078)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FFortHomeBaseInfo                      HomeBaseInfo;                                      // 0x0168(0x0040)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTeamMemberInfo) == 0x000008, "Wrong alignment on FFortTeamMemberInfo");
static_assert(sizeof(FFortTeamMemberInfo) == 0x0001A8, "Wrong size on FFortTeamMemberInfo");
static_assert(offsetof(FFortTeamMemberInfo, MemberUniqueId) == 0x000000, "Member 'FFortTeamMemberInfo::MemberUniqueId' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, PartyLeaderUniqueId) == 0x000028, "Member 'FFortTeamMemberInfo::PartyLeaderUniqueId' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, ConsoleUniqueId) == 0x000050, "Member 'FFortTeamMemberInfo::ConsoleUniqueId' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, PlayerName) == 0x000078, "Member 'FFortTeamMemberInfo::PlayerName' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, bPartyLeader) == 0x000090, "Member 'FFortTeamMemberInfo::bPartyLeader' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, bIsInZone) == 0x000091, "Member 'FFortTeamMemberInfo::bIsInZone' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, bHasBoostXp) == 0x000092, "Member 'FFortTeamMemberInfo::bHasBoostXp' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, bHasRestXp) == 0x000093, "Member 'FFortTeamMemberInfo::bHasRestXp' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, NumPlayersInParty) == 0x000094, "Member 'FFortTeamMemberInfo::NumPlayersInParty' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, PlayerIndex) == 0x000098, "Member 'FFortTeamMemberInfo::PlayerIndex' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, TeamAffiliation) == 0x00009C, "Member 'FFortTeamMemberInfo::TeamAffiliation' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, HeroClass) == 0x0000A0, "Member 'FFortTeamMemberInfo::HeroClass' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, HeroLevel) == 0x0000B8, "Member 'FFortTeamMemberInfo::HeroLevel' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, HeroXP) == 0x0000D0, "Member 'FFortTeamMemberInfo::HeroXP' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, HeroItem) == 0x0000D8, "Member 'FFortTeamMemberInfo::HeroItem' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, SelectedGadgetItems) == 0x0000E0, "Member 'FFortTeamMemberInfo::SelectedGadgetItems' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, HeroIcon) == 0x0000F0, "Member 'FFortTeamMemberInfo::HeroIcon' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, HomeBaseInfo) == 0x000168, "Member 'FFortTeamMemberInfo::HomeBaseInfo' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaMatchLootReward
// 0x0018 (0x0018 - 0x0000)
struct FAthenaMatchLootReward final
{
public:
	class FString                                 TemplateId;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAthenaMatchLootReward) == 0x000008, "Wrong alignment on FAthenaMatchLootReward");
static_assert(sizeof(FAthenaMatchLootReward) == 0x000018, "Wrong size on FAthenaMatchLootReward");
static_assert(offsetof(FAthenaMatchLootReward, TemplateId) == 0x000000, "Member 'FAthenaMatchLootReward::TemplateId' has a wrong offset!");
static_assert(offsetof(FAthenaMatchLootReward, Amount) == 0x000010, "Member 'FAthenaMatchLootReward::Amount' has a wrong offset!");

// ScriptStruct FortniteGame.FortMultiSizeBrush
// 0x02D0 (0x02D0 - 0x0000)
struct FFortMultiSizeBrush final
{
public:
	struct FSlateBrush                            Brush_XXS;                                         // 0x0000(0x0078)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush_XS;                                          // 0x0078(0x0078)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush_S;                                           // 0x00F0(0x0078)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush_M;                                           // 0x0168(0x0078)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush_L;                                           // 0x01E0(0x0078)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush_XL;                                          // 0x0258(0x0078)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMultiSizeBrush) == 0x000008, "Wrong alignment on FFortMultiSizeBrush");
static_assert(sizeof(FFortMultiSizeBrush) == 0x0002D0, "Wrong size on FFortMultiSizeBrush");
static_assert(offsetof(FFortMultiSizeBrush, Brush_XXS) == 0x000000, "Member 'FFortMultiSizeBrush::Brush_XXS' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeBrush, Brush_XS) == 0x000078, "Member 'FFortMultiSizeBrush::Brush_XS' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeBrush, Brush_S) == 0x0000F0, "Member 'FFortMultiSizeBrush::Brush_S' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeBrush, Brush_M) == 0x000168, "Member 'FFortMultiSizeBrush::Brush_M' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeBrush, Brush_L) == 0x0001E0, "Member 'FFortMultiSizeBrush::Brush_L' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeBrush, Brush_XL) == 0x000258, "Member 'FFortMultiSizeBrush::Brush_XL' has a wrong offset!");

// ScriptStruct FortniteGame.FortDialogExternalLatentActionHandle
// 0x0004 (0x0004 - 0x0000)
struct FFortDialogExternalLatentActionHandle final
{
public:
	int32                                         Handle;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortDialogExternalLatentActionHandle) == 0x000004, "Wrong alignment on FFortDialogExternalLatentActionHandle");
static_assert(sizeof(FFortDialogExternalLatentActionHandle) == 0x000004, "Wrong size on FFortDialogExternalLatentActionHandle");
static_assert(offsetof(FFortDialogExternalLatentActionHandle, Handle) == 0x000000, "Member 'FFortDialogExternalLatentActionHandle::Handle' has a wrong offset!");

// ScriptStruct FortniteGame.IntensityContribution
// 0x0048 (0x0048 - 0x0000)
struct FIntensityContribution final
{
public:
	EFortCombatFactors                            CombatFactor;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAIDirectorFactor                         ContributingAIDirectorFactor;                      // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxContribution;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bModifyContributionByCompletionPercentage;         // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCurveTableRowHandle                   CompletionPercentageInitialMultiplier;             // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   CompletionPercentageToStartReducingMultiplier;     // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   CompletionPercentageToStopReducingMultiplier;      // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bModifyByNumberOfCriticalEncounterGoals;           // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FIntensityContribution) == 0x000008, "Wrong alignment on FIntensityContribution");
static_assert(sizeof(FIntensityContribution) == 0x000048, "Wrong size on FIntensityContribution");
static_assert(offsetof(FIntensityContribution, CombatFactor) == 0x000000, "Member 'FIntensityContribution::CombatFactor' has a wrong offset!");
static_assert(offsetof(FIntensityContribution, ContributingAIDirectorFactor) == 0x000001, "Member 'FIntensityContribution::ContributingAIDirectorFactor' has a wrong offset!");
static_assert(offsetof(FIntensityContribution, MaxContribution) == 0x000004, "Member 'FIntensityContribution::MaxContribution' has a wrong offset!");
static_assert(offsetof(FIntensityContribution, bModifyContributionByCompletionPercentage) == 0x000008, "Member 'FIntensityContribution::bModifyContributionByCompletionPercentage' has a wrong offset!");
static_assert(offsetof(FIntensityContribution, CompletionPercentageInitialMultiplier) == 0x000010, "Member 'FIntensityContribution::CompletionPercentageInitialMultiplier' has a wrong offset!");
static_assert(offsetof(FIntensityContribution, CompletionPercentageToStartReducingMultiplier) == 0x000020, "Member 'FIntensityContribution::CompletionPercentageToStartReducingMultiplier' has a wrong offset!");
static_assert(offsetof(FIntensityContribution, CompletionPercentageToStopReducingMultiplier) == 0x000030, "Member 'FIntensityContribution::CompletionPercentageToStopReducingMultiplier' has a wrong offset!");
static_assert(offsetof(FIntensityContribution, bModifyByNumberOfCriticalEncounterGoals) == 0x000040, "Member 'FIntensityContribution::bModifyByNumberOfCriticalEncounterGoals' has a wrong offset!");

// ScriptStruct FortniteGame.FortStartingMissionInfo
// 0x0018 (0x0018 - 0x0000)
struct FFortStartingMissionInfo final
{
public:
	TArray<class UFortMissionInfo*>               StartingMissions;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bDisableSharedMissionLoading;                      // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortStartingMissionInfo) == 0x000008, "Wrong alignment on FFortStartingMissionInfo");
static_assert(sizeof(FFortStartingMissionInfo) == 0x000018, "Wrong size on FFortStartingMissionInfo");
static_assert(offsetof(FFortStartingMissionInfo, StartingMissions) == 0x000000, "Member 'FFortStartingMissionInfo::StartingMissions' has a wrong offset!");
static_assert(offsetof(FFortStartingMissionInfo, bDisableSharedMissionLoading) == 0x000010, "Member 'FFortStartingMissionInfo::bDisableSharedMissionLoading' has a wrong offset!");

// ScriptStruct FortniteGame.TieredWaveCollectionLootSetData
// 0x0020 (0x0020 - 0x0000)
struct FTieredWaveCollectionLootSetData final
{
public:
	TArray<class FName>                           StartOfCollectionItemTierGroups;                   // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class FName>                           SuccessfulWaveItemTierGroups;                      // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTieredWaveCollectionLootSetData) == 0x000008, "Wrong alignment on FTieredWaveCollectionLootSetData");
static_assert(sizeof(FTieredWaveCollectionLootSetData) == 0x000020, "Wrong size on FTieredWaveCollectionLootSetData");
static_assert(offsetof(FTieredWaveCollectionLootSetData, StartOfCollectionItemTierGroups) == 0x000000, "Member 'FTieredWaveCollectionLootSetData::StartOfCollectionItemTierGroups' has a wrong offset!");
static_assert(offsetof(FTieredWaveCollectionLootSetData, SuccessfulWaveItemTierGroups) == 0x000010, "Member 'FTieredWaveCollectionLootSetData::SuccessfulWaveItemTierGroups' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaPlaylistDataTableSet
// 0x0040 (0x0040 - 0x0000)
struct FAthenaPlaylistDataTableSet final
{
public:
	class FString                                 Description;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlaylistId;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             LootTierData;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             LootPackages;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             RangedWeapons;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveTable*                            GameData;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveTable*                            ResourceRates;                                     // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaPlaylistDataTableSet) == 0x000008, "Wrong alignment on FAthenaPlaylistDataTableSet");
static_assert(sizeof(FAthenaPlaylistDataTableSet) == 0x000040, "Wrong size on FAthenaPlaylistDataTableSet");
static_assert(offsetof(FAthenaPlaylistDataTableSet, Description) == 0x000000, "Member 'FAthenaPlaylistDataTableSet::Description' has a wrong offset!");
static_assert(offsetof(FAthenaPlaylistDataTableSet, PlaylistId) == 0x000010, "Member 'FAthenaPlaylistDataTableSet::PlaylistId' has a wrong offset!");
static_assert(offsetof(FAthenaPlaylistDataTableSet, LootTierData) == 0x000018, "Member 'FAthenaPlaylistDataTableSet::LootTierData' has a wrong offset!");
static_assert(offsetof(FAthenaPlaylistDataTableSet, LootPackages) == 0x000020, "Member 'FAthenaPlaylistDataTableSet::LootPackages' has a wrong offset!");
static_assert(offsetof(FAthenaPlaylistDataTableSet, RangedWeapons) == 0x000028, "Member 'FAthenaPlaylistDataTableSet::RangedWeapons' has a wrong offset!");
static_assert(offsetof(FAthenaPlaylistDataTableSet, GameData) == 0x000030, "Member 'FAthenaPlaylistDataTableSet::GameData' has a wrong offset!");
static_assert(offsetof(FAthenaPlaylistDataTableSet, ResourceRates) == 0x000038, "Member 'FAthenaPlaylistDataTableSet::ResourceRates' has a wrong offset!");

// ScriptStruct FortniteGame.ViewOffsetData
// 0x0024 (0x0024 - 0x0000)
struct FViewOffsetData final
{
public:
	struct FVector                                OffsetHigh;                                        // 0x0000(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OffsetMid;                                         // 0x000C(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OffsetLow;                                         // 0x0018(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FViewOffsetData) == 0x000004, "Wrong alignment on FViewOffsetData");
static_assert(sizeof(FViewOffsetData) == 0x000024, "Wrong size on FViewOffsetData");
static_assert(offsetof(FViewOffsetData, OffsetHigh) == 0x000000, "Member 'FViewOffsetData::OffsetHigh' has a wrong offset!");
static_assert(offsetof(FViewOffsetData, OffsetMid) == 0x00000C, "Member 'FViewOffsetData::OffsetMid' has a wrong offset!");
static_assert(offsetof(FViewOffsetData, OffsetLow) == 0x000018, "Member 'FViewOffsetData::OffsetLow' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaMatchXpReward
// 0x0020 (0x0020 - 0x0000)
struct FAthenaMatchXpReward final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAthenaMatchXpReward) == 0x000008, "Wrong alignment on FAthenaMatchXpReward");
static_assert(sizeof(FAthenaMatchXpReward) == 0x000020, "Wrong size on FAthenaMatchXpReward");
static_assert(offsetof(FAthenaMatchXpReward, Text) == 0x000000, "Member 'FAthenaMatchXpReward::Text' has a wrong offset!");
static_assert(offsetof(FAthenaMatchXpReward, Amount) == 0x000018, "Member 'FAthenaMatchXpReward::Amount' has a wrong offset!");

// ScriptStruct FortniteGame.FortTwitchViewerNameAndAccountId
// 0x0020 (0x0020 - 0x0000)
struct FFortTwitchViewerNameAndAccountId final
{
public:
	class FString                                 TwitchViewerName;                                  // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AccountId;                                         // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTwitchViewerNameAndAccountId) == 0x000008, "Wrong alignment on FFortTwitchViewerNameAndAccountId");
static_assert(sizeof(FFortTwitchViewerNameAndAccountId) == 0x000020, "Wrong size on FFortTwitchViewerNameAndAccountId");
static_assert(offsetof(FFortTwitchViewerNameAndAccountId, TwitchViewerName) == 0x000000, "Member 'FFortTwitchViewerNameAndAccountId::TwitchViewerName' has a wrong offset!");
static_assert(offsetof(FFortTwitchViewerNameAndAccountId, AccountId) == 0x000010, "Member 'FFortTwitchViewerNameAndAccountId::AccountId' has a wrong offset!");

// ScriptStruct FortniteGame.GameplayTagMessage
// 0x0038 (0x0038 - 0x0000)
struct FGameplayTagMessage final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0020(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayTagMessage) == 0x000008, "Wrong alignment on FGameplayTagMessage");
static_assert(sizeof(FGameplayTagMessage) == 0x000038, "Wrong size on FGameplayTagMessage");
static_assert(offsetof(FGameplayTagMessage, Tags) == 0x000000, "Member 'FGameplayTagMessage::Tags' has a wrong offset!");
static_assert(offsetof(FGameplayTagMessage, Text) == 0x000020, "Member 'FGameplayTagMessage::Text' has a wrong offset!");

// ScriptStruct FortniteGame.FortRequirementsInfo
// 0x0048 (0x0048 - 0x0000)
struct FFortRequirementsInfo final
{
public:
	int32                                         CommanderLevel;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PersonalPowerRating;                               // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPersonalPowerRating;                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartyPowerRating;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPartyPowerRating;                               // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortQuestItemDefinition*               ActiveQuestDefinition;                             // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortQuestItemDefinition*               QuestDefinition;                                   // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    ObjectiveStatHandle;                               // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class UFortQuestItemDefinition*               UncompletedQuestDefinition;                        // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItemDefinition*                    ItemDefinition;                                    // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortRequirementsInfo) == 0x000008, "Wrong alignment on FFortRequirementsInfo");
static_assert(sizeof(FFortRequirementsInfo) == 0x000048, "Wrong size on FFortRequirementsInfo");
static_assert(offsetof(FFortRequirementsInfo, CommanderLevel) == 0x000000, "Member 'FFortRequirementsInfo::CommanderLevel' has a wrong offset!");
static_assert(offsetof(FFortRequirementsInfo, PersonalPowerRating) == 0x000004, "Member 'FFortRequirementsInfo::PersonalPowerRating' has a wrong offset!");
static_assert(offsetof(FFortRequirementsInfo, MaxPersonalPowerRating) == 0x000008, "Member 'FFortRequirementsInfo::MaxPersonalPowerRating' has a wrong offset!");
static_assert(offsetof(FFortRequirementsInfo, PartyPowerRating) == 0x00000C, "Member 'FFortRequirementsInfo::PartyPowerRating' has a wrong offset!");
static_assert(offsetof(FFortRequirementsInfo, MaxPartyPowerRating) == 0x000010, "Member 'FFortRequirementsInfo::MaxPartyPowerRating' has a wrong offset!");
static_assert(offsetof(FFortRequirementsInfo, ActiveQuestDefinition) == 0x000018, "Member 'FFortRequirementsInfo::ActiveQuestDefinition' has a wrong offset!");
static_assert(offsetof(FFortRequirementsInfo, QuestDefinition) == 0x000020, "Member 'FFortRequirementsInfo::QuestDefinition' has a wrong offset!");
static_assert(offsetof(FFortRequirementsInfo, ObjectiveStatHandle) == 0x000028, "Member 'FFortRequirementsInfo::ObjectiveStatHandle' has a wrong offset!");
static_assert(offsetof(FFortRequirementsInfo, UncompletedQuestDefinition) == 0x000038, "Member 'FFortRequirementsInfo::UncompletedQuestDefinition' has a wrong offset!");
static_assert(offsetof(FFortRequirementsInfo, ItemDefinition) == 0x000040, "Member 'FFortRequirementsInfo::ItemDefinition' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionAlertRequirementsInfo
// 0x0050 (0x0050 - 0x0000)
struct FFortMissionAlertRequirementsInfo final
{
public:
	EFortMissionAlertCategory                     Category;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortRequirementsInfo                  Requirements;                                      // 0x0008(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionAlertRequirementsInfo) == 0x000008, "Wrong alignment on FFortMissionAlertRequirementsInfo");
static_assert(sizeof(FFortMissionAlertRequirementsInfo) == 0x000050, "Wrong size on FFortMissionAlertRequirementsInfo");
static_assert(offsetof(FFortMissionAlertRequirementsInfo, Category) == 0x000000, "Member 'FFortMissionAlertRequirementsInfo::Category' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertRequirementsInfo, Requirements) == 0x000008, "Member 'FFortMissionAlertRequirementsInfo::Requirements' has a wrong offset!");

// ScriptStruct FortniteGame.FortTaggedUnlockBase
// 0x0008 (0x0008 - 0x0000)
struct FFortTaggedUnlockBase
{
public:
	struct FGameplayTag                           RequiredTag;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTaggedUnlockBase) == 0x000008, "Wrong alignment on FFortTaggedUnlockBase");
static_assert(sizeof(FFortTaggedUnlockBase) == 0x000008, "Wrong size on FFortTaggedUnlockBase");
static_assert(offsetof(FFortTaggedUnlockBase, RequiredTag) == 0x000000, "Member 'FFortTaggedUnlockBase::RequiredTag' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaSeasonBannerLevel
// 0x0050 (0x0050 - 0x0000)
struct FAthenaSeasonBannerLevel final
{
public:
	TSoftObjectPtr<class UTexture2D>              SurroundImage;                                     // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      BannerMaterial;                                    // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaSeasonBannerLevel) == 0x000008, "Wrong alignment on FAthenaSeasonBannerLevel");
static_assert(sizeof(FAthenaSeasonBannerLevel) == 0x000050, "Wrong size on FAthenaSeasonBannerLevel");
static_assert(offsetof(FAthenaSeasonBannerLevel, SurroundImage) == 0x000000, "Member 'FAthenaSeasonBannerLevel::SurroundImage' has a wrong offset!");
static_assert(offsetof(FAthenaSeasonBannerLevel, BannerMaterial) == 0x000028, "Member 'FAthenaSeasonBannerLevel::BannerMaterial' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaSeasonBannerLevelSchedule
// 0x0010 (0x0010 - 0x0000)
struct FAthenaSeasonBannerLevelSchedule final
{
public:
	TArray<struct FAthenaSeasonBannerLevel>       Levels;                                            // 0x0000(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaSeasonBannerLevelSchedule) == 0x000008, "Wrong alignment on FAthenaSeasonBannerLevelSchedule");
static_assert(sizeof(FAthenaSeasonBannerLevelSchedule) == 0x000010, "Wrong size on FAthenaSeasonBannerLevelSchedule");
static_assert(offsetof(FAthenaSeasonBannerLevelSchedule, Levels) == 0x000000, "Member 'FAthenaSeasonBannerLevelSchedule::Levels' has a wrong offset!");

// ScriptStruct FortniteGame.FortAvailableMissionAlertData
// 0x0098 (0x0098 - 0x0000)
struct FFortAvailableMissionAlertData final
{
public:
	class FString                                 CategoryName;                                      // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SpreadDataName;                                    // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MissionAlertGuid;                                  // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TileIndex;                                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              AvailableUntil;                                    // 0x0038(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              RefreshSpreadAt;                                   // 0x0040(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMcpLootResult                         MissionAlertRewards;                               // 0x0048(0x0020)(NativeAccessSpecifierPublic)
	struct FMcpLootResult                         MissionAlertModifiers;                             // 0x0068(0x0020)(NativeAccessSpecifierPublic)
	TArray<class UFortItemDefinition*>            ItemDefinitionRefCache;                            // 0x0088(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAvailableMissionAlertData) == 0x000008, "Wrong alignment on FFortAvailableMissionAlertData");
static_assert(sizeof(FFortAvailableMissionAlertData) == 0x000098, "Wrong size on FFortAvailableMissionAlertData");
static_assert(offsetof(FFortAvailableMissionAlertData, CategoryName) == 0x000000, "Member 'FFortAvailableMissionAlertData::CategoryName' has a wrong offset!");
static_assert(offsetof(FFortAvailableMissionAlertData, SpreadDataName) == 0x000010, "Member 'FFortAvailableMissionAlertData::SpreadDataName' has a wrong offset!");
static_assert(offsetof(FFortAvailableMissionAlertData, MissionAlertGuid) == 0x000020, "Member 'FFortAvailableMissionAlertData::MissionAlertGuid' has a wrong offset!");
static_assert(offsetof(FFortAvailableMissionAlertData, TileIndex) == 0x000030, "Member 'FFortAvailableMissionAlertData::TileIndex' has a wrong offset!");
static_assert(offsetof(FFortAvailableMissionAlertData, AvailableUntil) == 0x000038, "Member 'FFortAvailableMissionAlertData::AvailableUntil' has a wrong offset!");
static_assert(offsetof(FFortAvailableMissionAlertData, RefreshSpreadAt) == 0x000040, "Member 'FFortAvailableMissionAlertData::RefreshSpreadAt' has a wrong offset!");
static_assert(offsetof(FFortAvailableMissionAlertData, MissionAlertRewards) == 0x000048, "Member 'FFortAvailableMissionAlertData::MissionAlertRewards' has a wrong offset!");
static_assert(offsetof(FFortAvailableMissionAlertData, MissionAlertModifiers) == 0x000068, "Member 'FFortAvailableMissionAlertData::MissionAlertModifiers' has a wrong offset!");
static_assert(offsetof(FFortAvailableMissionAlertData, ItemDefinitionRefCache) == 0x000088, "Member 'FFortAvailableMissionAlertData::ItemDefinitionRefCache' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaBatchedDamageGameplayCues
// 0x0058 (0x0058 - 0x0000)
struct FAthenaBatchedDamageGameplayCues final
{
public:
	class AActor*                                 HitActor;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  Location;                                          // 0x0008(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              Normal;                                            // 0x0014(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         Magnitude;                                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWeaponActivate;                                   // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFatal;                                          // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCritical;                                       // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsShield;                                         // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsShieldDestroyed;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 NonPlayerHitActor;                                 // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  NonPlayerLocation;                                 // 0x0038(0x000C)(RepSkip, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              NonPlayerNormal;                                   // 0x0044(0x000C)(RepSkip, NoDestructor, NativeAccessSpecifierPublic)
	float                                         NonPlayerMagnitude;                                // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NonPlayerbIsFatal;                                 // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NonPlayerbIsCritical;                              // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_57[0x1];                                       // 0x0057(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAthenaBatchedDamageGameplayCues) == 0x000008, "Wrong alignment on FAthenaBatchedDamageGameplayCues");
static_assert(sizeof(FAthenaBatchedDamageGameplayCues) == 0x000058, "Wrong size on FAthenaBatchedDamageGameplayCues");
static_assert(offsetof(FAthenaBatchedDamageGameplayCues, HitActor) == 0x000000, "Member 'FAthenaBatchedDamageGameplayCues::HitActor' has a wrong offset!");
static_assert(offsetof(FAthenaBatchedDamageGameplayCues, Location) == 0x000008, "Member 'FAthenaBatchedDamageGameplayCues::Location' has a wrong offset!");
static_assert(offsetof(FAthenaBatchedDamageGameplayCues, Normal) == 0x000014, "Member 'FAthenaBatchedDamageGameplayCues::Normal' has a wrong offset!");
static_assert(offsetof(FAthenaBatchedDamageGameplayCues, Magnitude) == 0x000020, "Member 'FAthenaBatchedDamageGameplayCues::Magnitude' has a wrong offset!");
static_assert(offsetof(FAthenaBatchedDamageGameplayCues, bWeaponActivate) == 0x000024, "Member 'FAthenaBatchedDamageGameplayCues::bWeaponActivate' has a wrong offset!");
static_assert(offsetof(FAthenaBatchedDamageGameplayCues, bIsFatal) == 0x000025, "Member 'FAthenaBatchedDamageGameplayCues::bIsFatal' has a wrong offset!");
static_assert(offsetof(FAthenaBatchedDamageGameplayCues, bIsCritical) == 0x000026, "Member 'FAthenaBatchedDamageGameplayCues::bIsCritical' has a wrong offset!");
static_assert(offsetof(FAthenaBatchedDamageGameplayCues, bIsShield) == 0x000027, "Member 'FAthenaBatchedDamageGameplayCues::bIsShield' has a wrong offset!");
static_assert(offsetof(FAthenaBatchedDamageGameplayCues, bIsShieldDestroyed) == 0x000028, "Member 'FAthenaBatchedDamageGameplayCues::bIsShieldDestroyed' has a wrong offset!");
static_assert(offsetof(FAthenaBatchedDamageGameplayCues, NonPlayerHitActor) == 0x000030, "Member 'FAthenaBatchedDamageGameplayCues::NonPlayerHitActor' has a wrong offset!");
static_assert(offsetof(FAthenaBatchedDamageGameplayCues, NonPlayerLocation) == 0x000038, "Member 'FAthenaBatchedDamageGameplayCues::NonPlayerLocation' has a wrong offset!");
static_assert(offsetof(FAthenaBatchedDamageGameplayCues, NonPlayerNormal) == 0x000044, "Member 'FAthenaBatchedDamageGameplayCues::NonPlayerNormal' has a wrong offset!");
static_assert(offsetof(FAthenaBatchedDamageGameplayCues, NonPlayerMagnitude) == 0x000050, "Member 'FAthenaBatchedDamageGameplayCues::NonPlayerMagnitude' has a wrong offset!");
static_assert(offsetof(FAthenaBatchedDamageGameplayCues, NonPlayerbIsFatal) == 0x000054, "Member 'FAthenaBatchedDamageGameplayCues::NonPlayerbIsFatal' has a wrong offset!");
static_assert(offsetof(FAthenaBatchedDamageGameplayCues, NonPlayerbIsCritical) == 0x000055, "Member 'FAthenaBatchedDamageGameplayCues::NonPlayerbIsCritical' has a wrong offset!");
static_assert(offsetof(FAthenaBatchedDamageGameplayCues, bIsValid) == 0x000056, "Member 'FAthenaBatchedDamageGameplayCues::bIsValid' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaMatchTeamStats
// 0x0008 (0x0008 - 0x0000)
struct FAthenaMatchTeamStats final
{
public:
	int32                                         Place;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalPlayers;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaMatchTeamStats) == 0x000004, "Wrong alignment on FAthenaMatchTeamStats");
static_assert(sizeof(FAthenaMatchTeamStats) == 0x000008, "Wrong size on FAthenaMatchTeamStats");
static_assert(offsetof(FAthenaMatchTeamStats, Place) == 0x000000, "Member 'FAthenaMatchTeamStats::Place' has a wrong offset!");
static_assert(offsetof(FAthenaMatchTeamStats, TotalPlayers) == 0x000004, "Member 'FAthenaMatchTeamStats::TotalPlayers' has a wrong offset!");

// ScriptStruct FortniteGame.SettingsHUDVisibilityAndText
// 0x0048 (0x0048 - 0x0000)
struct FSettingsHUDVisibilityAndText final
{
public:
	struct FGameplayTag                           HUDVisibilityGameplayTag;                          // 0x0000(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                              DefaultHUDVisibility;                              // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayText;                                       // 0x0010(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   ToolTipText;                                       // 0x0028(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bHideOnConsolePlatforms;                           // 0x0040(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSettingsHUDVisibilityAndText) == 0x000008, "Wrong alignment on FSettingsHUDVisibilityAndText");
static_assert(sizeof(FSettingsHUDVisibilityAndText) == 0x000048, "Wrong size on FSettingsHUDVisibilityAndText");
static_assert(offsetof(FSettingsHUDVisibilityAndText, HUDVisibilityGameplayTag) == 0x000000, "Member 'FSettingsHUDVisibilityAndText::HUDVisibilityGameplayTag' has a wrong offset!");
static_assert(offsetof(FSettingsHUDVisibilityAndText, DefaultHUDVisibility) == 0x000008, "Member 'FSettingsHUDVisibilityAndText::DefaultHUDVisibility' has a wrong offset!");
static_assert(offsetof(FSettingsHUDVisibilityAndText, DisplayText) == 0x000010, "Member 'FSettingsHUDVisibilityAndText::DisplayText' has a wrong offset!");
static_assert(offsetof(FSettingsHUDVisibilityAndText, ToolTipText) == 0x000028, "Member 'FSettingsHUDVisibilityAndText::ToolTipText' has a wrong offset!");
static_assert(offsetof(FSettingsHUDVisibilityAndText, bHideOnConsolePlatforms) == 0x000040, "Member 'FSettingsHUDVisibilityAndText::bHideOnConsolePlatforms' has a wrong offset!");

// ScriptStruct FortniteGame.FortInstensityCurveSequenceProgression
// 0x0018 (0x0018 - 0x0000)
struct FFortInstensityCurveSequenceProgression final
{
public:
	class UFortIntensityCurveSequence*            CurveSequence;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   SelectionWeight;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortInstensityCurveSequenceProgression) == 0x000008, "Wrong alignment on FFortInstensityCurveSequenceProgression");
static_assert(sizeof(FFortInstensityCurveSequenceProgression) == 0x000018, "Wrong size on FFortInstensityCurveSequenceProgression");
static_assert(offsetof(FFortInstensityCurveSequenceProgression, CurveSequence) == 0x000000, "Member 'FFortInstensityCurveSequenceProgression::CurveSequence' has a wrong offset!");
static_assert(offsetof(FFortInstensityCurveSequenceProgression, SelectionWeight) == 0x000008, "Member 'FFortInstensityCurveSequenceProgression::SelectionWeight' has a wrong offset!");

// ScriptStruct FortniteGame.HomebaseSquadAttributeBonus
// 0x0030 (0x0030 - 0x0000)
struct FHomebaseSquadAttributeBonus final
{
public:
	struct FGameplayAttribute                     AttributeGranted;                                  // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   BonusCurve;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHomebaseSquadAttributeBonus) == 0x000008, "Wrong alignment on FHomebaseSquadAttributeBonus");
static_assert(sizeof(FHomebaseSquadAttributeBonus) == 0x000030, "Wrong size on FHomebaseSquadAttributeBonus");
static_assert(offsetof(FHomebaseSquadAttributeBonus, AttributeGranted) == 0x000000, "Member 'FHomebaseSquadAttributeBonus::AttributeGranted' has a wrong offset!");
static_assert(offsetof(FHomebaseSquadAttributeBonus, BonusCurve) == 0x000020, "Member 'FHomebaseSquadAttributeBonus::BonusCurve' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaMatchStats
// 0x0074 (0x0074 - 0x0000)
struct FAthenaMatchStats final
{
public:
	int32                                         SecondsAlive;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Kills;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Downs;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Assists;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revives;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageDealtToHostiles;                             // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageDealtToFriends;                              // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageDealtToStructures;                           // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageTaken;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RangedShots;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RangedHit;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Accuracy;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TravelDistanceGround;                              // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GatheredWood;                                      // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GatheredStone;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GatheredMetal;                                     // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialsGathered;                                 // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UsedWood;                                          // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UsedStone;                                         // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UsedMetal;                                         // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialsUsed;                                     // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NormalDamageToHostiles;                            // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NormalDamageToFriends;                             // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CriticalDamageToHostiles;                          // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CriticalDamageToFriends;                           // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NormalHitsToHostiles;                              // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NormalHitsToFriends;                               // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CriticalHitsToHostiles;                            // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CriticalHitsToFriends;                             // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaMatchStats) == 0x000004, "Wrong alignment on FAthenaMatchStats");
static_assert(sizeof(FAthenaMatchStats) == 0x000074, "Wrong size on FAthenaMatchStats");
static_assert(offsetof(FAthenaMatchStats, SecondsAlive) == 0x000000, "Member 'FAthenaMatchStats::SecondsAlive' has a wrong offset!");
static_assert(offsetof(FAthenaMatchStats, Kills) == 0x000004, "Member 'FAthenaMatchStats::Kills' has a wrong offset!");
static_assert(offsetof(FAthenaMatchStats, Downs) == 0x000008, "Member 'FAthenaMatchStats::Downs' has a wrong offset!");
static_assert(offsetof(FAthenaMatchStats, Assists) == 0x00000C, "Member 'FAthenaMatchStats::Assists' has a wrong offset!");
static_assert(offsetof(FAthenaMatchStats, Revives) == 0x000010, "Member 'FAthenaMatchStats::Revives' has a wrong offset!");
static_assert(offsetof(FAthenaMatchStats, DamageDealtToHostiles) == 0x000014, "Member 'FAthenaMatchStats::DamageDealtToHostiles' has a wrong offset!");
static_assert(offsetof(FAthenaMatchStats, DamageDealtToFriends) == 0x000018, "Member 'FAthenaMatchStats::DamageDealtToFriends' has a wrong offset!");
static_assert(offsetof(FAthenaMatchStats, DamageDealtToStructures) == 0x00001C, "Member 'FAthenaMatchStats::DamageDealtToStructures' has a wrong offset!");
static_assert(offsetof(FAthenaMatchStats, DamageTaken) == 0x000020, "Member 'FAthenaMatchStats::DamageTaken' has a wrong offset!");
static_assert(offsetof(FAthenaMatchStats, RangedShots) == 0x000024, "Member 'FAthenaMatchStats::RangedShots' has a wrong offset!");
static_assert(offsetof(FAthenaMatchStats, RangedHit) == 0x000028, "Member 'FAthenaMatchStats::RangedHit' has a wrong offset!");
static_assert(offsetof(FAthenaMatchStats, Accuracy) == 0x00002C, "Member 'FAthenaMatchStats::Accuracy' has a wrong offset!");
static_assert(offsetof(FAthenaMatchStats, TravelDistanceGround) == 0x000030, "Member 'FAthenaMatchStats::TravelDistanceGround' has a wrong offset!");
static_assert(offsetof(FAthenaMatchStats, GatheredWood) == 0x000034, "Member 'FAthenaMatchStats::GatheredWood' has a wrong offset!");
static_assert(offsetof(FAthenaMatchStats, GatheredStone) == 0x000038, "Member 'FAthenaMatchStats::GatheredStone' has a wrong offset!");
static_assert(offsetof(FAthenaMatchStats, GatheredMetal) == 0x00003C, "Member 'FAthenaMatchStats::GatheredMetal' has a wrong offset!");
static_assert(offsetof(FAthenaMatchStats, MaterialsGathered) == 0x000040, "Member 'FAthenaMatchStats::MaterialsGathered' has a wrong offset!");
static_assert(offsetof(FAthenaMatchStats, UsedWood) == 0x000044, "Member 'FAthenaMatchStats::UsedWood' has a wrong offset!");
static_assert(offsetof(FAthenaMatchStats, UsedStone) == 0x000048, "Member 'FAthenaMatchStats::UsedStone' has a wrong offset!");
static_assert(offsetof(FAthenaMatchStats, UsedMetal) == 0x00004C, "Member 'FAthenaMatchStats::UsedMetal' has a wrong offset!");
static_assert(offsetof(FAthenaMatchStats, MaterialsUsed) == 0x000050, "Member 'FAthenaMatchStats::MaterialsUsed' has a wrong offset!");
static_assert(offsetof(FAthenaMatchStats, NormalDamageToHostiles) == 0x000054, "Member 'FAthenaMatchStats::NormalDamageToHostiles' has a wrong offset!");
static_assert(offsetof(FAthenaMatchStats, NormalDamageToFriends) == 0x000058, "Member 'FAthenaMatchStats::NormalDamageToFriends' has a wrong offset!");
static_assert(offsetof(FAthenaMatchStats, CriticalDamageToHostiles) == 0x00005C, "Member 'FAthenaMatchStats::CriticalDamageToHostiles' has a wrong offset!");
static_assert(offsetof(FAthenaMatchStats, CriticalDamageToFriends) == 0x000060, "Member 'FAthenaMatchStats::CriticalDamageToFriends' has a wrong offset!");
static_assert(offsetof(FAthenaMatchStats, NormalHitsToHostiles) == 0x000064, "Member 'FAthenaMatchStats::NormalHitsToHostiles' has a wrong offset!");
static_assert(offsetof(FAthenaMatchStats, NormalHitsToFriends) == 0x000068, "Member 'FAthenaMatchStats::NormalHitsToFriends' has a wrong offset!");
static_assert(offsetof(FAthenaMatchStats, CriticalHitsToHostiles) == 0x00006C, "Member 'FAthenaMatchStats::CriticalHitsToHostiles' has a wrong offset!");
static_assert(offsetof(FAthenaMatchStats, CriticalHitsToFriends) == 0x000070, "Member 'FAthenaMatchStats::CriticalHitsToFriends' has a wrong offset!");

// ScriptStruct FortniteGame.FortAlterationSlots
// 0x0002 (0x0002 - 0x0000)
struct FFortAlterationSlots final
{
public:
	EFortAlteration                               Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NumSlots;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAlterationSlots) == 0x000001, "Wrong alignment on FFortAlterationSlots");
static_assert(sizeof(FFortAlterationSlots) == 0x000002, "Wrong size on FFortAlterationSlots");
static_assert(offsetof(FFortAlterationSlots, Type) == 0x000000, "Member 'FFortAlterationSlots::Type' has a wrong offset!");
static_assert(offsetof(FFortAlterationSlots, NumSlots) == 0x000001, "Member 'FFortAlterationSlots::NumSlots' has a wrong offset!");

// ScriptStruct FortniteGame.FortHiddenRewardQuantityPair
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FFortHiddenRewardQuantityPair final
{
public:
	class FName                                   TemplateId;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortHiddenRewardQuantityPair) == 0x000008, "Wrong alignment on FFortHiddenRewardQuantityPair");
static_assert(sizeof(FFortHiddenRewardQuantityPair) == 0x000010, "Wrong size on FFortHiddenRewardQuantityPair");
static_assert(offsetof(FFortHiddenRewardQuantityPair, TemplateId) == 0x000000, "Member 'FFortHiddenRewardQuantityPair::TemplateId' has a wrong offset!");
static_assert(offsetof(FFortHiddenRewardQuantityPair, Quantity) == 0x000008, "Member 'FFortHiddenRewardQuantityPair::Quantity' has a wrong offset!");

// ScriptStruct FortniteGame.FortRewardInfo
// 0x0030 (0x0030 - 0x0000)
struct FFortRewardInfo final
{
public:
	TArray<struct FFortSelectableRewardOption>    SelectableRewards;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortItemQuantityPair>          StandardRewards;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortHiddenRewardQuantityPair>  HiddenRewards;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortRewardInfo) == 0x000008, "Wrong alignment on FFortRewardInfo");
static_assert(sizeof(FFortRewardInfo) == 0x000030, "Wrong size on FFortRewardInfo");
static_assert(offsetof(FFortRewardInfo, SelectableRewards) == 0x000000, "Member 'FFortRewardInfo::SelectableRewards' has a wrong offset!");
static_assert(offsetof(FFortRewardInfo, StandardRewards) == 0x000010, "Member 'FFortRewardInfo::StandardRewards' has a wrong offset!");
static_assert(offsetof(FFortRewardInfo, HiddenRewards) == 0x000020, "Member 'FFortRewardInfo::HiddenRewards' has a wrong offset!");

// ScriptStruct FortniteGame.FortCollectionBookRewards
// 0x0070 (0x0070 - 0x0000)
struct FFortCollectionBookRewards final
{
public:
	ECollectionBookRewardType                     RewardType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PageId;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionId;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XpRequired;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Description;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bIsMajorReward;                                    // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortRewardInfo                        Rewards;                                           // 0x0040(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCollectionBookRewards) == 0x000008, "Wrong alignment on FFortCollectionBookRewards");
static_assert(sizeof(FFortCollectionBookRewards) == 0x000070, "Wrong size on FFortCollectionBookRewards");
static_assert(offsetof(FFortCollectionBookRewards, RewardType) == 0x000000, "Member 'FFortCollectionBookRewards::RewardType' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookRewards, PageId) == 0x000008, "Member 'FFortCollectionBookRewards::PageId' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookRewards, SectionId) == 0x000010, "Member 'FFortCollectionBookRewards::SectionId' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookRewards, XpRequired) == 0x000018, "Member 'FFortCollectionBookRewards::XpRequired' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookRewards, Description) == 0x000020, "Member 'FFortCollectionBookRewards::Description' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookRewards, bIsMajorReward) == 0x000038, "Member 'FFortCollectionBookRewards::bIsMajorReward' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookRewards, Rewards) == 0x000040, "Member 'FFortCollectionBookRewards::Rewards' has a wrong offset!");

// ScriptStruct FortniteGame.HomebaseNodeInstancePrerequisites
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FHomebaseNodeInstancePrerequisites final
{
public:
	class FName                                   NodeInstanceId;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideConnection;                                   // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PrereqPageId;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPrereqNodeType                               PrereqNodeType;                                    // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinOwnedNodesRequiredFromPrereqPage;               // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHomebaseNodeInstancePrerequisites) == 0x000008, "Wrong alignment on FHomebaseNodeInstancePrerequisites");
static_assert(sizeof(FHomebaseNodeInstancePrerequisites) == 0x000020, "Wrong size on FHomebaseNodeInstancePrerequisites");
static_assert(offsetof(FHomebaseNodeInstancePrerequisites, NodeInstanceId) == 0x000000, "Member 'FHomebaseNodeInstancePrerequisites::NodeInstanceId' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeInstancePrerequisites, bHideConnection) == 0x000008, "Member 'FHomebaseNodeInstancePrerequisites::bHideConnection' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeInstancePrerequisites, PrereqPageId) == 0x000010, "Member 'FHomebaseNodeInstancePrerequisites::PrereqPageId' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeInstancePrerequisites, PrereqNodeType) == 0x000018, "Member 'FHomebaseNodeInstancePrerequisites::PrereqNodeType' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeInstancePrerequisites, MinOwnedNodesRequiredFromPrereqPage) == 0x00001C, "Member 'FHomebaseNodeInstancePrerequisites::MinOwnedNodesRequiredFromPrereqPage' has a wrong offset!");

// ScriptStruct FortniteGame.EarnedBadgeEntryArray
// 0x0010 (0x00C0 - 0x00B0)
struct FEarnedBadgeEntryArray final : public FFastArraySerializer
{
public:
	TArray<struct FEarnedBadgeEntry>              Items;                                             // 0x00B0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FEarnedBadgeEntryArray) == 0x000008, "Wrong alignment on FEarnedBadgeEntryArray");
static_assert(sizeof(FEarnedBadgeEntryArray) == 0x0000C0, "Wrong size on FEarnedBadgeEntryArray");
static_assert(offsetof(FEarnedBadgeEntryArray, Items) == 0x0000B0, "Member 'FEarnedBadgeEntryArray::Items' has a wrong offset!");

// ScriptStruct FortniteGame.HomebaseNodeANDPrerequisites
// 0x0010 (0x0010 - 0x0000)
struct FHomebaseNodeANDPrerequisites final
{
public:
	TArray<struct FHomebaseNodeInstancePrerequisites> AND_Prerequisites;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHomebaseNodeANDPrerequisites) == 0x000008, "Wrong alignment on FHomebaseNodeANDPrerequisites");
static_assert(sizeof(FHomebaseNodeANDPrerequisites) == 0x000010, "Wrong size on FHomebaseNodeANDPrerequisites");
static_assert(offsetof(FHomebaseNodeANDPrerequisites, AND_Prerequisites) == 0x000000, "Member 'FHomebaseNodeANDPrerequisites::AND_Prerequisites' has a wrong offset!");

// ScriptStruct FortniteGame.HomebaseNode
// 0x00B8 (0x00C0 - 0x0008)
struct FHomebaseNode final : public FTableRowBase
{
public:
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FHomebaseNodeANDPrerequisites>  OR_Prerequisites;                                  // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortItemQuantityPair>          Cost;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UFortQuestItemDefinition>> QuestTemplateRequirements;                         // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	EFortHomebaseNodeDisplayType                  DisplayType;                                       // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortHomebaseNodeMagnitude                    DisplayMagnitude;                                  // 0x0051(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortHomebaseNodeActionType                   ActionType;                                        // 0x0052(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53[0x5];                                       // 0x0053(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DrillDownNodePageId;                               // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAbilityKit*                        AbilityKit;                                        // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            GameplayEffect;                                    // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           GameplayEffectRowNames;                            // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FHomebaseSquadSlotId>           UnlockedSquadSlots;                                // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NumPowerPoints;                                    // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   StyleId;                                           // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x00A0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortTooltip>               CustomTooltip;                                     // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHomebaseNode) == 0x000008, "Wrong alignment on FHomebaseNode");
static_assert(sizeof(FHomebaseNode) == 0x0000C0, "Wrong size on FHomebaseNode");
static_assert(offsetof(FHomebaseNode, DisplayName) == 0x000008, "Member 'FHomebaseNode::DisplayName' has a wrong offset!");
static_assert(offsetof(FHomebaseNode, OR_Prerequisites) == 0x000020, "Member 'FHomebaseNode::OR_Prerequisites' has a wrong offset!");
static_assert(offsetof(FHomebaseNode, Cost) == 0x000030, "Member 'FHomebaseNode::Cost' has a wrong offset!");
static_assert(offsetof(FHomebaseNode, QuestTemplateRequirements) == 0x000040, "Member 'FHomebaseNode::QuestTemplateRequirements' has a wrong offset!");
static_assert(offsetof(FHomebaseNode, DisplayType) == 0x000050, "Member 'FHomebaseNode::DisplayType' has a wrong offset!");
static_assert(offsetof(FHomebaseNode, DisplayMagnitude) == 0x000051, "Member 'FHomebaseNode::DisplayMagnitude' has a wrong offset!");
static_assert(offsetof(FHomebaseNode, ActionType) == 0x000052, "Member 'FHomebaseNode::ActionType' has a wrong offset!");
static_assert(offsetof(FHomebaseNode, DrillDownNodePageId) == 0x000058, "Member 'FHomebaseNode::DrillDownNodePageId' has a wrong offset!");
static_assert(offsetof(FHomebaseNode, AbilityKit) == 0x000060, "Member 'FHomebaseNode::AbilityKit' has a wrong offset!");
static_assert(offsetof(FHomebaseNode, GameplayEffect) == 0x000068, "Member 'FHomebaseNode::GameplayEffect' has a wrong offset!");
static_assert(offsetof(FHomebaseNode, GameplayEffectRowNames) == 0x000070, "Member 'FHomebaseNode::GameplayEffectRowNames' has a wrong offset!");
static_assert(offsetof(FHomebaseNode, UnlockedSquadSlots) == 0x000080, "Member 'FHomebaseNode::UnlockedSquadSlots' has a wrong offset!");
static_assert(offsetof(FHomebaseNode, NumPowerPoints) == 0x000090, "Member 'FHomebaseNode::NumPowerPoints' has a wrong offset!");
static_assert(offsetof(FHomebaseNode, StyleId) == 0x000098, "Member 'FHomebaseNode::StyleId' has a wrong offset!");
static_assert(offsetof(FHomebaseNode, Description) == 0x0000A0, "Member 'FHomebaseNode::Description' has a wrong offset!");
static_assert(offsetof(FHomebaseNode, CustomTooltip) == 0x0000B8, "Member 'FHomebaseNode::CustomTooltip' has a wrong offset!");

// ScriptStruct FortniteGame.FortExperienceDelta
// 0x0024 (0x0024 - 0x0000)
struct FFortExperienceDelta final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Xp;                                                // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BaseXPEarned;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BonusXPEarned;                                     // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoostXPEarned;                                     // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoostXPMissed;                                     // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RestXPEarned;                                      // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupBoostXPEarned;                                // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortIsFinalXpUpdate                          IsFinalXpUpdate;                                   // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortExperienceDelta) == 0x000004, "Wrong alignment on FFortExperienceDelta");
static_assert(sizeof(FFortExperienceDelta) == 0x000024, "Wrong size on FFortExperienceDelta");
static_assert(offsetof(FFortExperienceDelta, Level) == 0x000000, "Member 'FFortExperienceDelta::Level' has a wrong offset!");
static_assert(offsetof(FFortExperienceDelta, Xp) == 0x000004, "Member 'FFortExperienceDelta::Xp' has a wrong offset!");
static_assert(offsetof(FFortExperienceDelta, BaseXPEarned) == 0x000008, "Member 'FFortExperienceDelta::BaseXPEarned' has a wrong offset!");
static_assert(offsetof(FFortExperienceDelta, BonusXPEarned) == 0x00000C, "Member 'FFortExperienceDelta::BonusXPEarned' has a wrong offset!");
static_assert(offsetof(FFortExperienceDelta, BoostXPEarned) == 0x000010, "Member 'FFortExperienceDelta::BoostXPEarned' has a wrong offset!");
static_assert(offsetof(FFortExperienceDelta, BoostXPMissed) == 0x000014, "Member 'FFortExperienceDelta::BoostXPMissed' has a wrong offset!");
static_assert(offsetof(FFortExperienceDelta, RestXPEarned) == 0x000018, "Member 'FFortExperienceDelta::RestXPEarned' has a wrong offset!");
static_assert(offsetof(FFortExperienceDelta, GroupBoostXPEarned) == 0x00001C, "Member 'FFortExperienceDelta::GroupBoostXPEarned' has a wrong offset!");
static_assert(offsetof(FFortExperienceDelta, IsFinalXpUpdate) == 0x000020, "Member 'FFortExperienceDelta::IsFinalXpUpdate' has a wrong offset!");

// ScriptStruct FortniteGame.ReplicatedStatValues
// 0x0008 (0x0008 - 0x0000)
struct FReplicatedStatValues final
{
public:
	int32                                         StatValue;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScoreValue;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReplicatedStatValues) == 0x000004, "Wrong alignment on FReplicatedStatValues");
static_assert(sizeof(FReplicatedStatValues) == 0x000008, "Wrong size on FReplicatedStatValues");
static_assert(offsetof(FReplicatedStatValues, StatValue) == 0x000000, "Member 'FReplicatedStatValues::StatValue' has a wrong offset!");
static_assert(offsetof(FReplicatedStatValues, ScoreValue) == 0x000004, "Member 'FReplicatedStatValues::ScoreValue' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlayerScoreReport
// 0x0298 (0x0298 - 0x0000)
struct FFortPlayerScoreReport final
{
public:
	struct FUniqueNetIdRepl                       PlayerID;                                          // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AFortPlayerState>        PlayerState;                                       // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortTeam                                     PlayerTeam;                                        // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FReplicatedStatValues                  ReplicatedStats_Campaign[0x22];                    // 0x0044(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	struct FReplicatedStatValues                  ReplicatedStats_Zone[0x22];                        // 0x0154(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	int32                                         InitialLevel;                                      // 0x0264(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitialExperienceAmount;                           // 0x0268(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortExperienceDelta                   ExperienceInfoDelta;                               // 0x026C(0x0024)(NoDestructor, NativeAccessSpecifierPublic)
	int32                                         LastExperienceDeltaAmount;                         // 0x0290(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastScoreDeltaAmount;                              // 0x0294(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerScoreReport) == 0x000008, "Wrong alignment on FFortPlayerScoreReport");
static_assert(sizeof(FFortPlayerScoreReport) == 0x000298, "Wrong size on FFortPlayerScoreReport");
static_assert(offsetof(FFortPlayerScoreReport, PlayerID) == 0x000000, "Member 'FFortPlayerScoreReport::PlayerID' has a wrong offset!");
static_assert(offsetof(FFortPlayerScoreReport, PlayerName) == 0x000028, "Member 'FFortPlayerScoreReport::PlayerName' has a wrong offset!");
static_assert(offsetof(FFortPlayerScoreReport, PlayerState) == 0x000038, "Member 'FFortPlayerScoreReport::PlayerState' has a wrong offset!");
static_assert(offsetof(FFortPlayerScoreReport, PlayerTeam) == 0x000040, "Member 'FFortPlayerScoreReport::PlayerTeam' has a wrong offset!");
static_assert(offsetof(FFortPlayerScoreReport, ReplicatedStats_Campaign) == 0x000044, "Member 'FFortPlayerScoreReport::ReplicatedStats_Campaign' has a wrong offset!");
static_assert(offsetof(FFortPlayerScoreReport, ReplicatedStats_Zone) == 0x000154, "Member 'FFortPlayerScoreReport::ReplicatedStats_Zone' has a wrong offset!");
static_assert(offsetof(FFortPlayerScoreReport, InitialLevel) == 0x000264, "Member 'FFortPlayerScoreReport::InitialLevel' has a wrong offset!");
static_assert(offsetof(FFortPlayerScoreReport, InitialExperienceAmount) == 0x000268, "Member 'FFortPlayerScoreReport::InitialExperienceAmount' has a wrong offset!");
static_assert(offsetof(FFortPlayerScoreReport, ExperienceInfoDelta) == 0x00026C, "Member 'FFortPlayerScoreReport::ExperienceInfoDelta' has a wrong offset!");
static_assert(offsetof(FFortPlayerScoreReport, LastExperienceDeltaAmount) == 0x000290, "Member 'FFortPlayerScoreReport::LastExperienceDeltaAmount' has a wrong offset!");
static_assert(offsetof(FFortPlayerScoreReport, LastScoreDeltaAmount) == 0x000294, "Member 'FFortPlayerScoreReport::LastScoreDeltaAmount' has a wrong offset!");

// ScriptStruct FortniteGame.FortDepositedResources
// 0x0018 (0x0018 - 0x0000)
struct FFortDepositedResources final
{
public:
	class FString                                 TemplateId;                                        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortDepositedResources) == 0x000008, "Wrong alignment on FFortDepositedResources");
static_assert(sizeof(FFortDepositedResources) == 0x000018, "Wrong size on FFortDepositedResources");
static_assert(offsetof(FFortDepositedResources, TemplateId) == 0x000000, "Member 'FFortDepositedResources::TemplateId' has a wrong offset!");
static_assert(offsetof(FFortDepositedResources, Quantity) == 0x000010, "Member 'FFortDepositedResources::Quantity' has a wrong offset!");

// ScriptStruct FortniteGame.FortEncounterSettings
// 0x0058 (0x0058 - 0x0000)
struct FFortEncounterSettings final
{
public:
	TArray<EFortEncounterDirection>               ForbiddenSpawnDirections;                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bRiftsDestroyPlayerBuiltBuildings;                 // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMustFindSpawnPoints;                              // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrackCombatParticipation;                         // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisplayThreatVisuals;                             // 0x0013(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumRiftsToUseOverride;                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseEQSQueryToFindAISpawnLocations;                // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRelevantForTotalAICap;                            // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UEnvQuery*                              RiftSelectionQuery;                                // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ScriptedSpawnPoints;                               // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         WorkingScriptedSpawnPoints;                        // 0x0038(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class UFortDifficultyOptionCategoryEncounter*> InjectedOverrideCategories;                        // 0x0048(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEncounterSettings) == 0x000008, "Wrong alignment on FFortEncounterSettings");
static_assert(sizeof(FFortEncounterSettings) == 0x000058, "Wrong size on FFortEncounterSettings");
static_assert(offsetof(FFortEncounterSettings, ForbiddenSpawnDirections) == 0x000000, "Member 'FFortEncounterSettings::ForbiddenSpawnDirections' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, bRiftsDestroyPlayerBuiltBuildings) == 0x000010, "Member 'FFortEncounterSettings::bRiftsDestroyPlayerBuiltBuildings' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, bMustFindSpawnPoints) == 0x000011, "Member 'FFortEncounterSettings::bMustFindSpawnPoints' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, bTrackCombatParticipation) == 0x000012, "Member 'FFortEncounterSettings::bTrackCombatParticipation' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, bDisplayThreatVisuals) == 0x000013, "Member 'FFortEncounterSettings::bDisplayThreatVisuals' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, NumRiftsToUseOverride) == 0x000014, "Member 'FFortEncounterSettings::NumRiftsToUseOverride' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, bUseEQSQueryToFindAISpawnLocations) == 0x000018, "Member 'FFortEncounterSettings::bUseEQSQueryToFindAISpawnLocations' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, bRelevantForTotalAICap) == 0x000019, "Member 'FFortEncounterSettings::bRelevantForTotalAICap' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, RiftSelectionQuery) == 0x000020, "Member 'FFortEncounterSettings::RiftSelectionQuery' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, ScriptedSpawnPoints) == 0x000028, "Member 'FFortEncounterSettings::ScriptedSpawnPoints' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, WorkingScriptedSpawnPoints) == 0x000038, "Member 'FFortEncounterSettings::WorkingScriptedSpawnPoints' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, InjectedOverrideCategories) == 0x000048, "Member 'FFortEncounterSettings::InjectedOverrideCategories' has a wrong offset!");

// ScriptStruct FortniteGame.FortTheaterDifficultyWeight
// 0x0028 (0x0028 - 0x0000)
struct FFortTheaterDifficultyWeight final
{
public:
	struct FDataTableRowHandle                    DifficultyInfo;                                    // 0x0000(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 LootTierGroup;                                     // 0x0010(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortTheaterDifficultyWeight) == 0x000008, "Wrong alignment on FFortTheaterDifficultyWeight");
static_assert(sizeof(FFortTheaterDifficultyWeight) == 0x000028, "Wrong size on FFortTheaterDifficultyWeight");
static_assert(offsetof(FFortTheaterDifficultyWeight, DifficultyInfo) == 0x000000, "Member 'FFortTheaterDifficultyWeight::DifficultyInfo' has a wrong offset!");
static_assert(offsetof(FFortTheaterDifficultyWeight, LootTierGroup) == 0x000010, "Member 'FFortTheaterDifficultyWeight::LootTierGroup' has a wrong offset!");
static_assert(offsetof(FFortTheaterDifficultyWeight, Weight) == 0x000020, "Member 'FFortTheaterDifficultyWeight::Weight' has a wrong offset!");

// ScriptStruct FortniteGame.EnvironmentBuildingRestorationRecord
// 0x0050 (0x0050 - 0x0000)
struct FEnvironmentBuildingRestorationRecord final
{
public:
	TSubclassOf<class ABuildingActor>             ActorClass;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ActorTransform;                                    // 0x0010(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   QuotaSelectedLootTierKey;                          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuotaSelectedLootTier;                             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEnvironmentBuildingRestorationRecord) == 0x000010, "Wrong alignment on FEnvironmentBuildingRestorationRecord");
static_assert(sizeof(FEnvironmentBuildingRestorationRecord) == 0x000050, "Wrong size on FEnvironmentBuildingRestorationRecord");
static_assert(offsetof(FEnvironmentBuildingRestorationRecord, ActorClass) == 0x000000, "Member 'FEnvironmentBuildingRestorationRecord::ActorClass' has a wrong offset!");
static_assert(offsetof(FEnvironmentBuildingRestorationRecord, ActorTransform) == 0x000010, "Member 'FEnvironmentBuildingRestorationRecord::ActorTransform' has a wrong offset!");
static_assert(offsetof(FEnvironmentBuildingRestorationRecord, QuotaSelectedLootTierKey) == 0x000040, "Member 'FEnvironmentBuildingRestorationRecord::QuotaSelectedLootTierKey' has a wrong offset!");
static_assert(offsetof(FEnvironmentBuildingRestorationRecord, QuotaSelectedLootTier) == 0x000048, "Member 'FEnvironmentBuildingRestorationRecord::QuotaSelectedLootTier' has a wrong offset!");

// ScriptStruct FortniteGame.FortLinkedQuest
// 0x0018 (0x0018 - 0x0000)
struct FFortLinkedQuest final
{
public:
	class UFortQuestItemDefinition*               QuestDefinition;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    ObjectiveStatHandle;                               // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortLinkedQuest) == 0x000008, "Wrong alignment on FFortLinkedQuest");
static_assert(sizeof(FFortLinkedQuest) == 0x000018, "Wrong size on FFortLinkedQuest");
static_assert(offsetof(FFortLinkedQuest, QuestDefinition) == 0x000000, "Member 'FFortLinkedQuest::QuestDefinition' has a wrong offset!");
static_assert(offsetof(FFortLinkedQuest, ObjectiveStatHandle) == 0x000008, "Member 'FFortLinkedQuest::ObjectiveStatHandle' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaWeaponAlterationRule
// 0x0058 (0x0058 - 0x0000)
struct FAthenaWeaponAlterationRule final
{
public:
	struct FGameplayTagQuery                      MatchCriteria;                                     // 0x0000(0x0048)(Edit, NativeAccessSpecifierPublic)
	TArray<class UFortAlterationItemDefinition*>  Alterations;                                       // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaWeaponAlterationRule) == 0x000008, "Wrong alignment on FAthenaWeaponAlterationRule");
static_assert(sizeof(FAthenaWeaponAlterationRule) == 0x000058, "Wrong size on FAthenaWeaponAlterationRule");
static_assert(offsetof(FAthenaWeaponAlterationRule, MatchCriteria) == 0x000000, "Member 'FAthenaWeaponAlterationRule::MatchCriteria' has a wrong offset!");
static_assert(offsetof(FAthenaWeaponAlterationRule, Alterations) == 0x000048, "Member 'FAthenaWeaponAlterationRule::Alterations' has a wrong offset!");

// ScriptStruct FortniteGame.TileGroupInfo
// 0x0018 (0x0018 - 0x0000)
struct FTileGroupInfo final
{
public:
	class UWorldTileGroup*                        TileGroup;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Weight;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinTiles;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTiles;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bPlaceAdjacent : 1;                                // 0x0014(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTileGroupInfo) == 0x000008, "Wrong alignment on FTileGroupInfo");
static_assert(sizeof(FTileGroupInfo) == 0x000018, "Wrong size on FTileGroupInfo");
static_assert(offsetof(FTileGroupInfo, TileGroup) == 0x000000, "Member 'FTileGroupInfo::TileGroup' has a wrong offset!");
static_assert(offsetof(FTileGroupInfo, Weight) == 0x000008, "Member 'FTileGroupInfo::Weight' has a wrong offset!");
static_assert(offsetof(FTileGroupInfo, MinTiles) == 0x00000C, "Member 'FTileGroupInfo::MinTiles' has a wrong offset!");
static_assert(offsetof(FTileGroupInfo, MaxTiles) == 0x000010, "Member 'FTileGroupInfo::MaxTiles' has a wrong offset!");

// ScriptStruct FortniteGame.FortInputActionDetails
// 0x0020 (0x0020 - 0x0000)
struct FFortInputActionDetails final
{
public:
	EFortInputActionType                          InputActionType;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   ActionKey;                                         // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortInputActionDetails) == 0x000008, "Wrong alignment on FFortInputActionDetails");
static_assert(sizeof(FFortInputActionDetails) == 0x000020, "Wrong size on FFortInputActionDetails");
static_assert(offsetof(FFortInputActionDetails, InputActionType) == 0x000000, "Member 'FFortInputActionDetails::InputActionType' has a wrong offset!");
static_assert(offsetof(FFortInputActionDetails, ActionKey) == 0x000008, "Member 'FFortInputActionDetails::ActionKey' has a wrong offset!");

// ScriptStruct FortniteGame.FortFXAnimationInfoBase
// 0x0018 (0x0018 - 0x0000)
struct FFortFXAnimationInfoBase
{
public:
	class UCurveFloat*                            LerpCurve;                                         // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortFXAnimationInfoBase) == 0x000008, "Wrong alignment on FFortFXAnimationInfoBase");
static_assert(sizeof(FFortFXAnimationInfoBase) == 0x000018, "Wrong size on FFortFXAnimationInfoBase");
static_assert(offsetof(FFortFXAnimationInfoBase, LerpCurve) == 0x000000, "Member 'FFortFXAnimationInfoBase::LerpCurve' has a wrong offset!");

// ScriptStruct FortniteGame.FortLinearColorCurveAnimationInfo
// 0x0010 (0x0028 - 0x0018)
struct FFortLinearColorCurveAnimationInfo : public FFortFXAnimationInfoBase
{
public:
	uint8                                         Pad_18[0x10];                                      // 0x0018(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortLinearColorCurveAnimationInfo) == 0x000008, "Wrong alignment on FFortLinearColorCurveAnimationInfo");
static_assert(sizeof(FFortLinearColorCurveAnimationInfo) == 0x000028, "Wrong size on FFortLinearColorCurveAnimationInfo");

// ScriptStruct FortniteGame.FortLinearColorCurveParamAnimationInfo
// 0x0008 (0x0030 - 0x0028)
struct FFortLinearColorCurveParamAnimationInfo final : public FFortLinearColorCurveAnimationInfo
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortLinearColorCurveParamAnimationInfo) == 0x000008, "Wrong alignment on FFortLinearColorCurveParamAnimationInfo");
static_assert(sizeof(FFortLinearColorCurveParamAnimationInfo) == 0x000030, "Wrong size on FFortLinearColorCurveParamAnimationInfo");

// ScriptStruct FortniteGame.ConfirmationDialogAction
// 0x00B8 (0x00B8 - 0x0000)
struct FConfirmationDialogAction final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   HoverText;                                         // 0x0018(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   ResultName;                                        // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Icon;                                              // 0x0038(0x0078)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   ActionName;                                        // 0x00B0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfirmationDialogAction) == 0x000008, "Wrong alignment on FConfirmationDialogAction");
static_assert(sizeof(FConfirmationDialogAction) == 0x0000B8, "Wrong size on FConfirmationDialogAction");
static_assert(offsetof(FConfirmationDialogAction, DisplayName) == 0x000000, "Member 'FConfirmationDialogAction::DisplayName' has a wrong offset!");
static_assert(offsetof(FConfirmationDialogAction, HoverText) == 0x000018, "Member 'FConfirmationDialogAction::HoverText' has a wrong offset!");
static_assert(offsetof(FConfirmationDialogAction, ResultName) == 0x000030, "Member 'FConfirmationDialogAction::ResultName' has a wrong offset!");
static_assert(offsetof(FConfirmationDialogAction, Icon) == 0x000038, "Member 'FConfirmationDialogAction::Icon' has a wrong offset!");
static_assert(offsetof(FConfirmationDialogAction, ActionName) == 0x0000B0, "Member 'FConfirmationDialogAction::ActionName' has a wrong offset!");

// ScriptStruct FortniteGame.FortDialogDescription_NUI
// 0x0170 (0x0170 - 0x0000)
struct alignas(0x10) FFortDialogDescription_NUI final
{
public:
	struct FSlateBrush                            Icon;                                              // 0x0000(0x0078)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   MessageHeader;                                     // 0x0078(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   MessageBody;                                       // 0x0090(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FConfirmationDialogAction>      ConfirmButtonInputActions;                         // 0x00A8(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   DeclineButtonInputAction;                          // 0x00B8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultipleConfirmButtons;                           // 0x00C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                AdditionalContent;                                 // 0x00C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                LeftAdditionalContent;                             // 0x00D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplayTime;                                       // 0x00D8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Dismissable;                                       // 0x00DC(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldWaitForLatentActionOnConfirmAction;         // 0x00DD(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DE[0x2];                                       // 0x00DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortNotificationHandler*               NotificationHandler;                               // 0x00E0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x88];                                      // 0x00E8(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortDialogDescription_NUI) == 0x000010, "Wrong alignment on FFortDialogDescription_NUI");
static_assert(sizeof(FFortDialogDescription_NUI) == 0x000170, "Wrong size on FFortDialogDescription_NUI");
static_assert(offsetof(FFortDialogDescription_NUI, Icon) == 0x000000, "Member 'FFortDialogDescription_NUI::Icon' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription_NUI, MessageHeader) == 0x000078, "Member 'FFortDialogDescription_NUI::MessageHeader' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription_NUI, MessageBody) == 0x000090, "Member 'FFortDialogDescription_NUI::MessageBody' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription_NUI, ConfirmButtonInputActions) == 0x0000A8, "Member 'FFortDialogDescription_NUI::ConfirmButtonInputActions' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription_NUI, DeclineButtonInputAction) == 0x0000B8, "Member 'FFortDialogDescription_NUI::DeclineButtonInputAction' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription_NUI, bMultipleConfirmButtons) == 0x0000C0, "Member 'FFortDialogDescription_NUI::bMultipleConfirmButtons' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription_NUI, AdditionalContent) == 0x0000C8, "Member 'FFortDialogDescription_NUI::AdditionalContent' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription_NUI, LeftAdditionalContent) == 0x0000D0, "Member 'FFortDialogDescription_NUI::LeftAdditionalContent' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription_NUI, DisplayTime) == 0x0000D8, "Member 'FFortDialogDescription_NUI::DisplayTime' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription_NUI, Dismissable) == 0x0000DC, "Member 'FFortDialogDescription_NUI::Dismissable' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription_NUI, bShouldWaitForLatentActionOnConfirmAction) == 0x0000DD, "Member 'FFortDialogDescription_NUI::bShouldWaitForLatentActionOnConfirmAction' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription_NUI, NotificationHandler) == 0x0000E0, "Member 'FFortDialogDescription_NUI::NotificationHandler' has a wrong offset!");

// ScriptStruct FortniteGame.FortSearchPassParams
// 0x0028 (0x0028 - 0x0000)
struct FFortSearchPassParams final
{
public:
	int32                                         ControllerId;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SessionName;                                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BestDatacenterId;                                  // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxProcessedSearchResults;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortSearchPassParams) == 0x000008, "Wrong alignment on FFortSearchPassParams");
static_assert(sizeof(FFortSearchPassParams) == 0x000028, "Wrong size on FFortSearchPassParams");
static_assert(offsetof(FFortSearchPassParams, ControllerId) == 0x000000, "Member 'FFortSearchPassParams::ControllerId' has a wrong offset!");
static_assert(offsetof(FFortSearchPassParams, SessionName) == 0x000008, "Member 'FFortSearchPassParams::SessionName' has a wrong offset!");
static_assert(offsetof(FFortSearchPassParams, BestDatacenterId) == 0x000010, "Member 'FFortSearchPassParams::BestDatacenterId' has a wrong offset!");
static_assert(offsetof(FFortSearchPassParams, MaxProcessedSearchResults) == 0x000020, "Member 'FFortSearchPassParams::MaxProcessedSearchResults' has a wrong offset!");

// ScriptStruct FortniteGame.AIHotSpotSlotConfig
// 0x001C (0x001C - 0x0000)
struct FAIHotSpotSlotConfig final
{
public:
	struct FVector                                Offset;                                            // 0x0000(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x000C(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortHotSpotSlot                              SlotType;                                          // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIHotSpotSlotConfig) == 0x000004, "Wrong alignment on FAIHotSpotSlotConfig");
static_assert(sizeof(FAIHotSpotSlotConfig) == 0x00001C, "Wrong size on FAIHotSpotSlotConfig");
static_assert(offsetof(FAIHotSpotSlotConfig, Offset) == 0x000000, "Member 'FAIHotSpotSlotConfig::Offset' has a wrong offset!");
static_assert(offsetof(FAIHotSpotSlotConfig, Direction) == 0x00000C, "Member 'FAIHotSpotSlotConfig::Direction' has a wrong offset!");
static_assert(offsetof(FAIHotSpotSlotConfig, SlotType) == 0x000018, "Member 'FAIHotSpotSlotConfig::SlotType' has a wrong offset!");

// ScriptStruct FortniteGame.FortTagUIData
// 0x0308 (0x0308 - 0x0000)
struct FFortTagUIData final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortMultiSizeBrush                    Icon;                                              // 0x0008(0x02D0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x02D8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x02F0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTagUIData) == 0x000008, "Wrong alignment on FFortTagUIData");
static_assert(sizeof(FFortTagUIData) == 0x000308, "Wrong size on FFortTagUIData");
static_assert(offsetof(FFortTagUIData, Tag) == 0x000000, "Member 'FFortTagUIData::Tag' has a wrong offset!");
static_assert(offsetof(FFortTagUIData, Icon) == 0x000008, "Member 'FFortTagUIData::Icon' has a wrong offset!");
static_assert(offsetof(FFortTagUIData, DisplayName) == 0x0002D8, "Member 'FFortTagUIData::DisplayName' has a wrong offset!");
static_assert(offsetof(FFortTagUIData, Description) == 0x0002F0, "Member 'FFortTagUIData::Description' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlayerDeathReport
// 0x0050 (0x0050 - 0x0000)
struct FFortPlayerDeathReport final
{
public:
	float                                         ServerTimeForRespawn;                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ServerTimeForResurrect;                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LethalDamage;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerStateAthena*                       KillerPlayerState;                                 // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerPawnAthena*                            KillerPawn;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bDroppedBackpack : 1;                              // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNotifyUI : 1;                                     // 0x0028(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  Tags;                                              // 0x0030(0x0020)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerDeathReport) == 0x000008, "Wrong alignment on FFortPlayerDeathReport");
static_assert(sizeof(FFortPlayerDeathReport) == 0x000050, "Wrong size on FFortPlayerDeathReport");
static_assert(offsetof(FFortPlayerDeathReport, ServerTimeForRespawn) == 0x000000, "Member 'FFortPlayerDeathReport::ServerTimeForRespawn' has a wrong offset!");
static_assert(offsetof(FFortPlayerDeathReport, ServerTimeForResurrect) == 0x000004, "Member 'FFortPlayerDeathReport::ServerTimeForResurrect' has a wrong offset!");
static_assert(offsetof(FFortPlayerDeathReport, LethalDamage) == 0x000008, "Member 'FFortPlayerDeathReport::LethalDamage' has a wrong offset!");
static_assert(offsetof(FFortPlayerDeathReport, KillerPlayerState) == 0x000010, "Member 'FFortPlayerDeathReport::KillerPlayerState' has a wrong offset!");
static_assert(offsetof(FFortPlayerDeathReport, KillerPawn) == 0x000018, "Member 'FFortPlayerDeathReport::KillerPawn' has a wrong offset!");
static_assert(offsetof(FFortPlayerDeathReport, DamageCauser) == 0x000020, "Member 'FFortPlayerDeathReport::DamageCauser' has a wrong offset!");
static_assert(offsetof(FFortPlayerDeathReport, Tags) == 0x000030, "Member 'FFortPlayerDeathReport::Tags' has a wrong offset!");

// ScriptStruct FortniteGame.EndOfDayRecap
// 0x0020 (0x0020 - 0x0000)
struct FEndOfDayRecap final
{
public:
	int32                                         DayNumber;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamScoreAtStartOfDay;                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamScoreAtEndOfDay;                               // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortPlayerScoreReport>         ScoreReports;                                      // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndOfDayRecap) == 0x000008, "Wrong alignment on FEndOfDayRecap");
static_assert(sizeof(FEndOfDayRecap) == 0x000020, "Wrong size on FEndOfDayRecap");
static_assert(offsetof(FEndOfDayRecap, DayNumber) == 0x000000, "Member 'FEndOfDayRecap::DayNumber' has a wrong offset!");
static_assert(offsetof(FEndOfDayRecap, TeamScoreAtStartOfDay) == 0x000004, "Member 'FEndOfDayRecap::TeamScoreAtStartOfDay' has a wrong offset!");
static_assert(offsetof(FEndOfDayRecap, TeamScoreAtEndOfDay) == 0x000008, "Member 'FEndOfDayRecap::TeamScoreAtEndOfDay' has a wrong offset!");
static_assert(offsetof(FEndOfDayRecap, ScoreReports) == 0x000010, "Member 'FEndOfDayRecap::ScoreReports' has a wrong offset!");

// ScriptStruct FortniteGame.MyFortCategoryData
// 0x0058 (0x0058 - 0x0000)
struct FMyFortCategoryData final
{
public:
	class FText                                   CategoryName;                                      // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TooltipTag;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ModifiedTagContainer;                              // 0x0020(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bIsCore;                                           // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayAttribute>             Attributes;                                        // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMyFortCategoryData) == 0x000008, "Wrong alignment on FMyFortCategoryData");
static_assert(sizeof(FMyFortCategoryData) == 0x000058, "Wrong size on FMyFortCategoryData");
static_assert(offsetof(FMyFortCategoryData, CategoryName) == 0x000000, "Member 'FMyFortCategoryData::CategoryName' has a wrong offset!");
static_assert(offsetof(FMyFortCategoryData, TooltipTag) == 0x000018, "Member 'FMyFortCategoryData::TooltipTag' has a wrong offset!");
static_assert(offsetof(FMyFortCategoryData, ModifiedTagContainer) == 0x000020, "Member 'FMyFortCategoryData::ModifiedTagContainer' has a wrong offset!");
static_assert(offsetof(FMyFortCategoryData, bIsCore) == 0x000040, "Member 'FMyFortCategoryData::bIsCore' has a wrong offset!");
static_assert(offsetof(FMyFortCategoryData, Attributes) == 0x000048, "Member 'FMyFortCategoryData::Attributes' has a wrong offset!");

// ScriptStruct FortniteGame.FortAttributeDetailsInfo
// 0x0320 (0x0320 - 0x0000)
struct FFortAttributeDetailsInfo final
{
public:
	struct FGameplayTagContainer                  RequiredTags;                                      // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FFortMultiSizeBrush                    Icon;                                              // 0x0020(0x02D0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x02F0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0308(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAttributeDetailsInfo) == 0x000008, "Wrong alignment on FFortAttributeDetailsInfo");
static_assert(sizeof(FFortAttributeDetailsInfo) == 0x000320, "Wrong size on FFortAttributeDetailsInfo");
static_assert(offsetof(FFortAttributeDetailsInfo, RequiredTags) == 0x000000, "Member 'FFortAttributeDetailsInfo::RequiredTags' has a wrong offset!");
static_assert(offsetof(FFortAttributeDetailsInfo, Icon) == 0x000020, "Member 'FFortAttributeDetailsInfo::Icon' has a wrong offset!");
static_assert(offsetof(FFortAttributeDetailsInfo, DisplayName) == 0x0002F0, "Member 'FFortAttributeDetailsInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FFortAttributeDetailsInfo, Description) == 0x000308, "Member 'FFortAttributeDetailsInfo::Description' has a wrong offset!");

// ScriptStruct FortniteGame.FortAttributeInfo
// 0x0078 (0x0078 - 0x0000)
struct FFortAttributeInfo final
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAttributeDisplay                         DisplayMethod;                                     // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   UnitDisplayName;                                   // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         DisplayScalingFactor;                              // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   FormatText;                                        // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FFortAttributeDetailsInfo>      AttributeDetails;                                  // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bShowInSummaries;                                  // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowInDifferences;                                // 0x0071(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowAsBuffInFE;                                   // 0x0072(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNegativeValuesShouldBeDisplayedPositively;        // 0x0073(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAttributeInfo) == 0x000008, "Wrong alignment on FFortAttributeInfo");
static_assert(sizeof(FFortAttributeInfo) == 0x000078, "Wrong size on FFortAttributeInfo");
static_assert(offsetof(FFortAttributeInfo, Attribute) == 0x000000, "Member 'FFortAttributeInfo::Attribute' has a wrong offset!");
static_assert(offsetof(FFortAttributeInfo, DisplayMethod) == 0x000020, "Member 'FFortAttributeInfo::DisplayMethod' has a wrong offset!");
static_assert(offsetof(FFortAttributeInfo, UnitDisplayName) == 0x000028, "Member 'FFortAttributeInfo::UnitDisplayName' has a wrong offset!");
static_assert(offsetof(FFortAttributeInfo, DisplayScalingFactor) == 0x000040, "Member 'FFortAttributeInfo::DisplayScalingFactor' has a wrong offset!");
static_assert(offsetof(FFortAttributeInfo, FormatText) == 0x000048, "Member 'FFortAttributeInfo::FormatText' has a wrong offset!");
static_assert(offsetof(FFortAttributeInfo, AttributeDetails) == 0x000060, "Member 'FFortAttributeInfo::AttributeDetails' has a wrong offset!");
static_assert(offsetof(FFortAttributeInfo, bShowInSummaries) == 0x000070, "Member 'FFortAttributeInfo::bShowInSummaries' has a wrong offset!");
static_assert(offsetof(FFortAttributeInfo, bShowInDifferences) == 0x000071, "Member 'FFortAttributeInfo::bShowInDifferences' has a wrong offset!");
static_assert(offsetof(FFortAttributeInfo, bShowAsBuffInFE) == 0x000072, "Member 'FFortAttributeInfo::bShowAsBuffInFE' has a wrong offset!");
static_assert(offsetof(FFortAttributeInfo, bNegativeValuesShouldBeDisplayedPositively) == 0x000073, "Member 'FFortAttributeInfo::bNegativeValuesShouldBeDisplayedPositively' has a wrong offset!");

// ScriptStruct FortniteGame.FortAvailableMissionData
// 0x00A8 (0x00A8 - 0x0000)
struct FFortAvailableMissionData final
{
public:
	class FString                                 MissionGuid;                                       // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMcpLootResult                         MissionRewards;                                    // 0x0010(0x0020)(NativeAccessSpecifierPublic)
	struct FMcpLootResult                         BonusMissionRewards;                               // 0x0030(0x0020)(NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   MissionGenerator;                                  // 0x0050(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    MissionDifficultyInfo;                             // 0x0078(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	int32                                         TileIndex;                                         // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              AvailableUntil;                                    // 0x0090(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortItemDefinition*>            ItemDefinitionRefCache;                            // 0x0098(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAvailableMissionData) == 0x000008, "Wrong alignment on FFortAvailableMissionData");
static_assert(sizeof(FFortAvailableMissionData) == 0x0000A8, "Wrong size on FFortAvailableMissionData");
static_assert(offsetof(FFortAvailableMissionData, MissionGuid) == 0x000000, "Member 'FFortAvailableMissionData::MissionGuid' has a wrong offset!");
static_assert(offsetof(FFortAvailableMissionData, MissionRewards) == 0x000010, "Member 'FFortAvailableMissionData::MissionRewards' has a wrong offset!");
static_assert(offsetof(FFortAvailableMissionData, BonusMissionRewards) == 0x000030, "Member 'FFortAvailableMissionData::BonusMissionRewards' has a wrong offset!");
static_assert(offsetof(FFortAvailableMissionData, MissionGenerator) == 0x000050, "Member 'FFortAvailableMissionData::MissionGenerator' has a wrong offset!");
static_assert(offsetof(FFortAvailableMissionData, MissionDifficultyInfo) == 0x000078, "Member 'FFortAvailableMissionData::MissionDifficultyInfo' has a wrong offset!");
static_assert(offsetof(FFortAvailableMissionData, TileIndex) == 0x000088, "Member 'FFortAvailableMissionData::TileIndex' has a wrong offset!");
static_assert(offsetof(FFortAvailableMissionData, AvailableUntil) == 0x000090, "Member 'FFortAvailableMissionData::AvailableUntil' has a wrong offset!");
static_assert(offsetof(FFortAvailableMissionData, ItemDefinitionRefCache) == 0x000098, "Member 'FFortAvailableMissionData::ItemDefinitionRefCache' has a wrong offset!");

// ScriptStruct FortniteGame.FortAvailableMissionAlerts
// 0x0028 (0x0028 - 0x0000)
struct FFortAvailableMissionAlerts final
{
public:
	class FString                                 TheaterId;                                         // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortAvailableMissionAlertData> AvailableMissionAlerts;                            // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              NextRefresh;                                       // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAvailableMissionAlerts) == 0x000008, "Wrong alignment on FFortAvailableMissionAlerts");
static_assert(sizeof(FFortAvailableMissionAlerts) == 0x000028, "Wrong size on FFortAvailableMissionAlerts");
static_assert(offsetof(FFortAvailableMissionAlerts, TheaterId) == 0x000000, "Member 'FFortAvailableMissionAlerts::TheaterId' has a wrong offset!");
static_assert(offsetof(FFortAvailableMissionAlerts, AvailableMissionAlerts) == 0x000010, "Member 'FFortAvailableMissionAlerts::AvailableMissionAlerts' has a wrong offset!");
static_assert(offsetof(FFortAvailableMissionAlerts, NextRefresh) == 0x000020, "Member 'FFortAvailableMissionAlerts::NextRefresh' has a wrong offset!");

// ScriptStruct FortniteGame.HomebaseBannerColor
// 0x0020 (0x0020 - 0x0000)
struct FHomebaseBannerColor final
{
public:
	struct FLinearColor                           PrimaryColor;                                      // 0x0000(0x0010)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLinearColor                           SecondaryColor;                                    // 0x0010(0x0010)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FHomebaseBannerColor) == 0x000004, "Wrong alignment on FHomebaseBannerColor");
static_assert(sizeof(FHomebaseBannerColor) == 0x000020, "Wrong size on FHomebaseBannerColor");
static_assert(offsetof(FHomebaseBannerColor, PrimaryColor) == 0x000000, "Member 'FHomebaseBannerColor::PrimaryColor' has a wrong offset!");
static_assert(offsetof(FHomebaseBannerColor, SecondaryColor) == 0x000010, "Member 'FHomebaseBannerColor::SecondaryColor' has a wrong offset!");

// ScriptStruct FortniteGame.FortClientAnnouncementData
// 0x0000 (0x0000 - 0x0000)
#pragma pack(push, 0x1)
struct alignas(0x01) FFortClientAnnouncementData
{
};
#pragma pack(pop)
static_assert(alignof(FFortClientAnnouncementData) == 0x000001, "Wrong alignment on FFortClientAnnouncementData");
static_assert(sizeof(FFortClientAnnouncementData) == 0x000001, "Wrong size on FFortClientAnnouncementData");

// ScriptStruct FortniteGame.AthenaLevelUpData
// 0x0020 (0x0028 - 0x0008)
struct FAthenaLevelUpData final : public FTableRowBase
{
public:
	int32                                         Level;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XpToNextLevel;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XpTotal;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrencyReward;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChaseRewardTemplateId;                             // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaLevelUpData) == 0x000008, "Wrong alignment on FAthenaLevelUpData");
static_assert(sizeof(FAthenaLevelUpData) == 0x000028, "Wrong size on FAthenaLevelUpData");
static_assert(offsetof(FAthenaLevelUpData, Level) == 0x000008, "Member 'FAthenaLevelUpData::Level' has a wrong offset!");
static_assert(offsetof(FAthenaLevelUpData, XpToNextLevel) == 0x00000C, "Member 'FAthenaLevelUpData::XpToNextLevel' has a wrong offset!");
static_assert(offsetof(FAthenaLevelUpData, XpTotal) == 0x000010, "Member 'FAthenaLevelUpData::XpTotal' has a wrong offset!");
static_assert(offsetof(FAthenaLevelUpData, CurrencyReward) == 0x000014, "Member 'FAthenaLevelUpData::CurrencyReward' has a wrong offset!");
static_assert(offsetof(FAthenaLevelUpData, ChaseRewardTemplateId) == 0x000018, "Member 'FAthenaLevelUpData::ChaseRewardTemplateId' has a wrong offset!");

// ScriptStruct FortniteGame.FortClientAnnouncementData_Basic
// 0x00D8 (0x00D8 - 0x0000)
struct FFortClientAnnouncementData_Basic : public FFortClientAnnouncementData
{
public:
	struct FSlateBrush                            Icon;                                              // 0x0000(0x0078)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   TitleText;                                         // 0x0078(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   DetailText;                                        // 0x0090(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   GamepadDetailText;                                 // 0x00A8(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DisplayTime;                                       // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             OnStartSound;                                      // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortClientAnnouncementData_Basic) == 0x000008, "Wrong alignment on FFortClientAnnouncementData_Basic");
static_assert(sizeof(FFortClientAnnouncementData_Basic) == 0x0000D8, "Wrong size on FFortClientAnnouncementData_Basic");
static_assert(offsetof(FFortClientAnnouncementData_Basic, Icon) == 0x000000, "Member 'FFortClientAnnouncementData_Basic::Icon' has a wrong offset!");
static_assert(offsetof(FFortClientAnnouncementData_Basic, TitleText) == 0x000078, "Member 'FFortClientAnnouncementData_Basic::TitleText' has a wrong offset!");
static_assert(offsetof(FFortClientAnnouncementData_Basic, DetailText) == 0x000090, "Member 'FFortClientAnnouncementData_Basic::DetailText' has a wrong offset!");
static_assert(offsetof(FFortClientAnnouncementData_Basic, GamepadDetailText) == 0x0000A8, "Member 'FFortClientAnnouncementData_Basic::GamepadDetailText' has a wrong offset!");
static_assert(offsetof(FFortClientAnnouncementData_Basic, Priority) == 0x0000C0, "Member 'FFortClientAnnouncementData_Basic::Priority' has a wrong offset!");
static_assert(offsetof(FFortClientAnnouncementData_Basic, DisplayTime) == 0x0000C8, "Member 'FFortClientAnnouncementData_Basic::DisplayTime' has a wrong offset!");
static_assert(offsetof(FFortClientAnnouncementData_Basic, OnStartSound) == 0x0000D0, "Member 'FFortClientAnnouncementData_Basic::OnStartSound' has a wrong offset!");

// ScriptStruct FortniteGame.FortVariantSpawnPoints
// 0x0008 (0x0010 - 0x0008)
struct FFortVariantSpawnPoints final : public FTableRowBase
{
public:
	int32                                         BudgetPoints;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortVariantSpawnPoints) == 0x000008, "Wrong alignment on FFortVariantSpawnPoints");
static_assert(sizeof(FFortVariantSpawnPoints) == 0x000010, "Wrong size on FFortVariantSpawnPoints");
static_assert(offsetof(FFortVariantSpawnPoints, BudgetPoints) == 0x000008, "Member 'FFortVariantSpawnPoints::BudgetPoints' has a wrong offset!");

// ScriptStruct FortniteGame.TeamFOBCoreBuildingEntry
// 0x002C (0x0038 - 0x000C)
struct FTeamFOBCoreBuildingEntry final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABuildingFOBCoreActor*                  FOB;                                               // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  SpawnLocationTags;                                 // 0x0018(0x0020)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTeamFOBCoreBuildingEntry) == 0x000008, "Wrong alignment on FTeamFOBCoreBuildingEntry");
static_assert(sizeof(FTeamFOBCoreBuildingEntry) == 0x000038, "Wrong size on FTeamFOBCoreBuildingEntry");
static_assert(offsetof(FTeamFOBCoreBuildingEntry, FOB) == 0x000010, "Member 'FTeamFOBCoreBuildingEntry::FOB' has a wrong offset!");
static_assert(offsetof(FTeamFOBCoreBuildingEntry, SpawnLocationTags) == 0x000018, "Member 'FTeamFOBCoreBuildingEntry::SpawnLocationTags' has a wrong offset!");

// ScriptStruct FortniteGame.TeamFOBCoreBuildingEntryArray
// 0x0010 (0x00C0 - 0x00B0)
struct FTeamFOBCoreBuildingEntryArray final : public FFastArraySerializer
{
public:
	TArray<struct FTeamFOBCoreBuildingEntry>      Items;                                             // 0x00B0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FTeamFOBCoreBuildingEntryArray) == 0x000008, "Wrong alignment on FTeamFOBCoreBuildingEntryArray");
static_assert(sizeof(FTeamFOBCoreBuildingEntryArray) == 0x0000C0, "Wrong size on FTeamFOBCoreBuildingEntryArray");
static_assert(offsetof(FTeamFOBCoreBuildingEntryArray, Items) == 0x0000B0, "Member 'FTeamFOBCoreBuildingEntryArray::Items' has a wrong offset!");

// ScriptStruct FortniteGame.FortClientAnnouncementData_Tutorial
// 0x0050 (0x0128 - 0x00D8)
struct FFortClientAnnouncementData_Tutorial final : public FFortClientAnnouncementData_Basic
{
public:
	float                                         AutoContinueDelay;                                 // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   NameText;                                          // 0x00E0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   SystemText;                                        // 0x00F8(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bButtonEnabled;                                    // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLightboxEnabled;                                  // 0x0111(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLightboxDisableInputOnly;                         // 0x0112(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_113[0x1];                                      // 0x0113(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                Padding;                                           // 0x0114(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VAlign;                                            // 0x0124(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HAlign;                                            // 0x0125(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_126[0x2];                                      // 0x0126(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortClientAnnouncementData_Tutorial) == 0x000008, "Wrong alignment on FFortClientAnnouncementData_Tutorial");
static_assert(sizeof(FFortClientAnnouncementData_Tutorial) == 0x000128, "Wrong size on FFortClientAnnouncementData_Tutorial");
static_assert(offsetof(FFortClientAnnouncementData_Tutorial, AutoContinueDelay) == 0x0000D8, "Member 'FFortClientAnnouncementData_Tutorial::AutoContinueDelay' has a wrong offset!");
static_assert(offsetof(FFortClientAnnouncementData_Tutorial, NameText) == 0x0000E0, "Member 'FFortClientAnnouncementData_Tutorial::NameText' has a wrong offset!");
static_assert(offsetof(FFortClientAnnouncementData_Tutorial, SystemText) == 0x0000F8, "Member 'FFortClientAnnouncementData_Tutorial::SystemText' has a wrong offset!");
static_assert(offsetof(FFortClientAnnouncementData_Tutorial, bButtonEnabled) == 0x000110, "Member 'FFortClientAnnouncementData_Tutorial::bButtonEnabled' has a wrong offset!");
static_assert(offsetof(FFortClientAnnouncementData_Tutorial, bLightboxEnabled) == 0x000111, "Member 'FFortClientAnnouncementData_Tutorial::bLightboxEnabled' has a wrong offset!");
static_assert(offsetof(FFortClientAnnouncementData_Tutorial, bLightboxDisableInputOnly) == 0x000112, "Member 'FFortClientAnnouncementData_Tutorial::bLightboxDisableInputOnly' has a wrong offset!");
static_assert(offsetof(FFortClientAnnouncementData_Tutorial, Padding) == 0x000114, "Member 'FFortClientAnnouncementData_Tutorial::Padding' has a wrong offset!");
static_assert(offsetof(FFortClientAnnouncementData_Tutorial, VAlign) == 0x000124, "Member 'FFortClientAnnouncementData_Tutorial::VAlign' has a wrong offset!");
static_assert(offsetof(FFortClientAnnouncementData_Tutorial, HAlign) == 0x000125, "Member 'FFortClientAnnouncementData_Tutorial::HAlign' has a wrong offset!");

// ScriptStruct FortniteGame.HomebaseSquadSlot
// 0x0060 (0x0060 - 0x0000)
struct FHomebaseSquadSlot final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<EFortItemType>                         ValidSlottableItemTypes;                           // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TagFilter;                                         // 0x0028(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FHomebaseSquadAttributeBonus>   SlottingBonuses;                                   // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UCurveTable*                            PersonalityMatchBonusTable;                        // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHomebaseSquadSlot) == 0x000008, "Wrong alignment on FHomebaseSquadSlot");
static_assert(sizeof(FHomebaseSquadSlot) == 0x000060, "Wrong size on FHomebaseSquadSlot");
static_assert(offsetof(FHomebaseSquadSlot, DisplayName) == 0x000000, "Member 'FHomebaseSquadSlot::DisplayName' has a wrong offset!");
static_assert(offsetof(FHomebaseSquadSlot, ValidSlottableItemTypes) == 0x000018, "Member 'FHomebaseSquadSlot::ValidSlottableItemTypes' has a wrong offset!");
static_assert(offsetof(FHomebaseSquadSlot, TagFilter) == 0x000028, "Member 'FHomebaseSquadSlot::TagFilter' has a wrong offset!");
static_assert(offsetof(FHomebaseSquadSlot, SlottingBonuses) == 0x000048, "Member 'FHomebaseSquadSlot::SlottingBonuses' has a wrong offset!");
static_assert(offsetof(FHomebaseSquadSlot, PersonalityMatchBonusTable) == 0x000058, "Member 'FHomebaseSquadSlot::PersonalityMatchBonusTable' has a wrong offset!");

// ScriptStruct FortniteGame.HomebaseSquad
// 0x0080 (0x0088 - 0x0008)
struct FHomebaseSquad final : public FTableRowBase
{
public:
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ShortDisplayName;                                  // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EFortHomebaseSquadType                        SquadType;                                         // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ManagerSynergyTag;                                 // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHomebaseSquadSlot>             CrewSlots;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiredTheaterTags;                               // 0x0058(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         MaxNumDefendersAllowedInLevel;                     // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxNumDefendersAllowedInGroupLevel;                // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConsiderNumPlayersForMaxNumDefenders;             // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysRemoveOldestDefenderWhenReplacing;          // 0x0081(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHomebaseSquad) == 0x000008, "Wrong alignment on FHomebaseSquad");
static_assert(sizeof(FHomebaseSquad) == 0x000088, "Wrong size on FHomebaseSquad");
static_assert(offsetof(FHomebaseSquad, DisplayName) == 0x000008, "Member 'FHomebaseSquad::DisplayName' has a wrong offset!");
static_assert(offsetof(FHomebaseSquad, ShortDisplayName) == 0x000020, "Member 'FHomebaseSquad::ShortDisplayName' has a wrong offset!");
static_assert(offsetof(FHomebaseSquad, SquadType) == 0x000038, "Member 'FHomebaseSquad::SquadType' has a wrong offset!");
static_assert(offsetof(FHomebaseSquad, ManagerSynergyTag) == 0x000040, "Member 'FHomebaseSquad::ManagerSynergyTag' has a wrong offset!");
static_assert(offsetof(FHomebaseSquad, CrewSlots) == 0x000048, "Member 'FHomebaseSquad::CrewSlots' has a wrong offset!");
static_assert(offsetof(FHomebaseSquad, RequiredTheaterTags) == 0x000058, "Member 'FHomebaseSquad::RequiredTheaterTags' has a wrong offset!");
static_assert(offsetof(FHomebaseSquad, MaxNumDefendersAllowedInLevel) == 0x000078, "Member 'FHomebaseSquad::MaxNumDefendersAllowedInLevel' has a wrong offset!");
static_assert(offsetof(FHomebaseSquad, MaxNumDefendersAllowedInGroupLevel) == 0x00007C, "Member 'FHomebaseSquad::MaxNumDefendersAllowedInGroupLevel' has a wrong offset!");
static_assert(offsetof(FHomebaseSquad, bConsiderNumPlayersForMaxNumDefenders) == 0x000080, "Member 'FHomebaseSquad::bConsiderNumPlayersForMaxNumDefenders' has a wrong offset!");
static_assert(offsetof(FHomebaseSquad, bAlwaysRemoveOldestDefenderWhenReplacing) == 0x000081, "Member 'FHomebaseSquad::bAlwaysRemoveOldestDefenderWhenReplacing' has a wrong offset!");

// ScriptStruct FortniteGame.MyTownWorkerPortraitData
// 0x0030 (0x0030 - 0x0000)
struct FMyTownWorkerPortraitData final
{
public:
	TSoftObjectPtr<class UFortItemIconDefinition> Portrait;                                          // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectionWeight;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMyTownWorkerPortraitData) == 0x000008, "Wrong alignment on FMyTownWorkerPortraitData");
static_assert(sizeof(FMyTownWorkerPortraitData) == 0x000030, "Wrong size on FMyTownWorkerPortraitData");
static_assert(offsetof(FMyTownWorkerPortraitData, Portrait) == 0x000000, "Member 'FMyTownWorkerPortraitData::Portrait' has a wrong offset!");
static_assert(offsetof(FMyTownWorkerPortraitData, SelectionWeight) == 0x000028, "Member 'FMyTownWorkerPortraitData::SelectionWeight' has a wrong offset!");

// ScriptStruct FortniteGame.MyTownWorkerGenderData
// 0x0018 (0x0018 - 0x0000)
struct FMyTownWorkerGenderData final
{
public:
	EFortCustomGender                             Gender;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SelectionWeight;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMyTownWorkerPortraitData>      PotraitData;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMyTownWorkerGenderData) == 0x000008, "Wrong alignment on FMyTownWorkerGenderData");
static_assert(sizeof(FMyTownWorkerGenderData) == 0x000018, "Wrong size on FMyTownWorkerGenderData");
static_assert(offsetof(FMyTownWorkerGenderData, Gender) == 0x000000, "Member 'FMyTownWorkerGenderData::Gender' has a wrong offset!");
static_assert(offsetof(FMyTownWorkerGenderData, SelectionWeight) == 0x000004, "Member 'FMyTownWorkerGenderData::SelectionWeight' has a wrong offset!");
static_assert(offsetof(FMyTownWorkerGenderData, PotraitData) == 0x000008, "Member 'FMyTownWorkerGenderData::PotraitData' has a wrong offset!");

// ScriptStruct FortniteGame.MyTownWorkerPersonalityData
// 0x0050 (0x0050 - 0x0000)
struct FMyTownWorkerPersonalityData final
{
public:
	struct FGameplayTagContainer                  PersonalityTypeTag;                                // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   PersonalityName;                                   // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         SelectionWeight;                                   // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMyTownWorkerGenderData>        GenderData;                                        // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMyTownWorkerPersonalityData) == 0x000008, "Wrong alignment on FMyTownWorkerPersonalityData");
static_assert(sizeof(FMyTownWorkerPersonalityData) == 0x000050, "Wrong size on FMyTownWorkerPersonalityData");
static_assert(offsetof(FMyTownWorkerPersonalityData, PersonalityTypeTag) == 0x000000, "Member 'FMyTownWorkerPersonalityData::PersonalityTypeTag' has a wrong offset!");
static_assert(offsetof(FMyTownWorkerPersonalityData, PersonalityName) == 0x000020, "Member 'FMyTownWorkerPersonalityData::PersonalityName' has a wrong offset!");
static_assert(offsetof(FMyTownWorkerPersonalityData, SelectionWeight) == 0x000038, "Member 'FMyTownWorkerPersonalityData::SelectionWeight' has a wrong offset!");
static_assert(offsetof(FMyTownWorkerPersonalityData, GenderData) == 0x000040, "Member 'FMyTownWorkerPersonalityData::GenderData' has a wrong offset!");

// ScriptStruct FortniteGame.FortUIFeedback
// 0x0020 (0x0020 - 0x0000)
struct FFortUIFeedback
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Audio;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeIn;                                            // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOut;                                           // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortUIFeedback) == 0x000008, "Wrong alignment on FFortUIFeedback");
static_assert(sizeof(FFortUIFeedback) == 0x000020, "Wrong size on FFortUIFeedback");
static_assert(offsetof(FFortUIFeedback, Name) == 0x000000, "Member 'FFortUIFeedback::Name' has a wrong offset!");
static_assert(offsetof(FFortUIFeedback, Audio) == 0x000008, "Member 'FFortUIFeedback::Audio' has a wrong offset!");
static_assert(offsetof(FFortUIFeedback, bLooping) == 0x000010, "Member 'FFortUIFeedback::bLooping' has a wrong offset!");
static_assert(offsetof(FFortUIFeedback, FadeIn) == 0x000014, "Member 'FFortUIFeedback::FadeIn' has a wrong offset!");
static_assert(offsetof(FFortUIFeedback, FadeOut) == 0x000018, "Member 'FFortUIFeedback::FadeOut' has a wrong offset!");

// ScriptStruct FortniteGame.FortUIFeedbackBlueprintOnly
// 0x0008 (0x0028 - 0x0020)
struct FFortUIFeedbackBlueprintOnly final : public FFortUIFeedback
{
public:
	class FName                                   EditableName;                                      // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortUIFeedbackBlueprintOnly) == 0x000008, "Wrong alignment on FFortUIFeedbackBlueprintOnly");
static_assert(sizeof(FFortUIFeedbackBlueprintOnly) == 0x000028, "Wrong size on FFortUIFeedbackBlueprintOnly");
static_assert(offsetof(FFortUIFeedbackBlueprintOnly, EditableName) == 0x000020, "Member 'FFortUIFeedbackBlueprintOnly::EditableName' has a wrong offset!");

// ScriptStruct FortniteGame.TeamChangeRequest
// 0x0010 (0x0010 - 0x0000)
struct FTeamChangeRequest final
{
public:
	class AFortPlayerController*                  RequestingController;                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortTeam                                     DesiredTeam;                                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTeamChangeRequest) == 0x000008, "Wrong alignment on FTeamChangeRequest");
static_assert(sizeof(FTeamChangeRequest) == 0x000010, "Wrong size on FTeamChangeRequest");
static_assert(offsetof(FTeamChangeRequest, RequestingController) == 0x000000, "Member 'FTeamChangeRequest::RequestingController' has a wrong offset!");
static_assert(offsetof(FTeamChangeRequest, DesiredTeam) == 0x000008, "Member 'FTeamChangeRequest::DesiredTeam' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaCosmeticMaterialOverride
// 0x0038 (0x0038 - 0x0000)
struct FAthenaCosmeticMaterialOverride final
{
public:
	class FName                                   ComponentName;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialOverrideIndex;                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProgressionThreshold;                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      OverrideMaterial;                                  // 0x0010(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaCosmeticMaterialOverride) == 0x000008, "Wrong alignment on FAthenaCosmeticMaterialOverride");
static_assert(sizeof(FAthenaCosmeticMaterialOverride) == 0x000038, "Wrong size on FAthenaCosmeticMaterialOverride");
static_assert(offsetof(FAthenaCosmeticMaterialOverride, ComponentName) == 0x000000, "Member 'FAthenaCosmeticMaterialOverride::ComponentName' has a wrong offset!");
static_assert(offsetof(FAthenaCosmeticMaterialOverride, MaterialOverrideIndex) == 0x000008, "Member 'FAthenaCosmeticMaterialOverride::MaterialOverrideIndex' has a wrong offset!");
static_assert(offsetof(FAthenaCosmeticMaterialOverride, ProgressionThreshold) == 0x00000C, "Member 'FAthenaCosmeticMaterialOverride::ProgressionThreshold' has a wrong offset!");
static_assert(offsetof(FAthenaCosmeticMaterialOverride, OverrideMaterial) == 0x000010, "Member 'FAthenaCosmeticMaterialOverride::OverrideMaterial' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaRewardSchedule
// 0x0010 (0x0010 - 0x0000)
struct FAthenaRewardSchedule final
{
public:
	TArray<struct FAthenaRewardScheduleLevel>     Levels;                                            // 0x0000(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaRewardSchedule) == 0x000008, "Wrong alignment on FAthenaRewardSchedule");
static_assert(sizeof(FAthenaRewardSchedule) == 0x000010, "Wrong size on FAthenaRewardSchedule");
static_assert(offsetof(FAthenaRewardSchedule, Levels) == 0x000000, "Member 'FAthenaRewardSchedule::Levels' has a wrong offset!");

// ScriptStruct FortniteGame.FortEventName
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FFortEventName
{
public:
	class FName                                   CategoryName;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventName;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEventName) == 0x000008, "Wrong alignment on FFortEventName");
static_assert(sizeof(FFortEventName) == 0x000010, "Wrong size on FFortEventName");
static_assert(offsetof(FFortEventName, CategoryName) == 0x000000, "Member 'FFortEventName::CategoryName' has a wrong offset!");
static_assert(offsetof(FFortEventName, EventName) == 0x000008, "Member 'FFortEventName::EventName' has a wrong offset!");

// ScriptStruct FortniteGame.FortClientEventName
// 0x0000 (0x0010 - 0x0010)
struct FFortClientEventName final : public FFortEventName
{
};
static_assert(alignof(FFortClientEventName) == 0x000008, "Wrong alignment on FFortClientEventName");
static_assert(sizeof(FFortClientEventName) == 0x000010, "Wrong size on FFortClientEventName");

// ScriptStruct FortniteGame.BuildingActorHotSpotDirection
// 0x0020 (0x0020 - 0x0000)
struct FBuildingActorHotSpotDirection final
{
public:
	class UAIHotSpotConfig*                       HotSpotConfig;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0008(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bMirrorX : 1;                                      // 0x0014(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMirrorY : 1;                                      // 0x0014(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EFortHotSpotDirection                         Direction;                                         // 0x0018(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHotspotTypeConfigMode                        TypeConfigUsage;                                   // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingActorHotSpotDirection) == 0x000008, "Wrong alignment on FBuildingActorHotSpotDirection");
static_assert(sizeof(FBuildingActorHotSpotDirection) == 0x000020, "Wrong size on FBuildingActorHotSpotDirection");
static_assert(offsetof(FBuildingActorHotSpotDirection, HotSpotConfig) == 0x000000, "Member 'FBuildingActorHotSpotDirection::HotSpotConfig' has a wrong offset!");
static_assert(offsetof(FBuildingActorHotSpotDirection, Offset) == 0x000008, "Member 'FBuildingActorHotSpotDirection::Offset' has a wrong offset!");
static_assert(offsetof(FBuildingActorHotSpotDirection, Direction) == 0x000018, "Member 'FBuildingActorHotSpotDirection::Direction' has a wrong offset!");
static_assert(offsetof(FBuildingActorHotSpotDirection, TypeConfigUsage) == 0x000019, "Member 'FBuildingActorHotSpotDirection::TypeConfigUsage' has a wrong offset!");

// ScriptStruct FortniteGame.FortFootstepAudioData
// 0x0040 (0x0040 - 0x0000)
struct FFortFootstepAudioData final
{
public:
	class USoundBase*                             SoundAssets[0x6];                                  // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAttenuation*                      SoundAttenuation;                                  // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortFootstepAudioData) == 0x000008, "Wrong alignment on FFortFootstepAudioData");
static_assert(sizeof(FFortFootstepAudioData) == 0x000040, "Wrong size on FFortFootstepAudioData");
static_assert(offsetof(FFortFootstepAudioData, SoundAssets) == 0x000000, "Member 'FFortFootstepAudioData::SoundAssets' has a wrong offset!");
static_assert(offsetof(FFortFootstepAudioData, SoundAttenuation) == 0x000030, "Member 'FFortFootstepAudioData::SoundAttenuation' has a wrong offset!");
static_assert(offsetof(FFortFootstepAudioData, VolumeMultiplier) == 0x000038, "Member 'FFortFootstepAudioData::VolumeMultiplier' has a wrong offset!");

// ScriptStruct FortniteGame.InterpOffsetData
// 0x001C (0x001C - 0x0000)
struct FInterpOffsetData final
{
public:
	struct FVector                                ViewOffset;                                        // 0x0000(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LargeBodyTypeAddtnlOffset;                         // 0x000C(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchAngle;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInterpOffsetData) == 0x000004, "Wrong alignment on FInterpOffsetData");
static_assert(sizeof(FInterpOffsetData) == 0x00001C, "Wrong size on FInterpOffsetData");
static_assert(offsetof(FInterpOffsetData, ViewOffset) == 0x000000, "Member 'FInterpOffsetData::ViewOffset' has a wrong offset!");
static_assert(offsetof(FInterpOffsetData, LargeBodyTypeAddtnlOffset) == 0x00000C, "Member 'FInterpOffsetData::LargeBodyTypeAddtnlOffset' has a wrong offset!");
static_assert(offsetof(FInterpOffsetData, PitchAngle) == 0x000018, "Member 'FInterpOffsetData::PitchAngle' has a wrong offset!");

// ScriptStruct FortniteGame.InterpOffset
// 0x0010 (0x0010 - 0x0000)
struct FInterpOffset final
{
public:
	TArray<struct FInterpOffsetData>              SamplePoints;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInterpOffset) == 0x000008, "Wrong alignment on FInterpOffset");
static_assert(sizeof(FInterpOffset) == 0x000010, "Wrong size on FInterpOffset");
static_assert(offsetof(FInterpOffset, SamplePoints) == 0x000000, "Member 'FInterpOffset::SamplePoints' has a wrong offset!");

// ScriptStruct FortniteGame.FortObjectiveRecord
// 0x0018 (0x0018 - 0x0000)
struct FFortObjectiveRecord final
{
public:
	TSubclassOf<class AFortObjectiveBase>         ObjectiveClass;                                    // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ObjectiveData;                                     // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortObjectiveRecord) == 0x000008, "Wrong alignment on FFortObjectiveRecord");
static_assert(sizeof(FFortObjectiveRecord) == 0x000018, "Wrong size on FFortObjectiveRecord");
static_assert(offsetof(FFortObjectiveRecord, ObjectiveClass) == 0x000000, "Member 'FFortObjectiveRecord::ObjectiveClass' has a wrong offset!");
static_assert(offsetof(FFortObjectiveRecord, ObjectiveData) == 0x000008, "Member 'FFortObjectiveRecord::ObjectiveData' has a wrong offset!");

// ScriptStruct FortniteGame.FortSearchBounceData
// 0x0010 (0x0010 - 0x0000)
struct FFortSearchBounceData final
{
public:
	struct FVector                                BounceNormal;                                      // 0x0000(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SearchAnimationCount;                              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortSearchBounceData) == 0x000004, "Wrong alignment on FFortSearchBounceData");
static_assert(sizeof(FFortSearchBounceData) == 0x000010, "Wrong size on FFortSearchBounceData");
static_assert(offsetof(FFortSearchBounceData, BounceNormal) == 0x000000, "Member 'FFortSearchBounceData::BounceNormal' has a wrong offset!");
static_assert(offsetof(FFortSearchBounceData, SearchAnimationCount) == 0x00000C, "Member 'FFortSearchBounceData::SearchAnimationCount' has a wrong offset!");

// ScriptStruct FortniteGame.ConnectivityCube
// 0x00C0 (0x00C0 - 0x0000)
struct alignas(0x08) FConnectivityCube final
{
public:
	uint8                                         Pad_0[0xC0];                                       // 0x0000(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConnectivityCube) == 0x000008, "Wrong alignment on FConnectivityCube");
static_assert(sizeof(FConnectivityCube) == 0x0000C0, "Wrong size on FConnectivityCube");

// ScriptStruct FortniteGame.FortFloatAnimationInfo
// 0x0008 (0x0020 - 0x0018)
struct FFortFloatAnimationInfo : public FFortFXAnimationInfoBase
{
public:
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortFloatAnimationInfo) == 0x000008, "Wrong alignment on FFortFloatAnimationInfo");
static_assert(sizeof(FFortFloatAnimationInfo) == 0x000020, "Wrong size on FFortFloatAnimationInfo");

// ScriptStruct FortniteGame.FortFloatParamAnimationInfo
// 0x0008 (0x0028 - 0x0020)
struct FFortFloatParamAnimationInfo final : public FFortFloatAnimationInfo
{
public:
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortFloatParamAnimationInfo) == 0x000008, "Wrong alignment on FFortFloatParamAnimationInfo");
static_assert(sizeof(FFortFloatParamAnimationInfo) == 0x000028, "Wrong size on FFortFloatParamAnimationInfo");

// ScriptStruct FortniteGame.FortLinearColorAnimationInfo
// 0x0020 (0x0038 - 0x0018)
struct FFortLinearColorAnimationInfo : public FFortFXAnimationInfoBase
{
public:
	uint8                                         Pad_18[0x20];                                      // 0x0018(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortLinearColorAnimationInfo) == 0x000008, "Wrong alignment on FFortLinearColorAnimationInfo");
static_assert(sizeof(FFortLinearColorAnimationInfo) == 0x000038, "Wrong size on FFortLinearColorAnimationInfo");

// ScriptStruct FortniteGame.FortLinearColorParamAnimationInfo
// 0x0008 (0x0040 - 0x0038)
struct FFortLinearColorParamAnimationInfo final : public FFortLinearColorAnimationInfo
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortLinearColorParamAnimationInfo) == 0x000008, "Wrong alignment on FFortLinearColorParamAnimationInfo");
static_assert(sizeof(FFortLinearColorParamAnimationInfo) == 0x000040, "Wrong size on FFortLinearColorParamAnimationInfo");

// ScriptStruct FortniteGame.FortMIDAnimSet
// 0x0040 (0x0040 - 0x0000)
struct FFortMIDAnimSet final
{
public:
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortFloatParamAnimationInfo>   FloatParamAnims;                                   // 0x0008(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FFortLinearColorParamAnimationInfo> ColorParamAnims;                                   // 0x0018(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FFortLinearColorCurveParamAnimationInfo> ColorCurveParamAnims;                              // 0x0028(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMIDAnimSet) == 0x000008, "Wrong alignment on FFortMIDAnimSet");
static_assert(sizeof(FFortMIDAnimSet) == 0x000040, "Wrong size on FFortMIDAnimSet");
static_assert(offsetof(FFortMIDAnimSet, Mid) == 0x000000, "Member 'FFortMIDAnimSet::Mid' has a wrong offset!");
static_assert(offsetof(FFortMIDAnimSet, FloatParamAnims) == 0x000008, "Member 'FFortMIDAnimSet::FloatParamAnims' has a wrong offset!");
static_assert(offsetof(FFortMIDAnimSet, ColorParamAnims) == 0x000018, "Member 'FFortMIDAnimSet::ColorParamAnims' has a wrong offset!");
static_assert(offsetof(FFortMIDAnimSet, ColorCurveParamAnims) == 0x000028, "Member 'FFortMIDAnimSet::ColorCurveParamAnims' has a wrong offset!");

// ScriptStruct FortniteGame.AuxiliaryEditTileMeshData
// 0x0020 (0x0020 - 0x0000)
struct FAuxiliaryEditTileMeshData final
{
public:
	class UStaticMesh*                            TileMesh;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             TileTexture;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRot;                                       // 0x0010(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAuxiliaryEditTileMeshData) == 0x000008, "Wrong alignment on FAuxiliaryEditTileMeshData");
static_assert(sizeof(FAuxiliaryEditTileMeshData) == 0x000020, "Wrong size on FAuxiliaryEditTileMeshData");
static_assert(offsetof(FAuxiliaryEditTileMeshData, TileMesh) == 0x000000, "Member 'FAuxiliaryEditTileMeshData::TileMesh' has a wrong offset!");
static_assert(offsetof(FAuxiliaryEditTileMeshData, TileTexture) == 0x000008, "Member 'FAuxiliaryEditTileMeshData::TileTexture' has a wrong offset!");
static_assert(offsetof(FAuxiliaryEditTileMeshData, RelativeRot) == 0x000010, "Member 'FAuxiliaryEditTileMeshData::RelativeRot' has a wrong offset!");

// ScriptStruct FortniteGame.EditModeState
// 0x0010 (0x0010 - 0x0000)
struct FEditModeState final
{
public:
	TSubclassOf<class ABuildingSMActor>           EditClass;                                         // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RotationIterations;                                // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMirrored;                                         // 0x000C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCurrentlyValid;                                   // 0x000D(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEditModeState) == 0x000008, "Wrong alignment on FEditModeState");
static_assert(sizeof(FEditModeState) == 0x000010, "Wrong size on FEditModeState");
static_assert(offsetof(FEditModeState, EditClass) == 0x000000, "Member 'FEditModeState::EditClass' has a wrong offset!");
static_assert(offsetof(FEditModeState, RotationIterations) == 0x000008, "Member 'FEditModeState::RotationIterations' has a wrong offset!");
static_assert(offsetof(FEditModeState, bMirrored) == 0x00000C, "Member 'FEditModeState::bMirrored' has a wrong offset!");
static_assert(offsetof(FEditModeState, bCurrentlyValid) == 0x00000D, "Member 'FEditModeState::bCurrentlyValid' has a wrong offset!");

// ScriptStruct FortniteGame.ServerLaunchInfo
// 0x0010 (0x0010 - 0x0000)
struct FServerLaunchInfo final
{
public:
	float                                         LaunchServerTime;                                  // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawnAthena*                  LaunchedPawn;                                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerLaunchInfo) == 0x000008, "Wrong alignment on FServerLaunchInfo");
static_assert(sizeof(FServerLaunchInfo) == 0x000010, "Wrong size on FServerLaunchInfo");
static_assert(offsetof(FServerLaunchInfo, LaunchServerTime) == 0x000000, "Member 'FServerLaunchInfo::LaunchServerTime' has a wrong offset!");
static_assert(offsetof(FServerLaunchInfo, LaunchedPawn) == 0x000008, "Member 'FServerLaunchInfo::LaunchedPawn' has a wrong offset!");

// ScriptStruct FortniteGame.UtilityContribution
// 0x000C (0x000C - 0x0000)
struct FUtilityContribution final
{
public:
	EFortCombatFactors                            ContributingFactor;                                // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAIDirectorFactor                         ContributingAIDirectorFactor;                      // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxContribution;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFactorContributionType                   ContributionType;                                  // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUtilityContribution) == 0x000004, "Wrong alignment on FUtilityContribution");
static_assert(sizeof(FUtilityContribution) == 0x00000C, "Wrong size on FUtilityContribution");
static_assert(offsetof(FUtilityContribution, ContributingFactor) == 0x000000, "Member 'FUtilityContribution::ContributingFactor' has a wrong offset!");
static_assert(offsetof(FUtilityContribution, ContributingAIDirectorFactor) == 0x000001, "Member 'FUtilityContribution::ContributingAIDirectorFactor' has a wrong offset!");
static_assert(offsetof(FUtilityContribution, MaxContribution) == 0x000004, "Member 'FUtilityContribution::MaxContribution' has a wrong offset!");
static_assert(offsetof(FUtilityContribution, ContributionType) == 0x000008, "Member 'FUtilityContribution::ContributionType' has a wrong offset!");

// ScriptStruct FortniteGame.UtilityData
// 0x0040 (0x0040 - 0x0000)
struct FUtilityData final
{
public:
	TArray<struct FUtilityContribution>           ContributingFactors;                               // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ContributionsTotal;                                // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyRecentSelectionPenalty;                      // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RecentlySelectedPenaltyPercentage;                 // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PenaltyFallOffRate;                                // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DebugGraphName;                                    // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DebugGraphColor;                                   // 0x0030(0x0010)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUtilityData) == 0x000008, "Wrong alignment on FUtilityData");
static_assert(sizeof(FUtilityData) == 0x000040, "Wrong size on FUtilityData");
static_assert(offsetof(FUtilityData, ContributingFactors) == 0x000000, "Member 'FUtilityData::ContributingFactors' has a wrong offset!");
static_assert(offsetof(FUtilityData, ContributionsTotal) == 0x000010, "Member 'FUtilityData::ContributionsTotal' has a wrong offset!");
static_assert(offsetof(FUtilityData, bApplyRecentSelectionPenalty) == 0x000014, "Member 'FUtilityData::bApplyRecentSelectionPenalty' has a wrong offset!");
static_assert(offsetof(FUtilityData, RecentlySelectedPenaltyPercentage) == 0x000018, "Member 'FUtilityData::RecentlySelectedPenaltyPercentage' has a wrong offset!");
static_assert(offsetof(FUtilityData, PenaltyFallOffRate) == 0x00001C, "Member 'FUtilityData::PenaltyFallOffRate' has a wrong offset!");
static_assert(offsetof(FUtilityData, DebugGraphName) == 0x000020, "Member 'FUtilityData::DebugGraphName' has a wrong offset!");
static_assert(offsetof(FUtilityData, DebugGraphColor) == 0x000030, "Member 'FUtilityData::DebugGraphColor' has a wrong offset!");

// ScriptStruct FortniteGame.TileCompInterpData
// 0x0018 (0x0018 - 0x0000)
struct FTileCompInterpData final
{
public:
	struct FVector                                InitialTranslation;                                // 0x0000(0x000C)(Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DesiredTranslation;                                // 0x000C(0x000C)(Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTileCompInterpData) == 0x000004, "Wrong alignment on FTileCompInterpData");
static_assert(sizeof(FTileCompInterpData) == 0x000018, "Wrong size on FTileCompInterpData");
static_assert(offsetof(FTileCompInterpData, InitialTranslation) == 0x000000, "Member 'FTileCompInterpData::InitialTranslation' has a wrong offset!");
static_assert(offsetof(FTileCompInterpData, DesiredTranslation) == 0x00000C, "Member 'FTileCompInterpData::DesiredTranslation' has a wrong offset!");

// ScriptStruct FortniteGame.FOBCoreChoice
// 0x002C (0x0038 - 0x000C)
struct FFOBCoreChoice final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortFOBCoreDecoItemDefinition*         FOBCoreDef;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFOBFileHeaderStatus                          FileHeaderStatus;                                  // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CoreFilename;                                      // 0x0020(0x0010)(ZeroConstructor, Transient, RepSkip, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortBuildingInstructions*              BuildingInstructions;                              // 0x0030(0x0008)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFOBCoreChoice) == 0x000008, "Wrong alignment on FFOBCoreChoice");
static_assert(sizeof(FFOBCoreChoice) == 0x000038, "Wrong size on FFOBCoreChoice");
static_assert(offsetof(FFOBCoreChoice, FOBCoreDef) == 0x000010, "Member 'FFOBCoreChoice::FOBCoreDef' has a wrong offset!");
static_assert(offsetof(FFOBCoreChoice, FileHeaderStatus) == 0x000018, "Member 'FFOBCoreChoice::FileHeaderStatus' has a wrong offset!");
static_assert(offsetof(FFOBCoreChoice, CoreFilename) == 0x000020, "Member 'FFOBCoreChoice::CoreFilename' has a wrong offset!");
static_assert(offsetof(FFOBCoreChoice, BuildingInstructions) == 0x000030, "Member 'FFOBCoreChoice::BuildingInstructions' has a wrong offset!");

// ScriptStruct FortniteGame.FOBCoreChoiceArray
// 0x0010 (0x00C0 - 0x00B0)
struct FFOBCoreChoiceArray final : public FFastArraySerializer
{
public:
	TArray<struct FFOBCoreChoice>                 Items;                                             // 0x00B0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFOBCoreChoiceArray) == 0x000008, "Wrong alignment on FFOBCoreChoiceArray");
static_assert(sizeof(FFOBCoreChoiceArray) == 0x0000C0, "Wrong size on FFOBCoreChoiceArray");
static_assert(offsetof(FFOBCoreChoiceArray, Items) == 0x0000B0, "Member 'FFOBCoreChoiceArray::Items' has a wrong offset!");

// ScriptStruct FortniteGame.CombatEventMultiplier
// 0x0008 (0x0008 - 0x0000)
struct FCombatEventMultiplier final
{
public:
	EFortCombatEvents                             CombatEvent;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxContribution;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCombatEventMultiplier) == 0x000004, "Wrong alignment on FCombatEventMultiplier");
static_assert(sizeof(FCombatEventMultiplier) == 0x000008, "Wrong size on FCombatEventMultiplier");
static_assert(offsetof(FCombatEventMultiplier, CombatEvent) == 0x000000, "Member 'FCombatEventMultiplier::CombatEvent' has a wrong offset!");
static_assert(offsetof(FCombatEventMultiplier, MaxContribution) == 0x000004, "Member 'FCombatEventMultiplier::MaxContribution' has a wrong offset!");

// ScriptStruct FortniteGame.TieredWaveCollectionLootSet
// 0x0010 (0x0018 - 0x0008)
struct FTieredWaveCollectionLootSet final : public FTableRowBase
{
public:
	TArray<struct FTieredWaveCollectionLootSetData> LootSetData;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTieredWaveCollectionLootSet) == 0x000008, "Wrong alignment on FTieredWaveCollectionLootSet");
static_assert(sizeof(FTieredWaveCollectionLootSet) == 0x000018, "Wrong size on FTieredWaveCollectionLootSet");
static_assert(offsetof(FTieredWaveCollectionLootSet, LootSetData) == 0x000008, "Member 'FTieredWaveCollectionLootSet::LootSetData' has a wrong offset!");

// ScriptStruct FortniteGame.TieredModifierSetData
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FTieredModifierSetData final
{
public:
	int32                                         WaveNumber;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModifierDuration;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ModifierLootTierGroup;                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTieredModifierSetData) == 0x000008, "Wrong alignment on FTieredModifierSetData");
static_assert(sizeof(FTieredModifierSetData) == 0x000010, "Wrong size on FTieredModifierSetData");
static_assert(offsetof(FTieredModifierSetData, WaveNumber) == 0x000000, "Member 'FTieredModifierSetData::WaveNumber' has a wrong offset!");
static_assert(offsetof(FTieredModifierSetData, ModifierDuration) == 0x000004, "Member 'FTieredModifierSetData::ModifierDuration' has a wrong offset!");
static_assert(offsetof(FTieredModifierSetData, ModifierLootTierGroup) == 0x000008, "Member 'FTieredModifierSetData::ModifierLootTierGroup' has a wrong offset!");

// ScriptStruct FortniteGame.TieredModifierSet
// 0x0010 (0x0018 - 0x0008)
struct FTieredModifierSet final : public FTableRowBase
{
public:
	TArray<struct FTieredModifierSetData>         ModifierData;                                      // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTieredModifierSet) == 0x000008, "Wrong alignment on FTieredModifierSet");
static_assert(sizeof(FTieredModifierSet) == 0x000018, "Wrong size on FTieredModifierSet");
static_assert(offsetof(FTieredModifierSet, ModifierData) == 0x000008, "Member 'FTieredModifierSet::ModifierData' has a wrong offset!");

// ScriptStruct FortniteGame.FortCollectionBookSectionData
// 0x0058 (0x0060 - 0x0008)
struct FFortCollectionBookSectionData final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, EditConst, NativeAccessSpecifierPublic)
	TArray<class FName>                           SlotRowNames;                                      // 0x0020(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	struct FFortRewardInfo                        Rewards;                                           // 0x0030(0x0030)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCollectionBookSectionData) == 0x000008, "Wrong alignment on FFortCollectionBookSectionData");
static_assert(sizeof(FFortCollectionBookSectionData) == 0x000060, "Wrong size on FFortCollectionBookSectionData");
static_assert(offsetof(FFortCollectionBookSectionData, Name) == 0x000008, "Member 'FFortCollectionBookSectionData::Name' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookSectionData, SlotRowNames) == 0x000020, "Member 'FFortCollectionBookSectionData::SlotRowNames' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookSectionData, Rewards) == 0x000030, "Member 'FFortCollectionBookSectionData::Rewards' has a wrong offset!");

// ScriptStruct FortniteGame.CameraPair
// 0x0010 (0x0010 - 0x0000)
struct FCameraPair final
{
public:
	EFrontEndCamera                               Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortCameraBase*                        Camera;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraPair) == 0x000008, "Wrong alignment on FCameraPair");
static_assert(sizeof(FCameraPair) == 0x000010, "Wrong size on FCameraPair");
static_assert(offsetof(FCameraPair, Type) == 0x000000, "Member 'FCameraPair::Type' has a wrong offset!");
static_assert(offsetof(FCameraPair, Camera) == 0x000008, "Member 'FCameraPair::Camera' has a wrong offset!");

// ScriptStruct FortniteGame.FortLootNotification
// 0x0040 (0x0040 - 0x0000)
struct FFortLootNotification final
{
public:
	class FString                                 LootSource;                                        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LootSourceInstance;                                // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMcpLootResult                         LootGranted;                                       // 0x0020(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortLootNotification) == 0x000008, "Wrong alignment on FFortLootNotification");
static_assert(sizeof(FFortLootNotification) == 0x000040, "Wrong size on FFortLootNotification");
static_assert(offsetof(FFortLootNotification, LootSource) == 0x000000, "Member 'FFortLootNotification::LootSource' has a wrong offset!");
static_assert(offsetof(FFortLootNotification, LootSourceInstance) == 0x000010, "Member 'FFortLootNotification::LootSourceInstance' has a wrong offset!");
static_assert(offsetof(FFortLootNotification, LootGranted) == 0x000020, "Member 'FFortLootNotification::LootGranted' has a wrong offset!");

// ScriptStruct FortniteGame.FortLootQuotaData
// 0x0020 (0x0028 - 0x0008)
struct FFortLootQuotaData final : public FTableRowBase
{
public:
	class FName                                   QuotaCategory;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELootQuotaLevel                               QuotaLevel;                                        // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Min;                                               // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max;                                               // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Quota;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinWorldLevel;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxWorldLevel;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortLootQuotaData) == 0x000008, "Wrong alignment on FFortLootQuotaData");
static_assert(sizeof(FFortLootQuotaData) == 0x000028, "Wrong size on FFortLootQuotaData");
static_assert(offsetof(FFortLootQuotaData, QuotaCategory) == 0x000008, "Member 'FFortLootQuotaData::QuotaCategory' has a wrong offset!");
static_assert(offsetof(FFortLootQuotaData, QuotaLevel) == 0x000010, "Member 'FFortLootQuotaData::QuotaLevel' has a wrong offset!");
static_assert(offsetof(FFortLootQuotaData, Min) == 0x000014, "Member 'FFortLootQuotaData::Min' has a wrong offset!");
static_assert(offsetof(FFortLootQuotaData, Max) == 0x000018, "Member 'FFortLootQuotaData::Max' has a wrong offset!");
static_assert(offsetof(FFortLootQuotaData, Quota) == 0x00001C, "Member 'FFortLootQuotaData::Quota' has a wrong offset!");
static_assert(offsetof(FFortLootQuotaData, MinWorldLevel) == 0x000020, "Member 'FFortLootQuotaData::MinWorldLevel' has a wrong offset!");
static_assert(offsetof(FFortLootQuotaData, MaxWorldLevel) == 0x000024, "Member 'FFortLootQuotaData::MaxWorldLevel' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlayerAttributeSets
// 0x0050 (0x0050 - 0x0000)
struct FFortPlayerAttributeSets final
{
public:
	class UFortRegenHealthSet*                    HealthSet;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortControlResistanceSet*              ControlResistanceSet;                              // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortDamageSet*                         DamageSet;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortMovementSet*                       MovementSet;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAdvancedMovementSet*               AdvancedMovementSet;                               // 0x0020(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortConstructionSet*                   ConstructionSet;                                   // 0x0028(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortPlayerAttrSet*                     PlayerAttrSet;                                     // 0x0030(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortCharacterAttrSet*                  CharacterAttrSet;                                  // 0x0038(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortWeaponAttrSet*                     WeaponAttrSet;                                     // 0x0040(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortHomebaseSet*                       HomebaseSet;                                       // 0x0048(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerAttributeSets) == 0x000008, "Wrong alignment on FFortPlayerAttributeSets");
static_assert(sizeof(FFortPlayerAttributeSets) == 0x000050, "Wrong size on FFortPlayerAttributeSets");
static_assert(offsetof(FFortPlayerAttributeSets, HealthSet) == 0x000000, "Member 'FFortPlayerAttributeSets::HealthSet' has a wrong offset!");
static_assert(offsetof(FFortPlayerAttributeSets, ControlResistanceSet) == 0x000008, "Member 'FFortPlayerAttributeSets::ControlResistanceSet' has a wrong offset!");
static_assert(offsetof(FFortPlayerAttributeSets, DamageSet) == 0x000010, "Member 'FFortPlayerAttributeSets::DamageSet' has a wrong offset!");
static_assert(offsetof(FFortPlayerAttributeSets, MovementSet) == 0x000018, "Member 'FFortPlayerAttributeSets::MovementSet' has a wrong offset!");
static_assert(offsetof(FFortPlayerAttributeSets, AdvancedMovementSet) == 0x000020, "Member 'FFortPlayerAttributeSets::AdvancedMovementSet' has a wrong offset!");
static_assert(offsetof(FFortPlayerAttributeSets, ConstructionSet) == 0x000028, "Member 'FFortPlayerAttributeSets::ConstructionSet' has a wrong offset!");
static_assert(offsetof(FFortPlayerAttributeSets, PlayerAttrSet) == 0x000030, "Member 'FFortPlayerAttributeSets::PlayerAttrSet' has a wrong offset!");
static_assert(offsetof(FFortPlayerAttributeSets, CharacterAttrSet) == 0x000038, "Member 'FFortPlayerAttributeSets::CharacterAttrSet' has a wrong offset!");
static_assert(offsetof(FFortPlayerAttributeSets, WeaponAttrSet) == 0x000040, "Member 'FFortPlayerAttributeSets::WeaponAttrSet' has a wrong offset!");
static_assert(offsetof(FFortPlayerAttributeSets, HomebaseSet) == 0x000048, "Member 'FFortPlayerAttributeSets::HomebaseSet' has a wrong offset!");

// ScriptStruct FortniteGame.DataTableRowHandleQuantityPair
// 0x0018 (0x0018 - 0x0000)
struct FDataTableRowHandleQuantityPair final
{
public:
	struct FDataTableRowHandle                    DataTableRowHandle;                                // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDataTableRowHandleQuantityPair) == 0x000008, "Wrong alignment on FDataTableRowHandleQuantityPair");
static_assert(sizeof(FDataTableRowHandleQuantityPair) == 0x000018, "Wrong size on FDataTableRowHandleQuantityPair");
static_assert(offsetof(FDataTableRowHandleQuantityPair, DataTableRowHandle) == 0x000000, "Member 'FDataTableRowHandleQuantityPair::DataTableRowHandle' has a wrong offset!");
static_assert(offsetof(FDataTableRowHandleQuantityPair, Quantity) == 0x000010, "Member 'FDataTableRowHandleQuantityPair::Quantity' has a wrong offset!");

// ScriptStruct FortniteGame.FortCalendarEventInventoryTransformData
// 0x0108 (0x0110 - 0x0008)
struct FFortCalendarEventInventoryTransformData final : public FTableRowBase
{
public:
	class FName                                   CalendarChannelName;                               // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CalendarEventName;                                 // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           AllowedProfileTypes;                               // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  PrerequisiteHomebaseProperties;                    // 0x0028(0x0020)(Edit, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortQuestItemDefinition> PrerequisiteQuest;                                 // 0x0048(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    PrerequisiteObjective;                             // 0x0070(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UFortQuestItemDefinition>> PrerequisiteIncompleteOrUngrantedQuests;           // 0x0080(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UFortItemDefinition>> PrerequisiteUnownedItems;                          // 0x0090(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UFortQuestItemDefinition>> QuestsOnlyActiveDuringEvent;                       // 0x00A0(0x0010)(Edit, ZeroConstructor, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FFortItemQuantityPair>          ItemsToGrant;                                      // 0x00B0(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FFortHiddenRewardQuantityPair>  ItemsToGrantByTemplate;                            // 0x00C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDataTableRowHandleQuantityPair> ConversionRecipesToRunOnEventStart;                // 0x00D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDataTableRowHandleQuantityPair> ConversionRecipesToRunAfterEvent;                  // 0x00E0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortItemQuantityPair>          ItemsToRemoveAfterEvent;                           // 0x00F0(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FFortHiddenRewardQuantityPair>  ItemsToRemoveAfterEventByTemplate;                 // 0x0100(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCalendarEventInventoryTransformData) == 0x000008, "Wrong alignment on FFortCalendarEventInventoryTransformData");
static_assert(sizeof(FFortCalendarEventInventoryTransformData) == 0x000110, "Wrong size on FFortCalendarEventInventoryTransformData");
static_assert(offsetof(FFortCalendarEventInventoryTransformData, CalendarChannelName) == 0x000008, "Member 'FFortCalendarEventInventoryTransformData::CalendarChannelName' has a wrong offset!");
static_assert(offsetof(FFortCalendarEventInventoryTransformData, CalendarEventName) == 0x000010, "Member 'FFortCalendarEventInventoryTransformData::CalendarEventName' has a wrong offset!");
static_assert(offsetof(FFortCalendarEventInventoryTransformData, AllowedProfileTypes) == 0x000018, "Member 'FFortCalendarEventInventoryTransformData::AllowedProfileTypes' has a wrong offset!");
static_assert(offsetof(FFortCalendarEventInventoryTransformData, PrerequisiteHomebaseProperties) == 0x000028, "Member 'FFortCalendarEventInventoryTransformData::PrerequisiteHomebaseProperties' has a wrong offset!");
static_assert(offsetof(FFortCalendarEventInventoryTransformData, PrerequisiteQuest) == 0x000048, "Member 'FFortCalendarEventInventoryTransformData::PrerequisiteQuest' has a wrong offset!");
static_assert(offsetof(FFortCalendarEventInventoryTransformData, PrerequisiteObjective) == 0x000070, "Member 'FFortCalendarEventInventoryTransformData::PrerequisiteObjective' has a wrong offset!");
static_assert(offsetof(FFortCalendarEventInventoryTransformData, PrerequisiteIncompleteOrUngrantedQuests) == 0x000080, "Member 'FFortCalendarEventInventoryTransformData::PrerequisiteIncompleteOrUngrantedQuests' has a wrong offset!");
static_assert(offsetof(FFortCalendarEventInventoryTransformData, PrerequisiteUnownedItems) == 0x000090, "Member 'FFortCalendarEventInventoryTransformData::PrerequisiteUnownedItems' has a wrong offset!");
static_assert(offsetof(FFortCalendarEventInventoryTransformData, QuestsOnlyActiveDuringEvent) == 0x0000A0, "Member 'FFortCalendarEventInventoryTransformData::QuestsOnlyActiveDuringEvent' has a wrong offset!");
static_assert(offsetof(FFortCalendarEventInventoryTransformData, ItemsToGrant) == 0x0000B0, "Member 'FFortCalendarEventInventoryTransformData::ItemsToGrant' has a wrong offset!");
static_assert(offsetof(FFortCalendarEventInventoryTransformData, ItemsToGrantByTemplate) == 0x0000C0, "Member 'FFortCalendarEventInventoryTransformData::ItemsToGrantByTemplate' has a wrong offset!");
static_assert(offsetof(FFortCalendarEventInventoryTransformData, ConversionRecipesToRunOnEventStart) == 0x0000D0, "Member 'FFortCalendarEventInventoryTransformData::ConversionRecipesToRunOnEventStart' has a wrong offset!");
static_assert(offsetof(FFortCalendarEventInventoryTransformData, ConversionRecipesToRunAfterEvent) == 0x0000E0, "Member 'FFortCalendarEventInventoryTransformData::ConversionRecipesToRunAfterEvent' has a wrong offset!");
static_assert(offsetof(FFortCalendarEventInventoryTransformData, ItemsToRemoveAfterEvent) == 0x0000F0, "Member 'FFortCalendarEventInventoryTransformData::ItemsToRemoveAfterEvent' has a wrong offset!");
static_assert(offsetof(FFortCalendarEventInventoryTransformData, ItemsToRemoveAfterEventByTemplate) == 0x000100, "Member 'FFortCalendarEventInventoryTransformData::ItemsToRemoveAfterEventByTemplate' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionAlertSpreadData
// 0x0018 (0x0020 - 0x0008)
struct FFortMissionAlertSpreadData final : public FTableRowBase
{
public:
	float                                         ChanceToSpread;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalChancesToSpread;                              // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxNumTilesToSpreadTo;                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpreadInterval;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MissionAlertRowName;                               // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionAlertSpreadData) == 0x000008, "Wrong alignment on FFortMissionAlertSpreadData");
static_assert(sizeof(FFortMissionAlertSpreadData) == 0x000020, "Wrong size on FFortMissionAlertSpreadData");
static_assert(offsetof(FFortMissionAlertSpreadData, ChanceToSpread) == 0x000008, "Member 'FFortMissionAlertSpreadData::ChanceToSpread' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertSpreadData, TotalChancesToSpread) == 0x00000C, "Member 'FFortMissionAlertSpreadData::TotalChancesToSpread' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertSpreadData, MaxNumTilesToSpreadTo) == 0x000010, "Member 'FFortMissionAlertSpreadData::MaxNumTilesToSpreadTo' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertSpreadData, SpreadInterval) == 0x000014, "Member 'FFortMissionAlertSpreadData::SpreadInterval' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertSpreadData, MissionAlertRowName) == 0x000018, "Member 'FFortMissionAlertSpreadData::MissionAlertRowName' has a wrong offset!");

// ScriptStruct FortniteGame.FortMapData
// 0x0048 (0x0048 - 0x0000)
struct FFortMapData final
{
public:
	TSoftObjectPtr<class UWorld>                  BuildingWorld;                                     // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  BuildingLevelTags;                                 // 0x0028(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMapData) == 0x000008, "Wrong alignment on FFortMapData");
static_assert(sizeof(FFortMapData) == 0x000048, "Wrong size on FFortMapData");
static_assert(offsetof(FFortMapData, BuildingWorld) == 0x000000, "Member 'FFortMapData::BuildingWorld' has a wrong offset!");
static_assert(offsetof(FFortMapData, BuildingLevelTags) == 0x000028, "Member 'FFortMapData::BuildingLevelTags' has a wrong offset!");

// ScriptStruct FortniteGame.FortHomebaseView
// 0x0040 (0x0040 - 0x0000)
struct FFortHomebaseView final
{
public:
	class FString                                 TownName;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BannerIconId;                                      // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BannerColorId;                                     // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FlagPattern;                                       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlagColor;                                         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerXP;                                          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortHomebaseView) == 0x000008, "Wrong alignment on FFortHomebaseView");
static_assert(sizeof(FFortHomebaseView) == 0x000040, "Wrong size on FFortHomebaseView");
static_assert(offsetof(FFortHomebaseView, TownName) == 0x000000, "Member 'FFortHomebaseView::TownName' has a wrong offset!");
static_assert(offsetof(FFortHomebaseView, BannerIconId) == 0x000010, "Member 'FFortHomebaseView::BannerIconId' has a wrong offset!");
static_assert(offsetof(FFortHomebaseView, BannerColorId) == 0x000020, "Member 'FFortHomebaseView::BannerColorId' has a wrong offset!");
static_assert(offsetof(FFortHomebaseView, FlagPattern) == 0x000030, "Member 'FFortHomebaseView::FlagPattern' has a wrong offset!");
static_assert(offsetof(FFortHomebaseView, FlagColor) == 0x000034, "Member 'FFortHomebaseView::FlagColor' has a wrong offset!");
static_assert(offsetof(FFortHomebaseView, PlayerXP) == 0x000038, "Member 'FFortHomebaseView::PlayerXP' has a wrong offset!");

// ScriptStruct FortniteGame.FortSpawnSlotData
// 0x0020 (0x0020 - 0x0000)
struct FFortSpawnSlotData final
{
public:
	struct FVector                                SpawnSlotLocation;                                 // 0x0000(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortAIPawn*                            OccupyingAI;                                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortRiftSlotStatus                           SlotStatus;                                        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortSpawnSlotData) == 0x000008, "Wrong alignment on FFortSpawnSlotData");
static_assert(sizeof(FFortSpawnSlotData) == 0x000020, "Wrong size on FFortSpawnSlotData");
static_assert(offsetof(FFortSpawnSlotData, SpawnSlotLocation) == 0x000000, "Member 'FFortSpawnSlotData::SpawnSlotLocation' has a wrong offset!");
static_assert(offsetof(FFortSpawnSlotData, OccupyingAI) == 0x000010, "Member 'FFortSpawnSlotData::OccupyingAI' has a wrong offset!");
static_assert(offsetof(FFortSpawnSlotData, SlotStatus) == 0x000018, "Member 'FFortSpawnSlotData::SlotStatus' has a wrong offset!");

// ScriptStruct FortniteGame.FortEditorTheaterMapRegionColor
// 0x0018 (0x0018 - 0x0000)
struct FFortEditorTheaterMapRegionColor final
{
public:
	class UFortRegionInfo*                        Region;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RegionColor;                                       // 0x0008(0x0010)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEditorTheaterMapRegionColor) == 0x000008, "Wrong alignment on FFortEditorTheaterMapRegionColor");
static_assert(sizeof(FFortEditorTheaterMapRegionColor) == 0x000018, "Wrong size on FFortEditorTheaterMapRegionColor");
static_assert(offsetof(FFortEditorTheaterMapRegionColor, Region) == 0x000000, "Member 'FFortEditorTheaterMapRegionColor::Region' has a wrong offset!");
static_assert(offsetof(FFortEditorTheaterMapRegionColor, RegionColor) == 0x000008, "Member 'FFortEditorTheaterMapRegionColor::RegionColor' has a wrong offset!");

// ScriptStruct FortniteGame.PooledDamageNumberComponents
// 0x0010 (0x0010 - 0x0000)
struct FPooledDamageNumberComponents final
{
public:
	TArray<class UStaticMeshComponent*>           Components;                                        // 0x0000(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPooledDamageNumberComponents) == 0x000008, "Wrong alignment on FPooledDamageNumberComponents");
static_assert(sizeof(FPooledDamageNumberComponents) == 0x000010, "Wrong size on FPooledDamageNumberComponents");
static_assert(offsetof(FPooledDamageNumberComponents, Components) == 0x000000, "Member 'FPooledDamageNumberComponents::Components' has a wrong offset!");

// ScriptStruct FortniteGame.FortLevelRecord
// 0x0040 (0x0040 - 0x0000)
struct FFortLevelRecord final
{
public:
	int32                                         ParentLevelIndex;                                  // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  BoundActorGuid;                                    // 0x0004(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PackageName;                                       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortActorRecord>               SavedActors;                                       // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         X_Loc;                                             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y_Loc;                                             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Rotation;                                          // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortLevelRecord) == 0x000008, "Wrong alignment on FFortLevelRecord");
static_assert(sizeof(FFortLevelRecord) == 0x000040, "Wrong size on FFortLevelRecord");
static_assert(offsetof(FFortLevelRecord, ParentLevelIndex) == 0x000000, "Member 'FFortLevelRecord::ParentLevelIndex' has a wrong offset!");
static_assert(offsetof(FFortLevelRecord, BoundActorGuid) == 0x000004, "Member 'FFortLevelRecord::BoundActorGuid' has a wrong offset!");
static_assert(offsetof(FFortLevelRecord, PackageName) == 0x000018, "Member 'FFortLevelRecord::PackageName' has a wrong offset!");
static_assert(offsetof(FFortLevelRecord, SavedActors) == 0x000020, "Member 'FFortLevelRecord::SavedActors' has a wrong offset!");
static_assert(offsetof(FFortLevelRecord, X_Loc) == 0x000030, "Member 'FFortLevelRecord::X_Loc' has a wrong offset!");
static_assert(offsetof(FFortLevelRecord, Y_Loc) == 0x000034, "Member 'FFortLevelRecord::Y_Loc' has a wrong offset!");
static_assert(offsetof(FFortLevelRecord, Rotation) == 0x000038, "Member 'FFortLevelRecord::Rotation' has a wrong offset!");

// ScriptStruct FortniteGame.EditorOnlyBuildingInstanceMaterialParameters
// 0x0030 (0x0030 - 0x0000)
struct FEditorOnlyBuildingInstanceMaterialParameters final
{
public:
	TArray<struct FScalarParameterValue>          ScalarParams;                                      // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	TArray<struct FVectorParameterValue>          VectorParams;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	TArray<struct FTextureParameterValue>         TextureParams;                                     // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FEditorOnlyBuildingInstanceMaterialParameters) == 0x000008, "Wrong alignment on FEditorOnlyBuildingInstanceMaterialParameters");
static_assert(sizeof(FEditorOnlyBuildingInstanceMaterialParameters) == 0x000030, "Wrong size on FEditorOnlyBuildingInstanceMaterialParameters");
static_assert(offsetof(FEditorOnlyBuildingInstanceMaterialParameters, ScalarParams) == 0x000000, "Member 'FEditorOnlyBuildingInstanceMaterialParameters::ScalarParams' has a wrong offset!");
static_assert(offsetof(FEditorOnlyBuildingInstanceMaterialParameters, VectorParams) == 0x000010, "Member 'FEditorOnlyBuildingInstanceMaterialParameters::VectorParams' has a wrong offset!");
static_assert(offsetof(FEditorOnlyBuildingInstanceMaterialParameters, TextureParams) == 0x000020, "Member 'FEditorOnlyBuildingInstanceMaterialParameters::TextureParams' has a wrong offset!");

// ScriptStruct FortniteGame.RandomDayphaseFX
// 0x0038 (0x0038 - 0x0000)
struct FRandomDayphaseFX final
{
public:
	class UParticleSystem*                        ParticleSystem;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UParticleSystem*>                AltParticleSystems;                                // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EFortDayPhase>                         RequiredDayphases;                                 // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ChanceToSpawnFX;                                   // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRandomSelectionAlreadyHappened;                   // 0x002C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               SpawnedComponent;                                  // 0x0030(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRandomDayphaseFX) == 0x000008, "Wrong alignment on FRandomDayphaseFX");
static_assert(sizeof(FRandomDayphaseFX) == 0x000038, "Wrong size on FRandomDayphaseFX");
static_assert(offsetof(FRandomDayphaseFX, ParticleSystem) == 0x000000, "Member 'FRandomDayphaseFX::ParticleSystem' has a wrong offset!");
static_assert(offsetof(FRandomDayphaseFX, AltParticleSystems) == 0x000008, "Member 'FRandomDayphaseFX::AltParticleSystems' has a wrong offset!");
static_assert(offsetof(FRandomDayphaseFX, RequiredDayphases) == 0x000018, "Member 'FRandomDayphaseFX::RequiredDayphases' has a wrong offset!");
static_assert(offsetof(FRandomDayphaseFX, ChanceToSpawnFX) == 0x000028, "Member 'FRandomDayphaseFX::ChanceToSpawnFX' has a wrong offset!");
static_assert(offsetof(FRandomDayphaseFX, bRandomSelectionAlreadyHappened) == 0x00002C, "Member 'FRandomDayphaseFX::bRandomSelectionAlreadyHappened' has a wrong offset!");
static_assert(offsetof(FRandomDayphaseFX, SpawnedComponent) == 0x000030, "Member 'FRandomDayphaseFX::SpawnedComponent' has a wrong offset!");

// ScriptStruct FortniteGame.BuildingNavObstacle
// 0x0020 (0x0020 - 0x0000)
struct FBuildingNavObstacle final
{
public:
	struct FBox                                   LocalBounds;                                       // 0x0000(0x001C)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EBuildingNavObstacleType                      ObstacleType;                                      // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingNavObstacle) == 0x000004, "Wrong alignment on FBuildingNavObstacle");
static_assert(sizeof(FBuildingNavObstacle) == 0x000020, "Wrong size on FBuildingNavObstacle");
static_assert(offsetof(FBuildingNavObstacle, LocalBounds) == 0x000000, "Member 'FBuildingNavObstacle::LocalBounds' has a wrong offset!");
static_assert(offsetof(FBuildingNavObstacle, ObstacleType) == 0x00001C, "Member 'FBuildingNavObstacle::ObstacleType' has a wrong offset!");

// ScriptStruct FortniteGame.ChosenQuotaInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FChosenQuotaInfo final
{
public:
	int32                                         LootTier;                                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LootTierKey;                                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChosenQuotaInfo) == 0x000008, "Wrong alignment on FChosenQuotaInfo");
static_assert(sizeof(FChosenQuotaInfo) == 0x000010, "Wrong size on FChosenQuotaInfo");
static_assert(offsetof(FChosenQuotaInfo, LootTier) == 0x000000, "Member 'FChosenQuotaInfo::LootTier' has a wrong offset!");
static_assert(offsetof(FChosenQuotaInfo, LootTierKey) == 0x000008, "Member 'FChosenQuotaInfo::LootTierKey' has a wrong offset!");

// ScriptStruct FortniteGame.FortCollectionBookSlotXPWeightData
// 0x0010 (0x0018 - 0x0008)
struct FFortCollectionBookSlotXPWeightData final : public FTableRowBase
{
public:
	float                                         ConstantWeight;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RarityWeight;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ItemLevelWeight;                                   // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ItemRatingWeight;                                  // 0x0014(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCollectionBookSlotXPWeightData) == 0x000008, "Wrong alignment on FFortCollectionBookSlotXPWeightData");
static_assert(sizeof(FFortCollectionBookSlotXPWeightData) == 0x000018, "Wrong size on FFortCollectionBookSlotXPWeightData");
static_assert(offsetof(FFortCollectionBookSlotXPWeightData, ConstantWeight) == 0x000008, "Member 'FFortCollectionBookSlotXPWeightData::ConstantWeight' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookSlotXPWeightData, RarityWeight) == 0x00000C, "Member 'FFortCollectionBookSlotXPWeightData::RarityWeight' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookSlotXPWeightData, ItemLevelWeight) == 0x000010, "Member 'FFortCollectionBookSlotXPWeightData::ItemLevelWeight' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookSlotXPWeightData, ItemRatingWeight) == 0x000014, "Member 'FFortCollectionBookSlotXPWeightData::ItemRatingWeight' has a wrong offset!");

// ScriptStruct FortniteGame.CloudColorState
// 0x0050 (0x0050 - 0x0000)
struct FCloudColorState final
{
public:
	struct FLinearColor                           BottomEmissive;                                    // 0x0000(0x0010)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TopEmissive;                                       // 0x0010(0x0010)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BottomLightning;                                   // 0x0020(0x0010)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TopLightning;                                      // 0x0030(0x0010)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InternalColor;                                     // 0x0040(0x0010)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudColorState) == 0x000004, "Wrong alignment on FCloudColorState");
static_assert(sizeof(FCloudColorState) == 0x000050, "Wrong size on FCloudColorState");
static_assert(offsetof(FCloudColorState, BottomEmissive) == 0x000000, "Member 'FCloudColorState::BottomEmissive' has a wrong offset!");
static_assert(offsetof(FCloudColorState, TopEmissive) == 0x000010, "Member 'FCloudColorState::TopEmissive' has a wrong offset!");
static_assert(offsetof(FCloudColorState, BottomLightning) == 0x000020, "Member 'FCloudColorState::BottomLightning' has a wrong offset!");
static_assert(offsetof(FCloudColorState, TopLightning) == 0x000030, "Member 'FCloudColorState::TopLightning' has a wrong offset!");
static_assert(offsetof(FCloudColorState, InternalColor) == 0x000040, "Member 'FCloudColorState::InternalColor' has a wrong offset!");

// ScriptStruct FortniteGame.MeshSet
// 0x0060 (0x0060 - 0x0000)
struct FMeshSet final
{
public:
	float                                         Weight;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortResourceType                             ResourceType;                                      // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bDoNotBlockBuildings : 1;                          // 0x0005(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDestroyOnPlayerBuildingPlacement : 1;             // 0x0005(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNeedsDamageOverlay : 1;                           // 0x0005(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            BaseMesh;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        BreakEffect;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        DeathParticles;                                    // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DeathParticleSocketName;                           // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             DeathSound;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        ConstructedEffect;                                 // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            SearchedMesh;                                      // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   SearchSpeed;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                         LootNoiseRange;                                    // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LootSpawnLocation;                                 // 0x0054(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMeshSet) == 0x000008, "Wrong alignment on FMeshSet");
static_assert(sizeof(FMeshSet) == 0x000060, "Wrong size on FMeshSet");
static_assert(offsetof(FMeshSet, Weight) == 0x000000, "Member 'FMeshSet::Weight' has a wrong offset!");
static_assert(offsetof(FMeshSet, ResourceType) == 0x000004, "Member 'FMeshSet::ResourceType' has a wrong offset!");
static_assert(offsetof(FMeshSet, BaseMesh) == 0x000008, "Member 'FMeshSet::BaseMesh' has a wrong offset!");
static_assert(offsetof(FMeshSet, BreakEffect) == 0x000010, "Member 'FMeshSet::BreakEffect' has a wrong offset!");
static_assert(offsetof(FMeshSet, DeathParticles) == 0x000018, "Member 'FMeshSet::DeathParticles' has a wrong offset!");
static_assert(offsetof(FMeshSet, DeathParticleSocketName) == 0x000020, "Member 'FMeshSet::DeathParticleSocketName' has a wrong offset!");
static_assert(offsetof(FMeshSet, DeathSound) == 0x000028, "Member 'FMeshSet::DeathSound' has a wrong offset!");
static_assert(offsetof(FMeshSet, ConstructedEffect) == 0x000030, "Member 'FMeshSet::ConstructedEffect' has a wrong offset!");
static_assert(offsetof(FMeshSet, SearchedMesh) == 0x000038, "Member 'FMeshSet::SearchedMesh' has a wrong offset!");
static_assert(offsetof(FMeshSet, SearchSpeed) == 0x000040, "Member 'FMeshSet::SearchSpeed' has a wrong offset!");
static_assert(offsetof(FMeshSet, LootNoiseRange) == 0x000050, "Member 'FMeshSet::LootNoiseRange' has a wrong offset!");
static_assert(offsetof(FMeshSet, LootSpawnLocation) == 0x000054, "Member 'FMeshSet::LootSpawnLocation' has a wrong offset!");

// ScriptStruct FortniteGame.TierMeshSets
// 0x0018 (0x0018 - 0x0000)
struct FTierMeshSets final
{
public:
	int32                                         Tier;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMeshSet>                       MeshSets;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTierMeshSets) == 0x000008, "Wrong alignment on FTierMeshSets");
static_assert(sizeof(FTierMeshSets) == 0x000018, "Wrong size on FTierMeshSets");
static_assert(offsetof(FTierMeshSets, Tier) == 0x000000, "Member 'FTierMeshSets::Tier' has a wrong offset!");
static_assert(offsetof(FTierMeshSets, MeshSets) == 0x000008, "Member 'FTierMeshSets::MeshSets' has a wrong offset!");

// ScriptStruct FortniteGame.FortWorldProfileUpdateRequest
// 0x0110 (0x0110 - 0x0000)
struct alignas(0x10) FFortWorldProfileUpdateRequest final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortMcpProfileWorld*>           WorldProfilesToSave;                               // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumberOfRequests;                                  // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0xAC];                                      // 0x0064(0x00AC)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortWorldProfileUpdateRequest) == 0x000010, "Wrong alignment on FFortWorldProfileUpdateRequest");
static_assert(sizeof(FFortWorldProfileUpdateRequest) == 0x000110, "Wrong size on FFortWorldProfileUpdateRequest");
static_assert(offsetof(FFortWorldProfileUpdateRequest, WorldProfilesToSave) == 0x000040, "Member 'FFortWorldProfileUpdateRequest::WorldProfilesToSave' has a wrong offset!");
static_assert(offsetof(FFortWorldProfileUpdateRequest, NumberOfRequests) == 0x000060, "Member 'FFortWorldProfileUpdateRequest::NumberOfRequests' has a wrong offset!");

// ScriptStruct FortniteGame.FortWeakSpotPosition
// 0x001C (0x001C - 0x0000)
struct FFortWeakSpotPosition final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x000C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValidSpot;                                        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortWeakSpotPosition) == 0x000004, "Wrong alignment on FFortWeakSpotPosition");
static_assert(sizeof(FFortWeakSpotPosition) == 0x00001C, "Wrong size on FFortWeakSpotPosition");
static_assert(offsetof(FFortWeakSpotPosition, Position) == 0x000000, "Member 'FFortWeakSpotPosition::Position' has a wrong offset!");
static_assert(offsetof(FFortWeakSpotPosition, Normal) == 0x00000C, "Member 'FFortWeakSpotPosition::Normal' has a wrong offset!");
static_assert(offsetof(FFortWeakSpotPosition, bValidSpot) == 0x000018, "Member 'FFortWeakSpotPosition::bValidSpot' has a wrong offset!");

// ScriptStruct FortniteGame.FortDamageNumberInfo
// 0x0068 (0x0068 - 0x0000)
struct FFortDamageNumberInfo final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitNormal;                                         // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCriticalDamage;                                 // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Damage;                                            // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDamageNumberType                         DamageNumberType;                                  // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VisualDamageScale;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortElementalDamageType                      ElementalDamageType;                               // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStatCategory                                 ScoreType;                                         // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttachScoreNumberToPlayer;                        // 0x002A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   StaticMeshComponent;                               // 0x0030(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceDynamic*>       MeshMIDs;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 DamageNumberArray;                                 // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  DamagedActor;                                      // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class APawn>                   DamageCauser;                                      // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortDamageNumberInfo) == 0x000008, "Wrong alignment on FFortDamageNumberInfo");
static_assert(sizeof(FFortDamageNumberInfo) == 0x000068, "Wrong size on FFortDamageNumberInfo");
static_assert(offsetof(FFortDamageNumberInfo, WorldLocation) == 0x000000, "Member 'FFortDamageNumberInfo::WorldLocation' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberInfo, HitNormal) == 0x00000C, "Member 'FFortDamageNumberInfo::HitNormal' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberInfo, bIsCriticalDamage) == 0x000018, "Member 'FFortDamageNumberInfo::bIsCriticalDamage' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberInfo, Damage) == 0x00001C, "Member 'FFortDamageNumberInfo::Damage' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberInfo, DamageNumberType) == 0x000020, "Member 'FFortDamageNumberInfo::DamageNumberType' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberInfo, VisualDamageScale) == 0x000024, "Member 'FFortDamageNumberInfo::VisualDamageScale' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberInfo, ElementalDamageType) == 0x000028, "Member 'FFortDamageNumberInfo::ElementalDamageType' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberInfo, ScoreType) == 0x000029, "Member 'FFortDamageNumberInfo::ScoreType' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberInfo, bAttachScoreNumberToPlayer) == 0x00002A, "Member 'FFortDamageNumberInfo::bAttachScoreNumberToPlayer' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberInfo, StaticMeshComponent) == 0x000030, "Member 'FFortDamageNumberInfo::StaticMeshComponent' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberInfo, MeshMIDs) == 0x000038, "Member 'FFortDamageNumberInfo::MeshMIDs' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberInfo, DamageNumberArray) == 0x000048, "Member 'FFortDamageNumberInfo::DamageNumberArray' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberInfo, DamagedActor) == 0x000058, "Member 'FFortDamageNumberInfo::DamagedActor' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberInfo, DamageCauser) == 0x000060, "Member 'FFortDamageNumberInfo::DamageCauser' has a wrong offset!");

// ScriptStruct FortniteGame.SkyLightValues
// 0x0028 (0x0028 - 0x0000)
struct FSkyLightValues final
{
public:
	struct FLinearColor                           SkyLightColor;                                     // 0x0000(0x0010)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkyLightOcclusionTint;                             // 0x0010(0x0010)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkyLightMinOcclusion;                              // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricScatteringIntensity;                     // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkyLightValues) == 0x000004, "Wrong alignment on FSkyLightValues");
static_assert(sizeof(FSkyLightValues) == 0x000028, "Wrong size on FSkyLightValues");
static_assert(offsetof(FSkyLightValues, SkyLightColor) == 0x000000, "Member 'FSkyLightValues::SkyLightColor' has a wrong offset!");
static_assert(offsetof(FSkyLightValues, SkyLightOcclusionTint) == 0x000010, "Member 'FSkyLightValues::SkyLightOcclusionTint' has a wrong offset!");
static_assert(offsetof(FSkyLightValues, SkyLightMinOcclusion) == 0x000020, "Member 'FSkyLightValues::SkyLightMinOcclusion' has a wrong offset!");
static_assert(offsetof(FSkyLightValues, VolumetricScatteringIntensity) == 0x000024, "Member 'FSkyLightValues::VolumetricScatteringIntensity' has a wrong offset!");

// ScriptStruct FortniteGame.BuildingValueRules
// 0x001C (0x001C - 0x0000)
struct FBuildingValueRules final
{
public:
	int32                                         CellsAbove;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellsBelow;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellHorizontalRadius;                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceFromObjectiveWeight;                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackWeight;                                      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StructuralWeight;                                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrapWeight;                                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildingValueRules) == 0x000004, "Wrong alignment on FBuildingValueRules");
static_assert(sizeof(FBuildingValueRules) == 0x00001C, "Wrong size on FBuildingValueRules");
static_assert(offsetof(FBuildingValueRules, CellsAbove) == 0x000000, "Member 'FBuildingValueRules::CellsAbove' has a wrong offset!");
static_assert(offsetof(FBuildingValueRules, CellsBelow) == 0x000004, "Member 'FBuildingValueRules::CellsBelow' has a wrong offset!");
static_assert(offsetof(FBuildingValueRules, CellHorizontalRadius) == 0x000008, "Member 'FBuildingValueRules::CellHorizontalRadius' has a wrong offset!");
static_assert(offsetof(FBuildingValueRules, DistanceFromObjectiveWeight) == 0x00000C, "Member 'FBuildingValueRules::DistanceFromObjectiveWeight' has a wrong offset!");
static_assert(offsetof(FBuildingValueRules, AttackWeight) == 0x000010, "Member 'FBuildingValueRules::AttackWeight' has a wrong offset!");
static_assert(offsetof(FBuildingValueRules, StructuralWeight) == 0x000014, "Member 'FBuildingValueRules::StructuralWeight' has a wrong offset!");
static_assert(offsetof(FBuildingValueRules, TrapWeight) == 0x000018, "Member 'FBuildingValueRules::TrapWeight' has a wrong offset!");

// ScriptStruct FortniteGame.FortTooltipDisplayInfo
// 0x0038 (0x0038 - 0x0000)
struct FFortTooltipDisplayInfo final
{
public:
	class UClass*                                 PrimaryObjectClass;                                // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 SecondaryObjectClass;                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  DescriptionStatsTags;                              // 0x0010(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UFortTooltipDisplayStatsList*           TooltipStatsList;                                  // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTooltipDisplayInfo) == 0x000008, "Wrong alignment on FFortTooltipDisplayInfo");
static_assert(sizeof(FFortTooltipDisplayInfo) == 0x000038, "Wrong size on FFortTooltipDisplayInfo");
static_assert(offsetof(FFortTooltipDisplayInfo, PrimaryObjectClass) == 0x000000, "Member 'FFortTooltipDisplayInfo::PrimaryObjectClass' has a wrong offset!");
static_assert(offsetof(FFortTooltipDisplayInfo, SecondaryObjectClass) == 0x000008, "Member 'FFortTooltipDisplayInfo::SecondaryObjectClass' has a wrong offset!");
static_assert(offsetof(FFortTooltipDisplayInfo, DescriptionStatsTags) == 0x000010, "Member 'FFortTooltipDisplayInfo::DescriptionStatsTags' has a wrong offset!");
static_assert(offsetof(FFortTooltipDisplayInfo, TooltipStatsList) == 0x000030, "Member 'FFortTooltipDisplayInfo::TooltipStatsList' has a wrong offset!");

// ScriptStruct FortniteGame.MOBATurretPrioritySetting
// 0x000C (0x000C - 0x0000)
struct FMOBATurretPrioritySetting final
{
public:
	int32                                         AIPriority;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerPriority;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuildingPriority;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMOBATurretPrioritySetting) == 0x000004, "Wrong alignment on FMOBATurretPrioritySetting");
static_assert(sizeof(FMOBATurretPrioritySetting) == 0x00000C, "Wrong size on FMOBATurretPrioritySetting");
static_assert(offsetof(FMOBATurretPrioritySetting, AIPriority) == 0x000000, "Member 'FMOBATurretPrioritySetting::AIPriority' has a wrong offset!");
static_assert(offsetof(FMOBATurretPrioritySetting, PlayerPriority) == 0x000004, "Member 'FMOBATurretPrioritySetting::PlayerPriority' has a wrong offset!");
static_assert(offsetof(FMOBATurretPrioritySetting, BuildingPriority) == 0x000008, "Member 'FMOBATurretPrioritySetting::BuildingPriority' has a wrong offset!");

// ScriptStruct FortniteGame.FortBounceData
// 0x0030 (0x0030 - 0x0000)
struct FFortBounceData final
{
public:
	float                                         StartTime;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BounceValue;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DeformationVector;                                 // 0x000C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DeformationCenter;                                 // 0x001C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBounceType                               BounceType;                                        // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortBounceData) == 0x000004, "Wrong alignment on FFortBounceData");
static_assert(sizeof(FFortBounceData) == 0x000030, "Wrong size on FFortBounceData");
static_assert(offsetof(FFortBounceData, StartTime) == 0x000000, "Member 'FFortBounceData::StartTime' has a wrong offset!");
static_assert(offsetof(FFortBounceData, BounceValue) == 0x000004, "Member 'FFortBounceData::BounceValue' has a wrong offset!");
static_assert(offsetof(FFortBounceData, Radius) == 0x000008, "Member 'FFortBounceData::Radius' has a wrong offset!");
static_assert(offsetof(FFortBounceData, DeformationVector) == 0x00000C, "Member 'FFortBounceData::DeformationVector' has a wrong offset!");
static_assert(offsetof(FFortBounceData, DeformationCenter) == 0x00001C, "Member 'FFortBounceData::DeformationCenter' has a wrong offset!");
static_assert(offsetof(FFortBounceData, BounceType) == 0x00002C, "Member 'FFortBounceData::BounceType' has a wrong offset!");

// ScriptStruct FortniteGame.ClimbLinkData
// 0x0028 (0x0028 - 0x0000)
struct FClimbLinkData final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        UniqueLinkId;                                      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClimbLinkData) == 0x000004, "Wrong alignment on FClimbLinkData");
static_assert(sizeof(FClimbLinkData) == 0x000028, "Wrong size on FClimbLinkData");
static_assert(offsetof(FClimbLinkData, UniqueLinkId) == 0x000020, "Member 'FClimbLinkData::UniqueLinkId' has a wrong offset!");

// ScriptStruct FortniteGame.MissionTimerData
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FMissionTimerData final
{
public:
	bool                                          bTimerIsPaused;                                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OriginalTimePeriod;                                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReplicatedRemainingTime;                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClientRemainingTime;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x18];                                      // 0x0010(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMissionTimerData) == 0x000008, "Wrong alignment on FMissionTimerData");
static_assert(sizeof(FMissionTimerData) == 0x000028, "Wrong size on FMissionTimerData");
static_assert(offsetof(FMissionTimerData, bTimerIsPaused) == 0x000000, "Member 'FMissionTimerData::bTimerIsPaused' has a wrong offset!");
static_assert(offsetof(FMissionTimerData, OriginalTimePeriod) == 0x000004, "Member 'FMissionTimerData::OriginalTimePeriod' has a wrong offset!");
static_assert(offsetof(FMissionTimerData, ReplicatedRemainingTime) == 0x000008, "Member 'FMissionTimerData::ReplicatedRemainingTime' has a wrong offset!");
static_assert(offsetof(FMissionTimerData, ClientRemainingTime) == 0x00000C, "Member 'FMissionTimerData::ClientRemainingTime' has a wrong offset!");

// ScriptStruct FortniteGame.CustomPartMaterialOverrideData
// 0x0030 (0x0030 - 0x0000)
struct FCustomPartMaterialOverrideData final
{
public:
	int32                                         MaterialOverrideIndex;                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInterface>      OverrideMaterial;                                  // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomPartMaterialOverrideData) == 0x000008, "Wrong alignment on FCustomPartMaterialOverrideData");
static_assert(sizeof(FCustomPartMaterialOverrideData) == 0x000030, "Wrong size on FCustomPartMaterialOverrideData");
static_assert(offsetof(FCustomPartMaterialOverrideData, MaterialOverrideIndex) == 0x000000, "Member 'FCustomPartMaterialOverrideData::MaterialOverrideIndex' has a wrong offset!");
static_assert(offsetof(FCustomPartMaterialOverrideData, OverrideMaterial) == 0x000008, "Member 'FCustomPartMaterialOverrideData::OverrideMaterial' has a wrong offset!");

// ScriptStruct FortniteGame.ZoneLoadingScreenHeadingConfig
// 0x0038 (0x0038 - 0x0000)
struct FZoneLoadingScreenHeadingConfig final
{
public:
	class UTexture2D*                             HeadingImage;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Heading;                                           // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   HeadingDescription;                                // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZoneLoadingScreenHeadingConfig) == 0x000008, "Wrong alignment on FZoneLoadingScreenHeadingConfig");
static_assert(sizeof(FZoneLoadingScreenHeadingConfig) == 0x000038, "Wrong size on FZoneLoadingScreenHeadingConfig");
static_assert(offsetof(FZoneLoadingScreenHeadingConfig, HeadingImage) == 0x000000, "Member 'FZoneLoadingScreenHeadingConfig::HeadingImage' has a wrong offset!");
static_assert(offsetof(FZoneLoadingScreenHeadingConfig, Heading) == 0x000008, "Member 'FZoneLoadingScreenHeadingConfig::Heading' has a wrong offset!");
static_assert(offsetof(FZoneLoadingScreenHeadingConfig, HeadingDescription) == 0x000020, "Member 'FZoneLoadingScreenHeadingConfig::HeadingDescription' has a wrong offset!");

// ScriptStruct FortniteGame.ZoneLoadingScreenConfig
// 0x0110 (0x0110 - 0x0000)
struct FZoneLoadingScreenConfig final
{
public:
	TSoftObjectPtr<class UTexture2D>              BackgroundImage;                                   // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TitleDescription;                                  // 0x0028(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0040(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FZoneLoadingScreenHeadingConfig        Headings[0x3];                                     // 0x0058(0x0038)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class UFortTips*>                      LoadingTips;                                       // 0x0100(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZoneLoadingScreenConfig) == 0x000008, "Wrong alignment on FZoneLoadingScreenConfig");
static_assert(sizeof(FZoneLoadingScreenConfig) == 0x000110, "Wrong size on FZoneLoadingScreenConfig");
static_assert(offsetof(FZoneLoadingScreenConfig, BackgroundImage) == 0x000000, "Member 'FZoneLoadingScreenConfig::BackgroundImage' has a wrong offset!");
static_assert(offsetof(FZoneLoadingScreenConfig, TitleDescription) == 0x000028, "Member 'FZoneLoadingScreenConfig::TitleDescription' has a wrong offset!");
static_assert(offsetof(FZoneLoadingScreenConfig, Title) == 0x000040, "Member 'FZoneLoadingScreenConfig::Title' has a wrong offset!");
static_assert(offsetof(FZoneLoadingScreenConfig, Headings) == 0x000058, "Member 'FZoneLoadingScreenConfig::Headings' has a wrong offset!");
static_assert(offsetof(FZoneLoadingScreenConfig, LoadingTips) == 0x000100, "Member 'FZoneLoadingScreenConfig::LoadingTips' has a wrong offset!");

// ScriptStruct FortniteGame.CustomPartVectorParameter
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FCustomPartVectorParameter final
{
public:
	int32                                         MaterialIndexForVectorParameter;                   // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   VectorParameterNameForMaterial;                    // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           VectorOverride;                                    // 0x0010(0x0010)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomPartVectorParameter) == 0x000008, "Wrong alignment on FCustomPartVectorParameter");
static_assert(sizeof(FCustomPartVectorParameter) == 0x000020, "Wrong size on FCustomPartVectorParameter");
static_assert(offsetof(FCustomPartVectorParameter, MaterialIndexForVectorParameter) == 0x000000, "Member 'FCustomPartVectorParameter::MaterialIndexForVectorParameter' has a wrong offset!");
static_assert(offsetof(FCustomPartVectorParameter, VectorParameterNameForMaterial) == 0x000008, "Member 'FCustomPartVectorParameter::VectorParameterNameForMaterial' has a wrong offset!");
static_assert(offsetof(FCustomPartVectorParameter, VectorOverride) == 0x000010, "Member 'FCustomPartVectorParameter::VectorOverride' has a wrong offset!");

// ScriptStruct FortniteGame.DecoPlacementState
// 0x0080 (0x0080 - 0x0000)
struct FDecoPlacementState final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x000C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RawLocation;                                       // 0x0018(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0024(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  AbsoluteRotation;                                  // 0x0030(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                GridLocation;                                      // 0x0040(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PreviousLocation;                                  // 0x004C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FallbackLocation;                                  // 0x0058(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  LastHitActor;                                      // 0x0064(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ABuildingSMActor>        CurrentBuildingActorAttachment;                    // 0x006C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDecoPlacementQueryResults                CanPlaceState;                                     // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0xB];                                       // 0x0075(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDecoPlacementState) == 0x000010, "Wrong alignment on FDecoPlacementState");
static_assert(sizeof(FDecoPlacementState) == 0x000080, "Wrong size on FDecoPlacementState");
static_assert(offsetof(FDecoPlacementState, Start) == 0x000000, "Member 'FDecoPlacementState::Start' has a wrong offset!");
static_assert(offsetof(FDecoPlacementState, End) == 0x00000C, "Member 'FDecoPlacementState::End' has a wrong offset!");
static_assert(offsetof(FDecoPlacementState, RawLocation) == 0x000018, "Member 'FDecoPlacementState::RawLocation' has a wrong offset!");
static_assert(offsetof(FDecoPlacementState, Normal) == 0x000024, "Member 'FDecoPlacementState::Normal' has a wrong offset!");
static_assert(offsetof(FDecoPlacementState, AbsoluteRotation) == 0x000030, "Member 'FDecoPlacementState::AbsoluteRotation' has a wrong offset!");
static_assert(offsetof(FDecoPlacementState, GridLocation) == 0x000040, "Member 'FDecoPlacementState::GridLocation' has a wrong offset!");
static_assert(offsetof(FDecoPlacementState, PreviousLocation) == 0x00004C, "Member 'FDecoPlacementState::PreviousLocation' has a wrong offset!");
static_assert(offsetof(FDecoPlacementState, FallbackLocation) == 0x000058, "Member 'FDecoPlacementState::FallbackLocation' has a wrong offset!");
static_assert(offsetof(FDecoPlacementState, LastHitActor) == 0x000064, "Member 'FDecoPlacementState::LastHitActor' has a wrong offset!");
static_assert(offsetof(FDecoPlacementState, CurrentBuildingActorAttachment) == 0x00006C, "Member 'FDecoPlacementState::CurrentBuildingActorAttachment' has a wrong offset!");
static_assert(offsetof(FDecoPlacementState, CanPlaceState) == 0x000074, "Member 'FDecoPlacementState::CanPlaceState' has a wrong offset!");

// ScriptStruct FortniteGame.CustomPartScalarParameter
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FCustomPartScalarParameter final
{
public:
	int32                                         MaterialIndexForScalarParameter;                   // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ScalarParameterNameForMaterial;                    // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScalarOverride;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCustomPartScalarParameter) == 0x000008, "Wrong alignment on FCustomPartScalarParameter");
static_assert(sizeof(FCustomPartScalarParameter) == 0x000018, "Wrong size on FCustomPartScalarParameter");
static_assert(offsetof(FCustomPartScalarParameter, MaterialIndexForScalarParameter) == 0x000000, "Member 'FCustomPartScalarParameter::MaterialIndexForScalarParameter' has a wrong offset!");
static_assert(offsetof(FCustomPartScalarParameter, ScalarParameterNameForMaterial) == 0x000008, "Member 'FCustomPartScalarParameter::ScalarParameterNameForMaterial' has a wrong offset!");
static_assert(offsetof(FCustomPartScalarParameter, ScalarOverride) == 0x000010, "Member 'FCustomPartScalarParameter::ScalarOverride' has a wrong offset!");

// ScriptStruct FortniteGame.FortTheaterMissionWeight
// 0x0030 (0x0030 - 0x0000)
struct FFortTheaterMissionWeight final
{
public:
	TSoftClassPtr<class UClass>                   MissionGenerator;                                  // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortTheaterMissionWeight) == 0x000008, "Wrong alignment on FFortTheaterMissionWeight");
static_assert(sizeof(FFortTheaterMissionWeight) == 0x000030, "Wrong size on FFortTheaterMissionWeight");
static_assert(offsetof(FFortTheaterMissionWeight, MissionGenerator) == 0x000000, "Member 'FFortTheaterMissionWeight::MissionGenerator' has a wrong offset!");
static_assert(offsetof(FFortTheaterMissionWeight, Weight) == 0x000028, "Member 'FFortTheaterMissionWeight::Weight' has a wrong offset!");

// ScriptStruct FortniteGame.FortTheaterMapTileData
// 0x00D8 (0x00D8 - 0x0000)
struct FFortTheaterMapTileData final
{
public:
	EFortTheaterMapTileType                       TileType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   ZoneTheme;                                         // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortRequirementsInfo                  Requirements;                                      // 0x0030(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FFortLinkedQuest>               LinkedQuests;                                      // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         XCoordinate;                                       // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         YCoordinate;                                       // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortTheaterMissionWeight>      MissionWeightOverrides;                            // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortTheaterDifficultyWeight>   DifficultyWeightOverrides;                         // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          CanBeMissionAlert;                                 // 0x00B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TileTags;                                          // 0x00B8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTheaterMapTileData) == 0x000008, "Wrong alignment on FFortTheaterMapTileData");
static_assert(sizeof(FFortTheaterMapTileData) == 0x0000D8, "Wrong size on FFortTheaterMapTileData");
static_assert(offsetof(FFortTheaterMapTileData, TileType) == 0x000000, "Member 'FFortTheaterMapTileData::TileType' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapTileData, ZoneTheme) == 0x000008, "Member 'FFortTheaterMapTileData::ZoneTheme' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapTileData, Requirements) == 0x000030, "Member 'FFortTheaterMapTileData::Requirements' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapTileData, LinkedQuests) == 0x000078, "Member 'FFortTheaterMapTileData::LinkedQuests' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapTileData, XCoordinate) == 0x000088, "Member 'FFortTheaterMapTileData::XCoordinate' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapTileData, YCoordinate) == 0x00008C, "Member 'FFortTheaterMapTileData::YCoordinate' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapTileData, MissionWeightOverrides) == 0x000090, "Member 'FFortTheaterMapTileData::MissionWeightOverrides' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapTileData, DifficultyWeightOverrides) == 0x0000A0, "Member 'FFortTheaterMapTileData::DifficultyWeightOverrides' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapTileData, CanBeMissionAlert) == 0x0000B0, "Member 'FFortTheaterMapTileData::CanBeMissionAlert' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapTileData, TileTags) == 0x0000B8, "Member 'FFortTheaterMapTileData::TileTags' has a wrong offset!");

// ScriptStruct FortniteGame.CustomPartTextureParameter
// 0x0038 (0x0038 - 0x0000)
struct FCustomPartTextureParameter final
{
public:
	int32                                         MaterialIndexForTextureParameter;                  // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TextureParameterNameForMaterial;                   // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                TextureOverride;                                   // 0x0010(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FCustomPartTextureParameter) == 0x000008, "Wrong alignment on FCustomPartTextureParameter");
static_assert(sizeof(FCustomPartTextureParameter) == 0x000038, "Wrong size on FCustomPartTextureParameter");
static_assert(offsetof(FCustomPartTextureParameter, MaterialIndexForTextureParameter) == 0x000000, "Member 'FCustomPartTextureParameter::MaterialIndexForTextureParameter' has a wrong offset!");
static_assert(offsetof(FCustomPartTextureParameter, TextureParameterNameForMaterial) == 0x000008, "Member 'FCustomPartTextureParameter::TextureParameterNameForMaterial' has a wrong offset!");
static_assert(offsetof(FCustomPartTextureParameter, TextureOverride) == 0x000010, "Member 'FCustomPartTextureParameter::TextureOverride' has a wrong offset!");

// ScriptStruct FortniteGame.FortTwitchViewerCompletedQuestNotification
// 0x0010 (0x0010 - 0x0000)
struct FFortTwitchViewerCompletedQuestNotification final
{
public:
	TArray<struct FFortTwitchViewerNameAndAccountId> ViewerIds;                                         // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTwitchViewerCompletedQuestNotification) == 0x000008, "Wrong alignment on FFortTwitchViewerCompletedQuestNotification");
static_assert(sizeof(FFortTwitchViewerCompletedQuestNotification) == 0x000010, "Wrong size on FFortTwitchViewerCompletedQuestNotification");
static_assert(offsetof(FFortTwitchViewerCompletedQuestNotification, ViewerIds) == 0x000000, "Member 'FFortTwitchViewerCompletedQuestNotification::ViewerIds' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayEffectDeliveryInfo
// 0x00A8 (0x00A8 - 0x0000)
struct FFortGameplayEffectDeliveryInfo final
{
public:
	struct FFortDeliveryInfoRequirementsFilter    DeliveryRequirements;                              // 0x0000(0x0098)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FGameplayEffectApplicationInfo> GameplayEffects;                                   // 0x0098(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortGameplayEffectDeliveryInfo) == 0x000008, "Wrong alignment on FFortGameplayEffectDeliveryInfo");
static_assert(sizeof(FFortGameplayEffectDeliveryInfo) == 0x0000A8, "Wrong size on FFortGameplayEffectDeliveryInfo");
static_assert(offsetof(FFortGameplayEffectDeliveryInfo, DeliveryRequirements) == 0x000000, "Member 'FFortGameplayEffectDeliveryInfo::DeliveryRequirements' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectDeliveryInfo, GameplayEffects) == 0x000098, "Member 'FFortGameplayEffectDeliveryInfo::GameplayEffects' has a wrong offset!");

// ScriptStruct FortniteGame.FortCrackEffectData
// 0x0028 (0x0028 - 0x0000)
struct FFortCrackEffectData final
{
public:
	struct FVector_NetQuantizeNormal              Normal;                                            // 0x0000(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  Position;                                          // 0x000C(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	EPhysicalSurface                              SurfaceType;                                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortCrackEffect*                       OldCrackEffect;                                    // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCrackEffectData) == 0x000008, "Wrong alignment on FFortCrackEffectData");
static_assert(sizeof(FFortCrackEffectData) == 0x000028, "Wrong size on FFortCrackEffectData");
static_assert(offsetof(FFortCrackEffectData, Normal) == 0x000000, "Member 'FFortCrackEffectData::Normal' has a wrong offset!");
static_assert(offsetof(FFortCrackEffectData, Position) == 0x00000C, "Member 'FFortCrackEffectData::Position' has a wrong offset!");
static_assert(offsetof(FFortCrackEffectData, SurfaceType) == 0x000018, "Member 'FFortCrackEffectData::SurfaceType' has a wrong offset!");
static_assert(offsetof(FFortCrackEffectData, OldCrackEffect) == 0x000020, "Member 'FFortCrackEffectData::OldCrackEffect' has a wrong offset!");

// ScriptStruct FortniteGame.GameplayTagAnimationData
// 0x0050 (0x0050 - 0x0000)
struct FGameplayTagAnimationData final
{
public:
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0000(0x0020)(Edit, NativeAccessSpecifierPrivate)
	EFortCustomGender                             ValidGenders;                                      // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAnimMontage>            AnimMontage;                                       // 0x0028(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FGameplayTagAnimationData) == 0x000008, "Wrong alignment on FGameplayTagAnimationData");
static_assert(sizeof(FGameplayTagAnimationData) == 0x000050, "Wrong size on FGameplayTagAnimationData");
static_assert(offsetof(FGameplayTagAnimationData, GameplayTags) == 0x000000, "Member 'FGameplayTagAnimationData::GameplayTags' has a wrong offset!");
static_assert(offsetof(FGameplayTagAnimationData, ValidGenders) == 0x000020, "Member 'FGameplayTagAnimationData::ValidGenders' has a wrong offset!");
static_assert(offsetof(FGameplayTagAnimationData, AnimMontage) == 0x000028, "Member 'FGameplayTagAnimationData::AnimMontage' has a wrong offset!");

// ScriptStruct FortniteGame.GameplayTagAnimations
// 0x0010 (0x0010 - 0x0000)
struct FGameplayTagAnimations final
{
public:
	TArray<struct FGameplayTagAnimationData>      GameplayTagAnimData;                               // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FGameplayTagAnimations) == 0x000008, "Wrong alignment on FGameplayTagAnimations");
static_assert(sizeof(FGameplayTagAnimations) == 0x000010, "Wrong size on FGameplayTagAnimations");
static_assert(offsetof(FGameplayTagAnimations, GameplayTagAnimData) == 0x000000, "Member 'FGameplayTagAnimations::GameplayTagAnimData' has a wrong offset!");

// ScriptStruct FortniteGame.FortMontageInputAction
// 0x0018 (0x0018 - 0x0000)
struct FFortMontageInputAction final
{
public:
	struct FGameplayTag                           TriggerAbilityTag;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NextSection;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMontageInputType                         InputType;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMontageInputAction) == 0x000008, "Wrong alignment on FFortMontageInputAction");
static_assert(sizeof(FFortMontageInputAction) == 0x000018, "Wrong size on FFortMontageInputAction");
static_assert(offsetof(FFortMontageInputAction, TriggerAbilityTag) == 0x000000, "Member 'FFortMontageInputAction::TriggerAbilityTag' has a wrong offset!");
static_assert(offsetof(FFortMontageInputAction, NextSection) == 0x000008, "Member 'FFortMontageInputAction::NextSection' has a wrong offset!");
static_assert(offsetof(FFortMontageInputAction, InputType) == 0x000010, "Member 'FFortMontageInputAction::InputType' has a wrong offset!");

// ScriptStruct FortniteGame.SpeedWarpingFootDefinition
// 0x0038 (0x0038 - 0x0000)
struct FSpeedWarpingFootDefinition final
{
public:
	struct FBoneReference                         IKFootBone;                                        // 0x0000(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         FKFootBone;                                        // 0x0018(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         NumBonesInLimb;                                    // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpeedWarpingFootDefinition) == 0x000008, "Wrong alignment on FSpeedWarpingFootDefinition");
static_assert(sizeof(FSpeedWarpingFootDefinition) == 0x000038, "Wrong size on FSpeedWarpingFootDefinition");
static_assert(offsetof(FSpeedWarpingFootDefinition, IKFootBone) == 0x000000, "Member 'FSpeedWarpingFootDefinition::IKFootBone' has a wrong offset!");
static_assert(offsetof(FSpeedWarpingFootDefinition, FKFootBone) == 0x000018, "Member 'FSpeedWarpingFootDefinition::FKFootBone' has a wrong offset!");
static_assert(offsetof(FSpeedWarpingFootDefinition, NumBonesInLimb) == 0x000030, "Member 'FSpeedWarpingFootDefinition::NumBonesInLimb' has a wrong offset!");

// ScriptStruct FortniteGame.SpeedWarpingFootData
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x10) FSpeedWarpingFootData final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpeedWarpingFootData) == 0x000010, "Wrong alignment on FSpeedWarpingFootData");
static_assert(sizeof(FSpeedWarpingFootData) == 0x000040, "Wrong size on FSpeedWarpingFootData");

// ScriptStruct FortniteGame.FortAnimNode_SpeedWarping
// 0x00D0 (0x0140 - 0x0070)
struct FFortAnimNode_SpeedWarping final : public FAnimNode_SkeletalControlBase
{
public:
	uint8                                         Pad_70[0x8];                                       // 0x0070(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         IKFootRootBone;                                    // 0x0078(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FSpeedWarpingFootDefinition>    FeetDefinitions;                                   // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSpeedWarpingFootData>          FeetData;                                          // 0x00A0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	struct FBoneReference                         PelvisBone;                                        // 0x00B0(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	ESpeedWarpingAxisMode                         SpeedWarpingAxisMode;                              // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESpeedWarpingAxisMode                         FloorNormalAxisMode;                               // 0x00C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESpeedWarpingAxisMode                         GravityDirAxisMode;                                // 0x00CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_CB[0x1];                                       // 0x00CB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpeedScaling;                                      // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                ManualSpeedWarpingDir;                             // 0x00D0(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                ManualFloorNormalInput;                            // 0x00DC(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                ManualGravityDirInput;                             // 0x00E8(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PelvisPostAdjustmentAlpha;                         // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PelvisAdjustmentMaxIter;                           // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVectorRK4SpringInterpolator           PelvisAdjustmentInterp;                            // 0x00FC(0x0008)(Edit, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_104[0x34];                                     // 0x0104(0x0034)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bAdjustThighBonesRotation : 1;                     // 0x0138(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bClampIKUsingFKLeg : 1;                            // 0x0138(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bOrientSpeedWarpingAxisBasedOnFloorNormal : 1;     // 0x0138(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CachedDeltaTime;                                   // 0x013C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortAnimNode_SpeedWarping) == 0x000008, "Wrong alignment on FFortAnimNode_SpeedWarping");
static_assert(sizeof(FFortAnimNode_SpeedWarping) == 0x000140, "Wrong size on FFortAnimNode_SpeedWarping");
static_assert(offsetof(FFortAnimNode_SpeedWarping, IKFootRootBone) == 0x000078, "Member 'FFortAnimNode_SpeedWarping::IKFootRootBone' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SpeedWarping, FeetDefinitions) == 0x000090, "Member 'FFortAnimNode_SpeedWarping::FeetDefinitions' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SpeedWarping, FeetData) == 0x0000A0, "Member 'FFortAnimNode_SpeedWarping::FeetData' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SpeedWarping, PelvisBone) == 0x0000B0, "Member 'FFortAnimNode_SpeedWarping::PelvisBone' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SpeedWarping, SpeedWarpingAxisMode) == 0x0000C8, "Member 'FFortAnimNode_SpeedWarping::SpeedWarpingAxisMode' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SpeedWarping, FloorNormalAxisMode) == 0x0000C9, "Member 'FFortAnimNode_SpeedWarping::FloorNormalAxisMode' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SpeedWarping, GravityDirAxisMode) == 0x0000CA, "Member 'FFortAnimNode_SpeedWarping::GravityDirAxisMode' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SpeedWarping, SpeedScaling) == 0x0000CC, "Member 'FFortAnimNode_SpeedWarping::SpeedScaling' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SpeedWarping, ManualSpeedWarpingDir) == 0x0000D0, "Member 'FFortAnimNode_SpeedWarping::ManualSpeedWarpingDir' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SpeedWarping, ManualFloorNormalInput) == 0x0000DC, "Member 'FFortAnimNode_SpeedWarping::ManualFloorNormalInput' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SpeedWarping, ManualGravityDirInput) == 0x0000E8, "Member 'FFortAnimNode_SpeedWarping::ManualGravityDirInput' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SpeedWarping, PelvisPostAdjustmentAlpha) == 0x0000F4, "Member 'FFortAnimNode_SpeedWarping::PelvisPostAdjustmentAlpha' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SpeedWarping, PelvisAdjustmentMaxIter) == 0x0000F8, "Member 'FFortAnimNode_SpeedWarping::PelvisAdjustmentMaxIter' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SpeedWarping, PelvisAdjustmentInterp) == 0x0000FC, "Member 'FFortAnimNode_SpeedWarping::PelvisAdjustmentInterp' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SpeedWarping, CachedDeltaTime) == 0x00013C, "Member 'FFortAnimNode_SpeedWarping::CachedDeltaTime' has a wrong offset!");

// ScriptStruct FortniteGame.ColorSwatchPair
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FColorSwatchPair final
{
public:
	class FName                                   ColorName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorValue;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FColorSwatchPair) == 0x000008, "Wrong alignment on FColorSwatchPair");
static_assert(sizeof(FColorSwatchPair) == 0x000018, "Wrong size on FColorSwatchPair");
static_assert(offsetof(FColorSwatchPair, ColorName) == 0x000000, "Member 'FColorSwatchPair::ColorName' has a wrong offset!");
static_assert(offsetof(FColorSwatchPair, ColorValue) == 0x000008, "Member 'FColorSwatchPair::ColorValue' has a wrong offset!");

// ScriptStruct FortniteGame.QueryXboxUserXUIDParams
// 0x0010 (0x0010 - 0x0000)
struct FQueryXboxUserXUIDParams final
{
public:
	class FString                                 UserXSTSToken;                                     // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQueryXboxUserXUIDParams) == 0x000008, "Wrong alignment on FQueryXboxUserXUIDParams");
static_assert(sizeof(FQueryXboxUserXUIDParams) == 0x000010, "Wrong size on FQueryXboxUserXUIDParams");
static_assert(offsetof(FQueryXboxUserXUIDParams, UserXSTSToken) == 0x000000, "Member 'FQueryXboxUserXUIDParams::UserXSTSToken' has a wrong offset!");

// ScriptStruct FortniteGame.HomebaseBannerIconData
// 0x0088 (0x0090 - 0x0008)
struct FHomebaseBannerIconData final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UTexture2D>              SmallImage;                                        // 0x0008(0x0028)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              LargeImage;                                        // 0x0030(0x0028)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   CategoryRowName;                                   // 0x0058(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   DisplayName;                                       // 0x0060(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   DisplayDescription;                                // 0x0078(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FHomebaseBannerIconData) == 0x000008, "Wrong alignment on FHomebaseBannerIconData");
static_assert(sizeof(FHomebaseBannerIconData) == 0x000090, "Wrong size on FHomebaseBannerIconData");
static_assert(offsetof(FHomebaseBannerIconData, SmallImage) == 0x000008, "Member 'FHomebaseBannerIconData::SmallImage' has a wrong offset!");
static_assert(offsetof(FHomebaseBannerIconData, LargeImage) == 0x000030, "Member 'FHomebaseBannerIconData::LargeImage' has a wrong offset!");
static_assert(offsetof(FHomebaseBannerIconData, CategoryRowName) == 0x000058, "Member 'FHomebaseBannerIconData::CategoryRowName' has a wrong offset!");
static_assert(offsetof(FHomebaseBannerIconData, DisplayName) == 0x000060, "Member 'FHomebaseBannerIconData::DisplayName' has a wrong offset!");
static_assert(offsetof(FHomebaseBannerIconData, DisplayDescription) == 0x000078, "Member 'FHomebaseBannerIconData::DisplayDescription' has a wrong offset!");

// ScriptStruct FortniteGame.FortTheaterMapMissionData
// 0x0030 (0x0030 - 0x0000)
struct FFortTheaterMapMissionData final
{
public:
	TArray<struct FFortTheaterMissionWeight>      MissionWeights;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFortTheaterDifficultyWeight>   DifficultyWeights;                                 // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         NumMissionsAvailable;                              // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumMissionsToChange;                               // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MissionChangeFrequency;                            // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortTheaterMapMissionData) == 0x000008, "Wrong alignment on FFortTheaterMapMissionData");
static_assert(sizeof(FFortTheaterMapMissionData) == 0x000030, "Wrong size on FFortTheaterMapMissionData");
static_assert(offsetof(FFortTheaterMapMissionData, MissionWeights) == 0x000000, "Member 'FFortTheaterMapMissionData::MissionWeights' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapMissionData, DifficultyWeights) == 0x000010, "Member 'FFortTheaterMapMissionData::DifficultyWeights' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapMissionData, NumMissionsAvailable) == 0x000020, "Member 'FFortTheaterMapMissionData::NumMissionsAvailable' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapMissionData, NumMissionsToChange) == 0x000024, "Member 'FFortTheaterMapMissionData::NumMissionsToChange' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapMissionData, MissionChangeFrequency) == 0x000028, "Member 'FFortTheaterMapMissionData::MissionChangeFrequency' has a wrong offset!");

// ScriptStruct FortniteGame.FortTheaterMapRegionData
// 0x00F8 (0x00F8 - 0x0000)
struct FFortTheaterMapRegionData final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RegionTags;                                        // 0x0018(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	TArray<int32>                                 TileIndices;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USlateBrushAsset>        RegionThemeIcon;                                   // 0x0048(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortTheaterMapMissionData             MissionData;                                       // 0x0070(0x0030)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortRequirementsInfo                  Requirements;                                      // 0x00A0(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FFortMissionAlertRequirementsInfo> MissionAlertRequirements;                          // 0x00E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTheaterMapRegionData) == 0x000008, "Wrong alignment on FFortTheaterMapRegionData");
static_assert(sizeof(FFortTheaterMapRegionData) == 0x0000F8, "Wrong size on FFortTheaterMapRegionData");
static_assert(offsetof(FFortTheaterMapRegionData, DisplayName) == 0x000000, "Member 'FFortTheaterMapRegionData::DisplayName' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapRegionData, RegionTags) == 0x000018, "Member 'FFortTheaterMapRegionData::RegionTags' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapRegionData, TileIndices) == 0x000038, "Member 'FFortTheaterMapRegionData::TileIndices' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapRegionData, RegionThemeIcon) == 0x000048, "Member 'FFortTheaterMapRegionData::RegionThemeIcon' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapRegionData, MissionData) == 0x000070, "Member 'FFortTheaterMapRegionData::MissionData' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapRegionData, Requirements) == 0x0000A0, "Member 'FFortTheaterMapRegionData::Requirements' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapRegionData, MissionAlertRequirements) == 0x0000E8, "Member 'FFortTheaterMapRegionData::MissionAlertRequirements' has a wrong offset!");

// ScriptStruct FortniteGame.ThreatCloudValues
// 0x00A0 (0x00A0 - 0x0000)
struct FThreatCloudValues final
{
public:
	struct FCloudColorState                       CloudActivated;                                    // 0x0000(0x0050)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FCloudColorState                       CloudDeactivated;                                  // 0x0050(0x0050)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FThreatCloudValues) == 0x000004, "Wrong alignment on FThreatCloudValues");
static_assert(sizeof(FThreatCloudValues) == 0x0000A0, "Wrong size on FThreatCloudValues");
static_assert(offsetof(FThreatCloudValues, CloudActivated) == 0x000000, "Member 'FThreatCloudValues::CloudActivated' has a wrong offset!");
static_assert(offsetof(FThreatCloudValues, CloudDeactivated) == 0x000050, "Member 'FThreatCloudValues::CloudDeactivated' has a wrong offset!");

// ScriptStruct FortniteGame.DeferredActorData
// 0x0040 (0x0040 - 0x0000)
struct FDeferredActorData final
{
public:
	class ABuildingActor*                         BuildingActor;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActorRecordIndex;                                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             BuildingTransform;                                 // 0x0010(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDeferredActorData) == 0x000010, "Wrong alignment on FDeferredActorData");
static_assert(sizeof(FDeferredActorData) == 0x000040, "Wrong size on FDeferredActorData");
static_assert(offsetof(FDeferredActorData, BuildingActor) == 0x000000, "Member 'FDeferredActorData::BuildingActor' has a wrong offset!");
static_assert(offsetof(FDeferredActorData, ActorRecordIndex) == 0x000008, "Member 'FDeferredActorData::ActorRecordIndex' has a wrong offset!");
static_assert(offsetof(FDeferredActorData, BuildingTransform) == 0x000010, "Member 'FDeferredActorData::BuildingTransform' has a wrong offset!");

// ScriptStruct FortniteGame.FortTierCollectionLayoutOutput
// 0x0050 (0x0050 - 0x0000)
struct FFortTierCollectionLayoutOutput final
{
public:
	class FName                                   SpawnCollectionName;                               // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DifficultyRowName;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ModifierProgressionName;                           // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditiveDifficultyMod;                             // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortBadgeItemDefinition*>       RewardBadges;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           StartTierLootTierGroups;                           // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           WaveCompleteLootTierGroups;                        // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTierCollectionLayoutOutput) == 0x000008, "Wrong alignment on FFortTierCollectionLayoutOutput");
static_assert(sizeof(FFortTierCollectionLayoutOutput) == 0x000050, "Wrong size on FFortTierCollectionLayoutOutput");
static_assert(offsetof(FFortTierCollectionLayoutOutput, SpawnCollectionName) == 0x000000, "Member 'FFortTierCollectionLayoutOutput::SpawnCollectionName' has a wrong offset!");
static_assert(offsetof(FFortTierCollectionLayoutOutput, DifficultyRowName) == 0x000008, "Member 'FFortTierCollectionLayoutOutput::DifficultyRowName' has a wrong offset!");
static_assert(offsetof(FFortTierCollectionLayoutOutput, ModifierProgressionName) == 0x000010, "Member 'FFortTierCollectionLayoutOutput::ModifierProgressionName' has a wrong offset!");
static_assert(offsetof(FFortTierCollectionLayoutOutput, AdditiveDifficultyMod) == 0x000018, "Member 'FFortTierCollectionLayoutOutput::AdditiveDifficultyMod' has a wrong offset!");
static_assert(offsetof(FFortTierCollectionLayoutOutput, RewardBadges) == 0x000020, "Member 'FFortTierCollectionLayoutOutput::RewardBadges' has a wrong offset!");
static_assert(offsetof(FFortTierCollectionLayoutOutput, StartTierLootTierGroups) == 0x000030, "Member 'FFortTierCollectionLayoutOutput::StartTierLootTierGroups' has a wrong offset!");
static_assert(offsetof(FFortTierCollectionLayoutOutput, WaveCompleteLootTierGroups) == 0x000040, "Member 'FFortTierCollectionLayoutOutput::WaveCompleteLootTierGroups' has a wrong offset!");

// ScriptStruct FortniteGame.AvailableTierLayout
// 0x0030 (0x0030 - 0x0000)
struct FAvailableTierLayout final
{
public:
	class UFortTieredCollectionLayout*            Layout;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortTierCollectionLayoutOutput> AvailableTiers;                                    // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortTierCollectionLayoutOutput> LockedTiers;                                       // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bLocked : 1;                                       // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAvailableTierLayout) == 0x000008, "Wrong alignment on FAvailableTierLayout");
static_assert(sizeof(FAvailableTierLayout) == 0x000030, "Wrong size on FAvailableTierLayout");
static_assert(offsetof(FAvailableTierLayout, Layout) == 0x000000, "Member 'FAvailableTierLayout::Layout' has a wrong offset!");
static_assert(offsetof(FAvailableTierLayout, AvailableTiers) == 0x000008, "Member 'FAvailableTierLayout::AvailableTiers' has a wrong offset!");
static_assert(offsetof(FAvailableTierLayout, LockedTiers) == 0x000018, "Member 'FAvailableTierLayout::LockedTiers' has a wrong offset!");

// ScriptStruct FortniteGame.PenetrationAvoidanceFeeler
// 0x0020 (0x0020 - 0x0000)
struct FPenetrationAvoidanceFeeler final
{
public:
	struct FRotator                               AdjustmentRot;                                     // 0x0000(0x000C)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         WorldWeight;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PawnWeight;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Extent;                                            // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TraceInterval;                                     // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FramesUntilNextTrace;                              // 0x001C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPenetrationAvoidanceFeeler) == 0x000004, "Wrong alignment on FPenetrationAvoidanceFeeler");
static_assert(sizeof(FPenetrationAvoidanceFeeler) == 0x000020, "Wrong size on FPenetrationAvoidanceFeeler");
static_assert(offsetof(FPenetrationAvoidanceFeeler, AdjustmentRot) == 0x000000, "Member 'FPenetrationAvoidanceFeeler::AdjustmentRot' has a wrong offset!");
static_assert(offsetof(FPenetrationAvoidanceFeeler, WorldWeight) == 0x00000C, "Member 'FPenetrationAvoidanceFeeler::WorldWeight' has a wrong offset!");
static_assert(offsetof(FPenetrationAvoidanceFeeler, PawnWeight) == 0x000010, "Member 'FPenetrationAvoidanceFeeler::PawnWeight' has a wrong offset!");
static_assert(offsetof(FPenetrationAvoidanceFeeler, Extent) == 0x000014, "Member 'FPenetrationAvoidanceFeeler::Extent' has a wrong offset!");
static_assert(offsetof(FPenetrationAvoidanceFeeler, TraceInterval) == 0x000018, "Member 'FPenetrationAvoidanceFeeler::TraceInterval' has a wrong offset!");
static_assert(offsetof(FPenetrationAvoidanceFeeler, FramesUntilNextTrace) == 0x00001C, "Member 'FPenetrationAvoidanceFeeler::FramesUntilNextTrace' has a wrong offset!");

// ScriptStruct FortniteGame.AbilityToolSpawnParameters
// 0x0028 (0x0028 - 0x0000)
struct FAbilityToolSpawnParameters final
{
public:
	TSubclassOf<class ABuildingActor>             SpawnClass;                                        // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0014(0x000C)(BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class ABuildingSMActor*                       AttachedToActor;                                   // 0x0020(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbilityToolSpawnParameters) == 0x000008, "Wrong alignment on FAbilityToolSpawnParameters");
static_assert(sizeof(FAbilityToolSpawnParameters) == 0x000028, "Wrong size on FAbilityToolSpawnParameters");
static_assert(offsetof(FAbilityToolSpawnParameters, SpawnClass) == 0x000000, "Member 'FAbilityToolSpawnParameters::SpawnClass' has a wrong offset!");
static_assert(offsetof(FAbilityToolSpawnParameters, Location) == 0x000008, "Member 'FAbilityToolSpawnParameters::Location' has a wrong offset!");
static_assert(offsetof(FAbilityToolSpawnParameters, Rotation) == 0x000014, "Member 'FAbilityToolSpawnParameters::Rotation' has a wrong offset!");
static_assert(offsetof(FAbilityToolSpawnParameters, AttachedToActor) == 0x000020, "Member 'FAbilityToolSpawnParameters::AttachedToActor' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIEncounterQueryDirectionTracker
// 0x0048 (0x0048 - 0x0000)
struct FFortAIEncounterQueryDirectionTracker final
{
public:
	bool                                          bHasTriedPreviousDirections;                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EFortEncounterDirection>               PreviousQueryDirections;                           // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EFortEncounterDirection>               ChosenDirections;                                  // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EFortEncounterDirection>               FailedDirections;                                  // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EFortEncounterDirection>               AvailableDirections;                               // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIEncounterQueryDirectionTracker) == 0x000008, "Wrong alignment on FFortAIEncounterQueryDirectionTracker");
static_assert(sizeof(FFortAIEncounterQueryDirectionTracker) == 0x000048, "Wrong size on FFortAIEncounterQueryDirectionTracker");
static_assert(offsetof(FFortAIEncounterQueryDirectionTracker, bHasTriedPreviousDirections) == 0x000000, "Member 'FFortAIEncounterQueryDirectionTracker::bHasTriedPreviousDirections' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterQueryDirectionTracker, PreviousQueryDirections) == 0x000008, "Member 'FFortAIEncounterQueryDirectionTracker::PreviousQueryDirections' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterQueryDirectionTracker, ChosenDirections) == 0x000018, "Member 'FFortAIEncounterQueryDirectionTracker::ChosenDirections' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterQueryDirectionTracker, FailedDirections) == 0x000028, "Member 'FFortAIEncounterQueryDirectionTracker::FailedDirections' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterQueryDirectionTracker, AvailableDirections) == 0x000038, "Member 'FFortAIEncounterQueryDirectionTracker::AvailableDirections' has a wrong offset!");

// ScriptStruct FortniteGame.AbilityKitItem
// 0x0010 (0x0010 - 0x0000)
struct FAbilityKitItem final
{
public:
	class UFortItemDefinition*                    Item;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortReplenishmentType                        Replenishment;                                     // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAbilityKitItem) == 0x000008, "Wrong alignment on FAbilityKitItem");
static_assert(sizeof(FAbilityKitItem) == 0x000010, "Wrong size on FAbilityKitItem");
static_assert(offsetof(FAbilityKitItem, Item) == 0x000000, "Member 'FAbilityKitItem::Item' has a wrong offset!");
static_assert(offsetof(FAbilityKitItem, Quantity) == 0x000008, "Member 'FAbilityKitItem::Quantity' has a wrong offset!");
static_assert(offsetof(FAbilityKitItem, Replenishment) == 0x00000C, "Member 'FAbilityKitItem::Replenishment' has a wrong offset!");

// ScriptStruct FortniteGame.ReplicatedMontagePair
// 0x0028 (0x0028 - 0x0000)
struct FReplicatedMontagePair final
{
public:
	class UAnimMontage*                           Montage1;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Montage2;                                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Section1;                                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Section2;                                          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          RepIndex;                                          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReplicatedMontagePair) == 0x000008, "Wrong alignment on FReplicatedMontagePair");
static_assert(sizeof(FReplicatedMontagePair) == 0x000028, "Wrong size on FReplicatedMontagePair");
static_assert(offsetof(FReplicatedMontagePair, Montage1) == 0x000000, "Member 'FReplicatedMontagePair::Montage1' has a wrong offset!");
static_assert(offsetof(FReplicatedMontagePair, Montage2) == 0x000008, "Member 'FReplicatedMontagePair::Montage2' has a wrong offset!");
static_assert(offsetof(FReplicatedMontagePair, Section1) == 0x000010, "Member 'FReplicatedMontagePair::Section1' has a wrong offset!");
static_assert(offsetof(FReplicatedMontagePair, Section2) == 0x000018, "Member 'FReplicatedMontagePair::Section2' has a wrong offset!");
static_assert(offsetof(FReplicatedMontagePair, RepIndex) == 0x000020, "Member 'FReplicatedMontagePair::RepIndex' has a wrong offset!");

// ScriptStruct FortniteGame.AttributeModifierInfo
// 0x0030 (0x0030 - 0x0000)
struct FAttributeModifierInfo final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayEffect*                        InstantGEs;                                        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAttributeModifierInfo) == 0x000008, "Wrong alignment on FAttributeModifierInfo");
static_assert(sizeof(FAttributeModifierInfo) == 0x000030, "Wrong size on FAttributeModifierInfo");
static_assert(offsetof(FAttributeModifierInfo, InstantGEs) == 0x000018, "Member 'FAttributeModifierInfo::InstantGEs' has a wrong offset!");

// ScriptStruct FortniteGame.AttributeInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FAttributeInfo final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAttributeInfo) == 0x000008, "Wrong alignment on FAttributeInfo");
static_assert(sizeof(FAttributeInfo) == 0x000010, "Wrong size on FAttributeInfo");

// ScriptStruct FortniteGame.FortCombatManagerEvent
// 0x0008 (0x0008 - 0x0000)
struct FFortCombatManagerEvent final
{
public:
	float                                         EventValue;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCombatEvents                             Event;                                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortCombatManagerEvent) == 0x000004, "Wrong alignment on FFortCombatManagerEvent");
static_assert(sizeof(FFortCombatManagerEvent) == 0x000008, "Wrong size on FFortCombatManagerEvent");
static_assert(offsetof(FFortCombatManagerEvent, EventValue) == 0x000000, "Member 'FFortCombatManagerEvent::EventValue' has a wrong offset!");
static_assert(offsetof(FFortCombatManagerEvent, Event) == 0x000004, "Member 'FFortCombatManagerEvent::Event' has a wrong offset!");

// ScriptStruct FortniteGame.TurnFloatRange
// 0x0008 (0x0008 - 0x0000)
struct FTurnFloatRange final
{
public:
	float                                         Min;                                               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTurnFloatRange) == 0x000004, "Wrong alignment on FTurnFloatRange");
static_assert(sizeof(FTurnFloatRange) == 0x000008, "Wrong size on FTurnFloatRange");
static_assert(offsetof(FTurnFloatRange, Min) == 0x000000, "Member 'FTurnFloatRange::Min' has a wrong offset!");
static_assert(offsetof(FTurnFloatRange, Max) == 0x000004, "Member 'FTurnFloatRange::Max' has a wrong offset!");

// ScriptStruct FortniteGame.TurnTransitionData
// 0x0048 (0x0048 - 0x0000)
struct FTurnTransitionData final
{
public:
	class FName                                   MontageSectionName;                                // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinYawAngle;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxYawAngle;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnRate;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  RequiredGameplayTags;                              // 0x0018(0x0020)(Edit, NativeAccessSpecifierPublic)
	int32                                         PriorityLevel;                                     // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTurnFloatRange                        SpeedConstraintRange;                              // 0x003C(0x0008)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableSpeedConstraint;                            // 0x0044(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipTransitionInCrowd;                            // 0x0045(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTurnTransitionData) == 0x000008, "Wrong alignment on FTurnTransitionData");
static_assert(sizeof(FTurnTransitionData) == 0x000048, "Wrong size on FTurnTransitionData");
static_assert(offsetof(FTurnTransitionData, MontageSectionName) == 0x000000, "Member 'FTurnTransitionData::MontageSectionName' has a wrong offset!");
static_assert(offsetof(FTurnTransitionData, MinYawAngle) == 0x000008, "Member 'FTurnTransitionData::MinYawAngle' has a wrong offset!");
static_assert(offsetof(FTurnTransitionData, MaxYawAngle) == 0x00000C, "Member 'FTurnTransitionData::MaxYawAngle' has a wrong offset!");
static_assert(offsetof(FTurnTransitionData, TurnRate) == 0x000010, "Member 'FTurnTransitionData::TurnRate' has a wrong offset!");
static_assert(offsetof(FTurnTransitionData, RequiredGameplayTags) == 0x000018, "Member 'FTurnTransitionData::RequiredGameplayTags' has a wrong offset!");
static_assert(offsetof(FTurnTransitionData, PriorityLevel) == 0x000038, "Member 'FTurnTransitionData::PriorityLevel' has a wrong offset!");
static_assert(offsetof(FTurnTransitionData, SpeedConstraintRange) == 0x00003C, "Member 'FTurnTransitionData::SpeedConstraintRange' has a wrong offset!");
static_assert(offsetof(FTurnTransitionData, bEnableSpeedConstraint) == 0x000044, "Member 'FTurnTransitionData::bEnableSpeedConstraint' has a wrong offset!");
static_assert(offsetof(FTurnTransitionData, bSkipTransitionInCrowd) == 0x000045, "Member 'FTurnTransitionData::bSkipTransitionInCrowd' has a wrong offset!");

// ScriptStruct FortniteGame.FortConnectionData
// 0x0030 (0x0030 - 0x0000)
struct FFortConnectionData final
{
public:
	class ABuildingSMActor*                       ConnectedActor;                                    // 0x0000(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGuid                                  ConnectedActorGuid;                                // 0x0008(0x0010)(SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MySocketName;                                      // 0x0018(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TheirSocketName;                                   // 0x0020(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortConnectionData) == 0x000008, "Wrong alignment on FFortConnectionData");
static_assert(sizeof(FFortConnectionData) == 0x000030, "Wrong size on FFortConnectionData");
static_assert(offsetof(FFortConnectionData, ConnectedActor) == 0x000000, "Member 'FFortConnectionData::ConnectedActor' has a wrong offset!");
static_assert(offsetof(FFortConnectionData, ConnectedActorGuid) == 0x000008, "Member 'FFortConnectionData::ConnectedActorGuid' has a wrong offset!");
static_assert(offsetof(FFortConnectionData, MySocketName) == 0x000018, "Member 'FFortConnectionData::MySocketName' has a wrong offset!");
static_assert(offsetof(FFortConnectionData, TheirSocketName) == 0x000020, "Member 'FFortConnectionData::TheirSocketName' has a wrong offset!");

// ScriptStruct FortniteGame.FortConnectivityComponentData
// 0x0018 (0x0018 - 0x0000)
struct FFortConnectivityComponentData final
{
public:
	TArray<struct FFortConnectionData>            Connections;                                       // 0x0000(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	bool                                          bIsPowered;                                        // 0x0010(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsProvidingPower;                                 // 0x0011(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowConnections;                                 // 0x0012(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowsPowerToPassThrough;                         // 0x0013(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortConnectivityComponentData) == 0x000008, "Wrong alignment on FFortConnectivityComponentData");
static_assert(sizeof(FFortConnectivityComponentData) == 0x000018, "Wrong size on FFortConnectivityComponentData");
static_assert(offsetof(FFortConnectivityComponentData, Connections) == 0x000000, "Member 'FFortConnectivityComponentData::Connections' has a wrong offset!");
static_assert(offsetof(FFortConnectivityComponentData, bIsPowered) == 0x000010, "Member 'FFortConnectivityComponentData::bIsPowered' has a wrong offset!");
static_assert(offsetof(FFortConnectivityComponentData, bIsProvidingPower) == 0x000011, "Member 'FFortConnectivityComponentData::bIsProvidingPower' has a wrong offset!");
static_assert(offsetof(FFortConnectivityComponentData, bAllowConnections) == 0x000012, "Member 'FFortConnectivityComponentData::bAllowConnections' has a wrong offset!");
static_assert(offsetof(FFortConnectivityComponentData, bAllowsPowerToPassThrough) == 0x000013, "Member 'FFortConnectivityComponentData::bAllowsPowerToPassThrough' has a wrong offset!");

// ScriptStruct FortniteGame.TokenAttributePair
// 0x0028 (0x0028 - 0x0000)
struct FTokenAttributePair final
{
public:
	struct FGameplayTag                           Token;                                             // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     Attribute;                                         // 0x0008(0x0020)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTokenAttributePair) == 0x000008, "Wrong alignment on FTokenAttributePair");
static_assert(sizeof(FTokenAttributePair) == 0x000028, "Wrong size on FTokenAttributePair");
static_assert(offsetof(FTokenAttributePair, Token) == 0x000000, "Member 'FTokenAttributePair::Token' has a wrong offset!");
static_assert(offsetof(FTokenAttributePair, Attribute) == 0x000008, "Member 'FTokenAttributePair::Attribute' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayEffectModifierDescription
// 0x0040 (0x0040 - 0x0000)
struct FFortGameplayEffectModifierDescription final
{
public:
	struct FGameplayAttribute                     ModAttribute;                                      // 0x0000(0x0020)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ModDescription;                                    // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bIsBuff;                                           // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAttributeDisplay                         MagnitudeFormat;                                   // 0x0039(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortStatDisplayType                          DisplayType;                                       // 0x003A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x1];                                       // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Magnitude;                                         // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGameplayEffectModifierDescription) == 0x000008, "Wrong alignment on FFortGameplayEffectModifierDescription");
static_assert(sizeof(FFortGameplayEffectModifierDescription) == 0x000040, "Wrong size on FFortGameplayEffectModifierDescription");
static_assert(offsetof(FFortGameplayEffectModifierDescription, ModAttribute) == 0x000000, "Member 'FFortGameplayEffectModifierDescription::ModAttribute' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectModifierDescription, ModDescription) == 0x000020, "Member 'FFortGameplayEffectModifierDescription::ModDescription' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectModifierDescription, bIsBuff) == 0x000038, "Member 'FFortGameplayEffectModifierDescription::bIsBuff' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectModifierDescription, MagnitudeFormat) == 0x000039, "Member 'FFortGameplayEffectModifierDescription::MagnitudeFormat' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectModifierDescription, DisplayType) == 0x00003A, "Member 'FFortGameplayEffectModifierDescription::DisplayType' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectModifierDescription, Magnitude) == 0x00003C, "Member 'FFortGameplayEffectModifierDescription::Magnitude' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayEffectDescription
// 0x0050 (0x0050 - 0x0000)
struct FFortGameplayEffectDescription final
{
public:
	class FText                                   EffectDisplayName;                                 // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   EffectWrittenDescription;                          // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FFortGameplayEffectModifierDescription> ModDescriptions;                                   // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FText>                           GrantedTagDescriptions;                            // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGameplayEffectDescription) == 0x000008, "Wrong alignment on FFortGameplayEffectDescription");
static_assert(sizeof(FFortGameplayEffectDescription) == 0x000050, "Wrong size on FFortGameplayEffectDescription");
static_assert(offsetof(FFortGameplayEffectDescription, EffectDisplayName) == 0x000000, "Member 'FFortGameplayEffectDescription::EffectDisplayName' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectDescription, EffectWrittenDescription) == 0x000018, "Member 'FFortGameplayEffectDescription::EffectWrittenDescription' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectDescription, ModDescriptions) == 0x000030, "Member 'FFortGameplayEffectDescription::ModDescriptions' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectDescription, GrantedTagDescriptions) == 0x000040, "Member 'FFortGameplayEffectDescription::GrantedTagDescriptions' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIEncounterRiftManagerInitializationData
// 0x00C0 (0x00C0 - 0x0000)
struct FFortAIEncounterRiftManagerInitializationData final
{
public:
	class UFortAIEncounterInfo*                   EncounterInfo;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortEncounterSettings                 EncounterSettings;                                 // 0x0008(0x0058)(NativeAccessSpecifierPublic)
	struct FEncounterEnvironmentQueryInfo         CurrentEnvironmentQueryInfo;                       // 0x0060(0x0028)(NativeAccessSpecifierPublic)
	struct FEncounterEnvironmentQueryInfo         FallbackEnvironmentQueryInfo;                      // 0x0088(0x0028)(NativeAccessSpecifierPublic)
	TSubclassOf<class ABuildingRift>              RiftClassTemplate;                                 // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumRiftsToUse;                                     // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinRiftsToUse;                                     // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIEncounterRiftManagerInitializationData) == 0x000008, "Wrong alignment on FFortAIEncounterRiftManagerInitializationData");
static_assert(sizeof(FFortAIEncounterRiftManagerInitializationData) == 0x0000C0, "Wrong size on FFortAIEncounterRiftManagerInitializationData");
static_assert(offsetof(FFortAIEncounterRiftManagerInitializationData, EncounterInfo) == 0x000000, "Member 'FFortAIEncounterRiftManagerInitializationData::EncounterInfo' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterRiftManagerInitializationData, EncounterSettings) == 0x000008, "Member 'FFortAIEncounterRiftManagerInitializationData::EncounterSettings' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterRiftManagerInitializationData, CurrentEnvironmentQueryInfo) == 0x000060, "Member 'FFortAIEncounterRiftManagerInitializationData::CurrentEnvironmentQueryInfo' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterRiftManagerInitializationData, FallbackEnvironmentQueryInfo) == 0x000088, "Member 'FFortAIEncounterRiftManagerInitializationData::FallbackEnvironmentQueryInfo' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterRiftManagerInitializationData, RiftClassTemplate) == 0x0000B0, "Member 'FFortAIEncounterRiftManagerInitializationData::RiftClassTemplate' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterRiftManagerInitializationData, NumRiftsToUse) == 0x0000B8, "Member 'FFortAIEncounterRiftManagerInitializationData::NumRiftsToUse' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterRiftManagerInitializationData, MinRiftsToUse) == 0x0000BC, "Member 'FFortAIEncounterRiftManagerInitializationData::MinRiftsToUse' has a wrong offset!");

// ScriptStruct FortniteGame.FortTargetFilter
// 0x0020 (0x0020 - 0x0000)
struct FFortTargetFilter final
{
public:
	EFortTargetSelectionFilter                    ActorTypeFilter;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 ActorClassFilter;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludeInstigator;                                // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludeRequester;                                 // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludeAllAttachedToInstigator;                   // 0x0012(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludeAllAttachedToRequester;                    // 0x0013(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludePawnFriends;                               // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludeFriendlyAI;                                // 0x0015(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludePawnEnemies;                               // 0x0016(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludeNonPawnFriends;                            // 0x0017(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludeNonPawnEnemies;                            // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludeDBNOPawns;                                 // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludeWithoutNavigationCorridor;                 // 0x001A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludeNonPlayerBuiltPieces;                      // 0x001B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludePlayerBuiltPieces;                         // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludeNonBGABuildings;                           // 0x001D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludeNonBlockingHits;                           // 0x001E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceComplexCollision;                            // 0x001F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTargetFilter) == 0x000008, "Wrong alignment on FFortTargetFilter");
static_assert(sizeof(FFortTargetFilter) == 0x000020, "Wrong size on FFortTargetFilter");
static_assert(offsetof(FFortTargetFilter, ActorTypeFilter) == 0x000000, "Member 'FFortTargetFilter::ActorTypeFilter' has a wrong offset!");
static_assert(offsetof(FFortTargetFilter, ActorClassFilter) == 0x000008, "Member 'FFortTargetFilter::ActorClassFilter' has a wrong offset!");
static_assert(offsetof(FFortTargetFilter, bExcludeInstigator) == 0x000010, "Member 'FFortTargetFilter::bExcludeInstigator' has a wrong offset!");
static_assert(offsetof(FFortTargetFilter, bExcludeRequester) == 0x000011, "Member 'FFortTargetFilter::bExcludeRequester' has a wrong offset!");
static_assert(offsetof(FFortTargetFilter, bExcludeAllAttachedToInstigator) == 0x000012, "Member 'FFortTargetFilter::bExcludeAllAttachedToInstigator' has a wrong offset!");
static_assert(offsetof(FFortTargetFilter, bExcludeAllAttachedToRequester) == 0x000013, "Member 'FFortTargetFilter::bExcludeAllAttachedToRequester' has a wrong offset!");
static_assert(offsetof(FFortTargetFilter, bExcludePawnFriends) == 0x000014, "Member 'FFortTargetFilter::bExcludePawnFriends' has a wrong offset!");
static_assert(offsetof(FFortTargetFilter, bExcludeFriendlyAI) == 0x000015, "Member 'FFortTargetFilter::bExcludeFriendlyAI' has a wrong offset!");
static_assert(offsetof(FFortTargetFilter, bExcludePawnEnemies) == 0x000016, "Member 'FFortTargetFilter::bExcludePawnEnemies' has a wrong offset!");
static_assert(offsetof(FFortTargetFilter, bExcludeNonPawnFriends) == 0x000017, "Member 'FFortTargetFilter::bExcludeNonPawnFriends' has a wrong offset!");
static_assert(offsetof(FFortTargetFilter, bExcludeNonPawnEnemies) == 0x000018, "Member 'FFortTargetFilter::bExcludeNonPawnEnemies' has a wrong offset!");
static_assert(offsetof(FFortTargetFilter, bExcludeDBNOPawns) == 0x000019, "Member 'FFortTargetFilter::bExcludeDBNOPawns' has a wrong offset!");
static_assert(offsetof(FFortTargetFilter, bExcludeWithoutNavigationCorridor) == 0x00001A, "Member 'FFortTargetFilter::bExcludeWithoutNavigationCorridor' has a wrong offset!");
static_assert(offsetof(FFortTargetFilter, bExcludeNonPlayerBuiltPieces) == 0x00001B, "Member 'FFortTargetFilter::bExcludeNonPlayerBuiltPieces' has a wrong offset!");
static_assert(offsetof(FFortTargetFilter, bExcludePlayerBuiltPieces) == 0x00001C, "Member 'FFortTargetFilter::bExcludePlayerBuiltPieces' has a wrong offset!");
static_assert(offsetof(FFortTargetFilter, bExcludeNonBGABuildings) == 0x00001D, "Member 'FFortTargetFilter::bExcludeNonBGABuildings' has a wrong offset!");
static_assert(offsetof(FFortTargetFilter, bExcludeNonBlockingHits) == 0x00001E, "Member 'FFortTargetFilter::bExcludeNonBlockingHits' has a wrong offset!");
static_assert(offsetof(FFortTargetFilter, bTraceComplexCollision) == 0x00001F, "Member 'FFortTargetFilter::bTraceComplexCollision' has a wrong offset!");

// ScriptStruct FortniteGame.FortAbilityTargetSelection
// 0x0060 (0x0060 - 0x0000)
struct FFortAbilityTargetSelection final
{
public:
	EFortTargetSelectionShape                     Shape;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CustomShapeComponentName;                          // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortTargetSelectionTestType                  TestType;                                          // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAbilityTargetingSource                   PrimarySource;                                     // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAbilityTargetingSource                   SecondarySource;                                   // 0x001A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Range;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HalfExtents;                                       // 0x0020(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConeYawAngle;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConePitchAngle;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConeMinRadius;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortTargetFilter                      TargetFilter;                                      // 0x0038(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bExcludeObstructedByWorld;                         // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreateHitResultWhenNoTargetsFound;                // 0x0059(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseProjectileRotationForDamageZones;              // 0x005A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAbilityTargetSelectionUsage              TargetSelectionUsage;                              // 0x005B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTargets;                                        // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAbilityTargetSelection) == 0x000008, "Wrong alignment on FFortAbilityTargetSelection");
static_assert(sizeof(FFortAbilityTargetSelection) == 0x000060, "Wrong size on FFortAbilityTargetSelection");
static_assert(offsetof(FFortAbilityTargetSelection, Shape) == 0x000000, "Member 'FFortAbilityTargetSelection::Shape' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, CustomShapeComponentName) == 0x000008, "Member 'FFortAbilityTargetSelection::CustomShapeComponentName' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, TestType) == 0x000018, "Member 'FFortAbilityTargetSelection::TestType' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, PrimarySource) == 0x000019, "Member 'FFortAbilityTargetSelection::PrimarySource' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, SecondarySource) == 0x00001A, "Member 'FFortAbilityTargetSelection::SecondarySource' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, Range) == 0x00001C, "Member 'FFortAbilityTargetSelection::Range' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, HalfExtents) == 0x000020, "Member 'FFortAbilityTargetSelection::HalfExtents' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, ConeYawAngle) == 0x00002C, "Member 'FFortAbilityTargetSelection::ConeYawAngle' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, ConePitchAngle) == 0x000030, "Member 'FFortAbilityTargetSelection::ConePitchAngle' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, ConeMinRadius) == 0x000034, "Member 'FFortAbilityTargetSelection::ConeMinRadius' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, TargetFilter) == 0x000038, "Member 'FFortAbilityTargetSelection::TargetFilter' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, bExcludeObstructedByWorld) == 0x000058, "Member 'FFortAbilityTargetSelection::bExcludeObstructedByWorld' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, bCreateHitResultWhenNoTargetsFound) == 0x000059, "Member 'FFortAbilityTargetSelection::bCreateHitResultWhenNoTargetsFound' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, bUseProjectileRotationForDamageZones) == 0x00005A, "Member 'FFortAbilityTargetSelection::bUseProjectileRotationForDamageZones' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, TargetSelectionUsage) == 0x00005B, "Member 'FFortAbilityTargetSelection::TargetSelectionUsage' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, MaxTargets) == 0x00005C, "Member 'FFortAbilityTargetSelection::MaxTargets' has a wrong offset!");

// ScriptStruct FortniteGame.FortAbilityTargetSelectionList
// 0x0020 (0x0020 - 0x0000)
struct FFortAbilityTargetSelectionList final
{
public:
	TArray<struct FFortAbilityTargetSelection>    List;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bStopAtFirstSuccess : 1;                           // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bKeepCheckingListOnIndestructibleHit : 1;          // 0x0010(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseWeaponRanges : 1;                              // 0x0010(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseMaxYawAngleToTarget : 1;                       // 0x0010(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxYawAngleToTarget;                               // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAbilityTargetSelectionList) == 0x000008, "Wrong alignment on FFortAbilityTargetSelectionList");
static_assert(sizeof(FFortAbilityTargetSelectionList) == 0x000020, "Wrong size on FFortAbilityTargetSelectionList");
static_assert(offsetof(FFortAbilityTargetSelectionList, List) == 0x000000, "Member 'FFortAbilityTargetSelectionList::List' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelectionList, MaxYawAngleToTarget) == 0x000014, "Member 'FFortAbilityTargetSelectionList::MaxYawAngleToTarget' has a wrong offset!");

// ScriptStruct FortniteGame.FortHostSessionParams
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FFortHostSessionParams final
{
public:
	class FName                                   SessionName;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ControllerId;                                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortHostSessionParams) == 0x000008, "Wrong alignment on FFortHostSessionParams");
static_assert(sizeof(FFortHostSessionParams) == 0x000010, "Wrong size on FFortHostSessionParams");
static_assert(offsetof(FFortHostSessionParams, SessionName) == 0x000000, "Member 'FFortHostSessionParams::SessionName' has a wrong offset!");
static_assert(offsetof(FFortHostSessionParams, ControllerId) == 0x000008, "Member 'FFortHostSessionParams::ControllerId' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIGoalInfo
// 0x0018 (0x0018 - 0x0000)
struct FFortAIGoalInfo
{
public:
	TWeakObjectPtr<class AActor>                  Actor;                                             // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bActorAlwaysPerceived;                             // 0x0014(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAIGoalInfo) == 0x000004, "Wrong alignment on FFortAIGoalInfo");
static_assert(sizeof(FFortAIGoalInfo) == 0x000018, "Wrong size on FFortAIGoalInfo");
static_assert(offsetof(FFortAIGoalInfo, Actor) == 0x000000, "Member 'FFortAIGoalInfo::Actor' has a wrong offset!");
static_assert(offsetof(FFortAIGoalInfo, Location) == 0x000008, "Member 'FFortAIGoalInfo::Location' has a wrong offset!");
static_assert(offsetof(FFortAIGoalInfo, bActorAlwaysPerceived) == 0x000014, "Member 'FFortAIGoalInfo::bActorAlwaysPerceived' has a wrong offset!");

// ScriptStruct FortniteGame.AIAssignmentInfo
// 0x0080 (0x0080 - 0x0000)
struct alignas(0x08) FAIAssignmentInfo final
{
public:
	TWeakObjectPtr<class UFortAIAssignment>       CurrentAssignment;                                 // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFortAIGoalInfo                        CurrentGoal;                                       // 0x0008(0x0018)(NoDestructor, NativeAccessSpecifierPrivate)
	float                                         TimeCurrentGoalWasChosen;                          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TimeExitedLastAssignmentOfType[0x4];               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UFortAIAssignment>       PreviousAssignment;                                // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFortAIGoalInfo                        PreviousGoal;                                      // 0x003C(0x0018)(NoDestructor, NativeAccessSpecifierPrivate)
	bool                                          bWaitingForQueryResponse;                          // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bSuppressGoalUpdates;                              // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bReportEnemyGoalSelection;                         // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_57[0x29];                                      // 0x0057(0x0029)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIAssignmentInfo) == 0x000008, "Wrong alignment on FAIAssignmentInfo");
static_assert(sizeof(FAIAssignmentInfo) == 0x000080, "Wrong size on FAIAssignmentInfo");
static_assert(offsetof(FAIAssignmentInfo, CurrentAssignment) == 0x000000, "Member 'FAIAssignmentInfo::CurrentAssignment' has a wrong offset!");
static_assert(offsetof(FAIAssignmentInfo, CurrentGoal) == 0x000008, "Member 'FAIAssignmentInfo::CurrentGoal' has a wrong offset!");
static_assert(offsetof(FAIAssignmentInfo, TimeCurrentGoalWasChosen) == 0x000020, "Member 'FAIAssignmentInfo::TimeCurrentGoalWasChosen' has a wrong offset!");
static_assert(offsetof(FAIAssignmentInfo, TimeExitedLastAssignmentOfType) == 0x000024, "Member 'FAIAssignmentInfo::TimeExitedLastAssignmentOfType' has a wrong offset!");
static_assert(offsetof(FAIAssignmentInfo, PreviousAssignment) == 0x000034, "Member 'FAIAssignmentInfo::PreviousAssignment' has a wrong offset!");
static_assert(offsetof(FAIAssignmentInfo, PreviousGoal) == 0x00003C, "Member 'FAIAssignmentInfo::PreviousGoal' has a wrong offset!");
static_assert(offsetof(FAIAssignmentInfo, bWaitingForQueryResponse) == 0x000054, "Member 'FAIAssignmentInfo::bWaitingForQueryResponse' has a wrong offset!");
static_assert(offsetof(FAIAssignmentInfo, bSuppressGoalUpdates) == 0x000055, "Member 'FAIAssignmentInfo::bSuppressGoalUpdates' has a wrong offset!");
static_assert(offsetof(FAIAssignmentInfo, bReportEnemyGoalSelection) == 0x000056, "Member 'FAIAssignmentInfo::bReportEnemyGoalSelection' has a wrong offset!");

// ScriptStruct FortniteGame.FortUserCloudRequestHandle
// 0x0008 (0x0008 - 0x0000)
struct FFortUserCloudRequestHandle final
{
public:
	uint64                                        Handle;                                            // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortUserCloudRequestHandle) == 0x000008, "Wrong alignment on FFortUserCloudRequestHandle");
static_assert(sizeof(FFortUserCloudRequestHandle) == 0x000008, "Wrong size on FFortUserCloudRequestHandle");
static_assert(offsetof(FFortUserCloudRequestHandle, Handle) == 0x000000, "Member 'FFortUserCloudRequestHandle::Handle' has a wrong offset!");

// ScriptStruct FortniteGame.VisibilityTestPoint
// 0x0018 (0x0018 - 0x0000)
struct FVisibilityTestPoint final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    Component;                                         // 0x0010(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVisibilityTestPoint) == 0x000008, "Wrong alignment on FVisibilityTestPoint");
static_assert(sizeof(FVisibilityTestPoint) == 0x000018, "Wrong size on FVisibilityTestPoint");
static_assert(offsetof(FVisibilityTestPoint, Location) == 0x000000, "Member 'FVisibilityTestPoint::Location' has a wrong offset!");
static_assert(offsetof(FVisibilityTestPoint, Component) == 0x000010, "Member 'FVisibilityTestPoint::Component' has a wrong offset!");

// ScriptStruct FortniteGame.Recipe
// 0x0050 (0x0058 - 0x0008)
struct FRecipe final : public FTableRowBase
{
public:
	TArray<struct FFortItemQuantityPair>          RecipeResults;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIsConsumed;                                       // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortItemQuantityPair>          RecipeCosts;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiredCatalysts;                                 // 0x0030(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRecipe) == 0x000008, "Wrong alignment on FRecipe");
static_assert(sizeof(FRecipe) == 0x000058, "Wrong size on FRecipe");
static_assert(offsetof(FRecipe, RecipeResults) == 0x000008, "Member 'FRecipe::RecipeResults' has a wrong offset!");
static_assert(offsetof(FRecipe, bIsConsumed) == 0x000018, "Member 'FRecipe::bIsConsumed' has a wrong offset!");
static_assert(offsetof(FRecipe, RecipeCosts) == 0x000020, "Member 'FRecipe::RecipeCosts' has a wrong offset!");
static_assert(offsetof(FRecipe, RequiredCatalysts) == 0x000030, "Member 'FRecipe::RequiredCatalysts' has a wrong offset!");
static_assert(offsetof(FRecipe, Score) == 0x000050, "Member 'FRecipe::Score' has a wrong offset!");

// ScriptStruct FortniteGame.FortAbilityCanHitParameters
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FFortAbilityCanHitParameters final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAbilityCanHitParameters) == 0x000008, "Wrong alignment on FFortAbilityCanHitParameters");
static_assert(sizeof(FFortAbilityCanHitParameters) == 0x000018, "Wrong size on FFortAbilityCanHitParameters");

// ScriptStruct FortniteGame.FortHighlightColors
// 0x0030 (0x0030 - 0x0000)
struct FFortHighlightColors final
{
public:
	struct FLinearColor                           OutlineColor;                                      // 0x0000(0x0010)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SceneModulationColor1;                             // 0x0010(0x0010)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SceneModulationColor2;                             // 0x0020(0x0010)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortHighlightColors) == 0x000004, "Wrong alignment on FFortHighlightColors");
static_assert(sizeof(FFortHighlightColors) == 0x000030, "Wrong size on FFortHighlightColors");
static_assert(offsetof(FFortHighlightColors, OutlineColor) == 0x000000, "Member 'FFortHighlightColors::OutlineColor' has a wrong offset!");
static_assert(offsetof(FFortHighlightColors, SceneModulationColor1) == 0x000010, "Member 'FFortHighlightColors::SceneModulationColor1' has a wrong offset!");
static_assert(offsetof(FFortHighlightColors, SceneModulationColor2) == 0x000020, "Member 'FFortHighlightColors::SceneModulationColor2' has a wrong offset!");

// ScriptStruct FortniteGame.FortHighlightColorsContainer
// 0x0060 (0x0060 - 0x0000)
struct FFortHighlightColorsContainer final
{
public:
	struct FFortHighlightColors                   ValidHighlight;                                    // 0x0000(0x0030)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortHighlightColors                   InvalidHighlight;                                  // 0x0030(0x0030)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortHighlightColorsContainer) == 0x000004, "Wrong alignment on FFortHighlightColorsContainer");
static_assert(sizeof(FFortHighlightColorsContainer) == 0x000060, "Wrong size on FFortHighlightColorsContainer");
static_assert(offsetof(FFortHighlightColorsContainer, ValidHighlight) == 0x000000, "Member 'FFortHighlightColorsContainer::ValidHighlight' has a wrong offset!");
static_assert(offsetof(FFortHighlightColorsContainer, InvalidHighlight) == 0x000030, "Member 'FFortHighlightColorsContainer::InvalidHighlight' has a wrong offset!");

// ScriptStruct FortniteGame.SubGameInfo
// 0x0010 (0x0010 - 0x0000)
struct FSubGameInfo final
{
public:
	class UFortTokenType*                         AccessToken;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RequiredFullInstall;                               // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSubGameInfo) == 0x000008, "Wrong alignment on FSubGameInfo");
static_assert(sizeof(FSubGameInfo) == 0x000010, "Wrong size on FSubGameInfo");
static_assert(offsetof(FSubGameInfo, AccessToken) == 0x000000, "Member 'FSubGameInfo::AccessToken' has a wrong offset!");
static_assert(offsetof(FSubGameInfo, RequiredFullInstall) == 0x000008, "Member 'FSubGameInfo::RequiredFullInstall' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayAbilityTargetData_SingleTargetHit
// 0x0008 (0x0090 - 0x0088)
struct FFortGameplayAbilityTargetData_SingleTargetHit final : public FGameplayAbilityTargetData_SingleTargetHit
{
public:
	int32                                         CartridgeID;                                       // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortGameplayAbilityTargetData_SingleTargetHit) == 0x000008, "Wrong alignment on FFortGameplayAbilityTargetData_SingleTargetHit");
static_assert(sizeof(FFortGameplayAbilityTargetData_SingleTargetHit) == 0x000090, "Wrong size on FFortGameplayAbilityTargetData_SingleTargetHit");
static_assert(offsetof(FFortGameplayAbilityTargetData_SingleTargetHit, CartridgeID) == 0x000088, "Member 'FFortGameplayAbilityTargetData_SingleTargetHit::CartridgeID' has a wrong offset!");

// ScriptStruct FortniteGame.ActiveGameplayModifierHandle
// 0x0004 (0x0004 - 0x0000)
struct FActiveGameplayModifierHandle final
{
public:
	int32                                         Handle;                                            // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActiveGameplayModifierHandle) == 0x000004, "Wrong alignment on FActiveGameplayModifierHandle");
static_assert(sizeof(FActiveGameplayModifierHandle) == 0x000004, "Wrong size on FActiveGameplayModifierHandle");
static_assert(offsetof(FActiveGameplayModifierHandle, Handle) == 0x000000, "Member 'FActiveGameplayModifierHandle::Handle' has a wrong offset!");

// ScriptStruct FortniteGame.FortConditionalIncludeTags
// 0x0040 (0x0040 - 0x0000)
struct FFortConditionalIncludeTags final
{
public:
	struct FGameplayTagContainer                  ConditionTags;                                     // 0x0000(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  IncludeTags;                                       // 0x0020(0x0020)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortConditionalIncludeTags) == 0x000008, "Wrong alignment on FFortConditionalIncludeTags");
static_assert(sizeof(FFortConditionalIncludeTags) == 0x000040, "Wrong size on FFortConditionalIncludeTags");
static_assert(offsetof(FFortConditionalIncludeTags, ConditionTags) == 0x000000, "Member 'FFortConditionalIncludeTags::ConditionTags' has a wrong offset!");
static_assert(offsetof(FFortConditionalIncludeTags, IncludeTags) == 0x000020, "Member 'FFortConditionalIncludeTags::IncludeTags' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayEffectContext
// 0x0058 (0x00C8 - 0x0070)
struct FFortGameplayEffectContext final : public FGameplayEffectContext
{
public:
	bool                                          bIsFatalHit;                                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCriticalHit;                                    // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDiceCritical;                                   // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFullBodyHit;                                    // 0x0073(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KnockbackMagnitude;                                // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KnockbackZAngle;                                   // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StunTime;                                          // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChargeMagnitude;                                   // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TooltipTags;                                       // 0x0088(0x0020)(NativeAccessSpecifierPublic)
	int32                                         CartridgeID;                                       // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ItemGuid;                                          // 0x00AC(0x0010)(IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UObject>                 DamageSourceObject;                                // 0x00BC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SourceLevel;                                       // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortGameplayEffectContext) == 0x000008, "Wrong alignment on FFortGameplayEffectContext");
static_assert(sizeof(FFortGameplayEffectContext) == 0x0000C8, "Wrong size on FFortGameplayEffectContext");
static_assert(offsetof(FFortGameplayEffectContext, bIsFatalHit) == 0x000070, "Member 'FFortGameplayEffectContext::bIsFatalHit' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContext, bIsCriticalHit) == 0x000071, "Member 'FFortGameplayEffectContext::bIsCriticalHit' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContext, bIsDiceCritical) == 0x000072, "Member 'FFortGameplayEffectContext::bIsDiceCritical' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContext, bIsFullBodyHit) == 0x000073, "Member 'FFortGameplayEffectContext::bIsFullBodyHit' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContext, KnockbackMagnitude) == 0x000074, "Member 'FFortGameplayEffectContext::KnockbackMagnitude' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContext, KnockbackZAngle) == 0x000078, "Member 'FFortGameplayEffectContext::KnockbackZAngle' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContext, StunTime) == 0x00007C, "Member 'FFortGameplayEffectContext::StunTime' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContext, ChargeMagnitude) == 0x000080, "Member 'FFortGameplayEffectContext::ChargeMagnitude' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContext, TooltipTags) == 0x000088, "Member 'FFortGameplayEffectContext::TooltipTags' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContext, CartridgeID) == 0x0000A8, "Member 'FFortGameplayEffectContext::CartridgeID' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContext, ItemGuid) == 0x0000AC, "Member 'FFortGameplayEffectContext::ItemGuid' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContext, DamageSourceObject) == 0x0000BC, "Member 'FFortGameplayEffectContext::DamageSourceObject' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContext, SourceLevel) == 0x0000C4, "Member 'FFortGameplayEffectContext::SourceLevel' has a wrong offset!");

// ScriptStruct FortniteGame.UISoundFeedback
// 0x0008 (0x0008 - 0x0000)
struct FUISoundFeedback final
{
public:
	class USoundBase*                             UISound;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUISoundFeedback) == 0x000008, "Wrong alignment on FUISoundFeedback");
static_assert(sizeof(FUISoundFeedback) == 0x000008, "Wrong size on FUISoundFeedback");
static_assert(offsetof(FUISoundFeedback, UISound) == 0x000000, "Member 'FUISoundFeedback::UISound' has a wrong offset!");

// ScriptStruct FortniteGame.GoalSelectionQueryInfo
// 0x0028 (0x0028 - 0x0000)
struct FGoalSelectionQueryInfo final
{
public:
	class UEnvQuery*                              GoalSelectionQuery;                                // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiredGameplayTags;                              // 0x0008(0x0020)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGoalSelectionQueryInfo) == 0x000008, "Wrong alignment on FGoalSelectionQueryInfo");
static_assert(sizeof(FGoalSelectionQueryInfo) == 0x000028, "Wrong size on FGoalSelectionQueryInfo");
static_assert(offsetof(FGoalSelectionQueryInfo, GoalSelectionQuery) == 0x000000, "Member 'FGoalSelectionQueryInfo::GoalSelectionQuery' has a wrong offset!");
static_assert(offsetof(FGoalSelectionQueryInfo, RequiredGameplayTags) == 0x000008, "Member 'FGoalSelectionQueryInfo::RequiredGameplayTags' has a wrong offset!");

// ScriptStruct FortniteGame.FortPendingStoppedEncounterData
// 0x0010 (0x0010 - 0x0000)
struct FFortPendingStoppedEncounterData final
{
public:
	class UFortAIEncounterInfo*                   Encounter;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortObjectiveStatus                          ObjectiveStatus;                                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceDestroyAI;                                   // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEncounterCompletedSuccessfully;                   // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPendingStoppedEncounterData) == 0x000008, "Wrong alignment on FFortPendingStoppedEncounterData");
static_assert(sizeof(FFortPendingStoppedEncounterData) == 0x000010, "Wrong size on FFortPendingStoppedEncounterData");
static_assert(offsetof(FFortPendingStoppedEncounterData, Encounter) == 0x000000, "Member 'FFortPendingStoppedEncounterData::Encounter' has a wrong offset!");
static_assert(offsetof(FFortPendingStoppedEncounterData, ObjectiveStatus) == 0x000008, "Member 'FFortPendingStoppedEncounterData::ObjectiveStatus' has a wrong offset!");
static_assert(offsetof(FFortPendingStoppedEncounterData, bForceDestroyAI) == 0x000009, "Member 'FFortPendingStoppedEncounterData::bForceDestroyAI' has a wrong offset!");
static_assert(offsetof(FFortPendingStoppedEncounterData, bEncounterCompletedSuccessfully) == 0x00000A, "Member 'FFortPendingStoppedEncounterData::bEncounterCompletedSuccessfully' has a wrong offset!");

// ScriptStruct FortniteGame.SpawnPickupEntry
// 0x0018 (0x0018 - 0x0000)
struct FSpawnPickupEntry final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     PickupClass;                                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawnPickupEntry) == 0x000008, "Wrong alignment on FSpawnPickupEntry");
static_assert(sizeof(FSpawnPickupEntry) == 0x000018, "Wrong size on FSpawnPickupEntry");
static_assert(offsetof(FSpawnPickupEntry, Name) == 0x000000, "Member 'FSpawnPickupEntry::Name' has a wrong offset!");
static_assert(offsetof(FSpawnPickupEntry, PickupClass) == 0x000010, "Member 'FSpawnPickupEntry::PickupClass' has a wrong offset!");

// ScriptStruct FortniteGame.FortAISpawnGroupUpgradeData
// 0x0060 (0x0060 - 0x0000)
struct FFortAISpawnGroupUpgradeData final
{
public:
	TSubclassOf<class UFortAISpawnGroupUpgrade>   SpawnGroupUpgrade;                                 // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortAISpawnGroupUpgradeProbabilities> UpgradeProbabilities;                              // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortAISpawnGroupCapsCategorySet> SpawnGroupCapsCategories;                          // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagQuery                      EncounterTagRequirementsQuery;                     // 0x0018(0x0048)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortAISpawnGroupUpgradeData) == 0x000008, "Wrong alignment on FFortAISpawnGroupUpgradeData");
static_assert(sizeof(FFortAISpawnGroupUpgradeData) == 0x000060, "Wrong size on FFortAISpawnGroupUpgradeData");
static_assert(offsetof(FFortAISpawnGroupUpgradeData, SpawnGroupUpgrade) == 0x000000, "Member 'FFortAISpawnGroupUpgradeData::SpawnGroupUpgrade' has a wrong offset!");
static_assert(offsetof(FFortAISpawnGroupUpgradeData, UpgradeProbabilities) == 0x000008, "Member 'FFortAISpawnGroupUpgradeData::UpgradeProbabilities' has a wrong offset!");
static_assert(offsetof(FFortAISpawnGroupUpgradeData, SpawnGroupCapsCategories) == 0x000010, "Member 'FFortAISpawnGroupUpgradeData::SpawnGroupCapsCategories' has a wrong offset!");
static_assert(offsetof(FFortAISpawnGroupUpgradeData, EncounterTagRequirementsQuery) == 0x000018, "Member 'FFortAISpawnGroupUpgradeData::EncounterTagRequirementsQuery' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIPawnUpgradeData
// 0x0038 (0x0038 - 0x0000)
struct FFortAIPawnUpgradeData final
{
public:
	struct FCurveTableRowHandle                   SpawnPointsMultiplierCurve;                        // 0x0000(0x0010)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FCurveTableRowHandle                   LifespanMultiplierCurve;                           // 0x0010(0x0010)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FCurveTableRowHandle                   ScoreMultiplierCurve;                              // 0x0020(0x0010)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UFortGameplayModifierItemDefinition*    ModifierDefinition;                                // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortAIPawnUpgradeData) == 0x000008, "Wrong alignment on FFortAIPawnUpgradeData");
static_assert(sizeof(FFortAIPawnUpgradeData) == 0x000038, "Wrong size on FFortAIPawnUpgradeData");
static_assert(offsetof(FFortAIPawnUpgradeData, SpawnPointsMultiplierCurve) == 0x000000, "Member 'FFortAIPawnUpgradeData::SpawnPointsMultiplierCurve' has a wrong offset!");
static_assert(offsetof(FFortAIPawnUpgradeData, LifespanMultiplierCurve) == 0x000010, "Member 'FFortAIPawnUpgradeData::LifespanMultiplierCurve' has a wrong offset!");
static_assert(offsetof(FFortAIPawnUpgradeData, ScoreMultiplierCurve) == 0x000020, "Member 'FFortAIPawnUpgradeData::ScoreMultiplierCurve' has a wrong offset!");
static_assert(offsetof(FFortAIPawnUpgradeData, ModifierDefinition) == 0x000030, "Member 'FFortAIPawnUpgradeData::ModifierDefinition' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIPawnUpgrade
// 0x0058 (0x0058 - 0x0000)
struct FFortAIPawnUpgrade final
{
public:
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0000(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFortAIPawnUpgradeData>         PawnUpgradeDataPerPlayerCount;                     // 0x0048(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIPawnUpgrade) == 0x000008, "Wrong alignment on FFortAIPawnUpgrade");
static_assert(sizeof(FFortAIPawnUpgrade) == 0x000058, "Wrong size on FFortAIPawnUpgrade");
static_assert(offsetof(FFortAIPawnUpgrade, TagQuery) == 0x000000, "Member 'FFortAIPawnUpgrade::TagQuery' has a wrong offset!");
static_assert(offsetof(FFortAIPawnUpgrade, PawnUpgradeDataPerPlayerCount) == 0x000048, "Member 'FFortAIPawnUpgrade::PawnUpgradeDataPerPlayerCount' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlayerSpawnPadPlacementData
// 0x0058 (0x0058 - 0x0000)
struct FFortPlayerSpawnPadPlacementData final
{
public:
	class UEnvQuery*                              PlacementQuery;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   ActorToPlace;                                      // 0x0008(0x0028)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSnapToGrid;                                       // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAdjustPlacementForFloors;                         // 0x0031(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TagsToAddToChosenPlacementActor;                   // 0x0038(0x0020)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortPlayerSpawnPadPlacementData) == 0x000008, "Wrong alignment on FFortPlayerSpawnPadPlacementData");
static_assert(sizeof(FFortPlayerSpawnPadPlacementData) == 0x000058, "Wrong size on FFortPlayerSpawnPadPlacementData");
static_assert(offsetof(FFortPlayerSpawnPadPlacementData, PlacementQuery) == 0x000000, "Member 'FFortPlayerSpawnPadPlacementData::PlacementQuery' has a wrong offset!");
static_assert(offsetof(FFortPlayerSpawnPadPlacementData, ActorToPlace) == 0x000008, "Member 'FFortPlayerSpawnPadPlacementData::ActorToPlace' has a wrong offset!");
static_assert(offsetof(FFortPlayerSpawnPadPlacementData, bSnapToGrid) == 0x000030, "Member 'FFortPlayerSpawnPadPlacementData::bSnapToGrid' has a wrong offset!");
static_assert(offsetof(FFortPlayerSpawnPadPlacementData, bAdjustPlacementForFloors) == 0x000031, "Member 'FFortPlayerSpawnPadPlacementData::bAdjustPlacementForFloors' has a wrong offset!");
static_assert(offsetof(FFortPlayerSpawnPadPlacementData, TagsToAddToChosenPlacementActor) == 0x000038, "Member 'FFortPlayerSpawnPadPlacementData::TagsToAddToChosenPlacementActor' has a wrong offset!");

// ScriptStruct FortniteGame.ConditionalFoundationQuotaTier
// 0x0018 (0x0018 - 0x0000)
struct FConditionalFoundationQuotaTier final
{
public:
	TArray<TSubclassOf<class ABuildingFoundation>> FoundationClasses;                                 // 0x0000(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	int32                                         MinFoundations;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxFoundations;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConditionalFoundationQuotaTier) == 0x000008, "Wrong alignment on FConditionalFoundationQuotaTier");
static_assert(sizeof(FConditionalFoundationQuotaTier) == 0x000018, "Wrong size on FConditionalFoundationQuotaTier");
static_assert(offsetof(FConditionalFoundationQuotaTier, FoundationClasses) == 0x000000, "Member 'FConditionalFoundationQuotaTier::FoundationClasses' has a wrong offset!");
static_assert(offsetof(FConditionalFoundationQuotaTier, MinFoundations) == 0x000010, "Member 'FConditionalFoundationQuotaTier::MinFoundations' has a wrong offset!");
static_assert(offsetof(FConditionalFoundationQuotaTier, MaxFoundations) == 0x000014, "Member 'FConditionalFoundationQuotaTier::MaxFoundations' has a wrong offset!");

// ScriptStruct FortniteGame.ConditionalFoundationQuota
// 0x0010 (0x0010 - 0x0000)
struct FConditionalFoundationQuota final
{
public:
	TArray<struct FConditionalFoundationQuotaTier> Tiers;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConditionalFoundationQuota) == 0x000008, "Wrong alignment on FConditionalFoundationQuota");
static_assert(sizeof(FConditionalFoundationQuota) == 0x000010, "Wrong size on FConditionalFoundationQuota");
static_assert(offsetof(FConditionalFoundationQuota, Tiers) == 0x000000, "Member 'FConditionalFoundationQuota::Tiers' has a wrong offset!");

// ScriptStruct FortniteGame.FortDayPhaseCallbackHandle
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FFortDayPhaseCallbackHandle final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortDayPhaseCallbackHandle) == 0x000004, "Wrong alignment on FFortDayPhaseCallbackHandle");
static_assert(sizeof(FFortDayPhaseCallbackHandle) == 0x000010, "Wrong size on FFortDayPhaseCallbackHandle");

// ScriptStruct FortniteGame.FortBaseWeaponStats
// 0x0118 (0x0120 - 0x0008)
struct FFortBaseWeaponStats : public FTableRowBase
{
public:
	int32                                         BaseLevel;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DmgPB;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DmgMid;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DmgLong;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DmgMaxRange;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EnvDmgPB;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EnvDmgMid;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EnvDmgLong;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EnvDmgMaxRange;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ImpactDmgPB;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ImpactDmgMid;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ImpactDmgLong;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ImpactDmgMaxRange;                                 // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bForceControl;                                     // 0x003C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RngPB;                                             // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RngMid;                                            // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RngLong;                                           // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RngMax;                                            // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveTable*                            DmgScaleTable;                                     // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   DmgScaleTableRow;                                  // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DmgScale;                                          // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveTable*                            EnvDmgScaleTable;                                  // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   EnvDmgScaleTableRow;                               // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EnvDmgScale;                                       // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveTable*                            ImpactDmgScaleTable;                               // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ImpactDmgScaleTableRow;                            // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ImpactDmgScale;                                    // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SurfaceRatioRowName;                               // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DamageZone_Light;                                  // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DamageZone_Normal;                                 // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DamageZone_Critical;                               // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DamageZone_Vulnerability;                          // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         KnockbackMagnitude;                                // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MidRangeKnockbackMagnitude;                        // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LongRangeKnockbackMagnitude;                       // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         KnockbackZAngle;                                   // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StunTime;                                          // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StunScale;                                         // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             Durability;                                        // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   DurabilityRowName;                                 // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DurabilityScale;                                   // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DurabilityPerUse;                                  // 0x00DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DiceCritChance;                                    // 0x00E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DiceCritDamageMultiplier;                          // 0x00E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ReloadTime;                                        // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ReloadScale;                                       // 0x00EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EFortWeaponReloadType                         ReloadType;                                        // 0x00F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bReloadInterruptIsImmediate;                       // 0x00F1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F2[0x2];                                       // 0x00F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ClipSize;                                          // 0x00F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ClipScale;                                         // 0x00F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         InitialClips;                                      // 0x00FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CartridgePerFire;                                  // 0x0100(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         AmmoCostPerFire;                                   // 0x0104(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxAmmoCostPerFire;                                // 0x0108(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinChargeTime;                                     // 0x010C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxChargeTime;                                     // 0x0110(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ChargeDownTime;                                    // 0x0114(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinChargeDamageMultiplier;                         // 0x0118(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxChargeDamageMultiplier;                         // 0x011C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortBaseWeaponStats) == 0x000008, "Wrong alignment on FFortBaseWeaponStats");
static_assert(sizeof(FFortBaseWeaponStats) == 0x000120, "Wrong size on FFortBaseWeaponStats");
static_assert(offsetof(FFortBaseWeaponStats, BaseLevel) == 0x000008, "Member 'FFortBaseWeaponStats::BaseLevel' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DmgPB) == 0x00000C, "Member 'FFortBaseWeaponStats::DmgPB' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DmgMid) == 0x000010, "Member 'FFortBaseWeaponStats::DmgMid' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DmgLong) == 0x000014, "Member 'FFortBaseWeaponStats::DmgLong' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DmgMaxRange) == 0x000018, "Member 'FFortBaseWeaponStats::DmgMaxRange' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, EnvDmgPB) == 0x00001C, "Member 'FFortBaseWeaponStats::EnvDmgPB' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, EnvDmgMid) == 0x000020, "Member 'FFortBaseWeaponStats::EnvDmgMid' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, EnvDmgLong) == 0x000024, "Member 'FFortBaseWeaponStats::EnvDmgLong' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, EnvDmgMaxRange) == 0x000028, "Member 'FFortBaseWeaponStats::EnvDmgMaxRange' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, ImpactDmgPB) == 0x00002C, "Member 'FFortBaseWeaponStats::ImpactDmgPB' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, ImpactDmgMid) == 0x000030, "Member 'FFortBaseWeaponStats::ImpactDmgMid' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, ImpactDmgLong) == 0x000034, "Member 'FFortBaseWeaponStats::ImpactDmgLong' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, ImpactDmgMaxRange) == 0x000038, "Member 'FFortBaseWeaponStats::ImpactDmgMaxRange' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, bForceControl) == 0x00003C, "Member 'FFortBaseWeaponStats::bForceControl' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, RngPB) == 0x000040, "Member 'FFortBaseWeaponStats::RngPB' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, RngMid) == 0x000044, "Member 'FFortBaseWeaponStats::RngMid' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, RngLong) == 0x000048, "Member 'FFortBaseWeaponStats::RngLong' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, RngMax) == 0x00004C, "Member 'FFortBaseWeaponStats::RngMax' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DmgScaleTable) == 0x000050, "Member 'FFortBaseWeaponStats::DmgScaleTable' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DmgScaleTableRow) == 0x000058, "Member 'FFortBaseWeaponStats::DmgScaleTableRow' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DmgScale) == 0x000060, "Member 'FFortBaseWeaponStats::DmgScale' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, EnvDmgScaleTable) == 0x000068, "Member 'FFortBaseWeaponStats::EnvDmgScaleTable' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, EnvDmgScaleTableRow) == 0x000070, "Member 'FFortBaseWeaponStats::EnvDmgScaleTableRow' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, EnvDmgScale) == 0x000078, "Member 'FFortBaseWeaponStats::EnvDmgScale' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, ImpactDmgScaleTable) == 0x000080, "Member 'FFortBaseWeaponStats::ImpactDmgScaleTable' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, ImpactDmgScaleTableRow) == 0x000088, "Member 'FFortBaseWeaponStats::ImpactDmgScaleTableRow' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, ImpactDmgScale) == 0x000090, "Member 'FFortBaseWeaponStats::ImpactDmgScale' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, SurfaceRatioRowName) == 0x000098, "Member 'FFortBaseWeaponStats::SurfaceRatioRowName' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DamageZone_Light) == 0x0000A0, "Member 'FFortBaseWeaponStats::DamageZone_Light' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DamageZone_Normal) == 0x0000A4, "Member 'FFortBaseWeaponStats::DamageZone_Normal' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DamageZone_Critical) == 0x0000A8, "Member 'FFortBaseWeaponStats::DamageZone_Critical' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DamageZone_Vulnerability) == 0x0000AC, "Member 'FFortBaseWeaponStats::DamageZone_Vulnerability' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, KnockbackMagnitude) == 0x0000B0, "Member 'FFortBaseWeaponStats::KnockbackMagnitude' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, MidRangeKnockbackMagnitude) == 0x0000B4, "Member 'FFortBaseWeaponStats::MidRangeKnockbackMagnitude' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, LongRangeKnockbackMagnitude) == 0x0000B8, "Member 'FFortBaseWeaponStats::LongRangeKnockbackMagnitude' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, KnockbackZAngle) == 0x0000BC, "Member 'FFortBaseWeaponStats::KnockbackZAngle' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, StunTime) == 0x0000C0, "Member 'FFortBaseWeaponStats::StunTime' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, StunScale) == 0x0000C4, "Member 'FFortBaseWeaponStats::StunScale' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, Durability) == 0x0000C8, "Member 'FFortBaseWeaponStats::Durability' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DurabilityRowName) == 0x0000D0, "Member 'FFortBaseWeaponStats::DurabilityRowName' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DurabilityScale) == 0x0000D8, "Member 'FFortBaseWeaponStats::DurabilityScale' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DurabilityPerUse) == 0x0000DC, "Member 'FFortBaseWeaponStats::DurabilityPerUse' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DiceCritChance) == 0x0000E0, "Member 'FFortBaseWeaponStats::DiceCritChance' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DiceCritDamageMultiplier) == 0x0000E4, "Member 'FFortBaseWeaponStats::DiceCritDamageMultiplier' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, ReloadTime) == 0x0000E8, "Member 'FFortBaseWeaponStats::ReloadTime' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, ReloadScale) == 0x0000EC, "Member 'FFortBaseWeaponStats::ReloadScale' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, ReloadType) == 0x0000F0, "Member 'FFortBaseWeaponStats::ReloadType' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, bReloadInterruptIsImmediate) == 0x0000F1, "Member 'FFortBaseWeaponStats::bReloadInterruptIsImmediate' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, ClipSize) == 0x0000F4, "Member 'FFortBaseWeaponStats::ClipSize' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, ClipScale) == 0x0000F8, "Member 'FFortBaseWeaponStats::ClipScale' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, InitialClips) == 0x0000FC, "Member 'FFortBaseWeaponStats::InitialClips' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, CartridgePerFire) == 0x000100, "Member 'FFortBaseWeaponStats::CartridgePerFire' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, AmmoCostPerFire) == 0x000104, "Member 'FFortBaseWeaponStats::AmmoCostPerFire' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, MaxAmmoCostPerFire) == 0x000108, "Member 'FFortBaseWeaponStats::MaxAmmoCostPerFire' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, MinChargeTime) == 0x00010C, "Member 'FFortBaseWeaponStats::MinChargeTime' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, MaxChargeTime) == 0x000110, "Member 'FFortBaseWeaponStats::MaxChargeTime' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, ChargeDownTime) == 0x000114, "Member 'FFortBaseWeaponStats::ChargeDownTime' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, MinChargeDamageMultiplier) == 0x000118, "Member 'FFortBaseWeaponStats::MinChargeDamageMultiplier' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, MaxChargeDamageMultiplier) == 0x00011C, "Member 'FFortBaseWeaponStats::MaxChargeDamageMultiplier' has a wrong offset!");

// ScriptStruct FortniteGame.GameDifficultyInfo
// 0x0078 (0x0080 - 0x0008)
struct FGameDifficultyInfo final : public FTableRowBase
{
public:
	int32                                         ContentAccountLevel;                               // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Difficulty;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DifficultyMatchmakingMinOverride;                  // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DifficultyMatchmakingMaxOverride;                  // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LootLevel;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredRating;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PvPRating;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecommendedRating;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoreBonus;                                        // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LootTierGroup;                                     // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BonusLootTierGroup;                                // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ThreatDisplayName;                                 // 0x0050(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   ColorParamName;                                    // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultPlayerLives;                                // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PlayerStatClampRowName;                            // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameDifficultyInfo) == 0x000008, "Wrong alignment on FGameDifficultyInfo");
static_assert(sizeof(FGameDifficultyInfo) == 0x000080, "Wrong size on FGameDifficultyInfo");
static_assert(offsetof(FGameDifficultyInfo, ContentAccountLevel) == 0x000008, "Member 'FGameDifficultyInfo::ContentAccountLevel' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, Difficulty) == 0x00000C, "Member 'FGameDifficultyInfo::Difficulty' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, DifficultyMatchmakingMinOverride) == 0x000010, "Member 'FGameDifficultyInfo::DifficultyMatchmakingMinOverride' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, DifficultyMatchmakingMaxOverride) == 0x000014, "Member 'FGameDifficultyInfo::DifficultyMatchmakingMaxOverride' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, LootLevel) == 0x000018, "Member 'FGameDifficultyInfo::LootLevel' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, RequiredRating) == 0x00001C, "Member 'FGameDifficultyInfo::RequiredRating' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, PvPRating) == 0x000020, "Member 'FGameDifficultyInfo::PvPRating' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, RecommendedRating) == 0x000024, "Member 'FGameDifficultyInfo::RecommendedRating' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, ScoreBonus) == 0x000028, "Member 'FGameDifficultyInfo::ScoreBonus' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, LootTierGroup) == 0x000030, "Member 'FGameDifficultyInfo::LootTierGroup' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, BonusLootTierGroup) == 0x000040, "Member 'FGameDifficultyInfo::BonusLootTierGroup' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, ThreatDisplayName) == 0x000050, "Member 'FGameDifficultyInfo::ThreatDisplayName' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, ColorParamName) == 0x000068, "Member 'FGameDifficultyInfo::ColorParamName' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, DefaultPlayerLives) == 0x000070, "Member 'FGameDifficultyInfo::DefaultPlayerLives' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, PlayerStatClampRowName) == 0x000078, "Member 'FGameDifficultyInfo::PlayerStatClampRowName' has a wrong offset!");

// ScriptStruct FortniteGame.FortCurveSequenceInstanceInfo
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FFortCurveSequenceInstanceInfo
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortCurveSequenceInstanceInfo) == 0x000004, "Wrong alignment on FFortCurveSequenceInstanceInfo");
static_assert(sizeof(FFortCurveSequenceInstanceInfo) == 0x000004, "Wrong size on FFortCurveSequenceInstanceInfo");

// ScriptStruct FortniteGame.FortAIEncounterSpawnPointsProfile
// 0x0040 (0x0040 - 0x0000)
struct FFortAIEncounterSpawnPointsProfile final
{
public:
	struct FGameplayTagContainer                  EncounterTypeTags;                                 // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FCurveTableRowHandle>           MaxSpawnPointsPerPlayerCount;                      // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FCurveTableRowHandle>           MinSpawnPointsPerPlayerCount;                      // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIEncounterSpawnPointsProfile) == 0x000008, "Wrong alignment on FFortAIEncounterSpawnPointsProfile");
static_assert(sizeof(FFortAIEncounterSpawnPointsProfile) == 0x000040, "Wrong size on FFortAIEncounterSpawnPointsProfile");
static_assert(offsetof(FFortAIEncounterSpawnPointsProfile, EncounterTypeTags) == 0x000000, "Member 'FFortAIEncounterSpawnPointsProfile::EncounterTypeTags' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnPointsProfile, MaxSpawnPointsPerPlayerCount) == 0x000020, "Member 'FFortAIEncounterSpawnPointsProfile::MaxSpawnPointsPerPlayerCount' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnPointsProfile, MinSpawnPointsPerPlayerCount) == 0x000030, "Member 'FFortAIEncounterSpawnPointsProfile::MinSpawnPointsPerPlayerCount' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIEncounterSpawnGroupCap
// 0x0020 (0x0020 - 0x0000)
struct FFortAIEncounterSpawnGroupCap final
{
public:
	struct FCurveTableRowHandle                   MinSpawnGroupNumberCap;                            // 0x0000(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   MaxSpawnGroupNumberCap;                            // 0x0010(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIEncounterSpawnGroupCap) == 0x000008, "Wrong alignment on FFortAIEncounterSpawnGroupCap");
static_assert(sizeof(FFortAIEncounterSpawnGroupCap) == 0x000020, "Wrong size on FFortAIEncounterSpawnGroupCap");
static_assert(offsetof(FFortAIEncounterSpawnGroupCap, MinSpawnGroupNumberCap) == 0x000000, "Member 'FFortAIEncounterSpawnGroupCap::MinSpawnGroupNumberCap' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCap, MaxSpawnGroupNumberCap) == 0x000010, "Member 'FFortAIEncounterSpawnGroupCap::MaxSpawnGroupNumberCap' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIEncounterSpawnGroupCapsCategory
// 0x0140 (0x0140 - 0x0000)
struct FFortAIEncounterSpawnGroupCapsCategory final
{
public:
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0000(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bApplyGroupPopulationCurveToCategoryMax;           // 0x0048(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCurveTableRowHandle                   InitialSpawnGroupAvailabilityDelaySeconds;         // 0x0050(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   SpawnGroupAvailabilityDelaySeconds;                // 0x0060(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      UnlockingTagQuery;                                 // 0x0070(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFortAIEncounterSpawnGroupCap>  SpawnGroupCapsPerPlayerCount;                      // 0x00B8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         InitialSpawnGroupAvailabilityTime;                 // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NumActiveCategorySpawnGroups;                      // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 SpawnGroupAvailabilityTimes;                       // 0x00D0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NumSpawnGroupAvailable;                            // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CategorySource;                                    // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0[0x50];                                      // 0x00F0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAIEncounterSpawnGroupCapsCategory) == 0x000008, "Wrong alignment on FFortAIEncounterSpawnGroupCapsCategory");
static_assert(sizeof(FFortAIEncounterSpawnGroupCapsCategory) == 0x000140, "Wrong size on FFortAIEncounterSpawnGroupCapsCategory");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsCategory, TagQuery) == 0x000000, "Member 'FFortAIEncounterSpawnGroupCapsCategory::TagQuery' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsCategory, bApplyGroupPopulationCurveToCategoryMax) == 0x000048, "Member 'FFortAIEncounterSpawnGroupCapsCategory::bApplyGroupPopulationCurveToCategoryMax' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsCategory, InitialSpawnGroupAvailabilityDelaySeconds) == 0x000050, "Member 'FFortAIEncounterSpawnGroupCapsCategory::InitialSpawnGroupAvailabilityDelaySeconds' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsCategory, SpawnGroupAvailabilityDelaySeconds) == 0x000060, "Member 'FFortAIEncounterSpawnGroupCapsCategory::SpawnGroupAvailabilityDelaySeconds' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsCategory, UnlockingTagQuery) == 0x000070, "Member 'FFortAIEncounterSpawnGroupCapsCategory::UnlockingTagQuery' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsCategory, SpawnGroupCapsPerPlayerCount) == 0x0000B8, "Member 'FFortAIEncounterSpawnGroupCapsCategory::SpawnGroupCapsPerPlayerCount' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsCategory, InitialSpawnGroupAvailabilityTime) == 0x0000C8, "Member 'FFortAIEncounterSpawnGroupCapsCategory::InitialSpawnGroupAvailabilityTime' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsCategory, NumActiveCategorySpawnGroups) == 0x0000CC, "Member 'FFortAIEncounterSpawnGroupCapsCategory::NumActiveCategorySpawnGroups' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsCategory, SpawnGroupAvailabilityTimes) == 0x0000D0, "Member 'FFortAIEncounterSpawnGroupCapsCategory::SpawnGroupAvailabilityTimes' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsCategory, NumSpawnGroupAvailable) == 0x0000E0, "Member 'FFortAIEncounterSpawnGroupCapsCategory::NumSpawnGroupAvailable' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsCategory, CategorySource) == 0x0000E8, "Member 'FFortAIEncounterSpawnGroupCapsCategory::CategorySource' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIEncounterSpawnGroupCapsProfile
// 0x0030 (0x0030 - 0x0000)
struct FFortAIEncounterSpawnGroupCapsProfile final
{
public:
	struct FGameplayTagContainer                  EncounterTypeTags;                                 // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFortAIEncounterSpawnGroupCapsCategory> PopulationCategories;                              // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIEncounterSpawnGroupCapsProfile) == 0x000008, "Wrong alignment on FFortAIEncounterSpawnGroupCapsProfile");
static_assert(sizeof(FFortAIEncounterSpawnGroupCapsProfile) == 0x000030, "Wrong size on FFortAIEncounterSpawnGroupCapsProfile");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsProfile, EncounterTypeTags) == 0x000000, "Member 'FFortAIEncounterSpawnGroupCapsProfile::EncounterTypeTags' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsProfile, PopulationCategories) == 0x000020, "Member 'FFortAIEncounterSpawnGroupCapsProfile::PopulationCategories' has a wrong offset!");

// ScriptStruct FortniteGame.SoundPerResourceLevel
// 0x0030 (0x0030 - 0x0000)
struct FSoundPerResourceLevel final
{
public:
	class USoundBase*                             Sounds[0x6];                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSoundPerResourceLevel) == 0x000008, "Wrong alignment on FSoundPerResourceLevel");
static_assert(sizeof(FSoundPerResourceLevel) == 0x000030, "Wrong size on FSoundPerResourceLevel");
static_assert(offsetof(FSoundPerResourceLevel, Sounds) == 0x000000, "Member 'FSoundPerResourceLevel::Sounds' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionAlertData
// 0x0060 (0x0068 - 0x0008)
struct FFortMissionAlertData final : public FTableRowBase
{
public:
	class FName                                   CategoryRowName;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpreadRowName;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RequiredEventFlag;                                 // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyUsedForSpreading;                             // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinimumTileDifficulty;                             // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaximumTileDifficulty;                             // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftClassPtr<class UClass>>           RestrictedMissionGens;                             // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class FString                                 LootTierGroup;                                     // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ModifierTierGroup;                                 // 0x0058(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionAlertData) == 0x000008, "Wrong alignment on FFortMissionAlertData");
static_assert(sizeof(FFortMissionAlertData) == 0x000068, "Wrong size on FFortMissionAlertData");
static_assert(offsetof(FFortMissionAlertData, CategoryRowName) == 0x000008, "Member 'FFortMissionAlertData::CategoryRowName' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertData, SpreadRowName) == 0x000010, "Member 'FFortMissionAlertData::SpreadRowName' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertData, RequiredEventFlag) == 0x000018, "Member 'FFortMissionAlertData::RequiredEventFlag' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertData, bOnlyUsedForSpreading) == 0x000028, "Member 'FFortMissionAlertData::bOnlyUsedForSpreading' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertData, MinimumTileDifficulty) == 0x00002C, "Member 'FFortMissionAlertData::MinimumTileDifficulty' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertData, MaximumTileDifficulty) == 0x000030, "Member 'FFortMissionAlertData::MaximumTileDifficulty' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertData, RestrictedMissionGens) == 0x000038, "Member 'FFortMissionAlertData::RestrictedMissionGens' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertData, LootTierGroup) == 0x000048, "Member 'FFortMissionAlertData::LootTierGroup' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertData, ModifierTierGroup) == 0x000058, "Member 'FFortMissionAlertData::ModifierTierGroup' has a wrong offset!");

// ScriptStruct FortniteGame.WindVectorMaterialInterpolationData
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FWindVectorMaterialInterpolationData final
{
public:
	class FName                                   MaterialParameterName;                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialParameterIndex;                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LerpFromValue;                                     // 0x000C(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LerpToValue;                                       // 0x001C(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWindVectorMaterialInterpolationData) == 0x000008, "Wrong alignment on FWindVectorMaterialInterpolationData");
static_assert(sizeof(FWindVectorMaterialInterpolationData) == 0x000030, "Wrong size on FWindVectorMaterialInterpolationData");
static_assert(offsetof(FWindVectorMaterialInterpolationData, MaterialParameterName) == 0x000000, "Member 'FWindVectorMaterialInterpolationData::MaterialParameterName' has a wrong offset!");
static_assert(offsetof(FWindVectorMaterialInterpolationData, MaterialParameterIndex) == 0x000008, "Member 'FWindVectorMaterialInterpolationData::MaterialParameterIndex' has a wrong offset!");
static_assert(offsetof(FWindVectorMaterialInterpolationData, LerpFromValue) == 0x00000C, "Member 'FWindVectorMaterialInterpolationData::LerpFromValue' has a wrong offset!");
static_assert(offsetof(FWindVectorMaterialInterpolationData, LerpToValue) == 0x00001C, "Member 'FWindVectorMaterialInterpolationData::LerpToValue' has a wrong offset!");

// ScriptStruct FortniteGame.FortMaterialParameterID
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FFortMaterialParameterID final
{
public:
	int32                                         VariableIndex;                                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   VariableName;                                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMaterialParameterID) == 0x000008, "Wrong alignment on FFortMaterialParameterID");
static_assert(sizeof(FFortMaterialParameterID) == 0x000010, "Wrong size on FFortMaterialParameterID");
static_assert(offsetof(FFortMaterialParameterID, VariableIndex) == 0x000000, "Member 'FFortMaterialParameterID::VariableIndex' has a wrong offset!");
static_assert(offsetof(FFortMaterialParameterID, VariableName) == 0x000008, "Member 'FFortMaterialParameterID::VariableName' has a wrong offset!");

// ScriptStruct FortniteGame.FortWindMaterialParameterPairID
// 0x0028 (0x0028 - 0x0000)
struct FFortWindMaterialParameterPairID final
{
public:
	int32                                         PairIndex;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortMaterialParameterID               SpeedParameter;                                    // 0x0008(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	struct FFortMaterialParameterID               OffsetParameter;                                   // 0x0018(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortWindMaterialParameterPairID) == 0x000008, "Wrong alignment on FFortWindMaterialParameterPairID");
static_assert(sizeof(FFortWindMaterialParameterPairID) == 0x000028, "Wrong size on FFortWindMaterialParameterPairID");
static_assert(offsetof(FFortWindMaterialParameterPairID, PairIndex) == 0x000000, "Member 'FFortWindMaterialParameterPairID::PairIndex' has a wrong offset!");
static_assert(offsetof(FFortWindMaterialParameterPairID, SpeedParameter) == 0x000008, "Member 'FFortWindMaterialParameterPairID::SpeedParameter' has a wrong offset!");
static_assert(offsetof(FFortWindMaterialParameterPairID, OffsetParameter) == 0x000018, "Member 'FFortWindMaterialParameterPairID::OffsetParameter' has a wrong offset!");

// ScriptStruct FortniteGame.FortWindMaterialData
// 0x0048 (0x0048 - 0x0000)
struct FFortWindMaterialData final
{
public:
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               IntenseStateMID;                                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialParameterPairIndices;                      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WindVectorParameterIndex;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FWindScalarMaterialInterpolationData> ScalarInterpolationData;                           // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FWindVectorMaterialInterpolationData> VectorInterpolationData;                           // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortWindMaterialParameterPairID> ParametersToSet;                                   // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortWindMaterialData) == 0x000008, "Wrong alignment on FFortWindMaterialData");
static_assert(sizeof(FFortWindMaterialData) == 0x000048, "Wrong size on FFortWindMaterialData");
static_assert(offsetof(FFortWindMaterialData, Mid) == 0x000000, "Member 'FFortWindMaterialData::Mid' has a wrong offset!");
static_assert(offsetof(FFortWindMaterialData, IntenseStateMID) == 0x000008, "Member 'FFortWindMaterialData::IntenseStateMID' has a wrong offset!");
static_assert(offsetof(FFortWindMaterialData, MaterialParameterPairIndices) == 0x000010, "Member 'FFortWindMaterialData::MaterialParameterPairIndices' has a wrong offset!");
static_assert(offsetof(FFortWindMaterialData, WindVectorParameterIndex) == 0x000014, "Member 'FFortWindMaterialData::WindVectorParameterIndex' has a wrong offset!");
static_assert(offsetof(FFortWindMaterialData, ScalarInterpolationData) == 0x000018, "Member 'FFortWindMaterialData::ScalarInterpolationData' has a wrong offset!");
static_assert(offsetof(FFortWindMaterialData, VectorInterpolationData) == 0x000028, "Member 'FFortWindMaterialData::VectorInterpolationData' has a wrong offset!");
static_assert(offsetof(FFortWindMaterialData, ParametersToSet) == 0x000038, "Member 'FFortWindMaterialData::ParametersToSet' has a wrong offset!");

// ScriptStruct FortniteGame.OutpostUpgradesPerTheaterData
// 0x0010 (0x0010 - 0x0000)
struct FOutpostUpgradesPerTheaterData final
{
public:
	int32                                         TheaterSlot;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             OutpostUpgradesData;                               // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOutpostUpgradesPerTheaterData) == 0x000008, "Wrong alignment on FOutpostUpgradesPerTheaterData");
static_assert(sizeof(FOutpostUpgradesPerTheaterData) == 0x000010, "Wrong size on FOutpostUpgradesPerTheaterData");
static_assert(offsetof(FOutpostUpgradesPerTheaterData, TheaterSlot) == 0x000000, "Member 'FOutpostUpgradesPerTheaterData::TheaterSlot' has a wrong offset!");
static_assert(offsetof(FOutpostUpgradesPerTheaterData, OutpostUpgradesData) == 0x000008, "Member 'FOutpostUpgradesPerTheaterData::OutpostUpgradesData' has a wrong offset!");

// ScriptStruct FortniteGame.FortEncounterPawnNumberCaps
// 0x0018 (0x0018 - 0x0000)
struct FFortEncounterPawnNumberCaps final
{
public:
	bool                                          bApplyPawnNumberCaps;                              // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCurveTableRowHandle>           PawnCapsPerPlayerCount;                            // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEncounterPawnNumberCaps) == 0x000008, "Wrong alignment on FFortEncounterPawnNumberCaps");
static_assert(sizeof(FFortEncounterPawnNumberCaps) == 0x000018, "Wrong size on FFortEncounterPawnNumberCaps");
static_assert(offsetof(FFortEncounterPawnNumberCaps, bApplyPawnNumberCaps) == 0x000000, "Member 'FFortEncounterPawnNumberCaps::bApplyPawnNumberCaps' has a wrong offset!");
static_assert(offsetof(FFortEncounterPawnNumberCaps, PawnCapsPerPlayerCount) == 0x000008, "Member 'FFortEncounterPawnNumberCaps::PawnCapsPerPlayerCount' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlayerPerformanceEstimateSettings
// 0x0040 (0x0040 - 0x0000)
struct FFortPlayerPerformanceEstimateSettings final
{
public:
	struct FCurveTableRowHandle                   PlayerPerformanceEstimateTransformMin;             // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   PlayerPerformanceEstimateTransformOrigin;          // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   PlayerPerformanceEstimateTransformMax;             // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         EncounterPlayerPerformanceWeight;                  // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviousWavePlayerPerformanceWeight;               // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CampaignPlayerPerformanceWeight;                   // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPlayerPerformanceEstimateSettings) == 0x000008, "Wrong alignment on FFortPlayerPerformanceEstimateSettings");
static_assert(sizeof(FFortPlayerPerformanceEstimateSettings) == 0x000040, "Wrong size on FFortPlayerPerformanceEstimateSettings");
static_assert(offsetof(FFortPlayerPerformanceEstimateSettings, PlayerPerformanceEstimateTransformMin) == 0x000000, "Member 'FFortPlayerPerformanceEstimateSettings::PlayerPerformanceEstimateTransformMin' has a wrong offset!");
static_assert(offsetof(FFortPlayerPerformanceEstimateSettings, PlayerPerformanceEstimateTransformOrigin) == 0x000010, "Member 'FFortPlayerPerformanceEstimateSettings::PlayerPerformanceEstimateTransformOrigin' has a wrong offset!");
static_assert(offsetof(FFortPlayerPerformanceEstimateSettings, PlayerPerformanceEstimateTransformMax) == 0x000020, "Member 'FFortPlayerPerformanceEstimateSettings::PlayerPerformanceEstimateTransformMax' has a wrong offset!");
static_assert(offsetof(FFortPlayerPerformanceEstimateSettings, EncounterPlayerPerformanceWeight) == 0x000030, "Member 'FFortPlayerPerformanceEstimateSettings::EncounterPlayerPerformanceWeight' has a wrong offset!");
static_assert(offsetof(FFortPlayerPerformanceEstimateSettings, PreviousWavePlayerPerformanceWeight) == 0x000034, "Member 'FFortPlayerPerformanceEstimateSettings::PreviousWavePlayerPerformanceWeight' has a wrong offset!");
static_assert(offsetof(FFortPlayerPerformanceEstimateSettings, CampaignPlayerPerformanceWeight) == 0x000038, "Member 'FFortPlayerPerformanceEstimateSettings::CampaignPlayerPerformanceWeight' has a wrong offset!");

// ScriptStruct FortniteGame.FortZoneEvent
// 0x0020 (0x0020 - 0x0000)
struct FFortZoneEvent final
{
public:
	class FName                                   EventType;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                EventFocus;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataAsset*                             EventContent;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EventInstigator;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortZoneEvent) == 0x000008, "Wrong alignment on FFortZoneEvent");
static_assert(sizeof(FFortZoneEvent) == 0x000020, "Wrong size on FFortZoneEvent");
static_assert(offsetof(FFortZoneEvent, EventType) == 0x000000, "Member 'FFortZoneEvent::EventType' has a wrong offset!");
static_assert(offsetof(FFortZoneEvent, EventFocus) == 0x000008, "Member 'FFortZoneEvent::EventFocus' has a wrong offset!");
static_assert(offsetof(FFortZoneEvent, EventContent) == 0x000010, "Member 'FFortZoneEvent::EventContent' has a wrong offset!");
static_assert(offsetof(FFortZoneEvent, EventInstigator) == 0x000018, "Member 'FFortZoneEvent::EventInstigator' has a wrong offset!");

// ScriptStruct FortniteGame.TieredWaveSetData
// 0x0160 (0x0160 - 0x0000)
struct FTieredWaveSetData final
{
public:
	int32                                         EDOIdx;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BreatherBetweenWaves;                              // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWaveRules                                    WaveRules;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaveLengthMod;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NumKillsMod;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KillPointsMod;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DifficultyAddMod;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   OverrideSpawnPointsMultiplier;                     // 0x0020(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   OverrideSpawnProgression;                          // 0x0048(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   OverrideUtilitiesAdjustment;                       // 0x0070(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   OverrideUtilitiesFree;                             // 0x0098(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   OverrideUtilitiesLocked;                           // 0x00C0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   OverrideDistance;                                  // 0x00E8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   OverrideDirectionNumber;                           // 0x0110(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   OverrideModifierTags;                              // 0x0138(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTieredWaveSetData) == 0x000008, "Wrong alignment on FTieredWaveSetData");
static_assert(sizeof(FTieredWaveSetData) == 0x000160, "Wrong size on FTieredWaveSetData");
static_assert(offsetof(FTieredWaveSetData, EDOIdx) == 0x000000, "Member 'FTieredWaveSetData::EDOIdx' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetData, BreatherBetweenWaves) == 0x000004, "Member 'FTieredWaveSetData::BreatherBetweenWaves' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetData, WaveRules) == 0x000008, "Member 'FTieredWaveSetData::WaveRules' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetData, WaveLengthMod) == 0x00000C, "Member 'FTieredWaveSetData::WaveLengthMod' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetData, NumKillsMod) == 0x000010, "Member 'FTieredWaveSetData::NumKillsMod' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetData, KillPointsMod) == 0x000014, "Member 'FTieredWaveSetData::KillPointsMod' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetData, DifficultyAddMod) == 0x000018, "Member 'FTieredWaveSetData::DifficultyAddMod' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetData, OverrideSpawnPointsMultiplier) == 0x000020, "Member 'FTieredWaveSetData::OverrideSpawnPointsMultiplier' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetData, OverrideSpawnProgression) == 0x000048, "Member 'FTieredWaveSetData::OverrideSpawnProgression' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetData, OverrideUtilitiesAdjustment) == 0x000070, "Member 'FTieredWaveSetData::OverrideUtilitiesAdjustment' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetData, OverrideUtilitiesFree) == 0x000098, "Member 'FTieredWaveSetData::OverrideUtilitiesFree' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetData, OverrideUtilitiesLocked) == 0x0000C0, "Member 'FTieredWaveSetData::OverrideUtilitiesLocked' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetData, OverrideDistance) == 0x0000E8, "Member 'FTieredWaveSetData::OverrideDistance' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetData, OverrideDirectionNumber) == 0x000110, "Member 'FTieredWaveSetData::OverrideDirectionNumber' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetData, OverrideModifierTags) == 0x000138, "Member 'FTieredWaveSetData::OverrideModifierTags' has a wrong offset!");

// ScriptStruct FortniteGame.FortSplineBase
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FFortSplineBase
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartTime;                                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Duration;                                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortSplineBase) == 0x000008, "Wrong alignment on FFortSplineBase");
static_assert(sizeof(FFortSplineBase) == 0x000010, "Wrong size on FFortSplineBase");
static_assert(offsetof(FFortSplineBase, StartTime) == 0x000008, "Member 'FFortSplineBase::StartTime' has a wrong offset!");
static_assert(offsetof(FFortSplineBase, Duration) == 0x00000C, "Member 'FFortSplineBase::Duration' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIEncounterPIDController
// 0x0068 (0x0068 - 0x0000)
struct alignas(0x08) FFortAIEncounterPIDController final
{
public:
	float                                         ProportionalGain;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntegralGain;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DerivativeGain;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x5C];                                       // 0x000C(0x005C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAIEncounterPIDController) == 0x000008, "Wrong alignment on FFortAIEncounterPIDController");
static_assert(sizeof(FFortAIEncounterPIDController) == 0x000068, "Wrong size on FFortAIEncounterPIDController");
static_assert(offsetof(FFortAIEncounterPIDController, ProportionalGain) == 0x000000, "Member 'FFortAIEncounterPIDController::ProportionalGain' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterPIDController, IntegralGain) == 0x000004, "Member 'FFortAIEncounterPIDController::IntegralGain' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterPIDController, DerivativeGain) == 0x000008, "Member 'FFortAIEncounterPIDController::DerivativeGain' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaJumpPenalty
// 0x0008 (0x0008 - 0x0000)
struct FAthenaJumpPenalty final
{
public:
	float                                         JumpScalar;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovementScalar;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaJumpPenalty) == 0x000004, "Wrong alignment on FAthenaJumpPenalty");
static_assert(sizeof(FAthenaJumpPenalty) == 0x000008, "Wrong size on FAthenaJumpPenalty");
static_assert(offsetof(FAthenaJumpPenalty, JumpScalar) == 0x000000, "Member 'FAthenaJumpPenalty::JumpScalar' has a wrong offset!");
static_assert(offsetof(FAthenaJumpPenalty, MovementScalar) == 0x000004, "Member 'FAthenaJumpPenalty::MovementScalar' has a wrong offset!");

// ScriptStruct FortniteGame.UtilityTypeFloatPair
// 0x0008 (0x0008 - 0x0000)
struct FUtilityTypeFloatPair final
{
public:
	EFortAIUtility                                Utility;                                           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUtilityTypeFloatPair) == 0x000004, "Wrong alignment on FUtilityTypeFloatPair");
static_assert(sizeof(FUtilityTypeFloatPair) == 0x000008, "Wrong size on FUtilityTypeFloatPair");
static_assert(offsetof(FUtilityTypeFloatPair, Utility) == 0x000000, "Member 'FUtilityTypeFloatPair::Utility' has a wrong offset!");
static_assert(offsetof(FUtilityTypeFloatPair, Value) == 0x000004, "Member 'FUtilityTypeFloatPair::Value' has a wrong offset!");

// ScriptStruct FortniteGame.StrategicBuildingLevelCriteria
// 0x0020 (0x0020 - 0x0000)
struct FStrategicBuildingLevelCriteria final
{
public:
	class FText                                   UnlockRequirementText;                             // 0x0000(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EFortStrategicBuildingLevelCriteriaDisplayRepresentation RequirementDisplayRepresentation;                  // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UnlockRequirementQuantity;                         // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStrategicBuildingLevelCriteria) == 0x000008, "Wrong alignment on FStrategicBuildingLevelCriteria");
static_assert(sizeof(FStrategicBuildingLevelCriteria) == 0x000020, "Wrong size on FStrategicBuildingLevelCriteria");
static_assert(offsetof(FStrategicBuildingLevelCriteria, UnlockRequirementText) == 0x000000, "Member 'FStrategicBuildingLevelCriteria::UnlockRequirementText' has a wrong offset!");
static_assert(offsetof(FStrategicBuildingLevelCriteria, RequirementDisplayRepresentation) == 0x000018, "Member 'FStrategicBuildingLevelCriteria::RequirementDisplayRepresentation' has a wrong offset!");
static_assert(offsetof(FStrategicBuildingLevelCriteria, UnlockRequirementQuantity) == 0x00001C, "Member 'FStrategicBuildingLevelCriteria::UnlockRequirementQuantity' has a wrong offset!");

// ScriptStruct FortniteGame.IntensityData
// 0x0030 (0x0030 - 0x0000)
struct FIntensityData final
{
public:
	TArray<struct FIntensityContribution>         ContributingFactors;                               // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ContributionsTotal;                                // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBuildingEditModeMetadata*>      ExceptionEditModes;                                // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ExceptionEditModeWeight;                           // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FIntensityData) == 0x000008, "Wrong alignment on FIntensityData");
static_assert(sizeof(FIntensityData) == 0x000030, "Wrong size on FIntensityData");
static_assert(offsetof(FIntensityData, ContributingFactors) == 0x000000, "Member 'FIntensityData::ContributingFactors' has a wrong offset!");
static_assert(offsetof(FIntensityData, ContributionsTotal) == 0x000010, "Member 'FIntensityData::ContributionsTotal' has a wrong offset!");
static_assert(offsetof(FIntensityData, ExceptionEditModes) == 0x000018, "Member 'FIntensityData::ExceptionEditModes' has a wrong offset!");
static_assert(offsetof(FIntensityData, ExceptionEditModeWeight) == 0x000028, "Member 'FIntensityData::ExceptionEditModeWeight' has a wrong offset!");

// ScriptStruct FortniteGame.FortPossibleMission
// 0x0038 (0x0038 - 0x0000)
struct FFortPossibleMission final
{
public:
	TSoftObjectPtr<class UFortMissionInfo>        MissionInfo;                                       // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinAlwaysGenerated;                                // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPrototype;                                      // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPossibleMission) == 0x000008, "Wrong alignment on FFortPossibleMission");
static_assert(sizeof(FFortPossibleMission) == 0x000038, "Wrong size on FFortPossibleMission");
static_assert(offsetof(FFortPossibleMission, MissionInfo) == 0x000000, "Member 'FFortPossibleMission::MissionInfo' has a wrong offset!");
static_assert(offsetof(FFortPossibleMission, Weight) == 0x000028, "Member 'FFortPossibleMission::Weight' has a wrong offset!");
static_assert(offsetof(FFortPossibleMission, MinAlwaysGenerated) == 0x00002C, "Member 'FFortPossibleMission::MinAlwaysGenerated' has a wrong offset!");
static_assert(offsetof(FFortPossibleMission, bIsPrototype) == 0x000030, "Member 'FFortPossibleMission::bIsPrototype' has a wrong offset!");

// ScriptStruct FortniteGame.OnTimeHitInfo
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FOnTimeHitInfo final
{
public:
	TDelegate<void()>                             TimeCallback;                                      // 0x0000(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x20];                                      // 0x0010(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOnTimeHitInfo) == 0x000008, "Wrong alignment on FOnTimeHitInfo");
static_assert(sizeof(FOnTimeHitInfo) == 0x000030, "Wrong size on FOnTimeHitInfo");
static_assert(offsetof(FOnTimeHitInfo, TimeCallback) == 0x000000, "Member 'FOnTimeHitInfo::TimeCallback' has a wrong offset!");

// ScriptStruct FortniteGame.FortAISpawnGroupUpgradeUIData
// 0x00A8 (0x00A8 - 0x0000)
struct FFortAISpawnGroupUpgradeUIData final
{
public:
	bool                                          bAlwaysDisplayHealthBar;                           // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideHealthBarColor;                           // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            UpgradeIcon;                                       // 0x0008(0x0078)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FLinearColor                           HealthBarColorOverride;                            // 0x0080(0x0010)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   UpgradeName;                                       // 0x0090(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAISpawnGroupUpgradeUIData) == 0x000008, "Wrong alignment on FFortAISpawnGroupUpgradeUIData");
static_assert(sizeof(FFortAISpawnGroupUpgradeUIData) == 0x0000A8, "Wrong size on FFortAISpawnGroupUpgradeUIData");
static_assert(offsetof(FFortAISpawnGroupUpgradeUIData, bAlwaysDisplayHealthBar) == 0x000000, "Member 'FFortAISpawnGroupUpgradeUIData::bAlwaysDisplayHealthBar' has a wrong offset!");
static_assert(offsetof(FFortAISpawnGroupUpgradeUIData, bOverrideHealthBarColor) == 0x000001, "Member 'FFortAISpawnGroupUpgradeUIData::bOverrideHealthBarColor' has a wrong offset!");
static_assert(offsetof(FFortAISpawnGroupUpgradeUIData, UpgradeIcon) == 0x000008, "Member 'FFortAISpawnGroupUpgradeUIData::UpgradeIcon' has a wrong offset!");
static_assert(offsetof(FFortAISpawnGroupUpgradeUIData, HealthBarColorOverride) == 0x000080, "Member 'FFortAISpawnGroupUpgradeUIData::HealthBarColorOverride' has a wrong offset!");
static_assert(offsetof(FFortAISpawnGroupUpgradeUIData, UpgradeName) == 0x000090, "Member 'FFortAISpawnGroupUpgradeUIData::UpgradeName' has a wrong offset!");

// ScriptStruct FortniteGame.PendingSpawnInfo
// 0x0160 (0x0160 - 0x0000)
struct FPendingSpawnInfo final
{
public:
	TSubclassOf<class AFortAIPawn>                PawnClassToSpawn;                                  // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SpawnPoint;                                        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation;                                     // 0x0010(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnRotation;                                     // 0x001C(0x000C)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 SpawnSource;                                       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawnedFromExternalSpawner;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpawnSetIndex;                                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortressAIType                               AIType;                                            // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerController*                  TargetPlayer;                                      // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAIEncounterInfo*                   EncounterInfo;                                     // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DifficultyLevel;                                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAISpawnGroup*                      SpawnGroup;                                        // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  SpawnGroupGuid;                                    // 0x0060(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnemyIndexInSpawnGroup;                            // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToSpawn;                                       // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  PendingSpawnInfoGuid;                              // 0x0078(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCollision;                                  // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKillBuildingActorsAtSpawnLocation;                // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x2];                                       // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EncounterAILifespan;                               // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoreMultiplier;                                   // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugSpawnedAI;                                   // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortAbilitySet*>                AbilitySetsToGrantOnSpawn;                         // 0x0098(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UFortGameplayModifierItemDefinition*> ModifiersToApplyOnSpawn;                           // 0x00A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FFortAISpawnGroupUpgradeUIData         UpgradeUIData;                                     // 0x00B8(0x00A8)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPendingSpawnInfo) == 0x000008, "Wrong alignment on FPendingSpawnInfo");
static_assert(sizeof(FPendingSpawnInfo) == 0x000160, "Wrong size on FPendingSpawnInfo");
static_assert(offsetof(FPendingSpawnInfo, PawnClassToSpawn) == 0x000000, "Member 'FPendingSpawnInfo::PawnClassToSpawn' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, SpawnPoint) == 0x000008, "Member 'FPendingSpawnInfo::SpawnPoint' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, SpawnLocation) == 0x000010, "Member 'FPendingSpawnInfo::SpawnLocation' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, SpawnRotation) == 0x00001C, "Member 'FPendingSpawnInfo::SpawnRotation' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, SpawnSource) == 0x000028, "Member 'FPendingSpawnInfo::SpawnSource' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, bSpawnedFromExternalSpawner) == 0x000030, "Member 'FPendingSpawnInfo::bSpawnedFromExternalSpawner' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, SpawnSetIndex) == 0x000034, "Member 'FPendingSpawnInfo::SpawnSetIndex' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, AIType) == 0x000038, "Member 'FPendingSpawnInfo::AIType' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, TargetPlayer) == 0x000040, "Member 'FPendingSpawnInfo::TargetPlayer' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, EncounterInfo) == 0x000048, "Member 'FPendingSpawnInfo::EncounterInfo' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, DifficultyLevel) == 0x000050, "Member 'FPendingSpawnInfo::DifficultyLevel' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, SpawnGroup) == 0x000058, "Member 'FPendingSpawnInfo::SpawnGroup' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, SpawnGroupGuid) == 0x000060, "Member 'FPendingSpawnInfo::SpawnGroupGuid' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, EnemyIndexInSpawnGroup) == 0x000070, "Member 'FPendingSpawnInfo::EnemyIndexInSpawnGroup' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, TimeToSpawn) == 0x000074, "Member 'FPendingSpawnInfo::TimeToSpawn' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, PendingSpawnInfoGuid) == 0x000078, "Member 'FPendingSpawnInfo::PendingSpawnInfoGuid' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, bIgnoreCollision) == 0x000088, "Member 'FPendingSpawnInfo::bIgnoreCollision' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, bKillBuildingActorsAtSpawnLocation) == 0x000089, "Member 'FPendingSpawnInfo::bKillBuildingActorsAtSpawnLocation' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, EncounterAILifespan) == 0x00008C, "Member 'FPendingSpawnInfo::EncounterAILifespan' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, ScoreMultiplier) == 0x000090, "Member 'FPendingSpawnInfo::ScoreMultiplier' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, bDebugSpawnedAI) == 0x000094, "Member 'FPendingSpawnInfo::bDebugSpawnedAI' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, AbilitySetsToGrantOnSpawn) == 0x000098, "Member 'FPendingSpawnInfo::AbilitySetsToGrantOnSpawn' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, ModifiersToApplyOnSpawn) == 0x0000A8, "Member 'FPendingSpawnInfo::ModifiersToApplyOnSpawn' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, UpgradeUIData) == 0x0000B8, "Member 'FPendingSpawnInfo::UpgradeUIData' has a wrong offset!");

// ScriptStruct FortniteGame.FortEncounterAIDirectorFactor
// 0x000C (0x000C - 0x0000)
struct FFortEncounterAIDirectorFactor final
{
public:
	float                                         CurrentValue;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccumulatedPeriodValue;                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalPeriodTime;                                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEncounterAIDirectorFactor) == 0x000004, "Wrong alignment on FFortEncounterAIDirectorFactor");
static_assert(sizeof(FFortEncounterAIDirectorFactor) == 0x00000C, "Wrong size on FFortEncounterAIDirectorFactor");
static_assert(offsetof(FFortEncounterAIDirectorFactor, CurrentValue) == 0x000000, "Member 'FFortEncounterAIDirectorFactor::CurrentValue' has a wrong offset!");
static_assert(offsetof(FFortEncounterAIDirectorFactor, AccumulatedPeriodValue) == 0x000004, "Member 'FFortEncounterAIDirectorFactor::AccumulatedPeriodValue' has a wrong offset!");
static_assert(offsetof(FFortEncounterAIDirectorFactor, TotalPeriodTime) == 0x000008, "Member 'FFortEncounterAIDirectorFactor::TotalPeriodTime' has a wrong offset!");

// ScriptStruct FortniteGame.FortBadgeCount
// 0x0014 (0x0020 - 0x000C)
struct FFortBadgeCount final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortBadgeItemDefinition*               Badge;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortBadgeCount) == 0x000008, "Wrong alignment on FFortBadgeCount");
static_assert(sizeof(FFortBadgeCount) == 0x000020, "Wrong size on FFortBadgeCount");
static_assert(offsetof(FFortBadgeCount, Badge) == 0x000010, "Member 'FFortBadgeCount::Badge' has a wrong offset!");
static_assert(offsetof(FFortBadgeCount, Count) == 0x000018, "Member 'FFortBadgeCount::Count' has a wrong offset!");

// ScriptStruct FortniteGame.FortBadgeCountArray
// 0x0010 (0x00C0 - 0x00B0)
struct FFortBadgeCountArray final : public FFastArraySerializer
{
public:
	TArray<struct FFortBadgeCount>                Badges;                                            // 0x00B0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortBadgeCountArray) == 0x000008, "Wrong alignment on FFortBadgeCountArray");
static_assert(sizeof(FFortBadgeCountArray) == 0x0000C0, "Wrong size on FFortBadgeCountArray");
static_assert(offsetof(FFortBadgeCountArray, Badges) == 0x0000B0, "Member 'FFortBadgeCountArray::Badges' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionUIActorHandle
// 0x0030 (0x0030 - 0x0000)
struct FFortMissionUIActorHandle final
{
public:
	TWeakObjectPtr<class AActor>                  AttachedActor;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AttachmentOffset;                                  // 0x0008(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxVisibleDistance;                                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MissionGuid;                                       // 0x0018(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UFortMissionInfoIndicator> MissionUIIndicator;                                // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionUIActorHandle) == 0x000004, "Wrong alignment on FFortMissionUIActorHandle");
static_assert(sizeof(FFortMissionUIActorHandle) == 0x000030, "Wrong size on FFortMissionUIActorHandle");
static_assert(offsetof(FFortMissionUIActorHandle, AttachedActor) == 0x000000, "Member 'FFortMissionUIActorHandle::AttachedActor' has a wrong offset!");
static_assert(offsetof(FFortMissionUIActorHandle, AttachmentOffset) == 0x000008, "Member 'FFortMissionUIActorHandle::AttachmentOffset' has a wrong offset!");
static_assert(offsetof(FFortMissionUIActorHandle, MaxVisibleDistance) == 0x000014, "Member 'FFortMissionUIActorHandle::MaxVisibleDistance' has a wrong offset!");
static_assert(offsetof(FFortMissionUIActorHandle, MissionGuid) == 0x000018, "Member 'FFortMissionUIActorHandle::MissionGuid' has a wrong offset!");
static_assert(offsetof(FFortMissionUIActorHandle, MissionUIIndicator) == 0x000028, "Member 'FFortMissionUIActorHandle::MissionUIIndicator' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIDirectorFactorContribution
// 0x000C (0x000C - 0x0000)
struct FFortAIDirectorFactorContribution final
{
public:
	EFortAIDirectorEvent                          AIDirectorEvent;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxContribution;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAIDirectorFactorContribution             ContributionType;                                  // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAIDirectorFactorContribution) == 0x000004, "Wrong alignment on FFortAIDirectorFactorContribution");
static_assert(sizeof(FFortAIDirectorFactorContribution) == 0x00000C, "Wrong size on FFortAIDirectorFactorContribution");
static_assert(offsetof(FFortAIDirectorFactorContribution, AIDirectorEvent) == 0x000000, "Member 'FFortAIDirectorFactorContribution::AIDirectorEvent' has a wrong offset!");
static_assert(offsetof(FFortAIDirectorFactorContribution, MaxContribution) == 0x000004, "Member 'FFortAIDirectorFactorContribution::MaxContribution' has a wrong offset!");
static_assert(offsetof(FFortAIDirectorFactorContribution, ContributionType) == 0x000008, "Member 'FFortAIDirectorFactorContribution::ContributionType' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIDirectorFactorData
// 0x0020 (0x0020 - 0x0000)
struct FFortAIDirectorFactorData final
{
public:
	EFortAIDirectorFactor                         AIDirectorFactor;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortAIDirectorFactorContribution> ContributingEvents;                                // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAIDirectorFactorData) == 0x000008, "Wrong alignment on FFortAIDirectorFactorData");
static_assert(sizeof(FFortAIDirectorFactorData) == 0x000020, "Wrong size on FFortAIDirectorFactorData");
static_assert(offsetof(FFortAIDirectorFactorData, AIDirectorFactor) == 0x000000, "Member 'FFortAIDirectorFactorData::AIDirectorFactor' has a wrong offset!");
static_assert(offsetof(FFortAIDirectorFactorData, ContributingEvents) == 0x000008, "Member 'FFortAIDirectorFactorData::ContributingEvents' has a wrong offset!");
static_assert(offsetof(FFortAIDirectorFactorData, MaxValue) == 0x000018, "Member 'FFortAIDirectorFactorData::MaxValue' has a wrong offset!");

// ScriptStruct FortniteGame.FortGiftingInfo
// 0x0028 (0x0028 - 0x0000)
struct FFortGiftingInfo
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortHeroType*                          HeroType;                                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x10];                                      // 0x0018(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortGiftingInfo) == 0x000008, "Wrong alignment on FFortGiftingInfo");
static_assert(sizeof(FFortGiftingInfo) == 0x000028, "Wrong size on FFortGiftingInfo");
static_assert(offsetof(FFortGiftingInfo, PlayerName) == 0x000000, "Member 'FFortGiftingInfo::PlayerName' has a wrong offset!");
static_assert(offsetof(FFortGiftingInfo, HeroType) == 0x000010, "Member 'FFortGiftingInfo::HeroType' has a wrong offset!");

// ScriptStruct FortniteGame.FortLoginReward
// 0x0050 (0x0058 - 0x0008)
struct FFortLoginReward final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UFortAccountItemDefinition> ItemDefinition;                                    // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount;                                         // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Description;                                       // 0x0038(0x0018)(Edit, NativeAccessSpecifierPublic)
	bool                                          bIsMajorReward;                                    // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortLoginReward) == 0x000008, "Wrong alignment on FFortLoginReward");
static_assert(sizeof(FFortLoginReward) == 0x000058, "Wrong size on FFortLoginReward");
static_assert(offsetof(FFortLoginReward, ItemDefinition) == 0x000008, "Member 'FFortLoginReward::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FFortLoginReward, ItemCount) == 0x000030, "Member 'FFortLoginReward::ItemCount' has a wrong offset!");
static_assert(offsetof(FFortLoginReward, Description) == 0x000038, "Member 'FFortLoginReward::Description' has a wrong offset!");
static_assert(offsetof(FFortLoginReward, bIsMajorReward) == 0x000050, "Member 'FFortLoginReward::bIsMajorReward' has a wrong offset!");

// ScriptStruct FortniteGame.FortAthenaGamepadAimAssistSettings
// 0x00B0 (0x00B0 - 0x0000)
struct FFortAthenaGamepadAimAssistSettings final
{
public:
	class UCurveFloat*                            TargetWeightCurve;                                 // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetWeightScale;                                 // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetDBNOWeightScale;                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            PullStrengthYawCurve;                              // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            PullStrengthPitchCurve;                            // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            PullStrengthScalarForFOVCurve;                     // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PullMaxRate;                                       // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            SlowStrengthYawCurve;                              // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SlowStrengthPitchCurve;                            // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SlowStrengthScalarForFOVCurve;                     // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlowDecayTime;                                     // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortAbilityTargetSelection            TargetSelection;                                   // 0x0050(0x0060)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAthenaGamepadAimAssistSettings) == 0x000008, "Wrong alignment on FFortAthenaGamepadAimAssistSettings");
static_assert(sizeof(FFortAthenaGamepadAimAssistSettings) == 0x0000B0, "Wrong size on FFortAthenaGamepadAimAssistSettings");
static_assert(offsetof(FFortAthenaGamepadAimAssistSettings, TargetWeightCurve) == 0x000000, "Member 'FFortAthenaGamepadAimAssistSettings::TargetWeightCurve' has a wrong offset!");
static_assert(offsetof(FFortAthenaGamepadAimAssistSettings, TargetWeightScale) == 0x000008, "Member 'FFortAthenaGamepadAimAssistSettings::TargetWeightScale' has a wrong offset!");
static_assert(offsetof(FFortAthenaGamepadAimAssistSettings, TargetDBNOWeightScale) == 0x00000C, "Member 'FFortAthenaGamepadAimAssistSettings::TargetDBNOWeightScale' has a wrong offset!");
static_assert(offsetof(FFortAthenaGamepadAimAssistSettings, PullStrengthYawCurve) == 0x000010, "Member 'FFortAthenaGamepadAimAssistSettings::PullStrengthYawCurve' has a wrong offset!");
static_assert(offsetof(FFortAthenaGamepadAimAssistSettings, PullStrengthPitchCurve) == 0x000018, "Member 'FFortAthenaGamepadAimAssistSettings::PullStrengthPitchCurve' has a wrong offset!");
static_assert(offsetof(FFortAthenaGamepadAimAssistSettings, PullStrengthScalarForFOVCurve) == 0x000020, "Member 'FFortAthenaGamepadAimAssistSettings::PullStrengthScalarForFOVCurve' has a wrong offset!");
static_assert(offsetof(FFortAthenaGamepadAimAssistSettings, PullMaxRate) == 0x000028, "Member 'FFortAthenaGamepadAimAssistSettings::PullMaxRate' has a wrong offset!");
static_assert(offsetof(FFortAthenaGamepadAimAssistSettings, SlowStrengthYawCurve) == 0x000030, "Member 'FFortAthenaGamepadAimAssistSettings::SlowStrengthYawCurve' has a wrong offset!");
static_assert(offsetof(FFortAthenaGamepadAimAssistSettings, SlowStrengthPitchCurve) == 0x000038, "Member 'FFortAthenaGamepadAimAssistSettings::SlowStrengthPitchCurve' has a wrong offset!");
static_assert(offsetof(FFortAthenaGamepadAimAssistSettings, SlowStrengthScalarForFOVCurve) == 0x000040, "Member 'FFortAthenaGamepadAimAssistSettings::SlowStrengthScalarForFOVCurve' has a wrong offset!");
static_assert(offsetof(FFortAthenaGamepadAimAssistSettings, SlowDecayTime) == 0x000048, "Member 'FFortAthenaGamepadAimAssistSettings::SlowDecayTime' has a wrong offset!");
static_assert(offsetof(FFortAthenaGamepadAimAssistSettings, TargetSelection) == 0x000050, "Member 'FFortAthenaGamepadAimAssistSettings::TargetSelection' has a wrong offset!");

// ScriptStruct FortniteGame.AIDirectorEventData
// 0x0030 (0x0030 - 0x0000)
struct FAIDirectorEventData final
{
public:
	EFortAIDirectorEvent                          Event;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCurveTableRowHandle                   DataMax;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   CoolDownRate;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	EFortAIDirectorEventContribution              ContributionType;                                  // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAIDirectorEventParticipant               OwnerParticipantType;                              // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIDirectorEventData) == 0x000008, "Wrong alignment on FAIDirectorEventData");
static_assert(sizeof(FAIDirectorEventData) == 0x000030, "Wrong size on FAIDirectorEventData");
static_assert(offsetof(FAIDirectorEventData, Event) == 0x000000, "Member 'FAIDirectorEventData::Event' has a wrong offset!");
static_assert(offsetof(FAIDirectorEventData, DataMax) == 0x000008, "Member 'FAIDirectorEventData::DataMax' has a wrong offset!");
static_assert(offsetof(FAIDirectorEventData, CoolDownRate) == 0x000018, "Member 'FAIDirectorEventData::CoolDownRate' has a wrong offset!");
static_assert(offsetof(FAIDirectorEventData, ContributionType) == 0x000028, "Member 'FAIDirectorEventData::ContributionType' has a wrong offset!");
static_assert(offsetof(FAIDirectorEventData, OwnerParticipantType) == 0x000029, "Member 'FAIDirectorEventData::OwnerParticipantType' has a wrong offset!");

// ScriptStruct FortniteGame.FortKeepAmmoStash
// 0x0028 (0x0030 - 0x0008)
struct FFortKeepAmmoStash final : public FTableRowBase
{
public:
	int32                                         Max1;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cooldown1;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max2;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cooldown2;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max3;                                              // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cooldown3;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max4;                                              // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cooldown4;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PickupTier;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortKeepAmmoStash) == 0x000008, "Wrong alignment on FFortKeepAmmoStash");
static_assert(sizeof(FFortKeepAmmoStash) == 0x000030, "Wrong size on FFortKeepAmmoStash");
static_assert(offsetof(FFortKeepAmmoStash, Max1) == 0x000008, "Member 'FFortKeepAmmoStash::Max1' has a wrong offset!");
static_assert(offsetof(FFortKeepAmmoStash, Cooldown1) == 0x00000C, "Member 'FFortKeepAmmoStash::Cooldown1' has a wrong offset!");
static_assert(offsetof(FFortKeepAmmoStash, Max2) == 0x000010, "Member 'FFortKeepAmmoStash::Max2' has a wrong offset!");
static_assert(offsetof(FFortKeepAmmoStash, Cooldown2) == 0x000014, "Member 'FFortKeepAmmoStash::Cooldown2' has a wrong offset!");
static_assert(offsetof(FFortKeepAmmoStash, Max3) == 0x000018, "Member 'FFortKeepAmmoStash::Max3' has a wrong offset!");
static_assert(offsetof(FFortKeepAmmoStash, Cooldown3) == 0x00001C, "Member 'FFortKeepAmmoStash::Cooldown3' has a wrong offset!");
static_assert(offsetof(FFortKeepAmmoStash, Max4) == 0x000020, "Member 'FFortKeepAmmoStash::Max4' has a wrong offset!");
static_assert(offsetof(FFortKeepAmmoStash, Cooldown4) == 0x000024, "Member 'FFortKeepAmmoStash::Cooldown4' has a wrong offset!");
static_assert(offsetof(FFortKeepAmmoStash, PickupTier) == 0x000028, "Member 'FFortKeepAmmoStash::PickupTier' has a wrong offset!");

// ScriptStruct FortniteGame.FortGoalActorEncounterDataManagerPair
// 0x0010 (0x0010 - 0x0000)
struct FFortGoalActorEncounterDataManagerPair final
{
public:
	class AActor*                                 GoalActor;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortAIDirectorDataManager*             EncounterDataManager;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGoalActorEncounterDataManagerPair) == 0x000008, "Wrong alignment on FFortGoalActorEncounterDataManagerPair");
static_assert(sizeof(FFortGoalActorEncounterDataManagerPair) == 0x000010, "Wrong size on FFortGoalActorEncounterDataManagerPair");
static_assert(offsetof(FFortGoalActorEncounterDataManagerPair, GoalActor) == 0x000000, "Member 'FFortGoalActorEncounterDataManagerPair::GoalActor' has a wrong offset!");
static_assert(offsetof(FFortGoalActorEncounterDataManagerPair, EncounterDataManager) == 0x000008, "Member 'FFortGoalActorEncounterDataManagerPair::EncounterDataManager' has a wrong offset!");

// ScriptStruct FortniteGame.McpLeaderboardResultRow
// 0x0030 (0x0030 - 0x0000)
struct FMcpLeaderboardResultRow final
{
public:
	struct FUniqueNetIdRepl                       PlayerUniqueNetId;                                 // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMcpLeaderboardResultRow) == 0x000008, "Wrong alignment on FMcpLeaderboardResultRow");
static_assert(sizeof(FMcpLeaderboardResultRow) == 0x000030, "Wrong size on FMcpLeaderboardResultRow");
static_assert(offsetof(FMcpLeaderboardResultRow, PlayerUniqueNetId) == 0x000000, "Member 'FMcpLeaderboardResultRow::PlayerUniqueNetId' has a wrong offset!");
static_assert(offsetof(FMcpLeaderboardResultRow, Rank) == 0x000028, "Member 'FMcpLeaderboardResultRow::Rank' has a wrong offset!");
static_assert(offsetof(FMcpLeaderboardResultRow, Value) == 0x00002C, "Member 'FMcpLeaderboardResultRow::Value' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIEncounterWaveProgressEstimation
// 0x001C (0x001C - 0x0000)
struct FFortAIEncounterWaveProgressEstimation final
{
public:
	float                                         SectionProgressEstimate;                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SectionStartTime;                                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastWaveProgressUpdateTime;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PeakAndFadeWavePercentage;                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAdjustmentPerSecond;                            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAIWaveProgressSection                    CurrentSection;                                    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumberOfWaveSegments;                              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIEncounterWaveProgressEstimation) == 0x000004, "Wrong alignment on FFortAIEncounterWaveProgressEstimation");
static_assert(sizeof(FFortAIEncounterWaveProgressEstimation) == 0x00001C, "Wrong size on FFortAIEncounterWaveProgressEstimation");
static_assert(offsetof(FFortAIEncounterWaveProgressEstimation, SectionProgressEstimate) == 0x000000, "Member 'FFortAIEncounterWaveProgressEstimation::SectionProgressEstimate' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterWaveProgressEstimation, SectionStartTime) == 0x000004, "Member 'FFortAIEncounterWaveProgressEstimation::SectionStartTime' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterWaveProgressEstimation, LastWaveProgressUpdateTime) == 0x000008, "Member 'FFortAIEncounterWaveProgressEstimation::LastWaveProgressUpdateTime' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterWaveProgressEstimation, PeakAndFadeWavePercentage) == 0x00000C, "Member 'FFortAIEncounterWaveProgressEstimation::PeakAndFadeWavePercentage' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterWaveProgressEstimation, MaxAdjustmentPerSecond) == 0x000010, "Member 'FFortAIEncounterWaveProgressEstimation::MaxAdjustmentPerSecond' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterWaveProgressEstimation, CurrentSection) == 0x000014, "Member 'FFortAIEncounterWaveProgressEstimation::CurrentSection' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterWaveProgressEstimation, NumberOfWaveSegments) == 0x000018, "Member 'FFortAIEncounterWaveProgressEstimation::NumberOfWaveSegments' has a wrong offset!");

// ScriptStruct FortniteGame.FortSpawnAIRequest
// 0x0050 (0x0050 - 0x0000)
struct FFortSpawnAIRequest final
{
public:
	struct FGuid                                  SpawnGroupInstanceGuid;                            // 0x0000(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnemyIndex;                                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation;                                     // 0x0014(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnRotation;                                     // 0x0020(0x000C)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 SpawnPoint;                                        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortAbilitySet*>                AbilitySetsToGrantOnSpawn;                         // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCollisionWhenSpawning;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortSpawnAIRequest) == 0x000008, "Wrong alignment on FFortSpawnAIRequest");
static_assert(sizeof(FFortSpawnAIRequest) == 0x000050, "Wrong size on FFortSpawnAIRequest");
static_assert(offsetof(FFortSpawnAIRequest, SpawnGroupInstanceGuid) == 0x000000, "Member 'FFortSpawnAIRequest::SpawnGroupInstanceGuid' has a wrong offset!");
static_assert(offsetof(FFortSpawnAIRequest, EnemyIndex) == 0x000010, "Member 'FFortSpawnAIRequest::EnemyIndex' has a wrong offset!");
static_assert(offsetof(FFortSpawnAIRequest, SpawnLocation) == 0x000014, "Member 'FFortSpawnAIRequest::SpawnLocation' has a wrong offset!");
static_assert(offsetof(FFortSpawnAIRequest, SpawnRotation) == 0x000020, "Member 'FFortSpawnAIRequest::SpawnRotation' has a wrong offset!");
static_assert(offsetof(FFortSpawnAIRequest, SpawnPoint) == 0x000030, "Member 'FFortSpawnAIRequest::SpawnPoint' has a wrong offset!");
static_assert(offsetof(FFortSpawnAIRequest, AbilitySetsToGrantOnSpawn) == 0x000038, "Member 'FFortSpawnAIRequest::AbilitySetsToGrantOnSpawn' has a wrong offset!");
static_assert(offsetof(FFortSpawnAIRequest, bIgnoreCollisionWhenSpawning) == 0x000048, "Member 'FFortSpawnAIRequest::bIgnoreCollisionWhenSpawning' has a wrong offset!");

// ScriptStruct FortniteGame.FortAISpawnerData
// 0x0060 (0x0060 - 0x0000)
struct FFortAISpawnerData final
{
public:
	struct FGuid                                  SpawnGroupInstanceGuid;                            // 0x0000(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortSpawnAIRequest                    ReservedSpawnRequest;                              // 0x0010(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAISpawnerData) == 0x000008, "Wrong alignment on FFortAISpawnerData");
static_assert(sizeof(FFortAISpawnerData) == 0x000060, "Wrong size on FFortAISpawnerData");
static_assert(offsetof(FFortAISpawnerData, SpawnGroupInstanceGuid) == 0x000000, "Member 'FFortAISpawnerData::SpawnGroupInstanceGuid' has a wrong offset!");
static_assert(offsetof(FFortAISpawnerData, ReservedSpawnRequest) == 0x000010, "Member 'FFortAISpawnerData::ReservedSpawnRequest' has a wrong offset!");

// ScriptStruct FortniteGame.SpawnGroupInstanceInfo
// 0x0130 (0x0130 - 0x0000)
struct FSpawnGroupInstanceInfo final
{
public:
	class UFortAISpawnGroup*                      SpawnGroup;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumActiveAlive;                                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalGroupCost;                                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnPointsUsed;                                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumEngaged;                                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReadyToSpawn;                                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFinishedSpawning;                                 // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  GroupGuid;                                         // 0x001C(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnemySpawnDataIndex;                               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeSelected;                                      // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextEnemyToSpawnIndex;                             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  UpgradeTags;                                       // 0x0038(0x0020)(NativeAccessSpecifierPublic)
	struct FFortAISpawnGroupUpgradeUIData         UpgradeUIData;                                     // 0x0058(0x00A8)(NativeAccessSpecifierPublic)
	TArray<struct FFortAIPawnUpgradeData>         PawnUpgrades;                                      // 0x0100(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UFortGameplayModifierItemDefinition*> ModifiersForAllPawns;                              // 0x0110(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AFortAIPawn*>                    PawnList;                                          // 0x0120(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawnGroupInstanceInfo) == 0x000008, "Wrong alignment on FSpawnGroupInstanceInfo");
static_assert(sizeof(FSpawnGroupInstanceInfo) == 0x000130, "Wrong size on FSpawnGroupInstanceInfo");
static_assert(offsetof(FSpawnGroupInstanceInfo, SpawnGroup) == 0x000000, "Member 'FSpawnGroupInstanceInfo::SpawnGroup' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, NumActiveAlive) == 0x000008, "Member 'FSpawnGroupInstanceInfo::NumActiveAlive' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, TotalGroupCost) == 0x00000C, "Member 'FSpawnGroupInstanceInfo::TotalGroupCost' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, SpawnPointsUsed) == 0x000010, "Member 'FSpawnGroupInstanceInfo::SpawnPointsUsed' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, NumEngaged) == 0x000014, "Member 'FSpawnGroupInstanceInfo::NumEngaged' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, bReadyToSpawn) == 0x000018, "Member 'FSpawnGroupInstanceInfo::bReadyToSpawn' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, bFinishedSpawning) == 0x000019, "Member 'FSpawnGroupInstanceInfo::bFinishedSpawning' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, GroupGuid) == 0x00001C, "Member 'FSpawnGroupInstanceInfo::GroupGuid' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, EnemySpawnDataIndex) == 0x00002C, "Member 'FSpawnGroupInstanceInfo::EnemySpawnDataIndex' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, TimeSelected) == 0x000030, "Member 'FSpawnGroupInstanceInfo::TimeSelected' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, NextEnemyToSpawnIndex) == 0x000034, "Member 'FSpawnGroupInstanceInfo::NextEnemyToSpawnIndex' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, UpgradeTags) == 0x000038, "Member 'FSpawnGroupInstanceInfo::UpgradeTags' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, UpgradeUIData) == 0x000058, "Member 'FSpawnGroupInstanceInfo::UpgradeUIData' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, PawnUpgrades) == 0x000100, "Member 'FSpawnGroupInstanceInfo::PawnUpgrades' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, ModifiersForAllPawns) == 0x000110, "Member 'FSpawnGroupInstanceInfo::ModifiersForAllPawns' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, PawnList) == 0x000120, "Member 'FSpawnGroupInstanceInfo::PawnList' has a wrong offset!");

// ScriptStruct FortniteGame.FortIntensityCurveSequenceInstanceInfo
// 0x000C (0x0010 - 0x0004)
struct FFortIntensityCurveSequenceInstanceInfo final : public FFortCurveSequenceInstanceInfo
{
public:
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortIntensityCurveSequence*            IntensityCurveSequence;                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortIntensityCurveSequenceInstanceInfo) == 0x000008, "Wrong alignment on FFortIntensityCurveSequenceInstanceInfo");
static_assert(sizeof(FFortIntensityCurveSequenceInstanceInfo) == 0x000010, "Wrong size on FFortIntensityCurveSequenceInstanceInfo");
static_assert(offsetof(FFortIntensityCurveSequenceInstanceInfo, IntensityCurveSequence) == 0x000008, "Member 'FFortIntensityCurveSequenceInstanceInfo::IntensityCurveSequence' has a wrong offset!");

// ScriptStruct FortniteGame.FortSpawnPointsPercentageCurveSequenceInstanceInfo
// 0x000C (0x0010 - 0x0004)
struct FFortSpawnPointsPercentageCurveSequenceInstanceInfo final : public FFortCurveSequenceInstanceInfo
{
public:
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortSpawnPointsPercentageCurveSequence* SpawnPointsPercentageCurveSequence;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortSpawnPointsPercentageCurveSequenceInstanceInfo) == 0x000008, "Wrong alignment on FFortSpawnPointsPercentageCurveSequenceInstanceInfo");
static_assert(sizeof(FFortSpawnPointsPercentageCurveSequenceInstanceInfo) == 0x000010, "Wrong size on FFortSpawnPointsPercentageCurveSequenceInstanceInfo");
static_assert(offsetof(FFortSpawnPointsPercentageCurveSequenceInstanceInfo, SpawnPointsPercentageCurveSequence) == 0x000008, "Member 'FFortSpawnPointsPercentageCurveSequenceInstanceInfo::SpawnPointsPercentageCurveSequence' has a wrong offset!");

// ScriptStruct FortniteGame.FortReplicatedStatMapping
// 0x0020 (0x0020 - 0x0000)
struct FFortReplicatedStatMapping final
{
public:
	EStatCategory                                 StatCategory;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortReplicatedStatMapping) == 0x000008, "Wrong alignment on FFortReplicatedStatMapping");
static_assert(sizeof(FFortReplicatedStatMapping) == 0x000020, "Wrong size on FFortReplicatedStatMapping");
static_assert(offsetof(FFortReplicatedStatMapping, StatCategory) == 0x000000, "Member 'FFortReplicatedStatMapping::StatCategory' has a wrong offset!");
static_assert(offsetof(FFortReplicatedStatMapping, DisplayName) == 0x000008, "Member 'FFortReplicatedStatMapping::DisplayName' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionPlacementItemLookupData
// 0x0078 (0x0078 - 0x0000)
struct FFortMissionPlacementItemLookupData final
{
public:
	struct FGameplayTagContainer                  ItemIdentifyingTags;                               // 0x0000(0x0020)(Transient, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TagsAddedToPlacementActors;                        // 0x0020(0x0020)(Transient, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorToPlace;                                      // 0x0040(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ActorToUseForSpawnLocation;                        // 0x0048(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SpawnedActor;                                      // 0x0050(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation;                                     // 0x0058(0x000C)(Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnRotation;                                     // 0x0064(0x000C)(Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bDontCreateSpawnRiftsNearby : 1;                   // 0x0070(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMissionPlacementItemLookupData) == 0x000008, "Wrong alignment on FFortMissionPlacementItemLookupData");
static_assert(sizeof(FFortMissionPlacementItemLookupData) == 0x000078, "Wrong size on FFortMissionPlacementItemLookupData");
static_assert(offsetof(FFortMissionPlacementItemLookupData, ItemIdentifyingTags) == 0x000000, "Member 'FFortMissionPlacementItemLookupData::ItemIdentifyingTags' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementItemLookupData, TagsAddedToPlacementActors) == 0x000020, "Member 'FFortMissionPlacementItemLookupData::TagsAddedToPlacementActors' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementItemLookupData, ActorToPlace) == 0x000040, "Member 'FFortMissionPlacementItemLookupData::ActorToPlace' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementItemLookupData, ActorToUseForSpawnLocation) == 0x000048, "Member 'FFortMissionPlacementItemLookupData::ActorToUseForSpawnLocation' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementItemLookupData, SpawnedActor) == 0x000050, "Member 'FFortMissionPlacementItemLookupData::SpawnedActor' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementItemLookupData, SpawnLocation) == 0x000058, "Member 'FFortMissionPlacementItemLookupData::SpawnLocation' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementItemLookupData, SpawnRotation) == 0x000064, "Member 'FFortMissionPlacementItemLookupData::SpawnRotation' has a wrong offset!");

// ScriptStruct FortniteGame.CurrentIntensityAnalyticsBucket
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FCurrentIntensityAnalyticsBucket final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCurrentIntensityAnalyticsBucket) == 0x000008, "Wrong alignment on FCurrentIntensityAnalyticsBucket");
static_assert(sizeof(FCurrentIntensityAnalyticsBucket) == 0x000038, "Wrong size on FCurrentIntensityAnalyticsBucket");

// ScriptStruct FortniteGame.GeneralChatRoom
// 0x0028 (0x0028 - 0x0000)
struct FGeneralChatRoom final
{
public:
	class FString                                 RoomName;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentMembersCount;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxMembersCount;                                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PublicFacingShardName;                             // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeneralChatRoom) == 0x000008, "Wrong alignment on FGeneralChatRoom");
static_assert(sizeof(FGeneralChatRoom) == 0x000028, "Wrong size on FGeneralChatRoom");
static_assert(offsetof(FGeneralChatRoom, RoomName) == 0x000000, "Member 'FGeneralChatRoom::RoomName' has a wrong offset!");
static_assert(offsetof(FGeneralChatRoom, CurrentMembersCount) == 0x000010, "Member 'FGeneralChatRoom::CurrentMembersCount' has a wrong offset!");
static_assert(offsetof(FGeneralChatRoom, MaxMembersCount) == 0x000014, "Member 'FGeneralChatRoom::MaxMembersCount' has a wrong offset!");
static_assert(offsetof(FGeneralChatRoom, PublicFacingShardName) == 0x000018, "Member 'FGeneralChatRoom::PublicFacingShardName' has a wrong offset!");

// ScriptStruct FortniteGame.FortIntensityCurve
// 0x0038 (0x0040 - 0x0008)
struct FFortIntensityCurve final : public FTableRowBase
{
public:
	class UCurveTable*                            IntensityCurveTable;                               // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   IntensityCurveTableRow;                            // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LowPlayerPerformancePeakIntensityThreshold;        // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NormalPlayerPerformancePeakIntensityThreshold;     // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HighPlayerPerformancePeakIntensityThreshold;       // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxRampTime;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FadeEndIntensityThreshold;                         // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StartIntensityOffsetFloor;                         // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EndIntensityOffsetFloor;                           // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StartIntensityOffsetCeiling;                       // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EndIntensityOffsetCeiling;                         // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortIntensityCurve) == 0x000008, "Wrong alignment on FFortIntensityCurve");
static_assert(sizeof(FFortIntensityCurve) == 0x000040, "Wrong size on FFortIntensityCurve");
static_assert(offsetof(FFortIntensityCurve, IntensityCurveTable) == 0x000008, "Member 'FFortIntensityCurve::IntensityCurveTable' has a wrong offset!");
static_assert(offsetof(FFortIntensityCurve, IntensityCurveTableRow) == 0x000010, "Member 'FFortIntensityCurve::IntensityCurveTableRow' has a wrong offset!");
static_assert(offsetof(FFortIntensityCurve, LowPlayerPerformancePeakIntensityThreshold) == 0x000018, "Member 'FFortIntensityCurve::LowPlayerPerformancePeakIntensityThreshold' has a wrong offset!");
static_assert(offsetof(FFortIntensityCurve, NormalPlayerPerformancePeakIntensityThreshold) == 0x00001C, "Member 'FFortIntensityCurve::NormalPlayerPerformancePeakIntensityThreshold' has a wrong offset!");
static_assert(offsetof(FFortIntensityCurve, HighPlayerPerformancePeakIntensityThreshold) == 0x000020, "Member 'FFortIntensityCurve::HighPlayerPerformancePeakIntensityThreshold' has a wrong offset!");
static_assert(offsetof(FFortIntensityCurve, MaxRampTime) == 0x000024, "Member 'FFortIntensityCurve::MaxRampTime' has a wrong offset!");
static_assert(offsetof(FFortIntensityCurve, FadeEndIntensityThreshold) == 0x000028, "Member 'FFortIntensityCurve::FadeEndIntensityThreshold' has a wrong offset!");
static_assert(offsetof(FFortIntensityCurve, StartIntensityOffsetFloor) == 0x00002C, "Member 'FFortIntensityCurve::StartIntensityOffsetFloor' has a wrong offset!");
static_assert(offsetof(FFortIntensityCurve, EndIntensityOffsetFloor) == 0x000030, "Member 'FFortIntensityCurve::EndIntensityOffsetFloor' has a wrong offset!");
static_assert(offsetof(FFortIntensityCurve, StartIntensityOffsetCeiling) == 0x000034, "Member 'FFortIntensityCurve::StartIntensityOffsetCeiling' has a wrong offset!");
static_assert(offsetof(FFortIntensityCurve, EndIntensityOffsetCeiling) == 0x000038, "Member 'FFortIntensityCurve::EndIntensityOffsetCeiling' has a wrong offset!");

// ScriptStruct FortniteGame.AIEncounterSpawnGroupWeights
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FAIEncounterSpawnGroupWeights final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIEncounterSpawnGroupWeights) == 0x000008, "Wrong alignment on FAIEncounterSpawnGroupWeights");
static_assert(sizeof(FAIEncounterSpawnGroupWeights) == 0x000018, "Wrong size on FAIEncounterSpawnGroupWeights");

// ScriptStruct FortniteGame.SpawnGroupProgression
// 0x0008 (0x0008 - 0x0000)
struct FSpawnGroupProgression final
{
public:
	class UFortAISpawnGroup*                      SpawnGroup;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawnGroupProgression) == 0x000008, "Wrong alignment on FSpawnGroupProgression");
static_assert(sizeof(FSpawnGroupProgression) == 0x000008, "Wrong size on FSpawnGroupProgression");
static_assert(offsetof(FSpawnGroupProgression, SpawnGroup) == 0x000000, "Member 'FSpawnGroupProgression::SpawnGroup' has a wrong offset!");

// ScriptStruct FortniteGame.FortCameraInstanceEntry
// 0x0018 (0x0018 - 0x0000)
struct FFortCameraInstanceEntry final
{
public:
	TSubclassOf<class UFortCameraMode>            CameraClass;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ViewTarget;                                        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortCameraMode*                        Camera;                                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCameraInstanceEntry) == 0x000008, "Wrong alignment on FFortCameraInstanceEntry");
static_assert(sizeof(FFortCameraInstanceEntry) == 0x000018, "Wrong size on FFortCameraInstanceEntry");
static_assert(offsetof(FFortCameraInstanceEntry, CameraClass) == 0x000000, "Member 'FFortCameraInstanceEntry::CameraClass' has a wrong offset!");
static_assert(offsetof(FFortCameraInstanceEntry, ViewTarget) == 0x000008, "Member 'FFortCameraInstanceEntry::ViewTarget' has a wrong offset!");
static_assert(offsetof(FFortCameraInstanceEntry, Camera) == 0x000010, "Member 'FFortCameraInstanceEntry::Camera' has a wrong offset!");

// ScriptStruct FortniteGame.FortNavLinkPattern
// 0x0008 (0x0008 - 0x0000)
struct FFortNavLinkPattern final
{
public:
	int32                                         PatternBits;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WildcardBits;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortNavLinkPattern) == 0x000004, "Wrong alignment on FFortNavLinkPattern");
static_assert(sizeof(FFortNavLinkPattern) == 0x000008, "Wrong size on FFortNavLinkPattern");
static_assert(offsetof(FFortNavLinkPattern, PatternBits) == 0x000000, "Member 'FFortNavLinkPattern::PatternBits' has a wrong offset!");
static_assert(offsetof(FFortNavLinkPattern, WildcardBits) == 0x000004, "Member 'FFortNavLinkPattern::WildcardBits' has a wrong offset!");

// ScriptStruct FortniteGame.FortAlterationSlotStatus
// 0x0010 (0x0010 - 0x0000)
struct FFortAlterationSlotStatus final
{
public:
	class UFortAlterationItemDefinition*          Alteration;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinRequiredLevel;                                  // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAlterationSlotStatus) == 0x000008, "Wrong alignment on FFortAlterationSlotStatus");
static_assert(sizeof(FFortAlterationSlotStatus) == 0x000010, "Wrong size on FFortAlterationSlotStatus");
static_assert(offsetof(FFortAlterationSlotStatus, Alteration) == 0x000000, "Member 'FFortAlterationSlotStatus::Alteration' has a wrong offset!");
static_assert(offsetof(FFortAlterationSlotStatus, MinRequiredLevel) == 0x000008, "Member 'FFortAlterationSlotStatus::MinRequiredLevel' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIGoal
// 0x0010 (0x0028 - 0x0018)
struct FFortAIGoal final : public FFortAIGoalInfo
{
public:
	TArray<class AFortAIController*>              ControllersAssignedToGoal;                         // 0x0018(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortAIGoal) == 0x000008, "Wrong alignment on FFortAIGoal");
static_assert(sizeof(FFortAIGoal) == 0x000028, "Wrong size on FFortAIGoal");
static_assert(offsetof(FFortAIGoal, ControllersAssignedToGoal) == 0x000018, "Member 'FFortAIGoal::ControllersAssignedToGoal' has a wrong offset!");

// ScriptStruct FortniteGame.AIDiscouragedGoalTimer
// 0x0028 (0x0028 - 0x0000)
struct FAIDiscouragedGoalTimer final
{
public:
	struct FFortAIGoalInfo                        DiscouragedGoalInfo;                               // 0x0000(0x0018)(NoDestructor, NativeAccessSpecifierPublic)
	double                                        ExpirationTime;                                    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        NumberOfTimesMarkedForDiscouragement;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIDiscouragedGoalTimer) == 0x000008, "Wrong alignment on FAIDiscouragedGoalTimer");
static_assert(sizeof(FAIDiscouragedGoalTimer) == 0x000028, "Wrong size on FAIDiscouragedGoalTimer");
static_assert(offsetof(FAIDiscouragedGoalTimer, DiscouragedGoalInfo) == 0x000000, "Member 'FAIDiscouragedGoalTimer::DiscouragedGoalInfo' has a wrong offset!");
static_assert(offsetof(FAIDiscouragedGoalTimer, ExpirationTime) == 0x000018, "Member 'FAIDiscouragedGoalTimer::ExpirationTime' has a wrong offset!");
static_assert(offsetof(FAIDiscouragedGoalTimer, NumberOfTimesMarkedForDiscouragement) == 0x000020, "Member 'FAIDiscouragedGoalTimer::NumberOfTimesMarkedForDiscouragement' has a wrong offset!");

// ScriptStruct FortniteGame.PawnGoalSelectionTableEntry
// 0x0070 (0x0070 - 0x0000)
struct FPawnGoalSelectionTableEntry final
{
public:
	struct FGameplayTagContainer                  RequiredGameplayTags;                              // 0x0000(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FPawnGoalSelectionCriteria             PawnGoalSelectionCriteria;                         // 0x0020(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPawnGoalSelectionTableEntry) == 0x000008, "Wrong alignment on FPawnGoalSelectionTableEntry");
static_assert(sizeof(FPawnGoalSelectionTableEntry) == 0x000070, "Wrong size on FPawnGoalSelectionTableEntry");
static_assert(offsetof(FPawnGoalSelectionTableEntry, RequiredGameplayTags) == 0x000000, "Member 'FPawnGoalSelectionTableEntry::RequiredGameplayTags' has a wrong offset!");
static_assert(offsetof(FPawnGoalSelectionTableEntry, PawnGoalSelectionCriteria) == 0x000020, "Member 'FPawnGoalSelectionTableEntry::PawnGoalSelectionCriteria' has a wrong offset!");

// ScriptStruct FortniteGame.FortOutpostFabricatorInfo
// 0x0018 (0x0018 - 0x0000)
struct FFortOutpostFabricatorInfo final
{
public:
	class FString                                 DisintegrationStartTime;                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuantumGooCompleted;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuantumGooStillToProcess;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortOutpostFabricatorInfo) == 0x000008, "Wrong alignment on FFortOutpostFabricatorInfo");
static_assert(sizeof(FFortOutpostFabricatorInfo) == 0x000018, "Wrong size on FFortOutpostFabricatorInfo");
static_assert(offsetof(FFortOutpostFabricatorInfo, DisintegrationStartTime) == 0x000000, "Member 'FFortOutpostFabricatorInfo::DisintegrationStartTime' has a wrong offset!");
static_assert(offsetof(FFortOutpostFabricatorInfo, QuantumGooCompleted) == 0x000010, "Member 'FFortOutpostFabricatorInfo::QuantumGooCompleted' has a wrong offset!");
static_assert(offsetof(FFortOutpostFabricatorInfo, QuantumGooStillToProcess) == 0x000014, "Member 'FFortOutpostFabricatorInfo::QuantumGooStillToProcess' has a wrong offset!");

// ScriptStruct FortniteGame.EncounterGoalSelectionTableEntry
// 0x0028 (0x0028 - 0x0000)
struct FEncounterGoalSelectionTableEntry final
{
public:
	struct FGameplayTagContainer                  RequiredGameplayTags;                              // 0x0000(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FGoalSelectionCriteria                 GoalSelectionCriteria;                             // 0x0020(0x0008)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterGoalSelectionTableEntry) == 0x000008, "Wrong alignment on FEncounterGoalSelectionTableEntry");
static_assert(sizeof(FEncounterGoalSelectionTableEntry) == 0x000028, "Wrong size on FEncounterGoalSelectionTableEntry");
static_assert(offsetof(FEncounterGoalSelectionTableEntry, RequiredGameplayTags) == 0x000000, "Member 'FEncounterGoalSelectionTableEntry::RequiredGameplayTags' has a wrong offset!");
static_assert(offsetof(FEncounterGoalSelectionTableEntry, GoalSelectionCriteria) == 0x000020, "Member 'FEncounterGoalSelectionTableEntry::GoalSelectionCriteria' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionAlertCategoryData
// 0x0030 (0x0038 - 0x0008)
struct FFortMissionAlertCategoryData final : public FTableRowBase
{
public:
	EFortMissionAlertCategory                     Category;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Priority;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quota;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MissionAlertRepeatable;                            // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CategoryTagsContainer;                             // 0x0018(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionAlertCategoryData) == 0x000008, "Wrong alignment on FFortMissionAlertCategoryData");
static_assert(sizeof(FFortMissionAlertCategoryData) == 0x000038, "Wrong size on FFortMissionAlertCategoryData");
static_assert(offsetof(FFortMissionAlertCategoryData, Category) == 0x000008, "Member 'FFortMissionAlertCategoryData::Category' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertCategoryData, Priority) == 0x00000C, "Member 'FFortMissionAlertCategoryData::Priority' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertCategoryData, Quota) == 0x000010, "Member 'FFortMissionAlertCategoryData::Quota' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertCategoryData, MissionAlertRepeatable) == 0x000014, "Member 'FFortMissionAlertCategoryData::MissionAlertRepeatable' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertCategoryData, CategoryTagsContainer) == 0x000018, "Member 'FFortMissionAlertCategoryData::CategoryTagsContainer' has a wrong offset!");

// ScriptStruct FortniteGame.FortTooltipDisplayStatsCategory
// 0x0028 (0x0028 - 0x0000)
struct FFortTooltipDisplayStatsCategory final
{
public:
	class FText                                   CategoryName;                                      // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFortTooltipDisplayStatInfo>    TooltipStats;                                      // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTooltipDisplayStatsCategory) == 0x000008, "Wrong alignment on FFortTooltipDisplayStatsCategory");
static_assert(sizeof(FFortTooltipDisplayStatsCategory) == 0x000028, "Wrong size on FFortTooltipDisplayStatsCategory");
static_assert(offsetof(FFortTooltipDisplayStatsCategory, CategoryName) == 0x000000, "Member 'FFortTooltipDisplayStatsCategory::CategoryName' has a wrong offset!");
static_assert(offsetof(FFortTooltipDisplayStatsCategory, TooltipStats) == 0x000018, "Member 'FFortTooltipDisplayStatsCategory::TooltipStats' has a wrong offset!");

// ScriptStruct FortniteGame.AutoAcquireSlot
// 0x0010 (0x0020 - 0x0010)
struct FAutoAcquireSlot final : public FAIHotSpotSlotInfo
{
public:
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAutoAcquireSlot) == 0x000008, "Wrong alignment on FAutoAcquireSlot");
static_assert(sizeof(FAutoAcquireSlot) == 0x000020, "Wrong size on FAutoAcquireSlot");

// ScriptStruct FortniteGame.FortOutpostPOSTInfo
// 0x0010 (0x0010 - 0x0000)
struct FFortOutpostPOSTInfo final
{
public:
	TArray<struct FFortDepositedResources>        DepositedPostItems;                                // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortOutpostPOSTInfo) == 0x000008, "Wrong alignment on FFortOutpostPOSTInfo");
static_assert(sizeof(FFortOutpostPOSTInfo) == 0x000010, "Wrong size on FFortOutpostPOSTInfo");
static_assert(offsetof(FFortOutpostPOSTInfo, DepositedPostItems) == 0x000000, "Member 'FFortOutpostPOSTInfo::DepositedPostItems' has a wrong offset!");

// ScriptStruct FortniteGame.DamagerInfoAnalytics
// 0x0018 (0x0018 - 0x0000)
struct FDamagerInfoAnalytics final
{
public:
	class FString                                 DamageCauser;                                      // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageAmount;                                      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDamagerInfoAnalytics) == 0x000008, "Wrong alignment on FDamagerInfoAnalytics");
static_assert(sizeof(FDamagerInfoAnalytics) == 0x000018, "Wrong size on FDamagerInfoAnalytics");
static_assert(offsetof(FDamagerInfoAnalytics, DamageCauser) == 0x000000, "Member 'FDamagerInfoAnalytics::DamageCauser' has a wrong offset!");
static_assert(offsetof(FDamagerInfoAnalytics, DamageAmount) == 0x000010, "Member 'FDamagerInfoAnalytics::DamageAmount' has a wrong offset!");

// ScriptStruct FortniteGame.FortPawnStats
// 0x0088 (0x0090 - 0x0008)
struct FFortPawnStats : public FTableRowBase
{
public:
	float                                         MaximumHealth;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpeedWalk;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpeedRun;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpeedSprint;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpeedCrouchedRun;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpeedCrouchedSprint;                               // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpeedBackwardsMultiplier;                          // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpeedDBNO;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AccelerationStrafeMultiplierSprint;                // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinAnalogWalkSpeed;                                // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         GroundFriction;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BrakingDecelerationWalking;                        // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BrakingDecelerationFalling;                        // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BrakingFrictionFactor;                             // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxAcceleration;                                   // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         JumpZVelocity;                                     // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveTable*                            FallingDamageTable;                                // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   FallingDamageTableRow;                             // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HealthRegenRate;                                   // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HealthRegenDelay;                                  // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HealthRegenThreshold;                              // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxShield;                                         // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ShieldRegenRate;                                   // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ShieldRegenDelay;                                  // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ShieldRegenThreshold;                              // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxControlResistance;                              // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ControlResistanceRegenRate;                        // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ControlResistanceRegenDelay;                       // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ControlResistanceRegenThreshold;                   // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         KnockbackMultiplier;                               // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         KnockbackThreshold;                                // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowChainStun;                                   // 0x008C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EFortControlRecoveryBehavior                  ControlRecoveryBehavior;                           // 0x008D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_8E[0x2];                                       // 0x008E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPawnStats) == 0x000008, "Wrong alignment on FFortPawnStats");
static_assert(sizeof(FFortPawnStats) == 0x000090, "Wrong size on FFortPawnStats");
static_assert(offsetof(FFortPawnStats, MaximumHealth) == 0x000008, "Member 'FFortPawnStats::MaximumHealth' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, SpeedWalk) == 0x00000C, "Member 'FFortPawnStats::SpeedWalk' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, SpeedRun) == 0x000010, "Member 'FFortPawnStats::SpeedRun' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, SpeedSprint) == 0x000014, "Member 'FFortPawnStats::SpeedSprint' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, SpeedCrouchedRun) == 0x000018, "Member 'FFortPawnStats::SpeedCrouchedRun' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, SpeedCrouchedSprint) == 0x00001C, "Member 'FFortPawnStats::SpeedCrouchedSprint' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, SpeedBackwardsMultiplier) == 0x000020, "Member 'FFortPawnStats::SpeedBackwardsMultiplier' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, SpeedDBNO) == 0x000024, "Member 'FFortPawnStats::SpeedDBNO' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, AccelerationStrafeMultiplierSprint) == 0x000028, "Member 'FFortPawnStats::AccelerationStrafeMultiplierSprint' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, MinAnalogWalkSpeed) == 0x00002C, "Member 'FFortPawnStats::MinAnalogWalkSpeed' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, GroundFriction) == 0x000030, "Member 'FFortPawnStats::GroundFriction' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, BrakingDecelerationWalking) == 0x000034, "Member 'FFortPawnStats::BrakingDecelerationWalking' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, BrakingDecelerationFalling) == 0x000038, "Member 'FFortPawnStats::BrakingDecelerationFalling' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, BrakingFrictionFactor) == 0x00003C, "Member 'FFortPawnStats::BrakingFrictionFactor' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, MaxAcceleration) == 0x000040, "Member 'FFortPawnStats::MaxAcceleration' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, JumpZVelocity) == 0x000044, "Member 'FFortPawnStats::JumpZVelocity' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, FallingDamageTable) == 0x000048, "Member 'FFortPawnStats::FallingDamageTable' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, FallingDamageTableRow) == 0x000050, "Member 'FFortPawnStats::FallingDamageTableRow' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, HealthRegenRate) == 0x000058, "Member 'FFortPawnStats::HealthRegenRate' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, HealthRegenDelay) == 0x00005C, "Member 'FFortPawnStats::HealthRegenDelay' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, HealthRegenThreshold) == 0x000060, "Member 'FFortPawnStats::HealthRegenThreshold' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, MaxShield) == 0x000064, "Member 'FFortPawnStats::MaxShield' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, ShieldRegenRate) == 0x000068, "Member 'FFortPawnStats::ShieldRegenRate' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, ShieldRegenDelay) == 0x00006C, "Member 'FFortPawnStats::ShieldRegenDelay' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, ShieldRegenThreshold) == 0x000070, "Member 'FFortPawnStats::ShieldRegenThreshold' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, MaxControlResistance) == 0x000074, "Member 'FFortPawnStats::MaxControlResistance' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, ControlResistanceRegenRate) == 0x000078, "Member 'FFortPawnStats::ControlResistanceRegenRate' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, ControlResistanceRegenDelay) == 0x00007C, "Member 'FFortPawnStats::ControlResistanceRegenDelay' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, ControlResistanceRegenThreshold) == 0x000080, "Member 'FFortPawnStats::ControlResistanceRegenThreshold' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, KnockbackMultiplier) == 0x000084, "Member 'FFortPawnStats::KnockbackMultiplier' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, KnockbackThreshold) == 0x000088, "Member 'FFortPawnStats::KnockbackThreshold' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, bAllowChainStun) == 0x00008C, "Member 'FFortPawnStats::bAllowChainStun' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, ControlRecoveryBehavior) == 0x00008D, "Member 'FFortPawnStats::ControlRecoveryBehavior' has a wrong offset!");

// ScriptStruct FortniteGame.FortSpokenLine
// 0x0030 (0x0030 - 0x0000)
struct FFortSpokenLine final
{
public:
	class USoundBase*                             Audio;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           AnimMontage;                                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AnimSequence;                                      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPawn*                              Addressee;                                         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFeedbackBroadcastFilter                  BroadcastFilter;                                   // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterruptCurrentLine;                             // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanBeInterrupted;                                 // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanQue;                                           // 0x002A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortSpokenLine) == 0x000008, "Wrong alignment on FFortSpokenLine");
static_assert(sizeof(FFortSpokenLine) == 0x000030, "Wrong size on FFortSpokenLine");
static_assert(offsetof(FFortSpokenLine, Audio) == 0x000000, "Member 'FFortSpokenLine::Audio' has a wrong offset!");
static_assert(offsetof(FFortSpokenLine, AnimMontage) == 0x000008, "Member 'FFortSpokenLine::AnimMontage' has a wrong offset!");
static_assert(offsetof(FFortSpokenLine, AnimSequence) == 0x000010, "Member 'FFortSpokenLine::AnimSequence' has a wrong offset!");
static_assert(offsetof(FFortSpokenLine, Addressee) == 0x000018, "Member 'FFortSpokenLine::Addressee' has a wrong offset!");
static_assert(offsetof(FFortSpokenLine, BroadcastFilter) == 0x000020, "Member 'FFortSpokenLine::BroadcastFilter' has a wrong offset!");
static_assert(offsetof(FFortSpokenLine, Delay) == 0x000024, "Member 'FFortSpokenLine::Delay' has a wrong offset!");
static_assert(offsetof(FFortSpokenLine, bInterruptCurrentLine) == 0x000028, "Member 'FFortSpokenLine::bInterruptCurrentLine' has a wrong offset!");
static_assert(offsetof(FFortSpokenLine, bCanBeInterrupted) == 0x000029, "Member 'FFortSpokenLine::bCanBeInterrupted' has a wrong offset!");
static_assert(offsetof(FFortSpokenLine, bCanQue) == 0x00002A, "Member 'FFortSpokenLine::bCanQue' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIPawnStats
// 0x0058 (0x00E8 - 0x0090)
struct FFortAIPawnStats final : public FFortPawnStats
{
public:
	int32                                         ScoreValue;                                        // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DormantSightRadius;                                // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DormantHearingThreshold;                           // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DormantLOSHearingThreshold;                        // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DormantPeripheralVisionAngle;                      // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AlertSightRadius;                                  // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AlertHearingThreshold;                             // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AlertLOSHearingThreshold;                          // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AlertPeripheralVisionAngle;                        // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AutoSuccessRangeFromLastSeenLocation;              // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveTable*                            HealthScalingTable;                                // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   HealthScalingTableRow;                             // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveTable*                            ControlResistanceScalingTable;                     // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ControlResistanceScalingTableRow;                  // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveTable*                            DifficultyRatingTable;                             // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   DifficultyRatingTableRow;                          // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortAIPawnStats) == 0x000008, "Wrong alignment on FFortAIPawnStats");
static_assert(sizeof(FFortAIPawnStats) == 0x0000E8, "Wrong size on FFortAIPawnStats");
static_assert(offsetof(FFortAIPawnStats, ScoreValue) == 0x000090, "Member 'FFortAIPawnStats::ScoreValue' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, DormantSightRadius) == 0x000094, "Member 'FFortAIPawnStats::DormantSightRadius' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, DormantHearingThreshold) == 0x000098, "Member 'FFortAIPawnStats::DormantHearingThreshold' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, DormantLOSHearingThreshold) == 0x00009C, "Member 'FFortAIPawnStats::DormantLOSHearingThreshold' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, DormantPeripheralVisionAngle) == 0x0000A0, "Member 'FFortAIPawnStats::DormantPeripheralVisionAngle' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, AlertSightRadius) == 0x0000A4, "Member 'FFortAIPawnStats::AlertSightRadius' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, AlertHearingThreshold) == 0x0000A8, "Member 'FFortAIPawnStats::AlertHearingThreshold' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, AlertLOSHearingThreshold) == 0x0000AC, "Member 'FFortAIPawnStats::AlertLOSHearingThreshold' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, AlertPeripheralVisionAngle) == 0x0000B0, "Member 'FFortAIPawnStats::AlertPeripheralVisionAngle' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, AutoSuccessRangeFromLastSeenLocation) == 0x0000B4, "Member 'FFortAIPawnStats::AutoSuccessRangeFromLastSeenLocation' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, HealthScalingTable) == 0x0000B8, "Member 'FFortAIPawnStats::HealthScalingTable' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, HealthScalingTableRow) == 0x0000C0, "Member 'FFortAIPawnStats::HealthScalingTableRow' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, ControlResistanceScalingTable) == 0x0000C8, "Member 'FFortAIPawnStats::ControlResistanceScalingTable' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, ControlResistanceScalingTableRow) == 0x0000D0, "Member 'FFortAIPawnStats::ControlResistanceScalingTableRow' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, DifficultyRatingTable) == 0x0000D8, "Member 'FFortAIPawnStats::DifficultyRatingTable' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, DifficultyRatingTableRow) == 0x0000E0, "Member 'FFortAIPawnStats::DifficultyRatingTableRow' has a wrong offset!");

// ScriptStruct FortniteGame.OutpostItemUpgradeData
// 0x0050 (0x0058 - 0x0008)
struct FOutpostItemUpgradeData final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UFortOutpostItemDefinition> ItemDefinition;                                    // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemLevel;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RequiredItems;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RequiredAccountItems;                              // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOutpostItemUpgradeData) == 0x000008, "Wrong alignment on FOutpostItemUpgradeData");
static_assert(sizeof(FOutpostItemUpgradeData) == 0x000058, "Wrong size on FOutpostItemUpgradeData");
static_assert(offsetof(FOutpostItemUpgradeData, ItemDefinition) == 0x000008, "Member 'FOutpostItemUpgradeData::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FOutpostItemUpgradeData, ItemLevel) == 0x000030, "Member 'FOutpostItemUpgradeData::ItemLevel' has a wrong offset!");
static_assert(offsetof(FOutpostItemUpgradeData, RequiredItems) == 0x000038, "Member 'FOutpostItemUpgradeData::RequiredItems' has a wrong offset!");
static_assert(offsetof(FOutpostItemUpgradeData, RequiredAccountItems) == 0x000048, "Member 'FOutpostItemUpgradeData::RequiredAccountItems' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIAppearanceOverrideEntry
// 0x0060 (0x0060 - 0x0000)
struct FFortAIAppearanceOverrideEntry final
{
public:
	class FName                                   AppearanceName;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFemale;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USkeletalMesh>           SkeletalMesh;                                      // 0x0010(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UFortFeedbackBank>       FeedbackBank;                                      // 0x0038(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortAIAppearanceOverrideEntry) == 0x000008, "Wrong alignment on FFortAIAppearanceOverrideEntry");
static_assert(sizeof(FFortAIAppearanceOverrideEntry) == 0x000060, "Wrong size on FFortAIAppearanceOverrideEntry");
static_assert(offsetof(FFortAIAppearanceOverrideEntry, AppearanceName) == 0x000000, "Member 'FFortAIAppearanceOverrideEntry::AppearanceName' has a wrong offset!");
static_assert(offsetof(FFortAIAppearanceOverrideEntry, bIsFemale) == 0x000008, "Member 'FFortAIAppearanceOverrideEntry::bIsFemale' has a wrong offset!");
static_assert(offsetof(FFortAIAppearanceOverrideEntry, SkeletalMesh) == 0x000010, "Member 'FFortAIAppearanceOverrideEntry::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(FFortAIAppearanceOverrideEntry, FeedbackBank) == 0x000038, "Member 'FFortAIAppearanceOverrideEntry::FeedbackBank' has a wrong offset!");

// ScriptStruct FortniteGame.MinimapGoalByTagColorsData
// 0x0030 (0x0030 - 0x0000)
struct FMinimapGoalByTagColorsData final
{
public:
	struct FGameplayTagContainer                  GoalTags;                                          // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FLinearColor                           MinimapColor;                                      // 0x0020(0x0010)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMinimapGoalByTagColorsData) == 0x000008, "Wrong alignment on FMinimapGoalByTagColorsData");
static_assert(sizeof(FMinimapGoalByTagColorsData) == 0x000030, "Wrong size on FMinimapGoalByTagColorsData");
static_assert(offsetof(FMinimapGoalByTagColorsData, GoalTags) == 0x000000, "Member 'FMinimapGoalByTagColorsData::GoalTags' has a wrong offset!");
static_assert(offsetof(FMinimapGoalByTagColorsData, MinimapColor) == 0x000020, "Member 'FMinimapGoalByTagColorsData::MinimapColor' has a wrong offset!");

// ScriptStruct FortniteGame.RunVariationData
// 0x000C (0x000C - 0x0000)
struct FRunVariationData final
{
public:
	TWeakObjectPtr<class AFortAIPawn>             FortAIPawn;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRunVariationData) == 0x000004, "Wrong alignment on FRunVariationData");
static_assert(sizeof(FRunVariationData) == 0x00000C, "Wrong size on FRunVariationData");
static_assert(offsetof(FRunVariationData, FortAIPawn) == 0x000000, "Member 'FRunVariationData::FortAIPawn' has a wrong offset!");
static_assert(offsetof(FRunVariationData, Distance) == 0x000008, "Member 'FRunVariationData::Distance' has a wrong offset!");

// ScriptStruct FortniteGame.WorkerPortraitData
// 0x0028 (0x0028 - 0x0000)
struct FWorkerPortraitData final
{
public:
	TSoftObjectPtr<class UFortItemIconDefinition> Portrait;                                          // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorkerPortraitData) == 0x000008, "Wrong alignment on FWorkerPortraitData");
static_assert(sizeof(FWorkerPortraitData) == 0x000028, "Wrong size on FWorkerPortraitData");
static_assert(offsetof(FWorkerPortraitData, Portrait) == 0x000000, "Member 'FWorkerPortraitData::Portrait' has a wrong offset!");

// ScriptStruct FortniteGame.WorkerGenderData
// 0x0018 (0x0018 - 0x0000)
struct FWorkerGenderData final
{
public:
	EFortCustomGender                             Gender;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWorkerPortraitData>            PotraitData;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorkerGenderData) == 0x000008, "Wrong alignment on FWorkerGenderData");
static_assert(sizeof(FWorkerGenderData) == 0x000018, "Wrong size on FWorkerGenderData");
static_assert(offsetof(FWorkerGenderData, Gender) == 0x000000, "Member 'FWorkerGenderData::Gender' has a wrong offset!");
static_assert(offsetof(FWorkerGenderData, PotraitData) == 0x000008, "Member 'FWorkerGenderData::PotraitData' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIPawnVariantDefinition
// 0x0068 (0x0068 - 0x0000)
struct FFortAIPawnVariantDefinition final
{
public:
	TSubclassOf<class AFortAIPawn>                PawnClass;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   VariantWeightCurve;                                // 0x0008(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         CurrentWeight;                                     // 0x0018(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      RequiredTagsQuery;                                 // 0x0020(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIPawnVariantDefinition) == 0x000008, "Wrong alignment on FFortAIPawnVariantDefinition");
static_assert(sizeof(FFortAIPawnVariantDefinition) == 0x000068, "Wrong size on FFortAIPawnVariantDefinition");
static_assert(offsetof(FFortAIPawnVariantDefinition, PawnClass) == 0x000000, "Member 'FFortAIPawnVariantDefinition::PawnClass' has a wrong offset!");
static_assert(offsetof(FFortAIPawnVariantDefinition, VariantWeightCurve) == 0x000008, "Member 'FFortAIPawnVariantDefinition::VariantWeightCurve' has a wrong offset!");
static_assert(offsetof(FFortAIPawnVariantDefinition, CurrentWeight) == 0x000018, "Member 'FFortAIPawnVariantDefinition::CurrentWeight' has a wrong offset!");
static_assert(offsetof(FFortAIPawnVariantDefinition, RequiredTagsQuery) == 0x000020, "Member 'FFortAIPawnVariantDefinition::RequiredTagsQuery' has a wrong offset!");

// ScriptStruct FortniteGame.FortWindImpulseHandle
// 0x0004 (0x0004 - 0x0000)
struct FFortWindImpulseHandle final
{
public:
	int32                                         UID;                                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortWindImpulseHandle) == 0x000004, "Wrong alignment on FFortWindImpulseHandle");
static_assert(sizeof(FFortWindImpulseHandle) == 0x000004, "Wrong size on FFortWindImpulseHandle");
static_assert(offsetof(FFortWindImpulseHandle, UID) == 0x000000, "Member 'FFortWindImpulseHandle::UID' has a wrong offset!");

// ScriptStruct FortniteGame.FortWindImpulseRadius
// 0x004C (0x004C - 0x0000)
struct FFortWindImpulseRadius final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Edit, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Radius;                                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentRadius;                                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PreviousRadius;                                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Magnitude;                                         // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentMagnitude;                                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PreviousMagnitude;                                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BlendTime;                                         // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentBlendTime;                                  // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FBox                                   WorldBounds;                                       // 0x002C(0x001C)(IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortWindImpulseHandle                 Handle;                                            // 0x0048(0x0004)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortWindImpulseRadius) == 0x000004, "Wrong alignment on FFortWindImpulseRadius");
static_assert(sizeof(FFortWindImpulseRadius) == 0x00004C, "Wrong size on FFortWindImpulseRadius");
static_assert(offsetof(FFortWindImpulseRadius, Location) == 0x000000, "Member 'FFortWindImpulseRadius::Location' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseRadius, Radius) == 0x00000C, "Member 'FFortWindImpulseRadius::Radius' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseRadius, CurrentRadius) == 0x000010, "Member 'FFortWindImpulseRadius::CurrentRadius' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseRadius, PreviousRadius) == 0x000014, "Member 'FFortWindImpulseRadius::PreviousRadius' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseRadius, Magnitude) == 0x000018, "Member 'FFortWindImpulseRadius::Magnitude' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseRadius, CurrentMagnitude) == 0x00001C, "Member 'FFortWindImpulseRadius::CurrentMagnitude' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseRadius, PreviousMagnitude) == 0x000020, "Member 'FFortWindImpulseRadius::PreviousMagnitude' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseRadius, BlendTime) == 0x000024, "Member 'FFortWindImpulseRadius::BlendTime' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseRadius, CurrentBlendTime) == 0x000028, "Member 'FFortWindImpulseRadius::CurrentBlendTime' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseRadius, WorldBounds) == 0x00002C, "Member 'FFortWindImpulseRadius::WorldBounds' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseRadius, Handle) == 0x000048, "Member 'FFortWindImpulseRadius::Handle' has a wrong offset!");

// ScriptStruct FortniteGame.FortSpawnGroupEncounterTypeData
// 0x0040 (0x0040 - 0x0000)
struct FFortSpawnGroupEncounterTypeData final
{
public:
	struct FGameplayTagContainer                  EncounterTypeTags;                                 // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   MaxGroupCategoryPopulationDensityCurve;            // 0x0020(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   RespawnDelayCurve;                                 // 0x0030(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortSpawnGroupEncounterTypeData) == 0x000008, "Wrong alignment on FFortSpawnGroupEncounterTypeData");
static_assert(sizeof(FFortSpawnGroupEncounterTypeData) == 0x000040, "Wrong size on FFortSpawnGroupEncounterTypeData");
static_assert(offsetof(FFortSpawnGroupEncounterTypeData, EncounterTypeTags) == 0x000000, "Member 'FFortSpawnGroupEncounterTypeData::EncounterTypeTags' has a wrong offset!");
static_assert(offsetof(FFortSpawnGroupEncounterTypeData, MaxGroupCategoryPopulationDensityCurve) == 0x000020, "Member 'FFortSpawnGroupEncounterTypeData::MaxGroupCategoryPopulationDensityCurve' has a wrong offset!");
static_assert(offsetof(FFortSpawnGroupEncounterTypeData, RespawnDelayCurve) == 0x000030, "Member 'FFortSpawnGroupEncounterTypeData::RespawnDelayCurve' has a wrong offset!");

// ScriptStruct FortniteGame.FortWeaponDurabilityByRarityStats
// 0x0028 (0x0030 - 0x0008)
struct FFortWeaponDurabilityByRarityStats final : public FTableRowBase
{
public:
	int32                                         Handmade;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Ordinary;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Sturdy;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Quality;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Fine;                                              // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Elegant;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Masterwork;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Epic;                                              // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Badass;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Legendary;                                         // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortWeaponDurabilityByRarityStats) == 0x000008, "Wrong alignment on FFortWeaponDurabilityByRarityStats");
static_assert(sizeof(FFortWeaponDurabilityByRarityStats) == 0x000030, "Wrong size on FFortWeaponDurabilityByRarityStats");
static_assert(offsetof(FFortWeaponDurabilityByRarityStats, Handmade) == 0x000008, "Member 'FFortWeaponDurabilityByRarityStats::Handmade' has a wrong offset!");
static_assert(offsetof(FFortWeaponDurabilityByRarityStats, Ordinary) == 0x00000C, "Member 'FFortWeaponDurabilityByRarityStats::Ordinary' has a wrong offset!");
static_assert(offsetof(FFortWeaponDurabilityByRarityStats, Sturdy) == 0x000010, "Member 'FFortWeaponDurabilityByRarityStats::Sturdy' has a wrong offset!");
static_assert(offsetof(FFortWeaponDurabilityByRarityStats, Quality) == 0x000014, "Member 'FFortWeaponDurabilityByRarityStats::Quality' has a wrong offset!");
static_assert(offsetof(FFortWeaponDurabilityByRarityStats, Fine) == 0x000018, "Member 'FFortWeaponDurabilityByRarityStats::Fine' has a wrong offset!");
static_assert(offsetof(FFortWeaponDurabilityByRarityStats, Elegant) == 0x00001C, "Member 'FFortWeaponDurabilityByRarityStats::Elegant' has a wrong offset!");
static_assert(offsetof(FFortWeaponDurabilityByRarityStats, Masterwork) == 0x000020, "Member 'FFortWeaponDurabilityByRarityStats::Masterwork' has a wrong offset!");
static_assert(offsetof(FFortWeaponDurabilityByRarityStats, Epic) == 0x000024, "Member 'FFortWeaponDurabilityByRarityStats::Epic' has a wrong offset!");
static_assert(offsetof(FFortWeaponDurabilityByRarityStats, Badass) == 0x000028, "Member 'FFortWeaponDurabilityByRarityStats::Badass' has a wrong offset!");
static_assert(offsetof(FFortWeaponDurabilityByRarityStats, Legendary) == 0x00002C, "Member 'FFortWeaponDurabilityByRarityStats::Legendary' has a wrong offset!");

// ScriptStruct FortniteGame.FortPickupLocationData
// 0x0060 (0x0060 - 0x0000)
struct FFortPickupLocationData final
{
public:
	class AFortPawn*                              PickupTarget;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPickup*                            CombineTarget;                                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPawn*                              ItemOwner;                                         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  LootInitialPosition;                               // 0x0018(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  LootFinalPosition;                                 // 0x0024(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         FlyTime;                                           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              StartDirection;                                    // 0x0034(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  FinalTossRestLocation;                             // 0x0040(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	EFortPickupTossState                          TossState;                                         // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  PickupGuid;                                        // 0x0050(0x0010)(IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortPickupLocationData) == 0x000008, "Wrong alignment on FFortPickupLocationData");
static_assert(sizeof(FFortPickupLocationData) == 0x000060, "Wrong size on FFortPickupLocationData");
static_assert(offsetof(FFortPickupLocationData, PickupTarget) == 0x000000, "Member 'FFortPickupLocationData::PickupTarget' has a wrong offset!");
static_assert(offsetof(FFortPickupLocationData, CombineTarget) == 0x000008, "Member 'FFortPickupLocationData::CombineTarget' has a wrong offset!");
static_assert(offsetof(FFortPickupLocationData, ItemOwner) == 0x000010, "Member 'FFortPickupLocationData::ItemOwner' has a wrong offset!");
static_assert(offsetof(FFortPickupLocationData, LootInitialPosition) == 0x000018, "Member 'FFortPickupLocationData::LootInitialPosition' has a wrong offset!");
static_assert(offsetof(FFortPickupLocationData, LootFinalPosition) == 0x000024, "Member 'FFortPickupLocationData::LootFinalPosition' has a wrong offset!");
static_assert(offsetof(FFortPickupLocationData, FlyTime) == 0x000030, "Member 'FFortPickupLocationData::FlyTime' has a wrong offset!");
static_assert(offsetof(FFortPickupLocationData, StartDirection) == 0x000034, "Member 'FFortPickupLocationData::StartDirection' has a wrong offset!");
static_assert(offsetof(FFortPickupLocationData, FinalTossRestLocation) == 0x000040, "Member 'FFortPickupLocationData::FinalTossRestLocation' has a wrong offset!");
static_assert(offsetof(FFortPickupLocationData, TossState) == 0x00004C, "Member 'FFortPickupLocationData::TossState' has a wrong offset!");
static_assert(offsetof(FFortPickupLocationData, PickupGuid) == 0x000050, "Member 'FFortPickupLocationData::PickupGuid' has a wrong offset!");

// ScriptStruct FortniteGame.SpawnGroupEnemy
// 0x0010 (0x0010 - 0x0000)
struct FSpawnGroupEnemy final
{
public:
	TSubclassOf<class UFortAIPawnVariant>         EnemyVariantClass;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideVariantSpawnPointValue;                   // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpawnValue;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawnGroupEnemy) == 0x000008, "Wrong alignment on FSpawnGroupEnemy");
static_assert(sizeof(FSpawnGroupEnemy) == 0x000010, "Wrong size on FSpawnGroupEnemy");
static_assert(offsetof(FSpawnGroupEnemy, EnemyVariantClass) == 0x000000, "Member 'FSpawnGroupEnemy::EnemyVariantClass' has a wrong offset!");
static_assert(offsetof(FSpawnGroupEnemy, bOverrideVariantSpawnPointValue) == 0x000008, "Member 'FSpawnGroupEnemy::bOverrideVariantSpawnPointValue' has a wrong offset!");
static_assert(offsetof(FSpawnGroupEnemy, SpawnValue) == 0x00000C, "Member 'FSpawnGroupEnemy::SpawnValue' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayAbilityBehaviorDistanceData
// 0x0028 (0x0028 - 0x0000)
struct FFortGameplayAbilityBehaviorDistanceData final
{
public:
	struct FGameplayTagContainer                  DistanceDataTag;                                   // 0x0000(0x0020)(Edit, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortGameplayAbilityBehaviorDistanceData) == 0x000008, "Wrong alignment on FFortGameplayAbilityBehaviorDistanceData");
static_assert(sizeof(FFortGameplayAbilityBehaviorDistanceData) == 0x000028, "Wrong size on FFortGameplayAbilityBehaviorDistanceData");
static_assert(offsetof(FFortGameplayAbilityBehaviorDistanceData, DistanceDataTag) == 0x000000, "Member 'FFortGameplayAbilityBehaviorDistanceData::DistanceDataTag' has a wrong offset!");
static_assert(offsetof(FFortGameplayAbilityBehaviorDistanceData, Distance) == 0x000020, "Member 'FFortGameplayAbilityBehaviorDistanceData::Distance' has a wrong offset!");

// ScriptStruct FortniteGame.FortMoveConfig
// 0x0028 (0x0028 - 0x0000)
struct FFortMoveConfig final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 FocusTarget;                                       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AFortPawn>                  PushPawnClassOnBump;                               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMoveConfig) == 0x000008, "Wrong alignment on FFortMoveConfig");
static_assert(sizeof(FFortMoveConfig) == 0x000028, "Wrong size on FFortMoveConfig");
static_assert(offsetof(FFortMoveConfig, FocusTarget) == 0x000018, "Member 'FFortMoveConfig::FocusTarget' has a wrong offset!");
static_assert(offsetof(FFortMoveConfig, PushPawnClassOnBump) == 0x000020, "Member 'FFortMoveConfig::PushPawnClassOnBump' has a wrong offset!");

// ScriptStruct FortniteGame.BuildingActorNavArea
// 0x0004 (0x0004 - 0x0000)
struct FBuildingActorNavArea final
{
public:
	int32                                         AreaBits;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildingActorNavArea) == 0x000004, "Wrong alignment on FBuildingActorNavArea");
static_assert(sizeof(FBuildingActorNavArea) == 0x000004, "Wrong size on FBuildingActorNavArea");
static_assert(offsetof(FBuildingActorNavArea, AreaBits) == 0x000000, "Member 'FBuildingActorNavArea::AreaBits' has a wrong offset!");

// ScriptStruct FortniteGame.FortKeepItemGroup
// 0x0010 (0x0018 - 0x0008)
struct FFortKeepItemGroup final : public FTableRowBase
{
public:
	int32                                         Items;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTier;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BaseLevel;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortKeepItemGroup) == 0x000008, "Wrong alignment on FFortKeepItemGroup");
static_assert(sizeof(FFortKeepItemGroup) == 0x000018, "Wrong size on FFortKeepItemGroup");
static_assert(offsetof(FFortKeepItemGroup, Items) == 0x000008, "Member 'FFortKeepItemGroup::Items' has a wrong offset!");
static_assert(offsetof(FFortKeepItemGroup, MaxTier) == 0x00000C, "Member 'FFortKeepItemGroup::MaxTier' has a wrong offset!");
static_assert(offsetof(FFortKeepItemGroup, BaseLevel) == 0x000010, "Member 'FFortKeepItemGroup::BaseLevel' has a wrong offset!");

// ScriptStruct FortniteGame.FortFeedbackHandle
// 0x0018 (0x0018 - 0x0000)
struct FFortFeedbackHandle final
{
public:
	class UFortFeedbackBank*                      FeedbackBank;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReadOnly;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBankDefined;                                      // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFeedbackBroadcastFilter                  BroadcastFilterOverride;                           // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortFeedbackHandle) == 0x000008, "Wrong alignment on FFortFeedbackHandle");
static_assert(sizeof(FFortFeedbackHandle) == 0x000018, "Wrong size on FFortFeedbackHandle");
static_assert(offsetof(FFortFeedbackHandle, FeedbackBank) == 0x000000, "Member 'FFortFeedbackHandle::FeedbackBank' has a wrong offset!");
static_assert(offsetof(FFortFeedbackHandle, EventName) == 0x000008, "Member 'FFortFeedbackHandle::EventName' has a wrong offset!");
static_assert(offsetof(FFortFeedbackHandle, bReadOnly) == 0x000010, "Member 'FFortFeedbackHandle::bReadOnly' has a wrong offset!");
static_assert(offsetof(FFortFeedbackHandle, bBankDefined) == 0x000011, "Member 'FFortFeedbackHandle::bBankDefined' has a wrong offset!");
static_assert(offsetof(FFortFeedbackHandle, BroadcastFilterOverride) == 0x000012, "Member 'FFortFeedbackHandle::BroadcastFilterOverride' has a wrong offset!");

// ScriptStruct FortniteGame.FortSentenceAudio
// 0x0040 (0x0040 - 0x0000)
struct FFortSentenceAudio final
{
public:
	TSoftObjectPtr<class USoundBase>              Audio;                                             // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FFortFeedbackHandle                    Handle;                                            // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortSentenceAudio) == 0x000008, "Wrong alignment on FFortSentenceAudio");
static_assert(sizeof(FFortSentenceAudio) == 0x000040, "Wrong size on FFortSentenceAudio");
static_assert(offsetof(FFortSentenceAudio, Audio) == 0x000000, "Member 'FFortSentenceAudio::Audio' has a wrong offset!");
static_assert(offsetof(FFortSentenceAudio, Handle) == 0x000028, "Member 'FFortSentenceAudio::Handle' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIAssignmentIdentifier
// 0x0030 (0x0030 - 0x0000)
struct FFortAIAssignmentIdentifier final
{
public:
	EAssignmentType                               AssignmentType;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  AssignmentGameplayTags;                            // 0x0008(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EFortTeam                                     AssignmentTeam;                                    // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAIAssignmentIdentifier) == 0x000008, "Wrong alignment on FFortAIAssignmentIdentifier");
static_assert(sizeof(FFortAIAssignmentIdentifier) == 0x000030, "Wrong size on FFortAIAssignmentIdentifier");
static_assert(offsetof(FFortAIAssignmentIdentifier, AssignmentType) == 0x000000, "Member 'FFortAIAssignmentIdentifier::AssignmentType' has a wrong offset!");
static_assert(offsetof(FFortAIAssignmentIdentifier, AssignmentGameplayTags) == 0x000008, "Member 'FFortAIAssignmentIdentifier::AssignmentGameplayTags' has a wrong offset!");
static_assert(offsetof(FFortAIAssignmentIdentifier, AssignmentTeam) == 0x000028, "Member 'FFortAIAssignmentIdentifier::AssignmentTeam' has a wrong offset!");

// ScriptStruct FortniteGame.FortCloudSaveRecordInfo
// 0x0018 (0x0018 - 0x0000)
struct FFortCloudSaveRecordInfo final
{
public:
	int32                                         RecordIndex;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArchiveNumber;                                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RecordFilename;                                    // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCloudSaveRecordInfo) == 0x000008, "Wrong alignment on FFortCloudSaveRecordInfo");
static_assert(sizeof(FFortCloudSaveRecordInfo) == 0x000018, "Wrong size on FFortCloudSaveRecordInfo");
static_assert(offsetof(FFortCloudSaveRecordInfo, RecordIndex) == 0x000000, "Member 'FFortCloudSaveRecordInfo::RecordIndex' has a wrong offset!");
static_assert(offsetof(FFortCloudSaveRecordInfo, ArchiveNumber) == 0x000004, "Member 'FFortCloudSaveRecordInfo::ArchiveNumber' has a wrong offset!");
static_assert(offsetof(FFortCloudSaveRecordInfo, RecordFilename) == 0x000008, "Member 'FFortCloudSaveRecordInfo::RecordFilename' has a wrong offset!");

// ScriptStruct FortniteGame.FortCloudSaveInfo
// 0x0018 (0x0018 - 0x0000)
struct FFortCloudSaveInfo final
{
public:
	int32                                         SaveCount;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortCloudSaveRecordInfo>       SavedRecords;                                      // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCloudSaveInfo) == 0x000008, "Wrong alignment on FFortCloudSaveInfo");
static_assert(sizeof(FFortCloudSaveInfo) == 0x000018, "Wrong size on FFortCloudSaveInfo");
static_assert(offsetof(FFortCloudSaveInfo, SaveCount) == 0x000000, "Member 'FFortCloudSaveInfo::SaveCount' has a wrong offset!");
static_assert(offsetof(FFortCloudSaveInfo, SavedRecords) == 0x000008, "Member 'FFortCloudSaveInfo::SavedRecords' has a wrong offset!");

// ScriptStruct FortniteGame.FortBatchUpdatePlayer_DeployableBaseUpdate
// 0x0050 (0x0050 - 0x0000)
struct FFortBatchUpdatePlayer_DeployableBaseUpdate final
{
public:
	struct FUniqueNetIdRepl                       AccountId;                                         // 0x0000(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeployableBaseItemId;                              // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortCloudSaveInfo                     CloudSaveInfo;                                     // 0x0038(0x0018)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortBatchUpdatePlayer_DeployableBaseUpdate) == 0x000008, "Wrong alignment on FFortBatchUpdatePlayer_DeployableBaseUpdate");
static_assert(sizeof(FFortBatchUpdatePlayer_DeployableBaseUpdate) == 0x000050, "Wrong size on FFortBatchUpdatePlayer_DeployableBaseUpdate");
static_assert(offsetof(FFortBatchUpdatePlayer_DeployableBaseUpdate, AccountId) == 0x000000, "Member 'FFortBatchUpdatePlayer_DeployableBaseUpdate::AccountId' has a wrong offset!");
static_assert(offsetof(FFortBatchUpdatePlayer_DeployableBaseUpdate, DeployableBaseItemId) == 0x000028, "Member 'FFortBatchUpdatePlayer_DeployableBaseUpdate::DeployableBaseItemId' has a wrong offset!");
static_assert(offsetof(FFortBatchUpdatePlayer_DeployableBaseUpdate, CloudSaveInfo) == 0x000038, "Member 'FFortBatchUpdatePlayer_DeployableBaseUpdate::CloudSaveInfo' has a wrong offset!");

// ScriptStruct FortniteGame.FortAnimNode_ScaleHuskBones
// 0x01B0 (0x01E0 - 0x0030)
struct FFortAnimNode_ScaleHuskBones final : public FAnimNode_Base
{
public:
	struct FPoseLink                              PreScalePose;                                      // 0x0030(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x198];                                     // 0x0048(0x0198)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAnimNode_ScaleHuskBones) == 0x000008, "Wrong alignment on FFortAnimNode_ScaleHuskBones");
static_assert(sizeof(FFortAnimNode_ScaleHuskBones) == 0x0001E0, "Wrong size on FFortAnimNode_ScaleHuskBones");
static_assert(offsetof(FFortAnimNode_ScaleHuskBones, PreScalePose) == 0x000030, "Member 'FFortAnimNode_ScaleHuskBones::PreScalePose' has a wrong offset!");

// ScriptStruct FortniteGame.SlopeWarpingFootDefinition
// 0x0050 (0x0050 - 0x0000)
struct FSlopeWarpingFootDefinition final
{
public:
	struct FBoneReference                         IKFootBone;                                        // 0x0000(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         FKFootBone;                                        // 0x0018(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         NumBonesInLimb;                                    // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ToeSocketName;                                     // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HeelSocketName;                                    // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootSize;                                          // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSlopeWarpingFootDefinition) == 0x000008, "Wrong alignment on FSlopeWarpingFootDefinition");
static_assert(sizeof(FSlopeWarpingFootDefinition) == 0x000050, "Wrong size on FSlopeWarpingFootDefinition");
static_assert(offsetof(FSlopeWarpingFootDefinition, IKFootBone) == 0x000000, "Member 'FSlopeWarpingFootDefinition::IKFootBone' has a wrong offset!");
static_assert(offsetof(FSlopeWarpingFootDefinition, FKFootBone) == 0x000018, "Member 'FSlopeWarpingFootDefinition::FKFootBone' has a wrong offset!");
static_assert(offsetof(FSlopeWarpingFootDefinition, NumBonesInLimb) == 0x000030, "Member 'FSlopeWarpingFootDefinition::NumBonesInLimb' has a wrong offset!");
static_assert(offsetof(FSlopeWarpingFootDefinition, ToeSocketName) == 0x000038, "Member 'FSlopeWarpingFootDefinition::ToeSocketName' has a wrong offset!");
static_assert(offsetof(FSlopeWarpingFootDefinition, HeelSocketName) == 0x000040, "Member 'FSlopeWarpingFootDefinition::HeelSocketName' has a wrong offset!");
static_assert(offsetof(FSlopeWarpingFootDefinition, FootSize) == 0x000048, "Member 'FSlopeWarpingFootDefinition::FootSize' has a wrong offset!");

// ScriptStruct FortniteGame.SlopeWarpingFootData
// 0x00E0 (0x00E0 - 0x0000)
struct alignas(0x10) FSlopeWarpingFootData final
{
public:
	uint8                                         Pad_0[0xE0];                                       // 0x0000(0x00E0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSlopeWarpingFootData) == 0x000010, "Wrong alignment on FSlopeWarpingFootData");
static_assert(sizeof(FSlopeWarpingFootData) == 0x0000E0, "Wrong size on FSlopeWarpingFootData");

// ScriptStruct FortniteGame.FortAnimNode_SlopeWarping
// 0x0168 (0x01D8 - 0x0070)
struct FFortAnimNode_SlopeWarping final : public FAnimNode_SkeletalControlBase
{
public:
	uint8                                         Pad_70[0x18];                                      // 0x0070(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         IKFootRootBone;                                    // 0x0088(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         PelvisBone;                                        // 0x00A0(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FSlopeWarpingFootDefinition>    FeetDefinitions;                                   // 0x00B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSlopeWarpingFootData>          FeetData;                                          // 0x00C8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	struct FVectorRK4SpringInterpolator           PelvisOffsetInterpolator;                          // 0x00D8(0x0008)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0[0x34];                                      // 0x00E0(0x0034)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                GravityDir;                                        // 0x0114(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CachedDeltaTime;                                   // 0x0120(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetFloorNormalWorldSpace;                       // 0x0124(0x000C)(Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVectorRK4SpringInterpolator           FloorNormalInterpolator;                           // 0x0130(0x0008)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_138[0x34];                                     // 0x0138(0x0034)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetFloorOffsetLocalSpace;                       // 0x016C(0x000C)(Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVectorRK4SpringInterpolator           FloorOffsetInterpolator;                           // 0x0178(0x0008)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_180[0x34];                                     // 0x0180(0x0034)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxStepHeight;                                     // 0x01B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseCapsuleInfoInsteadOfFootTraces : 1;            // 0x01B8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bWasOnGround : 1;                                  // 0x01B8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShowDebug : 1;                                    // 0x01B8(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFloorSmoothingInitialized : 1;                    // 0x01B8(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1B9[0x3];                                      // 0x01B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ActorLocation;                                     // 0x01BC(0x000C)(Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GravityDirCompSpace;                               // 0x01C8(0x000C)(Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1D4[0x4];                                      // 0x01D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAnimNode_SlopeWarping) == 0x000008, "Wrong alignment on FFortAnimNode_SlopeWarping");
static_assert(sizeof(FFortAnimNode_SlopeWarping) == 0x0001D8, "Wrong size on FFortAnimNode_SlopeWarping");
static_assert(offsetof(FFortAnimNode_SlopeWarping, IKFootRootBone) == 0x000088, "Member 'FFortAnimNode_SlopeWarping::IKFootRootBone' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SlopeWarping, PelvisBone) == 0x0000A0, "Member 'FFortAnimNode_SlopeWarping::PelvisBone' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SlopeWarping, FeetDefinitions) == 0x0000B8, "Member 'FFortAnimNode_SlopeWarping::FeetDefinitions' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SlopeWarping, FeetData) == 0x0000C8, "Member 'FFortAnimNode_SlopeWarping::FeetData' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SlopeWarping, PelvisOffsetInterpolator) == 0x0000D8, "Member 'FFortAnimNode_SlopeWarping::PelvisOffsetInterpolator' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SlopeWarping, GravityDir) == 0x000114, "Member 'FFortAnimNode_SlopeWarping::GravityDir' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SlopeWarping, CachedDeltaTime) == 0x000120, "Member 'FFortAnimNode_SlopeWarping::CachedDeltaTime' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SlopeWarping, TargetFloorNormalWorldSpace) == 0x000124, "Member 'FFortAnimNode_SlopeWarping::TargetFloorNormalWorldSpace' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SlopeWarping, FloorNormalInterpolator) == 0x000130, "Member 'FFortAnimNode_SlopeWarping::FloorNormalInterpolator' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SlopeWarping, TargetFloorOffsetLocalSpace) == 0x00016C, "Member 'FFortAnimNode_SlopeWarping::TargetFloorOffsetLocalSpace' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SlopeWarping, FloorOffsetInterpolator) == 0x000178, "Member 'FFortAnimNode_SlopeWarping::FloorOffsetInterpolator' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SlopeWarping, MaxStepHeight) == 0x0001B4, "Member 'FFortAnimNode_SlopeWarping::MaxStepHeight' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SlopeWarping, ActorLocation) == 0x0001BC, "Member 'FFortAnimNode_SlopeWarping::ActorLocation' has a wrong offset!");
static_assert(offsetof(FFortAnimNode_SlopeWarping, GravityDirCompSpace) == 0x0001C8, "Member 'FFortAnimNode_SlopeWarping::GravityDirCompSpace' has a wrong offset!");

// ScriptStruct FortniteGame.FortGeneratedEncounterSequence
// 0x0030 (0x0030 - 0x0000)
struct FFortGeneratedEncounterSequence final
{
public:
	struct FFortEncounterTransitionSettings       TransitionSettings;                                // 0x0000(0x0001)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StartingGeneratedEncounterProfileIndex;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumEncountersInSequence;                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  EncounterSequenceTags;                             // 0x0010(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGeneratedEncounterSequence) == 0x000008, "Wrong alignment on FFortGeneratedEncounterSequence");
static_assert(sizeof(FFortGeneratedEncounterSequence) == 0x000030, "Wrong size on FFortGeneratedEncounterSequence");
static_assert(offsetof(FFortGeneratedEncounterSequence, TransitionSettings) == 0x000000, "Member 'FFortGeneratedEncounterSequence::TransitionSettings' has a wrong offset!");
static_assert(offsetof(FFortGeneratedEncounterSequence, StartingGeneratedEncounterProfileIndex) == 0x000004, "Member 'FFortGeneratedEncounterSequence::StartingGeneratedEncounterProfileIndex' has a wrong offset!");
static_assert(offsetof(FFortGeneratedEncounterSequence, NumEncountersInSequence) == 0x000008, "Member 'FFortGeneratedEncounterSequence::NumEncountersInSequence' has a wrong offset!");
static_assert(offsetof(FFortGeneratedEncounterSequence, EncounterSequenceTags) == 0x000010, "Member 'FFortGeneratedEncounterSequence::EncounterSequenceTags' has a wrong offset!");

// ScriptStruct FortniteGame.McpPlayerStatsResult
// 0x0080 (0x0080 - 0x0000)
struct FMcpPlayerStatsResult final
{
public:
	struct FUniqueNetIdRepl                       PlayerUniqueNetId;                                 // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, int32>                    StatData;                                          // 0x0028(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTimespan                              RequestTime;                                       // 0x0078(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMcpPlayerStatsResult) == 0x000008, "Wrong alignment on FMcpPlayerStatsResult");
static_assert(sizeof(FMcpPlayerStatsResult) == 0x000080, "Wrong size on FMcpPlayerStatsResult");
static_assert(offsetof(FMcpPlayerStatsResult, PlayerUniqueNetId) == 0x000000, "Member 'FMcpPlayerStatsResult::PlayerUniqueNetId' has a wrong offset!");
static_assert(offsetof(FMcpPlayerStatsResult, StatData) == 0x000028, "Member 'FMcpPlayerStatsResult::StatData' has a wrong offset!");
static_assert(offsetof(FMcpPlayerStatsResult, RequestTime) == 0x000078, "Member 'FMcpPlayerStatsResult::RequestTime' has a wrong offset!");

// ScriptStruct FortniteGame.FortInputActionGroupContext
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FFortInputActionGroupContext final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortInputActionGroup                         InputActionGroup;                                  // 0x0008(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortInputActionGroupContext) == 0x000008, "Wrong alignment on FFortInputActionGroupContext");
static_assert(sizeof(FFortInputActionGroupContext) == 0x000010, "Wrong size on FFortInputActionGroupContext");
static_assert(offsetof(FFortInputActionGroupContext, ActionName) == 0x000000, "Member 'FFortInputActionGroupContext::ActionName' has a wrong offset!");
static_assert(offsetof(FFortInputActionGroupContext, InputActionGroup) == 0x000008, "Member 'FFortInputActionGroupContext::InputActionGroup' has a wrong offset!");

// ScriptStruct FortniteGame.FortNamedCounterStat
// 0x0010 (0x0010 - 0x0000)
struct FFortNamedCounterStat final
{
public:
	int32                                         CurrentCount;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              LastIncrementedTime;                               // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortNamedCounterStat) == 0x000008, "Wrong alignment on FFortNamedCounterStat");
static_assert(sizeof(FFortNamedCounterStat) == 0x000010, "Wrong size on FFortNamedCounterStat");
static_assert(offsetof(FFortNamedCounterStat, CurrentCount) == 0x000000, "Member 'FFortNamedCounterStat::CurrentCount' has a wrong offset!");
static_assert(offsetof(FFortNamedCounterStat, LastIncrementedTime) == 0x000008, "Member 'FFortNamedCounterStat::LastIncrementedTime' has a wrong offset!");

// ScriptStruct FortniteGame.PermaniteBoundariesInfo
// 0x0014 (0x0014 - 0x0000)
struct FPermaniteBoundariesInfo final
{
public:
	int32                                         MaxPermaniteStructures;                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalPermaniteStructures;                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AveragePermaniteStructureLevel;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinPermaniteStructureLevel;                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPermaniteStructureLevel;                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPermaniteBoundariesInfo) == 0x000004, "Wrong alignment on FPermaniteBoundariesInfo");
static_assert(sizeof(FPermaniteBoundariesInfo) == 0x000014, "Wrong size on FPermaniteBoundariesInfo");
static_assert(offsetof(FPermaniteBoundariesInfo, MaxPermaniteStructures) == 0x000000, "Member 'FPermaniteBoundariesInfo::MaxPermaniteStructures' has a wrong offset!");
static_assert(offsetof(FPermaniteBoundariesInfo, TotalPermaniteStructures) == 0x000004, "Member 'FPermaniteBoundariesInfo::TotalPermaniteStructures' has a wrong offset!");
static_assert(offsetof(FPermaniteBoundariesInfo, AveragePermaniteStructureLevel) == 0x000008, "Member 'FPermaniteBoundariesInfo::AveragePermaniteStructureLevel' has a wrong offset!");
static_assert(offsetof(FPermaniteBoundariesInfo, MinPermaniteStructureLevel) == 0x00000C, "Member 'FPermaniteBoundariesInfo::MinPermaniteStructureLevel' has a wrong offset!");
static_assert(offsetof(FPermaniteBoundariesInfo, MaxPermaniteStructureLevel) == 0x000010, "Member 'FPermaniteBoundariesInfo::MaxPermaniteStructureLevel' has a wrong offset!");

// ScriptStruct FortniteGame.FortConversionResultNotification
// 0x0010 (0x0010 - 0x0000)
struct FFortConversionResultNotification final
{
public:
	TArray<struct FMcpLootEntry>                  ItemsGranted;                                      // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortConversionResultNotification) == 0x000008, "Wrong alignment on FFortConversionResultNotification");
static_assert(sizeof(FFortConversionResultNotification) == 0x000010, "Wrong size on FFortConversionResultNotification");
static_assert(offsetof(FFortConversionResultNotification, ItemsGranted) == 0x000000, "Member 'FFortConversionResultNotification::ItemsGranted' has a wrong offset!");

// ScriptStruct FortniteGame.FortMatchmakingRegionState
// 0x00A8 (0x00A8 - 0x0000)
struct FFortMatchmakingRegionState final
{
public:
	bool                                          bDuosEnabled;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFiftyFiftyEnabled;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class FName>                             EventFlagsForcedOn;                                // 0x0008(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TSet<class FName>                             EventFlagsForcedOff;                               // 0x0058(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMatchmakingRegionState) == 0x000008, "Wrong alignment on FFortMatchmakingRegionState");
static_assert(sizeof(FFortMatchmakingRegionState) == 0x0000A8, "Wrong size on FFortMatchmakingRegionState");
static_assert(offsetof(FFortMatchmakingRegionState, bDuosEnabled) == 0x000000, "Member 'FFortMatchmakingRegionState::bDuosEnabled' has a wrong offset!");
static_assert(offsetof(FFortMatchmakingRegionState, bFiftyFiftyEnabled) == 0x000001, "Member 'FFortMatchmakingRegionState::bFiftyFiftyEnabled' has a wrong offset!");
static_assert(offsetof(FFortMatchmakingRegionState, EventFlagsForcedOn) == 0x000008, "Member 'FFortMatchmakingRegionState::EventFlagsForcedOn' has a wrong offset!");
static_assert(offsetof(FFortMatchmakingRegionState, EventFlagsForcedOff) == 0x000058, "Member 'FFortMatchmakingRegionState::EventFlagsForcedOff' has a wrong offset!");

// ScriptStruct FortniteGame.FortMatchmakingEventsState
// 0x0050 (0x0050 - 0x0000)
struct FFortMatchmakingEventsState final
{
public:
	TMap<class FString, struct FFortMatchmakingRegionState> Region;                                            // 0x0000(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMatchmakingEventsState) == 0x000008, "Wrong alignment on FFortMatchmakingEventsState");
static_assert(sizeof(FFortMatchmakingEventsState) == 0x000050, "Wrong size on FFortMatchmakingEventsState");
static_assert(offsetof(FFortMatchmakingEventsState, Region) == 0x000000, "Member 'FFortMatchmakingEventsState::Region' has a wrong offset!");

// ScriptStruct FortniteGame.FortLevelUpData
// 0x0028 (0x0030 - 0x0008)
struct FFortLevelUpData final : public FTableRowBase
{
public:
	int32                                         Xp;                                                // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemRewardsText;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         XPDisplayMultiplier;                               // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RestXPCap;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RestXPRechargeRate;                                // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoostXPPerConsumable;                              // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortLevelUpData) == 0x000008, "Wrong alignment on FFortLevelUpData");
static_assert(sizeof(FFortLevelUpData) == 0x000030, "Wrong size on FFortLevelUpData");
static_assert(offsetof(FFortLevelUpData, Xp) == 0x000008, "Member 'FFortLevelUpData::Xp' has a wrong offset!");
static_assert(offsetof(FFortLevelUpData, ItemRewardsText) == 0x000010, "Member 'FFortLevelUpData::ItemRewardsText' has a wrong offset!");
static_assert(offsetof(FFortLevelUpData, XPDisplayMultiplier) == 0x000020, "Member 'FFortLevelUpData::XPDisplayMultiplier' has a wrong offset!");
static_assert(offsetof(FFortLevelUpData, RestXPCap) == 0x000024, "Member 'FFortLevelUpData::RestXPCap' has a wrong offset!");
static_assert(offsetof(FFortLevelUpData, RestXPRechargeRate) == 0x000028, "Member 'FFortLevelUpData::RestXPRechargeRate' has a wrong offset!");
static_assert(offsetof(FFortLevelUpData, BoostXPPerConsumable) == 0x00002C, "Member 'FFortLevelUpData::BoostXPPerConsumable' has a wrong offset!");

// ScriptStruct FortniteGame.FortFinderProperty
// 0x0018 (0x0018 - 0x0000)
struct FFortFinderProperty final
{
public:
	class UProperty*                              Property;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortFinderProperty) == 0x000008, "Wrong alignment on FFortFinderProperty");
static_assert(sizeof(FFortFinderProperty) == 0x000018, "Wrong size on FFortFinderProperty");
static_assert(offsetof(FFortFinderProperty, Property) == 0x000000, "Member 'FFortFinderProperty::Property' has a wrong offset!");
static_assert(offsetof(FFortFinderProperty, Value) == 0x000008, "Member 'FFortFinderProperty::Value' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlacementActorFinderEntry
// 0x00B8 (0x00B8 - 0x0000)
struct FFortPlacementActorFinderEntry final
{
public:
	TSoftClassPtr<class UClass>                   BuildingToSpawn;                                   // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ABuildingActor>             BuildingClassToFind;                               // 0x0028(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class ABuildingActor>>     BuildingClassesToFind;                             // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiredTags;                                      // 0x0040(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  PreferredTags;                                     // 0x0060(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ExlusionTags;                                      // 0x0080(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFortFinderProperty>            RequiredProperties;                                // 0x00A0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCollisionCheck;                             // 0x00B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSnapToGrid;                                       // 0x00B1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B2[0x6];                                       // 0x00B2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPlacementActorFinderEntry) == 0x000008, "Wrong alignment on FFortPlacementActorFinderEntry");
static_assert(sizeof(FFortPlacementActorFinderEntry) == 0x0000B8, "Wrong size on FFortPlacementActorFinderEntry");
static_assert(offsetof(FFortPlacementActorFinderEntry, BuildingToSpawn) == 0x000000, "Member 'FFortPlacementActorFinderEntry::BuildingToSpawn' has a wrong offset!");
static_assert(offsetof(FFortPlacementActorFinderEntry, BuildingClassToFind) == 0x000028, "Member 'FFortPlacementActorFinderEntry::BuildingClassToFind' has a wrong offset!");
static_assert(offsetof(FFortPlacementActorFinderEntry, BuildingClassesToFind) == 0x000030, "Member 'FFortPlacementActorFinderEntry::BuildingClassesToFind' has a wrong offset!");
static_assert(offsetof(FFortPlacementActorFinderEntry, RequiredTags) == 0x000040, "Member 'FFortPlacementActorFinderEntry::RequiredTags' has a wrong offset!");
static_assert(offsetof(FFortPlacementActorFinderEntry, PreferredTags) == 0x000060, "Member 'FFortPlacementActorFinderEntry::PreferredTags' has a wrong offset!");
static_assert(offsetof(FFortPlacementActorFinderEntry, ExlusionTags) == 0x000080, "Member 'FFortPlacementActorFinderEntry::ExlusionTags' has a wrong offset!");
static_assert(offsetof(FFortPlacementActorFinderEntry, RequiredProperties) == 0x0000A0, "Member 'FFortPlacementActorFinderEntry::RequiredProperties' has a wrong offset!");
static_assert(offsetof(FFortPlacementActorFinderEntry, bIgnoreCollisionCheck) == 0x0000B0, "Member 'FFortPlacementActorFinderEntry::bIgnoreCollisionCheck' has a wrong offset!");
static_assert(offsetof(FFortPlacementActorFinderEntry, bSnapToGrid) == 0x0000B1, "Member 'FFortPlacementActorFinderEntry::bSnapToGrid' has a wrong offset!");

// ScriptStruct FortniteGame.FortGetMcpTimeForPlayerNotification
// 0x0008 (0x0008 - 0x0000)
struct FFortGetMcpTimeForPlayerNotification final
{
public:
	struct FDateTime                              McpTime;                                           // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGetMcpTimeForPlayerNotification) == 0x000008, "Wrong alignment on FFortGetMcpTimeForPlayerNotification");
static_assert(sizeof(FFortGetMcpTimeForPlayerNotification) == 0x000008, "Wrong size on FFortGetMcpTimeForPlayerNotification");
static_assert(offsetof(FFortGetMcpTimeForPlayerNotification, McpTime) == 0x000000, "Member 'FFortGetMcpTimeForPlayerNotification::McpTime' has a wrong offset!");

// ScriptStruct FortniteGame.TileGroupSelection
// 0x0010 (0x0010 - 0x0000)
struct FTileGroupSelection final
{
public:
	TArray<struct FTileGroupInfo>                 TileGroupOptions;                                  // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTileGroupSelection) == 0x000008, "Wrong alignment on FTileGroupSelection");
static_assert(sizeof(FTileGroupSelection) == 0x000010, "Wrong size on FTileGroupSelection");
static_assert(offsetof(FTileGroupSelection, TileGroupOptions) == 0x000000, "Member 'FTileGroupSelection::TileGroupOptions' has a wrong offset!");

// ScriptStruct FortniteGame.FortAthenaAimAssist
// 0x00E0 (0x00E0 - 0x0000)
struct alignas(0x10) FFortAthenaAimAssist final
{
public:
	uint8                                         Pad_0[0xE0];                                       // 0x0000(0x00E0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAthenaAimAssist) == 0x000010, "Wrong alignment on FFortAthenaAimAssist");
static_assert(sizeof(FFortAthenaAimAssist) == 0x0000E0, "Wrong size on FFortAthenaAimAssist");

// ScriptStruct FortniteGame.FortAthenaAimAssistTarget
// 0x0048 (0x0048 - 0x0000)
struct FFortAthenaAimAssistTarget final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCapsuleComponent*                      Capsule;                                           // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x38];                                      // 0x0010(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAthenaAimAssistTarget) == 0x000008, "Wrong alignment on FFortAthenaAimAssistTarget");
static_assert(sizeof(FFortAthenaAimAssistTarget) == 0x000048, "Wrong size on FFortAthenaAimAssistTarget");
static_assert(offsetof(FFortAthenaAimAssistTarget, Actor) == 0x000000, "Member 'FFortAthenaAimAssistTarget::Actor' has a wrong offset!");
static_assert(offsetof(FFortAthenaAimAssistTarget, Capsule) == 0x000008, "Member 'FFortAthenaAimAssistTarget::Capsule' has a wrong offset!");

// ScriptStruct FortniteGame.FortAthenaAimAssistTargetAggregator
// 0x0028 (0x0028 - 0x0000)
struct FFortAthenaAimAssistTargetAggregator final
{
public:
	TArray<struct FFortAthenaAimAssistTarget>     TargetCache0;                                      // 0x0000(0x0010)(ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<struct FFortAthenaAimAssistTarget>     TargetCache1;                                      // 0x0010(0x0010)(ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAthenaAimAssistTargetAggregator) == 0x000008, "Wrong alignment on FFortAthenaAimAssistTargetAggregator");
static_assert(sizeof(FFortAthenaAimAssistTargetAggregator) == 0x000028, "Wrong size on FFortAthenaAimAssistTargetAggregator");
static_assert(offsetof(FFortAthenaAimAssistTargetAggregator, TargetCache0) == 0x000000, "Member 'FFortAthenaAimAssistTargetAggregator::TargetCache0' has a wrong offset!");
static_assert(offsetof(FFortAthenaAimAssistTargetAggregator, TargetCache1) == 0x000010, "Member 'FFortAthenaAimAssistTargetAggregator::TargetCache1' has a wrong offset!");

// ScriptStruct FortniteGame.FortItemEntryStateValue
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FFortItemEntryStateValue final
{
public:
	int32                                         IntValue;                                          // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   NameValue;                                         // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EFortItemEntryState                           StateType;                                         // 0x0010(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemEntryStateValue) == 0x000008, "Wrong alignment on FFortItemEntryStateValue");
static_assert(sizeof(FFortItemEntryStateValue) == 0x000018, "Wrong size on FFortItemEntryStateValue");
static_assert(offsetof(FFortItemEntryStateValue, IntValue) == 0x000000, "Member 'FFortItemEntryStateValue::IntValue' has a wrong offset!");
static_assert(offsetof(FFortItemEntryStateValue, NameValue) == 0x000008, "Member 'FFortItemEntryStateValue::NameValue' has a wrong offset!");
static_assert(offsetof(FFortItemEntryStateValue, StateType) == 0x000010, "Member 'FFortItemEntryStateValue::StateType' has a wrong offset!");

// ScriptStruct FortniteGame.FortCategoryTableRow
// 0x0020 (0x0028 - 0x0008)
struct FFortCategoryTableRow final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         SortPriority;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortCategoryTableRow) == 0x000008, "Wrong alignment on FFortCategoryTableRow");
static_assert(sizeof(FFortCategoryTableRow) == 0x000028, "Wrong size on FFortCategoryTableRow");
static_assert(offsetof(FFortCategoryTableRow, Name) == 0x000008, "Member 'FFortCategoryTableRow::Name' has a wrong offset!");
static_assert(offsetof(FFortCategoryTableRow, SortPriority) == 0x000020, "Member 'FFortCategoryTableRow::SortPriority' has a wrong offset!");

// ScriptStruct FortniteGame.FortAthenaAimAssistOwnerInfo
// 0x00A0 (0x00A0 - 0x0000)
struct alignas(0x10) FFortAthenaAimAssistOwnerInfo final
{
public:
	uint8                                         Pad_0[0xA0];                                       // 0x0000(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAthenaAimAssistOwnerInfo) == 0x000010, "Wrong alignment on FFortAthenaAimAssistOwnerInfo");
static_assert(sizeof(FFortAthenaAimAssistOwnerInfo) == 0x0000A0, "Wrong size on FFortAthenaAimAssistOwnerInfo");

// ScriptStruct FortniteGame.FortWindResponderMaterialVariablePairData
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FFortWindResponderMaterialVariablePairData final
{
public:
	float                                         PreviousSpeed;                                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviousOffset;                                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaterialsPreviousTime;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTimeModifiedByMaterialSpeed;                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialVariableIndex;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SpeedVariableName;                                 // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TimeOffsetVariableName;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortWindResponderMaterialVariablePairData) == 0x000008, "Wrong alignment on FFortWindResponderMaterialVariablePairData");
static_assert(sizeof(FFortWindResponderMaterialVariablePairData) == 0x000028, "Wrong size on FFortWindResponderMaterialVariablePairData");
static_assert(offsetof(FFortWindResponderMaterialVariablePairData, PreviousSpeed) == 0x000000, "Member 'FFortWindResponderMaterialVariablePairData::PreviousSpeed' has a wrong offset!");
static_assert(offsetof(FFortWindResponderMaterialVariablePairData, PreviousOffset) == 0x000004, "Member 'FFortWindResponderMaterialVariablePairData::PreviousOffset' has a wrong offset!");
static_assert(offsetof(FFortWindResponderMaterialVariablePairData, MaterialsPreviousTime) == 0x000008, "Member 'FFortWindResponderMaterialVariablePairData::MaterialsPreviousTime' has a wrong offset!");
static_assert(offsetof(FFortWindResponderMaterialVariablePairData, DeltaTimeModifiedByMaterialSpeed) == 0x00000C, "Member 'FFortWindResponderMaterialVariablePairData::DeltaTimeModifiedByMaterialSpeed' has a wrong offset!");
static_assert(offsetof(FFortWindResponderMaterialVariablePairData, MaterialVariableIndex) == 0x000010, "Member 'FFortWindResponderMaterialVariablePairData::MaterialVariableIndex' has a wrong offset!");
static_assert(offsetof(FFortWindResponderMaterialVariablePairData, SpeedVariableName) == 0x000018, "Member 'FFortWindResponderMaterialVariablePairData::SpeedVariableName' has a wrong offset!");
static_assert(offsetof(FFortWindResponderMaterialVariablePairData, TimeOffsetVariableName) == 0x000020, "Member 'FFortWindResponderMaterialVariablePairData::TimeOffsetVariableName' has a wrong offset!");

// ScriptStruct FortniteGame.FortAthenaAimAssistResults
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x04) FFortAthenaAimAssistResults final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAthenaAimAssistResults) == 0x000004, "Wrong alignment on FFortAthenaAimAssistResults");
static_assert(sizeof(FFortAthenaAimAssistResults) == 0x000018, "Wrong size on FFortAthenaAimAssistResults");

// ScriptStruct FortniteGame.FortAthenaAimAssistParams
// 0x0028 (0x0028 - 0x0000)
struct FFortAthenaAimAssistParams final
{
public:
	class AFortPawn*                              OwningPawn;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x20];                                       // 0x0008(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAthenaAimAssistParams) == 0x000008, "Wrong alignment on FFortAthenaAimAssistParams");
static_assert(sizeof(FFortAthenaAimAssistParams) == 0x000028, "Wrong size on FFortAthenaAimAssistParams");
static_assert(offsetof(FFortAthenaAimAssistParams, OwningPawn) == 0x000000, "Member 'FFortAthenaAimAssistParams::OwningPawn' has a wrong offset!");

// ScriptStruct FortniteGame.AthenaCarPlayerSlot
// 0x0020 (0x0020 - 0x0000)
struct FAthenaCarPlayerSlot final
{
public:
	class FName                                   SeatSocket;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ExitSockets;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class APawn*                                  Player;                                            // 0x0018(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAthenaCarPlayerSlot) == 0x000008, "Wrong alignment on FAthenaCarPlayerSlot");
static_assert(sizeof(FAthenaCarPlayerSlot) == 0x000020, "Wrong size on FAthenaCarPlayerSlot");
static_assert(offsetof(FAthenaCarPlayerSlot, SeatSocket) == 0x000000, "Member 'FAthenaCarPlayerSlot::SeatSocket' has a wrong offset!");
static_assert(offsetof(FAthenaCarPlayerSlot, ExitSockets) == 0x000008, "Member 'FAthenaCarPlayerSlot::ExitSockets' has a wrong offset!");
static_assert(offsetof(FAthenaCarPlayerSlot, Player) == 0x000018, "Member 'FAthenaCarPlayerSlot::Player' has a wrong offset!");

// ScriptStruct FortniteGame.FortSafeZoneVolumeDefinition
// 0x0030 (0x0030 - 0x0000)
struct FFortSafeZoneVolumeDefinition final
{
public:
	class AVolume*                                Volume;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FScalableFloat                         RejectionChance;                                   // 0x0008(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortSafeZoneVolumeDefinition) == 0x000008, "Wrong alignment on FFortSafeZoneVolumeDefinition");
static_assert(sizeof(FFortSafeZoneVolumeDefinition) == 0x000030, "Wrong size on FFortSafeZoneVolumeDefinition");
static_assert(offsetof(FFortSafeZoneVolumeDefinition, Volume) == 0x000000, "Member 'FFortSafeZoneVolumeDefinition::Volume' has a wrong offset!");
static_assert(offsetof(FFortSafeZoneVolumeDefinition, RejectionChance) == 0x000008, "Member 'FFortSafeZoneVolumeDefinition::RejectionChance' has a wrong offset!");

// ScriptStruct FortniteGame.FortActionKeyMapping
// 0x0058 (0x0058 - 0x0000)
struct FFortActionKeyMapping final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   LocalizedName;                                     // 0x0008(0x0018)(NativeAccessSpecifierPublic)
	struct FKey                                   KeyBind1;                                          // 0x0020(0x0018)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   KeyBind2;                                          // 0x0038(0x0018)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputScale;                                        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAxisMapping;                                    // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortActionKeyMapping) == 0x000008, "Wrong alignment on FFortActionKeyMapping");
static_assert(sizeof(FFortActionKeyMapping) == 0x000058, "Wrong size on FFortActionKeyMapping");
static_assert(offsetof(FFortActionKeyMapping, ActionName) == 0x000000, "Member 'FFortActionKeyMapping::ActionName' has a wrong offset!");
static_assert(offsetof(FFortActionKeyMapping, LocalizedName) == 0x000008, "Member 'FFortActionKeyMapping::LocalizedName' has a wrong offset!");
static_assert(offsetof(FFortActionKeyMapping, KeyBind1) == 0x000020, "Member 'FFortActionKeyMapping::KeyBind1' has a wrong offset!");
static_assert(offsetof(FFortActionKeyMapping, KeyBind2) == 0x000038, "Member 'FFortActionKeyMapping::KeyBind2' has a wrong offset!");
static_assert(offsetof(FFortActionKeyMapping, InputScale) == 0x000050, "Member 'FFortActionKeyMapping::InputScale' has a wrong offset!");
static_assert(offsetof(FFortActionKeyMapping, bIsAxisMapping) == 0x000054, "Member 'FFortActionKeyMapping::bIsAxisMapping' has a wrong offset!");

// ScriptStruct FortniteGame.AccumulatedItemEntry
// 0x0010 (0x0010 - 0x0000)
struct FAccumulatedItemEntry final
{
public:
	class UFortWorldItemDefinition*               ItemDefinition;                                    // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccumulatedItemEntry) == 0x000008, "Wrong alignment on FAccumulatedItemEntry");
static_assert(sizeof(FAccumulatedItemEntry) == 0x000010, "Wrong size on FAccumulatedItemEntry");
static_assert(offsetof(FAccumulatedItemEntry, ItemDefinition) == 0x000000, "Member 'FAccumulatedItemEntry::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FAccumulatedItemEntry, Quantity) == 0x000008, "Member 'FAccumulatedItemEntry::Quantity' has a wrong offset!");

// ScriptStruct FortniteGame.ReplicatedAthenaVehicleState
// 0x000C (0x000C - 0x0000)
struct FReplicatedAthenaVehicleState final
{
public:
	struct FVector                                ForwardVectorTarget;                               // 0x0000(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReplicatedAthenaVehicleState) == 0x000004, "Wrong alignment on FReplicatedAthenaVehicleState");
static_assert(sizeof(FReplicatedAthenaVehicleState) == 0x00000C, "Wrong size on FReplicatedAthenaVehicleState");
static_assert(offsetof(FReplicatedAthenaVehicleState, ForwardVectorTarget) == 0x000000, "Member 'FReplicatedAthenaVehicleState::ForwardVectorTarget' has a wrong offset!");

// ScriptStruct FortniteGame.KeepEventWaveData
// 0x0040 (0x0040 - 0x0000)
struct FKeepEventWaveData final
{
public:
	class FText                                   WaveDescription;                                   // 0x0000(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortAIEncounterInfo>       EncounterTemplate;                                 // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAISpawnGroupProgressionInfo*       SpawnGroupProgressionInfo;                         // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WarmupTime;                                        // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EncounterTime;                                     // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DifficultyLevel;                                   // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AliveMultiplier;                                   // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnemySpawnBits1;                                   // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnemySpawnBits2;                                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKeepEventWaveData) == 0x000008, "Wrong alignment on FKeepEventWaveData");
static_assert(sizeof(FKeepEventWaveData) == 0x000040, "Wrong size on FKeepEventWaveData");
static_assert(offsetof(FKeepEventWaveData, WaveDescription) == 0x000000, "Member 'FKeepEventWaveData::WaveDescription' has a wrong offset!");
static_assert(offsetof(FKeepEventWaveData, EncounterTemplate) == 0x000018, "Member 'FKeepEventWaveData::EncounterTemplate' has a wrong offset!");
static_assert(offsetof(FKeepEventWaveData, SpawnGroupProgressionInfo) == 0x000020, "Member 'FKeepEventWaveData::SpawnGroupProgressionInfo' has a wrong offset!");
static_assert(offsetof(FKeepEventWaveData, WarmupTime) == 0x000028, "Member 'FKeepEventWaveData::WarmupTime' has a wrong offset!");
static_assert(offsetof(FKeepEventWaveData, EncounterTime) == 0x00002C, "Member 'FKeepEventWaveData::EncounterTime' has a wrong offset!");
static_assert(offsetof(FKeepEventWaveData, DifficultyLevel) == 0x000030, "Member 'FKeepEventWaveData::DifficultyLevel' has a wrong offset!");
static_assert(offsetof(FKeepEventWaveData, AliveMultiplier) == 0x000034, "Member 'FKeepEventWaveData::AliveMultiplier' has a wrong offset!");
static_assert(offsetof(FKeepEventWaveData, EnemySpawnBits1) == 0x000038, "Member 'FKeepEventWaveData::EnemySpawnBits1' has a wrong offset!");
static_assert(offsetof(FKeepEventWaveData, EnemySpawnBits2) == 0x00003C, "Member 'FKeepEventWaveData::EnemySpawnBits2' has a wrong offset!");

// ScriptStruct FortniteGame.FortGlobalMission
// 0x0178 (0x0178 - 0x0000)
struct FFortGlobalMission
{
public:
	TSoftObjectPtr<class UFortMissionInfo>        MissionInfo;                                       // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EFortTheaterType>                      AllowedTheaterTypes;                               // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      TheaterTagQuery;                                   // 0x0038(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, AssetRegistrySearchable, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      RegionTagQuery;                                    // 0x0080(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, AssetRegistrySearchable, NativeAccessSpecifierPublic)
	TArray<EFortZoneType>                         AllowedZoneTypes;                                  // 0x00C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      ZoneTagQuery;                                      // 0x00D8(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, AssetRegistrySearchable, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      PrimaryMissionTagQuery;                            // 0x0120(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, AssetRegistrySearchable, NativeAccessSpecifierPublic)
	float                                         MaxDifficultyLevel;                                // 0x0168(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDifficultyLevel;                                // 0x016C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPrototype;                                      // 0x0170(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowInTestMaps;                                  // 0x0171(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_172[0x6];                                      // 0x0172(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortGlobalMission) == 0x000008, "Wrong alignment on FFortGlobalMission");
static_assert(sizeof(FFortGlobalMission) == 0x000178, "Wrong size on FFortGlobalMission");
static_assert(offsetof(FFortGlobalMission, MissionInfo) == 0x000000, "Member 'FFortGlobalMission::MissionInfo' has a wrong offset!");
static_assert(offsetof(FFortGlobalMission, AllowedTheaterTypes) == 0x000028, "Member 'FFortGlobalMission::AllowedTheaterTypes' has a wrong offset!");
static_assert(offsetof(FFortGlobalMission, TheaterTagQuery) == 0x000038, "Member 'FFortGlobalMission::TheaterTagQuery' has a wrong offset!");
static_assert(offsetof(FFortGlobalMission, RegionTagQuery) == 0x000080, "Member 'FFortGlobalMission::RegionTagQuery' has a wrong offset!");
static_assert(offsetof(FFortGlobalMission, AllowedZoneTypes) == 0x0000C8, "Member 'FFortGlobalMission::AllowedZoneTypes' has a wrong offset!");
static_assert(offsetof(FFortGlobalMission, ZoneTagQuery) == 0x0000D8, "Member 'FFortGlobalMission::ZoneTagQuery' has a wrong offset!");
static_assert(offsetof(FFortGlobalMission, PrimaryMissionTagQuery) == 0x000120, "Member 'FFortGlobalMission::PrimaryMissionTagQuery' has a wrong offset!");
static_assert(offsetof(FFortGlobalMission, MaxDifficultyLevel) == 0x000168, "Member 'FFortGlobalMission::MaxDifficultyLevel' has a wrong offset!");
static_assert(offsetof(FFortGlobalMission, MinDifficultyLevel) == 0x00016C, "Member 'FFortGlobalMission::MinDifficultyLevel' has a wrong offset!");
static_assert(offsetof(FFortGlobalMission, bIsPrototype) == 0x000170, "Member 'FFortGlobalMission::bIsPrototype' has a wrong offset!");
static_assert(offsetof(FFortGlobalMission, bAllowInTestMaps) == 0x000171, "Member 'FFortGlobalMission::bAllowInTestMaps' has a wrong offset!");

// ScriptStruct FortniteGame.FortAttributeInitializationKey
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FFortAttributeInitializationKey final
{
public:
	class FName                                   AttributeInitCategory;                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeInitSubCategory;                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAttributeInitializationKey) == 0x000008, "Wrong alignment on FFortAttributeInitializationKey");
static_assert(sizeof(FFortAttributeInitializationKey) == 0x000010, "Wrong size on FFortAttributeInitializationKey");
static_assert(offsetof(FFortAttributeInitializationKey, AttributeInitCategory) == 0x000000, "Member 'FFortAttributeInitializationKey::AttributeInitCategory' has a wrong offset!");
static_assert(offsetof(FFortAttributeInitializationKey, AttributeInitSubCategory) == 0x000008, "Member 'FFortAttributeInitializationKey::AttributeInitSubCategory' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayAttributeData
// 0x0010 (0x0020 - 0x0010)
struct FFortGameplayAttributeData final : public FGameplayAttributeData
{
public:
	float                                         Minimum;                                           // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Maximum;                                           // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsClamped;                                        // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldClampBase;                                  // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortGameplayAttributeData) == 0x000008, "Wrong alignment on FFortGameplayAttributeData");
static_assert(sizeof(FFortGameplayAttributeData) == 0x000020, "Wrong size on FFortGameplayAttributeData");
static_assert(offsetof(FFortGameplayAttributeData, Minimum) == 0x000010, "Member 'FFortGameplayAttributeData::Minimum' has a wrong offset!");
static_assert(offsetof(FFortGameplayAttributeData, Maximum) == 0x000014, "Member 'FFortGameplayAttributeData::Maximum' has a wrong offset!");
static_assert(offsetof(FFortGameplayAttributeData, bIsClamped) == 0x000018, "Member 'FFortGameplayAttributeData::bIsClamped' has a wrong offset!");
static_assert(offsetof(FFortGameplayAttributeData, bShouldClampBase) == 0x000019, "Member 'FFortGameplayAttributeData::bShouldClampBase' has a wrong offset!");

// ScriptStruct FortniteGame.FortBadgeScoringData
// 0x0010 (0x0018 - 0x0008)
struct FFortBadgeScoringData final : public FTableRowBase
{
public:
	int32                                         ScoreAwarded;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionPoints;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStatCategory                                 ScoreCategory;                                     // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ScoreThreshold;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortBadgeScoringData) == 0x000008, "Wrong alignment on FFortBadgeScoringData");
static_assert(sizeof(FFortBadgeScoringData) == 0x000018, "Wrong size on FFortBadgeScoringData");
static_assert(offsetof(FFortBadgeScoringData, ScoreAwarded) == 0x000008, "Member 'FFortBadgeScoringData::ScoreAwarded' has a wrong offset!");
static_assert(offsetof(FFortBadgeScoringData, MissionPoints) == 0x00000C, "Member 'FFortBadgeScoringData::MissionPoints' has a wrong offset!");
static_assert(offsetof(FFortBadgeScoringData, ScoreCategory) == 0x000010, "Member 'FFortBadgeScoringData::ScoreCategory' has a wrong offset!");
static_assert(offsetof(FFortBadgeScoringData, ScoreThreshold) == 0x000014, "Member 'FFortBadgeScoringData::ScoreThreshold' has a wrong offset!");

// ScriptStruct FortniteGame.QuickBarAndSlot
// 0x0008 (0x0008 - 0x0000)
struct FQuickBarAndSlot final
{
public:
	EFortQuickBars                                QuickBarType;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         QuickBarSlot;                                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuickBarAndSlot) == 0x000004, "Wrong alignment on FQuickBarAndSlot");
static_assert(sizeof(FQuickBarAndSlot) == 0x000008, "Wrong size on FQuickBarAndSlot");
static_assert(offsetof(FQuickBarAndSlot, QuickBarType) == 0x000000, "Member 'FQuickBarAndSlot::QuickBarType' has a wrong offset!");
static_assert(offsetof(FQuickBarAndSlot, QuickBarSlot) == 0x000004, "Member 'FQuickBarAndSlot::QuickBarSlot' has a wrong offset!");

// ScriptStruct FortniteGame.FortAnalyticsEventAttribute
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FFortAnalyticsEventAttribute final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAnalyticsEventAttribute) == 0x000008, "Wrong alignment on FFortAnalyticsEventAttribute");
static_assert(sizeof(FFortAnalyticsEventAttribute) == 0x000020, "Wrong size on FFortAnalyticsEventAttribute");

// ScriptStruct FortniteGame.DistanceToTargetComparison
// 0x0030 (0x0030 - 0x0000)
struct FDistanceToTargetComparison final
{
public:
	bool                                          bUseOverriddenValue;                               // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverriddenValue;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  DistanceDataTags;                                  // 0x0008(0x0020)(Edit, NativeAccessSpecifierPublic)
	EArithmeticKeyOperation                       Operator;                                          // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETargetDistanceComparisonType                 ComparisonType;                                    // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDistanceToTargetComparison) == 0x000008, "Wrong alignment on FDistanceToTargetComparison");
static_assert(sizeof(FDistanceToTargetComparison) == 0x000030, "Wrong size on FDistanceToTargetComparison");
static_assert(offsetof(FDistanceToTargetComparison, bUseOverriddenValue) == 0x000000, "Member 'FDistanceToTargetComparison::bUseOverriddenValue' has a wrong offset!");
static_assert(offsetof(FDistanceToTargetComparison, OverriddenValue) == 0x000004, "Member 'FDistanceToTargetComparison::OverriddenValue' has a wrong offset!");
static_assert(offsetof(FDistanceToTargetComparison, DistanceDataTags) == 0x000008, "Member 'FDistanceToTargetComparison::DistanceDataTags' has a wrong offset!");
static_assert(offsetof(FDistanceToTargetComparison, Operator) == 0x000028, "Member 'FDistanceToTargetComparison::Operator' has a wrong offset!");
static_assert(offsetof(FDistanceToTargetComparison, ComparisonType) == 0x000029, "Member 'FDistanceToTargetComparison::ComparisonType' has a wrong offset!");

// ScriptStruct FortniteGame.DeployableBaseInstance
// 0x000C (0x0018 - 0x000C)
struct FDeployableBaseInstance final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADeployableBasePlot*                    DeployableBase;                                    // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDeployableBaseInstance) == 0x000008, "Wrong alignment on FDeployableBaseInstance");
static_assert(sizeof(FDeployableBaseInstance) == 0x000018, "Wrong size on FDeployableBaseInstance");
static_assert(offsetof(FDeployableBaseInstance, DeployableBase) == 0x000010, "Member 'FDeployableBaseInstance::DeployableBase' has a wrong offset!");

// ScriptStruct FortniteGame.DeployableBaseArray
// 0x0010 (0x00C0 - 0x00B0)
struct FDeployableBaseArray final : public FFastArraySerializer
{
public:
	TArray<struct FDeployableBaseInstance>        DeployableBases;                                   // 0x00B0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FDeployableBaseArray) == 0x000008, "Wrong alignment on FDeployableBaseArray");
static_assert(sizeof(FDeployableBaseArray) == 0x0000C0, "Wrong size on FDeployableBaseArray");
static_assert(offsetof(FDeployableBaseArray, DeployableBases) == 0x0000B0, "Member 'FDeployableBaseArray::DeployableBases' has a wrong offset!");

// ScriptStruct FortniteGame.FortBuildingInstruction
// 0x0070 (0x0070 - 0x0000)
struct FFortBuildingInstruction final
{
public:
	struct FFortActorRecord                       ActorRecord;                                       // 0x0000(0x0070)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortBuildingInstruction) == 0x000010, "Wrong alignment on FFortBuildingInstruction");
static_assert(sizeof(FFortBuildingInstruction) == 0x000070, "Wrong size on FFortBuildingInstruction");
static_assert(offsetof(FFortBuildingInstruction, ActorRecord) == 0x000000, "Member 'FFortBuildingInstruction::ActorRecord' has a wrong offset!");

// ScriptStruct FortniteGame.FortCollectionBookSlotData
// 0x0038 (0x0040 - 0x0008)
struct FFortCollectionBookSlotData final : public FTableRowBase
{
public:
	class FName                                   SlotXpWeightName;                                  // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotSourceId;                                      // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotSourceId2;                                     // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UFortItemDefinition>> AllowedItems;                                      // 0x0020(0x0010)(Edit, ZeroConstructor, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FGameplayTag>                   AllowedWorkerPersonalities;                        // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCollectionBookSlotData) == 0x000008, "Wrong alignment on FFortCollectionBookSlotData");
static_assert(sizeof(FFortCollectionBookSlotData) == 0x000040, "Wrong size on FFortCollectionBookSlotData");
static_assert(offsetof(FFortCollectionBookSlotData, SlotXpWeightName) == 0x000008, "Member 'FFortCollectionBookSlotData::SlotXpWeightName' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookSlotData, SlotSourceId) == 0x000010, "Member 'FFortCollectionBookSlotData::SlotSourceId' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookSlotData, SlotSourceId2) == 0x000018, "Member 'FFortCollectionBookSlotData::SlotSourceId2' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookSlotData, AllowedItems) == 0x000020, "Member 'FFortCollectionBookSlotData::AllowedItems' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookSlotData, AllowedWorkerPersonalities) == 0x000030, "Member 'FFortCollectionBookSlotData::AllowedWorkerPersonalities' has a wrong offset!");

// ScriptStruct FortniteGame.FortQuestObjectiveStatTableRow
// 0x00D0 (0x00D8 - 0x0008)
struct FFortQuestObjectiveStatTableRow final : public FTableRowBase
{
public:
	EFortQuestObjectiveStatEvent                  Type;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TargetTags;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SourceTags;                                        // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContextTags;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Condition;                                         // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TemplateId;                                        // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TargetTagContainer;                                // 0x0060(0x0020)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  SourceTagContainer;                                // 0x0080(0x0020)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ContextTagContainer;                               // 0x00A0(0x0020)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	bool                                          bIsCached;                                         // 0x00C0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x17];                                      // 0x00C1(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortQuestObjectiveStatTableRow) == 0x000008, "Wrong alignment on FFortQuestObjectiveStatTableRow");
static_assert(sizeof(FFortQuestObjectiveStatTableRow) == 0x0000D8, "Wrong size on FFortQuestObjectiveStatTableRow");
static_assert(offsetof(FFortQuestObjectiveStatTableRow, Type) == 0x000008, "Member 'FFortQuestObjectiveStatTableRow::Type' has a wrong offset!");
static_assert(offsetof(FFortQuestObjectiveStatTableRow, TargetTags) == 0x000010, "Member 'FFortQuestObjectiveStatTableRow::TargetTags' has a wrong offset!");
static_assert(offsetof(FFortQuestObjectiveStatTableRow, SourceTags) == 0x000020, "Member 'FFortQuestObjectiveStatTableRow::SourceTags' has a wrong offset!");
static_assert(offsetof(FFortQuestObjectiveStatTableRow, ContextTags) == 0x000030, "Member 'FFortQuestObjectiveStatTableRow::ContextTags' has a wrong offset!");
static_assert(offsetof(FFortQuestObjectiveStatTableRow, Condition) == 0x000040, "Member 'FFortQuestObjectiveStatTableRow::Condition' has a wrong offset!");
static_assert(offsetof(FFortQuestObjectiveStatTableRow, TemplateId) == 0x000050, "Member 'FFortQuestObjectiveStatTableRow::TemplateId' has a wrong offset!");
static_assert(offsetof(FFortQuestObjectiveStatTableRow, TargetTagContainer) == 0x000060, "Member 'FFortQuestObjectiveStatTableRow::TargetTagContainer' has a wrong offset!");
static_assert(offsetof(FFortQuestObjectiveStatTableRow, SourceTagContainer) == 0x000080, "Member 'FFortQuestObjectiveStatTableRow::SourceTagContainer' has a wrong offset!");
static_assert(offsetof(FFortQuestObjectiveStatTableRow, ContextTagContainer) == 0x0000A0, "Member 'FFortQuestObjectiveStatTableRow::ContextTagContainer' has a wrong offset!");
static_assert(offsetof(FFortQuestObjectiveStatTableRow, bIsCached) == 0x0000C0, "Member 'FFortQuestObjectiveStatTableRow::bIsCached' has a wrong offset!");

// ScriptStruct FortniteGame.DeployableBaseSupportSettings
// 0x0098 (0x0098 - 0x0000)
struct FDeployableBaseSupportSettings final
{
public:
	bool                                          bUseDeployableBases;                               // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UFortDeployableBaseCloudSaveItemDefinition> DeployableBaseCloudSaveItemDef;                    // 0x0008(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   DeployableBasePlot;                                // 0x0030(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortDeployableBaseSkillTreeUnlocks> SupportedUnlocks;                                  // 0x0058(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeployableBasesReadOnly;                          // 0x0080(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDeployableBaseUseType                        SupportedUseType;                                  // 0x0081(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortTieredCollectionLayout*>    TieredCollectionLayouts;                           // 0x0088(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDeployableBaseSupportSettings) == 0x000008, "Wrong alignment on FDeployableBaseSupportSettings");
static_assert(sizeof(FDeployableBaseSupportSettings) == 0x000098, "Wrong size on FDeployableBaseSupportSettings");
static_assert(offsetof(FDeployableBaseSupportSettings, bUseDeployableBases) == 0x000000, "Member 'FDeployableBaseSupportSettings::bUseDeployableBases' has a wrong offset!");
static_assert(offsetof(FDeployableBaseSupportSettings, DeployableBaseCloudSaveItemDef) == 0x000008, "Member 'FDeployableBaseSupportSettings::DeployableBaseCloudSaveItemDef' has a wrong offset!");
static_assert(offsetof(FDeployableBaseSupportSettings, DeployableBasePlot) == 0x000030, "Member 'FDeployableBaseSupportSettings::DeployableBasePlot' has a wrong offset!");
static_assert(offsetof(FDeployableBaseSupportSettings, SupportedUnlocks) == 0x000058, "Member 'FDeployableBaseSupportSettings::SupportedUnlocks' has a wrong offset!");
static_assert(offsetof(FDeployableBaseSupportSettings, bDeployableBasesReadOnly) == 0x000080, "Member 'FDeployableBaseSupportSettings::bDeployableBasesReadOnly' has a wrong offset!");
static_assert(offsetof(FDeployableBaseSupportSettings, SupportedUseType) == 0x000081, "Member 'FDeployableBaseSupportSettings::SupportedUseType' has a wrong offset!");
static_assert(offsetof(FDeployableBaseSupportSettings, TieredCollectionLayouts) == 0x000088, "Member 'FDeployableBaseSupportSettings::TieredCollectionLayouts' has a wrong offset!");

// ScriptStruct FortniteGame.RecipeQuantityPair
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FRecipeQuantityPair final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRecipeQuantityPair) == 0x000008, "Wrong alignment on FRecipeQuantityPair");
static_assert(sizeof(FRecipeQuantityPair) == 0x000010, "Wrong size on FRecipeQuantityPair");

// ScriptStruct FortniteGame.FortEventConditional
// 0x0038 (0x0038 - 0x0000)
struct FFortEventConditional final
{
public:
	EFortEventConditionType                       ConditionalType;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   StatToCompare;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStatRecordingPeriod                          RelevantPeriod;                                    // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCompare                                  ComparisonType;                                    // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortSchematicItemDefinition*           CraftingItem;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanCraft;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStat*                                  Stat;                                              // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  FPC;                                               // 0x0030(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEventConditional) == 0x000008, "Wrong alignment on FFortEventConditional");
static_assert(sizeof(FFortEventConditional) == 0x000038, "Wrong size on FFortEventConditional");
static_assert(offsetof(FFortEventConditional, ConditionalType) == 0x000000, "Member 'FFortEventConditional::ConditionalType' has a wrong offset!");
static_assert(offsetof(FFortEventConditional, StatToCompare) == 0x000008, "Member 'FFortEventConditional::StatToCompare' has a wrong offset!");
static_assert(offsetof(FFortEventConditional, RelevantPeriod) == 0x000010, "Member 'FFortEventConditional::RelevantPeriod' has a wrong offset!");
static_assert(offsetof(FFortEventConditional, ComparisonType) == 0x000011, "Member 'FFortEventConditional::ComparisonType' has a wrong offset!");
static_assert(offsetof(FFortEventConditional, Value) == 0x000014, "Member 'FFortEventConditional::Value' has a wrong offset!");
static_assert(offsetof(FFortEventConditional, CraftingItem) == 0x000018, "Member 'FFortEventConditional::CraftingItem' has a wrong offset!");
static_assert(offsetof(FFortEventConditional, bCanCraft) == 0x000020, "Member 'FFortEventConditional::bCanCraft' has a wrong offset!");
static_assert(offsetof(FFortEventConditional, Stat) == 0x000028, "Member 'FFortEventConditional::Stat' has a wrong offset!");
static_assert(offsetof(FFortEventConditional, FPC) == 0x000030, "Member 'FFortEventConditional::FPC' has a wrong offset!");

// ScriptStruct FortniteGame.CarriedObjectAttachmentInfo
// 0x0028 (0x0028 - 0x0000)
struct FCarriedObjectAttachmentInfo final
{
public:
	class AActor*                                 AttachParent;                                      // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativeTranslation;                               // 0x0010(0x000C)(Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x001C(0x000C)(Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCarriedObjectAttachmentInfo) == 0x000008, "Wrong alignment on FCarriedObjectAttachmentInfo");
static_assert(sizeof(FCarriedObjectAttachmentInfo) == 0x000028, "Wrong size on FCarriedObjectAttachmentInfo");
static_assert(offsetof(FCarriedObjectAttachmentInfo, AttachParent) == 0x000000, "Member 'FCarriedObjectAttachmentInfo::AttachParent' has a wrong offset!");
static_assert(offsetof(FCarriedObjectAttachmentInfo, SocketName) == 0x000008, "Member 'FCarriedObjectAttachmentInfo::SocketName' has a wrong offset!");
static_assert(offsetof(FCarriedObjectAttachmentInfo, RelativeTranslation) == 0x000010, "Member 'FCarriedObjectAttachmentInfo::RelativeTranslation' has a wrong offset!");
static_assert(offsetof(FCarriedObjectAttachmentInfo, RelativeRotation) == 0x00001C, "Member 'FCarriedObjectAttachmentInfo::RelativeRotation' has a wrong offset!");

// ScriptStruct FortniteGame.FortSearchPassState
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FFortSearchPassState final
{
public:
	int32                                         BestSessionIdx;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasCanceled;                                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortSessionHelperJoinResult                  FailureType;                                       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMatchmakingState                             MatchmakingState;                                  // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPartyReservationResult                       LastBeaconResponse;                                // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortSearchPassState) == 0x000008, "Wrong alignment on FFortSearchPassState");
static_assert(sizeof(FFortSearchPassState) == 0x000018, "Wrong size on FFortSearchPassState");
static_assert(offsetof(FFortSearchPassState, BestSessionIdx) == 0x000000, "Member 'FFortSearchPassState::BestSessionIdx' has a wrong offset!");
static_assert(offsetof(FFortSearchPassState, bWasCanceled) == 0x000004, "Member 'FFortSearchPassState::bWasCanceled' has a wrong offset!");
static_assert(offsetof(FFortSearchPassState, FailureType) == 0x000005, "Member 'FFortSearchPassState::FailureType' has a wrong offset!");
static_assert(offsetof(FFortSearchPassState, MatchmakingState) == 0x000006, "Member 'FFortSearchPassState::MatchmakingState' has a wrong offset!");
static_assert(offsetof(FFortSearchPassState, LastBeaconResponse) == 0x000007, "Member 'FFortSearchPassState::LastBeaconResponse' has a wrong offset!");

// ScriptStruct FortniteGame.FortProceduralCatalogCostPriceFactor
// 0x0008 (0x0010 - 0x0008)
struct FFortProceduralCatalogCostPriceFactor final : public FTableRowBase
{
public:
	float                                         PriceFactor;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortProceduralCatalogCostPriceFactor) == 0x000008, "Wrong alignment on FFortProceduralCatalogCostPriceFactor");
static_assert(sizeof(FFortProceduralCatalogCostPriceFactor) == 0x000010, "Wrong size on FFortProceduralCatalogCostPriceFactor");
static_assert(offsetof(FFortProceduralCatalogCostPriceFactor, PriceFactor) == 0x000008, "Member 'FFortProceduralCatalogCostPriceFactor::PriceFactor' has a wrong offset!");

// ScriptStruct FortniteGame.FortClientAnnouncementData_Conversation
// 0x0010 (0x0010 - 0x0000)
struct FFortClientAnnouncementData_Conversation final : public FFortClientAnnouncementData
{
public:
	class UFortConversation*                      Conversation;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAnnouncementDisplayPreference            ConversationDisplayPreference;                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortClientAnnouncementData_Conversation) == 0x000008, "Wrong alignment on FFortClientAnnouncementData_Conversation");
static_assert(sizeof(FFortClientAnnouncementData_Conversation) == 0x000010, "Wrong size on FFortClientAnnouncementData_Conversation");
static_assert(offsetof(FFortClientAnnouncementData_Conversation, Conversation) == 0x000000, "Member 'FFortClientAnnouncementData_Conversation::Conversation' has a wrong offset!");
static_assert(offsetof(FFortClientAnnouncementData_Conversation, ConversationDisplayPreference) == 0x000008, "Member 'FFortClientAnnouncementData_Conversation::ConversationDisplayPreference' has a wrong offset!");

// ScriptStruct FortniteGame.MatchmakingParams
// 0x00A8 (0x00A8 - 0x0000)
struct FMatchmakingParams final
{
public:
	int32                                         ControllerId;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartySize;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DatacenterId;                                      // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlaylistId;                                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MatchmakingLevel;                                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionDifficultyMin;                              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionDifficultyMax;                              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TheaterId;                                         // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ZoneInstanceId;                                    // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WUID;                                              // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       WorldOwnerId;                                      // 0x0058(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionId;                                         // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMatchmakingStartLocation                     StartWith;                                         // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMatchmakingFlags                             Flags;                                             // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x2];                                       // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ChanceToHostOverride;                              // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChanceToHostIncrease;                              // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumAttempts;                                       // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSearchResultsOverride;                          // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxProcessedSearchResults;                         // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchmakingParams) == 0x000008, "Wrong alignment on FMatchmakingParams");
static_assert(sizeof(FMatchmakingParams) == 0x0000A8, "Wrong size on FMatchmakingParams");
static_assert(offsetof(FMatchmakingParams, ControllerId) == 0x000000, "Member 'FMatchmakingParams::ControllerId' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, PartySize) == 0x000004, "Member 'FMatchmakingParams::PartySize' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, DatacenterId) == 0x000008, "Member 'FMatchmakingParams::DatacenterId' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, PlaylistId) == 0x000018, "Member 'FMatchmakingParams::PlaylistId' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, MatchmakingLevel) == 0x00001C, "Member 'FMatchmakingParams::MatchmakingLevel' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, MissionDifficultyMin) == 0x000020, "Member 'FMatchmakingParams::MissionDifficultyMin' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, MissionDifficultyMax) == 0x000024, "Member 'FMatchmakingParams::MissionDifficultyMax' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, TheaterId) == 0x000028, "Member 'FMatchmakingParams::TheaterId' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, ZoneInstanceId) == 0x000038, "Member 'FMatchmakingParams::ZoneInstanceId' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, WUID) == 0x000048, "Member 'FMatchmakingParams::WUID' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, WorldOwnerId) == 0x000058, "Member 'FMatchmakingParams::WorldOwnerId' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, SessionId) == 0x000080, "Member 'FMatchmakingParams::SessionId' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, StartWith) == 0x000090, "Member 'FMatchmakingParams::StartWith' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, Flags) == 0x000091, "Member 'FMatchmakingParams::Flags' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, ChanceToHostOverride) == 0x000094, "Member 'FMatchmakingParams::ChanceToHostOverride' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, ChanceToHostIncrease) == 0x000098, "Member 'FMatchmakingParams::ChanceToHostIncrease' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, NumAttempts) == 0x00009C, "Member 'FMatchmakingParams::NumAttempts' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, MaxSearchResultsOverride) == 0x0000A0, "Member 'FMatchmakingParams::MaxSearchResultsOverride' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, MaxProcessedSearchResults) == 0x0000A4, "Member 'FMatchmakingParams::MaxProcessedSearchResults' has a wrong offset!");

// ScriptStruct FortniteGame.FortQuestObjectiveCompletion
// 0x0028 (0x0028 - 0x0000)
struct FFortQuestObjectiveCompletion final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x14];                                      // 0x0014(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortQuestObjectiveCompletion) == 0x000008, "Wrong alignment on FFortQuestObjectiveCompletion");
static_assert(sizeof(FFortQuestObjectiveCompletion) == 0x000028, "Wrong size on FFortQuestObjectiveCompletion");
static_assert(offsetof(FFortQuestObjectiveCompletion, StatName) == 0x000000, "Member 'FFortQuestObjectiveCompletion::StatName' has a wrong offset!");
static_assert(offsetof(FFortQuestObjectiveCompletion, Count) == 0x000010, "Member 'FFortQuestObjectiveCompletion::Count' has a wrong offset!");

// ScriptStruct FortniteGame.FortClientAnnouncementData_ZoneModifiers
// 0x0010 (0x0010 - 0x0000)
struct FFortClientAnnouncementData_ZoneModifiers final : public FFortClientAnnouncementData
{
public:
	TArray<class UFortGameplayModifierItemDefinition*> Modifiers;                                         // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortClientAnnouncementData_ZoneModifiers) == 0x000008, "Wrong alignment on FFortClientAnnouncementData_ZoneModifiers");
static_assert(sizeof(FFortClientAnnouncementData_ZoneModifiers) == 0x000010, "Wrong size on FFortClientAnnouncementData_ZoneModifiers");
static_assert(offsetof(FFortClientAnnouncementData_ZoneModifiers, Modifiers) == 0x000000, "Member 'FFortClientAnnouncementData_ZoneModifiers::Modifiers' has a wrong offset!");

// ScriptStruct FortniteGame.MMAttemptState
// 0x000C (0x000C - 0x0000)
struct FMMAttemptState final
{
public:
	int32                                         BestSessionIdx;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSearchResults;                                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMatchmakingState                             State;                                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPartyReservationResult                       LastBeaconResponse;                                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMMAttemptState) == 0x000004, "Wrong alignment on FMMAttemptState");
static_assert(sizeof(FMMAttemptState) == 0x00000C, "Wrong size on FMMAttemptState");
static_assert(offsetof(FMMAttemptState, BestSessionIdx) == 0x000000, "Member 'FMMAttemptState::BestSessionIdx' has a wrong offset!");
static_assert(offsetof(FMMAttemptState, NumSearchResults) == 0x000004, "Member 'FMMAttemptState::NumSearchResults' has a wrong offset!");
static_assert(offsetof(FMMAttemptState, State) == 0x000008, "Member 'FMMAttemptState::State' has a wrong offset!");
static_assert(offsetof(FMMAttemptState, LastBeaconResponse) == 0x000009, "Member 'FMMAttemptState::LastBeaconResponse' has a wrong offset!");

// ScriptStruct FortniteGame.FortClientAnnouncementQueue
// 0x0010 (0x0010 - 0x0000)
struct FFortClientAnnouncementQueue final
{
public:
	TArray<class AFortClientAnnouncement*>        Announcements;                                     // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortClientAnnouncementQueue) == 0x000008, "Wrong alignment on FFortClientAnnouncementQueue");
static_assert(sizeof(FFortClientAnnouncementQueue) == 0x000010, "Wrong size on FFortClientAnnouncementQueue");
static_assert(offsetof(FFortClientAnnouncementQueue, Announcements) == 0x000000, "Member 'FFortClientAnnouncementQueue::Announcements' has a wrong offset!");

// ScriptStruct FortniteGame.FortEventFlagsNotification
// 0x0018 (0x0018 - 0x0000)
struct FFortEventFlagsNotification final
{
public:
	TArray<class FString>                         EventFlags;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              RefreshTime;                                       // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEventFlagsNotification) == 0x000008, "Wrong alignment on FFortEventFlagsNotification");
static_assert(sizeof(FFortEventFlagsNotification) == 0x000018, "Wrong size on FFortEventFlagsNotification");
static_assert(offsetof(FFortEventFlagsNotification, EventFlags) == 0x000000, "Member 'FFortEventFlagsNotification::EventFlags' has a wrong offset!");
static_assert(offsetof(FFortEventFlagsNotification, RefreshTime) == 0x000010, "Member 'FFortEventFlagsNotification::RefreshTime' has a wrong offset!");

// ScriptStruct FortniteGame.FortDestroyedActorRecord
// 0x0050 (0x0050 - 0x0000)
struct FFortDestroyedActorRecord final
{
public:
	struct FGuid                                  ActorGuid;                                         // 0x0000(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ABuildingActor>             ActorClass;                                        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ActorTransform;                                    // 0x0020(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortDestroyedActorRecord) == 0x000010, "Wrong alignment on FFortDestroyedActorRecord");
static_assert(sizeof(FFortDestroyedActorRecord) == 0x000050, "Wrong size on FFortDestroyedActorRecord");
static_assert(offsetof(FFortDestroyedActorRecord, ActorGuid) == 0x000000, "Member 'FFortDestroyedActorRecord::ActorGuid' has a wrong offset!");
static_assert(offsetof(FFortDestroyedActorRecord, ActorClass) == 0x000010, "Member 'FFortDestroyedActorRecord::ActorClass' has a wrong offset!");
static_assert(offsetof(FFortDestroyedActorRecord, ActorTransform) == 0x000020, "Member 'FFortDestroyedActorRecord::ActorTransform' has a wrong offset!");

// ScriptStruct FortniteGame.FortPendingSlottedItemOperation
// 0x0018 (0x0018 - 0x0000)
struct FFortPendingSlottedItemOperation final
{
public:
	class FString                                 SlottedItemId;                                     // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotRowName;                                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPendingSlottedItemOperation) == 0x000008, "Wrong alignment on FFortPendingSlottedItemOperation");
static_assert(sizeof(FFortPendingSlottedItemOperation) == 0x000018, "Wrong size on FFortPendingSlottedItemOperation");
static_assert(offsetof(FFortPendingSlottedItemOperation, SlottedItemId) == 0x000000, "Member 'FFortPendingSlottedItemOperation::SlottedItemId' has a wrong offset!");
static_assert(offsetof(FFortPendingSlottedItemOperation, SlotRowName) == 0x000010, "Member 'FFortPendingSlottedItemOperation::SlotRowName' has a wrong offset!");

// ScriptStruct FortniteGame.FortTimeOfDayTheme
// 0x0040 (0x0040 - 0x0000)
struct FFortTimeOfDayTheme final
{
public:
	TArray<class UFortTimeOfDayCollection*>       TimeOfDayCollections;                              // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<TSoftClassPtr<class UClass>>           AdditionalTimeOfDayManagers;                       // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSoftClassPtr<class UClass>>           ProhibitedTimeOfDayManagers;                       // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSoftClassPtr<class UClass>>           ValidTimeOfDayManagers;                            // 0x0030(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortTimeOfDayTheme) == 0x000008, "Wrong alignment on FFortTimeOfDayTheme");
static_assert(sizeof(FFortTimeOfDayTheme) == 0x000040, "Wrong size on FFortTimeOfDayTheme");
static_assert(offsetof(FFortTimeOfDayTheme, TimeOfDayCollections) == 0x000000, "Member 'FFortTimeOfDayTheme::TimeOfDayCollections' has a wrong offset!");
static_assert(offsetof(FFortTimeOfDayTheme, AdditionalTimeOfDayManagers) == 0x000010, "Member 'FFortTimeOfDayTheme::AdditionalTimeOfDayManagers' has a wrong offset!");
static_assert(offsetof(FFortTimeOfDayTheme, ProhibitedTimeOfDayManagers) == 0x000020, "Member 'FFortTimeOfDayTheme::ProhibitedTimeOfDayManagers' has a wrong offset!");
static_assert(offsetof(FFortTimeOfDayTheme, ValidTimeOfDayManagers) == 0x000030, "Member 'FFortTimeOfDayTheme::ValidTimeOfDayManagers' has a wrong offset!");

// ScriptStruct FortniteGame.FortBatchUpdatePlayer_Update
// 0x00F8 (0x00F8 - 0x0000)
struct FFortBatchUpdatePlayer_Update final
{
public:
	struct FUniqueNetIdRepl                       AccountId;                                         // 0x0000(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TheaterNum;                                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMcpProfileChangeRequest               TheaterItemUpdate;                                 // 0x0030(0x0058)(NativeAccessSpecifierPublic)
	int32                                         OutpostNum;                                        // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMcpProfileChangeRequest               OutpostItemUpdate;                                 // 0x0090(0x0058)(NativeAccessSpecifierPublic)
	TArray<struct FFortQuestObjectiveCompletion>  QuestObjectiveUpdates;                             // 0x00E8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortBatchUpdatePlayer_Update) == 0x000008, "Wrong alignment on FFortBatchUpdatePlayer_Update");
static_assert(sizeof(FFortBatchUpdatePlayer_Update) == 0x0000F8, "Wrong size on FFortBatchUpdatePlayer_Update");
static_assert(offsetof(FFortBatchUpdatePlayer_Update, AccountId) == 0x000000, "Member 'FFortBatchUpdatePlayer_Update::AccountId' has a wrong offset!");
static_assert(offsetof(FFortBatchUpdatePlayer_Update, TheaterNum) == 0x000028, "Member 'FFortBatchUpdatePlayer_Update::TheaterNum' has a wrong offset!");
static_assert(offsetof(FFortBatchUpdatePlayer_Update, TheaterItemUpdate) == 0x000030, "Member 'FFortBatchUpdatePlayer_Update::TheaterItemUpdate' has a wrong offset!");
static_assert(offsetof(FFortBatchUpdatePlayer_Update, OutpostNum) == 0x000088, "Member 'FFortBatchUpdatePlayer_Update::OutpostNum' has a wrong offset!");
static_assert(offsetof(FFortBatchUpdatePlayer_Update, OutpostItemUpdate) == 0x000090, "Member 'FFortBatchUpdatePlayer_Update::OutpostItemUpdate' has a wrong offset!");
static_assert(offsetof(FFortBatchUpdatePlayer_Update, QuestObjectiveUpdates) == 0x0000E8, "Member 'FFortBatchUpdatePlayer_Update::QuestObjectiveUpdates' has a wrong offset!");

// ScriptStruct FortniteGame.FortCollectionBookStat
// 0x0018 (0x0018 - 0x0000)
struct FFortCollectionBookStat final
{
public:
	TArray<class FString>                         Pages;                                             // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MaxBookXpLevelAchieved;                            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortCollectionBookStat) == 0x000008, "Wrong alignment on FFortCollectionBookStat");
static_assert(sizeof(FFortCollectionBookStat) == 0x000018, "Wrong size on FFortCollectionBookStat");
static_assert(offsetof(FFortCollectionBookStat, Pages) == 0x000000, "Member 'FFortCollectionBookStat::Pages' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookStat, MaxBookXpLevelAchieved) == 0x000010, "Member 'FFortCollectionBookStat::MaxBookXpLevelAchieved' has a wrong offset!");

// ScriptStruct FortniteGame.FortLootLevelData
// 0x0018 (0x0020 - 0x0008)
struct FFortLootLevelData final : public FTableRowBase
{
public:
	class FName                                   Category;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LootLevel;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinItemLevel;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxItemLevel;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortLootLevelData) == 0x000008, "Wrong alignment on FFortLootLevelData");
static_assert(sizeof(FFortLootLevelData) == 0x000020, "Wrong size on FFortLootLevelData");
static_assert(offsetof(FFortLootLevelData, Category) == 0x000008, "Member 'FFortLootLevelData::Category' has a wrong offset!");
static_assert(offsetof(FFortLootLevelData, LootLevel) == 0x000010, "Member 'FFortLootLevelData::LootLevel' has a wrong offset!");
static_assert(offsetof(FFortLootLevelData, MinItemLevel) == 0x000014, "Member 'FFortLootLevelData::MinItemLevel' has a wrong offset!");
static_assert(offsetof(FFortLootLevelData, MaxItemLevel) == 0x000018, "Member 'FFortLootLevelData::MaxItemLevel' has a wrong offset!");

// ScriptStruct FortniteGame.FortCollectionBookPageCategoryTableRow
// 0x0020 (0x0028 - 0x0008)
struct FFortCollectionBookPageCategoryTableRow final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         SortPriority;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortCollectionBookPageCategoryTableRow) == 0x000008, "Wrong alignment on FFortCollectionBookPageCategoryTableRow");
static_assert(sizeof(FFortCollectionBookPageCategoryTableRow) == 0x000028, "Wrong size on FFortCollectionBookPageCategoryTableRow");
static_assert(offsetof(FFortCollectionBookPageCategoryTableRow, Name) == 0x000008, "Member 'FFortCollectionBookPageCategoryTableRow::Name' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookPageCategoryTableRow, SortPriority) == 0x000020, "Member 'FFortCollectionBookPageCategoryTableRow::SortPriority' has a wrong offset!");

// ScriptStruct FortniteGame.FortFeedbackResponse
// 0x0020 (0x0020 - 0x0000)
struct FFortFeedbackResponse final
{
public:
	struct FFortFeedbackHandle                    Handle;                                            // 0x0000(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EFortFeedbackContext                          Context;                                           // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortFeedbackResponse) == 0x000008, "Wrong alignment on FFortFeedbackResponse");
static_assert(sizeof(FFortFeedbackResponse) == 0x000020, "Wrong size on FFortFeedbackResponse");
static_assert(offsetof(FFortFeedbackResponse, Handle) == 0x000000, "Member 'FFortFeedbackResponse::Handle' has a wrong offset!");
static_assert(offsetof(FFortFeedbackResponse, Context) == 0x000018, "Member 'FFortFeedbackResponse::Context' has a wrong offset!");

// ScriptStruct FortniteGame.FortCollectionBookPageData
// 0x0070 (0x0078 - 0x0008)
struct FFortCollectionBookPageData final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, EditConst, NativeAccessSpecifierPublic)
	class FName                                   CategoryId;                                        // 0x0020(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortPriority;                                      // 0x0028(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ProfileId;                                         // 0x0030(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                           SectionRowNames;                                   // 0x0038(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	struct FFortRewardInfo                        Rewards;                                           // 0x0048(0x0030)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCollectionBookPageData) == 0x000008, "Wrong alignment on FFortCollectionBookPageData");
static_assert(sizeof(FFortCollectionBookPageData) == 0x000078, "Wrong size on FFortCollectionBookPageData");
static_assert(offsetof(FFortCollectionBookPageData, Name) == 0x000008, "Member 'FFortCollectionBookPageData::Name' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookPageData, CategoryId) == 0x000020, "Member 'FFortCollectionBookPageData::CategoryId' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookPageData, SortPriority) == 0x000028, "Member 'FFortCollectionBookPageData::SortPriority' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookPageData, ProfileId) == 0x000030, "Member 'FFortCollectionBookPageData::ProfileId' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookPageData, SectionRowNames) == 0x000038, "Member 'FFortCollectionBookPageData::SectionRowNames' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookPageData, Rewards) == 0x000048, "Member 'FFortCollectionBookPageData::Rewards' has a wrong offset!");

// ScriptStruct FortniteGame.FortTheaterTileEditorData
// 0x00C0 (0x00C0 - 0x0000)
struct FFortTheaterTileEditorData final
{
public:
	int32                                         XCoordinate;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         YCoordinate;                                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortZoneTheme>             ZoneTheme;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortRegionInfo*                        Region;                                            // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortRequirementsInfo                  Requirements;                                      // 0x0018(0x0048)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FFortLinkedQuest>               LinkedQuests;                                      // 0x0060(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EFortTheaterMapTileType                       TileType;                                          // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TileTags;                                          // 0x0078(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFortTheaterMissionWeight>      MissionWeightOverrides;                            // 0x0098(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFortTheaterDifficultyWeight>   DifficultyWeightOverrides;                         // 0x00A8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bCanBeMissionAlert;                                // 0x00B8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortTheaterTileEditorData) == 0x000008, "Wrong alignment on FFortTheaterTileEditorData");
static_assert(sizeof(FFortTheaterTileEditorData) == 0x0000C0, "Wrong size on FFortTheaterTileEditorData");
static_assert(offsetof(FFortTheaterTileEditorData, XCoordinate) == 0x000000, "Member 'FFortTheaterTileEditorData::XCoordinate' has a wrong offset!");
static_assert(offsetof(FFortTheaterTileEditorData, YCoordinate) == 0x000004, "Member 'FFortTheaterTileEditorData::YCoordinate' has a wrong offset!");
static_assert(offsetof(FFortTheaterTileEditorData, ZoneTheme) == 0x000008, "Member 'FFortTheaterTileEditorData::ZoneTheme' has a wrong offset!");
static_assert(offsetof(FFortTheaterTileEditorData, Region) == 0x000010, "Member 'FFortTheaterTileEditorData::Region' has a wrong offset!");
static_assert(offsetof(FFortTheaterTileEditorData, Requirements) == 0x000018, "Member 'FFortTheaterTileEditorData::Requirements' has a wrong offset!");
static_assert(offsetof(FFortTheaterTileEditorData, LinkedQuests) == 0x000060, "Member 'FFortTheaterTileEditorData::LinkedQuests' has a wrong offset!");
static_assert(offsetof(FFortTheaterTileEditorData, TileType) == 0x000070, "Member 'FFortTheaterTileEditorData::TileType' has a wrong offset!");
static_assert(offsetof(FFortTheaterTileEditorData, TileTags) == 0x000078, "Member 'FFortTheaterTileEditorData::TileTags' has a wrong offset!");
static_assert(offsetof(FFortTheaterTileEditorData, MissionWeightOverrides) == 0x000098, "Member 'FFortTheaterTileEditorData::MissionWeightOverrides' has a wrong offset!");
static_assert(offsetof(FFortTheaterTileEditorData, DifficultyWeightOverrides) == 0x0000A8, "Member 'FFortTheaterTileEditorData::DifficultyWeightOverrides' has a wrong offset!");
static_assert(offsetof(FFortTheaterTileEditorData, bCanBeMissionAlert) == 0x0000B8, "Member 'FFortTheaterTileEditorData::bCanBeMissionAlert' has a wrong offset!");

// ScriptStruct FortniteGame.FortCollectionBookSectionState
// 0x0018 (0x0018 - 0x0000)
struct FFortCollectionBookSectionState final
{
public:
	class FString                                 Section;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCollectionBookState                      State;                                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortCollectionBookSectionState) == 0x000008, "Wrong alignment on FFortCollectionBookSectionState");
static_assert(sizeof(FFortCollectionBookSectionState) == 0x000018, "Wrong size on FFortCollectionBookSectionState");
static_assert(offsetof(FFortCollectionBookSectionState, Section) == 0x000000, "Member 'FFortCollectionBookSectionState::Section' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookSectionState, State) == 0x000010, "Member 'FFortCollectionBookSectionState::State' has a wrong offset!");

// ScriptStruct FortniteGame.FortItemEntry
// 0x00A4 (0x00B0 - 0x000C)
struct FFortItemEntry final : public FFastArraySerializerItem
{
public:
	int32                                         Count;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PreviousCount;                                     // 0x0010(0x0004)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItemDefinition*                    ItemDefinition;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Durability;                                        // 0x0020(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Level;                                             // 0x0024(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         LoadedAmmo;                                        // 0x0028(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortAlterationItemDefinition*>  AlterationDefinitions;                             // 0x0030(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate)
	class FString                                 ItemSource;                                        // 0x0040(0x0010)(ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGuid                                  ItemGuid;                                          // 0x0050(0x0010)(SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          Inventory_overflow_date;                           // 0x0060(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsReplicatedCopy;                                 // 0x0061(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsDirty;                                          // 0x0062(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_63[0x5];                                       // 0x0063(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortGiftingInfo                       GiftingInfo;                                       // 0x0068(0x0028)(NativeAccessSpecifierPrivate)
	TArray<struct FFortItemEntryStateValue>       StateValues;                                       // 0x0090(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class AFortInventory>          ParentInventory;                                   // 0x00A0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayAbilitySpecHandle             GameplayAbilitySpecHandle;                         // 0x00A8(0x0004)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemEntry) == 0x000008, "Wrong alignment on FFortItemEntry");
static_assert(sizeof(FFortItemEntry) == 0x0000B0, "Wrong size on FFortItemEntry");
static_assert(offsetof(FFortItemEntry, Count) == 0x00000C, "Member 'FFortItemEntry::Count' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, PreviousCount) == 0x000010, "Member 'FFortItemEntry::PreviousCount' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, ItemDefinition) == 0x000018, "Member 'FFortItemEntry::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, Durability) == 0x000020, "Member 'FFortItemEntry::Durability' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, Level) == 0x000024, "Member 'FFortItemEntry::Level' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, LoadedAmmo) == 0x000028, "Member 'FFortItemEntry::LoadedAmmo' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, AlterationDefinitions) == 0x000030, "Member 'FFortItemEntry::AlterationDefinitions' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, ItemSource) == 0x000040, "Member 'FFortItemEntry::ItemSource' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, ItemGuid) == 0x000050, "Member 'FFortItemEntry::ItemGuid' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, Inventory_overflow_date) == 0x000060, "Member 'FFortItemEntry::Inventory_overflow_date' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, bIsReplicatedCopy) == 0x000061, "Member 'FFortItemEntry::bIsReplicatedCopy' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, bIsDirty) == 0x000062, "Member 'FFortItemEntry::bIsDirty' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, GiftingInfo) == 0x000068, "Member 'FFortItemEntry::GiftingInfo' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, StateValues) == 0x000090, "Member 'FFortItemEntry::StateValues' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, ParentInventory) == 0x0000A0, "Member 'FFortItemEntry::ParentInventory' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, GameplayAbilitySpecHandle) == 0x0000A8, "Member 'FFortItemEntry::GameplayAbilitySpecHandle' has a wrong offset!");

// ScriptStruct FortniteGame.FortRewardActivity
// 0x0078 (0x0078 - 0x0000)
struct FFortRewardActivity final
{
public:
	EFortRewardActivityType                       ActivityType;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  ActivityGuid;                                      // 0x0004(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TitleText;                                         // 0x0018(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   DescriptionText;                                   // 0x0030(0x0018)(NativeAccessSpecifierPublic)
	float                                         RewardDisplayTime;                                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortItemEntry>                 RewardItems;                                       // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortItemEntry>                 MissedRewardItems;                                 // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	EFortCompletionResult                         ActivityCompletionResult;                          // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AdditionalCompletionMissionPoints;                 // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortRewardActivity) == 0x000008, "Wrong alignment on FFortRewardActivity");
static_assert(sizeof(FFortRewardActivity) == 0x000078, "Wrong size on FFortRewardActivity");
static_assert(offsetof(FFortRewardActivity, ActivityType) == 0x000000, "Member 'FFortRewardActivity::ActivityType' has a wrong offset!");
static_assert(offsetof(FFortRewardActivity, ActivityGuid) == 0x000004, "Member 'FFortRewardActivity::ActivityGuid' has a wrong offset!");
static_assert(offsetof(FFortRewardActivity, TitleText) == 0x000018, "Member 'FFortRewardActivity::TitleText' has a wrong offset!");
static_assert(offsetof(FFortRewardActivity, DescriptionText) == 0x000030, "Member 'FFortRewardActivity::DescriptionText' has a wrong offset!");
static_assert(offsetof(FFortRewardActivity, RewardDisplayTime) == 0x000048, "Member 'FFortRewardActivity::RewardDisplayTime' has a wrong offset!");
static_assert(offsetof(FFortRewardActivity, RewardItems) == 0x000050, "Member 'FFortRewardActivity::RewardItems' has a wrong offset!");
static_assert(offsetof(FFortRewardActivity, MissedRewardItems) == 0x000060, "Member 'FFortRewardActivity::MissedRewardItems' has a wrong offset!");
static_assert(offsetof(FFortRewardActivity, ActivityCompletionResult) == 0x000070, "Member 'FFortRewardActivity::ActivityCompletionResult' has a wrong offset!");
static_assert(offsetof(FFortRewardActivity, AdditionalCompletionMissionPoints) == 0x000074, "Member 'FFortRewardActivity::AdditionalCompletionMissionPoints' has a wrong offset!");

// ScriptStruct FortniteGame.FortRewardReport
// 0x0068 (0x0068 - 0x0000)
struct FFortRewardReport final
{
public:
	class FText                                   MissionName;                                       // 0x0000(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   TheaterName;                                       // 0x0018(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   Difficulty;                                        // 0x0030(0x0018)(NativeAccessSpecifierPublic)
	float                                         DifficultyValue;                                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortRewardActivity>            RewardActivities;                                  // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIsFinalized;                                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortRewardReport) == 0x000008, "Wrong alignment on FFortRewardReport");
static_assert(sizeof(FFortRewardReport) == 0x000068, "Wrong size on FFortRewardReport");
static_assert(offsetof(FFortRewardReport, MissionName) == 0x000000, "Member 'FFortRewardReport::MissionName' has a wrong offset!");
static_assert(offsetof(FFortRewardReport, TheaterName) == 0x000018, "Member 'FFortRewardReport::TheaterName' has a wrong offset!");
static_assert(offsetof(FFortRewardReport, Difficulty) == 0x000030, "Member 'FFortRewardReport::Difficulty' has a wrong offset!");
static_assert(offsetof(FFortRewardReport, DifficultyValue) == 0x000048, "Member 'FFortRewardReport::DifficultyValue' has a wrong offset!");
static_assert(offsetof(FFortRewardReport, RewardActivities) == 0x000050, "Member 'FFortRewardReport::RewardActivities' has a wrong offset!");
static_assert(offsetof(FFortRewardReport, bIsFinalized) == 0x000060, "Member 'FFortRewardReport::bIsFinalized' has a wrong offset!");

// ScriptStruct FortniteGame.FortCollectionBookXPData
// 0x0040 (0x0048 - 0x0008)
struct FFortCollectionBookXPData final : public FTableRowBase
{
public:
	int32                                         XpToNextLevel;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalXpToGetToThisLevel;                           // 0x000C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortRewardInfo                        Rewards;                                           // 0x0010(0x0030)(Edit, EditConst, NativeAccessSpecifierPublic)
	bool                                          bIsMajorReward;                                    // 0x0040(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoOpenRewardCardPacks;                          // 0x0041(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortCollectionBookXPData) == 0x000008, "Wrong alignment on FFortCollectionBookXPData");
static_assert(sizeof(FFortCollectionBookXPData) == 0x000048, "Wrong size on FFortCollectionBookXPData");
static_assert(offsetof(FFortCollectionBookXPData, XpToNextLevel) == 0x000008, "Member 'FFortCollectionBookXPData::XpToNextLevel' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookXPData, TotalXpToGetToThisLevel) == 0x00000C, "Member 'FFortCollectionBookXPData::TotalXpToGetToThisLevel' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookXPData, Rewards) == 0x000010, "Member 'FFortCollectionBookXPData::Rewards' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookXPData, bIsMajorReward) == 0x000040, "Member 'FFortCollectionBookXPData::bIsMajorReward' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookXPData, bAutoOpenRewardCardPacks) == 0x000041, "Member 'FFortCollectionBookXPData::bAutoOpenRewardCardPacks' has a wrong offset!");

// ScriptStruct FortniteGame.CombatThresholdData
// 0x0028 (0x0028 - 0x0000)
struct FCombatThresholdData final
{
public:
	float                                         HeatLevel;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ThresholdName;                                     // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DebugGraphColor;                                   // 0x0018(0x0010)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCombatThresholdData) == 0x000008, "Wrong alignment on FCombatThresholdData");
static_assert(sizeof(FCombatThresholdData) == 0x000028, "Wrong size on FCombatThresholdData");
static_assert(offsetof(FCombatThresholdData, HeatLevel) == 0x000000, "Member 'FCombatThresholdData::HeatLevel' has a wrong offset!");
static_assert(offsetof(FCombatThresholdData, ThresholdName) == 0x000008, "Member 'FCombatThresholdData::ThresholdName' has a wrong offset!");
static_assert(offsetof(FCombatThresholdData, DebugGraphColor) == 0x000018, "Member 'FCombatThresholdData::DebugGraphColor' has a wrong offset!");

// ScriptStruct FortniteGame.CombatFactorData
// 0x0038 (0x0038 - 0x0000)
struct FCombatFactorData final
{
public:
	TArray<struct FCombatEventMultiplier>         ContributingCombatEvents;                          // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DebugFactorName;                                   // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DebugGraphColor;                                   // 0x0028(0x0010)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCombatFactorData) == 0x000008, "Wrong alignment on FCombatFactorData");
static_assert(sizeof(FCombatFactorData) == 0x000038, "Wrong size on FCombatFactorData");
static_assert(offsetof(FCombatFactorData, ContributingCombatEvents) == 0x000000, "Member 'FCombatFactorData::ContributingCombatEvents' has a wrong offset!");
static_assert(offsetof(FCombatFactorData, MaxValue) == 0x000010, "Member 'FCombatFactorData::MaxValue' has a wrong offset!");
static_assert(offsetof(FCombatFactorData, DebugFactorName) == 0x000018, "Member 'FCombatFactorData::DebugFactorName' has a wrong offset!");
static_assert(offsetof(FCombatFactorData, DebugGraphColor) == 0x000028, "Member 'FCombatFactorData::DebugGraphColor' has a wrong offset!");

// ScriptStruct FortniteGame.CombatEventData
// 0x0030 (0x0030 - 0x0000)
struct FCombatEventData final
{
public:
	float                                         Heat;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHeatContribution;                               // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoolDownRate;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventName;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DebugGraphColor;                                   // 0x0020(0x0010)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCombatEventData) == 0x000008, "Wrong alignment on FCombatEventData");
static_assert(sizeof(FCombatEventData) == 0x000030, "Wrong size on FCombatEventData");
static_assert(offsetof(FCombatEventData, Heat) == 0x000000, "Member 'FCombatEventData::Heat' has a wrong offset!");
static_assert(offsetof(FCombatEventData, MaxHeatContribution) == 0x000004, "Member 'FCombatEventData::MaxHeatContribution' has a wrong offset!");
static_assert(offsetof(FCombatEventData, CoolDownRate) == 0x000008, "Member 'FCombatEventData::CoolDownRate' has a wrong offset!");
static_assert(offsetof(FCombatEventData, EventName) == 0x000010, "Member 'FCombatEventData::EventName' has a wrong offset!");
static_assert(offsetof(FCombatEventData, DebugGraphColor) == 0x000020, "Member 'FCombatEventData::DebugGraphColor' has a wrong offset!");

// ScriptStruct FortniteGame.FortMatchmakingConfig
// 0x0010 (0x0010 - 0x0000)
struct FFortMatchmakingConfig final
{
public:
	float                                         ChanceToHostOverride;                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChanceToHostIncrease;                              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSearchResultsOverride;                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxProcessedSearchResults;                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMatchmakingConfig) == 0x000004, "Wrong alignment on FFortMatchmakingConfig");
static_assert(sizeof(FFortMatchmakingConfig) == 0x000010, "Wrong size on FFortMatchmakingConfig");
static_assert(offsetof(FFortMatchmakingConfig, ChanceToHostOverride) == 0x000000, "Member 'FFortMatchmakingConfig::ChanceToHostOverride' has a wrong offset!");
static_assert(offsetof(FFortMatchmakingConfig, ChanceToHostIncrease) == 0x000004, "Member 'FFortMatchmakingConfig::ChanceToHostIncrease' has a wrong offset!");
static_assert(offsetof(FFortMatchmakingConfig, MaxSearchResultsOverride) == 0x000008, "Member 'FFortMatchmakingConfig::MaxSearchResultsOverride' has a wrong offset!");
static_assert(offsetof(FFortMatchmakingConfig, MaxProcessedSearchResults) == 0x00000C, "Member 'FFortMatchmakingConfig::MaxProcessedSearchResults' has a wrong offset!");

// ScriptStruct FortniteGame.FortSurfaceDamageRatioStats
// 0x0060 (0x0068 - 0x0008)
struct FFortSurfaceDamageRatioStats final : public FTableRowBase
{
public:
	class FName                                   Default;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   Wood;                                              // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   Stone;                                             // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   Metal;                                             // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   HumanEntity;                                       // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AIEntity;                                          // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   Explosive;                                         // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   WeakSpot;                                          // 0x0040(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   Objective;                                         // 0x0048(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   WeakSpot_Wood;                                     // 0x0050(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   WeakSpot_Stone;                                    // 0x0058(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   WeakSpot_Metal;                                    // 0x0060(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortSurfaceDamageRatioStats) == 0x000008, "Wrong alignment on FFortSurfaceDamageRatioStats");
static_assert(sizeof(FFortSurfaceDamageRatioStats) == 0x000068, "Wrong size on FFortSurfaceDamageRatioStats");
static_assert(offsetof(FFortSurfaceDamageRatioStats, Default) == 0x000008, "Member 'FFortSurfaceDamageRatioStats::Default' has a wrong offset!");
static_assert(offsetof(FFortSurfaceDamageRatioStats, Wood) == 0x000010, "Member 'FFortSurfaceDamageRatioStats::Wood' has a wrong offset!");
static_assert(offsetof(FFortSurfaceDamageRatioStats, Stone) == 0x000018, "Member 'FFortSurfaceDamageRatioStats::Stone' has a wrong offset!");
static_assert(offsetof(FFortSurfaceDamageRatioStats, Metal) == 0x000020, "Member 'FFortSurfaceDamageRatioStats::Metal' has a wrong offset!");
static_assert(offsetof(FFortSurfaceDamageRatioStats, HumanEntity) == 0x000028, "Member 'FFortSurfaceDamageRatioStats::HumanEntity' has a wrong offset!");
static_assert(offsetof(FFortSurfaceDamageRatioStats, AIEntity) == 0x000030, "Member 'FFortSurfaceDamageRatioStats::AIEntity' has a wrong offset!");
static_assert(offsetof(FFortSurfaceDamageRatioStats, Explosive) == 0x000038, "Member 'FFortSurfaceDamageRatioStats::Explosive' has a wrong offset!");
static_assert(offsetof(FFortSurfaceDamageRatioStats, WeakSpot) == 0x000040, "Member 'FFortSurfaceDamageRatioStats::WeakSpot' has a wrong offset!");
static_assert(offsetof(FFortSurfaceDamageRatioStats, Objective) == 0x000048, "Member 'FFortSurfaceDamageRatioStats::Objective' has a wrong offset!");
static_assert(offsetof(FFortSurfaceDamageRatioStats, WeakSpot_Wood) == 0x000050, "Member 'FFortSurfaceDamageRatioStats::WeakSpot_Wood' has a wrong offset!");
static_assert(offsetof(FFortSurfaceDamageRatioStats, WeakSpot_Stone) == 0x000058, "Member 'FFortSurfaceDamageRatioStats::WeakSpot_Stone' has a wrong offset!");
static_assert(offsetof(FFortSurfaceDamageRatioStats, WeakSpot_Metal) == 0x000060, "Member 'FFortSurfaceDamageRatioStats::WeakSpot_Metal' has a wrong offset!");

// ScriptStruct FortniteGame.FortSurfaceDamageRatioByAffiliationStats
// 0x0010 (0x0018 - 0x0008)
struct FFortSurfaceDamageRatioByAffiliationStats final : public FTableRowBase
{
public:
	float                                         Friendly;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Neutral;                                           // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Hostile;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortSurfaceDamageRatioByAffiliationStats) == 0x000008, "Wrong alignment on FFortSurfaceDamageRatioByAffiliationStats");
static_assert(sizeof(FFortSurfaceDamageRatioByAffiliationStats) == 0x000018, "Wrong size on FFortSurfaceDamageRatioByAffiliationStats");
static_assert(offsetof(FFortSurfaceDamageRatioByAffiliationStats, Friendly) == 0x000008, "Member 'FFortSurfaceDamageRatioByAffiliationStats::Friendly' has a wrong offset!");
static_assert(offsetof(FFortSurfaceDamageRatioByAffiliationStats, Neutral) == 0x00000C, "Member 'FFortSurfaceDamageRatioByAffiliationStats::Neutral' has a wrong offset!");
static_assert(offsetof(FFortSurfaceDamageRatioByAffiliationStats, Hostile) == 0x000010, "Member 'FFortSurfaceDamageRatioByAffiliationStats::Hostile' has a wrong offset!");

// ScriptStruct FortniteGame.FortQuestRewardNotification
// 0x0030 (0x0030 - 0x0000)
struct FFortQuestRewardNotification final
{
public:
	class FString                                 QuestId;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMcpLootResult                         Loot;                                              // 0x0010(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortQuestRewardNotification) == 0x000008, "Wrong alignment on FFortQuestRewardNotification");
static_assert(sizeof(FFortQuestRewardNotification) == 0x000030, "Wrong size on FFortQuestRewardNotification");
static_assert(offsetof(FFortQuestRewardNotification, QuestId) == 0x000000, "Member 'FFortQuestRewardNotification::QuestId' has a wrong offset!");
static_assert(offsetof(FFortQuestRewardNotification, Loot) == 0x000010, "Member 'FFortQuestRewardNotification::Loot' has a wrong offset!");

// ScriptStruct FortniteGame.FortDamageSource
// 0x0010 (0x0010 - 0x0000)
struct FFortDamageSource final
{
public:
	TWeakObjectPtr<class AController>             InstigatorController;                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  DamageCauser;                                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortDamageSource) == 0x000004, "Wrong alignment on FFortDamageSource");
static_assert(sizeof(FFortDamageSource) == 0x000010, "Wrong size on FFortDamageSource");
static_assert(offsetof(FFortDamageSource, InstigatorController) == 0x000000, "Member 'FFortDamageSource::InstigatorController' has a wrong offset!");
static_assert(offsetof(FFortDamageSource, DamageCauser) == 0x000008, "Member 'FFortDamageSource::DamageCauser' has a wrong offset!");

// ScriptStruct FortniteGame.FortCompendiumItemInfo
// 0x0030 (0x0030 - 0x0000)
struct FFortCompendiumItemInfo final
{
public:
	bool                                          bGrantWithCompendium;                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UFortCompendiumItemDefinition> CompendiumItemDefinition;                          // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCompendiumItemInfo) == 0x000008, "Wrong alignment on FFortCompendiumItemInfo");
static_assert(sizeof(FFortCompendiumItemInfo) == 0x000030, "Wrong size on FFortCompendiumItemInfo");
static_assert(offsetof(FFortCompendiumItemInfo, bGrantWithCompendium) == 0x000000, "Member 'FFortCompendiumItemInfo::bGrantWithCompendium' has a wrong offset!");
static_assert(offsetof(FFortCompendiumItemInfo, CompendiumItemDefinition) == 0x000008, "Member 'FFortCompendiumItemInfo::CompendiumItemDefinition' has a wrong offset!");

// ScriptStruct FortniteGame.FortCompendiumQuestInfo
// 0x0030 (0x0030 - 0x0000)
struct FFortCompendiumQuestInfo final
{
public:
	bool                                          bGrantWithCompendium;                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UFortQuestItemDefinition> QuestDefinition;                                   // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCompendiumQuestInfo) == 0x000008, "Wrong alignment on FFortCompendiumQuestInfo");
static_assert(sizeof(FFortCompendiumQuestInfo) == 0x000030, "Wrong size on FFortCompendiumQuestInfo");
static_assert(offsetof(FFortCompendiumQuestInfo, bGrantWithCompendium) == 0x000000, "Member 'FFortCompendiumQuestInfo::bGrantWithCompendium' has a wrong offset!");
static_assert(offsetof(FFortCompendiumQuestInfo, QuestDefinition) == 0x000008, "Member 'FFortCompendiumQuestInfo::QuestDefinition' has a wrong offset!");

// ScriptStruct FortniteGame.TeamMapInfo
// 0x0048 (0x0048 - 0x0000)
struct FTeamMapInfo final
{
public:
	TArray<uint8>                                 ReplicatedSeedPack;                                // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x34];                                      // 0x0010(0x0034)(Fixing Size After Last Property [ Dumper-7 ])
	EFortTeam                                     TeamId;                                            // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTeamMapInfo) == 0x000008, "Wrong alignment on FTeamMapInfo");
static_assert(sizeof(FTeamMapInfo) == 0x000048, "Wrong size on FTeamMapInfo");
static_assert(offsetof(FTeamMapInfo, ReplicatedSeedPack) == 0x000000, "Member 'FTeamMapInfo::ReplicatedSeedPack' has a wrong offset!");
static_assert(offsetof(FTeamMapInfo, TeamId) == 0x000044, "Member 'FTeamMapInfo::TeamId' has a wrong offset!");

// ScriptStruct FortniteGame.PatternBASEEffect
// 0x0010 (0x0010 - 0x0000)
struct FPatternBASEEffect final
{
public:
	class UBuildingEditModeMetadata*              Pattern;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            Mesh;                                              // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPatternBASEEffect) == 0x000008, "Wrong alignment on FPatternBASEEffect");
static_assert(sizeof(FPatternBASEEffect) == 0x000010, "Wrong size on FPatternBASEEffect");
static_assert(offsetof(FPatternBASEEffect, Pattern) == 0x000000, "Member 'FPatternBASEEffect::Pattern' has a wrong offset!");
static_assert(offsetof(FPatternBASEEffect, Mesh) == 0x000008, "Member 'FPatternBASEEffect::Mesh' has a wrong offset!");

// ScriptStruct FortniteGame.BASEGameplayEffect
// 0x0010 (0x0010 - 0x0000)
struct FBASEGameplayEffect final
{
public:
	TSubclassOf<class UGameplayEffect>            Effect;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelOverride;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBASEGameplayEffect) == 0x000008, "Wrong alignment on FBASEGameplayEffect");
static_assert(sizeof(FBASEGameplayEffect) == 0x000010, "Wrong size on FBASEGameplayEffect");
static_assert(offsetof(FBASEGameplayEffect, Effect) == 0x000000, "Member 'FBASEGameplayEffect::Effect' has a wrong offset!");
static_assert(offsetof(FBASEGameplayEffect, LevelOverride) == 0x000008, "Member 'FBASEGameplayEffect::LevelOverride' has a wrong offset!");

// ScriptStruct FortniteGame.ConsumeEffectData
// 0x0050 (0x0050 - 0x0000)
struct FConsumeEffectData final
{
public:
	TSoftClassPtr<class UClass>                   EffectClass;                                       // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         Level;                                             // 0x0028(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConsumeEffectData) == 0x000008, "Wrong alignment on FConsumeEffectData");
static_assert(sizeof(FConsumeEffectData) == 0x000050, "Wrong size on FConsumeEffectData");
static_assert(offsetof(FConsumeEffectData, EffectClass) == 0x000000, "Member 'FConsumeEffectData::EffectClass' has a wrong offset!");
static_assert(offsetof(FConsumeEffectData, Level) == 0x000028, "Member 'FConsumeEffectData::Level' has a wrong offset!");

// ScriptStruct FortniteGame.FortConversationSentence
// 0x00C8 (0x00C8 - 0x0000)
struct FFortConversationSentence final
{
public:
	struct FFortSentenceAudio                     SpeechAudio;                                       // 0x0000(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   SpeechText;                                        // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              TalkingHeadTexture;                                // 0x0058(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   TalkingHeadTitle;                                  // 0x0080(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UAnimMontage>            AnimMontage;                                       // 0x0098(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, RepSkip, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PostSentenceDelay;                                 // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DisplayDuration;                                   // 0x00C4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortConversationSentence) == 0x000008, "Wrong alignment on FFortConversationSentence");
static_assert(sizeof(FFortConversationSentence) == 0x0000C8, "Wrong size on FFortConversationSentence");
static_assert(offsetof(FFortConversationSentence, SpeechAudio) == 0x000000, "Member 'FFortConversationSentence::SpeechAudio' has a wrong offset!");
static_assert(offsetof(FFortConversationSentence, SpeechText) == 0x000040, "Member 'FFortConversationSentence::SpeechText' has a wrong offset!");
static_assert(offsetof(FFortConversationSentence, TalkingHeadTexture) == 0x000058, "Member 'FFortConversationSentence::TalkingHeadTexture' has a wrong offset!");
static_assert(offsetof(FFortConversationSentence, TalkingHeadTitle) == 0x000080, "Member 'FFortConversationSentence::TalkingHeadTitle' has a wrong offset!");
static_assert(offsetof(FFortConversationSentence, AnimMontage) == 0x000098, "Member 'FFortConversationSentence::AnimMontage' has a wrong offset!");
static_assert(offsetof(FFortConversationSentence, PostSentenceDelay) == 0x0000C0, "Member 'FFortConversationSentence::PostSentenceDelay' has a wrong offset!");
static_assert(offsetof(FFortConversationSentence, DisplayDuration) == 0x0000C4, "Member 'FFortConversationSentence::DisplayDuration' has a wrong offset!");

// ScriptStruct FortniteGame.WorkerSetBonusData
// 0x0038 (0x0038 - 0x0000)
struct FWorkerSetBonusData final
{
public:
	struct FGameplayTag                           SetBonusTypeTag;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         RequiredWorkersCount;                              // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            SetBonusEffect;                                    // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectionWeight;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PowerPoints;                                       // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorkerSetBonusData) == 0x000008, "Wrong alignment on FWorkerSetBonusData");
static_assert(sizeof(FWorkerSetBonusData) == 0x000038, "Wrong size on FWorkerSetBonusData");
static_assert(offsetof(FWorkerSetBonusData, SetBonusTypeTag) == 0x000000, "Member 'FWorkerSetBonusData::SetBonusTypeTag' has a wrong offset!");
static_assert(offsetof(FWorkerSetBonusData, DisplayName) == 0x000008, "Member 'FWorkerSetBonusData::DisplayName' has a wrong offset!");
static_assert(offsetof(FWorkerSetBonusData, RequiredWorkersCount) == 0x000020, "Member 'FWorkerSetBonusData::RequiredWorkersCount' has a wrong offset!");
static_assert(offsetof(FWorkerSetBonusData, SetBonusEffect) == 0x000028, "Member 'FWorkerSetBonusData::SetBonusEffect' has a wrong offset!");
static_assert(offsetof(FWorkerSetBonusData, SelectionWeight) == 0x000030, "Member 'FWorkerSetBonusData::SelectionWeight' has a wrong offset!");
static_assert(offsetof(FWorkerSetBonusData, PowerPoints) == 0x000034, "Member 'FWorkerSetBonusData::PowerPoints' has a wrong offset!");

// ScriptStruct FortniteGame.FortWindIntensityAndDirection
// 0x0008 (0x0008 - 0x0000)
struct FFortWindIntensityAndDirection final
{
public:
	float                                         WindIntensity;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WindHeading;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortWindIntensityAndDirection) == 0x000004, "Wrong alignment on FFortWindIntensityAndDirection");
static_assert(sizeof(FFortWindIntensityAndDirection) == 0x000008, "Wrong size on FFortWindIntensityAndDirection");
static_assert(offsetof(FFortWindIntensityAndDirection, WindIntensity) == 0x000000, "Member 'FFortWindIntensityAndDirection::WindIntensity' has a wrong offset!");
static_assert(offsetof(FFortWindIntensityAndDirection, WindHeading) == 0x000004, "Member 'FFortWindIntensityAndDirection::WindHeading' has a wrong offset!");

// ScriptStruct FortniteGame.FortRotationalContentEventsState
// 0x0140 (0x0140 - 0x0000)
struct FFortRotationalContentEventsState
{
public:
	TSet<class FName>                             ActiveStorefronts;                                 // 0x0000(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TSet<class FName>                             ActiveEventFlags;                                  // 0x0050(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, double>                     EventNamedWeights;                                 // 0x00A0(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
	TSet<struct FDateTime>                        ExpirationTimes;                                   // 0x00F0(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortRotationalContentEventsState) == 0x000008, "Wrong alignment on FFortRotationalContentEventsState");
static_assert(sizeof(FFortRotationalContentEventsState) == 0x000140, "Wrong size on FFortRotationalContentEventsState");
static_assert(offsetof(FFortRotationalContentEventsState, ActiveStorefronts) == 0x000000, "Member 'FFortRotationalContentEventsState::ActiveStorefronts' has a wrong offset!");
static_assert(offsetof(FFortRotationalContentEventsState, ActiveEventFlags) == 0x000050, "Member 'FFortRotationalContentEventsState::ActiveEventFlags' has a wrong offset!");
static_assert(offsetof(FFortRotationalContentEventsState, EventNamedWeights) == 0x0000A0, "Member 'FFortRotationalContentEventsState::EventNamedWeights' has a wrong offset!");
static_assert(offsetof(FFortRotationalContentEventsState, ExpirationTimes) == 0x0000F0, "Member 'FFortRotationalContentEventsState::ExpirationTimes' has a wrong offset!");

// ScriptStruct FortniteGame.ActiveTieredCollectionLayout
// 0x0014 (0x0020 - 0x000C)
struct FActiveTieredCollectionLayout final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortTieredCollectionLayout*            Layout;                                            // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTierUnlocked;                                   // 0x0018(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bLocked : 1;                                       // 0x001C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActiveTieredCollectionLayout) == 0x000008, "Wrong alignment on FActiveTieredCollectionLayout");
static_assert(sizeof(FActiveTieredCollectionLayout) == 0x000020, "Wrong size on FActiveTieredCollectionLayout");
static_assert(offsetof(FActiveTieredCollectionLayout, Layout) == 0x000010, "Member 'FActiveTieredCollectionLayout::Layout' has a wrong offset!");
static_assert(offsetof(FActiveTieredCollectionLayout, MaxTierUnlocked) == 0x000018, "Member 'FActiveTieredCollectionLayout::MaxTierUnlocked' has a wrong offset!");

// ScriptStruct FortniteGame.FortConversionTierData
// 0x0008 (0x0008 - 0x0000)
struct FFortConversionTierData final
{
public:
	int32                                         TierCost;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredItemQuantity;                              // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortConversionTierData) == 0x000004, "Wrong alignment on FFortConversionTierData");
static_assert(sizeof(FFortConversionTierData) == 0x000008, "Wrong size on FFortConversionTierData");
static_assert(offsetof(FFortConversionTierData, TierCost) == 0x000000, "Member 'FFortConversionTierData::TierCost' has a wrong offset!");
static_assert(offsetof(FFortConversionTierData, RequiredItemQuantity) == 0x000004, "Member 'FFortConversionTierData::RequiredItemQuantity' has a wrong offset!");

// ScriptStruct FortniteGame.FortConversionControlKeyCosts
// 0x0098 (0x00A0 - 0x0008)
struct FFortConversionControlKeyCosts final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UFortItemDefinition>     RequiredItem;                                      // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FFortConversionTierData                Handmade;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortConversionTierData                Ordinary;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortConversionTierData                Sturdy;                                            // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortConversionTierData                Quality;                                           // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortConversionTierData                Fine;                                              // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortConversionTierData                Elegant;                                           // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortConversionTierData                Masterwork;                                        // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortConversionTierData                Epic;                                              // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortConversionTierData                Badass;                                            // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFortConversionTierData                Legendary;                                         // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  RequiredCatalysts;                                 // 0x0080(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortConversionControlKeyCosts) == 0x000008, "Wrong alignment on FFortConversionControlKeyCosts");
static_assert(sizeof(FFortConversionControlKeyCosts) == 0x0000A0, "Wrong size on FFortConversionControlKeyCosts");
static_assert(offsetof(FFortConversionControlKeyCosts, RequiredItem) == 0x000008, "Member 'FFortConversionControlKeyCosts::RequiredItem' has a wrong offset!");
static_assert(offsetof(FFortConversionControlKeyCosts, Handmade) == 0x000030, "Member 'FFortConversionControlKeyCosts::Handmade' has a wrong offset!");
static_assert(offsetof(FFortConversionControlKeyCosts, Ordinary) == 0x000038, "Member 'FFortConversionControlKeyCosts::Ordinary' has a wrong offset!");
static_assert(offsetof(FFortConversionControlKeyCosts, Sturdy) == 0x000040, "Member 'FFortConversionControlKeyCosts::Sturdy' has a wrong offset!");
static_assert(offsetof(FFortConversionControlKeyCosts, Quality) == 0x000048, "Member 'FFortConversionControlKeyCosts::Quality' has a wrong offset!");
static_assert(offsetof(FFortConversionControlKeyCosts, Fine) == 0x000050, "Member 'FFortConversionControlKeyCosts::Fine' has a wrong offset!");
static_assert(offsetof(FFortConversionControlKeyCosts, Elegant) == 0x000058, "Member 'FFortConversionControlKeyCosts::Elegant' has a wrong offset!");
static_assert(offsetof(FFortConversionControlKeyCosts, Masterwork) == 0x000060, "Member 'FFortConversionControlKeyCosts::Masterwork' has a wrong offset!");
static_assert(offsetof(FFortConversionControlKeyCosts, Epic) == 0x000068, "Member 'FFortConversionControlKeyCosts::Epic' has a wrong offset!");
static_assert(offsetof(FFortConversionControlKeyCosts, Badass) == 0x000070, "Member 'FFortConversionControlKeyCosts::Badass' has a wrong offset!");
static_assert(offsetof(FFortConversionControlKeyCosts, Legendary) == 0x000078, "Member 'FFortConversionControlKeyCosts::Legendary' has a wrong offset!");
static_assert(offsetof(FFortConversionControlKeyCosts, RequiredCatalysts) == 0x000080, "Member 'FFortConversionControlKeyCosts::RequiredCatalysts' has a wrong offset!");

// ScriptStruct FortniteGame.FortClientEventsState
// 0x0038 (0x0178 - 0x0140)
struct FFortClientEventsState final : public FFortRotationalContentEventsState
{
public:
	int32                                         SeasonNumber;                                      // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SeasonTemplateId;                                  // 0x0148(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              SeasonEnd;                                         // 0x0158(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDateTime                              WeeklyStoreEnd;                                    // 0x0160(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDateTime                              StwEventStoreEnd;                                  // 0x0168(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDateTime                              StwWeeklyStoreEnd;                                 // 0x0170(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortClientEventsState) == 0x000008, "Wrong alignment on FFortClientEventsState");
static_assert(sizeof(FFortClientEventsState) == 0x000178, "Wrong size on FFortClientEventsState");
static_assert(offsetof(FFortClientEventsState, SeasonNumber) == 0x000140, "Member 'FFortClientEventsState::SeasonNumber' has a wrong offset!");
static_assert(offsetof(FFortClientEventsState, SeasonTemplateId) == 0x000148, "Member 'FFortClientEventsState::SeasonTemplateId' has a wrong offset!");
static_assert(offsetof(FFortClientEventsState, SeasonEnd) == 0x000158, "Member 'FFortClientEventsState::SeasonEnd' has a wrong offset!");
static_assert(offsetof(FFortClientEventsState, WeeklyStoreEnd) == 0x000160, "Member 'FFortClientEventsState::WeeklyStoreEnd' has a wrong offset!");
static_assert(offsetof(FFortClientEventsState, StwEventStoreEnd) == 0x000168, "Member 'FFortClientEventsState::StwEventStoreEnd' has a wrong offset!");
static_assert(offsetof(FFortClientEventsState, StwWeeklyStoreEnd) == 0x000170, "Member 'FFortClientEventsState::StwWeeklyStoreEnd' has a wrong offset!");

// ScriptStruct FortniteGame.HomebaseNodeGameplayEffectDataTableRow
// 0x00D0 (0x00D8 - 0x0008)
struct FHomebaseNodeGameplayEffectDataTableRow final : public FTableRowBase
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayModOp                                Operation;                                         // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Magnitude;                                         // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ApplicationRequiredTagsContainer;                  // 0x0030(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiredSourceTagsContainer;                       // 0x0050(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiredTargetTagsContainer;                       // 0x0070(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GrantedTagsContainer;                              // 0x0090(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  IgnoreSourceTagsContainer;                         // 0x00B0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         AssociatedGEIdx;                                   // 0x00D0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AssociatedModifierIdx;                             // 0x00D4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHomebaseNodeGameplayEffectDataTableRow) == 0x000008, "Wrong alignment on FHomebaseNodeGameplayEffectDataTableRow");
static_assert(sizeof(FHomebaseNodeGameplayEffectDataTableRow) == 0x0000D8, "Wrong size on FHomebaseNodeGameplayEffectDataTableRow");
static_assert(offsetof(FHomebaseNodeGameplayEffectDataTableRow, Attribute) == 0x000008, "Member 'FHomebaseNodeGameplayEffectDataTableRow::Attribute' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeGameplayEffectDataTableRow, Operation) == 0x000028, "Member 'FHomebaseNodeGameplayEffectDataTableRow::Operation' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeGameplayEffectDataTableRow, Magnitude) == 0x00002C, "Member 'FHomebaseNodeGameplayEffectDataTableRow::Magnitude' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeGameplayEffectDataTableRow, ApplicationRequiredTagsContainer) == 0x000030, "Member 'FHomebaseNodeGameplayEffectDataTableRow::ApplicationRequiredTagsContainer' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeGameplayEffectDataTableRow, RequiredSourceTagsContainer) == 0x000050, "Member 'FHomebaseNodeGameplayEffectDataTableRow::RequiredSourceTagsContainer' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeGameplayEffectDataTableRow, RequiredTargetTagsContainer) == 0x000070, "Member 'FHomebaseNodeGameplayEffectDataTableRow::RequiredTargetTagsContainer' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeGameplayEffectDataTableRow, GrantedTagsContainer) == 0x000090, "Member 'FHomebaseNodeGameplayEffectDataTableRow::GrantedTagsContainer' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeGameplayEffectDataTableRow, IgnoreSourceTagsContainer) == 0x0000B0, "Member 'FHomebaseNodeGameplayEffectDataTableRow::IgnoreSourceTagsContainer' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeGameplayEffectDataTableRow, AssociatedGEIdx) == 0x0000D0, "Member 'FHomebaseNodeGameplayEffectDataTableRow::AssociatedGEIdx' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeGameplayEffectDataTableRow, AssociatedModifierIdx) == 0x0000D4, "Member 'FHomebaseNodeGameplayEffectDataTableRow::AssociatedModifierIdx' has a wrong offset!");

// ScriptStruct FortniteGame.FortDailyRewardScheduleDisplayData
// 0x0060 (0x0060 - 0x0000)
struct FFortDailyRewardScheduleDisplayData final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   ItemDescription;                                   // 0x0030(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   EpicItemDescription;                               // 0x0048(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortDailyRewardScheduleDisplayData) == 0x000008, "Wrong alignment on FFortDailyRewardScheduleDisplayData");
static_assert(sizeof(FFortDailyRewardScheduleDisplayData) == 0x000060, "Wrong size on FFortDailyRewardScheduleDisplayData");
static_assert(offsetof(FFortDailyRewardScheduleDisplayData, Title) == 0x000000, "Member 'FFortDailyRewardScheduleDisplayData::Title' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardScheduleDisplayData, Description) == 0x000018, "Member 'FFortDailyRewardScheduleDisplayData::Description' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardScheduleDisplayData, ItemDescription) == 0x000030, "Member 'FFortDailyRewardScheduleDisplayData::ItemDescription' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardScheduleDisplayData, EpicItemDescription) == 0x000048, "Member 'FFortDailyRewardScheduleDisplayData::EpicItemDescription' has a wrong offset!");

// ScriptStruct FortniteGame.FortDailyRewardScheduleDefinition
// 0x00A8 (0x00A8 - 0x0000)
struct FFortDailyRewardScheduleDefinition final
{
public:
	class FName                                   ScheduleName;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortDailyRewardScheduleTokenDefinition> EnablingToken;                                     // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             Rewards;                                           // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortDailyRewardScheduleDisplayData    DisplayData;                                       // 0x0038(0x0060)(Edit, NativeAccessSpecifierPublic)
	struct FDateTime                              BeginDate;                                         // 0x0098(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndDate;                                           // 0x00A0(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortDailyRewardScheduleDefinition) == 0x000008, "Wrong alignment on FFortDailyRewardScheduleDefinition");
static_assert(sizeof(FFortDailyRewardScheduleDefinition) == 0x0000A8, "Wrong size on FFortDailyRewardScheduleDefinition");
static_assert(offsetof(FFortDailyRewardScheduleDefinition, ScheduleName) == 0x000000, "Member 'FFortDailyRewardScheduleDefinition::ScheduleName' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardScheduleDefinition, EnablingToken) == 0x000008, "Member 'FFortDailyRewardScheduleDefinition::EnablingToken' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardScheduleDefinition, Rewards) == 0x000030, "Member 'FFortDailyRewardScheduleDefinition::Rewards' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardScheduleDefinition, DisplayData) == 0x000038, "Member 'FFortDailyRewardScheduleDefinition::DisplayData' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardScheduleDefinition, BeginDate) == 0x000098, "Member 'FFortDailyRewardScheduleDefinition::BeginDate' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardScheduleDefinition, EndDate) == 0x0000A0, "Member 'FFortDailyRewardScheduleDefinition::EndDate' has a wrong offset!");

// ScriptStruct FortniteGame.StormWind
// 0x0044 (0x0050 - 0x000C)
struct FStormWind final : public FFastArraySerializerItem
{
public:
	struct FVector                                Location;                                          // 0x000C(0x000C)(Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0018(0x000C)(Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0024(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Magnitude;                                         // 0x0028(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortThreatVisualsManager*              ThreatVisualsManager;                              // 0x0030(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortAIEncounterInfo*>           Encounters;                                        // 0x0038(0x0010)(ZeroConstructor, Transient, RepSkip, NativeAccessSpecifierPublic)
	struct FFortWindImpulseHandle                 WindHandle;                                        // 0x0048(0x0004)(Transient, RepSkip, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStormWind) == 0x000008, "Wrong alignment on FStormWind");
static_assert(sizeof(FStormWind) == 0x000050, "Wrong size on FStormWind");
static_assert(offsetof(FStormWind, Location) == 0x00000C, "Member 'FStormWind::Location' has a wrong offset!");
static_assert(offsetof(FStormWind, Direction) == 0x000018, "Member 'FStormWind::Direction' has a wrong offset!");
static_assert(offsetof(FStormWind, Radius) == 0x000024, "Member 'FStormWind::Radius' has a wrong offset!");
static_assert(offsetof(FStormWind, Magnitude) == 0x000028, "Member 'FStormWind::Magnitude' has a wrong offset!");
static_assert(offsetof(FStormWind, ThreatVisualsManager) == 0x000030, "Member 'FStormWind::ThreatVisualsManager' has a wrong offset!");
static_assert(offsetof(FStormWind, Encounters) == 0x000038, "Member 'FStormWind::Encounters' has a wrong offset!");
static_assert(offsetof(FStormWind, WindHandle) == 0x000048, "Member 'FStormWind::WindHandle' has a wrong offset!");

// ScriptStruct FortniteGame.FortDailyLoginRewardStat_ScheduleClaimed
// 0x0008 (0x0008 - 0x0000)
struct FFortDailyLoginRewardStat_ScheduleClaimed final
{
public:
	int32                                         RewardsClaimed;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClaimedToday;                                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortDailyLoginRewardStat_ScheduleClaimed) == 0x000004, "Wrong alignment on FFortDailyLoginRewardStat_ScheduleClaimed");
static_assert(sizeof(FFortDailyLoginRewardStat_ScheduleClaimed) == 0x000008, "Wrong size on FFortDailyLoginRewardStat_ScheduleClaimed");
static_assert(offsetof(FFortDailyLoginRewardStat_ScheduleClaimed, RewardsClaimed) == 0x000000, "Member 'FFortDailyLoginRewardStat_ScheduleClaimed::RewardsClaimed' has a wrong offset!");
static_assert(offsetof(FFortDailyLoginRewardStat_ScheduleClaimed, ClaimedToday) == 0x000004, "Member 'FFortDailyLoginRewardStat_ScheduleClaimed::ClaimedToday' has a wrong offset!");

// ScriptStruct FortniteGame.FortDailyLoginRewardStat
// 0x0060 (0x0060 - 0x0000)
struct FFortDailyLoginRewardStat final
{
public:
	int32                                         NextDefaultReward;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalDaysLoggedIn;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              LastClaimDate;                                     // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FFortDailyLoginRewardStat_ScheduleClaimed> AdditionalSchedules;                               // 0x0010(0x0050)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortDailyLoginRewardStat) == 0x000008, "Wrong alignment on FFortDailyLoginRewardStat");
static_assert(sizeof(FFortDailyLoginRewardStat) == 0x000060, "Wrong size on FFortDailyLoginRewardStat");
static_assert(offsetof(FFortDailyLoginRewardStat, NextDefaultReward) == 0x000000, "Member 'FFortDailyLoginRewardStat::NextDefaultReward' has a wrong offset!");
static_assert(offsetof(FFortDailyLoginRewardStat, TotalDaysLoggedIn) == 0x000004, "Member 'FFortDailyLoginRewardStat::TotalDaysLoggedIn' has a wrong offset!");
static_assert(offsetof(FFortDailyLoginRewardStat, LastClaimDate) == 0x000008, "Member 'FFortDailyLoginRewardStat::LastClaimDate' has a wrong offset!");
static_assert(offsetof(FFortDailyLoginRewardStat, AdditionalSchedules) == 0x000010, "Member 'FFortDailyLoginRewardStat::AdditionalSchedules' has a wrong offset!");

// ScriptStruct FortniteGame.FortDailyRewardsNotification
// 0x0018 (0x0018 - 0x0000)
struct FFortDailyRewardsNotification final
{
public:
	int32                                         DaysLoggedIn;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMcpLootEntry>                  Items;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortDailyRewardsNotification) == 0x000008, "Wrong alignment on FFortDailyRewardsNotification");
static_assert(sizeof(FFortDailyRewardsNotification) == 0x000018, "Wrong size on FFortDailyRewardsNotification");
static_assert(offsetof(FFortDailyRewardsNotification, DaysLoggedIn) == 0x000000, "Member 'FFortDailyRewardsNotification::DaysLoggedIn' has a wrong offset!");
static_assert(offsetof(FFortDailyRewardsNotification, Items) == 0x000008, "Member 'FFortDailyRewardsNotification::Items' has a wrong offset!");

// ScriptStruct FortniteGame.FortCharacterPartMontageInfo
// 0x0010 (0x0010 - 0x0000)
struct FFortCharacterPartMontageInfo final
{
public:
	EFortCustomPartType                           CharacterPart;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           AnimMontage;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCharacterPartMontageInfo) == 0x000008, "Wrong alignment on FFortCharacterPartMontageInfo");
static_assert(sizeof(FFortCharacterPartMontageInfo) == 0x000010, "Wrong size on FFortCharacterPartMontageInfo");
static_assert(offsetof(FFortCharacterPartMontageInfo, CharacterPart) == 0x000000, "Member 'FFortCharacterPartMontageInfo::CharacterPart' has a wrong offset!");
static_assert(offsetof(FFortCharacterPartMontageInfo, AnimMontage) == 0x000008, "Member 'FFortCharacterPartMontageInfo::AnimMontage' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayAbilityMontageInfo
// 0x0060 (0x0060 - 0x0000)
struct FFortGameplayAbilityMontageInfo final
{
public:
	class UAnimMontage*                           MontageToPlay;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimPlayRate;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimRootMotionTranslationScale;                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortGameplayAbilityMontageSectionToPlay      MontageSectionToPlay;                              // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OverrideSection;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayRandomSection;                                // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortCharacterPartMontageInfo>  CharacterPartMontages;                             // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x28];                                      // 0x0038(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortGameplayAbilityMontageInfo) == 0x000008, "Wrong alignment on FFortGameplayAbilityMontageInfo");
static_assert(sizeof(FFortGameplayAbilityMontageInfo) == 0x000060, "Wrong size on FFortGameplayAbilityMontageInfo");
static_assert(offsetof(FFortGameplayAbilityMontageInfo, MontageToPlay) == 0x000000, "Member 'FFortGameplayAbilityMontageInfo::MontageToPlay' has a wrong offset!");
static_assert(offsetof(FFortGameplayAbilityMontageInfo, AnimPlayRate) == 0x000008, "Member 'FFortGameplayAbilityMontageInfo::AnimPlayRate' has a wrong offset!");
static_assert(offsetof(FFortGameplayAbilityMontageInfo, AnimRootMotionTranslationScale) == 0x00000C, "Member 'FFortGameplayAbilityMontageInfo::AnimRootMotionTranslationScale' has a wrong offset!");
static_assert(offsetof(FFortGameplayAbilityMontageInfo, MontageSectionToPlay) == 0x000010, "Member 'FFortGameplayAbilityMontageInfo::MontageSectionToPlay' has a wrong offset!");
static_assert(offsetof(FFortGameplayAbilityMontageInfo, OverrideSection) == 0x000018, "Member 'FFortGameplayAbilityMontageInfo::OverrideSection' has a wrong offset!");
static_assert(offsetof(FFortGameplayAbilityMontageInfo, bPlayRandomSection) == 0x000020, "Member 'FFortGameplayAbilityMontageInfo::bPlayRandomSection' has a wrong offset!");
static_assert(offsetof(FFortGameplayAbilityMontageInfo, CharacterPartMontages) == 0x000028, "Member 'FFortGameplayAbilityMontageInfo::CharacterPartMontages' has a wrong offset!");

// ScriptStruct FortniteGame.TrackSplineConfig
// 0x0003 (0x0003 - 0x0000)
struct FTrackSplineConfig final
{
public:
	bool                                          bUseSpline;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETrackDirection                               Start;                                             // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETrackDirection                               End;                                               // 0x0002(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTrackSplineConfig) == 0x000001, "Wrong alignment on FTrackSplineConfig");
static_assert(sizeof(FTrackSplineConfig) == 0x000003, "Wrong size on FTrackSplineConfig");
static_assert(offsetof(FTrackSplineConfig, bUseSpline) == 0x000000, "Member 'FTrackSplineConfig::bUseSpline' has a wrong offset!");
static_assert(offsetof(FTrackSplineConfig, Start) == 0x000001, "Member 'FTrackSplineConfig::Start' has a wrong offset!");
static_assert(offsetof(FTrackSplineConfig, End) == 0x000002, "Member 'FTrackSplineConfig::End' has a wrong offset!");

// ScriptStruct FortniteGame.PendingDeployableManagerAction
// 0x0070 (0x0070 - 0x0000)
struct alignas(0x10) FPendingDeployableManagerAction final
{
public:
	EQueueActionType                              ActionType;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ADeployableBasePlot*>            PendingPlots;                                      // 0x0008(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int32                                         CurrentPlotRunningIndex;                           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EDeployableBaseBuildingState                  DesiredPlotState;                                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1D[0x43];                                      // 0x001D(0x0043)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortDeployableBaseManager*             Manager;                                           // 0x0060(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPendingDeployableManagerAction) == 0x000010, "Wrong alignment on FPendingDeployableManagerAction");
static_assert(sizeof(FPendingDeployableManagerAction) == 0x000070, "Wrong size on FPendingDeployableManagerAction");
static_assert(offsetof(FPendingDeployableManagerAction, ActionType) == 0x000000, "Member 'FPendingDeployableManagerAction::ActionType' has a wrong offset!");
static_assert(offsetof(FPendingDeployableManagerAction, PendingPlots) == 0x000008, "Member 'FPendingDeployableManagerAction::PendingPlots' has a wrong offset!");
static_assert(offsetof(FPendingDeployableManagerAction, CurrentPlotRunningIndex) == 0x000018, "Member 'FPendingDeployableManagerAction::CurrentPlotRunningIndex' has a wrong offset!");
static_assert(offsetof(FPendingDeployableManagerAction, DesiredPlotState) == 0x00001C, "Member 'FPendingDeployableManagerAction::DesiredPlotState' has a wrong offset!");
static_assert(offsetof(FPendingDeployableManagerAction, Manager) == 0x000060, "Member 'FPendingDeployableManagerAction::Manager' has a wrong offset!");

// ScriptStruct FortniteGame.FortTaggedActorOctreeFilter
// 0x0068 (0x0068 - 0x0000)
struct FFortTaggedActorOctreeFilter final
{
public:
	struct FBoxSphereBounds                       Bounds;                                            // 0x0000(0x001C)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MinDistanceFromBoundsCenter;                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class ABuildingActor>>     OptionalSubclasses;                                // 0x0020(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FFortFinderProperty>            RequiredProperties;                                // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TagsToLookFor;                                     // 0x0040(0x0020)(NativeAccessSpecifierPublic)
	bool                                          bHasAllTags;                                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortTaggedActorOctreeFilter) == 0x000008, "Wrong alignment on FFortTaggedActorOctreeFilter");
static_assert(sizeof(FFortTaggedActorOctreeFilter) == 0x000068, "Wrong size on FFortTaggedActorOctreeFilter");
static_assert(offsetof(FFortTaggedActorOctreeFilter, Bounds) == 0x000000, "Member 'FFortTaggedActorOctreeFilter::Bounds' has a wrong offset!");
static_assert(offsetof(FFortTaggedActorOctreeFilter, MinDistanceFromBoundsCenter) == 0x00001C, "Member 'FFortTaggedActorOctreeFilter::MinDistanceFromBoundsCenter' has a wrong offset!");
static_assert(offsetof(FFortTaggedActorOctreeFilter, OptionalSubclasses) == 0x000020, "Member 'FFortTaggedActorOctreeFilter::OptionalSubclasses' has a wrong offset!");
static_assert(offsetof(FFortTaggedActorOctreeFilter, RequiredProperties) == 0x000030, "Member 'FFortTaggedActorOctreeFilter::RequiredProperties' has a wrong offset!");
static_assert(offsetof(FFortTaggedActorOctreeFilter, TagsToLookFor) == 0x000040, "Member 'FFortTaggedActorOctreeFilter::TagsToLookFor' has a wrong offset!");
static_assert(offsetof(FFortTaggedActorOctreeFilter, bHasAllTags) == 0x000060, "Member 'FFortTaggedActorOctreeFilter::bHasAllTags' has a wrong offset!");

// ScriptStruct FortniteGame.FortMigrationDataTableRow
// 0x0020 (0x0028 - 0x0008)
struct FFortMigrationDataTableRow final : public FTableRowBase
{
public:
	class FString                                 OldItemTemplate;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewItemTemplate;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMigrationDataTableRow) == 0x000008, "Wrong alignment on FFortMigrationDataTableRow");
static_assert(sizeof(FFortMigrationDataTableRow) == 0x000028, "Wrong size on FFortMigrationDataTableRow");
static_assert(offsetof(FFortMigrationDataTableRow, OldItemTemplate) == 0x000008, "Member 'FFortMigrationDataTableRow::OldItemTemplate' has a wrong offset!");
static_assert(offsetof(FFortMigrationDataTableRow, NewItemTemplate) == 0x000018, "Member 'FFortMigrationDataTableRow::NewItemTemplate' has a wrong offset!");

// ScriptStruct FortniteGame.ActiveTieredCollectionLayoutArray
// 0x0018 (0x00C8 - 0x00B0)
struct FActiveTieredCollectionLayoutArray final : public FFastArraySerializer
{
public:
	TArray<struct FActiveTieredCollectionLayout>  LayoutArray;                                       // 0x00B0(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	bool                                          bTiersForced;                                      // 0x00C0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActiveTieredCollectionLayoutArray) == 0x000008, "Wrong alignment on FActiveTieredCollectionLayoutArray");
static_assert(sizeof(FActiveTieredCollectionLayoutArray) == 0x0000C8, "Wrong size on FActiveTieredCollectionLayoutArray");
static_assert(offsetof(FActiveTieredCollectionLayoutArray, LayoutArray) == 0x0000B0, "Member 'FActiveTieredCollectionLayoutArray::LayoutArray' has a wrong offset!");
static_assert(offsetof(FActiveTieredCollectionLayoutArray, bTiersForced) == 0x0000C0, "Member 'FActiveTieredCollectionLayoutArray::bTiersForced' has a wrong offset!");

// ScriptStruct FortniteGame.PendingDeployableBaseUser
// 0x0040 (0x0040 - 0x0000)
struct FPendingDeployableBaseUser final
{
public:
	struct FUniqueNetIdRepl                       UserNetID;                                         // 0x0000(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortUserCloudRequestHandle            LoadingCloudRequestHandle;                         // 0x0028(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortDeployableBaseRecord*              BaseRecord;                                        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADeployableBasePlot*                    BasePlot;                                          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPendingDeployableBaseUser) == 0x000008, "Wrong alignment on FPendingDeployableBaseUser");
static_assert(sizeof(FPendingDeployableBaseUser) == 0x000040, "Wrong size on FPendingDeployableBaseUser");
static_assert(offsetof(FPendingDeployableBaseUser, UserNetID) == 0x000000, "Member 'FPendingDeployableBaseUser::UserNetID' has a wrong offset!");
static_assert(offsetof(FPendingDeployableBaseUser, LoadingCloudRequestHandle) == 0x000028, "Member 'FPendingDeployableBaseUser::LoadingCloudRequestHandle' has a wrong offset!");
static_assert(offsetof(FPendingDeployableBaseUser, BaseRecord) == 0x000030, "Member 'FPendingDeployableBaseUser::BaseRecord' has a wrong offset!");
static_assert(offsetof(FPendingDeployableBaseUser, BasePlot) == 0x000038, "Member 'FPendingDeployableBaseUser::BasePlot' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionFocusDisplayData
// 0x0020 (0x0020 - 0x0000)
struct FFortMissionFocusDisplayData final
{
public:
	class FText                                   CurrentFocusDisplayText;                           // 0x0000(0x0018)(NativeAccessSpecifierPublic)
	float                                         CurrentFocusPercentage;                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMissionFocusDisplayData) == 0x000008, "Wrong alignment on FFortMissionFocusDisplayData");
static_assert(sizeof(FFortMissionFocusDisplayData) == 0x000020, "Wrong size on FFortMissionFocusDisplayData");
static_assert(offsetof(FFortMissionFocusDisplayData, CurrentFocusDisplayText) == 0x000000, "Member 'FFortMissionFocusDisplayData::CurrentFocusDisplayText' has a wrong offset!");
static_assert(offsetof(FFortMissionFocusDisplayData, CurrentFocusPercentage) == 0x000018, "Member 'FFortMissionFocusDisplayData::CurrentFocusPercentage' has a wrong offset!");

// ScriptStruct FortniteGame.FortDailyQuestRerollNotification
// 0x0010 (0x0010 - 0x0000)
struct FFortDailyQuestRerollNotification final
{
public:
	class FString                                 NewQuestId;                                        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortDailyQuestRerollNotification) == 0x000008, "Wrong alignment on FFortDailyQuestRerollNotification");
static_assert(sizeof(FFortDailyQuestRerollNotification) == 0x000010, "Wrong size on FFortDailyQuestRerollNotification");
static_assert(offsetof(FFortDailyQuestRerollNotification, NewQuestId) == 0x000000, "Member 'FFortDailyQuestRerollNotification::NewQuestId' has a wrong offset!");

// ScriptStruct FortniteGame.FortTaggedDeployableBaseLootUnlock
// 0x0008 (0x0010 - 0x0008)
struct FFortTaggedDeployableBaseLootUnlock final : public FFortTaggedUnlockBase
{
public:
	class FName                                   LootTierGroup;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTaggedDeployableBaseLootUnlock) == 0x000008, "Wrong alignment on FFortTaggedDeployableBaseLootUnlock");
static_assert(sizeof(FFortTaggedDeployableBaseLootUnlock) == 0x000010, "Wrong size on FFortTaggedDeployableBaseLootUnlock");
static_assert(offsetof(FFortTaggedDeployableBaseLootUnlock, LootTierGroup) == 0x000008, "Member 'FFortTaggedDeployableBaseLootUnlock::LootTierGroup' has a wrong offset!");

// ScriptStruct FortniteGame.NavAgentData
// 0x0018 (0x0018 - 0x0000)
struct FNavAgentData final
{
public:
	class FName                                   AgentName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   BuildingActorHealthToNavAreaStrengthHandle;        // 0x0008(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNavAgentData) == 0x000008, "Wrong alignment on FNavAgentData");
static_assert(sizeof(FNavAgentData) == 0x000018, "Wrong size on FNavAgentData");
static_assert(offsetof(FNavAgentData, AgentName) == 0x000000, "Member 'FNavAgentData::AgentName' has a wrong offset!");
static_assert(offsetof(FNavAgentData, BuildingActorHealthToNavAreaStrengthHandle) == 0x000008, "Member 'FNavAgentData::BuildingActorHealthToNavAreaStrengthHandle' has a wrong offset!");

// ScriptStruct FortniteGame.FortPresenceBasicInfo
// 0x0004 (0x0004 - 0x0000)
struct FFortPresenceBasicInfo final
{
public:
	int32                                         HomeBaseRating;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPresenceBasicInfo) == 0x000004, "Wrong alignment on FFortPresenceBasicInfo");
static_assert(sizeof(FFortPresenceBasicInfo) == 0x000004, "Wrong size on FFortPresenceBasicInfo");
static_assert(offsetof(FFortPresenceBasicInfo, HomeBaseRating) == 0x000000, "Member 'FFortPresenceBasicInfo::HomeBaseRating' has a wrong offset!");

// ScriptStruct FortniteGame.FortTaggedDeployableBasePlotExpansionUnlock
// 0x0010 (0x0018 - 0x0008)
struct FFortTaggedDeployableBasePlotExpansionUnlock final : public FFortTaggedUnlockBase
{
public:
	struct FIntVector                             CellExpansionVector;                               // 0x0008(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortTaggedDeployableBasePlotExpansionUnlock) == 0x000008, "Wrong alignment on FFortTaggedDeployableBasePlotExpansionUnlock");
static_assert(sizeof(FFortTaggedDeployableBasePlotExpansionUnlock) == 0x000018, "Wrong size on FFortTaggedDeployableBasePlotExpansionUnlock");
static_assert(offsetof(FFortTaggedDeployableBasePlotExpansionUnlock, CellExpansionVector) == 0x000008, "Member 'FFortTaggedDeployableBasePlotExpansionUnlock::CellExpansionVector' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionGenerationElementCostAndAvailabilityRow
// 0x0018 (0x0020 - 0x0008)
struct FFortMissionGenerationElementCostAndAvailabilityRow final : public FTableRowBase
{
public:
	class UCurveTable*                            AvailabilityCurveTable;                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   AvailabilityCurveTableRow;                         // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinCost;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxCost;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortMissionGenerationElementCostAndAvailabilityRow) == 0x000008, "Wrong alignment on FFortMissionGenerationElementCostAndAvailabilityRow");
static_assert(sizeof(FFortMissionGenerationElementCostAndAvailabilityRow) == 0x000020, "Wrong size on FFortMissionGenerationElementCostAndAvailabilityRow");
static_assert(offsetof(FFortMissionGenerationElementCostAndAvailabilityRow, AvailabilityCurveTable) == 0x000008, "Member 'FFortMissionGenerationElementCostAndAvailabilityRow::AvailabilityCurveTable' has a wrong offset!");
static_assert(offsetof(FFortMissionGenerationElementCostAndAvailabilityRow, AvailabilityCurveTableRow) == 0x000010, "Member 'FFortMissionGenerationElementCostAndAvailabilityRow::AvailabilityCurveTableRow' has a wrong offset!");
static_assert(offsetof(FFortMissionGenerationElementCostAndAvailabilityRow, MinCost) == 0x000018, "Member 'FFortMissionGenerationElementCostAndAvailabilityRow::MinCost' has a wrong offset!");
static_assert(offsetof(FFortMissionGenerationElementCostAndAvailabilityRow, MaxCost) == 0x00001C, "Member 'FFortMissionGenerationElementCostAndAvailabilityRow::MaxCost' has a wrong offset!");

// ScriptStruct FortniteGame.PurchaseFailureLogSubmitOptions
// 0x0018 (0x0018 - 0x0000)
struct FPurchaseFailureLogSubmitOptions final
{
public:
	bool                                          bSubmitLogs;                                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LogTailKb;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FString>                         DoNotUploadReasons;                                // 0x0008(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FPurchaseFailureLogSubmitOptions) == 0x000008, "Wrong alignment on FPurchaseFailureLogSubmitOptions");
static_assert(sizeof(FPurchaseFailureLogSubmitOptions) == 0x000018, "Wrong size on FPurchaseFailureLogSubmitOptions");
static_assert(offsetof(FPurchaseFailureLogSubmitOptions, bSubmitLogs) == 0x000000, "Member 'FPurchaseFailureLogSubmitOptions::bSubmitLogs' has a wrong offset!");
static_assert(offsetof(FPurchaseFailureLogSubmitOptions, LogTailKb) == 0x000004, "Member 'FPurchaseFailureLogSubmitOptions::LogTailKb' has a wrong offset!");
static_assert(offsetof(FPurchaseFailureLogSubmitOptions, DoNotUploadReasons) == 0x000008, "Member 'FPurchaseFailureLogSubmitOptions::DoNotUploadReasons' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIEncounterTimedModifierTags
// 0x0028 (0x0028 - 0x0000)
struct FFortAIEncounterTimedModifierTags final
{
public:
	float                                         TimeSeconds;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0008(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIEncounterTimedModifierTags) == 0x000008, "Wrong alignment on FFortAIEncounterTimedModifierTags");
static_assert(sizeof(FFortAIEncounterTimedModifierTags) == 0x000028, "Wrong size on FFortAIEncounterTimedModifierTags");
static_assert(offsetof(FFortAIEncounterTimedModifierTags, TimeSeconds) == 0x000000, "Member 'FFortAIEncounterTimedModifierTags::TimeSeconds' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterTimedModifierTags, GameplayTags) == 0x000008, "Member 'FFortAIEncounterTimedModifierTags::GameplayTags' has a wrong offset!");

// ScriptStruct FortniteGame.FortCriteriaRequirementData
// 0x0018 (0x0020 - 0x0008)
struct FFortCriteriaRequirementData final : public FTableRowBase
{
public:
	struct FGameplayTag                           RequiredTag;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGlobalMod;                                        // 0x0010(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ModValue;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequireRarity;                                    // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortRarity                                   RequiredRarity;                                    // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortCriteriaRequirementData) == 0x000008, "Wrong alignment on FFortCriteriaRequirementData");
static_assert(sizeof(FFortCriteriaRequirementData) == 0x000020, "Wrong size on FFortCriteriaRequirementData");
static_assert(offsetof(FFortCriteriaRequirementData, RequiredTag) == 0x000008, "Member 'FFortCriteriaRequirementData::RequiredTag' has a wrong offset!");
static_assert(offsetof(FFortCriteriaRequirementData, bGlobalMod) == 0x000010, "Member 'FFortCriteriaRequirementData::bGlobalMod' has a wrong offset!");
static_assert(offsetof(FFortCriteriaRequirementData, ModValue) == 0x000014, "Member 'FFortCriteriaRequirementData::ModValue' has a wrong offset!");
static_assert(offsetof(FFortCriteriaRequirementData, bRequireRarity) == 0x000018, "Member 'FFortCriteriaRequirementData::bRequireRarity' has a wrong offset!");
static_assert(offsetof(FFortCriteriaRequirementData, RequiredRarity) == 0x000019, "Member 'FFortCriteriaRequirementData::RequiredRarity' has a wrong offset!");

// ScriptStruct FortniteGame.FortFeedbackEvent
// 0x0030 (0x0030 - 0x0000)
struct FFortFeedbackEvent final
{
public:
	class AFortPawn*                              Instigator;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPawn*                              Recipient;                                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortFeedbackHandle                    Handle;                                            // 0x0010(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverriddenQueuing;                                // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortFeedbackEvent) == 0x000008, "Wrong alignment on FFortFeedbackEvent");
static_assert(sizeof(FFortFeedbackEvent) == 0x000030, "Wrong size on FFortFeedbackEvent");
static_assert(offsetof(FFortFeedbackEvent, Instigator) == 0x000000, "Member 'FFortFeedbackEvent::Instigator' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEvent, Recipient) == 0x000008, "Member 'FFortFeedbackEvent::Recipient' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEvent, Handle) == 0x000010, "Member 'FFortFeedbackEvent::Handle' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEvent, Delay) == 0x000028, "Member 'FFortFeedbackEvent::Delay' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEvent, bOverriddenQueuing) == 0x00002C, "Member 'FFortFeedbackEvent::bOverriddenQueuing' has a wrong offset!");

// ScriptStruct FortniteGame.FortFeedbackEventData
// 0x0038 (0x0038 - 0x0000)
struct FFortFeedbackEventData final
{
public:
	struct FFortFeedbackHandle                    Handle;                                            // 0x0000(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ChanceToPlay;                                      // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinReplayTime;                                     // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinReplayTimeForSpeaker;                           // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxWitnessDistance;                                // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterruptCurrentLine;                             // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanBeInterrupted;                                 // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanQue;                                           // 0x002A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFeedbackBroadcastFilter                  MultiplayerBroadcastFilter;                        // 0x002B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFeedbackSelectionMethod                  ContextSelectionMethod;                            // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FeedbackDelay;                                     // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeLastPlayed;                                    // 0x0034(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortFeedbackEventData) == 0x000008, "Wrong alignment on FFortFeedbackEventData");
static_assert(sizeof(FFortFeedbackEventData) == 0x000038, "Wrong size on FFortFeedbackEventData");
static_assert(offsetof(FFortFeedbackEventData, Handle) == 0x000000, "Member 'FFortFeedbackEventData::Handle' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEventData, ChanceToPlay) == 0x000018, "Member 'FFortFeedbackEventData::ChanceToPlay' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEventData, MinReplayTime) == 0x00001C, "Member 'FFortFeedbackEventData::MinReplayTime' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEventData, MinReplayTimeForSpeaker) == 0x000020, "Member 'FFortFeedbackEventData::MinReplayTimeForSpeaker' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEventData, MaxWitnessDistance) == 0x000024, "Member 'FFortFeedbackEventData::MaxWitnessDistance' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEventData, bInterruptCurrentLine) == 0x000028, "Member 'FFortFeedbackEventData::bInterruptCurrentLine' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEventData, bCanBeInterrupted) == 0x000029, "Member 'FFortFeedbackEventData::bCanBeInterrupted' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEventData, bCanQue) == 0x00002A, "Member 'FFortFeedbackEventData::bCanQue' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEventData, MultiplayerBroadcastFilter) == 0x00002B, "Member 'FFortFeedbackEventData::MultiplayerBroadcastFilter' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEventData, ContextSelectionMethod) == 0x00002C, "Member 'FFortFeedbackEventData::ContextSelectionMethod' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEventData, FeedbackDelay) == 0x000030, "Member 'FFortFeedbackEventData::FeedbackDelay' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEventData, TimeLastPlayed) == 0x000034, "Member 'FFortFeedbackEventData::TimeLastPlayed' has a wrong offset!");

// ScriptStruct FortniteGame.FortFeedbackLine
// 0x0098 (0x0098 - 0x0000)
struct FFortFeedbackLine final
{
public:
	TSoftObjectPtr<class USoundBase>              Audio;                                             // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequence>           AnimSequence;                                      // 0x0028(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            AnimMontage;                                       // 0x0050(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFeedbackAddressee                        Addressee;                                         // 0x0078(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFeedbackContext                          Context;                                           // 0x0079(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortFeedbackResponse>          ResponseEvents;                                    // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bInterruptCurrentLine;                             // 0x0090(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanBeInterrupted;                                 // 0x0091(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanQue;                                           // 0x0092(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_93[0x5];                                       // 0x0093(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortFeedbackLine) == 0x000008, "Wrong alignment on FFortFeedbackLine");
static_assert(sizeof(FFortFeedbackLine) == 0x000098, "Wrong size on FFortFeedbackLine");
static_assert(offsetof(FFortFeedbackLine, Audio) == 0x000000, "Member 'FFortFeedbackLine::Audio' has a wrong offset!");
static_assert(offsetof(FFortFeedbackLine, AnimSequence) == 0x000028, "Member 'FFortFeedbackLine::AnimSequence' has a wrong offset!");
static_assert(offsetof(FFortFeedbackLine, AnimMontage) == 0x000050, "Member 'FFortFeedbackLine::AnimMontage' has a wrong offset!");
static_assert(offsetof(FFortFeedbackLine, Addressee) == 0x000078, "Member 'FFortFeedbackLine::Addressee' has a wrong offset!");
static_assert(offsetof(FFortFeedbackLine, Context) == 0x000079, "Member 'FFortFeedbackLine::Context' has a wrong offset!");
static_assert(offsetof(FFortFeedbackLine, ResponseEvents) == 0x000080, "Member 'FFortFeedbackLine::ResponseEvents' has a wrong offset!");
static_assert(offsetof(FFortFeedbackLine, bInterruptCurrentLine) == 0x000090, "Member 'FFortFeedbackLine::bInterruptCurrentLine' has a wrong offset!");
static_assert(offsetof(FFortFeedbackLine, bCanBeInterrupted) == 0x000091, "Member 'FFortFeedbackLine::bCanBeInterrupted' has a wrong offset!");
static_assert(offsetof(FFortFeedbackLine, bCanQue) == 0x000092, "Member 'FFortFeedbackLine::bCanQue' has a wrong offset!");

// ScriptStruct FortniteGame.FortFeedbackAction
// 0x0030 (0x0030 - 0x0000)
struct FFortFeedbackAction
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortFeedbackHandle                    Handle;                                            // 0x0008(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FFortFeedbackLine>              Lines;                                             // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortFeedbackAction) == 0x000008, "Wrong alignment on FFortFeedbackAction");
static_assert(sizeof(FFortFeedbackAction) == 0x000030, "Wrong size on FFortFeedbackAction");
static_assert(offsetof(FFortFeedbackAction, Handle) == 0x000008, "Member 'FFortFeedbackAction::Handle' has a wrong offset!");
static_assert(offsetof(FFortFeedbackAction, Lines) == 0x000020, "Member 'FFortFeedbackAction::Lines' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionInfoOption
// 0x0030 (0x0030 - 0x0000)
struct FFortMissionInfoOption final
{
public:
	TSoftObjectPtr<class UFortMissionInfo>        MissionInfo;                                       // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDifficultyLevel;                                // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMissionInfoOption) == 0x000008, "Wrong alignment on FFortMissionInfoOption");
static_assert(sizeof(FFortMissionInfoOption) == 0x000030, "Wrong size on FFortMissionInfoOption");
static_assert(offsetof(FFortMissionInfoOption, MissionInfo) == 0x000000, "Member 'FFortMissionInfoOption::MissionInfo' has a wrong offset!");
static_assert(offsetof(FFortMissionInfoOption, MinDifficultyLevel) == 0x000028, "Member 'FFortMissionInfoOption::MinDifficultyLevel' has a wrong offset!");

// ScriptStruct FortniteGame.FortFeedbackActionBankDefined
// 0x0008 (0x0038 - 0x0030)
struct FFortFeedbackActionBankDefined final : public FFortFeedbackAction
{
public:
	float                                         MinReplayTime;                                     // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinReplayTimeForSpeaker;                           // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortFeedbackActionBankDefined) == 0x000008, "Wrong alignment on FFortFeedbackActionBankDefined");
static_assert(sizeof(FFortFeedbackActionBankDefined) == 0x000038, "Wrong size on FFortFeedbackActionBankDefined");
static_assert(offsetof(FFortFeedbackActionBankDefined, MinReplayTime) == 0x000030, "Member 'FFortFeedbackActionBankDefined::MinReplayTime' has a wrong offset!");
static_assert(offsetof(FFortFeedbackActionBankDefined, MinReplayTimeForSpeaker) == 0x000034, "Member 'FFortFeedbackActionBankDefined::MinReplayTimeForSpeaker' has a wrong offset!");

// ScriptStruct FortniteGame.FortLightAnimSet
// 0x0020 (0x0020 - 0x0000)
struct FFortLightAnimSet final
{
public:
	class ULightComponent*                        LightComp;                                         // 0x0000(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortFloatAnimationInfo>        IntensityAnims;                                    // 0x0008(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortLightAnimSet) == 0x000008, "Wrong alignment on FFortLightAnimSet");
static_assert(sizeof(FFortLightAnimSet) == 0x000020, "Wrong size on FFortLightAnimSet");
static_assert(offsetof(FFortLightAnimSet, LightComp) == 0x000000, "Member 'FFortLightAnimSet::LightComp' has a wrong offset!");
static_assert(offsetof(FFortLightAnimSet, IntensityAnims) == 0x000008, "Member 'FFortLightAnimSet::IntensityAnims' has a wrong offset!");

// ScriptStruct FortniteGame.FortParticleAnimSet
// 0x0020 (0x0020 - 0x0000)
struct FFortParticleAnimSet final
{
public:
	class UParticleSystemComponent*               PSC;                                               // 0x0000(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortFloatParamAnimationInfo>   ParamAnims;                                        // 0x0008(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortParticleAnimSet) == 0x000008, "Wrong alignment on FFortParticleAnimSet");
static_assert(sizeof(FFortParticleAnimSet) == 0x000020, "Wrong size on FFortParticleAnimSet");
static_assert(offsetof(FFortParticleAnimSet, PSC) == 0x000000, "Member 'FFortParticleAnimSet::PSC' has a wrong offset!");
static_assert(offsetof(FFortParticleAnimSet, ParamAnims) == 0x000008, "Member 'FFortParticleAnimSet::ParamAnims' has a wrong offset!");

// ScriptStruct FortniteGame.FortAthenaGamepadLookSettings
// 0x00C0 (0x00C0 - 0x0000)
struct FFortAthenaGamepadLookSettings final
{
public:
	class UCurveFloat*                            GamepadLookYawCurves[0xA];                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            GamepadLookPitchCurves[0xA];                       // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              GamepadLookScale;                                  // 0x00A0(0x0008)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GamepadLookScaleDownsightsDecayTime;               // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              GamepadLookAccelTime;                              // 0x00AC(0x0008)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              GamepadLookDecelTime;                              // 0x00B4(0x0008)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAthenaGamepadLookSettings) == 0x000008, "Wrong alignment on FFortAthenaGamepadLookSettings");
static_assert(sizeof(FFortAthenaGamepadLookSettings) == 0x0000C0, "Wrong size on FFortAthenaGamepadLookSettings");
static_assert(offsetof(FFortAthenaGamepadLookSettings, GamepadLookYawCurves) == 0x000000, "Member 'FFortAthenaGamepadLookSettings::GamepadLookYawCurves' has a wrong offset!");
static_assert(offsetof(FFortAthenaGamepadLookSettings, GamepadLookPitchCurves) == 0x000050, "Member 'FFortAthenaGamepadLookSettings::GamepadLookPitchCurves' has a wrong offset!");
static_assert(offsetof(FFortAthenaGamepadLookSettings, GamepadLookScale) == 0x0000A0, "Member 'FFortAthenaGamepadLookSettings::GamepadLookScale' has a wrong offset!");
static_assert(offsetof(FFortAthenaGamepadLookSettings, GamepadLookScaleDownsightsDecayTime) == 0x0000A8, "Member 'FFortAthenaGamepadLookSettings::GamepadLookScaleDownsightsDecayTime' has a wrong offset!");
static_assert(offsetof(FFortAthenaGamepadLookSettings, GamepadLookAccelTime) == 0x0000AC, "Member 'FFortAthenaGamepadLookSettings::GamepadLookAccelTime' has a wrong offset!");
static_assert(offsetof(FFortAthenaGamepadLookSettings, GamepadLookDecelTime) == 0x0000B4, "Member 'FFortAthenaGamepadLookSettings::GamepadLookDecelTime' has a wrong offset!");

// ScriptStruct FortniteGame.FortCraftingResultNotification
// 0x0010 (0x0010 - 0x0000)
struct FFortCraftingResultNotification final
{
public:
	TArray<struct FMcpLootEntry>                  ItemsCrafted;                                      // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCraftingResultNotification) == 0x000008, "Wrong alignment on FFortCraftingResultNotification");
static_assert(sizeof(FFortCraftingResultNotification) == 0x000010, "Wrong size on FFortCraftingResultNotification");
static_assert(offsetof(FFortCraftingResultNotification, ItemsCrafted) == 0x000000, "Member 'FFortCraftingResultNotification::ItemsCrafted' has a wrong offset!");

// ScriptStruct FortniteGame.FortSplineMeshScaleAnimationInfo
// 0x0010 (0x0028 - 0x0018)
struct FFortSplineMeshScaleAnimationInfo final : public FFortFXAnimationInfoBase
{
public:
	uint8                                         Pad_18[0x10];                                      // 0x0018(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortSplineMeshScaleAnimationInfo) == 0x000008, "Wrong alignment on FFortSplineMeshScaleAnimationInfo");
static_assert(sizeof(FFortSplineMeshScaleAnimationInfo) == 0x000028, "Wrong size on FFortSplineMeshScaleAnimationInfo");

// ScriptStruct FortniteGame.FortSplineMeshSnapAnimationInfo
// 0x0010 (0x0028 - 0x0018)
struct FFortSplineMeshSnapAnimationInfo final : public FFortFXAnimationInfoBase
{
public:
	class USplineComponent*                       TargetSpline;                                      // 0x0018(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortSplineMeshSnapAnimationInfo) == 0x000008, "Wrong alignment on FFortSplineMeshSnapAnimationInfo");
static_assert(sizeof(FFortSplineMeshSnapAnimationInfo) == 0x000028, "Wrong size on FFortSplineMeshSnapAnimationInfo");
static_assert(offsetof(FFortSplineMeshSnapAnimationInfo, TargetSpline) == 0x000018, "Member 'FFortSplineMeshSnapAnimationInfo::TargetSpline' has a wrong offset!");

// ScriptStruct FortniteGame.FortSplineMeshAnimSet
// 0x0030 (0x0030 - 0x0000)
struct FFortSplineMeshAnimSet final
{
public:
	class USplineMeshComponent*                   SplineMesh;                                        // 0x0000(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortSplineMeshScaleAnimationInfo> ScaleAnims;                                        // 0x0008(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FFortSplineMeshSnapAnimationInfo> SnapAnims;                                         // 0x0018(0x0010)(ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortSplineMeshAnimSet) == 0x000008, "Wrong alignment on FFortSplineMeshAnimSet");
static_assert(sizeof(FFortSplineMeshAnimSet) == 0x000030, "Wrong size on FFortSplineMeshAnimSet");
static_assert(offsetof(FFortSplineMeshAnimSet, SplineMesh) == 0x000000, "Member 'FFortSplineMeshAnimSet::SplineMesh' has a wrong offset!");
static_assert(offsetof(FFortSplineMeshAnimSet, ScaleAnims) == 0x000008, "Member 'FFortSplineMeshAnimSet::ScaleAnims' has a wrong offset!");
static_assert(offsetof(FFortSplineMeshAnimSet, SnapAnims) == 0x000018, "Member 'FFortSplineMeshAnimSet::SnapAnims' has a wrong offset!");

// ScriptStruct FortniteGame.FortCollectedResourceNotification
// 0x0020 (0x0020 - 0x0000)
struct FFortCollectedResourceNotification final
{
public:
	struct FMcpLootResult                         Loot;                                              // 0x0000(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCollectedResourceNotification) == 0x000008, "Wrong alignment on FFortCollectedResourceNotification");
static_assert(sizeof(FFortCollectedResourceNotification) == 0x000020, "Wrong size on FFortCollectedResourceNotification");
static_assert(offsetof(FFortCollectedResourceNotification, Loot) == 0x000000, "Member 'FFortCollectedResourceNotification::Loot' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionPlacementActorPreferredTagInfo
// 0x0038 (0x0038 - 0x0000)
struct FFortMissionPlacementActorPreferredTagInfo final
{
public:
	struct FDataTableRowHandle                    DifficultyInfo;                                    // 0x0000(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  PlacementActorPreferredTags;                       // 0x0010(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         Difficulty;                                        // 0x0030(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMissionPlacementActorPreferredTagInfo) == 0x000008, "Wrong alignment on FFortMissionPlacementActorPreferredTagInfo");
static_assert(sizeof(FFortMissionPlacementActorPreferredTagInfo) == 0x000038, "Wrong size on FFortMissionPlacementActorPreferredTagInfo");
static_assert(offsetof(FFortMissionPlacementActorPreferredTagInfo, DifficultyInfo) == 0x000000, "Member 'FFortMissionPlacementActorPreferredTagInfo::DifficultyInfo' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementActorPreferredTagInfo, PlacementActorPreferredTags) == 0x000010, "Member 'FFortMissionPlacementActorPreferredTagInfo::PlacementActorPreferredTags' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementActorPreferredTagInfo, Difficulty) == 0x000030, "Member 'FFortMissionPlacementActorPreferredTagInfo::Difficulty' has a wrong offset!");

// ScriptStruct FortniteGame.FortRangedWeaponStats
// 0x0130 (0x0250 - 0x0120)
struct FFortRangedWeaponStats final : public FFortBaseWeaponStats
{
public:
	float                                         Spread;                                            // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpreadDownsights;                                  // 0x0124(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StandingStillSpreadMultiplier;                     // 0x0128(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AthenaCrouchingSpreadMultiplier;                   // 0x012C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AthenaJumpingFallingSpreadMultiplier;              // 0x0130(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AthenaSprintingSpreadMultiplier;                   // 0x0134(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinSpeedForSpreadMultiplier;                       // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxSpeedForSpreadMultiplier;                       // 0x013C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpreadDownsightsAdditionalCooldownTime;            // 0x0140(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HeatX1;                                            // 0x0144(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HeatY1;                                            // 0x0148(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HeatX2;                                            // 0x014C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HeatY2;                                            // 0x0150(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HeatX3;                                            // 0x0154(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HeatY3;                                            // 0x0158(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HeatXScale;                                        // 0x015C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HeatYScale;                                        // 0x0160(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CoolX1;                                            // 0x0164(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CoolY1;                                            // 0x0168(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CoolX2;                                            // 0x016C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CoolY2;                                            // 0x0170(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CoolX3;                                            // 0x0174(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CoolY3;                                            // 0x0178(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CoolXScale;                                        // 0x017C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CoolYScale;                                        // 0x0180(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BulletsPerCartridge;                               // 0x0184(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FiringRate;                                        // 0x0188(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ROFScale;                                          // 0x018C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BurstFiringRate;                                   // 0x0190(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RecoilVert;                                        // 0x0194(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RecoilVertScale;                                   // 0x0198(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RecoilVertScaleGamepad;                            // 0x019C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         VertRecoilDownChance;                              // 0x01A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RecoilHoriz;                                       // 0x01A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RecoilHorizScale;                                  // 0x01A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RecoilHorizScaleGamepad;                           // 0x01AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RecoilInterpSpeed;                                 // 0x01B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RecoilRecoveryInterpSpeed;                         // 0x01B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RecoilRecoveryDelay;                               // 0x01B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RecoilRecoveryFraction;                            // 0x01BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RecoilDownsightsMultiplier;                        // 0x01C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AthenaRecoilMagnitudeMin;                          // 0x01C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AthenaRecoilMagnitudeMax;                          // 0x01C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AthenaRecoilMagnitudeScale;                        // 0x01CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AthenaRecoilAngleMin;                              // 0x01D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AthenaRecoilAngleMax;                              // 0x01D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AthenaRecoilRollMagnitudeMin;                      // 0x01D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AthenaRecoilRollMagnitudeMax;                      // 0x01DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AthenaRecoilInterpSpeed;                           // 0x01E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AthenaRecoilRecoveryInterpSpeed;                   // 0x01E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AthenaRecoilDownsightsMultiplier;                  // 0x01E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AthenaAimAssistRange;                              // 0x01EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ADSTransitionInTime;                               // 0x01F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ADSTransitionOutTime;                              // 0x01F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxSpareAmmo;                                      // 0x01F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BulletsPerTracer;                                  // 0x01FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AIDelayBeforeFiringMin;                            // 0x0200(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AIDelayBeforeFiringMax;                            // 0x0204(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AIFireDurationMin;                                 // 0x0208(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AIFireDurationMax;                                 // 0x020C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AIMinSpreadDuration;                               // 0x0210(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AIMaxSpreadDuration;                               // 0x0214(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AIDurationSpreadMultiplier;                        // 0x0218(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AIAdditionalSpreadForTargetMovingLaterally;        // 0x021C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EQSDensity;                                        // 0x0220(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinApproachRange;                                  // 0x0224(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinActualRange;                                    // 0x0228(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinPreferredRange;                                 // 0x022C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinPreferredRangeEQS;                              // 0x0230(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxPreferredRangeEQS;                              // 0x0234(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxPreferredRange;                                 // 0x0238(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxActualRange;                                    // 0x023C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxApproachRange;                                  // 0x0240(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SweepRadius;                                       // 0x0244(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AutoReloadDelayOverride;                           // 0x0248(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_24C[0x4];                                      // 0x024C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortRangedWeaponStats) == 0x000008, "Wrong alignment on FFortRangedWeaponStats");
static_assert(sizeof(FFortRangedWeaponStats) == 0x000250, "Wrong size on FFortRangedWeaponStats");
static_assert(offsetof(FFortRangedWeaponStats, Spread) == 0x000120, "Member 'FFortRangedWeaponStats::Spread' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, SpreadDownsights) == 0x000124, "Member 'FFortRangedWeaponStats::SpreadDownsights' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, StandingStillSpreadMultiplier) == 0x000128, "Member 'FFortRangedWeaponStats::StandingStillSpreadMultiplier' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AthenaCrouchingSpreadMultiplier) == 0x00012C, "Member 'FFortRangedWeaponStats::AthenaCrouchingSpreadMultiplier' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AthenaJumpingFallingSpreadMultiplier) == 0x000130, "Member 'FFortRangedWeaponStats::AthenaJumpingFallingSpreadMultiplier' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AthenaSprintingSpreadMultiplier) == 0x000134, "Member 'FFortRangedWeaponStats::AthenaSprintingSpreadMultiplier' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, MinSpeedForSpreadMultiplier) == 0x000138, "Member 'FFortRangedWeaponStats::MinSpeedForSpreadMultiplier' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, MaxSpeedForSpreadMultiplier) == 0x00013C, "Member 'FFortRangedWeaponStats::MaxSpeedForSpreadMultiplier' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, SpreadDownsightsAdditionalCooldownTime) == 0x000140, "Member 'FFortRangedWeaponStats::SpreadDownsightsAdditionalCooldownTime' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, HeatX1) == 0x000144, "Member 'FFortRangedWeaponStats::HeatX1' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, HeatY1) == 0x000148, "Member 'FFortRangedWeaponStats::HeatY1' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, HeatX2) == 0x00014C, "Member 'FFortRangedWeaponStats::HeatX2' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, HeatY2) == 0x000150, "Member 'FFortRangedWeaponStats::HeatY2' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, HeatX3) == 0x000154, "Member 'FFortRangedWeaponStats::HeatX3' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, HeatY3) == 0x000158, "Member 'FFortRangedWeaponStats::HeatY3' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, HeatXScale) == 0x00015C, "Member 'FFortRangedWeaponStats::HeatXScale' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, HeatYScale) == 0x000160, "Member 'FFortRangedWeaponStats::HeatYScale' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, CoolX1) == 0x000164, "Member 'FFortRangedWeaponStats::CoolX1' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, CoolY1) == 0x000168, "Member 'FFortRangedWeaponStats::CoolY1' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, CoolX2) == 0x00016C, "Member 'FFortRangedWeaponStats::CoolX2' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, CoolY2) == 0x000170, "Member 'FFortRangedWeaponStats::CoolY2' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, CoolX3) == 0x000174, "Member 'FFortRangedWeaponStats::CoolX3' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, CoolY3) == 0x000178, "Member 'FFortRangedWeaponStats::CoolY3' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, CoolXScale) == 0x00017C, "Member 'FFortRangedWeaponStats::CoolXScale' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, CoolYScale) == 0x000180, "Member 'FFortRangedWeaponStats::CoolYScale' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, BulletsPerCartridge) == 0x000184, "Member 'FFortRangedWeaponStats::BulletsPerCartridge' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, FiringRate) == 0x000188, "Member 'FFortRangedWeaponStats::FiringRate' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, ROFScale) == 0x00018C, "Member 'FFortRangedWeaponStats::ROFScale' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, BurstFiringRate) == 0x000190, "Member 'FFortRangedWeaponStats::BurstFiringRate' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, RecoilVert) == 0x000194, "Member 'FFortRangedWeaponStats::RecoilVert' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, RecoilVertScale) == 0x000198, "Member 'FFortRangedWeaponStats::RecoilVertScale' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, RecoilVertScaleGamepad) == 0x00019C, "Member 'FFortRangedWeaponStats::RecoilVertScaleGamepad' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, VertRecoilDownChance) == 0x0001A0, "Member 'FFortRangedWeaponStats::VertRecoilDownChance' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, RecoilHoriz) == 0x0001A4, "Member 'FFortRangedWeaponStats::RecoilHoriz' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, RecoilHorizScale) == 0x0001A8, "Member 'FFortRangedWeaponStats::RecoilHorizScale' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, RecoilHorizScaleGamepad) == 0x0001AC, "Member 'FFortRangedWeaponStats::RecoilHorizScaleGamepad' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, RecoilInterpSpeed) == 0x0001B0, "Member 'FFortRangedWeaponStats::RecoilInterpSpeed' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, RecoilRecoveryInterpSpeed) == 0x0001B4, "Member 'FFortRangedWeaponStats::RecoilRecoveryInterpSpeed' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, RecoilRecoveryDelay) == 0x0001B8, "Member 'FFortRangedWeaponStats::RecoilRecoveryDelay' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, RecoilRecoveryFraction) == 0x0001BC, "Member 'FFortRangedWeaponStats::RecoilRecoveryFraction' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, RecoilDownsightsMultiplier) == 0x0001C0, "Member 'FFortRangedWeaponStats::RecoilDownsightsMultiplier' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AthenaRecoilMagnitudeMin) == 0x0001C4, "Member 'FFortRangedWeaponStats::AthenaRecoilMagnitudeMin' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AthenaRecoilMagnitudeMax) == 0x0001C8, "Member 'FFortRangedWeaponStats::AthenaRecoilMagnitudeMax' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AthenaRecoilMagnitudeScale) == 0x0001CC, "Member 'FFortRangedWeaponStats::AthenaRecoilMagnitudeScale' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AthenaRecoilAngleMin) == 0x0001D0, "Member 'FFortRangedWeaponStats::AthenaRecoilAngleMin' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AthenaRecoilAngleMax) == 0x0001D4, "Member 'FFortRangedWeaponStats::AthenaRecoilAngleMax' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AthenaRecoilRollMagnitudeMin) == 0x0001D8, "Member 'FFortRangedWeaponStats::AthenaRecoilRollMagnitudeMin' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AthenaRecoilRollMagnitudeMax) == 0x0001DC, "Member 'FFortRangedWeaponStats::AthenaRecoilRollMagnitudeMax' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AthenaRecoilInterpSpeed) == 0x0001E0, "Member 'FFortRangedWeaponStats::AthenaRecoilInterpSpeed' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AthenaRecoilRecoveryInterpSpeed) == 0x0001E4, "Member 'FFortRangedWeaponStats::AthenaRecoilRecoveryInterpSpeed' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AthenaRecoilDownsightsMultiplier) == 0x0001E8, "Member 'FFortRangedWeaponStats::AthenaRecoilDownsightsMultiplier' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AthenaAimAssistRange) == 0x0001EC, "Member 'FFortRangedWeaponStats::AthenaAimAssistRange' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, ADSTransitionInTime) == 0x0001F0, "Member 'FFortRangedWeaponStats::ADSTransitionInTime' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, ADSTransitionOutTime) == 0x0001F4, "Member 'FFortRangedWeaponStats::ADSTransitionOutTime' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, MaxSpareAmmo) == 0x0001F8, "Member 'FFortRangedWeaponStats::MaxSpareAmmo' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, BulletsPerTracer) == 0x0001FC, "Member 'FFortRangedWeaponStats::BulletsPerTracer' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AIDelayBeforeFiringMin) == 0x000200, "Member 'FFortRangedWeaponStats::AIDelayBeforeFiringMin' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AIDelayBeforeFiringMax) == 0x000204, "Member 'FFortRangedWeaponStats::AIDelayBeforeFiringMax' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AIFireDurationMin) == 0x000208, "Member 'FFortRangedWeaponStats::AIFireDurationMin' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AIFireDurationMax) == 0x00020C, "Member 'FFortRangedWeaponStats::AIFireDurationMax' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AIMinSpreadDuration) == 0x000210, "Member 'FFortRangedWeaponStats::AIMinSpreadDuration' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AIMaxSpreadDuration) == 0x000214, "Member 'FFortRangedWeaponStats::AIMaxSpreadDuration' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AIDurationSpreadMultiplier) == 0x000218, "Member 'FFortRangedWeaponStats::AIDurationSpreadMultiplier' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AIAdditionalSpreadForTargetMovingLaterally) == 0x00021C, "Member 'FFortRangedWeaponStats::AIAdditionalSpreadForTargetMovingLaterally' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, EQSDensity) == 0x000220, "Member 'FFortRangedWeaponStats::EQSDensity' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, MinApproachRange) == 0x000224, "Member 'FFortRangedWeaponStats::MinApproachRange' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, MinActualRange) == 0x000228, "Member 'FFortRangedWeaponStats::MinActualRange' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, MinPreferredRange) == 0x00022C, "Member 'FFortRangedWeaponStats::MinPreferredRange' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, MinPreferredRangeEQS) == 0x000230, "Member 'FFortRangedWeaponStats::MinPreferredRangeEQS' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, MaxPreferredRangeEQS) == 0x000234, "Member 'FFortRangedWeaponStats::MaxPreferredRangeEQS' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, MaxPreferredRange) == 0x000238, "Member 'FFortRangedWeaponStats::MaxPreferredRange' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, MaxActualRange) == 0x00023C, "Member 'FFortRangedWeaponStats::MaxActualRange' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, MaxApproachRange) == 0x000240, "Member 'FFortRangedWeaponStats::MaxApproachRange' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, SweepRadius) == 0x000244, "Member 'FFortRangedWeaponStats::SweepRadius' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, AutoReloadDelayOverride) == 0x000248, "Member 'FFortRangedWeaponStats::AutoReloadDelayOverride' has a wrong offset!");

// ScriptStruct FortniteGame.AccountIdAndScore
// 0x0018 (0x0018 - 0x0000)
struct FAccountIdAndScore final
{
public:
	class FString                                 AccountId;                                         // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalScore;                                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCriticalMatchBonus;                               // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccountIdAndScore) == 0x000008, "Wrong alignment on FAccountIdAndScore");
static_assert(sizeof(FAccountIdAndScore) == 0x000018, "Wrong size on FAccountIdAndScore");
static_assert(offsetof(FAccountIdAndScore, AccountId) == 0x000000, "Member 'FAccountIdAndScore::AccountId' has a wrong offset!");
static_assert(offsetof(FAccountIdAndScore, TotalScore) == 0x000010, "Member 'FAccountIdAndScore::TotalScore' has a wrong offset!");
static_assert(offsetof(FAccountIdAndScore, bCriticalMatchBonus) == 0x000014, "Member 'FAccountIdAndScore::bCriticalMatchBonus' has a wrong offset!");

// ScriptStruct FortniteGame.TieredWaveSet
// 0x0010 (0x0018 - 0x0008)
struct FTieredWaveSet final : public FTableRowBase
{
public:
	TArray<struct FTieredWaveSetData>             WaveData;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTieredWaveSet) == 0x000008, "Wrong alignment on FTieredWaveSet");
static_assert(sizeof(FTieredWaveSet) == 0x000018, "Wrong size on FTieredWaveSet");
static_assert(offsetof(FTieredWaveSet, WaveData) == 0x000008, "Member 'FTieredWaveSet::WaveData' has a wrong offset!");

// ScriptStruct FortniteGame.TieredWaveSetCollectionData
// 0x0088 (0x0088 - 0x0000)
struct FTieredWaveSetCollectionData final
{
public:
	class FText                                   DefenseText;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	class FText                                   LevelText;                                         // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	class FText                                   WaveText;                                          // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	class FText                                   BreatherText;                                      // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	int32                                         MinLvl;                                            // 0x0060(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLvl;                                            // 0x0064(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BaseWaveLengthRowName;                             // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BaseNumOfKillsRowName;                             // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BaseNumOfKillPointsRowName;                        // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WaveSet;                                           // 0x0080(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTieredWaveSetCollectionData) == 0x000008, "Wrong alignment on FTieredWaveSetCollectionData");
static_assert(sizeof(FTieredWaveSetCollectionData) == 0x000088, "Wrong size on FTieredWaveSetCollectionData");
static_assert(offsetof(FTieredWaveSetCollectionData, DefenseText) == 0x000000, "Member 'FTieredWaveSetCollectionData::DefenseText' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetCollectionData, LevelText) == 0x000018, "Member 'FTieredWaveSetCollectionData::LevelText' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetCollectionData, WaveText) == 0x000030, "Member 'FTieredWaveSetCollectionData::WaveText' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetCollectionData, BreatherText) == 0x000048, "Member 'FTieredWaveSetCollectionData::BreatherText' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetCollectionData, MinLvl) == 0x000060, "Member 'FTieredWaveSetCollectionData::MinLvl' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetCollectionData, MaxLvl) == 0x000064, "Member 'FTieredWaveSetCollectionData::MaxLvl' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetCollectionData, BaseWaveLengthRowName) == 0x000068, "Member 'FTieredWaveSetCollectionData::BaseWaveLengthRowName' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetCollectionData, BaseNumOfKillsRowName) == 0x000070, "Member 'FTieredWaveSetCollectionData::BaseNumOfKillsRowName' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetCollectionData, BaseNumOfKillPointsRowName) == 0x000078, "Member 'FTieredWaveSetCollectionData::BaseNumOfKillPointsRowName' has a wrong offset!");
static_assert(offsetof(FTieredWaveSetCollectionData, WaveSet) == 0x000080, "Member 'FTieredWaveSetCollectionData::WaveSet' has a wrong offset!");

// ScriptStruct FortniteGame.TieredWaveSetCollection
// 0x0010 (0x0018 - 0x0008)
struct FTieredWaveSetCollection final : public FTableRowBase
{
public:
	TArray<struct FTieredWaveSetCollectionData>   CollectionData;                                    // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTieredWaveSetCollection) == 0x000008, "Wrong alignment on FTieredWaveSetCollection");
static_assert(sizeof(FTieredWaveSetCollection) == 0x000018, "Wrong size on FTieredWaveSetCollection");
static_assert(offsetof(FTieredWaveSetCollection, CollectionData) == 0x000008, "Member 'FTieredWaveSetCollection::CollectionData' has a wrong offset!");

// ScriptStruct FortniteGame.TrackMovement
// 0x0010 (0x0010 - 0x0000)
struct FTrackMovement
{
public:
	class USplineComponent*                       CurrentSpline;                                     // 0x0000(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceAlongSpline;                               // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReverseDirectionAlongSpline;                      // 0x000C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTrackMovement) == 0x000008, "Wrong alignment on FTrackMovement");
static_assert(sizeof(FTrackMovement) == 0x000010, "Wrong size on FTrackMovement");
static_assert(offsetof(FTrackMovement, CurrentSpline) == 0x000000, "Member 'FTrackMovement::CurrentSpline' has a wrong offset!");
static_assert(offsetof(FTrackMovement, DistanceAlongSpline) == 0x000008, "Member 'FTrackMovement::DistanceAlongSpline' has a wrong offset!");
static_assert(offsetof(FTrackMovement, bReverseDirectionAlongSpline) == 0x00000C, "Member 'FTrackMovement::bReverseDirectionAlongSpline' has a wrong offset!");

// ScriptStruct FortniteGame.RepTrackMovement
// 0x0008 (0x0018 - 0x0010)
struct FRepTrackMovement final : public FTrackMovement
{
public:
	float                                         Timestamp;                                         // 0x0010(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRepTrackMovement) == 0x000008, "Wrong alignment on FRepTrackMovement");
static_assert(sizeof(FRepTrackMovement) == 0x000018, "Wrong size on FRepTrackMovement");
static_assert(offsetof(FRepTrackMovement, Timestamp) == 0x000010, "Member 'FRepTrackMovement::Timestamp' has a wrong offset!");

// ScriptStruct FortniteGame.ScoreMultiplierRow
// 0x0080 (0x0088 - 0x0008)
struct FScoreMultiplierRow final : public FTableRowBase
{
public:
	float                                         CombatMultiplier;                                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BuildingMultiplier;                                // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         UtilityMultiplier;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BadgeMultiplier;                                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MonsterKills;                                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MonsterDamagePoints;                               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PlayerKills;                                       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         WoodGathered;                                      // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         StoneGathered;                                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MetalGathered;                                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Deaths;                                            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BuildingsBuilt;                                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BuildingsBuilt_Wood;                               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BuildingsBuilt_Stone;                              // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BuildingsBuilt_Metal;                              // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BuildingsUpgraded_Wood2;                           // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BuildingsUpgraded_Wood3;                           // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BuildingsUpgraded_Stone2;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BuildingsUpgraded_Stone3;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BuildingsUpgraded_Metal2;                          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BuildingsUpgraded_Metal3;                          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BuildingsDestroyed;                                // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Repair_Wood;                                       // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Repair_Stone;                                      // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Repair_Metal;                                      // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         FlagsCaptured;                                     // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         FlagsReturned;                                     // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ContainersLooted;                                  // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CraftingPoints;                                    // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TrapPlacementPoints;                               // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TrapActivationPoints;                              // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FScoreMultiplierRow) == 0x000008, "Wrong alignment on FScoreMultiplierRow");
static_assert(sizeof(FScoreMultiplierRow) == 0x000088, "Wrong size on FScoreMultiplierRow");
static_assert(offsetof(FScoreMultiplierRow, CombatMultiplier) == 0x000008, "Member 'FScoreMultiplierRow::CombatMultiplier' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, BuildingMultiplier) == 0x00000C, "Member 'FScoreMultiplierRow::BuildingMultiplier' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, UtilityMultiplier) == 0x000010, "Member 'FScoreMultiplierRow::UtilityMultiplier' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, BadgeMultiplier) == 0x000014, "Member 'FScoreMultiplierRow::BadgeMultiplier' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, MonsterKills) == 0x000018, "Member 'FScoreMultiplierRow::MonsterKills' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, MonsterDamagePoints) == 0x00001C, "Member 'FScoreMultiplierRow::MonsterDamagePoints' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, PlayerKills) == 0x000020, "Member 'FScoreMultiplierRow::PlayerKills' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, WoodGathered) == 0x000024, "Member 'FScoreMultiplierRow::WoodGathered' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, StoneGathered) == 0x000028, "Member 'FScoreMultiplierRow::StoneGathered' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, MetalGathered) == 0x00002C, "Member 'FScoreMultiplierRow::MetalGathered' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, Deaths) == 0x000030, "Member 'FScoreMultiplierRow::Deaths' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, BuildingsBuilt) == 0x000034, "Member 'FScoreMultiplierRow::BuildingsBuilt' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, BuildingsBuilt_Wood) == 0x000038, "Member 'FScoreMultiplierRow::BuildingsBuilt_Wood' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, BuildingsBuilt_Stone) == 0x00003C, "Member 'FScoreMultiplierRow::BuildingsBuilt_Stone' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, BuildingsBuilt_Metal) == 0x000040, "Member 'FScoreMultiplierRow::BuildingsBuilt_Metal' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, BuildingsUpgraded_Wood2) == 0x000044, "Member 'FScoreMultiplierRow::BuildingsUpgraded_Wood2' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, BuildingsUpgraded_Wood3) == 0x000048, "Member 'FScoreMultiplierRow::BuildingsUpgraded_Wood3' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, BuildingsUpgraded_Stone2) == 0x00004C, "Member 'FScoreMultiplierRow::BuildingsUpgraded_Stone2' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, BuildingsUpgraded_Stone3) == 0x000050, "Member 'FScoreMultiplierRow::BuildingsUpgraded_Stone3' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, BuildingsUpgraded_Metal2) == 0x000054, "Member 'FScoreMultiplierRow::BuildingsUpgraded_Metal2' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, BuildingsUpgraded_Metal3) == 0x000058, "Member 'FScoreMultiplierRow::BuildingsUpgraded_Metal3' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, BuildingsDestroyed) == 0x00005C, "Member 'FScoreMultiplierRow::BuildingsDestroyed' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, Repair_Wood) == 0x000060, "Member 'FScoreMultiplierRow::Repair_Wood' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, Repair_Stone) == 0x000064, "Member 'FScoreMultiplierRow::Repair_Stone' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, Repair_Metal) == 0x000068, "Member 'FScoreMultiplierRow::Repair_Metal' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, FlagsCaptured) == 0x00006C, "Member 'FScoreMultiplierRow::FlagsCaptured' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, FlagsReturned) == 0x000070, "Member 'FScoreMultiplierRow::FlagsReturned' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, ContainersLooted) == 0x000074, "Member 'FScoreMultiplierRow::ContainersLooted' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, CraftingPoints) == 0x000078, "Member 'FScoreMultiplierRow::CraftingPoints' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, TrapPlacementPoints) == 0x00007C, "Member 'FScoreMultiplierRow::TrapPlacementPoints' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, TrapActivationPoints) == 0x000080, "Member 'FScoreMultiplierRow::TrapActivationPoints' has a wrong offset!");

// ScriptStruct FortniteGame.KeepEventInfo
// 0x0030 (0x0030 - 0x0000)
struct FKeepEventInfo final
{
public:
	TSoftObjectPtr<class UFortKeepEventInfo>      KeepEvent;                                         // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DifficultyLevelOffset;                             // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKeepEventInfo) == 0x000008, "Wrong alignment on FKeepEventInfo");
static_assert(sizeof(FKeepEventInfo) == 0x000030, "Wrong size on FKeepEventInfo");
static_assert(offsetof(FKeepEventInfo, KeepEvent) == 0x000000, "Member 'FKeepEventInfo::KeepEvent' has a wrong offset!");
static_assert(offsetof(FKeepEventInfo, DifficultyLevelOffset) == 0x000028, "Member 'FKeepEventInfo::DifficultyLevelOffset' has a wrong offset!");

// ScriptStruct FortniteGame.FortQuestMissionCreationContext
// 0x0040 (0x0040 - 0x0000)
struct FFortQuestMissionCreationContext final
{
public:
	TSoftObjectPtr<class UFortMissionInfo>        MissionInfo;                                       // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayTagContainer>          MissionCreationContextTags;                        // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bSetQuestOwnerAsMissionOwner;                      // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxNumberToSpawnInWorld;                           // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortQuestMissionCreationContext) == 0x000008, "Wrong alignment on FFortQuestMissionCreationContext");
static_assert(sizeof(FFortQuestMissionCreationContext) == 0x000040, "Wrong size on FFortQuestMissionCreationContext");
static_assert(offsetof(FFortQuestMissionCreationContext, MissionInfo) == 0x000000, "Member 'FFortQuestMissionCreationContext::MissionInfo' has a wrong offset!");
static_assert(offsetof(FFortQuestMissionCreationContext, MissionCreationContextTags) == 0x000028, "Member 'FFortQuestMissionCreationContext::MissionCreationContextTags' has a wrong offset!");
static_assert(offsetof(FFortQuestMissionCreationContext, bSetQuestOwnerAsMissionOwner) == 0x000038, "Member 'FFortQuestMissionCreationContext::bSetQuestOwnerAsMissionOwner' has a wrong offset!");
static_assert(offsetof(FFortQuestMissionCreationContext, MaxNumberToSpawnInWorld) == 0x00003C, "Member 'FFortQuestMissionCreationContext::MaxNumberToSpawnInWorld' has a wrong offset!");

// ScriptStruct FortniteGame.FortAbilityTagRelationship
// 0x0048 (0x0048 - 0x0000)
struct FFortAbilityTagRelationship final
{
public:
	struct FGameplayTag                           AbilityTag;                                        // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AbilityTagsToBlock;                                // 0x0008(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AbilityTagsToCancel;                               // 0x0028(0x0020)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAbilityTagRelationship) == 0x000008, "Wrong alignment on FFortAbilityTagRelationship");
static_assert(sizeof(FFortAbilityTagRelationship) == 0x000048, "Wrong size on FFortAbilityTagRelationship");
static_assert(offsetof(FFortAbilityTagRelationship, AbilityTag) == 0x000000, "Member 'FFortAbilityTagRelationship::AbilityTag' has a wrong offset!");
static_assert(offsetof(FFortAbilityTagRelationship, AbilityTagsToBlock) == 0x000008, "Member 'FFortAbilityTagRelationship::AbilityTagsToBlock' has a wrong offset!");
static_assert(offsetof(FFortAbilityTagRelationship, AbilityTagsToCancel) == 0x000028, "Member 'FFortAbilityTagRelationship::AbilityTagsToCancel' has a wrong offset!");

// ScriptStruct FortniteGame.WorldItemAndMinMaxCount
// 0x0028 (0x0028 - 0x0000)
struct FWorldItemAndMinMaxCount final
{
public:
	struct FCurveTableRowHandle                   MinCurveTable;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   MaxCurveTable;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class UFortWorldItemDefinition*               Item;                                              // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorldItemAndMinMaxCount) == 0x000008, "Wrong alignment on FWorldItemAndMinMaxCount");
static_assert(sizeof(FWorldItemAndMinMaxCount) == 0x000028, "Wrong size on FWorldItemAndMinMaxCount");
static_assert(offsetof(FWorldItemAndMinMaxCount, MinCurveTable) == 0x000000, "Member 'FWorldItemAndMinMaxCount::MinCurveTable' has a wrong offset!");
static_assert(offsetof(FWorldItemAndMinMaxCount, MaxCurveTable) == 0x000010, "Member 'FWorldItemAndMinMaxCount::MaxCurveTable' has a wrong offset!");
static_assert(offsetof(FWorldItemAndMinMaxCount, Item) == 0x000020, "Member 'FWorldItemAndMinMaxCount::Item' has a wrong offset!");

// ScriptStruct FortniteGame.FortMultiSizeFont
// 0x0210 (0x0210 - 0x0000)
struct FFortMultiSizeFont final
{
public:
	struct FSlateFontInfo                         Font_XXS;                                          // 0x0000(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font_XS;                                           // 0x0058(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font_S;                                            // 0x00B0(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font_M;                                            // 0x0108(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font_L;                                            // 0x0160(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font_XL;                                           // 0x01B8(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMultiSizeFont) == 0x000008, "Wrong alignment on FFortMultiSizeFont");
static_assert(sizeof(FFortMultiSizeFont) == 0x000210, "Wrong size on FFortMultiSizeFont");
static_assert(offsetof(FFortMultiSizeFont, Font_XXS) == 0x000000, "Member 'FFortMultiSizeFont::Font_XXS' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeFont, Font_XS) == 0x000058, "Member 'FFortMultiSizeFont::Font_XS' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeFont, Font_S) == 0x0000B0, "Member 'FFortMultiSizeFont::Font_S' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeFont, Font_M) == 0x000108, "Member 'FFortMultiSizeFont::Font_M' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeFont, Font_L) == 0x000160, "Member 'FFortMultiSizeFont::Font_L' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeFont, Font_XL) == 0x0001B8, "Member 'FFortMultiSizeFont::Font_XL' has a wrong offset!");

// ScriptStruct FortniteGame.ItemAndCount
// 0x0010 (0x0010 - 0x0000)
struct FItemAndCount final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItemDefinition*                    Item;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemAndCount) == 0x000008, "Wrong alignment on FItemAndCount");
static_assert(sizeof(FItemAndCount) == 0x000010, "Wrong size on FItemAndCount");
static_assert(offsetof(FItemAndCount, Count) == 0x000000, "Member 'FItemAndCount::Count' has a wrong offset!");
static_assert(offsetof(FItemAndCount, Item) == 0x000008, "Member 'FItemAndCount::Item' has a wrong offset!");

// ScriptStruct FortniteGame.ItemDefinitionAndCount
// 0x0030 (0x0030 - 0x0000)
struct FItemDefinitionAndCount final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UFortItemDefinition>     ItemDefinition;                                    // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemDefinitionAndCount) == 0x000008, "Wrong alignment on FItemDefinitionAndCount");
static_assert(sizeof(FItemDefinitionAndCount) == 0x000030, "Wrong size on FItemDefinitionAndCount");
static_assert(offsetof(FItemDefinitionAndCount, Count) == 0x000000, "Member 'FItemDefinitionAndCount::Count' has a wrong offset!");
static_assert(offsetof(FItemDefinitionAndCount, ItemDefinition) == 0x000008, "Member 'FItemDefinitionAndCount::ItemDefinition' has a wrong offset!");

// ScriptStruct FortniteGame.FortObjectiveEntry
// 0x0058 (0x0058 - 0x0000)
struct FFortObjectiveEntry final
{
public:
	TSoftClassPtr<class UClass>                   ObjectiveRef;                                      // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortBadgeItemDefinition*               ObjectiveRewardBadge;                              // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortObjectiveRequirement                     MissionRequirement;                                // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  ObjectiveHandle;                                   // 0x0038(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortObjectiveEntry) == 0x000008, "Wrong alignment on FFortObjectiveEntry");
static_assert(sizeof(FFortObjectiveEntry) == 0x000058, "Wrong size on FFortObjectiveEntry");
static_assert(offsetof(FFortObjectiveEntry, ObjectiveRef) == 0x000000, "Member 'FFortObjectiveEntry::ObjectiveRef' has a wrong offset!");
static_assert(offsetof(FFortObjectiveEntry, ObjectiveRewardBadge) == 0x000028, "Member 'FFortObjectiveEntry::ObjectiveRewardBadge' has a wrong offset!");
static_assert(offsetof(FFortObjectiveEntry, MissionRequirement) == 0x000030, "Member 'FFortObjectiveEntry::MissionRequirement' has a wrong offset!");
static_assert(offsetof(FFortObjectiveEntry, ObjectiveHandle) == 0x000038, "Member 'FFortObjectiveEntry::ObjectiveHandle' has a wrong offset!");

// ScriptStruct FortniteGame.FortObjectiveBlock
// 0x0010 (0x0010 - 0x0000)
struct FFortObjectiveBlock final
{
public:
	TArray<struct FFortObjectiveEntry>            ObjectiveEntries;                                  // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortObjectiveBlock) == 0x000008, "Wrong alignment on FFortObjectiveBlock");
static_assert(sizeof(FFortObjectiveBlock) == 0x000010, "Wrong size on FFortObjectiveBlock");
static_assert(offsetof(FFortObjectiveBlock, ObjectiveEntries) == 0x000000, "Member 'FFortObjectiveBlock::ObjectiveEntries' has a wrong offset!");

// ScriptStruct FortniteGame.AttributeClamp
// 0x0028 (0x0028 - 0x0000)
struct FAttributeClamp final
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EClampType                                    ClampType;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ClampValue;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttributeClamp) == 0x000008, "Wrong alignment on FAttributeClamp");
static_assert(sizeof(FAttributeClamp) == 0x000028, "Wrong size on FAttributeClamp");
static_assert(offsetof(FAttributeClamp, Attribute) == 0x000000, "Member 'FAttributeClamp::Attribute' has a wrong offset!");
static_assert(offsetof(FAttributeClamp, ClampType) == 0x000020, "Member 'FAttributeClamp::ClampType' has a wrong offset!");
static_assert(offsetof(FAttributeClamp, ClampValue) == 0x000024, "Member 'FAttributeClamp::ClampValue' has a wrong offset!");

// ScriptStruct FortniteGame.PlayerClampInfo
// 0x0010 (0x0018 - 0x0008)
struct FPlayerClampInfo final : public FTableRowBase
{
public:
	TArray<struct FAttributeClamp>                AttributeClamps;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerClampInfo) == 0x000008, "Wrong alignment on FPlayerClampInfo");
static_assert(sizeof(FPlayerClampInfo) == 0x000018, "Wrong size on FPlayerClampInfo");
static_assert(offsetof(FPlayerClampInfo, AttributeClamps) == 0x000008, "Member 'FPlayerClampInfo::AttributeClamps' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlacedBuilding
// 0x0020 (0x0020 - 0x0000)
struct FFortPlacedBuilding final
{
public:
	class FString                                 BuildingTag;                                       // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlacedTag;                                         // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlacedBuilding) == 0x000008, "Wrong alignment on FFortPlacedBuilding");
static_assert(sizeof(FFortPlacedBuilding) == 0x000020, "Wrong size on FFortPlacedBuilding");
static_assert(offsetof(FFortPlacedBuilding, BuildingTag) == 0x000000, "Member 'FFortPlacedBuilding::BuildingTag' has a wrong offset!");
static_assert(offsetof(FFortPlacedBuilding, PlacedTag) == 0x000010, "Member 'FFortPlacedBuilding::PlacedTag' has a wrong offset!");

// ScriptStruct FortniteGame.FortOutpostCoreInfo
// 0x0020 (0x0020 - 0x0000)
struct FFortOutpostCoreInfo final
{
public:
	TArray<struct FFortPlacedBuilding>            PlacedBuildings;                                   // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         AccountsWithEditPermission;                        // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortOutpostCoreInfo) == 0x000008, "Wrong alignment on FFortOutpostCoreInfo");
static_assert(sizeof(FFortOutpostCoreInfo) == 0x000020, "Wrong size on FFortOutpostCoreInfo");
static_assert(offsetof(FFortOutpostCoreInfo, PlacedBuildings) == 0x000000, "Member 'FFortOutpostCoreInfo::PlacedBuildings' has a wrong offset!");
static_assert(offsetof(FFortOutpostCoreInfo, AccountsWithEditPermission) == 0x000010, "Member 'FFortOutpostCoreInfo::AccountsWithEditPermission' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionPlacementActorItem
// 0x0080 (0x0080 - 0x0000)
struct FFortMissionPlacementActorItem final
{
public:
	struct FGameplayTagContainer                  ItemIdentifyingTags;                               // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TagsToAddToChosenPlacementActor;                   // 0x0020(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UEnvQuery*                              PlacementQuery;                                    // 0x0040(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   ActorToPlace;                                      // 0x0048(0x0028)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NumLocationsToFind;                                // 0x0070(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSpawnActorAutomatically;                          // 0x0074(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldReserveLocations;                           // 0x0075(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSnapToGrid;                                       // 0x0076(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAdjustPlacementForFloors;                         // 0x0077(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDontCreateSpawnRiftsNearby;                       // 0x0078(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMissionPlacementActorItem) == 0x000008, "Wrong alignment on FFortMissionPlacementActorItem");
static_assert(sizeof(FFortMissionPlacementActorItem) == 0x000080, "Wrong size on FFortMissionPlacementActorItem");
static_assert(offsetof(FFortMissionPlacementActorItem, ItemIdentifyingTags) == 0x000000, "Member 'FFortMissionPlacementActorItem::ItemIdentifyingTags' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementActorItem, TagsToAddToChosenPlacementActor) == 0x000020, "Member 'FFortMissionPlacementActorItem::TagsToAddToChosenPlacementActor' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementActorItem, PlacementQuery) == 0x000040, "Member 'FFortMissionPlacementActorItem::PlacementQuery' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementActorItem, ActorToPlace) == 0x000048, "Member 'FFortMissionPlacementActorItem::ActorToPlace' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementActorItem, NumLocationsToFind) == 0x000070, "Member 'FFortMissionPlacementActorItem::NumLocationsToFind' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementActorItem, bSpawnActorAutomatically) == 0x000074, "Member 'FFortMissionPlacementActorItem::bSpawnActorAutomatically' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementActorItem, bShouldReserveLocations) == 0x000075, "Member 'FFortMissionPlacementActorItem::bShouldReserveLocations' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementActorItem, bSnapToGrid) == 0x000076, "Member 'FFortMissionPlacementActorItem::bSnapToGrid' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementActorItem, bAdjustPlacementForFloors) == 0x000077, "Member 'FFortMissionPlacementActorItem::bAdjustPlacementForFloors' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementActorItem, bDontCreateSpawnRiftsNearby) == 0x000078, "Member 'FFortMissionPlacementActorItem::bDontCreateSpawnRiftsNearby' has a wrong offset!");

// ScriptStruct FortniteGame.ScorePlacementTable
// 0x0040 (0x0040 - 0x0000)
struct FScorePlacementTable final
{
public:
	TArray<float>                                 Solo;                                              // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 Duos;                                              // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 Squads;                                            // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 FiftyFifty;                                        // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FScorePlacementTable) == 0x000008, "Wrong alignment on FScorePlacementTable");
static_assert(sizeof(FScorePlacementTable) == 0x000040, "Wrong size on FScorePlacementTable");
static_assert(offsetof(FScorePlacementTable, Solo) == 0x000000, "Member 'FScorePlacementTable::Solo' has a wrong offset!");
static_assert(offsetof(FScorePlacementTable, Duos) == 0x000010, "Member 'FScorePlacementTable::Duos' has a wrong offset!");
static_assert(offsetof(FScorePlacementTable, Squads) == 0x000020, "Member 'FScorePlacementTable::Squads' has a wrong offset!");
static_assert(offsetof(FScorePlacementTable, FiftyFifty) == 0x000030, "Member 'FScorePlacementTable::FiftyFifty' has a wrong offset!");

// ScriptStruct FortniteGame.BCActionInfo
// 0x0008 (0x0008 - 0x0000)
struct FBCActionInfo final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Action;                                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBCActionInfo) == 0x000004, "Wrong alignment on FBCActionInfo");
static_assert(sizeof(FBCActionInfo) == 0x000008, "Wrong size on FBCActionInfo");
static_assert(offsetof(FBCActionInfo, Type) == 0x000000, "Member 'FBCActionInfo::Type' has a wrong offset!");
static_assert(offsetof(FBCActionInfo, Action) == 0x000004, "Member 'FBCActionInfo::Action' has a wrong offset!");

// ScriptStruct FortniteGame.FortAbilityCost
// 0x0040 (0x0040 - 0x0000)
struct FFortAbilityCost final
{
public:
	EFortAbilityCostSource                        CostSource;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         CostValue;                                         // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UFortItemDefinition*                    ItemDefinition;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyApplyCostOnHit;                               // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAbilityCost) == 0x000008, "Wrong alignment on FFortAbilityCost");
static_assert(sizeof(FFortAbilityCost) == 0x000040, "Wrong size on FFortAbilityCost");
static_assert(offsetof(FFortAbilityCost, CostSource) == 0x000000, "Member 'FFortAbilityCost::CostSource' has a wrong offset!");
static_assert(offsetof(FFortAbilityCost, CostValue) == 0x000008, "Member 'FFortAbilityCost::CostValue' has a wrong offset!");
static_assert(offsetof(FFortAbilityCost, ItemDefinition) == 0x000030, "Member 'FFortAbilityCost::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FFortAbilityCost, bOnlyApplyCostOnHit) == 0x000038, "Member 'FFortAbilityCost::bOnlyApplyCostOnHit' has a wrong offset!");

// ScriptStruct FortniteGame.FortGeneratedMissionOption
// 0x0018 (0x0018 - 0x0000)
struct FFortGeneratedMissionOption final
{
public:
	class UFortDifficultyOptionCategoryMission*   MissionOptionCategory;                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortDifficultyOptionMission> MissionOption;                                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeLerpValue;                                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortGeneratedMissionOption) == 0x000008, "Wrong alignment on FFortGeneratedMissionOption");
static_assert(sizeof(FFortGeneratedMissionOption) == 0x000018, "Wrong size on FFortGeneratedMissionOption");
static_assert(offsetof(FFortGeneratedMissionOption, MissionOptionCategory) == 0x000000, "Member 'FFortGeneratedMissionOption::MissionOptionCategory' has a wrong offset!");
static_assert(offsetof(FFortGeneratedMissionOption, MissionOption) == 0x000008, "Member 'FFortGeneratedMissionOption::MissionOption' has a wrong offset!");
static_assert(offsetof(FFortGeneratedMissionOption, RangeLerpValue) == 0x000010, "Member 'FFortGeneratedMissionOption::RangeLerpValue' has a wrong offset!");

// ScriptStruct FortniteGame.FortGeneratedEncounterOption
// 0x0018 (0x0018 - 0x0000)
struct FFortGeneratedEncounterOption final
{
public:
	class UFortDifficultyOptionCategoryEncounter* EncounterOptionCategory;                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortDifficultyOptionEncounter> EncounterOption;                                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeLerpValue;                                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChangedSinceLastVLog;                             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortGeneratedEncounterOption) == 0x000008, "Wrong alignment on FFortGeneratedEncounterOption");
static_assert(sizeof(FFortGeneratedEncounterOption) == 0x000018, "Wrong size on FFortGeneratedEncounterOption");
static_assert(offsetof(FFortGeneratedEncounterOption, EncounterOptionCategory) == 0x000000, "Member 'FFortGeneratedEncounterOption::EncounterOptionCategory' has a wrong offset!");
static_assert(offsetof(FFortGeneratedEncounterOption, EncounterOption) == 0x000008, "Member 'FFortGeneratedEncounterOption::EncounterOption' has a wrong offset!");
static_assert(offsetof(FFortGeneratedEncounterOption, RangeLerpValue) == 0x000010, "Member 'FFortGeneratedEncounterOption::RangeLerpValue' has a wrong offset!");
static_assert(offsetof(FFortGeneratedEncounterOption, bChangedSinceLastVLog) == 0x000014, "Member 'FFortGeneratedEncounterOption::bChangedSinceLastVLog' has a wrong offset!");

// ScriptStruct FortniteGame.FortEncounterModeSettings
// 0x0004 (0x0004 - 0x0000)
struct FFortEncounterModeSettings final
{
public:
	EFortEncounterPacingMode                      PacingMode;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortEncounterSpawnLocationPlacementMode      SpawnLocationMode;                                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortEncounterUtilitiesMode                   UtilitiesMode;                                     // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortEncounterSpawnLimitType                  SpawnLimitMode;                                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEncounterModeSettings) == 0x000001, "Wrong alignment on FFortEncounterModeSettings");
static_assert(sizeof(FFortEncounterModeSettings) == 0x000004, "Wrong size on FFortEncounterModeSettings");
static_assert(offsetof(FFortEncounterModeSettings, PacingMode) == 0x000000, "Member 'FFortEncounterModeSettings::PacingMode' has a wrong offset!");
static_assert(offsetof(FFortEncounterModeSettings, SpawnLocationMode) == 0x000001, "Member 'FFortEncounterModeSettings::SpawnLocationMode' has a wrong offset!");
static_assert(offsetof(FFortEncounterModeSettings, UtilitiesMode) == 0x000002, "Member 'FFortEncounterModeSettings::UtilitiesMode' has a wrong offset!");
static_assert(offsetof(FFortEncounterModeSettings, SpawnLimitMode) == 0x000003, "Member 'FFortEncounterModeSettings::SpawnLimitMode' has a wrong offset!");

// ScriptStruct FortniteGame.FortGeneratedEncounterProfile
// 0x0050 (0x0050 - 0x0000)
struct FFortGeneratedEncounterProfile final
{
public:
	float                                         EncounterDifficultyLevel;                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortGeneratedEncounterOption>  EncounterOptions;                                  // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FFortEncounterModeSettings             EncounterModeSettings;                             // 0x0018(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  EncounterTypeTags;                                 // 0x0020(0x0020)(NativeAccessSpecifierPublic)
	int32                                         DifficultyOptionPointsAvailableAtGeneration;       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinDifficultyOptionPointsToUse;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldReselectOptionsPerInstance;                 // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GeneratedEncounterIndex;                           // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGeneratedEncounterProfile) == 0x000008, "Wrong alignment on FFortGeneratedEncounterProfile");
static_assert(sizeof(FFortGeneratedEncounterProfile) == 0x000050, "Wrong size on FFortGeneratedEncounterProfile");
static_assert(offsetof(FFortGeneratedEncounterProfile, EncounterDifficultyLevel) == 0x000000, "Member 'FFortGeneratedEncounterProfile::EncounterDifficultyLevel' has a wrong offset!");
static_assert(offsetof(FFortGeneratedEncounterProfile, EncounterOptions) == 0x000008, "Member 'FFortGeneratedEncounterProfile::EncounterOptions' has a wrong offset!");
static_assert(offsetof(FFortGeneratedEncounterProfile, EncounterModeSettings) == 0x000018, "Member 'FFortGeneratedEncounterProfile::EncounterModeSettings' has a wrong offset!");
static_assert(offsetof(FFortGeneratedEncounterProfile, EncounterTypeTags) == 0x000020, "Member 'FFortGeneratedEncounterProfile::EncounterTypeTags' has a wrong offset!");
static_assert(offsetof(FFortGeneratedEncounterProfile, DifficultyOptionPointsAvailableAtGeneration) == 0x000040, "Member 'FFortGeneratedEncounterProfile::DifficultyOptionPointsAvailableAtGeneration' has a wrong offset!");
static_assert(offsetof(FFortGeneratedEncounterProfile, MinDifficultyOptionPointsToUse) == 0x000044, "Member 'FFortGeneratedEncounterProfile::MinDifficultyOptionPointsToUse' has a wrong offset!");
static_assert(offsetof(FFortGeneratedEncounterProfile, bShouldReselectOptionsPerInstance) == 0x000048, "Member 'FFortGeneratedEncounterProfile::bShouldReselectOptionsPerInstance' has a wrong offset!");
static_assert(offsetof(FFortGeneratedEncounterProfile, GeneratedEncounterIndex) == 0x00004C, "Member 'FFortGeneratedEncounterProfile::GeneratedEncounterIndex' has a wrong offset!");

// ScriptStruct FortniteGame.FortGeneratedDifficultyOptions
// 0x0040 (0x0040 - 0x0000)
struct FFortGeneratedDifficultyOptions final
{
public:
	float                                         GameDifficultyAtGeneration;                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DifficultyOptionPointsAvailableAtGeneration;       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxEncounterSpawnPointsAtGeneration;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinDifficultyOptionPointsToUse;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortGeneratedEncounterSequence> GeneratedEncounterSequences;                       // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortGeneratedMissionOption>    MissionOptions;                                    // 0x0020(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FFortGeneratedEncounterProfile> GeneratedEncounterProfiles;                        // 0x0030(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortGeneratedDifficultyOptions) == 0x000008, "Wrong alignment on FFortGeneratedDifficultyOptions");
static_assert(sizeof(FFortGeneratedDifficultyOptions) == 0x000040, "Wrong size on FFortGeneratedDifficultyOptions");
static_assert(offsetof(FFortGeneratedDifficultyOptions, GameDifficultyAtGeneration) == 0x000000, "Member 'FFortGeneratedDifficultyOptions::GameDifficultyAtGeneration' has a wrong offset!");
static_assert(offsetof(FFortGeneratedDifficultyOptions, DifficultyOptionPointsAvailableAtGeneration) == 0x000004, "Member 'FFortGeneratedDifficultyOptions::DifficultyOptionPointsAvailableAtGeneration' has a wrong offset!");
static_assert(offsetof(FFortGeneratedDifficultyOptions, MaxEncounterSpawnPointsAtGeneration) == 0x000008, "Member 'FFortGeneratedDifficultyOptions::MaxEncounterSpawnPointsAtGeneration' has a wrong offset!");
static_assert(offsetof(FFortGeneratedDifficultyOptions, MinDifficultyOptionPointsToUse) == 0x00000C, "Member 'FFortGeneratedDifficultyOptions::MinDifficultyOptionPointsToUse' has a wrong offset!");
static_assert(offsetof(FFortGeneratedDifficultyOptions, GeneratedEncounterSequences) == 0x000010, "Member 'FFortGeneratedDifficultyOptions::GeneratedEncounterSequences' has a wrong offset!");
static_assert(offsetof(FFortGeneratedDifficultyOptions, MissionOptions) == 0x000020, "Member 'FFortGeneratedDifficultyOptions::MissionOptions' has a wrong offset!");
static_assert(offsetof(FFortGeneratedDifficultyOptions, GeneratedEncounterProfiles) == 0x000030, "Member 'FFortGeneratedDifficultyOptions::GeneratedEncounterProfiles' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionEntry
// 0x0088 (0x0088 - 0x0000)
struct FFortMissionEntry final
{
public:
	float                                         Weight;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorldMinLevel;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorldMaxLevel;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    MinDifficultyInfoRow;                              // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	class UFortMissionGenerator*                  MissionGenerator;                                  // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortMissionInfo*                       MissionInfo;                                       // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMissionGenerationCategory                    GenerationCategory;                                // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortGeneratedDifficultyOptions        GeneratedDifficultyOptions;                        // 0x0038(0x0040)(NativeAccessSpecifierPublic)
	TArray<struct FFortMissionPlacementItemLookupData> BlueprintLookupData;                               // 0x0078(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortMissionEntry) == 0x000008, "Wrong alignment on FFortMissionEntry");
static_assert(sizeof(FFortMissionEntry) == 0x000088, "Wrong size on FFortMissionEntry");
static_assert(offsetof(FFortMissionEntry, Weight) == 0x000000, "Member 'FFortMissionEntry::Weight' has a wrong offset!");
static_assert(offsetof(FFortMissionEntry, WorldMinLevel) == 0x000004, "Member 'FFortMissionEntry::WorldMinLevel' has a wrong offset!");
static_assert(offsetof(FFortMissionEntry, WorldMaxLevel) == 0x000008, "Member 'FFortMissionEntry::WorldMaxLevel' has a wrong offset!");
static_assert(offsetof(FFortMissionEntry, MinDifficultyInfoRow) == 0x000010, "Member 'FFortMissionEntry::MinDifficultyInfoRow' has a wrong offset!");
static_assert(offsetof(FFortMissionEntry, MissionGenerator) == 0x000020, "Member 'FFortMissionEntry::MissionGenerator' has a wrong offset!");
static_assert(offsetof(FFortMissionEntry, MissionInfo) == 0x000028, "Member 'FFortMissionEntry::MissionInfo' has a wrong offset!");
static_assert(offsetof(FFortMissionEntry, GenerationCategory) == 0x000030, "Member 'FFortMissionEntry::GenerationCategory' has a wrong offset!");
static_assert(offsetof(FFortMissionEntry, GeneratedDifficultyOptions) == 0x000038, "Member 'FFortMissionEntry::GeneratedDifficultyOptions' has a wrong offset!");
static_assert(offsetof(FFortMissionEntry, BlueprintLookupData) == 0x000078, "Member 'FFortMissionEntry::BlueprintLookupData' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionRecord
// 0x0138 (0x0138 - 0x0000)
struct FFortMissionRecord final
{
public:
	struct FFortMissionEntry                      MissionEntry;                                      // 0x0000(0x0088)(NativeAccessSpecifierPublic)
	class UFortMissionGenerator*                  MissionGenerator;                                  // 0x0088(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortGeneratedDifficultyOptions        GeneratedMissionOptions;                           // 0x0090(0x0040)(Transient, NativeAccessSpecifierPublic)
	int32                                         DayGenerated;                                      // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UIIndex;                                           // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       QuestOwnerAccount;                                 // 0x00D8(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMissionStatus                            MissionStatus;                                     // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortObjectiveRecord>           ObjectiveRecords;                                  // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 MissionData;                                       // 0x0118(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGuid                                  MissionGuid;                                       // 0x0128(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortMissionRecord) == 0x000008, "Wrong alignment on FFortMissionRecord");
static_assert(sizeof(FFortMissionRecord) == 0x000138, "Wrong size on FFortMissionRecord");
static_assert(offsetof(FFortMissionRecord, MissionEntry) == 0x000000, "Member 'FFortMissionRecord::MissionEntry' has a wrong offset!");
static_assert(offsetof(FFortMissionRecord, MissionGenerator) == 0x000088, "Member 'FFortMissionRecord::MissionGenerator' has a wrong offset!");
static_assert(offsetof(FFortMissionRecord, GeneratedMissionOptions) == 0x000090, "Member 'FFortMissionRecord::GeneratedMissionOptions' has a wrong offset!");
static_assert(offsetof(FFortMissionRecord, DayGenerated) == 0x0000D0, "Member 'FFortMissionRecord::DayGenerated' has a wrong offset!");
static_assert(offsetof(FFortMissionRecord, UIIndex) == 0x0000D4, "Member 'FFortMissionRecord::UIIndex' has a wrong offset!");
static_assert(offsetof(FFortMissionRecord, QuestOwnerAccount) == 0x0000D8, "Member 'FFortMissionRecord::QuestOwnerAccount' has a wrong offset!");
static_assert(offsetof(FFortMissionRecord, MissionStatus) == 0x000100, "Member 'FFortMissionRecord::MissionStatus' has a wrong offset!");
static_assert(offsetof(FFortMissionRecord, ObjectiveRecords) == 0x000108, "Member 'FFortMissionRecord::ObjectiveRecords' has a wrong offset!");
static_assert(offsetof(FFortMissionRecord, MissionData) == 0x000118, "Member 'FFortMissionRecord::MissionData' has a wrong offset!");
static_assert(offsetof(FFortMissionRecord, MissionGuid) == 0x000128, "Member 'FFortMissionRecord::MissionGuid' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionManagerRecord
// 0x0038 (0x0038 - 0x0000)
struct FFortMissionManagerRecord final
{
public:
	TSubclassOf<class AFortMissionManager>        MissionManagerClass;                               // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortMissionRecord>             MissionRecords;                                    // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NumRequiredMissionsOfType[0x4];                    // 0x0018(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 MissionManagerData;                                // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionManagerRecord) == 0x000008, "Wrong alignment on FFortMissionManagerRecord");
static_assert(sizeof(FFortMissionManagerRecord) == 0x000038, "Wrong size on FFortMissionManagerRecord");
static_assert(offsetof(FFortMissionManagerRecord, MissionManagerClass) == 0x000000, "Member 'FFortMissionManagerRecord::MissionManagerClass' has a wrong offset!");
static_assert(offsetof(FFortMissionManagerRecord, MissionRecords) == 0x000008, "Member 'FFortMissionManagerRecord::MissionRecords' has a wrong offset!");
static_assert(offsetof(FFortMissionManagerRecord, NumRequiredMissionsOfType) == 0x000018, "Member 'FFortMissionManagerRecord::NumRequiredMissionsOfType' has a wrong offset!");
static_assert(offsetof(FFortMissionManagerRecord, MissionManagerData) == 0x000028, "Member 'FFortMissionManagerRecord::MissionManagerData' has a wrong offset!");

// ScriptStruct FortniteGame.PartyFailureLogSubmitReason
// 0x0020 (0x0020 - 0x0000)
struct FPartyFailureLogSubmitReason final
{
public:
	class FString                                 Reason;                                            // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubReason;                                         // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyFailureLogSubmitReason) == 0x000008, "Wrong alignment on FPartyFailureLogSubmitReason");
static_assert(sizeof(FPartyFailureLogSubmitReason) == 0x000020, "Wrong size on FPartyFailureLogSubmitReason");
static_assert(offsetof(FPartyFailureLogSubmitReason, Reason) == 0x000000, "Member 'FPartyFailureLogSubmitReason::Reason' has a wrong offset!");
static_assert(offsetof(FPartyFailureLogSubmitReason, SubReason) == 0x000010, "Member 'FPartyFailureLogSubmitReason::SubReason' has a wrong offset!");

// ScriptStruct FortniteGame.FortCameraModeOverride
// 0x0010 (0x0010 - 0x0000)
struct FFortCameraModeOverride final
{
public:
	TSubclassOf<class UFortCameraMode>            OriginalClass;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortCameraMode>            ClassOverride;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCameraModeOverride) == 0x000008, "Wrong alignment on FFortCameraModeOverride");
static_assert(sizeof(FFortCameraModeOverride) == 0x000010, "Wrong size on FFortCameraModeOverride");
static_assert(offsetof(FFortCameraModeOverride, OriginalClass) == 0x000000, "Member 'FFortCameraModeOverride::OriginalClass' has a wrong offset!");
static_assert(offsetof(FFortCameraModeOverride, ClassOverride) == 0x000008, "Member 'FFortCameraModeOverride::ClassOverride' has a wrong offset!");

// ScriptStruct FortniteGame.FortCameraPrototype
// 0x0028 (0x0028 - 0x0000)
struct FFortCameraPrototype final
{
public:
	class FName                                   PrototypeName;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PrototypeDescription;                              // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortCameraModeOverride>        ModeOverrides;                                     // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCameraPrototype) == 0x000008, "Wrong alignment on FFortCameraPrototype");
static_assert(sizeof(FFortCameraPrototype) == 0x000028, "Wrong size on FFortCameraPrototype");
static_assert(offsetof(FFortCameraPrototype, PrototypeName) == 0x000000, "Member 'FFortCameraPrototype::PrototypeName' has a wrong offset!");
static_assert(offsetof(FFortCameraPrototype, PrototypeDescription) == 0x000008, "Member 'FFortCameraPrototype::PrototypeDescription' has a wrong offset!");
static_assert(offsetof(FFortCameraPrototype, ModeOverrides) == 0x000018, "Member 'FFortCameraPrototype::ModeOverrides' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayEffectContainer
// 0x0088 (0x0088 - 0x0000)
struct FFortGameplayEffectContainer final
{
public:
	struct FGameplayTag                           ApplicationTag;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAbilityTargetSelectionList        TargetSelection;                                   // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UGameplayEffect>>    TargetGameplayEffectClasses;                       // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UGameplayEffect>>    OwnerGameplayEffectClasses;                        // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ActivationCues;                                    // 0x0048(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ImpactCues;                                        // 0x0068(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGameplayEffectContainer) == 0x000008, "Wrong alignment on FFortGameplayEffectContainer");
static_assert(sizeof(FFortGameplayEffectContainer) == 0x000088, "Wrong size on FFortGameplayEffectContainer");
static_assert(offsetof(FFortGameplayEffectContainer, ApplicationTag) == 0x000000, "Member 'FFortGameplayEffectContainer::ApplicationTag' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContainer, TargetSelection) == 0x000008, "Member 'FFortGameplayEffectContainer::TargetSelection' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContainer, TargetGameplayEffectClasses) == 0x000028, "Member 'FFortGameplayEffectContainer::TargetGameplayEffectClasses' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContainer, OwnerGameplayEffectClasses) == 0x000038, "Member 'FFortGameplayEffectContainer::OwnerGameplayEffectClasses' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContainer, ActivationCues) == 0x000048, "Member 'FFortGameplayEffectContainer::ActivationCues' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContainer, ImpactCues) == 0x000068, "Member 'FFortGameplayEffectContainer::ImpactCues' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayEffectContainerSpec
// 0x0080 (0x0080 - 0x0000)
struct FFortGameplayEffectContainerSpec final
{
public:
	struct FFortAbilityTargetSelectionList        TargetSelection;                                   // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FGameplayEffectSpecHandle>      TargetGameplayEffectSpecs;                         // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGameplayEffectSpecHandle>      OwnerGameplayEffectSpecs;                          // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ActivationCues;                                    // 0x0040(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ImpactCues;                                        // 0x0060(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGameplayEffectContainerSpec) == 0x000008, "Wrong alignment on FFortGameplayEffectContainerSpec");
static_assert(sizeof(FFortGameplayEffectContainerSpec) == 0x000080, "Wrong size on FFortGameplayEffectContainerSpec");
static_assert(offsetof(FFortGameplayEffectContainerSpec, TargetSelection) == 0x000000, "Member 'FFortGameplayEffectContainerSpec::TargetSelection' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContainerSpec, TargetGameplayEffectSpecs) == 0x000020, "Member 'FFortGameplayEffectContainerSpec::TargetGameplayEffectSpecs' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContainerSpec, OwnerGameplayEffectSpecs) == 0x000030, "Member 'FFortGameplayEffectContainerSpec::OwnerGameplayEffectSpecs' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContainerSpec, ActivationCues) == 0x000040, "Member 'FFortGameplayEffectContainerSpec::ActivationCues' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContainerSpec, ImpactCues) == 0x000060, "Member 'FFortGameplayEffectContainerSpec::ImpactCues' has a wrong offset!");

// ScriptStruct FortniteGame.FortTheaterColorInfo
// 0x0030 (0x0030 - 0x0000)
struct FFortTheaterColorInfo final
{
public:
	bool                                          bUseDifficultyToDetermineColor;                    // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            Color;                                             // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTheaterColorInfo) == 0x000008, "Wrong alignment on FFortTheaterColorInfo");
static_assert(sizeof(FFortTheaterColorInfo) == 0x000030, "Wrong size on FFortTheaterColorInfo");
static_assert(offsetof(FFortTheaterColorInfo, bUseDifficultyToDetermineColor) == 0x000000, "Member 'FFortTheaterColorInfo::bUseDifficultyToDetermineColor' has a wrong offset!");
static_assert(offsetof(FFortTheaterColorInfo, Color) == 0x000008, "Member 'FFortTheaterColorInfo::Color' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionAlertRuntimeData
// 0x0003 (0x0003 - 0x0000)
struct FFortMissionAlertRuntimeData final
{
public:
	EFortMissionAlertCategory                     MissionAlertCategory;                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRespectTileRequirements;                          // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowQuickplay;                                   // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionAlertRuntimeData) == 0x000001, "Wrong alignment on FFortMissionAlertRuntimeData");
static_assert(sizeof(FFortMissionAlertRuntimeData) == 0x000003, "Wrong size on FFortMissionAlertRuntimeData");
static_assert(offsetof(FFortMissionAlertRuntimeData, MissionAlertCategory) == 0x000000, "Member 'FFortMissionAlertRuntimeData::MissionAlertCategory' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertRuntimeData, bRespectTileRequirements) == 0x000001, "Member 'FFortMissionAlertRuntimeData::bRespectTileRequirements' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertRuntimeData, bAllowQuickplay) == 0x000002, "Member 'FFortMissionAlertRuntimeData::bAllowQuickplay' has a wrong offset!");

// ScriptStruct FortniteGame.FortTheaterRuntimeData
// 0x0438 (0x0438 - 0x0000)
struct FFortTheaterRuntimeData final
{
public:
	EFortTheaterType                              TheaterType;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TheaterTags;                                       // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortRequirementsInfo                  TheaterVisibilityRequirements;                     // 0x0028(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortRequirementsInfo                  Requirements;                                      // 0x0070(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	ESubGame                                      RequiredSubGameForVisibility;                      // 0x00B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyMatchLinkedQuestsToTiles;                     // 0x00B9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BA[0x6];                                       // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AWorldMapPin>               WorldMapPinClass;                                  // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             TheaterImage;                                      // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortMultiSizeBrush                    TheaterImages;                                     // 0x00D0(0x02D0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortTheaterColorInfo                  TheaterColorInfo;                                  // 0x03A0(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   Socket;                                            // 0x03D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortRequirementsInfo                  MissionAlertRequirements;                          // 0x03D8(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FFortMissionAlertRuntimeData>   MissionAlertCategoryRequirements;                  // 0x0420(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         HighestDifficulty;                                 // 0x0430(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_434[0x4];                                      // 0x0434(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortTheaterRuntimeData) == 0x000008, "Wrong alignment on FFortTheaterRuntimeData");
static_assert(sizeof(FFortTheaterRuntimeData) == 0x000438, "Wrong size on FFortTheaterRuntimeData");
static_assert(offsetof(FFortTheaterRuntimeData, TheaterType) == 0x000000, "Member 'FFortTheaterRuntimeData::TheaterType' has a wrong offset!");
static_assert(offsetof(FFortTheaterRuntimeData, TheaterTags) == 0x000008, "Member 'FFortTheaterRuntimeData::TheaterTags' has a wrong offset!");
static_assert(offsetof(FFortTheaterRuntimeData, TheaterVisibilityRequirements) == 0x000028, "Member 'FFortTheaterRuntimeData::TheaterVisibilityRequirements' has a wrong offset!");
static_assert(offsetof(FFortTheaterRuntimeData, Requirements) == 0x000070, "Member 'FFortTheaterRuntimeData::Requirements' has a wrong offset!");
static_assert(offsetof(FFortTheaterRuntimeData, RequiredSubGameForVisibility) == 0x0000B8, "Member 'FFortTheaterRuntimeData::RequiredSubGameForVisibility' has a wrong offset!");
static_assert(offsetof(FFortTheaterRuntimeData, bOnlyMatchLinkedQuestsToTiles) == 0x0000B9, "Member 'FFortTheaterRuntimeData::bOnlyMatchLinkedQuestsToTiles' has a wrong offset!");
static_assert(offsetof(FFortTheaterRuntimeData, WorldMapPinClass) == 0x0000C0, "Member 'FFortTheaterRuntimeData::WorldMapPinClass' has a wrong offset!");
static_assert(offsetof(FFortTheaterRuntimeData, TheaterImage) == 0x0000C8, "Member 'FFortTheaterRuntimeData::TheaterImage' has a wrong offset!");
static_assert(offsetof(FFortTheaterRuntimeData, TheaterImages) == 0x0000D0, "Member 'FFortTheaterRuntimeData::TheaterImages' has a wrong offset!");
static_assert(offsetof(FFortTheaterRuntimeData, TheaterColorInfo) == 0x0003A0, "Member 'FFortTheaterRuntimeData::TheaterColorInfo' has a wrong offset!");
static_assert(offsetof(FFortTheaterRuntimeData, Socket) == 0x0003D0, "Member 'FFortTheaterRuntimeData::Socket' has a wrong offset!");
static_assert(offsetof(FFortTheaterRuntimeData, MissionAlertRequirements) == 0x0003D8, "Member 'FFortTheaterRuntimeData::MissionAlertRequirements' has a wrong offset!");
static_assert(offsetof(FFortTheaterRuntimeData, MissionAlertCategoryRequirements) == 0x000420, "Member 'FFortTheaterRuntimeData::MissionAlertCategoryRequirements' has a wrong offset!");
static_assert(offsetof(FFortTheaterRuntimeData, HighestDifficulty) == 0x000430, "Member 'FFortTheaterRuntimeData::HighestDifficulty' has a wrong offset!");

// ScriptStruct FortniteGame.FortTheaterMapData
// 0x04D0 (0x04D0 - 0x0000)
struct FFortTheaterMapData final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FString                                 UniqueId;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TheaterSlot;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTestTheater;                                    // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RequiredEventFlag;                                 // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MissionRewardNamedWeightsRowName;                  // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   ThreatDisplayName;                                 // 0x0060(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortTheaterRuntimeData                RuntimeInfo;                                       // 0x0078(0x0438)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFortTheaterMapTileData>        Tiles;                                             // 0x04B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FFortTheaterMapRegionData>      Regions;                                           // 0x04C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTheaterMapData) == 0x000008, "Wrong alignment on FFortTheaterMapData");
static_assert(sizeof(FFortTheaterMapData) == 0x0004D0, "Wrong size on FFortTheaterMapData");
static_assert(offsetof(FFortTheaterMapData, DisplayName) == 0x000000, "Member 'FFortTheaterMapData::DisplayName' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapData, UniqueId) == 0x000018, "Member 'FFortTheaterMapData::UniqueId' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapData, TheaterSlot) == 0x000028, "Member 'FFortTheaterMapData::TheaterSlot' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapData, bIsTestTheater) == 0x00002C, "Member 'FFortTheaterMapData::bIsTestTheater' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapData, RequiredEventFlag) == 0x000030, "Member 'FFortTheaterMapData::RequiredEventFlag' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapData, MissionRewardNamedWeightsRowName) == 0x000040, "Member 'FFortTheaterMapData::MissionRewardNamedWeightsRowName' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapData, Description) == 0x000048, "Member 'FFortTheaterMapData::Description' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapData, ThreatDisplayName) == 0x000060, "Member 'FFortTheaterMapData::ThreatDisplayName' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapData, RuntimeInfo) == 0x000078, "Member 'FFortTheaterMapData::RuntimeInfo' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapData, Tiles) == 0x0004B0, "Member 'FFortTheaterMapData::Tiles' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapData, Regions) == 0x0004C0, "Member 'FFortTheaterMapData::Regions' has a wrong offset!");

// ScriptStruct FortniteGame.TeamFOBRequiredTags
// 0x0028 (0x0028 - 0x0000)
struct FTeamFOBRequiredTags final
{
public:
	struct FGameplayTagContainer                  RequiredFOBSpawnTags;                              // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EFortTeam                                     Team;                                              // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTeamFOBRequiredTags) == 0x000008, "Wrong alignment on FTeamFOBRequiredTags");
static_assert(sizeof(FTeamFOBRequiredTags) == 0x000028, "Wrong size on FTeamFOBRequiredTags");
static_assert(offsetof(FTeamFOBRequiredTags, RequiredFOBSpawnTags) == 0x000000, "Member 'FTeamFOBRequiredTags::RequiredFOBSpawnTags' has a wrong offset!");
static_assert(offsetof(FTeamFOBRequiredTags, Team) == 0x000020, "Member 'FTeamFOBRequiredTags::Team' has a wrong offset!");

// ScriptStruct FortniteGame.ManagerSynergyData
// 0x0018 (0x0018 - 0x0000)
struct FManagerSynergyData final
{
public:
	struct FGameplayTag                           SynergyTypeTag;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FWorkerGenderData>              GenderData;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FManagerSynergyData) == 0x000008, "Wrong alignment on FManagerSynergyData");
static_assert(sizeof(FManagerSynergyData) == 0x000018, "Wrong size on FManagerSynergyData");
static_assert(offsetof(FManagerSynergyData, SynergyTypeTag) == 0x000000, "Member 'FManagerSynergyData::SynergyTypeTag' has a wrong offset!");
static_assert(offsetof(FManagerSynergyData, GenderData) == 0x000008, "Member 'FManagerSynergyData::GenderData' has a wrong offset!");

// ScriptStruct FortniteGame.FortDisconnectedPlayerReservation
// 0x0038 (0x0038 - 0x0000)
struct FFortDisconnectedPlayerReservation final
{
public:
	class FName                                   SessionName;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       PlayerID;                                          // 0x0008(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortDisconnectedPlayerReservation) == 0x000008, "Wrong alignment on FFortDisconnectedPlayerReservation");
static_assert(sizeof(FFortDisconnectedPlayerReservation) == 0x000038, "Wrong size on FFortDisconnectedPlayerReservation");
static_assert(offsetof(FFortDisconnectedPlayerReservation, SessionName) == 0x000000, "Member 'FFortDisconnectedPlayerReservation::SessionName' has a wrong offset!");
static_assert(offsetof(FFortDisconnectedPlayerReservation, PlayerID) == 0x000008, "Member 'FFortDisconnectedPlayerReservation::PlayerID' has a wrong offset!");

// ScriptStruct FortniteGame.FortScriptedActionParams
// 0x0030 (0x0030 - 0x0000)
struct FFortScriptedActionParams final
{
public:
	class AFortPlayerController*                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortScriptedActionSource                     SourceType;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItem*                              SourceItem;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    SourceData;                                        // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   SourceName;                                        // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortScriptedActionParams) == 0x000008, "Wrong alignment on FFortScriptedActionParams");
static_assert(sizeof(FFortScriptedActionParams) == 0x000030, "Wrong size on FFortScriptedActionParams");
static_assert(offsetof(FFortScriptedActionParams, Player) == 0x000000, "Member 'FFortScriptedActionParams::Player' has a wrong offset!");
static_assert(offsetof(FFortScriptedActionParams, SourceType) == 0x000008, "Member 'FFortScriptedActionParams::SourceType' has a wrong offset!");
static_assert(offsetof(FFortScriptedActionParams, SourceItem) == 0x000010, "Member 'FFortScriptedActionParams::SourceItem' has a wrong offset!");
static_assert(offsetof(FFortScriptedActionParams, SourceData) == 0x000018, "Member 'FFortScriptedActionParams::SourceData' has a wrong offset!");
static_assert(offsetof(FFortScriptedActionParams, SourceName) == 0x000028, "Member 'FFortScriptedActionParams::SourceName' has a wrong offset!");

// ScriptStruct FortniteGame.FortAvailableScriptedAction
// 0x0038 (0x0038 - 0x0000)
struct FFortAvailableScriptedAction final
{
public:
	struct FFortScriptedActionParams              Params;                                            // 0x0000(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	class AFortScriptedAction*                    ActionDefaults;                                    // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAvailableScriptedAction) == 0x000008, "Wrong alignment on FFortAvailableScriptedAction");
static_assert(sizeof(FFortAvailableScriptedAction) == 0x000038, "Wrong size on FFortAvailableScriptedAction");
static_assert(offsetof(FFortAvailableScriptedAction, Params) == 0x000000, "Member 'FFortAvailableScriptedAction::Params' has a wrong offset!");
static_assert(offsetof(FFortAvailableScriptedAction, ActionDefaults) == 0x000030, "Member 'FFortAvailableScriptedAction::ActionDefaults' has a wrong offset!");

// ScriptStruct FortniteGame.FortBanHammerStrike
// 0x0060 (0x0060 - 0x0000)
struct FFortBanHammerStrike final
{
public:
	struct FUniqueNetIdRepl                       AccountId;                                         // 0x0000(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Reason;                                            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBanHammerNotificationAction              Action;                                            // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Source;                                            // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Offense;                                           // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortBanHammerStrike) == 0x000008, "Wrong alignment on FFortBanHammerStrike");
static_assert(sizeof(FFortBanHammerStrike) == 0x000060, "Wrong size on FFortBanHammerStrike");
static_assert(offsetof(FFortBanHammerStrike, AccountId) == 0x000000, "Member 'FFortBanHammerStrike::AccountId' has a wrong offset!");
static_assert(offsetof(FFortBanHammerStrike, Reason) == 0x000028, "Member 'FFortBanHammerStrike::Reason' has a wrong offset!");
static_assert(offsetof(FFortBanHammerStrike, Action) == 0x000038, "Member 'FFortBanHammerStrike::Action' has a wrong offset!");
static_assert(offsetof(FFortBanHammerStrike, Source) == 0x000040, "Member 'FFortBanHammerStrike::Source' has a wrong offset!");
static_assert(offsetof(FFortBanHammerStrike, Offense) == 0x000050, "Member 'FFortBanHammerStrike::Offense' has a wrong offset!");

// ScriptStruct FortniteGame.AppliedHomebaseData
// 0x0030 (0x0030 - 0x0000)
struct FAppliedHomebaseData final
{
public:
	class UAbilitySystemComponent*                Source;                                            // 0x0000(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilitySystemComponent*                Target;                                            // 0x0008(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FActiveGameplayEffectHandle>    AppliedEffects;                                    // 0x0010(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FFortAbilitySetHandle>          AppliedAbilitySets;                                // 0x0020(0x0010)(ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAppliedHomebaseData) == 0x000008, "Wrong alignment on FAppliedHomebaseData");
static_assert(sizeof(FAppliedHomebaseData) == 0x000030, "Wrong size on FAppliedHomebaseData");
static_assert(offsetof(FAppliedHomebaseData, Source) == 0x000000, "Member 'FAppliedHomebaseData::Source' has a wrong offset!");
static_assert(offsetof(FAppliedHomebaseData, Target) == 0x000008, "Member 'FAppliedHomebaseData::Target' has a wrong offset!");
static_assert(offsetof(FAppliedHomebaseData, AppliedEffects) == 0x000010, "Member 'FAppliedHomebaseData::AppliedEffects' has a wrong offset!");
static_assert(offsetof(FAppliedHomebaseData, AppliedAbilitySets) == 0x000020, "Member 'FAppliedHomebaseData::AppliedAbilitySets' has a wrong offset!");

// ScriptStruct FortniteGame.FortWindResponder
// 0x0098 (0x0098 - 0x0000)
struct FFortWindResponder final
{
public:
	class ABuildingSMActor*                       WindUpdatingBuildingSMActor;                       // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveLinearColor*                      WindSpeedCurve;                                    // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveLinearColor*                      WindPannerSpeedCurve;                              // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             WindAudio;                                         // 0x0018(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             MildWindMaterialInstances;                         // 0x0020(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             IntenseWindMaterialInstances;                      // 0x0030(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FFortWindMaterialData>          MaterialsData;                                     // 0x0040(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	int32                                         MaterialParameterPairIndices;                      // 0x0050(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortWindResponderMaterialVariablePairData> PairedVariablesData;                               // 0x0058(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x1C];                                      // 0x0068(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WindSpeed;                                         // 0x0084(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0xC];                                       // 0x0088(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bHasSetupAnimatingMaterials;                       // 0x0094(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortWindResponder) == 0x000008, "Wrong alignment on FFortWindResponder");
static_assert(sizeof(FFortWindResponder) == 0x000098, "Wrong size on FFortWindResponder");
static_assert(offsetof(FFortWindResponder, WindUpdatingBuildingSMActor) == 0x000000, "Member 'FFortWindResponder::WindUpdatingBuildingSMActor' has a wrong offset!");
static_assert(offsetof(FFortWindResponder, WindSpeedCurve) == 0x000008, "Member 'FFortWindResponder::WindSpeedCurve' has a wrong offset!");
static_assert(offsetof(FFortWindResponder, WindPannerSpeedCurve) == 0x000010, "Member 'FFortWindResponder::WindPannerSpeedCurve' has a wrong offset!");
static_assert(offsetof(FFortWindResponder, WindAudio) == 0x000018, "Member 'FFortWindResponder::WindAudio' has a wrong offset!");
static_assert(offsetof(FFortWindResponder, MildWindMaterialInstances) == 0x000020, "Member 'FFortWindResponder::MildWindMaterialInstances' has a wrong offset!");
static_assert(offsetof(FFortWindResponder, IntenseWindMaterialInstances) == 0x000030, "Member 'FFortWindResponder::IntenseWindMaterialInstances' has a wrong offset!");
static_assert(offsetof(FFortWindResponder, MaterialsData) == 0x000040, "Member 'FFortWindResponder::MaterialsData' has a wrong offset!");
static_assert(offsetof(FFortWindResponder, MaterialParameterPairIndices) == 0x000050, "Member 'FFortWindResponder::MaterialParameterPairIndices' has a wrong offset!");
static_assert(offsetof(FFortWindResponder, PairedVariablesData) == 0x000058, "Member 'FFortWindResponder::PairedVariablesData' has a wrong offset!");
static_assert(offsetof(FFortWindResponder, WindSpeed) == 0x000084, "Member 'FFortWindResponder::WindSpeed' has a wrong offset!");
static_assert(offsetof(FFortWindResponder, bHasSetupAnimatingMaterials) == 0x000094, "Member 'FFortWindResponder::bHasSetupAnimatingMaterials' has a wrong offset!");

// ScriptStruct FortniteGame.HordeDifficultyTierInfo
// 0x0010 (0x0010 - 0x0000)
struct FHordeDifficultyTierInfo final
{
public:
	class FName                                   DifficultyTierName;                                // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortQuestItemDefinition*               QuestPrerequisite;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHordeDifficultyTierInfo) == 0x000008, "Wrong alignment on FHordeDifficultyTierInfo");
static_assert(sizeof(FHordeDifficultyTierInfo) == 0x000010, "Wrong size on FHordeDifficultyTierInfo");
static_assert(offsetof(FHordeDifficultyTierInfo, DifficultyTierName) == 0x000000, "Member 'FHordeDifficultyTierInfo::DifficultyTierName' has a wrong offset!");
static_assert(offsetof(FHordeDifficultyTierInfo, QuestPrerequisite) == 0x000008, "Member 'FHordeDifficultyTierInfo::QuestPrerequisite' has a wrong offset!");

// ScriptStruct FortniteGame.Voter
// 0x0030 (0x0030 - 0x0000)
struct FVoter final
{
public:
	int32                                         VoteDecision;                                      // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueNetIdRepl                       NetId;                                             // 0x0008(0x0028)(Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVoter) == 0x000008, "Wrong alignment on FVoter");
static_assert(sizeof(FVoter) == 0x000030, "Wrong size on FVoter");
static_assert(offsetof(FVoter, VoteDecision) == 0x000000, "Member 'FVoter::VoteDecision' has a wrong offset!");
static_assert(offsetof(FVoter, NetId) == 0x000008, "Member 'FVoter::NetId' has a wrong offset!");

// ScriptStruct FortniteGame.ActiveGameplayModifier
// 0x00CC (0x00D8 - 0x000C)
struct FActiveGameplayModifier final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortGameplayModifierItemDefinition*    ModifierDef;                                       // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActiveGameplayModifierHandle          ModifierHandle;                                    // 0x0018(0x0004)(Transient, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AFortGameplayMutator*>           Mutators;                                          // 0x0020(0x0010)(ZeroConstructor, Transient, RepSkip, NativeAccessSpecifierPublic)
	int32                                         Expiration;                                        // 0x0030(0x0004)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0xA4];                                      // 0x0034(0x00A4)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActiveGameplayModifier) == 0x000008, "Wrong alignment on FActiveGameplayModifier");
static_assert(sizeof(FActiveGameplayModifier) == 0x0000D8, "Wrong size on FActiveGameplayModifier");
static_assert(offsetof(FActiveGameplayModifier, ModifierDef) == 0x000010, "Member 'FActiveGameplayModifier::ModifierDef' has a wrong offset!");
static_assert(offsetof(FActiveGameplayModifier, ModifierHandle) == 0x000018, "Member 'FActiveGameplayModifier::ModifierHandle' has a wrong offset!");
static_assert(offsetof(FActiveGameplayModifier, Mutators) == 0x000020, "Member 'FActiveGameplayModifier::Mutators' has a wrong offset!");
static_assert(offsetof(FActiveGameplayModifier, Expiration) == 0x000030, "Member 'FActiveGameplayModifier::Expiration' has a wrong offset!");

// ScriptStruct FortniteGame.ActiveGameplayModifierArray
// 0x0018 (0x00C8 - 0x00B0)
struct FActiveGameplayModifierArray final : public FFastArraySerializer
{
public:
	TArray<struct FActiveGameplayModifier>        Items;                                             // 0x00B0(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	int32                                         ModifierHandleGenerator;                           // 0x00C0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSupportRuntimeModifierShutdown;                   // 0x00C4(0x0001)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActiveGameplayModifierArray) == 0x000008, "Wrong alignment on FActiveGameplayModifierArray");
static_assert(sizeof(FActiveGameplayModifierArray) == 0x0000C8, "Wrong size on FActiveGameplayModifierArray");
static_assert(offsetof(FActiveGameplayModifierArray, Items) == 0x0000B0, "Member 'FActiveGameplayModifierArray::Items' has a wrong offset!");
static_assert(offsetof(FActiveGameplayModifierArray, ModifierHandleGenerator) == 0x0000C0, "Member 'FActiveGameplayModifierArray::ModifierHandleGenerator' has a wrong offset!");
static_assert(offsetof(FActiveGameplayModifierArray, bSupportRuntimeModifierShutdown) == 0x0000C4, "Member 'FActiveGameplayModifierArray::bSupportRuntimeModifierShutdown' has a wrong offset!");

// ScriptStruct FortniteGame.PlayerBuildableClassFilter
// 0x0010 (0x0010 - 0x0000)
struct FPlayerBuildableClassFilter final
{
public:
	EFortResourceType                             ResourceType;                                      // 0x0000(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuildingType                             BuildingType;                                      // 0x0001(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBuildingEditModeMetadata*              EditModeMetadata;                                  // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerBuildableClassFilter) == 0x000008, "Wrong alignment on FPlayerBuildableClassFilter");
static_assert(sizeof(FPlayerBuildableClassFilter) == 0x000010, "Wrong size on FPlayerBuildableClassFilter");
static_assert(offsetof(FPlayerBuildableClassFilter, ResourceType) == 0x000000, "Member 'FPlayerBuildableClassFilter::ResourceType' has a wrong offset!");
static_assert(offsetof(FPlayerBuildableClassFilter, BuildingType) == 0x000001, "Member 'FPlayerBuildableClassFilter::BuildingType' has a wrong offset!");
static_assert(offsetof(FPlayerBuildableClassFilter, Level) == 0x000004, "Member 'FPlayerBuildableClassFilter::Level' has a wrong offset!");
static_assert(offsetof(FPlayerBuildableClassFilter, EditModeMetadata) == 0x000008, "Member 'FPlayerBuildableClassFilter::EditModeMetadata' has a wrong offset!");

// ScriptStruct FortniteGame.PlayerBuildableClassContainer
// 0x0010 (0x0010 - 0x0000)
struct FPlayerBuildableClassContainer final
{
public:
	TArray<TSubclassOf<class ABuildingSMActor>>   BuildingClasses;                                   // 0x0000(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerBuildableClassContainer) == 0x000008, "Wrong alignment on FPlayerBuildableClassContainer");
static_assert(sizeof(FPlayerBuildableClassContainer) == 0x000010, "Wrong size on FPlayerBuildableClassContainer");
static_assert(offsetof(FPlayerBuildableClassContainer, BuildingClasses) == 0x000000, "Member 'FPlayerBuildableClassContainer::BuildingClasses' has a wrong offset!");

// ScriptStruct FortniteGame.FortCollectionBookSlotItemNotification
// 0x0010 (0x0010 - 0x0000)
struct FFortCollectionBookSlotItemNotification final
{
public:
	class FString                                 SlottedItemId;                                     // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCollectionBookSlotItemNotification) == 0x000008, "Wrong alignment on FFortCollectionBookSlotItemNotification");
static_assert(sizeof(FFortCollectionBookSlotItemNotification) == 0x000010, "Wrong size on FFortCollectionBookSlotItemNotification");
static_assert(offsetof(FFortCollectionBookSlotItemNotification, SlottedItemId) == 0x000000, "Member 'FFortCollectionBookSlotItemNotification::SlottedItemId' has a wrong offset!");

// ScriptStruct FortniteGame.SubGameAccess
// 0x0003 (0x0003 - 0x0000)
struct FSubGameAccess final
{
public:
	ESubGame                                      SubGame;                                           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESubGameAccessStatus                          AccessStatus;                                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESubGameMatchmakingStatus                     MatchmakingStatus;                                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubGameAccess) == 0x000001, "Wrong alignment on FSubGameAccess");
static_assert(sizeof(FSubGameAccess) == 0x000003, "Wrong size on FSubGameAccess");
static_assert(offsetof(FSubGameAccess, SubGame) == 0x000000, "Member 'FSubGameAccess::SubGame' has a wrong offset!");
static_assert(offsetof(FSubGameAccess, AccessStatus) == 0x000001, "Member 'FSubGameAccess::AccessStatus' has a wrong offset!");
static_assert(offsetof(FSubGameAccess, MatchmakingStatus) == 0x000002, "Member 'FSubGameAccess::MatchmakingStatus' has a wrong offset!");

// ScriptStruct FortniteGame.LoginFailureLogSubmitOptions
// 0x0018 (0x0018 - 0x0000)
struct FLoginFailureLogSubmitOptions final
{
public:
	bool                                          bSubmitLogs;                                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LogTailKb;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ELoginResult>                          DoNotUploadReasons;                                // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLoginFailureLogSubmitOptions) == 0x000008, "Wrong alignment on FLoginFailureLogSubmitOptions");
static_assert(sizeof(FLoginFailureLogSubmitOptions) == 0x000018, "Wrong size on FLoginFailureLogSubmitOptions");
static_assert(offsetof(FLoginFailureLogSubmitOptions, bSubmitLogs) == 0x000000, "Member 'FLoginFailureLogSubmitOptions::bSubmitLogs' has a wrong offset!");
static_assert(offsetof(FLoginFailureLogSubmitOptions, LogTailKb) == 0x000004, "Member 'FLoginFailureLogSubmitOptions::LogTailKb' has a wrong offset!");
static_assert(offsetof(FLoginFailureLogSubmitOptions, DoNotUploadReasons) == 0x000008, "Member 'FLoginFailureLogSubmitOptions::DoNotUploadReasons' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionPlacementFoundationItem
// 0x0078 (0x0078 - 0x0000)
struct FFortMissionPlacementFoundationItem final
{
public:
	struct FGameplayTagContainer                  ItemIdentifyingTags;                               // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TagsToAddToChosenPlacementActorOrFoundationActor;  // 0x0020(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UEnvQuery*                              PlacementQuery;                                    // 0x0040(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   BuildingFoundationToPlace;                         // 0x0048(0x0028)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NumLocationsToFind;                                // 0x0070(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAdjustFoundationPlacementForFloors;               // 0x0074(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMissionPlacementFoundationItem) == 0x000008, "Wrong alignment on FFortMissionPlacementFoundationItem");
static_assert(sizeof(FFortMissionPlacementFoundationItem) == 0x000078, "Wrong size on FFortMissionPlacementFoundationItem");
static_assert(offsetof(FFortMissionPlacementFoundationItem, ItemIdentifyingTags) == 0x000000, "Member 'FFortMissionPlacementFoundationItem::ItemIdentifyingTags' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementFoundationItem, TagsToAddToChosenPlacementActorOrFoundationActor) == 0x000020, "Member 'FFortMissionPlacementFoundationItem::TagsToAddToChosenPlacementActorOrFoundationActor' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementFoundationItem, PlacementQuery) == 0x000040, "Member 'FFortMissionPlacementFoundationItem::PlacementQuery' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementFoundationItem, BuildingFoundationToPlace) == 0x000048, "Member 'FFortMissionPlacementFoundationItem::BuildingFoundationToPlace' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementFoundationItem, NumLocationsToFind) == 0x000070, "Member 'FFortMissionPlacementFoundationItem::NumLocationsToFind' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementFoundationItem, bAdjustFoundationPlacementForFloors) == 0x000074, "Member 'FFortMissionPlacementFoundationItem::bAdjustFoundationPlacementForFloors' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionPlacementItems
// 0x0040 (0x0040 - 0x0000)
struct FFortMissionPlacementItems final
{
public:
	struct FGameplayTagContainer                  TagsToAddToChosenPlacementActors;                  // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFortMissionPlacementFoundationItem> AdditionalWorldFoundations;                        // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFortMissionPlacementActorItem> ActorsAndLocations;                                // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionPlacementItems) == 0x000008, "Wrong alignment on FFortMissionPlacementItems");
static_assert(sizeof(FFortMissionPlacementItems) == 0x000040, "Wrong size on FFortMissionPlacementItems");
static_assert(offsetof(FFortMissionPlacementItems, TagsToAddToChosenPlacementActors) == 0x000000, "Member 'FFortMissionPlacementItems::TagsToAddToChosenPlacementActors' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementItems, AdditionalWorldFoundations) == 0x000020, "Member 'FFortMissionPlacementItems::AdditionalWorldFoundations' has a wrong offset!");
static_assert(offsetof(FFortMissionPlacementItems, ActorsAndLocations) == 0x000030, "Member 'FFortMissionPlacementItems::ActorsAndLocations' has a wrong offset!");

// ScriptStruct FortniteGame.PartyFailureLogSubmit
// 0x0018 (0x0018 - 0x0000)
struct FPartyFailureLogSubmit final
{
public:
	bool                                          bSubmitLogs;                                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LogTailKb;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPartyFailureLogSubmitReason>   Reasons;                                           // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyFailureLogSubmit) == 0x000008, "Wrong alignment on FPartyFailureLogSubmit");
static_assert(sizeof(FPartyFailureLogSubmit) == 0x000018, "Wrong size on FPartyFailureLogSubmit");
static_assert(offsetof(FPartyFailureLogSubmit, bSubmitLogs) == 0x000000, "Member 'FPartyFailureLogSubmit::bSubmitLogs' has a wrong offset!");
static_assert(offsetof(FPartyFailureLogSubmit, LogTailKb) == 0x000004, "Member 'FPartyFailureLogSubmit::LogTailKb' has a wrong offset!");
static_assert(offsetof(FPartyFailureLogSubmit, Reasons) == 0x000008, "Member 'FPartyFailureLogSubmit::Reasons' has a wrong offset!");

// ScriptStruct FortniteGame.FortHealthBarComponentData
// 0x0018 (0x0018 - 0x0000)
struct FFortHealthBarComponentData final
{
public:
	class FText                                   DisplayText;                                       // 0x0000(0x0018)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortHealthBarComponentData) == 0x000008, "Wrong alignment on FFortHealthBarComponentData");
static_assert(sizeof(FFortHealthBarComponentData) == 0x000018, "Wrong size on FFortHealthBarComponentData");
static_assert(offsetof(FFortHealthBarComponentData, DisplayText) == 0x000000, "Member 'FFortHealthBarComponentData::DisplayText' has a wrong offset!");

// ScriptStruct FortniteGame.HeroSpecializationAttributeRequirement
// 0x0028 (0x0028 - 0x0000)
struct FHeroSpecializationAttributeRequirement final
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumValue;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHeroSpecializationAttributeRequirement) == 0x000008, "Wrong alignment on FHeroSpecializationAttributeRequirement");
static_assert(sizeof(FHeroSpecializationAttributeRequirement) == 0x000028, "Wrong size on FHeroSpecializationAttributeRequirement");
static_assert(offsetof(FHeroSpecializationAttributeRequirement, Attribute) == 0x000000, "Member 'FHeroSpecializationAttributeRequirement::Attribute' has a wrong offset!");
static_assert(offsetof(FHeroSpecializationAttributeRequirement, MinimumValue) == 0x000020, "Member 'FHeroSpecializationAttributeRequirement::MinimumValue' has a wrong offset!");

// ScriptStruct FortniteGame.FortSpecializationSlot
// 0x0088 (0x0088 - 0x0000)
struct FFortSpecializationSlot final
{
public:
	TSoftObjectPtr<class UFortAbilityKit>         GrantedAbilityKit;                                 // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortAbilityKit>         RemovedAbilityKit;                                 // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHeroSpecializationAttributeRequirement> AttributeRequirements;                             // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiredTags;                                      // 0x0060(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         MinimumHeroLevel;                                  // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortSpecializationSlot) == 0x000008, "Wrong alignment on FFortSpecializationSlot");
static_assert(sizeof(FFortSpecializationSlot) == 0x000088, "Wrong size on FFortSpecializationSlot");
static_assert(offsetof(FFortSpecializationSlot, GrantedAbilityKit) == 0x000000, "Member 'FFortSpecializationSlot::GrantedAbilityKit' has a wrong offset!");
static_assert(offsetof(FFortSpecializationSlot, RemovedAbilityKit) == 0x000028, "Member 'FFortSpecializationSlot::RemovedAbilityKit' has a wrong offset!");
static_assert(offsetof(FFortSpecializationSlot, AttributeRequirements) == 0x000050, "Member 'FFortSpecializationSlot::AttributeRequirements' has a wrong offset!");
static_assert(offsetof(FFortSpecializationSlot, RequiredTags) == 0x000060, "Member 'FFortSpecializationSlot::RequiredTags' has a wrong offset!");
static_assert(offsetof(FFortSpecializationSlot, MinimumHeroLevel) == 0x000080, "Member 'FFortSpecializationSlot::MinimumHeroLevel' has a wrong offset!");

// ScriptStruct FortniteGame.HeroItem
// 0x0078 (0x0078 - 0x0000)
struct FHeroItem final
{
public:
	TSoftObjectPtr<class UFortWorldItemDefinition> Item;                                              // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortReplenishmentType                        Replenishment;                                     // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  RequiredGPTags;                                    // 0x0030(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  SwapTag;                                           // 0x0050(0x0020)(Edit, NativeAccessSpecifierPublic)
	bool                                          bShowInAbilityScreen;                              // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHeroItem) == 0x000008, "Wrong alignment on FHeroItem");
static_assert(sizeof(FHeroItem) == 0x000078, "Wrong size on FHeroItem");
static_assert(offsetof(FHeroItem, Item) == 0x000000, "Member 'FHeroItem::Item' has a wrong offset!");
static_assert(offsetof(FHeroItem, Quantity) == 0x000028, "Member 'FHeroItem::Quantity' has a wrong offset!");
static_assert(offsetof(FHeroItem, Replenishment) == 0x00002C, "Member 'FHeroItem::Replenishment' has a wrong offset!");
static_assert(offsetof(FHeroItem, RequiredGPTags) == 0x000030, "Member 'FHeroItem::RequiredGPTags' has a wrong offset!");
static_assert(offsetof(FHeroItem, SwapTag) == 0x000050, "Member 'FHeroItem::SwapTag' has a wrong offset!");
static_assert(offsetof(FHeroItem, bShowInAbilityScreen) == 0x000070, "Member 'FHeroItem::bShowInAbilityScreen' has a wrong offset!");

// ScriptStruct FortniteGame.HeroAbilityKit
// 0x0050 (0x0050 - 0x0000)
struct FHeroAbilityKit final
{
public:
	TSoftObjectPtr<class UFortAbilityKit>         InherentAbilityKit;                                // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiredGPTags;                                    // 0x0028(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bShowInAbilityScreen;                              // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHeroAbilityKit) == 0x000008, "Wrong alignment on FHeroAbilityKit");
static_assert(sizeof(FHeroAbilityKit) == 0x000050, "Wrong size on FHeroAbilityKit");
static_assert(offsetof(FHeroAbilityKit, InherentAbilityKit) == 0x000000, "Member 'FHeroAbilityKit::InherentAbilityKit' has a wrong offset!");
static_assert(offsetof(FHeroAbilityKit, RequiredGPTags) == 0x000028, "Member 'FHeroAbilityKit::RequiredGPTags' has a wrong offset!");
static_assert(offsetof(FHeroAbilityKit, bShowInAbilityScreen) == 0x000048, "Member 'FHeroAbilityKit::bShowInAbilityScreen' has a wrong offset!");

// ScriptStruct FortniteGame.FortHexMapCoord
// 0x000C (0x000C - 0x0000)
struct FFortHexMapCoord final
{
public:
	int32                                         Horizontal;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Vertical;                                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Depth;                                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortHexMapCoord) == 0x000004, "Wrong alignment on FFortHexMapCoord");
static_assert(sizeof(FFortHexMapCoord) == 0x00000C, "Wrong size on FFortHexMapCoord");
static_assert(offsetof(FFortHexMapCoord, Horizontal) == 0x000000, "Member 'FFortHexMapCoord::Horizontal' has a wrong offset!");
static_assert(offsetof(FFortHexMapCoord, Vertical) == 0x000004, "Member 'FFortHexMapCoord::Vertical' has a wrong offset!");
static_assert(offsetof(FFortHexMapCoord, Depth) == 0x000008, "Member 'FFortHexMapCoord::Depth' has a wrong offset!");

// ScriptStruct FortniteGame.HomebaseNodeState
// 0x0008 (0x0008 - 0x0000)
struct FHomebaseNodeState final
{
public:
	bool                                          bIsOwned;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bArePrereqsMet;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bArePrereqQuestsCompleted;                         // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAreCostsPayable;                                  // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PurchasePercent;                                   // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHomebaseNodeState) == 0x000004, "Wrong alignment on FHomebaseNodeState");
static_assert(sizeof(FHomebaseNodeState) == 0x000008, "Wrong size on FHomebaseNodeState");
static_assert(offsetof(FHomebaseNodeState, bIsOwned) == 0x000000, "Member 'FHomebaseNodeState::bIsOwned' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeState, bArePrereqsMet) == 0x000001, "Member 'FHomebaseNodeState::bArePrereqsMet' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeState, bArePrereqQuestsCompleted) == 0x000002, "Member 'FHomebaseNodeState::bArePrereqQuestsCompleted' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeState, bAreCostsPayable) == 0x000003, "Member 'FHomebaseNodeState::bAreCostsPayable' has a wrong offset!");
static_assert(offsetof(FHomebaseNodeState, PurchasePercent) == 0x000004, "Member 'FHomebaseNodeState::PurchasePercent' has a wrong offset!");

// ScriptStruct FortniteGame.WorkerSetBonusState
// 0x0010 (0x0010 - 0x0000)
struct FWorkerSetBonusState final
{
public:
	struct FGameplayTag                           SetBonusTag;                                       // 0x0000(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentMatchCount;                                 // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredMatchCountToActivate;                      // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorkerSetBonusState) == 0x000008, "Wrong alignment on FWorkerSetBonusState");
static_assert(sizeof(FWorkerSetBonusState) == 0x000010, "Wrong size on FWorkerSetBonusState");
static_assert(offsetof(FWorkerSetBonusState, SetBonusTag) == 0x000000, "Member 'FWorkerSetBonusState::SetBonusTag' has a wrong offset!");
static_assert(offsetof(FWorkerSetBonusState, CurrentMatchCount) == 0x000008, "Member 'FWorkerSetBonusState::CurrentMatchCount' has a wrong offset!");
static_assert(offsetof(FWorkerSetBonusState, RequiredMatchCountToActivate) == 0x00000C, "Member 'FWorkerSetBonusState::RequiredMatchCountToActivate' has a wrong offset!");

// ScriptStruct FortniteGame.FortPawnVocalChord
// 0x00D8 (0x00D8 - 0x0000)
struct FFortPawnVocalChord final
{
public:
	class UAudioComponent*                        FeedbackAudioComponent;                            // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortSpokenLine                        ReplicatedSpokenLine;                              // 0x0008(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	struct FFortSpokenLine                        PendingSpokenLine;                                 // 0x0038(0x0030)(RepSkip, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortSpokenLine                        QueuedSpokenLine;                                  // 0x0068(0x0030)(RepSkip, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortSpokenLine                        CurrentSpokenLine;                                 // 0x0098(0x0030)(RepSkip, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x10];                                      // 0x00C8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPawnVocalChord) == 0x000008, "Wrong alignment on FFortPawnVocalChord");
static_assert(sizeof(FFortPawnVocalChord) == 0x0000D8, "Wrong size on FFortPawnVocalChord");
static_assert(offsetof(FFortPawnVocalChord, FeedbackAudioComponent) == 0x000000, "Member 'FFortPawnVocalChord::FeedbackAudioComponent' has a wrong offset!");
static_assert(offsetof(FFortPawnVocalChord, ReplicatedSpokenLine) == 0x000008, "Member 'FFortPawnVocalChord::ReplicatedSpokenLine' has a wrong offset!");
static_assert(offsetof(FFortPawnVocalChord, PendingSpokenLine) == 0x000038, "Member 'FFortPawnVocalChord::PendingSpokenLine' has a wrong offset!");
static_assert(offsetof(FFortPawnVocalChord, QueuedSpokenLine) == 0x000068, "Member 'FFortPawnVocalChord::QueuedSpokenLine' has a wrong offset!");
static_assert(offsetof(FFortPawnVocalChord, CurrentSpokenLine) == 0x000098, "Member 'FFortPawnVocalChord::CurrentSpokenLine' has a wrong offset!");

// ScriptStruct FortniteGame.WorkerPersonalityData
// 0x0038 (0x0038 - 0x0000)
struct FWorkerPersonalityData final
{
public:
	struct FGameplayTag                           PersonalityTypeTag;                                // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   PersonalityName;                                   // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         SelectionWeight;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWorkerGenderData>              GenderData;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorkerPersonalityData) == 0x000008, "Wrong alignment on FWorkerPersonalityData");
static_assert(sizeof(FWorkerPersonalityData) == 0x000038, "Wrong size on FWorkerPersonalityData");
static_assert(offsetof(FWorkerPersonalityData, PersonalityTypeTag) == 0x000000, "Member 'FWorkerPersonalityData::PersonalityTypeTag' has a wrong offset!");
static_assert(offsetof(FWorkerPersonalityData, PersonalityName) == 0x000008, "Member 'FWorkerPersonalityData::PersonalityName' has a wrong offset!");
static_assert(offsetof(FWorkerPersonalityData, SelectionWeight) == 0x000020, "Member 'FWorkerPersonalityData::SelectionWeight' has a wrong offset!");
static_assert(offsetof(FWorkerPersonalityData, GenderData) == 0x000028, "Member 'FWorkerPersonalityData::GenderData' has a wrong offset!");

// ScriptStruct FortniteGame.ExpeditionSlot
// 0x0018 (0x0020 - 0x0008)
struct FExpeditionSlot final : public FTableRowBase
{
public:
	struct FGameplayTag                           SlotTag;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LootTierGroup;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExpeditionSlot) == 0x000008, "Wrong alignment on FExpeditionSlot");
static_assert(sizeof(FExpeditionSlot) == 0x000020, "Wrong size on FExpeditionSlot");
static_assert(offsetof(FExpeditionSlot, SlotTag) == 0x000008, "Member 'FExpeditionSlot::SlotTag' has a wrong offset!");
static_assert(offsetof(FExpeditionSlot, LootTierGroup) == 0x000010, "Member 'FExpeditionSlot::LootTierGroup' has a wrong offset!");

// ScriptStruct FortniteGame.HomebaseBannerColorData
// 0x0010 (0x0018 - 0x0008)
struct FHomebaseBannerColorData final : public FTableRowBase
{
public:
	class FName                                   ColorKeyName;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   CategoryRowName;                                   // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FHomebaseBannerColorData) == 0x000008, "Wrong alignment on FHomebaseBannerColorData");
static_assert(sizeof(FHomebaseBannerColorData) == 0x000018, "Wrong size on FHomebaseBannerColorData");
static_assert(offsetof(FHomebaseBannerColorData, ColorKeyName) == 0x000008, "Member 'FHomebaseBannerColorData::ColorKeyName' has a wrong offset!");
static_assert(offsetof(FHomebaseBannerColorData, CategoryRowName) == 0x000010, "Member 'FHomebaseBannerColorData::CategoryRowName' has a wrong offset!");

// ScriptStruct FortniteGame.HomebaseBannerCategoryData
// 0x0020 (0x0028 - 0x0008)
struct FHomebaseBannerCategoryData final : public FTableRowBase
{
public:
	class FText                                   CategoryDisplayName;                               // 0x0008(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	int32                                         SortPriority;                                      // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHomebaseBannerCategoryData) == 0x000008, "Wrong alignment on FHomebaseBannerCategoryData");
static_assert(sizeof(FHomebaseBannerCategoryData) == 0x000028, "Wrong size on FHomebaseBannerCategoryData");
static_assert(offsetof(FHomebaseBannerCategoryData, CategoryDisplayName) == 0x000008, "Member 'FHomebaseBannerCategoryData::CategoryDisplayName' has a wrong offset!");
static_assert(offsetof(FHomebaseBannerCategoryData, SortPriority) == 0x000020, "Member 'FHomebaseBannerCategoryData::SortPriority' has a wrong offset!");

// ScriptStruct FortniteGame.TeamMapExplorationEvent
// 0x0002 (0x0002 - 0x0000)
struct FTeamMapExplorationEvent final
{
public:
	EFortTeam                                     TeamId;                                            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          ExplorationThreshold;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTeamMapExplorationEvent) == 0x000001, "Wrong alignment on FTeamMapExplorationEvent");
static_assert(sizeof(FTeamMapExplorationEvent) == 0x000002, "Wrong size on FTeamMapExplorationEvent");
static_assert(offsetof(FTeamMapExplorationEvent, TeamId) == 0x000000, "Member 'FTeamMapExplorationEvent::TeamId' has a wrong offset!");
static_assert(offsetof(FTeamMapExplorationEvent, ExplorationThreshold) == 0x000001, "Member 'FTeamMapExplorationEvent::ExplorationThreshold' has a wrong offset!");

// ScriptStruct FortniteGame.InteractionType
// 0x0028 (0x0028 - 0x0000)
struct FInteractionType final
{
public:
	ETInteractionType                             InteractionType;                                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AFortPlayerPawn>         RequestingPawn;                                    // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x8];                                        // 0x000C(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UPrimitiveComponent>     InteractComponent;                                 // 0x0014(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InteractPoint;                                     // 0x001C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInteractionType) == 0x000004, "Wrong alignment on FInteractionType");
static_assert(sizeof(FInteractionType) == 0x000028, "Wrong size on FInteractionType");
static_assert(offsetof(FInteractionType, InteractionType) == 0x000000, "Member 'FInteractionType::InteractionType' has a wrong offset!");
static_assert(offsetof(FInteractionType, RequestingPawn) == 0x000004, "Member 'FInteractionType::RequestingPawn' has a wrong offset!");
static_assert(offsetof(FInteractionType, InteractComponent) == 0x000014, "Member 'FInteractionType::InteractComponent' has a wrong offset!");
static_assert(offsetof(FInteractionType, InteractPoint) == 0x00001C, "Member 'FInteractionType::InteractPoint' has a wrong offset!");

// ScriptStruct FortniteGame.FortItemList
// 0x00C0 (0x0170 - 0x00B0)
struct FFortItemList final : public FFastArraySerializer
{
public:
	TArray<struct FFortItemEntry>                 ReplicatedEntries;                                 // 0x00B0(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	uint8                                         Pad_C0[0x50];                                      // 0x00C0(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortWorldItem*>                 ItemInstances;                                     // 0x0110(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_120[0x50];                                     // 0x0120(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemList) == 0x000008, "Wrong alignment on FFortItemList");
static_assert(sizeof(FFortItemList) == 0x000170, "Wrong size on FFortItemList");
static_assert(offsetof(FFortItemList, ReplicatedEntries) == 0x0000B0, "Member 'FFortItemList::ReplicatedEntries' has a wrong offset!");
static_assert(offsetof(FFortItemList, ItemInstances) == 0x000110, "Member 'FFortItemList::ItemInstances' has a wrong offset!");

// ScriptStruct FortniteGame.FortAvailableTheaterMissions
// 0x0028 (0x0028 - 0x0000)
struct FFortAvailableTheaterMissions final
{
public:
	class FString                                 TheaterId;                                         // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortAvailableMissionData>      AvailableMissions;                                 // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              NextRefresh;                                       // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAvailableTheaterMissions) == 0x000008, "Wrong alignment on FFortAvailableTheaterMissions");
static_assert(sizeof(FFortAvailableTheaterMissions) == 0x000028, "Wrong size on FFortAvailableTheaterMissions");
static_assert(offsetof(FFortAvailableTheaterMissions, TheaterId) == 0x000000, "Member 'FFortAvailableTheaterMissions::TheaterId' has a wrong offset!");
static_assert(offsetof(FFortAvailableTheaterMissions, AvailableMissions) == 0x000010, "Member 'FFortAvailableTheaterMissions::AvailableMissions' has a wrong offset!");
static_assert(offsetof(FFortAvailableTheaterMissions, NextRefresh) == 0x000020, "Member 'FFortAvailableTheaterMissions::NextRefresh' has a wrong offset!");

// ScriptStruct FortniteGame.ItemCategoryMappingData
// 0x0020 (0x0020 - 0x0000)
struct FItemCategoryMappingData final
{
public:
	EFortItemType                                 CategoryType;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CategoryName;                                      // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemCategoryMappingData) == 0x000008, "Wrong alignment on FItemCategoryMappingData");
static_assert(sizeof(FItemCategoryMappingData) == 0x000020, "Wrong size on FItemCategoryMappingData");
static_assert(offsetof(FItemCategoryMappingData, CategoryType) == 0x000000, "Member 'FItemCategoryMappingData::CategoryType' has a wrong offset!");
static_assert(offsetof(FItemCategoryMappingData, CategoryName) == 0x000008, "Member 'FItemCategoryMappingData::CategoryName' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionInstancedConfigDataBucket
// 0x0010 (0x0010 - 0x0000)
struct FFortMissionInstancedConfigDataBucket final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortMissionConfigData*                 ConfigData;                                        // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionInstancedConfigDataBucket) == 0x000008, "Wrong alignment on FFortMissionInstancedConfigDataBucket");
static_assert(sizeof(FFortMissionInstancedConfigDataBucket) == 0x000010, "Wrong size on FFortMissionInstancedConfigDataBucket");
static_assert(offsetof(FFortMissionInstancedConfigDataBucket, Tag) == 0x000000, "Member 'FFortMissionInstancedConfigDataBucket::Tag' has a wrong offset!");
static_assert(offsetof(FFortMissionInstancedConfigDataBucket, ConfigData) == 0x000008, "Member 'FFortMissionInstancedConfigDataBucket::ConfigData' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionInstancedConfigData
// 0x0010 (0x0010 - 0x0000)
struct FFortMissionInstancedConfigData final
{
public:
	TArray<struct FFortMissionInstancedConfigDataBucket> ConfigDataBuckets;                                 // 0x0000(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortMissionInstancedConfigData) == 0x000008, "Wrong alignment on FFortMissionInstancedConfigData");
static_assert(sizeof(FFortMissionInstancedConfigData) == 0x000010, "Wrong size on FFortMissionInstancedConfigData");
static_assert(offsetof(FFortMissionInstancedConfigData, ConfigDataBuckets) == 0x000000, "Member 'FFortMissionInstancedConfigData::ConfigDataBuckets' has a wrong offset!");

// ScriptStruct FortniteGame.FortGiftGiver
// 0x0008 (0x0030 - 0x0028)
struct FFortGiftGiver final : public FFortGiftingInfo
{
public:
	int32                                         NumItemsGiven;                                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortGiftGiver) == 0x000008, "Wrong alignment on FFortGiftGiver");
static_assert(sizeof(FFortGiftGiver) == 0x000030, "Wrong size on FFortGiftGiver");
static_assert(offsetof(FFortGiftGiver, NumItemsGiven) == 0x000028, "Member 'FFortGiftGiver::NumItemsGiven' has a wrong offset!");

// ScriptStruct FortniteGame.MissionTimeDisplayData
// 0x002C (0x002C - 0x0000)
struct FMissionTimeDisplayData final
{
public:
	float                                         LessThanTimeValue;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideTimer;                                        // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           BaseColor;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PulseColor;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorPulsesPerSecond;                              // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMissionTimeDisplayData) == 0x000004, "Wrong alignment on FMissionTimeDisplayData");
static_assert(sizeof(FMissionTimeDisplayData) == 0x00002C, "Wrong size on FMissionTimeDisplayData");
static_assert(offsetof(FMissionTimeDisplayData, LessThanTimeValue) == 0x000000, "Member 'FMissionTimeDisplayData::LessThanTimeValue' has a wrong offset!");
static_assert(offsetof(FMissionTimeDisplayData, bHideTimer) == 0x000004, "Member 'FMissionTimeDisplayData::bHideTimer' has a wrong offset!");
static_assert(offsetof(FMissionTimeDisplayData, BaseColor) == 0x000008, "Member 'FMissionTimeDisplayData::BaseColor' has a wrong offset!");
static_assert(offsetof(FMissionTimeDisplayData, PulseColor) == 0x000018, "Member 'FMissionTimeDisplayData::PulseColor' has a wrong offset!");
static_assert(offsetof(FMissionTimeDisplayData, ColorPulsesPerSecond) == 0x000028, "Member 'FMissionTimeDisplayData::ColorPulsesPerSecond' has a wrong offset!");

// ScriptStruct FortniteGame.LeaderboardRowData
// 0x0048 (0x0048 - 0x0000)
struct FLeaderboardRowData final
{
public:
	int32                                         Rank;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 User;                                              // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueNetIdRepl                       PlatformAccountId;                                 // 0x0020(0x0028)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLeaderboardRowData) == 0x000008, "Wrong alignment on FLeaderboardRowData");
static_assert(sizeof(FLeaderboardRowData) == 0x000048, "Wrong size on FLeaderboardRowData");
static_assert(offsetof(FLeaderboardRowData, Rank) == 0x000000, "Member 'FLeaderboardRowData::Rank' has a wrong offset!");
static_assert(offsetof(FLeaderboardRowData, User) == 0x000008, "Member 'FLeaderboardRowData::User' has a wrong offset!");
static_assert(offsetof(FLeaderboardRowData, Value) == 0x000018, "Member 'FLeaderboardRowData::Value' has a wrong offset!");
static_assert(offsetof(FLeaderboardRowData, PlatformAccountId) == 0x000020, "Member 'FLeaderboardRowData::PlatformAccountId' has a wrong offset!");

// ScriptStruct FortniteGame.FortLootPackageData
// 0x0088 (0x0090 - 0x0008)
struct FFortLootPackageData final : public FTableRowBase
{
public:
	class FName                                   LootPackageID;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LootPackageCategory;                               // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RequiredTag;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LootPackageCall;                                   // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortItemDefinition>     ItemDefinition;                                    // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PersistentLevel;                                   // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinWorldLevel;                                     // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxWorldLevel;                                     // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowBonusDrops;                                  // 0x0078(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Annotation;                                        // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortLootPackageData) == 0x000008, "Wrong alignment on FFortLootPackageData");
static_assert(sizeof(FFortLootPackageData) == 0x000090, "Wrong size on FFortLootPackageData");
static_assert(offsetof(FFortLootPackageData, LootPackageID) == 0x000008, "Member 'FFortLootPackageData::LootPackageID' has a wrong offset!");
static_assert(offsetof(FFortLootPackageData, Weight) == 0x000010, "Member 'FFortLootPackageData::Weight' has a wrong offset!");
static_assert(offsetof(FFortLootPackageData, Count) == 0x000014, "Member 'FFortLootPackageData::Count' has a wrong offset!");
static_assert(offsetof(FFortLootPackageData, LootPackageCategory) == 0x000018, "Member 'FFortLootPackageData::LootPackageCategory' has a wrong offset!");
static_assert(offsetof(FFortLootPackageData, RequiredTag) == 0x000020, "Member 'FFortLootPackageData::RequiredTag' has a wrong offset!");
static_assert(offsetof(FFortLootPackageData, LootPackageCall) == 0x000028, "Member 'FFortLootPackageData::LootPackageCall' has a wrong offset!");
static_assert(offsetof(FFortLootPackageData, ItemDefinition) == 0x000038, "Member 'FFortLootPackageData::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FFortLootPackageData, PersistentLevel) == 0x000060, "Member 'FFortLootPackageData::PersistentLevel' has a wrong offset!");
static_assert(offsetof(FFortLootPackageData, MinWorldLevel) == 0x000070, "Member 'FFortLootPackageData::MinWorldLevel' has a wrong offset!");
static_assert(offsetof(FFortLootPackageData, MaxWorldLevel) == 0x000074, "Member 'FFortLootPackageData::MaxWorldLevel' has a wrong offset!");
static_assert(offsetof(FFortLootPackageData, bAllowBonusDrops) == 0x000078, "Member 'FFortLootPackageData::bAllowBonusDrops' has a wrong offset!");
static_assert(offsetof(FFortLootPackageData, Annotation) == 0x000080, "Member 'FFortLootPackageData::Annotation' has a wrong offset!");

// ScriptStruct FortniteGame.FortLootTierData
// 0x00A8 (0x00B0 - 0x0008)
struct FFortLootTierData final : public FTableRowBase
{
public:
	class FName                                   TierGroup;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELootQuotaLevel                               QuotaLevel;                                        // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LootTier;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinWorldLevel;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxWorldLevel;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StreakBreakerCurrency;                             // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StreakBreakerPointsMin;                            // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StreakBreakerPointsMax;                            // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StreakBreakerPointsSpend;                          // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LootPackage;                                       // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LootPreviewPackage;                                // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NumLootPackageDrops;                               // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 LootPackageCategoryWeightArray;                    // 0x0060(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 LootPackageCategoryMinArray;                       // 0x0070(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 LootPackageCategoryMaxArray;                       // 0x0080(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTag                           RequiredGameplayTag;                               // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowBonusLootDrops;                              // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Annotation;                                        // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortLootTierData) == 0x000008, "Wrong alignment on FFortLootTierData");
static_assert(sizeof(FFortLootTierData) == 0x0000B0, "Wrong size on FFortLootTierData");
static_assert(offsetof(FFortLootTierData, TierGroup) == 0x000008, "Member 'FFortLootTierData::TierGroup' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, Weight) == 0x000010, "Member 'FFortLootTierData::Weight' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, QuotaLevel) == 0x000014, "Member 'FFortLootTierData::QuotaLevel' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, LootTier) == 0x000018, "Member 'FFortLootTierData::LootTier' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, MinWorldLevel) == 0x00001C, "Member 'FFortLootTierData::MinWorldLevel' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, MaxWorldLevel) == 0x000020, "Member 'FFortLootTierData::MaxWorldLevel' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, StreakBreakerCurrency) == 0x000028, "Member 'FFortLootTierData::StreakBreakerCurrency' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, StreakBreakerPointsMin) == 0x000038, "Member 'FFortLootTierData::StreakBreakerPointsMin' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, StreakBreakerPointsMax) == 0x00003C, "Member 'FFortLootTierData::StreakBreakerPointsMax' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, StreakBreakerPointsSpend) == 0x000040, "Member 'FFortLootTierData::StreakBreakerPointsSpend' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, LootPackage) == 0x000048, "Member 'FFortLootTierData::LootPackage' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, LootPreviewPackage) == 0x000050, "Member 'FFortLootTierData::LootPreviewPackage' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, NumLootPackageDrops) == 0x000058, "Member 'FFortLootTierData::NumLootPackageDrops' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, LootPackageCategoryWeightArray) == 0x000060, "Member 'FFortLootTierData::LootPackageCategoryWeightArray' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, LootPackageCategoryMinArray) == 0x000070, "Member 'FFortLootTierData::LootPackageCategoryMinArray' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, LootPackageCategoryMaxArray) == 0x000080, "Member 'FFortLootTierData::LootPackageCategoryMaxArray' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, RequiredGameplayTag) == 0x000090, "Member 'FFortLootTierData::RequiredGameplayTag' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, bAllowBonusLootDrops) == 0x000098, "Member 'FFortLootTierData::bAllowBonusLootDrops' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, Annotation) == 0x0000A0, "Member 'FFortLootTierData::Annotation' has a wrong offset!");

// ScriptStruct FortniteGame.FortCachedMatchmakingSearchParams
// 0x00B8 (0x00B8 - 0x0000)
struct FFortCachedMatchmakingSearchParams final
{
public:
	EFortMatchmakingType                          MatchmakingType;                                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatchmakingParams                     MatchmakingParams;                                 // 0x0008(0x00A8)(NativeAccessSpecifierPrivate)
	bool                                          bValid;                                            // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortCachedMatchmakingSearchParams) == 0x000008, "Wrong alignment on FFortCachedMatchmakingSearchParams");
static_assert(sizeof(FFortCachedMatchmakingSearchParams) == 0x0000B8, "Wrong size on FFortCachedMatchmakingSearchParams");
static_assert(offsetof(FFortCachedMatchmakingSearchParams, MatchmakingType) == 0x000000, "Member 'FFortCachedMatchmakingSearchParams::MatchmakingType' has a wrong offset!");
static_assert(offsetof(FFortCachedMatchmakingSearchParams, MatchmakingParams) == 0x000008, "Member 'FFortCachedMatchmakingSearchParams::MatchmakingParams' has a wrong offset!");
static_assert(offsetof(FFortCachedMatchmakingSearchParams, bValid) == 0x0000B0, "Member 'FFortCachedMatchmakingSearchParams::bValid' has a wrong offset!");

// ScriptStruct FortniteGame.FortInviteSessionParams
// 0x0038 (0x0038 - 0x0000)
struct FFortInviteSessionParams final
{
public:
	EMatchmakingState                             State;                                             // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   FailureReason;                                     // 0x0008(0x0018)(NativeAccessSpecifierPublic)
	EPartyReservationResult                       LastBeaconResponse;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x17];                                      // 0x0021(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortInviteSessionParams) == 0x000008, "Wrong alignment on FFortInviteSessionParams");
static_assert(sizeof(FFortInviteSessionParams) == 0x000038, "Wrong size on FFortInviteSessionParams");
static_assert(offsetof(FFortInviteSessionParams, State) == 0x000000, "Member 'FFortInviteSessionParams::State' has a wrong offset!");
static_assert(offsetof(FFortInviteSessionParams, FailureReason) == 0x000008, "Member 'FFortInviteSessionParams::FailureReason' has a wrong offset!");
static_assert(offsetof(FFortInviteSessionParams, LastBeaconResponse) == 0x000020, "Member 'FFortInviteSessionParams::LastBeaconResponse' has a wrong offset!");

// ScriptStruct FortniteGame.FortCollectionBookClaimRewardNotification
// 0x0040 (0x0040 - 0x0000)
struct FFortCollectionBookClaimRewardNotification final
{
public:
	struct FMcpLootResult                         Loot;                                              // 0x0000(0x0020)(NativeAccessSpecifierPublic)
	class FString                                 Page;                                              // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Section;                                           // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCollectionBookClaimRewardNotification) == 0x000008, "Wrong alignment on FFortCollectionBookClaimRewardNotification");
static_assert(sizeof(FFortCollectionBookClaimRewardNotification) == 0x000040, "Wrong size on FFortCollectionBookClaimRewardNotification");
static_assert(offsetof(FFortCollectionBookClaimRewardNotification, Loot) == 0x000000, "Member 'FFortCollectionBookClaimRewardNotification::Loot' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookClaimRewardNotification, Page) == 0x000020, "Member 'FFortCollectionBookClaimRewardNotification::Page' has a wrong offset!");
static_assert(offsetof(FFortCollectionBookClaimRewardNotification, Section) == 0x000030, "Member 'FFortCollectionBookClaimRewardNotification::Section' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionAlertCompleteNotification
// 0x0020 (0x0020 - 0x0000)
struct FFortMissionAlertCompleteNotification final
{
public:
	struct FMcpLootResult                         LootGranted;                                       // 0x0000(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionAlertCompleteNotification) == 0x000008, "Wrong alignment on FFortMissionAlertCompleteNotification");
static_assert(sizeof(FFortMissionAlertCompleteNotification) == 0x000020, "Wrong size on FFortMissionAlertCompleteNotification");
static_assert(offsetof(FFortMissionAlertCompleteNotification, LootGranted) == 0x000000, "Member 'FFortMissionAlertCompleteNotification::LootGranted' has a wrong offset!");

// ScriptStruct FortniteGame.FortTransmogResultNotification
// 0x0020 (0x0020 - 0x0000)
struct FFortTransmogResultNotification final
{
public:
	TArray<struct FMcpLootEntry>                  TransmoggedItems;                                  // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMcpLootEntry>                  RecycledItems;                                     // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTransmogResultNotification) == 0x000008, "Wrong alignment on FFortTransmogResultNotification");
static_assert(sizeof(FFortTransmogResultNotification) == 0x000020, "Wrong size on FFortTransmogResultNotification");
static_assert(offsetof(FFortTransmogResultNotification, TransmoggedItems) == 0x000000, "Member 'FFortTransmogResultNotification::TransmoggedItems' has a wrong offset!");
static_assert(offsetof(FFortTransmogResultNotification, RecycledItems) == 0x000010, "Member 'FFortTransmogResultNotification::RecycledItems' has a wrong offset!");

// ScriptStruct FortniteGame.FortUpgradeItemRarityNotification
// 0x0010 (0x0010 - 0x0000)
struct FFortUpgradeItemRarityNotification final
{
public:
	TArray<struct FMcpLootEntry>                  ItemsGranted;                                      // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortUpgradeItemRarityNotification) == 0x000008, "Wrong alignment on FFortUpgradeItemRarityNotification");
static_assert(sizeof(FFortUpgradeItemRarityNotification) == 0x000010, "Wrong size on FFortUpgradeItemRarityNotification");
static_assert(offsetof(FFortUpgradeItemRarityNotification, ItemsGranted) == 0x000000, "Member 'FFortUpgradeItemRarityNotification::ItemsGranted' has a wrong offset!");

// ScriptStruct FortniteGame.PerDifficultyMissionGenerationInfo
// 0x0020 (0x0020 - 0x0000)
struct FPerDifficultyMissionGenerationInfo final
{
public:
	struct FDataTableRowHandle                    MaxDifficulty;                                     // 0x0000(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FMissionGenerationInfo>         MissionGenerationInfos;                            // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPerDifficultyMissionGenerationInfo) == 0x000008, "Wrong alignment on FPerDifficultyMissionGenerationInfo");
static_assert(sizeof(FPerDifficultyMissionGenerationInfo) == 0x000020, "Wrong size on FPerDifficultyMissionGenerationInfo");
static_assert(offsetof(FPerDifficultyMissionGenerationInfo, MaxDifficulty) == 0x000000, "Member 'FPerDifficultyMissionGenerationInfo::MaxDifficulty' has a wrong offset!");
static_assert(offsetof(FPerDifficultyMissionGenerationInfo, MissionGenerationInfos) == 0x000010, "Member 'FPerDifficultyMissionGenerationInfo::MissionGenerationInfos' has a wrong offset!");

// ScriptStruct FortniteGame.FortReceivedGiftedBoostXpNotification
// 0x0018 (0x0018 - 0x0000)
struct FFortReceivedGiftedBoostXpNotification final
{
public:
	int32                                         AmountBoostXpGifted;                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GifterAccountId;                                   // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortReceivedGiftedBoostXpNotification) == 0x000008, "Wrong alignment on FFortReceivedGiftedBoostXpNotification");
static_assert(sizeof(FFortReceivedGiftedBoostXpNotification) == 0x000018, "Wrong size on FFortReceivedGiftedBoostXpNotification");
static_assert(offsetof(FFortReceivedGiftedBoostXpNotification, AmountBoostXpGifted) == 0x000000, "Member 'FFortReceivedGiftedBoostXpNotification::AmountBoostXpGifted' has a wrong offset!");
static_assert(offsetof(FFortReceivedGiftedBoostXpNotification, GifterAccountId) == 0x000008, "Member 'FFortReceivedGiftedBoostXpNotification::GifterAccountId' has a wrong offset!");

// ScriptStruct FortniteGame.FortEarnScoreNotification
// 0x0018 (0x0018 - 0x0000)
struct FFortEarnScoreNotification final
{
public:
	int32                                         BaseXPEarned;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BonusXPEarned;                                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoostXPEarned;                                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoostXPMissed;                                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RestXPEarned;                                      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupBoostXPEarned;                                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEarnScoreNotification) == 0x000004, "Wrong alignment on FFortEarnScoreNotification");
static_assert(sizeof(FFortEarnScoreNotification) == 0x000018, "Wrong size on FFortEarnScoreNotification");
static_assert(offsetof(FFortEarnScoreNotification, BaseXPEarned) == 0x000000, "Member 'FFortEarnScoreNotification::BaseXPEarned' has a wrong offset!");
static_assert(offsetof(FFortEarnScoreNotification, BonusXPEarned) == 0x000004, "Member 'FFortEarnScoreNotification::BonusXPEarned' has a wrong offset!");
static_assert(offsetof(FFortEarnScoreNotification, BoostXPEarned) == 0x000008, "Member 'FFortEarnScoreNotification::BoostXPEarned' has a wrong offset!");
static_assert(offsetof(FFortEarnScoreNotification, BoostXPMissed) == 0x00000C, "Member 'FFortEarnScoreNotification::BoostXPMissed' has a wrong offset!");
static_assert(offsetof(FFortEarnScoreNotification, RestXPEarned) == 0x000010, "Member 'FFortEarnScoreNotification::RestXPEarned' has a wrong offset!");
static_assert(offsetof(FFortEarnScoreNotification, GroupBoostXPEarned) == 0x000014, "Member 'FFortEarnScoreNotification::GroupBoostXPEarned' has a wrong offset!");

// ScriptStruct FortniteGame.CardPackResultNotification
// 0x0028 (0x0028 - 0x0000)
struct FCardPackResultNotification final
{
public:
	struct FMcpLootResult                         LootGranted;                                       // 0x0000(0x0020)(NativeAccessSpecifierPublic)
	int32                                         DisplayLevel;                                      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCardPackResultNotification) == 0x000008, "Wrong alignment on FCardPackResultNotification");
static_assert(sizeof(FCardPackResultNotification) == 0x000028, "Wrong size on FCardPackResultNotification");
static_assert(offsetof(FCardPackResultNotification, LootGranted) == 0x000000, "Member 'FCardPackResultNotification::LootGranted' has a wrong offset!");
static_assert(offsetof(FCardPackResultNotification, DisplayLevel) == 0x000020, "Member 'FCardPackResultNotification::DisplayLevel' has a wrong offset!");

// ScriptStruct FortniteGame.FortSpawnContext
// 0x0028 (0x0028 - 0x0000)
struct FFortSpawnContext final
{
public:
	EFortTeam                                     Team;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  Tags;                                              // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortSpawnContext) == 0x000008, "Wrong alignment on FFortSpawnContext");
static_assert(sizeof(FFortSpawnContext) == 0x000028, "Wrong size on FFortSpawnContext");
static_assert(offsetof(FFortSpawnContext, Team) == 0x000000, "Member 'FFortSpawnContext::Team' has a wrong offset!");
static_assert(offsetof(FFortSpawnContext, Tags) == 0x000008, "Member 'FFortSpawnContext::Tags' has a wrong offset!");

// ScriptStruct FortniteGame.FortNotificationLevelUp
// 0x0058 (0x0058 - 0x0000)
struct FFortNotificationLevelUp final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 HeroId;                                            // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortLootNotification                  Loot;                                              // 0x0018(0x0040)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortNotificationLevelUp) == 0x000008, "Wrong alignment on FFortNotificationLevelUp");
static_assert(sizeof(FFortNotificationLevelUp) == 0x000058, "Wrong size on FFortNotificationLevelUp");
static_assert(offsetof(FFortNotificationLevelUp, Level) == 0x000000, "Member 'FFortNotificationLevelUp::Level' has a wrong offset!");
static_assert(offsetof(FFortNotificationLevelUp, HeroId) == 0x000008, "Member 'FFortNotificationLevelUp::HeroId' has a wrong offset!");
static_assert(offsetof(FFortNotificationLevelUp, Loot) == 0x000018, "Member 'FFortNotificationLevelUp::Loot' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionCompletionNotification
// 0x0038 (0x0038 - 0x0000)
struct FFortMissionCompletionNotification final
{
public:
	bool                                          bWasCritical;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MissionName;                                       // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMcpLootResult                         LootGranted;                                       // 0x0018(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionCompletionNotification) == 0x000008, "Wrong alignment on FFortMissionCompletionNotification");
static_assert(sizeof(FFortMissionCompletionNotification) == 0x000038, "Wrong size on FFortMissionCompletionNotification");
static_assert(offsetof(FFortMissionCompletionNotification, bWasCritical) == 0x000000, "Member 'FFortMissionCompletionNotification::bWasCritical' has a wrong offset!");
static_assert(offsetof(FFortMissionCompletionNotification, MissionName) == 0x000008, "Member 'FFortMissionCompletionNotification::MissionName' has a wrong offset!");
static_assert(offsetof(FFortMissionCompletionNotification, LootGranted) == 0x000018, "Member 'FFortMissionCompletionNotification::LootGranted' has a wrong offset!");

// ScriptStruct FortniteGame.FortGlobalWindInfo
// 0x0018 (0x0018 - 0x0000)
struct FFortGlobalWindInfo final
{
public:
	TArray<struct FFortWindIntensityAndDirection> ValidWindInfos;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	int32                                         WindIndex;                                         // 0x0010(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortGlobalWindInfo) == 0x000008, "Wrong alignment on FFortGlobalWindInfo");
static_assert(sizeof(FFortGlobalWindInfo) == 0x000018, "Wrong size on FFortGlobalWindInfo");
static_assert(offsetof(FFortGlobalWindInfo, ValidWindInfos) == 0x000000, "Member 'FFortGlobalWindInfo::ValidWindInfos' has a wrong offset!");
static_assert(offsetof(FFortGlobalWindInfo, WindIndex) == 0x000010, "Member 'FFortGlobalWindInfo::WindIndex' has a wrong offset!");

// ScriptStruct FortniteGame.MissionPerDifficultyProperties
// 0x0068 (0x0068 - 0x0000)
struct FMissionPerDifficultyProperties final
{
public:
	TArray<struct FDataTableRowHandle>            ValidDifficulties;                                 // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortTimeOfDayTheme                    OverrideTimeOfDayTheme;                            // 0x0010(0x0040)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortGlobalWindInfo                    OverrideGlobalWindInfo;                            // 0x0050(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMissionPerDifficultyProperties) == 0x000008, "Wrong alignment on FMissionPerDifficultyProperties");
static_assert(sizeof(FMissionPerDifficultyProperties) == 0x000068, "Wrong size on FMissionPerDifficultyProperties");
static_assert(offsetof(FMissionPerDifficultyProperties, ValidDifficulties) == 0x000000, "Member 'FMissionPerDifficultyProperties::ValidDifficulties' has a wrong offset!");
static_assert(offsetof(FMissionPerDifficultyProperties, OverrideTimeOfDayTheme) == 0x000010, "Member 'FMissionPerDifficultyProperties::OverrideTimeOfDayTheme' has a wrong offset!");
static_assert(offsetof(FMissionPerDifficultyProperties, OverrideGlobalWindInfo) == 0x000050, "Member 'FMissionPerDifficultyProperties::OverrideGlobalWindInfo' has a wrong offset!");

// ScriptStruct FortniteGame.FortAthenaSeasonStats
// 0x000C (0x000C - 0x0000)
struct FFortAthenaSeasonStats final
{
public:
	int32                                         NumWins;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumHighBracket;                                    // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLowBracket;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAthenaSeasonStats) == 0x000004, "Wrong alignment on FFortAthenaSeasonStats");
static_assert(sizeof(FFortAthenaSeasonStats) == 0x00000C, "Wrong size on FFortAthenaSeasonStats");
static_assert(offsetof(FFortAthenaSeasonStats, NumWins) == 0x000000, "Member 'FFortAthenaSeasonStats::NumWins' has a wrong offset!");
static_assert(offsetof(FFortAthenaSeasonStats, NumHighBracket) == 0x000004, "Member 'FFortAthenaSeasonStats::NumHighBracket' has a wrong offset!");
static_assert(offsetof(FFortAthenaSeasonStats, NumLowBracket) == 0x000008, "Member 'FFortAthenaSeasonStats::NumLowBracket' has a wrong offset!");

// ScriptStruct FortniteGame.FortAthenaConsumableRecord
// 0x0010 (0x0010 - 0x0000)
struct FFortAthenaConsumableRecord final
{
public:
	class UFortAccountItemDefinition*             ItemType;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalQuantity;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAthenaConsumableRecord) == 0x000008, "Wrong alignment on FFortAthenaConsumableRecord");
static_assert(sizeof(FFortAthenaConsumableRecord) == 0x000010, "Wrong size on FFortAthenaConsumableRecord");
static_assert(offsetof(FFortAthenaConsumableRecord, ItemType) == 0x000000, "Member 'FFortAthenaConsumableRecord::ItemType' has a wrong offset!");
static_assert(offsetof(FFortAthenaConsumableRecord, TotalQuantity) == 0x000008, "Member 'FFortAthenaConsumableRecord::TotalQuantity' has a wrong offset!");

// ScriptStruct FortniteGame.FortQuestClientSettings
// 0x0010 (0x0010 - 0x0000)
struct FFortQuestClientSettings final
{
public:
	TArray<class FString>                         PinnedQuestInstances;                              // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortQuestClientSettings) == 0x000008, "Wrong alignment on FFortQuestClientSettings");
static_assert(sizeof(FFortQuestClientSettings) == 0x000010, "Wrong size on FFortQuestClientSettings");
static_assert(offsetof(FFortQuestClientSettings, PinnedQuestInstances) == 0x000000, "Member 'FFortQuestClientSettings::PinnedQuestInstances' has a wrong offset!");

// ScriptStruct FortniteGame.ItemIdAndQuantityPair
// 0x0018 (0x0018 - 0x0000)
struct FItemIdAndQuantityPair final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemIdAndQuantityPair) == 0x000008, "Wrong alignment on FItemIdAndQuantityPair");
static_assert(sizeof(FItemIdAndQuantityPair) == 0x000018, "Wrong size on FItemIdAndQuantityPair");
static_assert(offsetof(FItemIdAndQuantityPair, ItemId) == 0x000000, "Member 'FItemIdAndQuantityPair::ItemId' has a wrong offset!");
static_assert(offsetof(FItemIdAndQuantityPair, Quantity) == 0x000010, "Member 'FItemIdAndQuantityPair::Quantity' has a wrong offset!");

// ScriptStruct FortniteGame.FortProfileAndQuestSaveIdPair
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FFortProfileAndQuestSaveIdPair final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortProfileAndQuestSaveIdPair) == 0x000008, "Wrong alignment on FFortProfileAndQuestSaveIdPair");
static_assert(sizeof(FFortProfileAndQuestSaveIdPair) == 0x000020, "Wrong size on FFortProfileAndQuestSaveIdPair");

// ScriptStruct FortniteGame.FortWorldPlayerLoadout
// 0x0140 (0x0140 - 0x0000)
struct FFortWorldPlayerLoadout final
{
public:
	bool                                          bPlayerIsNew;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         PinnedSchematicInstances;                          // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FQuickBar                              PrimaryQuickBarRecord;                             // 0x0018(0x0090)(NativeAccessSpecifierPublic)
	struct FQuickBar                              SecondaryQuickBarRecord;                           // 0x00A8(0x0090)(NativeAccessSpecifierPublic)
	int32                                         ZonesCompleted;                                    // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortWorldPlayerLoadout) == 0x000008, "Wrong alignment on FFortWorldPlayerLoadout");
static_assert(sizeof(FFortWorldPlayerLoadout) == 0x000140, "Wrong size on FFortWorldPlayerLoadout");
static_assert(offsetof(FFortWorldPlayerLoadout, bPlayerIsNew) == 0x000000, "Member 'FFortWorldPlayerLoadout::bPlayerIsNew' has a wrong offset!");
static_assert(offsetof(FFortWorldPlayerLoadout, PinnedSchematicInstances) == 0x000008, "Member 'FFortWorldPlayerLoadout::PinnedSchematicInstances' has a wrong offset!");
static_assert(offsetof(FFortWorldPlayerLoadout, PrimaryQuickBarRecord) == 0x000018, "Member 'FFortWorldPlayerLoadout::PrimaryQuickBarRecord' has a wrong offset!");
static_assert(offsetof(FFortWorldPlayerLoadout, SecondaryQuickBarRecord) == 0x0000A8, "Member 'FFortWorldPlayerLoadout::SecondaryQuickBarRecord' has a wrong offset!");
static_assert(offsetof(FFortWorldPlayerLoadout, ZonesCompleted) == 0x000138, "Member 'FFortWorldPlayerLoadout::ZonesCompleted' has a wrong offset!");

// ScriptStruct FortniteGame.FortPersistentGameplayStatValue
// 0x0018 (0x0018 - 0x0000)
struct FFortPersistentGameplayStatValue final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StatValue;                                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPersistentGameplayStatValue) == 0x000008, "Wrong alignment on FFortPersistentGameplayStatValue");
static_assert(sizeof(FFortPersistentGameplayStatValue) == 0x000018, "Wrong size on FFortPersistentGameplayStatValue");
static_assert(offsetof(FFortPersistentGameplayStatValue, StatName) == 0x000000, "Member 'FFortPersistentGameplayStatValue::StatName' has a wrong offset!");
static_assert(offsetof(FFortPersistentGameplayStatValue, StatValue) == 0x000010, "Member 'FFortPersistentGameplayStatValue::StatValue' has a wrong offset!");

// ScriptStruct FortniteGame.FortPersistentGameplayStatContainer
// 0x0010 (0x0010 - 0x0000)
struct FFortPersistentGameplayStatContainer final
{
public:
	TArray<struct FFortPersistentGameplayStatValue> GameplayStats;                                     // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPersistentGameplayStatContainer) == 0x000008, "Wrong alignment on FFortPersistentGameplayStatContainer");
static_assert(sizeof(FFortPersistentGameplayStatContainer) == 0x000010, "Wrong size on FFortPersistentGameplayStatContainer");
static_assert(offsetof(FFortPersistentGameplayStatContainer, GameplayStats) == 0x000000, "Member 'FFortPersistentGameplayStatContainer::GameplayStats' has a wrong offset!");

// ScriptStruct FortniteGame.FortTwitchPendingQuestNotification
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FFortTwitchPendingQuestNotification final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortTwitchPendingQuestNotification) == 0x000008, "Wrong alignment on FFortTwitchPendingQuestNotification");
static_assert(sizeof(FFortTwitchPendingQuestNotification) == 0x000010, "Wrong size on FFortTwitchPendingQuestNotification");

// ScriptStruct FortniteGame.FortTwitchViewerGrantedQuestNotification
// 0x0020 (0x0020 - 0x0000)
struct FFortTwitchViewerGrantedQuestNotification final
{
public:
	class FString                                 QuestTemplateId;                                   // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortTwitchViewerNameAndAccountId> ViewerIds;                                         // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTwitchViewerGrantedQuestNotification) == 0x000008, "Wrong alignment on FFortTwitchViewerGrantedQuestNotification");
static_assert(sizeof(FFortTwitchViewerGrantedQuestNotification) == 0x000020, "Wrong size on FFortTwitchViewerGrantedQuestNotification");
static_assert(offsetof(FFortTwitchViewerGrantedQuestNotification, QuestTemplateId) == 0x000000, "Member 'FFortTwitchViewerGrantedQuestNotification::QuestTemplateId' has a wrong offset!");
static_assert(offsetof(FFortTwitchViewerGrantedQuestNotification, ViewerIds) == 0x000010, "Member 'FFortTwitchViewerGrantedQuestNotification::ViewerIds' has a wrong offset!");

// ScriptStruct FortniteGame.McpLeaderboardResult
// 0x0030 (0x0030 - 0x0000)
struct FMcpLeaderboardResult final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMcpLeaderboardTimeWindow                     TimeWindow;                                        // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              RequestTime;                                       // 0x0018(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMcpLeaderboardResultRow>       LeaderboardData;                                   // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMcpLeaderboardResult) == 0x000008, "Wrong alignment on FMcpLeaderboardResult");
static_assert(sizeof(FMcpLeaderboardResult) == 0x000030, "Wrong size on FMcpLeaderboardResult");
static_assert(offsetof(FMcpLeaderboardResult, StatName) == 0x000000, "Member 'FMcpLeaderboardResult::StatName' has a wrong offset!");
static_assert(offsetof(FMcpLeaderboardResult, TimeWindow) == 0x000010, "Member 'FMcpLeaderboardResult::TimeWindow' has a wrong offset!");
static_assert(offsetof(FMcpLeaderboardResult, RequestTime) == 0x000018, "Member 'FMcpLeaderboardResult::RequestTime' has a wrong offset!");
static_assert(offsetof(FMcpLeaderboardResult, LeaderboardData) == 0x000020, "Member 'FMcpLeaderboardResult::LeaderboardData' has a wrong offset!");

// ScriptStruct FortniteGame.IssuedFriendCode
// 0x0028 (0x0028 - 0x0000)
struct FIssuedFriendCode final
{
public:
	class FString                                 CodeId;                                            // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CodeType;                                          // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              DateCreated;                                       // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIssuedFriendCode) == 0x000008, "Wrong alignment on FIssuedFriendCode");
static_assert(sizeof(FIssuedFriendCode) == 0x000028, "Wrong size on FIssuedFriendCode");
static_assert(offsetof(FIssuedFriendCode, CodeId) == 0x000000, "Member 'FIssuedFriendCode::CodeId' has a wrong offset!");
static_assert(offsetof(FIssuedFriendCode, CodeType) == 0x000010, "Member 'FIssuedFriendCode::CodeType' has a wrong offset!");
static_assert(offsetof(FIssuedFriendCode, DateCreated) == 0x000020, "Member 'FIssuedFriendCode::DateCreated' has a wrong offset!");

// ScriptStruct FortniteGame.XboxDedicatedServerSessionCreationParams
// 0x0030 (0x0030 - 0x0000)
struct FXboxDedicatedServerSessionCreationParams final
{
public:
	class FString                                 TitleId;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SandboxId;                                         // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         XboxUserIds;                                       // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FXboxDedicatedServerSessionCreationParams) == 0x000008, "Wrong alignment on FXboxDedicatedServerSessionCreationParams");
static_assert(sizeof(FXboxDedicatedServerSessionCreationParams) == 0x000030, "Wrong size on FXboxDedicatedServerSessionCreationParams");
static_assert(offsetof(FXboxDedicatedServerSessionCreationParams, TitleId) == 0x000000, "Member 'FXboxDedicatedServerSessionCreationParams::TitleId' has a wrong offset!");
static_assert(offsetof(FXboxDedicatedServerSessionCreationParams, SandboxId) == 0x000010, "Member 'FXboxDedicatedServerSessionCreationParams::SandboxId' has a wrong offset!");
static_assert(offsetof(FXboxDedicatedServerSessionCreationParams, XboxUserIds) == 0x000020, "Member 'FXboxDedicatedServerSessionCreationParams::XboxUserIds' has a wrong offset!");

// ScriptStruct FortniteGame.RewardBadgesProgression
// 0x0010 (0x0010 - 0x0000)
struct FRewardBadgesProgression final
{
public:
	TArray<class UFortBadgeItemDefinition*>       RewardBadges;                                      // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRewardBadgesProgression) == 0x000008, "Wrong alignment on FRewardBadgesProgression");
static_assert(sizeof(FRewardBadgesProgression) == 0x000010, "Wrong size on FRewardBadgesProgression");
static_assert(offsetof(FRewardBadgesProgression, RewardBadges) == 0x000000, "Member 'FRewardBadgesProgression::RewardBadges' has a wrong offset!");

// ScriptStruct FortniteGame.FortActiveTheaterInfo
// 0x0030 (0x0030 - 0x0000)
struct FFortActiveTheaterInfo final
{
public:
	TArray<struct FFortTheaterMapData>            Theaters;                                          // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortAvailableTheaterMissions>  Missions;                                          // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortAvailableMissionAlerts>    MissionAlerts;                                     // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortActiveTheaterInfo) == 0x000008, "Wrong alignment on FFortActiveTheaterInfo");
static_assert(sizeof(FFortActiveTheaterInfo) == 0x000030, "Wrong size on FFortActiveTheaterInfo");
static_assert(offsetof(FFortActiveTheaterInfo, Theaters) == 0x000000, "Member 'FFortActiveTheaterInfo::Theaters' has a wrong offset!");
static_assert(offsetof(FFortActiveTheaterInfo, Missions) == 0x000010, "Member 'FFortActiveTheaterInfo::Missions' has a wrong offset!");
static_assert(offsetof(FFortActiveTheaterInfo, MissionAlerts) == 0x000020, "Member 'FFortActiveTheaterInfo::MissionAlerts' has a wrong offset!");

// ScriptStruct FortniteGame.PrivateTeamDataItem
// 0x0034 (0x0040 - 0x000C)
struct FPrivateTeamDataItem final : public FFastArraySerializerItem
{
public:
	float                                         Value;                                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       PlayerID;                                          // 0x0010(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPrivateTeamDataItem) == 0x000008, "Wrong alignment on FPrivateTeamDataItem");
static_assert(sizeof(FPrivateTeamDataItem) == 0x000040, "Wrong size on FPrivateTeamDataItem");
static_assert(offsetof(FPrivateTeamDataItem, Value) == 0x00000C, "Member 'FPrivateTeamDataItem::Value' has a wrong offset!");
static_assert(offsetof(FPrivateTeamDataItem, PlayerID) == 0x000010, "Member 'FPrivateTeamDataItem::PlayerID' has a wrong offset!");

// ScriptStruct FortniteGame.FortZoneInstanceInfo
// 0x0068 (0x0068 - 0x0000)
struct FFortZoneInstanceInfo
{
public:
	class FString                                 WorldId;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TheaterId;                                         // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TheaterMissionId;                                  // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TheaterMissionAlertId;                             // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ZoneThemeClass;                                    // 0x0040(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortZoneInstanceInfo) == 0x000008, "Wrong alignment on FFortZoneInstanceInfo");
static_assert(sizeof(FFortZoneInstanceInfo) == 0x000068, "Wrong size on FFortZoneInstanceInfo");
static_assert(offsetof(FFortZoneInstanceInfo, WorldId) == 0x000000, "Member 'FFortZoneInstanceInfo::WorldId' has a wrong offset!");
static_assert(offsetof(FFortZoneInstanceInfo, TheaterId) == 0x000010, "Member 'FFortZoneInstanceInfo::TheaterId' has a wrong offset!");
static_assert(offsetof(FFortZoneInstanceInfo, TheaterMissionId) == 0x000020, "Member 'FFortZoneInstanceInfo::TheaterMissionId' has a wrong offset!");
static_assert(offsetof(FFortZoneInstanceInfo, TheaterMissionAlertId) == 0x000030, "Member 'FFortZoneInstanceInfo::TheaterMissionAlertId' has a wrong offset!");
static_assert(offsetof(FFortZoneInstanceInfo, ZoneThemeClass) == 0x000040, "Member 'FFortZoneInstanceInfo::ZoneThemeClass' has a wrong offset!");

// ScriptStruct FortniteGame.FortMiniMapData
// 0x0080 (0x0080 - 0x0000)
struct FFortMiniMapData final
{
public:
	class UTexture2D*                             MiniMapIcon;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              IconScale;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseIconSize : 1;                                  // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsVisible : 1;                                    // 0x0010(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsVisibleOnMiniMap : 1;                           // 0x0010(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShowVerticalOffset : 1;                           // 0x0010(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShowFarOffIndicator : 1;                          // 0x0010(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAllowLocalOverrides : 1;                          // 0x0010(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseTeamAffiliationColors : 1;                     // 0x0010(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0014(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FriendColor;                                       // 0x0024(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           EnemyColor;                                        // 0x0034(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           NeutralColor;                                      // 0x0044(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PulseColor;                                        // 0x0054(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorPulsesPerSecond;                              // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SizePulsesPerSecond;                               // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewableDistance;                                  // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationOffset;                                    // 0x0070(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMiniMapData) == 0x000008, "Wrong alignment on FFortMiniMapData");
static_assert(sizeof(FFortMiniMapData) == 0x000080, "Wrong size on FFortMiniMapData");
static_assert(offsetof(FFortMiniMapData, MiniMapIcon) == 0x000000, "Member 'FFortMiniMapData::MiniMapIcon' has a wrong offset!");
static_assert(offsetof(FFortMiniMapData, IconScale) == 0x000008, "Member 'FFortMiniMapData::IconScale' has a wrong offset!");
static_assert(offsetof(FFortMiniMapData, Color) == 0x000014, "Member 'FFortMiniMapData::Color' has a wrong offset!");
static_assert(offsetof(FFortMiniMapData, FriendColor) == 0x000024, "Member 'FFortMiniMapData::FriendColor' has a wrong offset!");
static_assert(offsetof(FFortMiniMapData, EnemyColor) == 0x000034, "Member 'FFortMiniMapData::EnemyColor' has a wrong offset!");
static_assert(offsetof(FFortMiniMapData, NeutralColor) == 0x000044, "Member 'FFortMiniMapData::NeutralColor' has a wrong offset!");
static_assert(offsetof(FFortMiniMapData, PulseColor) == 0x000054, "Member 'FFortMiniMapData::PulseColor' has a wrong offset!");
static_assert(offsetof(FFortMiniMapData, ColorPulsesPerSecond) == 0x000064, "Member 'FFortMiniMapData::ColorPulsesPerSecond' has a wrong offset!");
static_assert(offsetof(FFortMiniMapData, SizePulsesPerSecond) == 0x000068, "Member 'FFortMiniMapData::SizePulsesPerSecond' has a wrong offset!");
static_assert(offsetof(FFortMiniMapData, ViewableDistance) == 0x00006C, "Member 'FFortMiniMapData::ViewableDistance' has a wrong offset!");
static_assert(offsetof(FFortMiniMapData, LocationOffset) == 0x000070, "Member 'FFortMiniMapData::LocationOffset' has a wrong offset!");
static_assert(offsetof(FFortMiniMapData, Priority) == 0x00007C, "Member 'FFortMiniMapData::Priority' has a wrong offset!");

// ScriptStruct FortniteGame.FortScoreStylingInfo
// 0x02F8 (0x02F8 - 0x0000)
struct FFortScoreStylingInfo final
{
public:
	class FText                                   Name;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FFortMultiSizeBrush                    Icon;                                              // 0x0018(0x02D0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x02E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortScoreStylingInfo) == 0x000008, "Wrong alignment on FFortScoreStylingInfo");
static_assert(sizeof(FFortScoreStylingInfo) == 0x0002F8, "Wrong size on FFortScoreStylingInfo");
static_assert(offsetof(FFortScoreStylingInfo, Name) == 0x000000, "Member 'FFortScoreStylingInfo::Name' has a wrong offset!");
static_assert(offsetof(FFortScoreStylingInfo, Icon) == 0x000018, "Member 'FFortScoreStylingInfo::Icon' has a wrong offset!");
static_assert(offsetof(FFortScoreStylingInfo, Color) == 0x0002E8, "Member 'FFortScoreStylingInfo::Color' has a wrong offset!");

// ScriptStruct FortniteGame.FortDifficultyOptionBudget
// 0x0030 (0x0030 - 0x0000)
struct FFortDifficultyOptionBudget final
{
public:
	struct FGameplayTagContainer                  BudgetTypeTags;                                    // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   DifficultyOptionPointsCurve;                       // 0x0020(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortDifficultyOptionBudget) == 0x000008, "Wrong alignment on FFortDifficultyOptionBudget");
static_assert(sizeof(FFortDifficultyOptionBudget) == 0x000030, "Wrong size on FFortDifficultyOptionBudget");
static_assert(offsetof(FFortDifficultyOptionBudget, BudgetTypeTags) == 0x000000, "Member 'FFortDifficultyOptionBudget::BudgetTypeTags' has a wrong offset!");
static_assert(offsetof(FFortDifficultyOptionBudget, DifficultyOptionPointsCurve) == 0x000020, "Member 'FFortDifficultyOptionBudget::DifficultyOptionPointsCurve' has a wrong offset!");

// ScriptStruct FortniteGame.FortAthenaLTMConfig
// 0x0058 (0x0058 - 0x0000)
struct FFortAthenaLTMConfig final
{
public:
	TSoftObjectPtr<class UTexture2D>              SplashImage;                                       // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   FrontEndDescription;                               // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   DisabledMessage;                                   // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAthenaLTMConfig) == 0x000008, "Wrong alignment on FFortAthenaLTMConfig");
static_assert(sizeof(FFortAthenaLTMConfig) == 0x000058, "Wrong size on FFortAthenaLTMConfig");
static_assert(offsetof(FFortAthenaLTMConfig, SplashImage) == 0x000000, "Member 'FFortAthenaLTMConfig::SplashImage' has a wrong offset!");
static_assert(offsetof(FFortAthenaLTMConfig, FrontEndDescription) == 0x000028, "Member 'FFortAthenaLTMConfig::FrontEndDescription' has a wrong offset!");
static_assert(offsetof(FFortAthenaLTMConfig, DisabledMessage) == 0x000040, "Member 'FFortAthenaLTMConfig::DisabledMessage' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionTaggedRewards
// 0x0018 (0x0018 - 0x0000)
struct FFortMissionTaggedRewards final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UFortWorldItemDefinition>> WorldItemDefinitions;                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionTaggedRewards) == 0x000008, "Wrong alignment on FFortMissionTaggedRewards");
static_assert(sizeof(FFortMissionTaggedRewards) == 0x000018, "Wrong size on FFortMissionTaggedRewards");
static_assert(offsetof(FFortMissionTaggedRewards, Tag) == 0x000000, "Member 'FFortMissionTaggedRewards::Tag' has a wrong offset!");
static_assert(offsetof(FFortMissionTaggedRewards, WorldItemDefinitions) == 0x000008, "Member 'FFortMissionTaggedRewards::WorldItemDefinitions' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionPopupWidgetData
// 0x01A0 (0x01A0 - 0x0000)
struct FFortMissionPopupWidgetData final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bShowDescription;                                  // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Description;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            DescriptionIcon;                                   // 0x0038(0x0078)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            AvailableIcon;                                     // 0x00B0(0x0078)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            UnavailableIcon;                                   // 0x0128(0x0078)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionPopupWidgetData) == 0x000008, "Wrong alignment on FFortMissionPopupWidgetData");
static_assert(sizeof(FFortMissionPopupWidgetData) == 0x0001A0, "Wrong size on FFortMissionPopupWidgetData");
static_assert(offsetof(FFortMissionPopupWidgetData, DisplayName) == 0x000000, "Member 'FFortMissionPopupWidgetData::DisplayName' has a wrong offset!");
static_assert(offsetof(FFortMissionPopupWidgetData, bShowDescription) == 0x000018, "Member 'FFortMissionPopupWidgetData::bShowDescription' has a wrong offset!");
static_assert(offsetof(FFortMissionPopupWidgetData, Description) == 0x000020, "Member 'FFortMissionPopupWidgetData::Description' has a wrong offset!");
static_assert(offsetof(FFortMissionPopupWidgetData, DescriptionIcon) == 0x000038, "Member 'FFortMissionPopupWidgetData::DescriptionIcon' has a wrong offset!");
static_assert(offsetof(FFortMissionPopupWidgetData, AvailableIcon) == 0x0000B0, "Member 'FFortMissionPopupWidgetData::AvailableIcon' has a wrong offset!");
static_assert(offsetof(FFortMissionPopupWidgetData, UnavailableIcon) == 0x000128, "Member 'FFortMissionPopupWidgetData::UnavailableIcon' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionWeightedReward
// 0x0088 (0x0088 - 0x0000)
struct FFortMissionWeightedReward final
{
public:
	class FName                                   LootTierGroup;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            LootIcon;                                          // 0x0008(0x0078)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMissionWeightedReward) == 0x000008, "Wrong alignment on FFortMissionWeightedReward");
static_assert(sizeof(FFortMissionWeightedReward) == 0x000088, "Wrong size on FFortMissionWeightedReward");
static_assert(offsetof(FFortMissionWeightedReward, LootTierGroup) == 0x000000, "Member 'FFortMissionWeightedReward::LootTierGroup' has a wrong offset!");
static_assert(offsetof(FFortMissionWeightedReward, LootIcon) == 0x000008, "Member 'FFortMissionWeightedReward::LootIcon' has a wrong offset!");
static_assert(offsetof(FFortMissionWeightedReward, Weight) == 0x000080, "Member 'FFortMissionWeightedReward::Weight' has a wrong offset!");

// ScriptStruct FortniteGame.AirControlParams
// 0x00C8 (0x00C8 - 0x0000)
struct FAirControlParams final
{
public:
	struct FScalableFloat                         MaxAcceleration;                                   // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FScalableFloat                         LateralFriction;                                   // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MaxLateralSpeed;                                   // 0x0050(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FScalableFloat                         TerminalVelocity;                                  // 0x0078(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FScalableFloat                         GravityScalar;                                     // 0x00A0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAirControlParams) == 0x000008, "Wrong alignment on FAirControlParams");
static_assert(sizeof(FAirControlParams) == 0x0000C8, "Wrong size on FAirControlParams");
static_assert(offsetof(FAirControlParams, MaxAcceleration) == 0x000000, "Member 'FAirControlParams::MaxAcceleration' has a wrong offset!");
static_assert(offsetof(FAirControlParams, LateralFriction) == 0x000028, "Member 'FAirControlParams::LateralFriction' has a wrong offset!");
static_assert(offsetof(FAirControlParams, MaxLateralSpeed) == 0x000050, "Member 'FAirControlParams::MaxLateralSpeed' has a wrong offset!");
static_assert(offsetof(FAirControlParams, TerminalVelocity) == 0x000078, "Member 'FAirControlParams::TerminalVelocity' has a wrong offset!");
static_assert(offsetof(FAirControlParams, GravityScalar) == 0x0000A0, "Member 'FAirControlParams::GravityScalar' has a wrong offset!");

// ScriptStruct FortniteGame.QueuedMusic
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FQueuedMusic final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQueuedMusic) == 0x000008, "Wrong alignment on FQueuedMusic");
static_assert(sizeof(FQueuedMusic) == 0x000010, "Wrong size on FQueuedMusic");

// ScriptStruct FortniteGame.RestrictedCountry
// 0x0018 (0x0018 - 0x0000)
struct FRestrictedCountry final
{
public:
	class FString                                 CountryCode;                                       // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHealthWarningsShown;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRealMoneyStoreRestriction;                        // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRestrictedCountry) == 0x000008, "Wrong alignment on FRestrictedCountry");
static_assert(sizeof(FRestrictedCountry) == 0x000018, "Wrong size on FRestrictedCountry");
static_assert(offsetof(FRestrictedCountry, CountryCode) == 0x000000, "Member 'FRestrictedCountry::CountryCode' has a wrong offset!");
static_assert(offsetof(FRestrictedCountry, bHealthWarningsShown) == 0x000010, "Member 'FRestrictedCountry::bHealthWarningsShown' has a wrong offset!");
static_assert(offsetof(FRestrictedCountry, bRealMoneyStoreRestriction) == 0x000011, "Member 'FRestrictedCountry::bRealMoneyStoreRestriction' has a wrong offset!");

// ScriptStruct FortniteGame.GeneralChatRecommendations
// 0x0028 (0x0028 - 0x0000)
struct FGeneralChatRecommendations final
{
public:
	TArray<struct FGeneralChatRoom>               GlobalChatRooms;                                   // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGeneralChatRoom>               FounderChatRooms;                                  // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bNeedsPaidAccessForGlobalChat;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedsPaidAccessForFounderChat;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGlobalChatDisabled;                             // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFounderChatDisabled;                            // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSubGameGlobalChatDisabled;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeneralChatRecommendations) == 0x000008, "Wrong alignment on FGeneralChatRecommendations");
static_assert(sizeof(FGeneralChatRecommendations) == 0x000028, "Wrong size on FGeneralChatRecommendations");
static_assert(offsetof(FGeneralChatRecommendations, GlobalChatRooms) == 0x000000, "Member 'FGeneralChatRecommendations::GlobalChatRooms' has a wrong offset!");
static_assert(offsetof(FGeneralChatRecommendations, FounderChatRooms) == 0x000010, "Member 'FGeneralChatRecommendations::FounderChatRooms' has a wrong offset!");
static_assert(offsetof(FGeneralChatRecommendations, bNeedsPaidAccessForGlobalChat) == 0x000020, "Member 'FGeneralChatRecommendations::bNeedsPaidAccessForGlobalChat' has a wrong offset!");
static_assert(offsetof(FGeneralChatRecommendations, bNeedsPaidAccessForFounderChat) == 0x000021, "Member 'FGeneralChatRecommendations::bNeedsPaidAccessForFounderChat' has a wrong offset!");
static_assert(offsetof(FGeneralChatRecommendations, bIsGlobalChatDisabled) == 0x000022, "Member 'FGeneralChatRecommendations::bIsGlobalChatDisabled' has a wrong offset!");
static_assert(offsetof(FGeneralChatRecommendations, bIsFounderChatDisabled) == 0x000023, "Member 'FGeneralChatRecommendations::bIsFounderChatDisabled' has a wrong offset!");
static_assert(offsetof(FGeneralChatRecommendations, bIsSubGameGlobalChatDisabled) == 0x000024, "Member 'FGeneralChatRecommendations::bIsSubGameGlobalChatDisabled' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionConfigDataBucket
// 0x0030 (0x0030 - 0x0000)
struct FFortMissionConfigDataBucket final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ConfigDataClass;                                   // 0x0008(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionConfigDataBucket) == 0x000008, "Wrong alignment on FFortMissionConfigDataBucket");
static_assert(sizeof(FFortMissionConfigDataBucket) == 0x000030, "Wrong size on FFortMissionConfigDataBucket");
static_assert(offsetof(FFortMissionConfigDataBucket, Tag) == 0x000000, "Member 'FFortMissionConfigDataBucket::Tag' has a wrong offset!");
static_assert(offsetof(FFortMissionConfigDataBucket, ConfigDataClass) == 0x000008, "Member 'FFortMissionConfigDataBucket::ConfigDataClass' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionConfigDataParams
// 0x0010 (0x0010 - 0x0000)
struct FFortMissionConfigDataParams final
{
public:
	TArray<struct FFortMissionConfigDataBucket>   ConfigParams;                                      // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortMissionConfigDataParams) == 0x000008, "Wrong alignment on FFortMissionConfigDataParams");
static_assert(sizeof(FFortMissionConfigDataParams) == 0x000010, "Wrong size on FFortMissionConfigDataParams");
static_assert(offsetof(FFortMissionConfigDataParams, ConfigParams) == 0x000000, "Member 'FFortMissionConfigDataParams::ConfigParams' has a wrong offset!");

// ScriptStruct FortniteGame.OutpostBuildingData
// 0x0028 (0x0028 - 0x0000)
struct FOutpostBuildingData
{
public:
	TSoftObjectPtr<class UFortOutpostItemDefinition> ItemDefinition;                                    // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOutpostBuildingData) == 0x000008, "Wrong alignment on FOutpostBuildingData");
static_assert(sizeof(FOutpostBuildingData) == 0x000028, "Wrong size on FOutpostBuildingData");
static_assert(offsetof(FOutpostBuildingData, ItemDefinition) == 0x000000, "Member 'FOutpostBuildingData::ItemDefinition' has a wrong offset!");

// ScriptStruct FortniteGame.MyTownWorkerSetBonusData
// 0x0050 (0x0050 - 0x0000)
struct FMyTownWorkerSetBonusData final
{
public:
	struct FGameplayTagContainer                  SetBonusTypeTag;                                   // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         RequiredWorkersCount;                              // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            SetBonusEffect;                                    // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectionWeight;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMyTownWorkerSetBonusData) == 0x000008, "Wrong alignment on FMyTownWorkerSetBonusData");
static_assert(sizeof(FMyTownWorkerSetBonusData) == 0x000050, "Wrong size on FMyTownWorkerSetBonusData");
static_assert(offsetof(FMyTownWorkerSetBonusData, SetBonusTypeTag) == 0x000000, "Member 'FMyTownWorkerSetBonusData::SetBonusTypeTag' has a wrong offset!");
static_assert(offsetof(FMyTownWorkerSetBonusData, DisplayName) == 0x000020, "Member 'FMyTownWorkerSetBonusData::DisplayName' has a wrong offset!");
static_assert(offsetof(FMyTownWorkerSetBonusData, RequiredWorkersCount) == 0x000038, "Member 'FMyTownWorkerSetBonusData::RequiredWorkersCount' has a wrong offset!");
static_assert(offsetof(FMyTownWorkerSetBonusData, SetBonusEffect) == 0x000040, "Member 'FMyTownWorkerSetBonusData::SetBonusEffect' has a wrong offset!");
static_assert(offsetof(FMyTownWorkerSetBonusData, SelectionWeight) == 0x000048, "Member 'FMyTownWorkerSetBonusData::SelectionWeight' has a wrong offset!");

// ScriptStruct FortniteGame.OutpostPOSTBoost
// 0x0010 (0x0010 - 0x0000)
struct FOutpostPOSTBoost final
{
public:
	struct FCurveTableRowHandle                   PlayerStructureHealthModPerPOSTLevel;              // 0x0000(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOutpostPOSTBoost) == 0x000008, "Wrong alignment on FOutpostPOSTBoost");
static_assert(sizeof(FOutpostPOSTBoost) == 0x000010, "Wrong size on FOutpostPOSTBoost");
static_assert(offsetof(FOutpostPOSTBoost, PlayerStructureHealthModPerPOSTLevel) == 0x000000, "Member 'FOutpostPOSTBoost::PlayerStructureHealthModPerPOSTLevel' has a wrong offset!");

// ScriptStruct FortniteGame.OutpostPOSTPerTheaterData
// 0x0018 (0x0018 - 0x0000)
struct FOutpostPOSTPerTheaterData final
{
public:
	int32                                         TheaterSlot;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FOutpostPOSTBoost                      POSTData;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOutpostPOSTPerTheaterData) == 0x000008, "Wrong alignment on FOutpostPOSTPerTheaterData");
static_assert(sizeof(FOutpostPOSTPerTheaterData) == 0x000018, "Wrong size on FOutpostPOSTPerTheaterData");
static_assert(offsetof(FOutpostPOSTPerTheaterData, TheaterSlot) == 0x000000, "Member 'FOutpostPOSTPerTheaterData::TheaterSlot' has a wrong offset!");
static_assert(offsetof(FOutpostPOSTPerTheaterData, POSTData) == 0x000008, "Member 'FOutpostPOSTPerTheaterData::POSTData' has a wrong offset!");

// ScriptStruct FortniteGame.OutpostUpgradeAndPrestigeBuildingData
// 0x0068 (0x0090 - 0x0028)
struct FOutpostUpgradeAndPrestigeBuildingData final : public FOutpostBuildingData
{
public:
	int32                                         MaxPrestigeLevel;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             DefaultOutpostBuildingUpgradeData;                 // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FOutpostUpgradesPerTheaterData> PerTheaterOutpostBuildingUpgradeData;              // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FOutpostPrestigeEffects                DefaultPrestigeData;                               // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FOutpostPrestigeEffectsPerTheater> PrestigePerTheaterData;                            // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FOutpostPOSTBoost                      DefaultPOSTData;                                   // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FOutpostPOSTPerTheaterData>     POSTPerTheaterData;                                // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            POSTBuildingGameplayEffectClass;                   // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOutpostUpgradeAndPrestigeBuildingData) == 0x000008, "Wrong alignment on FOutpostUpgradeAndPrestigeBuildingData");
static_assert(sizeof(FOutpostUpgradeAndPrestigeBuildingData) == 0x000090, "Wrong size on FOutpostUpgradeAndPrestigeBuildingData");
static_assert(offsetof(FOutpostUpgradeAndPrestigeBuildingData, MaxPrestigeLevel) == 0x000028, "Member 'FOutpostUpgradeAndPrestigeBuildingData::MaxPrestigeLevel' has a wrong offset!");
static_assert(offsetof(FOutpostUpgradeAndPrestigeBuildingData, DefaultOutpostBuildingUpgradeData) == 0x000030, "Member 'FOutpostUpgradeAndPrestigeBuildingData::DefaultOutpostBuildingUpgradeData' has a wrong offset!");
static_assert(offsetof(FOutpostUpgradeAndPrestigeBuildingData, PerTheaterOutpostBuildingUpgradeData) == 0x000038, "Member 'FOutpostUpgradeAndPrestigeBuildingData::PerTheaterOutpostBuildingUpgradeData' has a wrong offset!");
static_assert(offsetof(FOutpostUpgradeAndPrestigeBuildingData, DefaultPrestigeData) == 0x000048, "Member 'FOutpostUpgradeAndPrestigeBuildingData::DefaultPrestigeData' has a wrong offset!");
static_assert(offsetof(FOutpostUpgradeAndPrestigeBuildingData, PrestigePerTheaterData) == 0x000058, "Member 'FOutpostUpgradeAndPrestigeBuildingData::PrestigePerTheaterData' has a wrong offset!");
static_assert(offsetof(FOutpostUpgradeAndPrestigeBuildingData, DefaultPOSTData) == 0x000068, "Member 'FOutpostUpgradeAndPrestigeBuildingData::DefaultPOSTData' has a wrong offset!");
static_assert(offsetof(FOutpostUpgradeAndPrestigeBuildingData, POSTPerTheaterData) == 0x000078, "Member 'FOutpostUpgradeAndPrestigeBuildingData::POSTPerTheaterData' has a wrong offset!");
static_assert(offsetof(FOutpostUpgradeAndPrestigeBuildingData, POSTBuildingGameplayEffectClass) == 0x000088, "Member 'FOutpostUpgradeAndPrestigeBuildingData::POSTBuildingGameplayEffectClass' has a wrong offset!");

// ScriptStruct FortniteGame.StorageVaultBuildingData
// 0x0010 (0x0038 - 0x0028)
struct FStorageVaultBuildingData final : public FOutpostBuildingData
{
public:
	TArray<int32>                                 ItemCapacityPerLevel;                              // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStorageVaultBuildingData) == 0x000008, "Wrong alignment on FStorageVaultBuildingData");
static_assert(sizeof(FStorageVaultBuildingData) == 0x000038, "Wrong size on FStorageVaultBuildingData");
static_assert(offsetof(FStorageVaultBuildingData, ItemCapacityPerLevel) == 0x000028, "Member 'FStorageVaultBuildingData::ItemCapacityPerLevel' has a wrong offset!");

// ScriptStruct FortniteGame.HarvestingOptimizerBuildingData
// 0x0000 (0x0028 - 0x0028)
struct FHarvestingOptimizerBuildingData final : public FOutpostBuildingData
{
};
static_assert(alignof(FHarvestingOptimizerBuildingData) == 0x000008, "Wrong alignment on FHarvestingOptimizerBuildingData");
static_assert(sizeof(FHarvestingOptimizerBuildingData) == 0x000028, "Wrong size on FHarvestingOptimizerBuildingData");

// ScriptStruct FortniteGame.CraftingTableBuildingData
// 0x0010 (0x0038 - 0x0028)
struct FCraftingTableBuildingData final : public FOutpostBuildingData
{
public:
	class UDataTable*                             ActivationCostData;                                // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            ActivationEffect;                                  // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCraftingTableBuildingData) == 0x000008, "Wrong alignment on FCraftingTableBuildingData");
static_assert(sizeof(FCraftingTableBuildingData) == 0x000038, "Wrong size on FCraftingTableBuildingData");
static_assert(offsetof(FCraftingTableBuildingData, ActivationCostData) == 0x000028, "Member 'FCraftingTableBuildingData::ActivationCostData' has a wrong offset!");
static_assert(offsetof(FCraftingTableBuildingData, ActivationEffect) == 0x000030, "Member 'FCraftingTableBuildingData::ActivationEffect' has a wrong offset!");

// ScriptStruct FortniteGame.OutpostFabricatorPerTheaterData
// 0x0008 (0x0008 - 0x0000)
struct FOutpostFabricatorPerTheaterData final
{
public:
	int32                                         TheaterSlot;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemTier                                 MaxAllowedTier;                                    // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOutpostFabricatorPerTheaterData) == 0x000004, "Wrong alignment on FOutpostFabricatorPerTheaterData");
static_assert(sizeof(FOutpostFabricatorPerTheaterData) == 0x000008, "Wrong size on FOutpostFabricatorPerTheaterData");
static_assert(offsetof(FOutpostFabricatorPerTheaterData, TheaterSlot) == 0x000000, "Member 'FOutpostFabricatorPerTheaterData::TheaterSlot' has a wrong offset!");
static_assert(offsetof(FOutpostFabricatorPerTheaterData, MaxAllowedTier) == 0x000004, "Member 'FOutpostFabricatorPerTheaterData::MaxAllowedTier' has a wrong offset!");

// ScriptStruct FortniteGame.FabricatorBuildingData
// 0x0048 (0x0070 - 0x0028)
struct FFabricatorBuildingData final : public FOutpostBuildingData
{
public:
	TArray<TSoftObjectPtr<class UFortWorldItemDefinition>> AlwaysAvailableFabricationItems;                   // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	class UDataTable*                             DefaultIngredientDisintergrationData;              // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FOutpostFabricatorPerTheaterData> IngredientDisintergrationPerTheaterData;           // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         FabricationDuration;                               // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisintegrationToFabricationRatio;                  // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuantumGooProductionTime;                          // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 QuantumGooCapacityPerLevel;                        // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFabricatorBuildingData) == 0x000008, "Wrong alignment on FFabricatorBuildingData");
static_assert(sizeof(FFabricatorBuildingData) == 0x000070, "Wrong size on FFabricatorBuildingData");
static_assert(offsetof(FFabricatorBuildingData, AlwaysAvailableFabricationItems) == 0x000028, "Member 'FFabricatorBuildingData::AlwaysAvailableFabricationItems' has a wrong offset!");
static_assert(offsetof(FFabricatorBuildingData, DefaultIngredientDisintergrationData) == 0x000038, "Member 'FFabricatorBuildingData::DefaultIngredientDisintergrationData' has a wrong offset!");
static_assert(offsetof(FFabricatorBuildingData, IngredientDisintergrationPerTheaterData) == 0x000040, "Member 'FFabricatorBuildingData::IngredientDisintergrationPerTheaterData' has a wrong offset!");
static_assert(offsetof(FFabricatorBuildingData, FabricationDuration) == 0x000050, "Member 'FFabricatorBuildingData::FabricationDuration' has a wrong offset!");
static_assert(offsetof(FFabricatorBuildingData, DisintegrationToFabricationRatio) == 0x000054, "Member 'FFabricatorBuildingData::DisintegrationToFabricationRatio' has a wrong offset!");
static_assert(offsetof(FFabricatorBuildingData, QuantumGooProductionTime) == 0x000058, "Member 'FFabricatorBuildingData::QuantumGooProductionTime' has a wrong offset!");
static_assert(offsetof(FFabricatorBuildingData, QuantumGooCapacityPerLevel) == 0x000060, "Member 'FFabricatorBuildingData::QuantumGooCapacityPerLevel' has a wrong offset!");

// ScriptStruct FortniteGame.FortDeferredNewActorData
// 0x0010 (0x0010 - 0x0000)
struct FFortDeferredNewActorData final
{
public:
	class ABuildingActor*                         BuildingActor;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SavedLevelIndex;                                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActorRecordIndex;                                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortDeferredNewActorData) == 0x000008, "Wrong alignment on FFortDeferredNewActorData");
static_assert(sizeof(FFortDeferredNewActorData) == 0x000010, "Wrong size on FFortDeferredNewActorData");
static_assert(offsetof(FFortDeferredNewActorData, BuildingActor) == 0x000000, "Member 'FFortDeferredNewActorData::BuildingActor' has a wrong offset!");
static_assert(offsetof(FFortDeferredNewActorData, SavedLevelIndex) == 0x000008, "Member 'FFortDeferredNewActorData::SavedLevelIndex' has a wrong offset!");
static_assert(offsetof(FFortDeferredNewActorData, ActorRecordIndex) == 0x00000C, "Member 'FFortDeferredNewActorData::ActorRecordIndex' has a wrong offset!");

// ScriptStruct FortniteGame.OutpostCraftingTableData
// 0x0018 (0x0020 - 0x0008)
struct FOutpostCraftingTableData final : public FTableRowBase
{
public:
	int32                                         Level;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RequiredItems;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOutpostCraftingTableData) == 0x000008, "Wrong alignment on FOutpostCraftingTableData");
static_assert(sizeof(FOutpostCraftingTableData) == 0x000020, "Wrong size on FOutpostCraftingTableData");
static_assert(offsetof(FOutpostCraftingTableData, Level) == 0x000008, "Member 'FOutpostCraftingTableData::Level' has a wrong offset!");
static_assert(offsetof(FOutpostCraftingTableData, ItemCount) == 0x00000C, "Member 'FOutpostCraftingTableData::ItemCount' has a wrong offset!");
static_assert(offsetof(FOutpostCraftingTableData, RequiredItems) == 0x000010, "Member 'FOutpostCraftingTableData::RequiredItems' has a wrong offset!");

// ScriptStruct FortniteGame.OutpostDisintegrationData
// 0x0030 (0x0038 - 0x0008)
struct FOutpostDisintegrationData final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UFortWorldItemDefinition> ItemDefinition;                                    // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisintegrationValue;                               // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOutpostDisintegrationData) == 0x000008, "Wrong alignment on FOutpostDisintegrationData");
static_assert(sizeof(FOutpostDisintegrationData) == 0x000038, "Wrong size on FOutpostDisintegrationData");
static_assert(offsetof(FOutpostDisintegrationData, ItemDefinition) == 0x000008, "Member 'FOutpostDisintegrationData::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FOutpostDisintegrationData, DisintegrationValue) == 0x000030, "Member 'FOutpostDisintegrationData::DisintegrationValue' has a wrong offset!");

// ScriptStruct FortniteGame.EmptyServerReservation
// 0x0058 (0x0058 - 0x0000)
struct FEmptyServerReservation final
{
public:
	int32                                         PlaylistId;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ZoneInstanceId;                                    // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WUID;                                              // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       WorldDataOwner;                                    // 0x0028(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMakePrivate;                                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMatchmakingPool                          MatchmakingPool;                                   // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEmptyServerReservation) == 0x000008, "Wrong alignment on FEmptyServerReservation");
static_assert(sizeof(FEmptyServerReservation) == 0x000058, "Wrong size on FEmptyServerReservation");
static_assert(offsetof(FEmptyServerReservation, PlaylistId) == 0x000000, "Member 'FEmptyServerReservation::PlaylistId' has a wrong offset!");
static_assert(offsetof(FEmptyServerReservation, ZoneInstanceId) == 0x000008, "Member 'FEmptyServerReservation::ZoneInstanceId' has a wrong offset!");
static_assert(offsetof(FEmptyServerReservation, WUID) == 0x000018, "Member 'FEmptyServerReservation::WUID' has a wrong offset!");
static_assert(offsetof(FEmptyServerReservation, WorldDataOwner) == 0x000028, "Member 'FEmptyServerReservation::WorldDataOwner' has a wrong offset!");
static_assert(offsetof(FEmptyServerReservation, bMakePrivate) == 0x000050, "Member 'FEmptyServerReservation::bMakePrivate' has a wrong offset!");
static_assert(offsetof(FEmptyServerReservation, MatchmakingPool) == 0x000051, "Member 'FEmptyServerReservation::MatchmakingPool' has a wrong offset!");

// ScriptStruct FortniteGame.FortPartyRepState
// 0x0078 (0x0088 - 0x0010)
struct FFortPartyRepState final : public FPartyState
{
public:
	EFortPartyState                               PartyProgression;                                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLobbyConnectionStarted;                           // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMatchmakingCompleteResult                    MatchmakingResult;                                 // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMatchmakingState                             MatchmakingState;                                  // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SessionId;                                         // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSessionIsCriticalMission;                         // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ZoneTileIndex;                                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ZoneInstanceId;                                    // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TheaterId;                                         // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<bool>                                  TileStates;                                        // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 BucketId;                                          // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomMatchKey;                                    // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAthenaPlaylist                           PlaylistType;                                      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSquadFill;                                        // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPartyRepState) == 0x000008, "Wrong alignment on FFortPartyRepState");
static_assert(sizeof(FFortPartyRepState) == 0x000088, "Wrong size on FFortPartyRepState");
static_assert(offsetof(FFortPartyRepState, PartyProgression) == 0x000010, "Member 'FFortPartyRepState::PartyProgression' has a wrong offset!");
static_assert(offsetof(FFortPartyRepState, bLobbyConnectionStarted) == 0x000011, "Member 'FFortPartyRepState::bLobbyConnectionStarted' has a wrong offset!");
static_assert(offsetof(FFortPartyRepState, MatchmakingResult) == 0x000012, "Member 'FFortPartyRepState::MatchmakingResult' has a wrong offset!");
static_assert(offsetof(FFortPartyRepState, MatchmakingState) == 0x000013, "Member 'FFortPartyRepState::MatchmakingState' has a wrong offset!");
static_assert(offsetof(FFortPartyRepState, SessionId) == 0x000018, "Member 'FFortPartyRepState::SessionId' has a wrong offset!");
static_assert(offsetof(FFortPartyRepState, bSessionIsCriticalMission) == 0x000028, "Member 'FFortPartyRepState::bSessionIsCriticalMission' has a wrong offset!");
static_assert(offsetof(FFortPartyRepState, ZoneTileIndex) == 0x00002C, "Member 'FFortPartyRepState::ZoneTileIndex' has a wrong offset!");
static_assert(offsetof(FFortPartyRepState, ZoneInstanceId) == 0x000030, "Member 'FFortPartyRepState::ZoneInstanceId' has a wrong offset!");
static_assert(offsetof(FFortPartyRepState, TheaterId) == 0x000040, "Member 'FFortPartyRepState::TheaterId' has a wrong offset!");
static_assert(offsetof(FFortPartyRepState, TileStates) == 0x000050, "Member 'FFortPartyRepState::TileStates' has a wrong offset!");
static_assert(offsetof(FFortPartyRepState, BucketId) == 0x000060, "Member 'FFortPartyRepState::BucketId' has a wrong offset!");
static_assert(offsetof(FFortPartyRepState, CustomMatchKey) == 0x000070, "Member 'FFortPartyRepState::CustomMatchKey' has a wrong offset!");
static_assert(offsetof(FFortPartyRepState, PlaylistType) == 0x000080, "Member 'FFortPartyRepState::PlaylistType' has a wrong offset!");
static_assert(offsetof(FFortPartyRepState, bSquadFill) == 0x000081, "Member 'FFortPartyRepState::bSquadFill' has a wrong offset!");

// ScriptStruct FortniteGame.FortPartyMemberRepState
// 0x0078 (0x0080 - 0x0008)
struct FFortPartyMemberRepState final : public FPartyMemberRepState
{
public:
	EFortPartyMemberLocation                      Location;                                          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MatchmakingLevel;                                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ZoneInstanceId;                                    // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentCharXP;                                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 HeroId;                                            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HeroTypeRefName;                                   // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCustomGender                             CharacterGender;                                   // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         HomeBaseVersion;                                   // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ConsoleOSSString;                                  // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ConsoleUniqueNetIdString;                          // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreloadedAthena;                                  // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReadyAthena;                                      // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bJoinedConsoleSession;                             // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7B[0x5];                                       // 0x007B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPartyMemberRepState) == 0x000008, "Wrong alignment on FFortPartyMemberRepState");
static_assert(sizeof(FFortPartyMemberRepState) == 0x000080, "Wrong size on FFortPartyMemberRepState");
static_assert(offsetof(FFortPartyMemberRepState, Location) == 0x000008, "Member 'FFortPartyMemberRepState::Location' has a wrong offset!");
static_assert(offsetof(FFortPartyMemberRepState, MatchmakingLevel) == 0x00000C, "Member 'FFortPartyMemberRepState::MatchmakingLevel' has a wrong offset!");
static_assert(offsetof(FFortPartyMemberRepState, ZoneInstanceId) == 0x000010, "Member 'FFortPartyMemberRepState::ZoneInstanceId' has a wrong offset!");
static_assert(offsetof(FFortPartyMemberRepState, CurrentCharXP) == 0x000020, "Member 'FFortPartyMemberRepState::CurrentCharXP' has a wrong offset!");
static_assert(offsetof(FFortPartyMemberRepState, HeroId) == 0x000028, "Member 'FFortPartyMemberRepState::HeroId' has a wrong offset!");
static_assert(offsetof(FFortPartyMemberRepState, HeroTypeRefName) == 0x000038, "Member 'FFortPartyMemberRepState::HeroTypeRefName' has a wrong offset!");
static_assert(offsetof(FFortPartyMemberRepState, CharacterGender) == 0x000048, "Member 'FFortPartyMemberRepState::CharacterGender' has a wrong offset!");
static_assert(offsetof(FFortPartyMemberRepState, HomeBaseVersion) == 0x000050, "Member 'FFortPartyMemberRepState::HomeBaseVersion' has a wrong offset!");
static_assert(offsetof(FFortPartyMemberRepState, ConsoleOSSString) == 0x000058, "Member 'FFortPartyMemberRepState::ConsoleOSSString' has a wrong offset!");
static_assert(offsetof(FFortPartyMemberRepState, ConsoleUniqueNetIdString) == 0x000068, "Member 'FFortPartyMemberRepState::ConsoleUniqueNetIdString' has a wrong offset!");
static_assert(offsetof(FFortPartyMemberRepState, bPreloadedAthena) == 0x000078, "Member 'FFortPartyMemberRepState::bPreloadedAthena' has a wrong offset!");
static_assert(offsetof(FFortPartyMemberRepState, bReadyAthena) == 0x000079, "Member 'FFortPartyMemberRepState::bReadyAthena' has a wrong offset!");
static_assert(offsetof(FFortPartyMemberRepState, bJoinedConsoleSession) == 0x00007A, "Member 'FFortPartyMemberRepState::bJoinedConsoleSession' has a wrong offset!");

// ScriptStruct FortniteGame.AssetAttachment
// 0x0030 (0x0030 - 0x0000)
struct FAssetAttachment final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          SkeletalMeshAsset;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            StaticMeshAsset;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipOnDedicatedServers;                           // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 SkelMeshComp;                                      // 0x0020(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   StaticMeshComp;                                    // 0x0028(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAssetAttachment) == 0x000008, "Wrong alignment on FAssetAttachment");
static_assert(sizeof(FAssetAttachment) == 0x000030, "Wrong size on FAssetAttachment");
static_assert(offsetof(FAssetAttachment, SocketName) == 0x000000, "Member 'FAssetAttachment::SocketName' has a wrong offset!");
static_assert(offsetof(FAssetAttachment, SkeletalMeshAsset) == 0x000008, "Member 'FAssetAttachment::SkeletalMeshAsset' has a wrong offset!");
static_assert(offsetof(FAssetAttachment, StaticMeshAsset) == 0x000010, "Member 'FAssetAttachment::StaticMeshAsset' has a wrong offset!");
static_assert(offsetof(FAssetAttachment, bSkipOnDedicatedServers) == 0x000018, "Member 'FAssetAttachment::bSkipOnDedicatedServers' has a wrong offset!");
static_assert(offsetof(FAssetAttachment, SkelMeshComp) == 0x000020, "Member 'FAssetAttachment::SkelMeshComp' has a wrong offset!");
static_assert(offsetof(FAssetAttachment, StaticMeshComp) == 0x000028, "Member 'FAssetAttachment::StaticMeshComp' has a wrong offset!");

// ScriptStruct FortniteGame.CalloutEntry
// 0x0080 (0x0080 - 0x0000)
struct FCalloutEntry final
{
public:
	struct FGameplayTag                           CalloutTag;                                        // 0x0000(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            CalloutIcon;                                       // 0x0008(0x0078)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCalloutEntry) == 0x000008, "Wrong alignment on FCalloutEntry");
static_assert(sizeof(FCalloutEntry) == 0x000080, "Wrong size on FCalloutEntry");
static_assert(offsetof(FCalloutEntry, CalloutTag) == 0x000000, "Member 'FCalloutEntry::CalloutTag' has a wrong offset!");
static_assert(offsetof(FCalloutEntry, CalloutIcon) == 0x000008, "Member 'FCalloutEntry::CalloutIcon' has a wrong offset!");

// ScriptStruct FortniteGame.PawnDamageZones
// 0x0018 (0x0018 - 0x0000)
struct FPawnDamageZones final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Bones;                                             // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPawnDamageZones) == 0x000008, "Wrong alignment on FPawnDamageZones");
static_assert(sizeof(FPawnDamageZones) == 0x000018, "Wrong size on FPawnDamageZones");
static_assert(offsetof(FPawnDamageZones, bActive) == 0x000000, "Member 'FPawnDamageZones::bActive' has a wrong offset!");
static_assert(offsetof(FPawnDamageZones, Bones) == 0x000008, "Member 'FPawnDamageZones::Bones' has a wrong offset!");

// ScriptStruct FortniteGame.DamagerInfo
// 0x0030 (0x0030 - 0x0000)
struct FDamagerInfo final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageAmount;                                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  SourceTags;                                        // 0x0010(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FDamagerInfo) == 0x000008, "Wrong alignment on FDamagerInfo");
static_assert(sizeof(FDamagerInfo) == 0x000030, "Wrong size on FDamagerInfo");
static_assert(offsetof(FDamagerInfo, DamageCauser) == 0x000000, "Member 'FDamagerInfo::DamageCauser' has a wrong offset!");
static_assert(offsetof(FDamagerInfo, DamageAmount) == 0x000008, "Member 'FDamagerInfo::DamageAmount' has a wrong offset!");
static_assert(offsetof(FDamagerInfo, SourceTags) == 0x000010, "Member 'FDamagerInfo::SourceTags' has a wrong offset!");

// ScriptStruct FortniteGame.BuildingHitTime
// 0x0018 (0x0018 - 0x0000)
struct FBuildingHitTime final
{
public:
	class ABuildingActor*                         HitBuilding;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingHitTime) == 0x000008, "Wrong alignment on FBuildingHitTime");
static_assert(sizeof(FBuildingHitTime) == 0x000018, "Wrong size on FBuildingHitTime");
static_assert(offsetof(FBuildingHitTime, HitBuilding) == 0x000000, "Member 'FBuildingHitTime::HitBuilding' has a wrong offset!");

// ScriptStruct FortniteGame.FortZoneInstanceDetails
// 0x00B0 (0x0118 - 0x0068)
struct FFortZoneInstanceDetails final : public FFortZoneInstanceInfo
{
public:
	TSoftClassPtr<class UClass>                   MissionGenerator;                                  // 0x0068(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    ZoneDifficultyInfo;                                // 0x0090(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	struct FMcpLootResult                         MissionRewards;                                    // 0x00A0(0x0020)(NativeAccessSpecifierPublic)
	struct FMcpLootResult                         MissionAlertRewards;                               // 0x00C0(0x0020)(NativeAccessSpecifierPublic)
	struct FMcpLootResult                         ZoneModifiers;                                     // 0x00E0(0x0020)(NativeAccessSpecifierPublic)
	class FString                                 MissionAlertCategoryName;                          // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TileIndex;                                         // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortZoneInstanceDetails) == 0x000008, "Wrong alignment on FFortZoneInstanceDetails");
static_assert(sizeof(FFortZoneInstanceDetails) == 0x000118, "Wrong size on FFortZoneInstanceDetails");
static_assert(offsetof(FFortZoneInstanceDetails, MissionGenerator) == 0x000068, "Member 'FFortZoneInstanceDetails::MissionGenerator' has a wrong offset!");
static_assert(offsetof(FFortZoneInstanceDetails, ZoneDifficultyInfo) == 0x000090, "Member 'FFortZoneInstanceDetails::ZoneDifficultyInfo' has a wrong offset!");
static_assert(offsetof(FFortZoneInstanceDetails, MissionRewards) == 0x0000A0, "Member 'FFortZoneInstanceDetails::MissionRewards' has a wrong offset!");
static_assert(offsetof(FFortZoneInstanceDetails, MissionAlertRewards) == 0x0000C0, "Member 'FFortZoneInstanceDetails::MissionAlertRewards' has a wrong offset!");
static_assert(offsetof(FFortZoneInstanceDetails, ZoneModifiers) == 0x0000E0, "Member 'FFortZoneInstanceDetails::ZoneModifiers' has a wrong offset!");
static_assert(offsetof(FFortZoneInstanceDetails, MissionAlertCategoryName) == 0x000100, "Member 'FFortZoneInstanceDetails::MissionAlertCategoryName' has a wrong offset!");
static_assert(offsetof(FFortZoneInstanceDetails, TileIndex) == 0x000110, "Member 'FFortZoneInstanceDetails::TileIndex' has a wrong offset!");

// ScriptStruct FortniteGame.FortSavedModeLoadout
// 0x0020 (0x0020 - 0x0000)
struct FFortSavedModeLoadout final
{
public:
	class FString                                 LoadoutName;                                       // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         SelectedGadgets;                                   // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortSavedModeLoadout) == 0x000008, "Wrong alignment on FFortSavedModeLoadout");
static_assert(sizeof(FFortSavedModeLoadout) == 0x000020, "Wrong size on FFortSavedModeLoadout");
static_assert(offsetof(FFortSavedModeLoadout, LoadoutName) == 0x000000, "Member 'FFortSavedModeLoadout::LoadoutName' has a wrong offset!");
static_assert(offsetof(FFortSavedModeLoadout, SelectedGadgets) == 0x000010, "Member 'FFortSavedModeLoadout::SelectedGadgets' has a wrong offset!");

// ScriptStruct FortniteGame.FortUpdatedObjectiveStat
// 0x0018 (0x0018 - 0x0000)
struct FFortUpdatedObjectiveStat final
{
public:
	class UFortQuestItemDefinition*               Quest;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BackendName;                                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StatValue;                                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortUpdatedObjectiveStat) == 0x000008, "Wrong alignment on FFortUpdatedObjectiveStat");
static_assert(sizeof(FFortUpdatedObjectiveStat) == 0x000018, "Wrong size on FFortUpdatedObjectiveStat");
static_assert(offsetof(FFortUpdatedObjectiveStat, Quest) == 0x000000, "Member 'FFortUpdatedObjectiveStat::Quest' has a wrong offset!");
static_assert(offsetof(FFortUpdatedObjectiveStat, BackendName) == 0x000008, "Member 'FFortUpdatedObjectiveStat::BackendName' has a wrong offset!");
static_assert(offsetof(FFortUpdatedObjectiveStat, StatValue) == 0x000010, "Member 'FFortUpdatedObjectiveStat::StatValue' has a wrong offset!");

// ScriptStruct FortniteGame.FortPickupEntryData
// 0x0030 (0x0030 - 0x0000)
struct FFortPickupEntryData final
{
public:
	struct FInterpCurveFloat                      FloatCurve;                                        // 0x0000(0x0018)(HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGuid                                  PickupGuid;                                        // 0x0018(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         StartTime;                                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPickupEntryData) == 0x000008, "Wrong alignment on FFortPickupEntryData");
static_assert(sizeof(FFortPickupEntryData) == 0x000030, "Wrong size on FFortPickupEntryData");
static_assert(offsetof(FFortPickupEntryData, FloatCurve) == 0x000000, "Member 'FFortPickupEntryData::FloatCurve' has a wrong offset!");
static_assert(offsetof(FFortPickupEntryData, PickupGuid) == 0x000018, "Member 'FFortPickupEntryData::PickupGuid' has a wrong offset!");
static_assert(offsetof(FFortPickupEntryData, StartTime) == 0x000028, "Member 'FFortPickupEntryData::StartTime' has a wrong offset!");

// ScriptStruct FortniteGame.ActiveFortCamera
// 0x0020 (0x0020 - 0x0000)
struct FActiveFortCamera final
{
public:
	class UFortCameraMode*                        Camera;                                            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ViewTarget;                                        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionAlpha;                                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionUpdateRate;                              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendWeight;                                       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActiveFortCamera) == 0x000008, "Wrong alignment on FActiveFortCamera");
static_assert(sizeof(FActiveFortCamera) == 0x000020, "Wrong size on FActiveFortCamera");
static_assert(offsetof(FActiveFortCamera, Camera) == 0x000000, "Member 'FActiveFortCamera::Camera' has a wrong offset!");
static_assert(offsetof(FActiveFortCamera, ViewTarget) == 0x000008, "Member 'FActiveFortCamera::ViewTarget' has a wrong offset!");
static_assert(offsetof(FActiveFortCamera, TransitionAlpha) == 0x000010, "Member 'FActiveFortCamera::TransitionAlpha' has a wrong offset!");
static_assert(offsetof(FActiveFortCamera, TransitionUpdateRate) == 0x000014, "Member 'FActiveFortCamera::TransitionUpdateRate' has a wrong offset!");
static_assert(offsetof(FActiveFortCamera, BlendWeight) == 0x000018, "Member 'FActiveFortCamera::BlendWeight' has a wrong offset!");

// ScriptStruct FortniteGame.AIDirectorDebugInfo
// 0x0028 (0x0028 - 0x0000)
struct FAIDirectorDebugInfo final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 DebugGraphData;                                    // 0x0008(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x10];                                      // 0x0018(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIDirectorDebugInfo) == 0x000008, "Wrong alignment on FAIDirectorDebugInfo");
static_assert(sizeof(FAIDirectorDebugInfo) == 0x000028, "Wrong size on FAIDirectorDebugInfo");
static_assert(offsetof(FAIDirectorDebugInfo, Timestamp) == 0x000000, "Member 'FAIDirectorDebugInfo::Timestamp' has a wrong offset!");
static_assert(offsetof(FAIDirectorDebugInfo, DebugGraphData) == 0x000008, "Member 'FAIDirectorDebugInfo::DebugGraphData' has a wrong offset!");

// ScriptStruct FortniteGame.LastBuildableState
// 0x0010 (0x0010 - 0x0000)
struct FLastBuildableState final
{
public:
	class UBuildingEditModeMetadata*              LastBuildableMetaData;                             // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LastBuildableMirrored;                             // 0x0008(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LastBuildableRotationIterations;                   // 0x000C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLastBuildableState) == 0x000008, "Wrong alignment on FLastBuildableState");
static_assert(sizeof(FLastBuildableState) == 0x000010, "Wrong size on FLastBuildableState");
static_assert(offsetof(FLastBuildableState, LastBuildableMetaData) == 0x000000, "Member 'FLastBuildableState::LastBuildableMetaData' has a wrong offset!");
static_assert(offsetof(FLastBuildableState, LastBuildableMirrored) == 0x000008, "Member 'FLastBuildableState::LastBuildableMirrored' has a wrong offset!");
static_assert(offsetof(FLastBuildableState, LastBuildableRotationIterations) == 0x00000C, "Member 'FLastBuildableState::LastBuildableRotationIterations' has a wrong offset!");

// ScriptStruct FortniteGame.FortWindImpulseCylinderDelta
// 0x0090 (0x0090 - 0x0000)
struct FFortWindImpulseCylinderDelta final
{
public:
	struct FVector                                DeltaCenter;                                       // 0x0000(0x000C)(Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bInitialized;                                      // 0x000C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bRippleOutward;                                    // 0x000D(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SectionWidth;                                      // 0x0010(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         InnerSectionRadius;                                // 0x0014(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         OuterSectionRadius;                                // 0x0018(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaximumRadius;                                     // 0x001C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DesiredOverallBlendTime;                           // 0x0020(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SectionBlendTime;                                  // 0x0024(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SectionCurrentBlendTime;                           // 0x0028(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PreviousMagnitude;                                 // 0x002C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SectionCurrentMagnitude;                           // 0x0030(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DesiredMagnitude;                                  // 0x0034(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FBox                                   OuterWorldBounds;                                  // 0x0038(0x001C)(Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FBox                                   InnerWorldBounds;                                  // 0x0054(0x001C)(Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FBox                                   WindImpulseBounds;                                 // 0x0070(0x001C)(Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FFortWindImpulseHandle                 WindImpulseHandleToModify;                         // 0x008C(0x0004)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortWindImpulseCylinderDelta) == 0x000004, "Wrong alignment on FFortWindImpulseCylinderDelta");
static_assert(sizeof(FFortWindImpulseCylinderDelta) == 0x000090, "Wrong size on FFortWindImpulseCylinderDelta");
static_assert(offsetof(FFortWindImpulseCylinderDelta, DeltaCenter) == 0x000000, "Member 'FFortWindImpulseCylinderDelta::DeltaCenter' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderDelta, bInitialized) == 0x00000C, "Member 'FFortWindImpulseCylinderDelta::bInitialized' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderDelta, bRippleOutward) == 0x00000D, "Member 'FFortWindImpulseCylinderDelta::bRippleOutward' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderDelta, SectionWidth) == 0x000010, "Member 'FFortWindImpulseCylinderDelta::SectionWidth' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderDelta, InnerSectionRadius) == 0x000014, "Member 'FFortWindImpulseCylinderDelta::InnerSectionRadius' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderDelta, OuterSectionRadius) == 0x000018, "Member 'FFortWindImpulseCylinderDelta::OuterSectionRadius' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderDelta, MaximumRadius) == 0x00001C, "Member 'FFortWindImpulseCylinderDelta::MaximumRadius' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderDelta, DesiredOverallBlendTime) == 0x000020, "Member 'FFortWindImpulseCylinderDelta::DesiredOverallBlendTime' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderDelta, SectionBlendTime) == 0x000024, "Member 'FFortWindImpulseCylinderDelta::SectionBlendTime' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderDelta, SectionCurrentBlendTime) == 0x000028, "Member 'FFortWindImpulseCylinderDelta::SectionCurrentBlendTime' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderDelta, PreviousMagnitude) == 0x00002C, "Member 'FFortWindImpulseCylinderDelta::PreviousMagnitude' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderDelta, SectionCurrentMagnitude) == 0x000030, "Member 'FFortWindImpulseCylinderDelta::SectionCurrentMagnitude' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderDelta, DesiredMagnitude) == 0x000034, "Member 'FFortWindImpulseCylinderDelta::DesiredMagnitude' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderDelta, OuterWorldBounds) == 0x000038, "Member 'FFortWindImpulseCylinderDelta::OuterWorldBounds' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderDelta, InnerWorldBounds) == 0x000054, "Member 'FFortWindImpulseCylinderDelta::InnerWorldBounds' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderDelta, WindImpulseBounds) == 0x000070, "Member 'FFortWindImpulseCylinderDelta::WindImpulseBounds' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderDelta, WindImpulseHandleToModify) == 0x00008C, "Member 'FFortWindImpulseCylinderDelta::WindImpulseHandleToModify' has a wrong offset!");

// ScriptStruct FortniteGame.CraftingQueueInfo
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FCraftingQueueInfo final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCraftingQueueInfo) == 0x000004, "Wrong alignment on FCraftingQueueInfo");
static_assert(sizeof(FCraftingQueueInfo) == 0x000008, "Wrong size on FCraftingQueueInfo");

// ScriptStruct FortniteGame.FortInputActionKeyAlias
// 0x0028 (0x0028 - 0x0000)
struct FFortInputActionKeyAlias final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   KeyAlias;                                          // 0x0008(0x0018)(Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortInputActionType                          InputActionType;                                   // 0x0020(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortInputActionKeyAlias) == 0x000008, "Wrong alignment on FFortInputActionKeyAlias");
static_assert(sizeof(FFortInputActionKeyAlias) == 0x000028, "Wrong size on FFortInputActionKeyAlias");
static_assert(offsetof(FFortInputActionKeyAlias, ActionName) == 0x000000, "Member 'FFortInputActionKeyAlias::ActionName' has a wrong offset!");
static_assert(offsetof(FFortInputActionKeyAlias, KeyAlias) == 0x000008, "Member 'FFortInputActionKeyAlias::KeyAlias' has a wrong offset!");
static_assert(offsetof(FFortInputActionKeyAlias, InputActionType) == 0x000020, "Member 'FFortInputActionKeyAlias::InputActionType' has a wrong offset!");

// ScriptStruct FortniteGame.MorphValuePair
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FMorphValuePair final
{
public:
	class FName                                   MorphName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MorphValue;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMorphValuePair) == 0x000008, "Wrong alignment on FMorphValuePair");
static_assert(sizeof(FMorphValuePair) == 0x000010, "Wrong size on FMorphValuePair");
static_assert(offsetof(FMorphValuePair, MorphName) == 0x000000, "Member 'FMorphValuePair::MorphName' has a wrong offset!");
static_assert(offsetof(FMorphValuePair, MorphValue) == 0x000008, "Member 'FMorphValuePair::MorphValue' has a wrong offset!");

// ScriptStruct FortniteGame.FortCharacterPartsRepMontageInfo
// 0x0020 (0x0020 - 0x0000)
struct FFortCharacterPartsRepMontageInfo final
{
public:
	TArray<struct FFortCharacterPartMontageInfo>  CharPartMontages;                                  // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UAnimMontage*                           PawnMontage;                                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayBit;                                          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortCharacterPartsRepMontageInfo) == 0x000008, "Wrong alignment on FFortCharacterPartsRepMontageInfo");
static_assert(sizeof(FFortCharacterPartsRepMontageInfo) == 0x000020, "Wrong size on FFortCharacterPartsRepMontageInfo");
static_assert(offsetof(FFortCharacterPartsRepMontageInfo, CharPartMontages) == 0x000000, "Member 'FFortCharacterPartsRepMontageInfo::CharPartMontages' has a wrong offset!");
static_assert(offsetof(FFortCharacterPartsRepMontageInfo, PawnMontage) == 0x000010, "Member 'FFortCharacterPartsRepMontageInfo::PawnMontage' has a wrong offset!");
static_assert(offsetof(FFortCharacterPartsRepMontageInfo, bPlayBit) == 0x000018, "Member 'FFortCharacterPartsRepMontageInfo::bPlayBit' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlayerPawnStats
// 0x0020 (0x00B0 - 0x0090)
struct FFortPlayerPawnStats final : public FFortPawnStats
{
public:
	float                                         MaxJumpTime;                                       // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxStamina;                                        // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StaminaRegenRate;                                  // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StaminaRegenDelay;                                 // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SprintingStaminaExpenditureRate;                   // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   HoverboardFallingDamageTableRow;                   // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortPlayerPawnStats) == 0x000008, "Wrong alignment on FFortPlayerPawnStats");
static_assert(sizeof(FFortPlayerPawnStats) == 0x0000B0, "Wrong size on FFortPlayerPawnStats");
static_assert(offsetof(FFortPlayerPawnStats, MaxJumpTime) == 0x000090, "Member 'FFortPlayerPawnStats::MaxJumpTime' has a wrong offset!");
static_assert(offsetof(FFortPlayerPawnStats, MaxStamina) == 0x000094, "Member 'FFortPlayerPawnStats::MaxStamina' has a wrong offset!");
static_assert(offsetof(FFortPlayerPawnStats, StaminaRegenRate) == 0x000098, "Member 'FFortPlayerPawnStats::StaminaRegenRate' has a wrong offset!");
static_assert(offsetof(FFortPlayerPawnStats, StaminaRegenDelay) == 0x00009C, "Member 'FFortPlayerPawnStats::StaminaRegenDelay' has a wrong offset!");
static_assert(offsetof(FFortPlayerPawnStats, SprintingStaminaExpenditureRate) == 0x0000A0, "Member 'FFortPlayerPawnStats::SprintingStaminaExpenditureRate' has a wrong offset!");
static_assert(offsetof(FFortPlayerPawnStats, HoverboardFallingDamageTableRow) == 0x0000A8, "Member 'FFortPlayerPawnStats::HoverboardFallingDamageTableRow' has a wrong offset!");

// ScriptStruct FortniteGame.PlayerBannerInfo
// 0x0028 (0x0028 - 0x0000)
struct FPlayerBannerInfo final
{
public:
	class FString                                 IconId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ColorId;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerBannerInfo) == 0x000008, "Wrong alignment on FPlayerBannerInfo");
static_assert(sizeof(FPlayerBannerInfo) == 0x000028, "Wrong size on FPlayerBannerInfo");
static_assert(offsetof(FPlayerBannerInfo, IconId) == 0x000000, "Member 'FPlayerBannerInfo::IconId' has a wrong offset!");
static_assert(offsetof(FPlayerBannerInfo, ColorId) == 0x000010, "Member 'FPlayerBannerInfo::ColorId' has a wrong offset!");
static_assert(offsetof(FPlayerBannerInfo, Level) == 0x000020, "Member 'FPlayerBannerInfo::Level' has a wrong offset!");

// ScriptStruct FortniteGame.DeathInfo
// 0x0010 (0x0010 - 0x0000)
struct FDeathInfo final
{
public:
	class AFortPlayerStateAthena*                 FinisherOrDowner;                                  // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDBNO;                                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDeathCause                                   DeathCause;                                        // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDeathInfo) == 0x000008, "Wrong alignment on FDeathInfo");
static_assert(sizeof(FDeathInfo) == 0x000010, "Wrong size on FDeathInfo");
static_assert(offsetof(FDeathInfo, FinisherOrDowner) == 0x000000, "Member 'FDeathInfo::FinisherOrDowner' has a wrong offset!");
static_assert(offsetof(FDeathInfo, bDBNO) == 0x000008, "Member 'FDeathInfo::bDBNO' has a wrong offset!");
static_assert(offsetof(FDeathInfo, DeathCause) == 0x000009, "Member 'FDeathInfo::DeathCause' has a wrong offset!");

// ScriptStruct FortniteGame.TeamStrategicBuildingHandle
// 0x0004 (0x0004 - 0x0000)
struct FTeamStrategicBuildingHandle final
{
public:
	int32                                         Handle;                                            // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTeamStrategicBuildingHandle) == 0x000004, "Wrong alignment on FTeamStrategicBuildingHandle");
static_assert(sizeof(FTeamStrategicBuildingHandle) == 0x000004, "Wrong size on FTeamStrategicBuildingHandle");
static_assert(offsetof(FTeamStrategicBuildingHandle, Handle) == 0x000000, "Member 'FTeamStrategicBuildingHandle::Handle' has a wrong offset!");

// ScriptStruct FortniteGame.FortPointOnCurveRange
// 0x0008 (0x0008 - 0x0000)
struct FFortPointOnCurveRange final
{
public:
	float                                         MinPercentage;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPercentage;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPointOnCurveRange) == 0x000004, "Wrong alignment on FFortPointOnCurveRange");
static_assert(sizeof(FFortPointOnCurveRange) == 0x000008, "Wrong size on FFortPointOnCurveRange");
static_assert(offsetof(FFortPointOnCurveRange, MinPercentage) == 0x000000, "Member 'FFortPointOnCurveRange::MinPercentage' has a wrong offset!");
static_assert(offsetof(FFortPointOnCurveRange, MaxPercentage) == 0x000004, "Member 'FFortPointOnCurveRange::MaxPercentage' has a wrong offset!");

// ScriptStruct FortniteGame.FortPointsOnCurve
// 0x0038 (0x0038 - 0x0000)
struct FFortPointsOnCurve final
{
public:
	TSoftObjectPtr<class UCurveFloat>             Curve;                                             // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortPointOnCurveRange>         RangesForPointsOnCurve;                            // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPointsOnCurve) == 0x000008, "Wrong alignment on FFortPointsOnCurve");
static_assert(sizeof(FFortPointsOnCurve) == 0x000038, "Wrong size on FFortPointsOnCurve");
static_assert(offsetof(FFortPointsOnCurve, Curve) == 0x000000, "Member 'FFortPointsOnCurve::Curve' has a wrong offset!");
static_assert(offsetof(FFortPointsOnCurve, RangesForPointsOnCurve) == 0x000028, "Member 'FFortPointsOnCurve::RangesForPointsOnCurve' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayTagQueryPerDifficulty
// 0x0060 (0x0060 - 0x0000)
struct FFortGameplayTagQueryPerDifficulty final
{
public:
	struct FDataTableRowHandle                    DifficultyInfo;                                    // 0x0000(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      TagQueryToMatch;                                   // 0x0010(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         Difficulty;                                        // 0x0058(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortGameplayTagQueryPerDifficulty) == 0x000008, "Wrong alignment on FFortGameplayTagQueryPerDifficulty");
static_assert(sizeof(FFortGameplayTagQueryPerDifficulty) == 0x000060, "Wrong size on FFortGameplayTagQueryPerDifficulty");
static_assert(offsetof(FFortGameplayTagQueryPerDifficulty, DifficultyInfo) == 0x000000, "Member 'FFortGameplayTagQueryPerDifficulty::DifficultyInfo' has a wrong offset!");
static_assert(offsetof(FFortGameplayTagQueryPerDifficulty, TagQueryToMatch) == 0x000010, "Member 'FFortGameplayTagQueryPerDifficulty::TagQueryToMatch' has a wrong offset!");
static_assert(offsetof(FFortGameplayTagQueryPerDifficulty, Difficulty) == 0x000058, "Member 'FFortGameplayTagQueryPerDifficulty::Difficulty' has a wrong offset!");

// ScriptStruct FortniteGame.GoalDistanceData
// 0x0090 (0x0090 - 0x0000)
struct FGoalDistanceData final
{
public:
	bool                                          bIgnoreScreeningDistance;                          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAIDataProviderFloatValue              ScreeningTestMaxDistance;                          // 0x0008(0x0030)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UCurveFloat>             TestScoreCurve;                                    // 0x0038(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIDataProviderFloatValue              CurveDistanceScale;                                // 0x0060(0x0030)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGoalDistanceData) == 0x000008, "Wrong alignment on FGoalDistanceData");
static_assert(sizeof(FGoalDistanceData) == 0x000090, "Wrong size on FGoalDistanceData");
static_assert(offsetof(FGoalDistanceData, bIgnoreScreeningDistance) == 0x000000, "Member 'FGoalDistanceData::bIgnoreScreeningDistance' has a wrong offset!");
static_assert(offsetof(FGoalDistanceData, ScreeningTestMaxDistance) == 0x000008, "Member 'FGoalDistanceData::ScreeningTestMaxDistance' has a wrong offset!");
static_assert(offsetof(FGoalDistanceData, TestScoreCurve) == 0x000038, "Member 'FGoalDistanceData::TestScoreCurve' has a wrong offset!");
static_assert(offsetof(FGoalDistanceData, CurveDistanceScale) == 0x000060, "Member 'FGoalDistanceData::CurveDistanceScale' has a wrong offset!");

// ScriptStruct FortniteGame.FortQuestAchievementTableRow
// 0x0010 (0x0018 - 0x0008)
struct FFortQuestAchievementTableRow final : public FTableRowBase
{
public:
	EFortQuestState                               QuestState;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         XboxAchievementID;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PS4TrophyID;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortQuestAchievementTableRow) == 0x000008, "Wrong alignment on FFortQuestAchievementTableRow");
static_assert(sizeof(FFortQuestAchievementTableRow) == 0x000018, "Wrong size on FFortQuestAchievementTableRow");
static_assert(offsetof(FFortQuestAchievementTableRow, QuestState) == 0x000008, "Member 'FFortQuestAchievementTableRow::QuestState' has a wrong offset!");
static_assert(offsetof(FFortQuestAchievementTableRow, XboxAchievementID) == 0x00000C, "Member 'FFortQuestAchievementTableRow::XboxAchievementID' has a wrong offset!");
static_assert(offsetof(FFortQuestAchievementTableRow, PS4TrophyID) == 0x000010, "Member 'FFortQuestAchievementTableRow::PS4TrophyID' has a wrong offset!");

// ScriptStruct FortniteGame.FortMcpQuestObjectiveInfo
// 0x0110 (0x0110 - 0x0000)
struct FFortMcpQuestObjectiveInfo final
{
public:
	class FName                                   BackendName;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    ObjectiveStatHandle;                               // 0x0008(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FDataTableRowHandle>            AlternativeStatHandles;                            // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	EFortQuestObjectiveItemEvent                  ItemEvent;                                         // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UFortItemDefinition>     ItemReference;                                     // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemTemplateIdOverride;                            // 0x0058(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LinkSquadID;                                       // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LinkSquadIndex;                                    // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortInventoryFilter                          LinkVaultTab;                                      // 0x0074(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFrontendInventoryFilter                  LinkToItemManagement;                              // 0x0075(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_76[0x2];                                       // 0x0076(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Description;                                       // 0x0078(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   HudShortDescription;                               // 0x0090(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              HudIcon;                                           // 0x00A8(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stage;                                             // 0x00D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHidden;                                           // 0x00D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequirePrimaryMissionCompletion;                  // 0x00D9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanProgressInZone;                                // 0x00DA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisplayDynamicAnnouncementUpdate;                 // 0x00DB(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisplayDynamicStatusUpdate;                       // 0x00DC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DynamicUpdateCompletionDelay;                      // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   ScriptedAction;                                    // 0x00E8(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMcpQuestObjectiveInfo) == 0x000008, "Wrong alignment on FFortMcpQuestObjectiveInfo");
static_assert(sizeof(FFortMcpQuestObjectiveInfo) == 0x000110, "Wrong size on FFortMcpQuestObjectiveInfo");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, BackendName) == 0x000000, "Member 'FFortMcpQuestObjectiveInfo::BackendName' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, ObjectiveStatHandle) == 0x000008, "Member 'FFortMcpQuestObjectiveInfo::ObjectiveStatHandle' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, AlternativeStatHandles) == 0x000018, "Member 'FFortMcpQuestObjectiveInfo::AlternativeStatHandles' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, ItemEvent) == 0x000028, "Member 'FFortMcpQuestObjectiveInfo::ItemEvent' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, ItemReference) == 0x000030, "Member 'FFortMcpQuestObjectiveInfo::ItemReference' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, ItemTemplateIdOverride) == 0x000058, "Member 'FFortMcpQuestObjectiveInfo::ItemTemplateIdOverride' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, LinkSquadID) == 0x000068, "Member 'FFortMcpQuestObjectiveInfo::LinkSquadID' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, LinkSquadIndex) == 0x000070, "Member 'FFortMcpQuestObjectiveInfo::LinkSquadIndex' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, LinkVaultTab) == 0x000074, "Member 'FFortMcpQuestObjectiveInfo::LinkVaultTab' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, LinkToItemManagement) == 0x000075, "Member 'FFortMcpQuestObjectiveInfo::LinkToItemManagement' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, Description) == 0x000078, "Member 'FFortMcpQuestObjectiveInfo::Description' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, HudShortDescription) == 0x000090, "Member 'FFortMcpQuestObjectiveInfo::HudShortDescription' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, HudIcon) == 0x0000A8, "Member 'FFortMcpQuestObjectiveInfo::HudIcon' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, Count) == 0x0000D0, "Member 'FFortMcpQuestObjectiveInfo::Count' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, Stage) == 0x0000D4, "Member 'FFortMcpQuestObjectiveInfo::Stage' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, bHidden) == 0x0000D8, "Member 'FFortMcpQuestObjectiveInfo::bHidden' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, bRequirePrimaryMissionCompletion) == 0x0000D9, "Member 'FFortMcpQuestObjectiveInfo::bRequirePrimaryMissionCompletion' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, bCanProgressInZone) == 0x0000DA, "Member 'FFortMcpQuestObjectiveInfo::bCanProgressInZone' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, bDisplayDynamicAnnouncementUpdate) == 0x0000DB, "Member 'FFortMcpQuestObjectiveInfo::bDisplayDynamicAnnouncementUpdate' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, bDisplayDynamicStatusUpdate) == 0x0000DC, "Member 'FFortMcpQuestObjectiveInfo::bDisplayDynamicStatusUpdate' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, DynamicUpdateCompletionDelay) == 0x0000E0, "Member 'FFortMcpQuestObjectiveInfo::DynamicUpdateCompletionDelay' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, ScriptedAction) == 0x0000E8, "Member 'FFortMcpQuestObjectiveInfo::ScriptedAction' has a wrong offset!");

// ScriptStruct FortniteGame.FortMcpQuestRewardInfo
// 0x0010 (0x0010 - 0x0000)
struct FFortMcpQuestRewardInfo final
{
public:
	TArray<struct FFortItemQuantityPair>          Rewards;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMcpQuestRewardInfo) == 0x000008, "Wrong alignment on FFortMcpQuestRewardInfo");
static_assert(sizeof(FFortMcpQuestRewardInfo) == 0x000010, "Wrong size on FFortMcpQuestRewardInfo");
static_assert(offsetof(FFortMcpQuestRewardInfo, Rewards) == 0x000000, "Member 'FFortMcpQuestRewardInfo::Rewards' has a wrong offset!");

// ScriptStruct FortniteGame.FortNamedWeightRow
// 0x0050 (0x0058 - 0x0008)
struct FFortNamedWeightRow final : public FTableRowBase
{
public:
	TMap<class FString, float>                    NamedWeightMap;                                    // 0x0008(0x0050)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortNamedWeightRow) == 0x000008, "Wrong alignment on FFortNamedWeightRow");
static_assert(sizeof(FFortNamedWeightRow) == 0x000058, "Wrong size on FFortNamedWeightRow");
static_assert(offsetof(FFortNamedWeightRow, NamedWeightMap) == 0x000008, "Member 'FFortNamedWeightRow::NamedWeightMap' has a wrong offset!");

// ScriptStruct FortniteGame.FortQuestManagerAttributes
// 0x0010 (0x0010 - 0x0000)
struct FFortQuestManagerAttributes final
{
public:
	struct FDateTime                              DailyLoginInterval;                                // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DailyQuestRerolls;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortQuestManagerAttributes) == 0x000008, "Wrong alignment on FFortQuestManagerAttributes");
static_assert(sizeof(FFortQuestManagerAttributes) == 0x000010, "Wrong size on FFortQuestManagerAttributes");
static_assert(offsetof(FFortQuestManagerAttributes, DailyLoginInterval) == 0x000000, "Member 'FFortQuestManagerAttributes::DailyLoginInterval' has a wrong offset!");
static_assert(offsetof(FFortQuestManagerAttributes, DailyQuestRerolls) == 0x000008, "Member 'FFortQuestManagerAttributes::DailyQuestRerolls' has a wrong offset!");

// ScriptStruct FortniteGame.FortQuestEarnedBadgeData
// 0x0018 (0x0018 - 0x0000)
struct FFortQuestEarnedBadgeData final
{
public:
	class FString                                 TemplateId;                                        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortQuestEarnedBadgeData) == 0x000008, "Wrong alignment on FFortQuestEarnedBadgeData");
static_assert(sizeof(FFortQuestEarnedBadgeData) == 0x000018, "Wrong size on FFortQuestEarnedBadgeData");
static_assert(offsetof(FFortQuestEarnedBadgeData, TemplateId) == 0x000000, "Member 'FFortQuestEarnedBadgeData::TemplateId' has a wrong offset!");
static_assert(offsetof(FFortQuestEarnedBadgeData, Count) == 0x000010, "Member 'FFortQuestEarnedBadgeData::Count' has a wrong offset!");

// ScriptStruct FortniteGame.FortRarityItemData
// 0x0080 (0x0080 - 0x0000)
struct FFortRarityItemData final
{
public:
	class FText                                   Name;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color1;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color2;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color3;                                            // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color4;                                            // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color5;                                            // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Falloff;                                           // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Brightness;                                        // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Roughness;                                         // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Glow;                                              // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortRarityItemData) == 0x000008, "Wrong alignment on FFortRarityItemData");
static_assert(sizeof(FFortRarityItemData) == 0x000080, "Wrong size on FFortRarityItemData");
static_assert(offsetof(FFortRarityItemData, Name) == 0x000000, "Member 'FFortRarityItemData::Name' has a wrong offset!");
static_assert(offsetof(FFortRarityItemData, Color1) == 0x000018, "Member 'FFortRarityItemData::Color1' has a wrong offset!");
static_assert(offsetof(FFortRarityItemData, Color2) == 0x000028, "Member 'FFortRarityItemData::Color2' has a wrong offset!");
static_assert(offsetof(FFortRarityItemData, Color3) == 0x000038, "Member 'FFortRarityItemData::Color3' has a wrong offset!");
static_assert(offsetof(FFortRarityItemData, Color4) == 0x000048, "Member 'FFortRarityItemData::Color4' has a wrong offset!");
static_assert(offsetof(FFortRarityItemData, Color5) == 0x000058, "Member 'FFortRarityItemData::Color5' has a wrong offset!");
static_assert(offsetof(FFortRarityItemData, Radius) == 0x000068, "Member 'FFortRarityItemData::Radius' has a wrong offset!");
static_assert(offsetof(FFortRarityItemData, Falloff) == 0x00006C, "Member 'FFortRarityItemData::Falloff' has a wrong offset!");
static_assert(offsetof(FFortRarityItemData, Brightness) == 0x000070, "Member 'FFortRarityItemData::Brightness' has a wrong offset!");
static_assert(offsetof(FFortRarityItemData, Roughness) == 0x000074, "Member 'FFortRarityItemData::Roughness' has a wrong offset!");
static_assert(offsetof(FFortRarityItemData, Glow) == 0x000078, "Member 'FFortRarityItemData::Glow' has a wrong offset!");

// ScriptStruct FortniteGame.FortUserCloudRequestPayload
// 0x0058 (0x0058 - 0x0000)
struct FFortUserCloudRequestPayload final
{
public:
	struct FFortUserCloudRequestHandle            RequestHandle;                                     // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       UserNetID;                                         // 0x0008(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortUserCloudRequestType                     RequestType;                                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 DataBuffer;                                        // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortUserCloudRequestPayload) == 0x000008, "Wrong alignment on FFortUserCloudRequestPayload");
static_assert(sizeof(FFortUserCloudRequestPayload) == 0x000058, "Wrong size on FFortUserCloudRequestPayload");
static_assert(offsetof(FFortUserCloudRequestPayload, RequestHandle) == 0x000000, "Member 'FFortUserCloudRequestPayload::RequestHandle' has a wrong offset!");
static_assert(offsetof(FFortUserCloudRequestPayload, UserNetID) == 0x000008, "Member 'FFortUserCloudRequestPayload::UserNetID' has a wrong offset!");
static_assert(offsetof(FFortUserCloudRequestPayload, Filename) == 0x000030, "Member 'FFortUserCloudRequestPayload::Filename' has a wrong offset!");
static_assert(offsetof(FFortUserCloudRequestPayload, RequestType) == 0x000040, "Member 'FFortUserCloudRequestPayload::RequestType' has a wrong offset!");
static_assert(offsetof(FFortUserCloudRequestPayload, DataBuffer) == 0x000048, "Member 'FFortUserCloudRequestPayload::DataBuffer' has a wrong offset!");

// ScriptStruct FortniteGame.ReflectedEngineVersion
// 0x0020 (0x0020 - 0x0000)
struct FReflectedEngineVersion final
{
public:
	int32                                         Major;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minor;                                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Patch;                                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Changelist;                                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Branch;                                            // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReflectedEngineVersion) == 0x000008, "Wrong alignment on FReflectedEngineVersion");
static_assert(sizeof(FReflectedEngineVersion) == 0x000020, "Wrong size on FReflectedEngineVersion");
static_assert(offsetof(FReflectedEngineVersion, Major) == 0x000000, "Member 'FReflectedEngineVersion::Major' has a wrong offset!");
static_assert(offsetof(FReflectedEngineVersion, Minor) == 0x000004, "Member 'FReflectedEngineVersion::Minor' has a wrong offset!");
static_assert(offsetof(FReflectedEngineVersion, Patch) == 0x000008, "Member 'FReflectedEngineVersion::Patch' has a wrong offset!");
static_assert(offsetof(FReflectedEngineVersion, Changelist) == 0x00000C, "Member 'FReflectedEngineVersion::Changelist' has a wrong offset!");
static_assert(offsetof(FReflectedEngineVersion, Branch) == 0x000010, "Member 'FReflectedEngineVersion::Branch' has a wrong offset!");

// ScriptStruct FortniteGame.FortRecordVersion
// 0x0040 (0x0040 - 0x0000)
struct FFortRecordVersion final
{
public:
	int32                                         DataVersion;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PackageFileVersion;                                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FReflectedEngineVersion                EngineVersion;                                     // 0x0008(0x0020)(NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortRecordVersion) == 0x000008, "Wrong alignment on FFortRecordVersion");
static_assert(sizeof(FFortRecordVersion) == 0x000040, "Wrong size on FFortRecordVersion");
static_assert(offsetof(FFortRecordVersion, DataVersion) == 0x000000, "Member 'FFortRecordVersion::DataVersion' has a wrong offset!");
static_assert(offsetof(FFortRecordVersion, PackageFileVersion) == 0x000004, "Member 'FFortRecordVersion::PackageFileVersion' has a wrong offset!");
static_assert(offsetof(FFortRecordVersion, EngineVersion) == 0x000008, "Member 'FFortRecordVersion::EngineVersion' has a wrong offset!");

// ScriptStruct FortniteGame.FortSafeZoneDefinition
// 0x0160 (0x0160 - 0x0000)
struct FFortSafeZoneDefinition final
{
public:
	struct FScalableFloat                         Radius;                                            // 0x0000(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         RejectRadius;                                      // 0x0028(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         WaitTime;                                          // 0x0050(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         ShrinkTime;                                        // 0x0078(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         FiftyFiftyWaitTimePlayerRatioScale;                // 0x00A0(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         FiftyFiftyShrinkTimePlayerRatioScale;              // 0x00C8(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         SupplyDropMinCount;                                // 0x00F0(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         SupplyDropMaxCount;                                // 0x0118(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_140[0x20];                                     // 0x0140(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortSafeZoneDefinition) == 0x000008, "Wrong alignment on FFortSafeZoneDefinition");
static_assert(sizeof(FFortSafeZoneDefinition) == 0x000160, "Wrong size on FFortSafeZoneDefinition");
static_assert(offsetof(FFortSafeZoneDefinition, Radius) == 0x000000, "Member 'FFortSafeZoneDefinition::Radius' has a wrong offset!");
static_assert(offsetof(FFortSafeZoneDefinition, RejectRadius) == 0x000028, "Member 'FFortSafeZoneDefinition::RejectRadius' has a wrong offset!");
static_assert(offsetof(FFortSafeZoneDefinition, WaitTime) == 0x000050, "Member 'FFortSafeZoneDefinition::WaitTime' has a wrong offset!");
static_assert(offsetof(FFortSafeZoneDefinition, ShrinkTime) == 0x000078, "Member 'FFortSafeZoneDefinition::ShrinkTime' has a wrong offset!");
static_assert(offsetof(FFortSafeZoneDefinition, FiftyFiftyWaitTimePlayerRatioScale) == 0x0000A0, "Member 'FFortSafeZoneDefinition::FiftyFiftyWaitTimePlayerRatioScale' has a wrong offset!");
static_assert(offsetof(FFortSafeZoneDefinition, FiftyFiftyShrinkTimePlayerRatioScale) == 0x0000C8, "Member 'FFortSafeZoneDefinition::FiftyFiftyShrinkTimePlayerRatioScale' has a wrong offset!");
static_assert(offsetof(FFortSafeZoneDefinition, SupplyDropMinCount) == 0x0000F0, "Member 'FFortSafeZoneDefinition::SupplyDropMinCount' has a wrong offset!");
static_assert(offsetof(FFortSafeZoneDefinition, SupplyDropMaxCount) == 0x000118, "Member 'FFortSafeZoneDefinition::SupplyDropMaxCount' has a wrong offset!");

// ScriptStruct FortniteGame.FortBuildingActorArray
// 0x0010 (0x0010 - 0x0000)
struct FFortBuildingActorArray final
{
public:
	TArray<struct FFortDestroyedActorRecord>      ActorRecords;                                      // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortBuildingActorArray) == 0x000008, "Wrong alignment on FFortBuildingActorArray");
static_assert(sizeof(FFortBuildingActorArray) == 0x000010, "Wrong size on FFortBuildingActorArray");
static_assert(offsetof(FFortBuildingActorArray, ActorRecords) == 0x000000, "Member 'FFortBuildingActorArray::ActorRecords' has a wrong offset!");

// ScriptStruct FortniteGame.FortQuestDrivenMission
// 0x0008 (0x0180 - 0x0178)
struct FFortQuestDrivenMission final : public FFortGlobalMission
{
public:
	class UFortQuestItemDefinition*               RequiredQuest;                                     // 0x0178(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortQuestDrivenMission) == 0x000008, "Wrong alignment on FFortQuestDrivenMission");
static_assert(sizeof(FFortQuestDrivenMission) == 0x000180, "Wrong size on FFortQuestDrivenMission");
static_assert(offsetof(FFortQuestDrivenMission, RequiredQuest) == 0x000178, "Member 'FFortQuestDrivenMission::RequiredQuest' has a wrong offset!");

// ScriptStruct FortniteGame.FortSocialItemBasicData
// 0x0004 (0x0004 - 0x0000)
struct FFortSocialItemBasicData final
{
public:
	int32                                         Rating;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortSocialItemBasicData) == 0x000004, "Wrong alignment on FFortSocialItemBasicData");
static_assert(sizeof(FFortSocialItemBasicData) == 0x000004, "Wrong size on FFortSocialItemBasicData");
static_assert(offsetof(FFortSocialItemBasicData, Rating) == 0x000000, "Member 'FFortSocialItemBasicData::Rating' has a wrong offset!");

// ScriptStruct FortniteGame.FortLinearSpline
// 0x0001 (0x0001 - 0x0000)
struct FFortLinearSpline final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortLinearSpline) == 0x000001, "Wrong alignment on FFortLinearSpline");
static_assert(sizeof(FFortLinearSpline) == 0x000001, "Wrong size on FFortLinearSpline");

// ScriptStruct FortniteGame.FortCatmullRomSpline
// 0x0010 (0x0020 - 0x0010)
struct FFortCatmullRomSpline final : public FFortSplineBase
{
public:
	TArray<struct FVector>                        ControlPoints;                                     // 0x0010(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortCatmullRomSpline) == 0x000008, "Wrong alignment on FFortCatmullRomSpline");
static_assert(sizeof(FFortCatmullRomSpline) == 0x000020, "Wrong size on FFortCatmullRomSpline");
static_assert(offsetof(FFortCatmullRomSpline, ControlPoints) == 0x000010, "Member 'FFortCatmullRomSpline::ControlPoints' has a wrong offset!");

// ScriptStruct FortniteGame.FortStatEvent
// 0x0050 (0x0050 - 0x0000)
struct FFortStatEvent final
{
public:
	class FName                                   StatEventName;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortEventRepeat                              RepeatType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           StatsToMonitor;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortEventConditional>          Conditions;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class AFortClientAnnouncement>    AnnouncementToDisplay;                             // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                NotificationParameter;                             // 0x0038(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStat*                                  AssociatedStat;                                    // 0x0040(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  FPC;                                               // 0x0048(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortStatEvent) == 0x000008, "Wrong alignment on FFortStatEvent");
static_assert(sizeof(FFortStatEvent) == 0x000050, "Wrong size on FFortStatEvent");
static_assert(offsetof(FFortStatEvent, StatEventName) == 0x000000, "Member 'FFortStatEvent::StatEventName' has a wrong offset!");
static_assert(offsetof(FFortStatEvent, RepeatType) == 0x000008, "Member 'FFortStatEvent::RepeatType' has a wrong offset!");
static_assert(offsetof(FFortStatEvent, StatsToMonitor) == 0x000010, "Member 'FFortStatEvent::StatsToMonitor' has a wrong offset!");
static_assert(offsetof(FFortStatEvent, Conditions) == 0x000020, "Member 'FFortStatEvent::Conditions' has a wrong offset!");
static_assert(offsetof(FFortStatEvent, AnnouncementToDisplay) == 0x000030, "Member 'FFortStatEvent::AnnouncementToDisplay' has a wrong offset!");
static_assert(offsetof(FFortStatEvent, NotificationParameter) == 0x000038, "Member 'FFortStatEvent::NotificationParameter' has a wrong offset!");
static_assert(offsetof(FFortStatEvent, AssociatedStat) == 0x000040, "Member 'FFortStatEvent::AssociatedStat' has a wrong offset!");
static_assert(offsetof(FFortStatEvent, FPC) == 0x000048, "Member 'FFortStatEvent::FPC' has a wrong offset!");

// ScriptStruct FortniteGame.FortStatEventSequence
// 0x0050 (0x0050 - 0x0000)
struct FFortStatEventSequence final
{
public:
	class FName                                   StatEventName;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortEventRepeat                              RepeatType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortStatEvent>                 EventSequence;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UStat*                                  AssociatedStat;                                    // 0x0020(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  FPC;                                               // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           StatsToMonitor;                                    // 0x0030(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FFortEventConditional>          Conditions;                                        // 0x0040(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortStatEventSequence) == 0x000008, "Wrong alignment on FFortStatEventSequence");
static_assert(sizeof(FFortStatEventSequence) == 0x000050, "Wrong size on FFortStatEventSequence");
static_assert(offsetof(FFortStatEventSequence, StatEventName) == 0x000000, "Member 'FFortStatEventSequence::StatEventName' has a wrong offset!");
static_assert(offsetof(FFortStatEventSequence, RepeatType) == 0x000008, "Member 'FFortStatEventSequence::RepeatType' has a wrong offset!");
static_assert(offsetof(FFortStatEventSequence, EventSequence) == 0x000010, "Member 'FFortStatEventSequence::EventSequence' has a wrong offset!");
static_assert(offsetof(FFortStatEventSequence, AssociatedStat) == 0x000020, "Member 'FFortStatEventSequence::AssociatedStat' has a wrong offset!");
static_assert(offsetof(FFortStatEventSequence, FPC) == 0x000028, "Member 'FFortStatEventSequence::FPC' has a wrong offset!");
static_assert(offsetof(FFortStatEventSequence, StatsToMonitor) == 0x000030, "Member 'FFortStatEventSequence::StatsToMonitor' has a wrong offset!");
static_assert(offsetof(FFortStatEventSequence, Conditions) == 0x000040, "Member 'FFortStatEventSequence::Conditions' has a wrong offset!");

// ScriptStruct FortniteGame.TransformableNavLinkClass
// 0x0020 (0x0020 - 0x0000)
struct FTransformableNavLinkClass final
{
public:
	struct FVector                                Translation;                                       // 0x0000(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavLinkDefinition>         NavigationLinksClass;                              // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTransformableNavLinkClass) == 0x000008, "Wrong alignment on FTransformableNavLinkClass");
static_assert(sizeof(FTransformableNavLinkClass) == 0x000020, "Wrong size on FTransformableNavLinkClass");
static_assert(offsetof(FTransformableNavLinkClass, Translation) == 0x000000, "Member 'FTransformableNavLinkClass::Translation' has a wrong offset!");
static_assert(offsetof(FTransformableNavLinkClass, Rotation) == 0x00000C, "Member 'FTransformableNavLinkClass::Rotation' has a wrong offset!");
static_assert(offsetof(FTransformableNavLinkClass, NavigationLinksClass) == 0x000018, "Member 'FTransformableNavLinkClass::NavigationLinksClass' has a wrong offset!");

// ScriptStruct FortniteGame.FortSurvivorNameData
// 0x0018 (0x0020 - 0x0008)
struct FFortSurvivorNameData final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortSurvivorNameData) == 0x000008, "Wrong alignment on FFortSurvivorNameData");
static_assert(sizeof(FFortSurvivorNameData) == 0x000020, "Wrong size on FFortSurvivorNameData");
static_assert(offsetof(FFortSurvivorNameData, Name) == 0x000008, "Member 'FFortSurvivorNameData::Name' has a wrong offset!");

// ScriptStruct FortniteGame.TeamSpottedActorInfo
// 0x0014 (0x0020 - 0x000C)
struct FTeamSpottedActorInfo final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerController*                  Spotter;                                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SpottedActor;                                      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTeamSpottedActorInfo) == 0x000008, "Wrong alignment on FTeamSpottedActorInfo");
static_assert(sizeof(FTeamSpottedActorInfo) == 0x000020, "Wrong size on FTeamSpottedActorInfo");
static_assert(offsetof(FTeamSpottedActorInfo, Spotter) == 0x000010, "Member 'FTeamSpottedActorInfo::Spotter' has a wrong offset!");
static_assert(offsetof(FTeamSpottedActorInfo, SpottedActor) == 0x000018, "Member 'FTeamSpottedActorInfo::SpottedActor' has a wrong offset!");

// ScriptStruct FortniteGame.TeamSpottedActorInfoArray
// 0x0018 (0x00C8 - 0x00B0)
struct FTeamSpottedActorInfoArray final : public FFastArraySerializer
{
public:
	TArray<struct FTeamSpottedActorInfo>          SpottedActorInfo;                                  // 0x00B0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class AFortTeamInfo*                          OwningTeam;                                        // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FTeamSpottedActorInfoArray) == 0x000008, "Wrong alignment on FTeamSpottedActorInfoArray");
static_assert(sizeof(FTeamSpottedActorInfoArray) == 0x0000C8, "Wrong size on FTeamSpottedActorInfoArray");
static_assert(offsetof(FTeamSpottedActorInfoArray, SpottedActorInfo) == 0x0000B0, "Member 'FTeamSpottedActorInfoArray::SpottedActorInfo' has a wrong offset!");
static_assert(offsetof(FTeamSpottedActorInfoArray, OwningTeam) == 0x0000C0, "Member 'FTeamSpottedActorInfoArray::OwningTeam' has a wrong offset!");

// ScriptStruct FortniteGame.TeamStrategicBuildingEntry
// 0x000C (0x0018 - 0x000C)
struct FTeamStrategicBuildingEntry final : public FFastArraySerializerItem
{
public:
	struct FTeamStrategicBuildingHandle           StrategicBuildingHandle;                           // 0x000C(0x0004)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	class AStrategicBuildingActor*                StrategicBuilding;                                 // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTeamStrategicBuildingEntry) == 0x000008, "Wrong alignment on FTeamStrategicBuildingEntry");
static_assert(sizeof(FTeamStrategicBuildingEntry) == 0x000018, "Wrong size on FTeamStrategicBuildingEntry");
static_assert(offsetof(FTeamStrategicBuildingEntry, StrategicBuildingHandle) == 0x00000C, "Member 'FTeamStrategicBuildingEntry::StrategicBuildingHandle' has a wrong offset!");
static_assert(offsetof(FTeamStrategicBuildingEntry, StrategicBuilding) == 0x000010, "Member 'FTeamStrategicBuildingEntry::StrategicBuilding' has a wrong offset!");

// ScriptStruct FortniteGame.TeamStrategicBuildingEntryArray
// 0x0010 (0x00C0 - 0x00B0)
struct FTeamStrategicBuildingEntryArray final : public FFastArraySerializer
{
public:
	TArray<struct FTeamStrategicBuildingEntry>    Items;                                             // 0x00B0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FTeamStrategicBuildingEntryArray) == 0x000008, "Wrong alignment on FTeamStrategicBuildingEntryArray");
static_assert(sizeof(FTeamStrategicBuildingEntryArray) == 0x0000C0, "Wrong size on FTeamStrategicBuildingEntryArray");
static_assert(offsetof(FTeamStrategicBuildingEntryArray, Items) == 0x0000B0, "Member 'FTeamStrategicBuildingEntryArray::Items' has a wrong offset!");

// ScriptStruct FortniteGame.PrivateTeamDataArray
// 0x0068 (0x0118 - 0x00B0)
struct FPrivateTeamDataArray final : public FFastArraySerializer
{
public:
	TArray<struct FPrivateTeamDataItem>           Items;                                             // 0x00B0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C0[0x58];                                      // 0x00C0(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPrivateTeamDataArray) == 0x000008, "Wrong alignment on FPrivateTeamDataArray");
static_assert(sizeof(FPrivateTeamDataArray) == 0x000118, "Wrong size on FPrivateTeamDataArray");
static_assert(offsetof(FPrivateTeamDataArray, Items) == 0x0000B0, "Member 'FPrivateTeamDataArray::Items' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionAlertAvailableData
// 0x0008 (0x0008 - 0x0000)
struct FFortMissionAlertAvailableData final
{
public:
	EFortMissionAlertCategory                     MissionAlertCategory;                              // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumMissionAlertsAvailable;                         // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionAlertAvailableData) == 0x000004, "Wrong alignment on FFortMissionAlertAvailableData");
static_assert(sizeof(FFortMissionAlertAvailableData) == 0x000008, "Wrong size on FFortMissionAlertAvailableData");
static_assert(offsetof(FFortMissionAlertAvailableData, MissionAlertCategory) == 0x000000, "Member 'FFortMissionAlertAvailableData::MissionAlertCategory' has a wrong offset!");
static_assert(offsetof(FFortMissionAlertAvailableData, NumMissionAlertsAvailable) == 0x000004, "Member 'FFortMissionAlertAvailableData::NumMissionAlertsAvailable' has a wrong offset!");

// ScriptStruct FortniteGame.FortTheaterMapMissionAlertData
// 0x0020 (0x0020 - 0x0000)
struct FFortTheaterMapMissionAlertData final
{
public:
	int32                                         NumMissionAlertsAvailable;                         // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortMissionAlertAvailableData> AvailabilityDataPerCategory;                       // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         MissionAlertChangeFrequency;                       // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortTheaterMapMissionAlertData) == 0x000008, "Wrong alignment on FFortTheaterMapMissionAlertData");
static_assert(sizeof(FFortTheaterMapMissionAlertData) == 0x000020, "Wrong size on FFortTheaterMapMissionAlertData");
static_assert(offsetof(FFortTheaterMapMissionAlertData, NumMissionAlertsAvailable) == 0x000000, "Member 'FFortTheaterMapMissionAlertData::NumMissionAlertsAvailable' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapMissionAlertData, AvailabilityDataPerCategory) == 0x000008, "Member 'FFortTheaterMapMissionAlertData::AvailabilityDataPerCategory' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapMissionAlertData, MissionAlertChangeFrequency) == 0x000018, "Member 'FFortTheaterMapMissionAlertData::MissionAlertChangeFrequency' has a wrong offset!");

// ScriptStruct FortniteGame.FortFoundQuestMissions
// 0x0048 (0x0048 - 0x0000)
struct FFortFoundQuestMissions final
{
public:
	class FString                                 TheaterId;                                         // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValidForAllPlayableMissions;                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortAvailableMissionData>      LinkedMissions;                                    // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortAvailableMissionData>      TagMatchingMissions;                               // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortAvailableMissionData>      FallbackMatchingMissions;                          // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortFoundQuestMissions) == 0x000008, "Wrong alignment on FFortFoundQuestMissions");
static_assert(sizeof(FFortFoundQuestMissions) == 0x000048, "Wrong size on FFortFoundQuestMissions");
static_assert(offsetof(FFortFoundQuestMissions, TheaterId) == 0x000000, "Member 'FFortFoundQuestMissions::TheaterId' has a wrong offset!");
static_assert(offsetof(FFortFoundQuestMissions, bIsValidForAllPlayableMissions) == 0x000010, "Member 'FFortFoundQuestMissions::bIsValidForAllPlayableMissions' has a wrong offset!");
static_assert(offsetof(FFortFoundQuestMissions, LinkedMissions) == 0x000018, "Member 'FFortFoundQuestMissions::LinkedMissions' has a wrong offset!");
static_assert(offsetof(FFortFoundQuestMissions, TagMatchingMissions) == 0x000028, "Member 'FFortFoundQuestMissions::TagMatchingMissions' has a wrong offset!");
static_assert(offsetof(FFortFoundQuestMissions, FallbackMatchingMissions) == 0x000038, "Member 'FFortFoundQuestMissions::FallbackMatchingMissions' has a wrong offset!");

// ScriptStruct FortniteGame.StormWindArray
// 0x0010 (0x00C0 - 0x00B0)
struct FStormWindArray final : public FFastArraySerializer
{
public:
	TArray<struct FStormWind>                     StormWinds;                                        // 0x00B0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStormWindArray) == 0x000008, "Wrong alignment on FStormWindArray");
static_assert(sizeof(FStormWindArray) == 0x0000C0, "Wrong size on FStormWindArray");
static_assert(offsetof(FStormWindArray, StormWinds) == 0x0000B0, "Member 'FStormWindArray::StormWinds' has a wrong offset!");

// ScriptStruct FortniteGame.ThreatLocationInfo
// 0x0054 (0x0060 - 0x000C)
struct FThreatLocationInfo final : public FFastArraySerializerItem
{
public:
	struct FVector                                CloudLocation;                                     // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   ThreatVolume;                                      // 0x0018(0x001C)(BlueprintVisible, BlueprintReadOnly, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortThreatVisualsManager*              ThreatVisualsManager;                              // 0x0038(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AThreatCloud>            CloudActor;                                        // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x1];                                       // 0x0048(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bThreatActivated;                                  // 0x0049(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortThreatDeactivationType                   DeactivationType;                                  // 0x004A(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B[0x15];                                      // 0x004B(0x0015)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FThreatLocationInfo) == 0x000008, "Wrong alignment on FThreatLocationInfo");
static_assert(sizeof(FThreatLocationInfo) == 0x000060, "Wrong size on FThreatLocationInfo");
static_assert(offsetof(FThreatLocationInfo, CloudLocation) == 0x00000C, "Member 'FThreatLocationInfo::CloudLocation' has a wrong offset!");
static_assert(offsetof(FThreatLocationInfo, ThreatVolume) == 0x000018, "Member 'FThreatLocationInfo::ThreatVolume' has a wrong offset!");
static_assert(offsetof(FThreatLocationInfo, ThreatVisualsManager) == 0x000038, "Member 'FThreatLocationInfo::ThreatVisualsManager' has a wrong offset!");
static_assert(offsetof(FThreatLocationInfo, CloudActor) == 0x000040, "Member 'FThreatLocationInfo::CloudActor' has a wrong offset!");
static_assert(offsetof(FThreatLocationInfo, bThreatActivated) == 0x000049, "Member 'FThreatLocationInfo::bThreatActivated' has a wrong offset!");
static_assert(offsetof(FThreatLocationInfo, DeactivationType) == 0x00004A, "Member 'FThreatLocationInfo::DeactivationType' has a wrong offset!");

// ScriptStruct FortniteGame.ThreatLocationArray
// 0x0010 (0x00C0 - 0x00B0)
struct FThreatLocationArray final : public FFastArraySerializer
{
public:
	TArray<struct FThreatLocationInfo>            Locations;                                         // 0x00B0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FThreatLocationArray) == 0x000008, "Wrong alignment on FThreatLocationArray");
static_assert(sizeof(FThreatLocationArray) == 0x0000C0, "Wrong size on FThreatLocationArray");
static_assert(offsetof(FThreatLocationArray, Locations) == 0x0000B0, "Member 'FThreatLocationArray::Locations' has a wrong offset!");

// ScriptStruct FortniteGame.ThreatGridIndex
// 0x0008 (0x0008 - 0x0000)
struct FThreatGridIndex final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FThreatGridIndex) == 0x000004, "Wrong alignment on FThreatGridIndex");
static_assert(sizeof(FThreatGridIndex) == 0x000008, "Wrong size on FThreatGridIndex");
static_assert(offsetof(FThreatGridIndex, X) == 0x000000, "Member 'FThreatGridIndex::X' has a wrong offset!");
static_assert(offsetof(FThreatGridIndex, Y) == 0x000004, "Member 'FThreatGridIndex::Y' has a wrong offset!");

// ScriptStruct FortniteGame.TieredCollectionProgressionDataBase
// 0x0001 (0x0001 - 0x0000)
struct FTieredCollectionProgressionDataBase
{
public:
	ECollectionSelectionMethod                    SelectionMethod;                                   // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTieredCollectionProgressionDataBase) == 0x000001, "Wrong alignment on FTieredCollectionProgressionDataBase");
static_assert(sizeof(FTieredCollectionProgressionDataBase) == 0x000001, "Wrong size on FTieredCollectionProgressionDataBase");
static_assert(offsetof(FTieredCollectionProgressionDataBase, SelectionMethod) == 0x000000, "Member 'FTieredCollectionProgressionDataBase::SelectionMethod' has a wrong offset!");

// ScriptStruct FortniteGame.CollectionLootSetData
// 0x0017 (0x0018 - 0x0001)
struct FCollectionLootSetData final : public FTieredCollectionProgressionDataBase
{
public:
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           LootSetNames;                                      // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCollectionLootSetData) == 0x000008, "Wrong alignment on FCollectionLootSetData");
static_assert(sizeof(FCollectionLootSetData) == 0x000018, "Wrong size on FCollectionLootSetData");
static_assert(offsetof(FCollectionLootSetData, LootSetNames) == 0x000008, "Member 'FCollectionLootSetData::LootSetNames' has a wrong offset!");

// ScriptStruct FortniteGame.RewardBadgesCollectionProgressionData
// 0x0017 (0x0018 - 0x0001)
struct FRewardBadgesCollectionProgressionData final : public FTieredCollectionProgressionDataBase
{
public:
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRewardBadgesProgression>       BadgeCollections;                                  // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRewardBadgesCollectionProgressionData) == 0x000008, "Wrong alignment on FRewardBadgesCollectionProgressionData");
static_assert(sizeof(FRewardBadgesCollectionProgressionData) == 0x000018, "Wrong size on FRewardBadgesCollectionProgressionData");
static_assert(offsetof(FRewardBadgesCollectionProgressionData, BadgeCollections) == 0x000008, "Member 'FRewardBadgesCollectionProgressionData::BadgeCollections' has a wrong offset!");

// ScriptStruct FortniteGame.DifficultyRowProgression
// 0x0030 (0x0030 - 0x0000)
struct FDifficultyRowProgression final
{
public:
	class FName                                   DifficultyRowName;                                 // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         AdditiveDifficultyMod;                             // 0x0008(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDifficultyRowProgression) == 0x000008, "Wrong alignment on FDifficultyRowProgression");
static_assert(sizeof(FDifficultyRowProgression) == 0x000030, "Wrong size on FDifficultyRowProgression");
static_assert(offsetof(FDifficultyRowProgression, DifficultyRowName) == 0x000000, "Member 'FDifficultyRowProgression::DifficultyRowName' has a wrong offset!");
static_assert(offsetof(FDifficultyRowProgression, AdditiveDifficultyMod) == 0x000008, "Member 'FDifficultyRowProgression::AdditiveDifficultyMod' has a wrong offset!");

// ScriptStruct FortniteGame.DifficultyCollectionProgressionData
// 0x0017 (0x0018 - 0x0001)
struct FDifficultyCollectionProgressionData final : public FTieredCollectionProgressionDataBase
{
public:
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDifficultyRowProgression>      DifficultyCollections;                             // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDifficultyCollectionProgressionData) == 0x000008, "Wrong alignment on FDifficultyCollectionProgressionData");
static_assert(sizeof(FDifficultyCollectionProgressionData) == 0x000018, "Wrong size on FDifficultyCollectionProgressionData");
static_assert(offsetof(FDifficultyCollectionProgressionData, DifficultyCollections) == 0x000008, "Member 'FDifficultyCollectionProgressionData::DifficultyCollections' has a wrong offset!");

// ScriptStruct FortniteGame.TieredNamedCollectionProgressionData
// 0x0017 (0x0018 - 0x0001)
struct FTieredNamedCollectionProgressionData final : public FTieredCollectionProgressionDataBase
{
public:
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CollectionNames;                                   // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTieredNamedCollectionProgressionData) == 0x000008, "Wrong alignment on FTieredNamedCollectionProgressionData");
static_assert(sizeof(FTieredNamedCollectionProgressionData) == 0x000018, "Wrong size on FTieredNamedCollectionProgressionData");
static_assert(offsetof(FTieredNamedCollectionProgressionData, CollectionNames) == 0x000008, "Member 'FTieredNamedCollectionProgressionData::CollectionNames' has a wrong offset!");

// ScriptStruct FortniteGame.TimeOfDayEditorViewSettings
// 0x0001 (0x0001 - 0x0000)
struct FTimeOfDayEditorViewSettings final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTimeOfDayEditorViewSettings) == 0x000001, "Wrong alignment on FTimeOfDayEditorViewSettings");
static_assert(sizeof(FTimeOfDayEditorViewSettings) == 0x000001, "Wrong size on FTimeOfDayEditorViewSettings");

// ScriptStruct FortniteGame.ExponentialHeightFogValues
// 0x0044 (0x0044 - 0x0000)
struct FExponentialHeightFogValues final
{
public:
	float                                         FogDensity;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogHeightFalloff;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogMaxOpacity;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDistance;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringExponent;                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringStartDistance;              // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DirectionalInscatteringColor;                      // 0x0018(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogInscatteringColor;                              // 0x0028(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogScatteringDistribution;               // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogExtinctionScale;                      // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogDistance;                             // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExponentialHeightFogValues) == 0x000004, "Wrong alignment on FExponentialHeightFogValues");
static_assert(sizeof(FExponentialHeightFogValues) == 0x000044, "Wrong size on FExponentialHeightFogValues");
static_assert(offsetof(FExponentialHeightFogValues, FogDensity) == 0x000000, "Member 'FExponentialHeightFogValues::FogDensity' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogValues, FogHeightFalloff) == 0x000004, "Member 'FExponentialHeightFogValues::FogHeightFalloff' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogValues, FogMaxOpacity) == 0x000008, "Member 'FExponentialHeightFogValues::FogMaxOpacity' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogValues, StartDistance) == 0x00000C, "Member 'FExponentialHeightFogValues::StartDistance' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogValues, DirectionalInscatteringExponent) == 0x000010, "Member 'FExponentialHeightFogValues::DirectionalInscatteringExponent' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogValues, DirectionalInscatteringStartDistance) == 0x000014, "Member 'FExponentialHeightFogValues::DirectionalInscatteringStartDistance' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogValues, DirectionalInscatteringColor) == 0x000018, "Member 'FExponentialHeightFogValues::DirectionalInscatteringColor' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogValues, FogInscatteringColor) == 0x000028, "Member 'FExponentialHeightFogValues::FogInscatteringColor' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogValues, VolumetricFogScatteringDistribution) == 0x000038, "Member 'FExponentialHeightFogValues::VolumetricFogScatteringDistribution' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogValues, VolumetricFogExtinctionScale) == 0x00003C, "Member 'FExponentialHeightFogValues::VolumetricFogExtinctionScale' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogValues, VolumetricFogDistance) == 0x000040, "Member 'FExponentialHeightFogValues::VolumetricFogDistance' has a wrong offset!");

// ScriptStruct FortniteGame.ElementalCharValues
// 0x0014 (0x0014 - 0x0000)
struct FElementalCharValues final
{
public:
	struct FLinearColor                           FireCharColor;                                     // 0x0000(0x0010)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElectricalCharEmissive;                            // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FElementalCharValues) == 0x000004, "Wrong alignment on FElementalCharValues");
static_assert(sizeof(FElementalCharValues) == 0x000014, "Wrong size on FElementalCharValues");
static_assert(offsetof(FElementalCharValues, FireCharColor) == 0x000000, "Member 'FElementalCharValues::FireCharColor' has a wrong offset!");
static_assert(offsetof(FElementalCharValues, ElectricalCharEmissive) == 0x000010, "Member 'FElementalCharValues::ElectricalCharEmissive' has a wrong offset!");

// ScriptStruct FortniteGame.DirectionalLightValues
// 0x000C (0x000C - 0x0000)
struct FDirectionalLightValues final
{
public:
	struct FColor                                 LightColor;                                        // 0x0000(0x0004)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Brightness;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricScatteringIntensity;                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDirectionalLightValues) == 0x000004, "Wrong alignment on FDirectionalLightValues");
static_assert(sizeof(FDirectionalLightValues) == 0x00000C, "Wrong size on FDirectionalLightValues");
static_assert(offsetof(FDirectionalLightValues, LightColor) == 0x000000, "Member 'FDirectionalLightValues::LightColor' has a wrong offset!");
static_assert(offsetof(FDirectionalLightValues, Brightness) == 0x000004, "Member 'FDirectionalLightValues::Brightness' has a wrong offset!");
static_assert(offsetof(FDirectionalLightValues, VolumetricScatteringIntensity) == 0x000008, "Member 'FDirectionalLightValues::VolumetricScatteringIntensity' has a wrong offset!");

// ScriptStruct FortniteGame.DayPhaseInfo
// 0x0170 (0x0170 - 0x0000)
struct FDayPhaseInfo final
{
public:
	class FString                                 PhaseStartAnnouncement;                            // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimePhaseBegins;                                   // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhaseLengthInHours;                                // 0x0014(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentageTransitionIn;                            // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionInTimeInMinutes;                         // 0x001C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentageTransitionOut;                           // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionOutTimeInMinutes;                        // 0x0024(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSkyLightValues                        SkyLightValues;                                    // 0x0028(0x0028)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FThreatCloudValues                     ThreatCloudValues;                                 // 0x0050(0x00A0)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FElementalCharValues                   ElementalCharValues;                               // 0x00F0(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FDirectionalLightValues                DirectionalLightValues;                            // 0x0104(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FExponentialHeightFogValues            ExpHeightFogValues;                                // 0x0110(0x0044)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPostProcessComponent*                  LowPriPostProcessComponent;                        // 0x0158(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      SkyMaterialInstance;                               // 0x0160(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      StarMapMaterialInstance;                           // 0x0168(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDayPhaseInfo) == 0x000008, "Wrong alignment on FDayPhaseInfo");
static_assert(sizeof(FDayPhaseInfo) == 0x000170, "Wrong size on FDayPhaseInfo");
static_assert(offsetof(FDayPhaseInfo, PhaseStartAnnouncement) == 0x000000, "Member 'FDayPhaseInfo::PhaseStartAnnouncement' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, TimePhaseBegins) == 0x000010, "Member 'FDayPhaseInfo::TimePhaseBegins' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, PhaseLengthInHours) == 0x000014, "Member 'FDayPhaseInfo::PhaseLengthInHours' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, PercentageTransitionIn) == 0x000018, "Member 'FDayPhaseInfo::PercentageTransitionIn' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, TransitionInTimeInMinutes) == 0x00001C, "Member 'FDayPhaseInfo::TransitionInTimeInMinutes' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, PercentageTransitionOut) == 0x000020, "Member 'FDayPhaseInfo::PercentageTransitionOut' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, TransitionOutTimeInMinutes) == 0x000024, "Member 'FDayPhaseInfo::TransitionOutTimeInMinutes' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, SkyLightValues) == 0x000028, "Member 'FDayPhaseInfo::SkyLightValues' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, ThreatCloudValues) == 0x000050, "Member 'FDayPhaseInfo::ThreatCloudValues' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, ElementalCharValues) == 0x0000F0, "Member 'FDayPhaseInfo::ElementalCharValues' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, DirectionalLightValues) == 0x000104, "Member 'FDayPhaseInfo::DirectionalLightValues' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, ExpHeightFogValues) == 0x000110, "Member 'FDayPhaseInfo::ExpHeightFogValues' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, LowPriPostProcessComponent) == 0x000158, "Member 'FDayPhaseInfo::LowPriPostProcessComponent' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, SkyMaterialInstance) == 0x000160, "Member 'FDayPhaseInfo::SkyMaterialInstance' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, StarMapMaterialInstance) == 0x000168, "Member 'FDayPhaseInfo::StarMapMaterialInstance' has a wrong offset!");

// ScriptStruct FortniteGame.CameraAltitudeAdjustments
// 0x0010 (0x0010 - 0x0000)
struct FCameraAltitudeAdjustments final
{
public:
	float                                         Altitude;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogHeightFalloff;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightFogZOffset;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogDensity;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraAltitudeAdjustments) == 0x000004, "Wrong alignment on FCameraAltitudeAdjustments");
static_assert(sizeof(FCameraAltitudeAdjustments) == 0x000010, "Wrong size on FCameraAltitudeAdjustments");
static_assert(offsetof(FCameraAltitudeAdjustments, Altitude) == 0x000000, "Member 'FCameraAltitudeAdjustments::Altitude' has a wrong offset!");
static_assert(offsetof(FCameraAltitudeAdjustments, FogHeightFalloff) == 0x000004, "Member 'FCameraAltitudeAdjustments::FogHeightFalloff' has a wrong offset!");
static_assert(offsetof(FCameraAltitudeAdjustments, HeightFogZOffset) == 0x000008, "Member 'FCameraAltitudeAdjustments::HeightFogZOffset' has a wrong offset!");
static_assert(offsetof(FCameraAltitudeAdjustments, FogDensity) == 0x00000C, "Member 'FCameraAltitudeAdjustments::FogDensity' has a wrong offset!");

// ScriptStruct FortniteGame.FortTokenContextInfo
// 0x0038 (0x0038 - 0x0000)
struct FFortTokenContextInfo final
{
public:
	struct FGameplayTagContainer                  RequiredContextTags;                               // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTokenContextInfo) == 0x000008, "Wrong alignment on FFortTokenContextInfo");
static_assert(sizeof(FFortTokenContextInfo) == 0x000038, "Wrong size on FFortTokenContextInfo");
static_assert(offsetof(FFortTokenContextInfo, RequiredContextTags) == 0x000000, "Member 'FFortTokenContextInfo::RequiredContextTags' has a wrong offset!");
static_assert(offsetof(FFortTokenContextInfo, Text) == 0x000020, "Member 'FFortTokenContextInfo::Text' has a wrong offset!");

// ScriptStruct FortniteGame.FortTooltipTokenInfo
// 0x0018 (0x0018 - 0x0000)
struct FFortTooltipTokenInfo final
{
public:
	struct FGameplayTag                           Token;                                             // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortTokenContextInfo>          ContextDetails;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTooltipTokenInfo) == 0x000008, "Wrong alignment on FFortTooltipTokenInfo");
static_assert(sizeof(FFortTooltipTokenInfo) == 0x000018, "Wrong size on FFortTooltipTokenInfo");
static_assert(offsetof(FFortTooltipTokenInfo, Token) == 0x000000, "Member 'FFortTooltipTokenInfo::Token' has a wrong offset!");
static_assert(offsetof(FFortTooltipTokenInfo, ContextDetails) == 0x000008, "Member 'FFortTooltipTokenInfo::ContextDetails' has a wrong offset!");

// ScriptStruct FortniteGame.FortTooltipMapEntry
// 0x0018 (0x0018 - 0x0000)
struct FFortTooltipMapEntry final
{
public:
	class UClass*                                 ObjectClass;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 SecondaryObjectClass;                              // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortTooltip>               TooltipClass;                                      // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTooltipMapEntry) == 0x000008, "Wrong alignment on FFortTooltipMapEntry");
static_assert(sizeof(FFortTooltipMapEntry) == 0x000018, "Wrong size on FFortTooltipMapEntry");
static_assert(offsetof(FFortTooltipMapEntry, ObjectClass) == 0x000000, "Member 'FFortTooltipMapEntry::ObjectClass' has a wrong offset!");
static_assert(offsetof(FFortTooltipMapEntry, SecondaryObjectClass) == 0x000008, "Member 'FFortTooltipMapEntry::SecondaryObjectClass' has a wrong offset!");
static_assert(offsetof(FFortTooltipMapEntry, TooltipClass) == 0x000010, "Member 'FFortTooltipMapEntry::TooltipClass' has a wrong offset!");

// ScriptStruct FortniteGame.FortTooltipValueData
// 0x0070 (0x0070 - 0x0000)
struct FFortTooltipValueData final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   FormattedValue;                                    // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ExplanationText;                                   // 0x0030(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  StateTags;                                         // 0x0050(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTooltipValueData) == 0x000008, "Wrong alignment on FFortTooltipValueData");
static_assert(sizeof(FFortTooltipValueData) == 0x000070, "Wrong size on FFortTooltipValueData");
static_assert(offsetof(FFortTooltipValueData, DisplayName) == 0x000000, "Member 'FFortTooltipValueData::DisplayName' has a wrong offset!");
static_assert(offsetof(FFortTooltipValueData, FormattedValue) == 0x000018, "Member 'FFortTooltipValueData::FormattedValue' has a wrong offset!");
static_assert(offsetof(FFortTooltipValueData, ExplanationText) == 0x000030, "Member 'FFortTooltipValueData::ExplanationText' has a wrong offset!");
static_assert(offsetof(FFortTooltipValueData, Value) == 0x000048, "Member 'FFortTooltipValueData::Value' has a wrong offset!");
static_assert(offsetof(FFortTooltipValueData, StateTags) == 0x000050, "Member 'FFortTooltipValueData::StateTags' has a wrong offset!");

// ScriptStruct FortniteGame.TrackConnectorMeshConfig
// 0x0010 (0x0010 - 0x0000)
struct FTrackConnectorMeshConfig final
{
public:
	ETrackIncline                                 InclineSideA;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETrackIncline                                 InclineSideB;                                      // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            Mesh;                                              // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTrackConnectorMeshConfig) == 0x000008, "Wrong alignment on FTrackConnectorMeshConfig");
static_assert(sizeof(FTrackConnectorMeshConfig) == 0x000010, "Wrong size on FTrackConnectorMeshConfig");
static_assert(offsetof(FTrackConnectorMeshConfig, InclineSideA) == 0x000000, "Member 'FTrackConnectorMeshConfig::InclineSideA' has a wrong offset!");
static_assert(offsetof(FTrackConnectorMeshConfig, InclineSideB) == 0x000001, "Member 'FTrackConnectorMeshConfig::InclineSideB' has a wrong offset!");
static_assert(offsetof(FTrackConnectorMeshConfig, Mesh) == 0x000008, "Member 'FTrackConnectorMeshConfig::Mesh' has a wrong offset!");

// ScriptStruct FortniteGame.TrackPieceConfig
// 0x001C (0x001C - 0x0000)
struct FTrackPieceConfig final
{
public:
	ETrackPieceType                               Type;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotation;                                          // 0x0004(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0010(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTrackPieceConfig) == 0x000004, "Wrong alignment on FTrackPieceConfig");
static_assert(sizeof(FTrackPieceConfig) == 0x00001C, "Wrong size on FTrackPieceConfig");
static_assert(offsetof(FTrackPieceConfig, Type) == 0x000000, "Member 'FTrackPieceConfig::Type' has a wrong offset!");
static_assert(offsetof(FTrackPieceConfig, Rotation) == 0x000004, "Member 'FTrackPieceConfig::Rotation' has a wrong offset!");
static_assert(offsetof(FTrackPieceConfig, Scale) == 0x000010, "Member 'FTrackPieceConfig::Scale' has a wrong offset!");

// ScriptStruct FortniteGame.TrackSwitchStateConfig
// 0x0024 (0x0024 - 0x0000)
struct FTrackSwitchStateConfig final
{
public:
	struct FTrackPieceConfig                      TrackPiece;                                        // 0x0000(0x001C)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FTrackSplineConfig                     SplineConfig1;                                     // 0x001C(0x0003)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FTrackSplineConfig                     SplineConfig2;                                     // 0x001F(0x0003)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTrackSwitchStateConfig) == 0x000004, "Wrong alignment on FTrackSwitchStateConfig");
static_assert(sizeof(FTrackSwitchStateConfig) == 0x000024, "Wrong size on FTrackSwitchStateConfig");
static_assert(offsetof(FTrackSwitchStateConfig, TrackPiece) == 0x000000, "Member 'FTrackSwitchStateConfig::TrackPiece' has a wrong offset!");
static_assert(offsetof(FTrackSwitchStateConfig, SplineConfig1) == 0x00001C, "Member 'FTrackSwitchStateConfig::SplineConfig1' has a wrong offset!");
static_assert(offsetof(FTrackSwitchStateConfig, SplineConfig2) == 0x00001F, "Member 'FTrackSwitchStateConfig::SplineConfig2' has a wrong offset!");

// ScriptStruct FortniteGame.TrackConfiguration
// 0x0038 (0x0038 - 0x0000)
struct FTrackConfiguration final
{
public:
	TArray<bool>                                  NeighborsByDirection;                              // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FTrackSwitchStateConfig>        SwitchStates;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FRotator                               SwitchRotation;                                    // 0x0020(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                SwitchOffset;                                      // 0x002C(0x000C)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTrackConfiguration) == 0x000008, "Wrong alignment on FTrackConfiguration");
static_assert(sizeof(FTrackConfiguration) == 0x000038, "Wrong size on FTrackConfiguration");
static_assert(offsetof(FTrackConfiguration, NeighborsByDirection) == 0x000000, "Member 'FTrackConfiguration::NeighborsByDirection' has a wrong offset!");
static_assert(offsetof(FTrackConfiguration, SwitchStates) == 0x000010, "Member 'FTrackConfiguration::SwitchStates' has a wrong offset!");
static_assert(offsetof(FTrackConfiguration, SwitchRotation) == 0x000020, "Member 'FTrackConfiguration::SwitchRotation' has a wrong offset!");
static_assert(offsetof(FTrackConfiguration, SwitchOffset) == 0x00002C, "Member 'FTrackConfiguration::SwitchOffset' has a wrong offset!");

// ScriptStruct FortniteGame.FortTrapStats
// 0x0018 (0x0138 - 0x0120)
struct FFortTrapStats final : public FFortBaseWeaponStats
{
public:
	float                                         ArmTime;                                           // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FireDelay;                                         // 0x0124(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageDelay;                                       // 0x0128(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlacementScore;                                    // 0x012C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActivationScore;                                   // 0x0130(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortTrapStats) == 0x000008, "Wrong alignment on FFortTrapStats");
static_assert(sizeof(FFortTrapStats) == 0x000138, "Wrong size on FFortTrapStats");
static_assert(offsetof(FFortTrapStats, ArmTime) == 0x000120, "Member 'FFortTrapStats::ArmTime' has a wrong offset!");
static_assert(offsetof(FFortTrapStats, FireDelay) == 0x000124, "Member 'FFortTrapStats::FireDelay' has a wrong offset!");
static_assert(offsetof(FFortTrapStats, DamageDelay) == 0x000128, "Member 'FFortTrapStats::DamageDelay' has a wrong offset!");
static_assert(offsetof(FFortTrapStats, PlacementScore) == 0x00012C, "Member 'FFortTrapStats::PlacementScore' has a wrong offset!");
static_assert(offsetof(FFortTrapStats, ActivationScore) == 0x000130, "Member 'FFortTrapStats::ActivationScore' has a wrong offset!");

// ScriptStruct FortniteGame.KeybindIcon
// 0x02E8 (0x02E8 - 0x0000)
struct FKeybindIcon final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortMultiSizeBrush                    Brush;                                             // 0x0018(0x02D0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKeybindIcon) == 0x000008, "Wrong alignment on FKeybindIcon");
static_assert(sizeof(FKeybindIcon) == 0x0002E8, "Wrong size on FKeybindIcon");
static_assert(offsetof(FKeybindIcon, Key) == 0x000000, "Member 'FKeybindIcon::Key' has a wrong offset!");
static_assert(offsetof(FKeybindIcon, Brush) == 0x000018, "Member 'FKeybindIcon::Brush' has a wrong offset!");

// ScriptStruct FortniteGame.FortParticleSystemParamBucket
// 0x0010 (0x0010 - 0x0000)
struct FFortParticleSystemParamBucket final
{
public:
	TArray<struct FParticleSysParam>              Parameters;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortParticleSystemParamBucket) == 0x000008, "Wrong alignment on FFortParticleSystemParamBucket");
static_assert(sizeof(FFortParticleSystemParamBucket) == 0x000010, "Wrong size on FFortParticleSystemParamBucket");
static_assert(offsetof(FFortParticleSystemParamBucket, Parameters) == 0x000000, "Member 'FFortParticleSystemParamBucket::Parameters' has a wrong offset!");

// ScriptStruct FortniteGame.FortClientEvent
// 0x0020 (0x0020 - 0x0000)
struct FFortClientEvent final
{
public:
	class FName                                   CategoryName;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                EventSource;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                EventFocus;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortClientEvent) == 0x000008, "Wrong alignment on FFortClientEvent");
static_assert(sizeof(FFortClientEvent) == 0x000020, "Wrong size on FFortClientEvent");
static_assert(offsetof(FFortClientEvent, CategoryName) == 0x000000, "Member 'FFortClientEvent::CategoryName' has a wrong offset!");
static_assert(offsetof(FFortClientEvent, EventName) == 0x000008, "Member 'FFortClientEvent::EventName' has a wrong offset!");
static_assert(offsetof(FFortClientEvent, EventSource) == 0x000010, "Member 'FFortClientEvent::EventSource' has a wrong offset!");
static_assert(offsetof(FFortClientEvent, EventFocus) == 0x000018, "Member 'FFortClientEvent::EventFocus' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionEventName
// 0x0000 (0x0010 - 0x0010)
struct FFortMissionEventName final : public FFortEventName
{
};
static_assert(alignof(FFortMissionEventName) == 0x000008, "Wrong alignment on FFortMissionEventName");
static_assert(sizeof(FFortMissionEventName) == 0x000010, "Wrong size on FFortMissionEventName");

// ScriptStruct FortniteGame.FortCatalogMetaPreload
// 0x0038 (0x0038 - 0x0000)
struct FFortCatalogMetaPreload final
{
public:
	TArray<TSoftObjectPtr<class UFortAccountItemDefinition>> ChaseItems;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortCardPackItemDefinition> PackDefinition;                                    // 0x0010(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCatalogMetaPreload) == 0x000008, "Wrong alignment on FFortCatalogMetaPreload");
static_assert(sizeof(FFortCatalogMetaPreload) == 0x000038, "Wrong size on FFortCatalogMetaPreload");
static_assert(offsetof(FFortCatalogMetaPreload, ChaseItems) == 0x000000, "Member 'FFortCatalogMetaPreload::ChaseItems' has a wrong offset!");
static_assert(offsetof(FFortCatalogMetaPreload, PackDefinition) == 0x000010, "Member 'FFortCatalogMetaPreload::PackDefinition' has a wrong offset!");

// ScriptStruct FortniteGame.TileGroupMapInfo
// 0x0038 (0x0038 - 0x0000)
struct FTileGroupMapInfo final
{
public:
	TSoftObjectPtr<class UWorld>                  GroupWorld;                                        // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Weight;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   QuotaCategory;                                     // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTileGroupMapInfo) == 0x000008, "Wrong alignment on FTileGroupMapInfo");
static_assert(sizeof(FTileGroupMapInfo) == 0x000038, "Wrong size on FTileGroupMapInfo");
static_assert(offsetof(FTileGroupMapInfo, GroupWorld) == 0x000000, "Member 'FTileGroupMapInfo::GroupWorld' has a wrong offset!");
static_assert(offsetof(FTileGroupMapInfo, Weight) == 0x000028, "Member 'FTileGroupMapInfo::Weight' has a wrong offset!");
static_assert(offsetof(FTileGroupMapInfo, QuotaCategory) == 0x000030, "Member 'FTileGroupMapInfo::QuotaCategory' has a wrong offset!");

// ScriptStruct FortniteGame.FortCatalogMeta
// 0x0018 (0x0018 - 0x0000)
struct FFortCatalogMeta final
{
public:
	TArray<class UFortAccountItemDefinition*>     ChaseItems;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UFortCardPackItemDefinition*            PackDefinition;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCatalogMeta) == 0x000008, "Wrong alignment on FFortCatalogMeta");
static_assert(sizeof(FFortCatalogMeta) == 0x000018, "Wrong size on FFortCatalogMeta");
static_assert(offsetof(FFortCatalogMeta, ChaseItems) == 0x000000, "Member 'FFortCatalogMeta::ChaseItems' has a wrong offset!");
static_assert(offsetof(FFortCatalogMeta, PackDefinition) == 0x000010, "Member 'FFortCatalogMeta::PackDefinition' has a wrong offset!");

// ScriptStruct FortniteGame.FortQuestPackInfo
// 0x0030 (0x0030 - 0x0000)
struct FFortQuestPackInfo final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefaultQuestPack;                                  // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxActiveDailyQuests;                              // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxRerollsPerDay;                                  // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsStreamingQuestPack;                              // 0x0028(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortQuestPackInfo) == 0x000008, "Wrong alignment on FFortQuestPackInfo");
static_assert(sizeof(FFortQuestPackInfo) == 0x000030, "Wrong size on FFortQuestPackInfo");
static_assert(offsetof(FFortQuestPackInfo, Name) == 0x000000, "Member 'FFortQuestPackInfo::Name' has a wrong offset!");
static_assert(offsetof(FFortQuestPackInfo, DefaultQuestPack) == 0x000010, "Member 'FFortQuestPackInfo::DefaultQuestPack' has a wrong offset!");
static_assert(offsetof(FFortQuestPackInfo, MaxActiveDailyQuests) == 0x000020, "Member 'FFortQuestPackInfo::MaxActiveDailyQuests' has a wrong offset!");
static_assert(offsetof(FFortQuestPackInfo, MaxRerollsPerDay) == 0x000024, "Member 'FFortQuestPackInfo::MaxRerollsPerDay' has a wrong offset!");
static_assert(offsetof(FFortQuestPackInfo, IsStreamingQuestPack) == 0x000028, "Member 'FFortQuestPackInfo::IsStreamingQuestPack' has a wrong offset!");

// ScriptStruct FortniteGame.TransmogSacrifice
// 0x0008 (0x0010 - 0x0008)
struct FTransmogSacrifice final : public FTableRowBase
{
public:
	int32                                         TransmogSacrificePoints;                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTransmogSacrifice) == 0x000008, "Wrong alignment on FTransmogSacrifice");
static_assert(sizeof(FTransmogSacrifice) == 0x000010, "Wrong size on FTransmogSacrifice");
static_assert(offsetof(FTransmogSacrifice, TransmogSacrificePoints) == 0x000008, "Member 'FTransmogSacrifice::TransmogSacrificePoints' has a wrong offset!");

// ScriptStruct FortniteGame.ItemCategory
// 0x0308 (0x0308 - 0x0000)
struct FItemCategory final
{
public:
	struct FGameplayTagContainer                  TagContainer;                                      // 0x0000(0x0020)(Edit, NativeAccessSpecifierPublic)
	class FText                                   CategoryName;                                      // 0x0020(0x0018)(Edit, NativeAccessSpecifierPublic)
	struct FFortMultiSizeBrush                    CategoryBrush;                                     // 0x0038(0x02D0)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemCategory) == 0x000008, "Wrong alignment on FItemCategory");
static_assert(sizeof(FItemCategory) == 0x000308, "Wrong size on FItemCategory");
static_assert(offsetof(FItemCategory, TagContainer) == 0x000000, "Member 'FItemCategory::TagContainer' has a wrong offset!");
static_assert(offsetof(FItemCategory, CategoryName) == 0x000020, "Member 'FItemCategory::CategoryName' has a wrong offset!");
static_assert(offsetof(FItemCategory, CategoryBrush) == 0x000038, "Member 'FItemCategory::CategoryBrush' has a wrong offset!");

// ScriptStruct FortniteGame.FortMultiSizeMargin
// 0x0060 (0x0060 - 0x0000)
struct FFortMultiSizeMargin final
{
public:
	struct FMargin                                Margin_XXS;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                Margin_XS;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                Margin_S;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                Margin_M;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                Margin_L;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                Margin_XL;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMultiSizeMargin) == 0x000004, "Wrong alignment on FFortMultiSizeMargin");
static_assert(sizeof(FFortMultiSizeMargin) == 0x000060, "Wrong size on FFortMultiSizeMargin");
static_assert(offsetof(FFortMultiSizeMargin, Margin_XXS) == 0x000000, "Member 'FFortMultiSizeMargin::Margin_XXS' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeMargin, Margin_XS) == 0x000010, "Member 'FFortMultiSizeMargin::Margin_XS' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeMargin, Margin_S) == 0x000020, "Member 'FFortMultiSizeMargin::Margin_S' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeMargin, Margin_M) == 0x000030, "Member 'FFortMultiSizeMargin::Margin_M' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeMargin, Margin_L) == 0x000040, "Member 'FFortMultiSizeMargin::Margin_L' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeMargin, Margin_XL) == 0x000050, "Member 'FFortMultiSizeMargin::Margin_XL' has a wrong offset!");

// ScriptStruct FortniteGame.StrategicBuildingActiveConstructionInfo
// 0x0010 (0x0010 - 0x0000)
struct FStrategicBuildingActiveConstructionInfo final
{
public:
	float                                         ConstructionStartTime;                             // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstructionEndTime;                               // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConstructionLevel;                                 // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUnderConstruction : 1;                            // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStrategicBuildingActiveConstructionInfo) == 0x000004, "Wrong alignment on FStrategicBuildingActiveConstructionInfo");
static_assert(sizeof(FStrategicBuildingActiveConstructionInfo) == 0x000010, "Wrong size on FStrategicBuildingActiveConstructionInfo");
static_assert(offsetof(FStrategicBuildingActiveConstructionInfo, ConstructionStartTime) == 0x000000, "Member 'FStrategicBuildingActiveConstructionInfo::ConstructionStartTime' has a wrong offset!");
static_assert(offsetof(FStrategicBuildingActiveConstructionInfo, ConstructionEndTime) == 0x000004, "Member 'FStrategicBuildingActiveConstructionInfo::ConstructionEndTime' has a wrong offset!");
static_assert(offsetof(FStrategicBuildingActiveConstructionInfo, ConstructionLevel) == 0x000008, "Member 'FStrategicBuildingActiveConstructionInfo::ConstructionLevel' has a wrong offset!");

// ScriptStruct FortniteGame.FortUserCloudRequest
// 0x00A0 (0x00A0 - 0x0000)
struct alignas(0x10) FFortUserCloudRequest final
{
public:
	struct FFortUserCloudRequestPayload           RequestPayload;                                    // 0x0000(0x0058)(NativeAccessSpecifierPublic)
	uint8                                         bNeedsFileEnumeration : 1;                         // 0x0058(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bStartedProcessing : 1;                            // 0x0058(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_59[0x47];                                      // 0x0059(0x0047)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortUserCloudRequest) == 0x000010, "Wrong alignment on FFortUserCloudRequest");
static_assert(sizeof(FFortUserCloudRequest) == 0x0000A0, "Wrong size on FFortUserCloudRequest");
static_assert(offsetof(FFortUserCloudRequest, RequestPayload) == 0x000000, "Member 'FFortUserCloudRequest::RequestPayload' has a wrong offset!");

// ScriptStruct FortniteGame.FortUserCloudRequestQueue
// 0x0028 (0x0028 - 0x0000)
struct FFortUserCloudRequestQueue final
{
public:
	uint8                                         bFreezeIncomingRequests : 1;                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortUserCloudRequestHandle            FirstFrozenHandle;                                 // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           ProcessingTimerHandle;                             // 0x0010(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FFortUserCloudRequest>          RequestQueue;                                      // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortUserCloudRequestQueue) == 0x000008, "Wrong alignment on FFortUserCloudRequestQueue");
static_assert(sizeof(FFortUserCloudRequestQueue) == 0x000028, "Wrong size on FFortUserCloudRequestQueue");
static_assert(offsetof(FFortUserCloudRequestQueue, FirstFrozenHandle) == 0x000008, "Member 'FFortUserCloudRequestQueue::FirstFrozenHandle' has a wrong offset!");
static_assert(offsetof(FFortUserCloudRequestQueue, ProcessingTimerHandle) == 0x000010, "Member 'FFortUserCloudRequestQueue::ProcessingTimerHandle' has a wrong offset!");
static_assert(offsetof(FFortUserCloudRequestQueue, RequestQueue) == 0x000018, "Member 'FFortUserCloudRequestQueue::RequestQueue' has a wrong offset!");

// ScriptStruct FortniteGame.VisibilityInfo
// 0x001C (0x0028 - 0x000C)
struct FVisibilityInfo final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortVisibilityComponent*               VisibilityComponent;                               // 0x0018(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        TeamVisibilityFlag;                                // 0x0020(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVisibilityInfo) == 0x000008, "Wrong alignment on FVisibilityInfo");
static_assert(sizeof(FVisibilityInfo) == 0x000028, "Wrong size on FVisibilityInfo");
static_assert(offsetof(FVisibilityInfo, Actor) == 0x000010, "Member 'FVisibilityInfo::Actor' has a wrong offset!");
static_assert(offsetof(FVisibilityInfo, VisibilityComponent) == 0x000018, "Member 'FVisibilityInfo::VisibilityComponent' has a wrong offset!");
static_assert(offsetof(FVisibilityInfo, TeamVisibilityFlag) == 0x000020, "Member 'FVisibilityInfo::TeamVisibilityFlag' has a wrong offset!");

// ScriptStruct FortniteGame.VisibiltyInfoArray
// 0x0010 (0x00C0 - 0x00B0)
struct FVisibiltyInfoArray final : public FFastArraySerializer
{
public:
	TArray<struct FVisibilityInfo>                VisibilityInfoArray;                               // 0x00B0(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVisibiltyInfoArray) == 0x000008, "Wrong alignment on FVisibiltyInfoArray");
static_assert(sizeof(FVisibiltyInfoArray) == 0x0000C0, "Wrong size on FVisibiltyInfoArray");
static_assert(offsetof(FVisibiltyInfoArray, VisibilityInfoArray) == 0x0000B0, "Member 'FVisibiltyInfoArray::VisibilityInfoArray' has a wrong offset!");

// ScriptStruct FortniteGame.FortMeleeWeaponStats
// 0x0028 (0x0148 - 0x0120)
struct FFortMeleeWeaponStats final : public FFortBaseWeaponStats
{
public:
	float                                         RangeVSEnemies;                                    // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ConeYawAngle;                                      // 0x0124(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ConePitchAngle;                                    // 0x0128(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SwingPlaySpeed;                                    // 0x012C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SwingTime;                                         // 0x0130(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BuildingConeAngle;                                 // 0x0134(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BuildingConeAnglePitch;                            // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RangeVSBuildings2D;                                // 0x013C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RangeVSBuildingsZ;                                 // 0x0140(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RangeVSWeakSpots;                                  // 0x0144(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortMeleeWeaponStats) == 0x000008, "Wrong alignment on FFortMeleeWeaponStats");
static_assert(sizeof(FFortMeleeWeaponStats) == 0x000148, "Wrong size on FFortMeleeWeaponStats");
static_assert(offsetof(FFortMeleeWeaponStats, RangeVSEnemies) == 0x000120, "Member 'FFortMeleeWeaponStats::RangeVSEnemies' has a wrong offset!");
static_assert(offsetof(FFortMeleeWeaponStats, ConeYawAngle) == 0x000124, "Member 'FFortMeleeWeaponStats::ConeYawAngle' has a wrong offset!");
static_assert(offsetof(FFortMeleeWeaponStats, ConePitchAngle) == 0x000128, "Member 'FFortMeleeWeaponStats::ConePitchAngle' has a wrong offset!");
static_assert(offsetof(FFortMeleeWeaponStats, SwingPlaySpeed) == 0x00012C, "Member 'FFortMeleeWeaponStats::SwingPlaySpeed' has a wrong offset!");
static_assert(offsetof(FFortMeleeWeaponStats, SwingTime) == 0x000130, "Member 'FFortMeleeWeaponStats::SwingTime' has a wrong offset!");
static_assert(offsetof(FFortMeleeWeaponStats, BuildingConeAngle) == 0x000134, "Member 'FFortMeleeWeaponStats::BuildingConeAngle' has a wrong offset!");
static_assert(offsetof(FFortMeleeWeaponStats, BuildingConeAnglePitch) == 0x000138, "Member 'FFortMeleeWeaponStats::BuildingConeAnglePitch' has a wrong offset!");
static_assert(offsetof(FFortMeleeWeaponStats, RangeVSBuildings2D) == 0x00013C, "Member 'FFortMeleeWeaponStats::RangeVSBuildings2D' has a wrong offset!");
static_assert(offsetof(FFortMeleeWeaponStats, RangeVSBuildingsZ) == 0x000140, "Member 'FFortMeleeWeaponStats::RangeVSBuildingsZ' has a wrong offset!");
static_assert(offsetof(FFortMeleeWeaponStats, RangeVSWeakSpots) == 0x000144, "Member 'FFortMeleeWeaponStats::RangeVSWeakSpots' has a wrong offset!");

// ScriptStruct FortniteGame.FortWindImpulseCylinderRadial
// 0x003C (0x003C - 0x0000)
struct FFortWindImpulseCylinderRadial
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Edit, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         InnerRadius;                                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OuterRadius;                                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Magnitude;                                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FBox                                   WorldBounds;                                       // 0x0018(0x001C)(IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsChanging;                                       // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsChangePending;                                  // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortWindImpulseHandle                 Handle;                                            // 0x0038(0x0004)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortWindImpulseCylinderRadial) == 0x000004, "Wrong alignment on FFortWindImpulseCylinderRadial");
static_assert(sizeof(FFortWindImpulseCylinderRadial) == 0x00003C, "Wrong size on FFortWindImpulseCylinderRadial");
static_assert(offsetof(FFortWindImpulseCylinderRadial, Location) == 0x000000, "Member 'FFortWindImpulseCylinderRadial::Location' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderRadial, InnerRadius) == 0x00000C, "Member 'FFortWindImpulseCylinderRadial::InnerRadius' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderRadial, OuterRadius) == 0x000010, "Member 'FFortWindImpulseCylinderRadial::OuterRadius' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderRadial, Magnitude) == 0x000014, "Member 'FFortWindImpulseCylinderRadial::Magnitude' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderRadial, WorldBounds) == 0x000018, "Member 'FFortWindImpulseCylinderRadial::WorldBounds' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderRadial, bIsChanging) == 0x000034, "Member 'FFortWindImpulseCylinderRadial::bIsChanging' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderRadial, bIsChangePending) == 0x000035, "Member 'FFortWindImpulseCylinderRadial::bIsChangePending' has a wrong offset!");
static_assert(offsetof(FFortWindImpulseCylinderRadial, Handle) == 0x000038, "Member 'FFortWindImpulseCylinderRadial::Handle' has a wrong offset!");

// ScriptStruct FortniteGame.FortWindImpulseCylinder
// 0x000C (0x0048 - 0x003C)
struct FFortWindImpulseCylinder final : public FFortWindImpulseCylinderRadial
{
public:
	struct FVector                                WindDirection;                                     // 0x003C(0x000C)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortWindImpulseCylinder) == 0x000004, "Wrong alignment on FFortWindImpulseCylinder");
static_assert(sizeof(FFortWindImpulseCylinder) == 0x000048, "Wrong size on FFortWindImpulseCylinder");
static_assert(offsetof(FFortWindImpulseCylinder, WindDirection) == 0x00003C, "Member 'FFortWindImpulseCylinder::WindDirection' has a wrong offset!");

// ScriptStruct FortniteGame.WorldTileSubArray
// 0x0010 (0x0010 - 0x0000)
struct FWorldTileSubArray final
{
public:
	TArray<class AWorldTileFoundation*>           X;                                                 // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorldTileSubArray) == 0x000008, "Wrong alignment on FWorldTileSubArray");
static_assert(sizeof(FWorldTileSubArray) == 0x000010, "Wrong size on FWorldTileSubArray");
static_assert(offsetof(FWorldTileSubArray, X) == 0x000000, "Member 'FWorldTileSubArray::X' has a wrong offset!");

// ScriptStruct FortniteGame.FortLevelStreamingInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FFortLevelStreamingInfo final
{
public:
	class FName                                   PackageName;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortLevelStreamingState                      LevelState;                                        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFailedToLoad;                                     // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortLevelStreamingInfo) == 0x000008, "Wrong alignment on FFortLevelStreamingInfo");
static_assert(sizeof(FFortLevelStreamingInfo) == 0x000010, "Wrong size on FFortLevelStreamingInfo");
static_assert(offsetof(FFortLevelStreamingInfo, PackageName) == 0x000000, "Member 'FFortLevelStreamingInfo::PackageName' has a wrong offset!");
static_assert(offsetof(FFortLevelStreamingInfo, LevelState) == 0x000008, "Member 'FFortLevelStreamingInfo::LevelState' has a wrong offset!");
static_assert(offsetof(FFortLevelStreamingInfo, bFailedToLoad) == 0x000009, "Member 'FFortLevelStreamingInfo::bFailedToLoad' has a wrong offset!");

// ScriptStruct FortniteGame.FortZoneStats
// 0x0190 (0x0190 - 0x0000)
struct alignas(0x08) FFortZoneStats final
{
public:
	uint8                                         Pad_0[0x190];                                      // 0x0000(0x0190)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortZoneStats) == 0x000008, "Wrong alignment on FFortZoneStats");
static_assert(sizeof(FFortZoneStats) == 0x000190, "Wrong size on FFortZoneStats");

// ScriptStruct FortniteGame.ContainerStatInfo
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FContainerStatInfo final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FContainerStatInfo) == 0x000004, "Wrong alignment on FContainerStatInfo");
static_assert(sizeof(FContainerStatInfo) == 0x00000C, "Wrong size on FContainerStatInfo");

// ScriptStruct FortniteGame.EnemyNpcStatInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FEnemyNpcStatInfo final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEnemyNpcStatInfo) == 0x000004, "Wrong alignment on FEnemyNpcStatInfo");
static_assert(sizeof(FEnemyNpcStatInfo) == 0x000010, "Wrong size on FEnemyNpcStatInfo");

// ScriptStruct FortniteGame.DefenderNPCStatInfo
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FDefenderNPCStatInfo final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDefenderNPCStatInfo) == 0x000004, "Wrong alignment on FDefenderNPCStatInfo");
static_assert(sizeof(FDefenderNPCStatInfo) == 0x00000C, "Wrong size on FDefenderNPCStatInfo");

// ScriptStruct FortniteGame.ZoneThemeDifficultyProperties
// 0x0068 (0x0068 - 0x0000)
struct FZoneThemeDifficultyProperties final
{
public:
	TArray<struct FDataTableRowHandle>            ValidDifficulties;                                 // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortTimeOfDayTheme                    TimeOfDayTheme;                                    // 0x0010(0x0040)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortGlobalWindInfo                    GlobalWindInfo;                                    // 0x0050(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZoneThemeDifficultyProperties) == 0x000008, "Wrong alignment on FZoneThemeDifficultyProperties");
static_assert(sizeof(FZoneThemeDifficultyProperties) == 0x000068, "Wrong size on FZoneThemeDifficultyProperties");
static_assert(offsetof(FZoneThemeDifficultyProperties, ValidDifficulties) == 0x000000, "Member 'FZoneThemeDifficultyProperties::ValidDifficulties' has a wrong offset!");
static_assert(offsetof(FZoneThemeDifficultyProperties, TimeOfDayTheme) == 0x000010, "Member 'FZoneThemeDifficultyProperties::TimeOfDayTheme' has a wrong offset!");
static_assert(offsetof(FZoneThemeDifficultyProperties, GlobalWindInfo) == 0x000050, "Member 'FZoneThemeDifficultyProperties::GlobalWindInfo' has a wrong offset!");

// ScriptStruct FortniteGame.FortKeepResourceGroup
// 0x0048 (0x0050 - 0x0008)
struct FFortKeepResourceGroup final : public FTableRowBase
{
public:
	class FName                                   Container;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ResourceName;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortItemDefinition>     FullPath;                                          // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortKeepResourceGroup) == 0x000008, "Wrong alignment on FFortKeepResourceGroup");
static_assert(sizeof(FFortKeepResourceGroup) == 0x000050, "Wrong size on FFortKeepResourceGroup");
static_assert(offsetof(FFortKeepResourceGroup, Container) == 0x000008, "Member 'FFortKeepResourceGroup::Container' has a wrong offset!");
static_assert(offsetof(FFortKeepResourceGroup, ItemCount) == 0x000010, "Member 'FFortKeepResourceGroup::ItemCount' has a wrong offset!");
static_assert(offsetof(FFortKeepResourceGroup, ResourceName) == 0x000018, "Member 'FFortKeepResourceGroup::ResourceName' has a wrong offset!");
static_assert(offsetof(FFortKeepResourceGroup, FullPath) == 0x000028, "Member 'FFortKeepResourceGroup::FullPath' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlacementActorFinderInfo
// 0x0018 (0x0018 - 0x0000)
struct FFortPlacementActorFinderInfo final
{
public:
	float                                         DistanceRangeMin;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceRangeMax;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortPlacementActorFinderEntry> BuildingData;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlacementActorFinderInfo) == 0x000008, "Wrong alignment on FFortPlacementActorFinderInfo");
static_assert(sizeof(FFortPlacementActorFinderInfo) == 0x000018, "Wrong size on FFortPlacementActorFinderInfo");
static_assert(offsetof(FFortPlacementActorFinderInfo, DistanceRangeMin) == 0x000000, "Member 'FFortPlacementActorFinderInfo::DistanceRangeMin' has a wrong offset!");
static_assert(offsetof(FFortPlacementActorFinderInfo, DistanceRangeMax) == 0x000004, "Member 'FFortPlacementActorFinderInfo::DistanceRangeMax' has a wrong offset!");
static_assert(offsetof(FFortPlacementActorFinderInfo, BuildingData) == 0x000008, "Member 'FFortPlacementActorFinderInfo::BuildingData' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlacementDistanceRequirements
// 0x0008 (0x0008 - 0x0000)
struct FFortPlacementDistanceRequirements final
{
public:
	float                                         DistanceRangeMin;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceRangeMax;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlacementDistanceRequirements) == 0x000004, "Wrong alignment on FFortPlacementDistanceRequirements");
static_assert(sizeof(FFortPlacementDistanceRequirements) == 0x000008, "Wrong size on FFortPlacementDistanceRequirements");
static_assert(offsetof(FFortPlacementDistanceRequirements, DistanceRangeMin) == 0x000000, "Member 'FFortPlacementDistanceRequirements::DistanceRangeMin' has a wrong offset!");
static_assert(offsetof(FFortPlacementDistanceRequirements, DistanceRangeMax) == 0x000004, "Member 'FFortPlacementDistanceRequirements::DistanceRangeMax' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionEvent
// 0x0098 (0x0098 - 0x0000)
struct FFortMissionEvent final
{
public:
	class FName                                   EventType;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ObjectiveHandle;                                   // 0x0008(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UObject*                                EventFocus;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataAsset*                             EventContent;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EventInstigator;                                   // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GenericInt;                                        // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GenericFloat;                                      // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   GenericText;                                       // 0x0048(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0060(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGuid                                  MissionGuid;                                       // 0x0080(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortMissionEventParams*                Params;                                            // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionEvent) == 0x000008, "Wrong alignment on FFortMissionEvent");
static_assert(sizeof(FFortMissionEvent) == 0x000098, "Wrong size on FFortMissionEvent");
static_assert(offsetof(FFortMissionEvent, EventType) == 0x000000, "Member 'FFortMissionEvent::EventType' has a wrong offset!");
static_assert(offsetof(FFortMissionEvent, ObjectiveHandle) == 0x000008, "Member 'FFortMissionEvent::ObjectiveHandle' has a wrong offset!");
static_assert(offsetof(FFortMissionEvent, EventFocus) == 0x000028, "Member 'FFortMissionEvent::EventFocus' has a wrong offset!");
static_assert(offsetof(FFortMissionEvent, EventContent) == 0x000030, "Member 'FFortMissionEvent::EventContent' has a wrong offset!");
static_assert(offsetof(FFortMissionEvent, EventInstigator) == 0x000038, "Member 'FFortMissionEvent::EventInstigator' has a wrong offset!");
static_assert(offsetof(FFortMissionEvent, GenericInt) == 0x000040, "Member 'FFortMissionEvent::GenericInt' has a wrong offset!");
static_assert(offsetof(FFortMissionEvent, GenericFloat) == 0x000044, "Member 'FFortMissionEvent::GenericFloat' has a wrong offset!");
static_assert(offsetof(FFortMissionEvent, GenericText) == 0x000048, "Member 'FFortMissionEvent::GenericText' has a wrong offset!");
static_assert(offsetof(FFortMissionEvent, GameplayTags) == 0x000060, "Member 'FFortMissionEvent::GameplayTags' has a wrong offset!");
static_assert(offsetof(FFortMissionEvent, MissionGuid) == 0x000080, "Member 'FFortMissionEvent::MissionGuid' has a wrong offset!");
static_assert(offsetof(FFortMissionEvent, Params) == 0x000090, "Member 'FFortMissionEvent::Params' has a wrong offset!");

// ScriptStruct FortniteGame.StrategicBuildingLevelActiveCriteriaProgress
// 0x000C (0x000C - 0x0000)
struct FStrategicBuildingLevelActiveCriteriaProgress final
{
public:
	float                                         CurrentProgress;                                   // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxProgress;                                       // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bProgressAllowed : 1;                              // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStrategicBuildingLevelActiveCriteriaProgress) == 0x000004, "Wrong alignment on FStrategicBuildingLevelActiveCriteriaProgress");
static_assert(sizeof(FStrategicBuildingLevelActiveCriteriaProgress) == 0x00000C, "Wrong size on FStrategicBuildingLevelActiveCriteriaProgress");
static_assert(offsetof(FStrategicBuildingLevelActiveCriteriaProgress, CurrentProgress) == 0x000000, "Member 'FStrategicBuildingLevelActiveCriteriaProgress::CurrentProgress' has a wrong offset!");
static_assert(offsetof(FStrategicBuildingLevelActiveCriteriaProgress, MaxProgress) == 0x000004, "Member 'FStrategicBuildingLevelActiveCriteriaProgress::MaxProgress' has a wrong offset!");

// ScriptStruct FortniteGame.StrategicBuildingUpgradePathInfo
// 0x00B0 (0x00B0 - 0x0000)
struct FStrategicBuildingUpgradePathInfo final
{
public:
	class FText                                   UpgradeDesc;                                       // 0x0000(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            UpgradeBrush;                                      // 0x0018(0x0078)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  UpgradeTags;                                       // 0x0090(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStrategicBuildingUpgradePathInfo) == 0x000008, "Wrong alignment on FStrategicBuildingUpgradePathInfo");
static_assert(sizeof(FStrategicBuildingUpgradePathInfo) == 0x0000B0, "Wrong size on FStrategicBuildingUpgradePathInfo");
static_assert(offsetof(FStrategicBuildingUpgradePathInfo, UpgradeDesc) == 0x000000, "Member 'FStrategicBuildingUpgradePathInfo::UpgradeDesc' has a wrong offset!");
static_assert(offsetof(FStrategicBuildingUpgradePathInfo, UpgradeBrush) == 0x000018, "Member 'FStrategicBuildingUpgradePathInfo::UpgradeBrush' has a wrong offset!");
static_assert(offsetof(FStrategicBuildingUpgradePathInfo, UpgradeTags) == 0x000090, "Member 'FStrategicBuildingUpgradePathInfo::UpgradeTags' has a wrong offset!");

// ScriptStruct FortniteGame.StrategicBuildingLevelUnlocks
// 0x0030 (0x0030 - 0x0000)
struct FStrategicBuildingLevelUnlocks final
{
public:
	TArray<struct FFortAbilitySetDeliveryInfo>    OwnerStrategicBuildingAbilitySetBuckets;           // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFortAbilitySetDeliveryInfo>    PawnPersistentAbilitySetBuckets;                   // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProximityBasedGEDeliveryInfo>  ProximityBasedEffectBuckets;                       // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStrategicBuildingLevelUnlocks) == 0x000008, "Wrong alignment on FStrategicBuildingLevelUnlocks");
static_assert(sizeof(FStrategicBuildingLevelUnlocks) == 0x000030, "Wrong size on FStrategicBuildingLevelUnlocks");
static_assert(offsetof(FStrategicBuildingLevelUnlocks, OwnerStrategicBuildingAbilitySetBuckets) == 0x000000, "Member 'FStrategicBuildingLevelUnlocks::OwnerStrategicBuildingAbilitySetBuckets' has a wrong offset!");
static_assert(offsetof(FStrategicBuildingLevelUnlocks, PawnPersistentAbilitySetBuckets) == 0x000010, "Member 'FStrategicBuildingLevelUnlocks::PawnPersistentAbilitySetBuckets' has a wrong offset!");
static_assert(offsetof(FStrategicBuildingLevelUnlocks, ProximityBasedEffectBuckets) == 0x000020, "Member 'FStrategicBuildingLevelUnlocks::ProximityBasedEffectBuckets' has a wrong offset!");

// ScriptStruct FortniteGame.StrategicBuildingLevelInformation
// 0x0068 (0x0068 - 0x0000)
struct FStrategicBuildingLevelInformation final
{
public:
	struct FStrategicBuildingLevelCriteria        UpgradeCriteria;                                   // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FStrategicBuildingUpgradePathInfo> UpgradePaths;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FStrategicBuildingLevelUnlocks         LevelUnlocks;                                      // 0x0030(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         ConstructionTime;                                  // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DestructionRecoveryTime;                           // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStrategicBuildingLevelInformation) == 0x000008, "Wrong alignment on FStrategicBuildingLevelInformation");
static_assert(sizeof(FStrategicBuildingLevelInformation) == 0x000068, "Wrong size on FStrategicBuildingLevelInformation");
static_assert(offsetof(FStrategicBuildingLevelInformation, UpgradeCriteria) == 0x000000, "Member 'FStrategicBuildingLevelInformation::UpgradeCriteria' has a wrong offset!");
static_assert(offsetof(FStrategicBuildingLevelInformation, UpgradePaths) == 0x000020, "Member 'FStrategicBuildingLevelInformation::UpgradePaths' has a wrong offset!");
static_assert(offsetof(FStrategicBuildingLevelInformation, LevelUnlocks) == 0x000030, "Member 'FStrategicBuildingLevelInformation::LevelUnlocks' has a wrong offset!");
static_assert(offsetof(FStrategicBuildingLevelInformation, ConstructionTime) == 0x000060, "Member 'FStrategicBuildingLevelInformation::ConstructionTime' has a wrong offset!");
static_assert(offsetof(FStrategicBuildingLevelInformation, DestructionRecoveryTime) == 0x000064, "Member 'FStrategicBuildingLevelInformation::DestructionRecoveryTime' has a wrong offset!");

// ScriptStruct FortniteGame.FortTileLootData
// 0x0318 (0x0318 - 0x0000)
struct FFortTileLootData final
{
public:
	struct FFortLootQuotaData                     LootQuotas[0x12];                                  // 0x0000(0x0028)(NativeAccessSpecifierPublic)
	int32                                         LootDrops[0x12];                                   // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTileLootData) == 0x000008, "Wrong alignment on FFortTileLootData");
static_assert(sizeof(FFortTileLootData) == 0x000318, "Wrong size on FFortTileLootData");
static_assert(offsetof(FFortTileLootData, LootQuotas) == 0x000000, "Member 'FFortTileLootData::LootQuotas' has a wrong offset!");
static_assert(offsetof(FFortTileLootData, LootDrops) == 0x0002D0, "Member 'FFortTileLootData::LootDrops' has a wrong offset!");

}

