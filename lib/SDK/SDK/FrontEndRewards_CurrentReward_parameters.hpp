#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FrontEndRewards_CurrentReward

#include "Basic.hpp"

#include "FortniteUI_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function FrontEndRewards_CurrentReward.FrontEndRewards_CurrentReward_C.ExecuteUbergraph_FrontEndRewards_CurrentReward
// 0x0058 (0x0058 - 0x0000)
struct FrontEndRewards_CurrentReward_C_ExecuteUbergraph_FrontEndRewards_CurrentReward final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0018(0x0008)(NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate2;             // 0x0020(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate3;             // 0x0030(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate4;             // 0x0040(0x0010)(ZeroConstructor, NoDestructor)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FrontEndRewards_CurrentReward_C_ExecuteUbergraph_FrontEndRewards_CurrentReward) == 0x000008, "Wrong alignment on FrontEndRewards_CurrentReward_C_ExecuteUbergraph_FrontEndRewards_CurrentReward");
static_assert(sizeof(FrontEndRewards_CurrentReward_C_ExecuteUbergraph_FrontEndRewards_CurrentReward) == 0x000058, "Wrong size on FrontEndRewards_CurrentReward_C_ExecuteUbergraph_FrontEndRewards_CurrentReward");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_ExecuteUbergraph_FrontEndRewards_CurrentReward, EntryPoint) == 0x000000, "Member 'FrontEndRewards_CurrentReward_C_ExecuteUbergraph_FrontEndRewards_CurrentReward::EntryPoint' has a wrong offset!");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_ExecuteUbergraph_FrontEndRewards_CurrentReward, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'FrontEndRewards_CurrentReward_C_ExecuteUbergraph_FrontEndRewards_CurrentReward::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_ExecuteUbergraph_FrontEndRewards_CurrentReward, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000018, "Member 'FrontEndRewards_CurrentReward_C_ExecuteUbergraph_FrontEndRewards_CurrentReward::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_ExecuteUbergraph_FrontEndRewards_CurrentReward, K2Node_CreateDelegate_OutputDelegate2) == 0x000020, "Member 'FrontEndRewards_CurrentReward_C_ExecuteUbergraph_FrontEndRewards_CurrentReward::K2Node_CreateDelegate_OutputDelegate2' has a wrong offset!");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_ExecuteUbergraph_FrontEndRewards_CurrentReward, K2Node_CreateDelegate_OutputDelegate3) == 0x000030, "Member 'FrontEndRewards_CurrentReward_C_ExecuteUbergraph_FrontEndRewards_CurrentReward::K2Node_CreateDelegate_OutputDelegate3' has a wrong offset!");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_ExecuteUbergraph_FrontEndRewards_CurrentReward, K2Node_CreateDelegate_OutputDelegate4) == 0x000040, "Member 'FrontEndRewards_CurrentReward_C_ExecuteUbergraph_FrontEndRewards_CurrentReward::K2Node_CreateDelegate_OutputDelegate4' has a wrong offset!");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_ExecuteUbergraph_FrontEndRewards_CurrentReward, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000050, "Member 'FrontEndRewards_CurrentReward_C_ExecuteUbergraph_FrontEndRewards_CurrentReward::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");

// Function FrontEndRewards_CurrentReward.FrontEndRewards_CurrentReward_C.PlayDropAnimation
// 0x0001 (0x0001 - 0x0000)
struct FrontEndRewards_CurrentReward_C_PlayDropAnimation final
{
public:
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FrontEndRewards_CurrentReward_C_PlayDropAnimation) == 0x000001, "Wrong alignment on FrontEndRewards_CurrentReward_C_PlayDropAnimation");
static_assert(sizeof(FrontEndRewards_CurrentReward_C_PlayDropAnimation) == 0x000001, "Wrong size on FrontEndRewards_CurrentReward_C_PlayDropAnimation");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_PlayDropAnimation, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000000, "Member 'FrontEndRewards_CurrentReward_C_PlayDropAnimation::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");

// Function FrontEndRewards_CurrentReward.FrontEndRewards_CurrentReward_C.PlayPopAnimation
// 0x0001 (0x0001 - 0x0000)
struct FrontEndRewards_CurrentReward_C_PlayPopAnimation final
{
public:
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FrontEndRewards_CurrentReward_C_PlayPopAnimation) == 0x000001, "Wrong alignment on FrontEndRewards_CurrentReward_C_PlayPopAnimation");
static_assert(sizeof(FrontEndRewards_CurrentReward_C_PlayPopAnimation) == 0x000001, "Wrong size on FrontEndRewards_CurrentReward_C_PlayPopAnimation");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_PlayPopAnimation, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000000, "Member 'FrontEndRewards_CurrentReward_C_PlayPopAnimation::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");

// Function FrontEndRewards_CurrentReward.FrontEndRewards_CurrentReward_C.PlayOpenAnimation
// 0x0001 (0x0001 - 0x0000)
struct FrontEndRewards_CurrentReward_C_PlayOpenAnimation final
{
public:
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FrontEndRewards_CurrentReward_C_PlayOpenAnimation) == 0x000001, "Wrong alignment on FrontEndRewards_CurrentReward_C_PlayOpenAnimation");
static_assert(sizeof(FrontEndRewards_CurrentReward_C_PlayOpenAnimation) == 0x000001, "Wrong size on FrontEndRewards_CurrentReward_C_PlayOpenAnimation");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_PlayOpenAnimation, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000000, "Member 'FrontEndRewards_CurrentReward_C_PlayOpenAnimation::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");

// Function FrontEndRewards_CurrentReward.FrontEndRewards_CurrentReward_C.updateFade
// 0x001C (0x001C - 0x0000)
struct FrontEndRewards_CurrentReward_C_UpdateFade final
{
public:
	float                                         TimePassed;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpEaseInOut_ReturnValue;             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FrontEndRewards_CurrentReward_C_UpdateFade) == 0x000004, "Wrong alignment on FrontEndRewards_CurrentReward_C_UpdateFade");
static_assert(sizeof(FrontEndRewards_CurrentReward_C_UpdateFade) == 0x00001C, "Wrong size on FrontEndRewards_CurrentReward_C_UpdateFade");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_UpdateFade, TimePassed) == 0x000000, "Member 'FrontEndRewards_CurrentReward_C_UpdateFade::TimePassed' has a wrong offset!");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_UpdateFade, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000004, "Member 'FrontEndRewards_CurrentReward_C_UpdateFade::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_UpdateFade, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000008, "Member 'FrontEndRewards_CurrentReward_C_UpdateFade::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_UpdateFade, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x00000C, "Member 'FrontEndRewards_CurrentReward_C_UpdateFade::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_UpdateFade, CallFunc_FClamp_ReturnValue) == 0x000010, "Member 'FrontEndRewards_CurrentReward_C_UpdateFade::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_UpdateFade, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000014, "Member 'FrontEndRewards_CurrentReward_C_UpdateFade::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_UpdateFade, CallFunc_FInterpEaseInOut_ReturnValue) == 0x000018, "Member 'FrontEndRewards_CurrentReward_C_UpdateFade::CallFunc_FInterpEaseInOut_ReturnValue' has a wrong offset!");

// Function FrontEndRewards_CurrentReward.FrontEndRewards_CurrentReward_C.SkipOpenAnimation
// 0x0014 (0x0014 - 0x0000)
struct FrontEndRewards_CurrentReward_C_SkipOpenAnimation final
{
public:
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0000(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FrontEndRewards_CurrentReward_C_SkipOpenAnimation) == 0x000004, "Wrong alignment on FrontEndRewards_CurrentReward_C_SkipOpenAnimation");
static_assert(sizeof(FrontEndRewards_CurrentReward_C_SkipOpenAnimation) == 0x000014, "Wrong size on FrontEndRewards_CurrentReward_C_SkipOpenAnimation");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_SkipOpenAnimation, K2Node_MakeStruct_LinearColor) == 0x000000, "Member 'FrontEndRewards_CurrentReward_C_SkipOpenAnimation::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_SkipOpenAnimation, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000010, "Member 'FrontEndRewards_CurrentReward_C_SkipOpenAnimation::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");

// Function FrontEndRewards_CurrentReward.FrontEndRewards_CurrentReward_C.PlayFadeOutAnimation
// 0x0001 (0x0001 - 0x0000)
struct FrontEndRewards_CurrentReward_C_PlayFadeOutAnimation final
{
public:
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FrontEndRewards_CurrentReward_C_PlayFadeOutAnimation) == 0x000001, "Wrong alignment on FrontEndRewards_CurrentReward_C_PlayFadeOutAnimation");
static_assert(sizeof(FrontEndRewards_CurrentReward_C_PlayFadeOutAnimation) == 0x000001, "Wrong size on FrontEndRewards_CurrentReward_C_PlayFadeOutAnimation");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_PlayFadeOutAnimation, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000000, "Member 'FrontEndRewards_CurrentReward_C_PlayFadeOutAnimation::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");

// Function FrontEndRewards_CurrentReward.FrontEndRewards_CurrentReward_C.StopBounceAnimation
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FrontEndRewards_CurrentReward_C_StopBounceAnimation final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(FrontEndRewards_CurrentReward_C_StopBounceAnimation) == 0x000008, "Wrong alignment on FrontEndRewards_CurrentReward_C_StopBounceAnimation");
static_assert(sizeof(FrontEndRewards_CurrentReward_C_StopBounceAnimation) == 0x000010, "Wrong size on FrontEndRewards_CurrentReward_C_StopBounceAnimation");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_StopBounceAnimation, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'FrontEndRewards_CurrentReward_C_StopBounceAnimation::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function FrontEndRewards_CurrentReward.FrontEndRewards_CurrentReward_C.SkipPopAnimation
// 0x0002 (0x0002 - 0x0000)
struct FrontEndRewards_CurrentReward_C_SkipPopAnimation final
{
public:
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue2;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FrontEndRewards_CurrentReward_C_SkipPopAnimation) == 0x000001, "Wrong alignment on FrontEndRewards_CurrentReward_C_SkipPopAnimation");
static_assert(sizeof(FrontEndRewards_CurrentReward_C_SkipPopAnimation) == 0x000002, "Wrong size on FrontEndRewards_CurrentReward_C_SkipPopAnimation");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_SkipPopAnimation, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000000, "Member 'FrontEndRewards_CurrentReward_C_SkipPopAnimation::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_SkipPopAnimation, CallFunc_IsAnimationPlaying_ReturnValue2) == 0x000001, "Member 'FrontEndRewards_CurrentReward_C_SkipPopAnimation::CallFunc_IsAnimationPlaying_ReturnValue2' has a wrong offset!");

// Function FrontEndRewards_CurrentReward.FrontEndRewards_CurrentReward_C.Play Drop Animation Sound
// 0x0040 (0x0040 - 0x0000)
struct FrontEndRewards_CurrentReward_C_Play_Drop_Animation_Sound final
{
public:
	EFrontEndRewardType                           Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable2;                             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable3;                             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable4;                             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable5;                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable6;                             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             K2Node_Select_Default;                             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FrontEndRewards_CurrentReward_C_Play_Drop_Animation_Sound) == 0x000008, "Wrong alignment on FrontEndRewards_CurrentReward_C_Play_Drop_Animation_Sound");
static_assert(sizeof(FrontEndRewards_CurrentReward_C_Play_Drop_Animation_Sound) == 0x000040, "Wrong size on FrontEndRewards_CurrentReward_C_Play_Drop_Animation_Sound");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_Play_Drop_Animation_Sound, Temp_byte_Variable) == 0x000000, "Member 'FrontEndRewards_CurrentReward_C_Play_Drop_Animation_Sound::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_Play_Drop_Animation_Sound, Temp_object_Variable) == 0x000008, "Member 'FrontEndRewards_CurrentReward_C_Play_Drop_Animation_Sound::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_Play_Drop_Animation_Sound, Temp_object_Variable2) == 0x000010, "Member 'FrontEndRewards_CurrentReward_C_Play_Drop_Animation_Sound::Temp_object_Variable2' has a wrong offset!");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_Play_Drop_Animation_Sound, Temp_object_Variable3) == 0x000018, "Member 'FrontEndRewards_CurrentReward_C_Play_Drop_Animation_Sound::Temp_object_Variable3' has a wrong offset!");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_Play_Drop_Animation_Sound, Temp_object_Variable4) == 0x000020, "Member 'FrontEndRewards_CurrentReward_C_Play_Drop_Animation_Sound::Temp_object_Variable4' has a wrong offset!");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_Play_Drop_Animation_Sound, Temp_object_Variable5) == 0x000028, "Member 'FrontEndRewards_CurrentReward_C_Play_Drop_Animation_Sound::Temp_object_Variable5' has a wrong offset!");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_Play_Drop_Animation_Sound, Temp_object_Variable6) == 0x000030, "Member 'FrontEndRewards_CurrentReward_C_Play_Drop_Animation_Sound::Temp_object_Variable6' has a wrong offset!");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_Play_Drop_Animation_Sound, K2Node_Select_Default) == 0x000038, "Member 'FrontEndRewards_CurrentReward_C_Play_Drop_Animation_Sound::K2Node_Select_Default' has a wrong offset!");

// Function FrontEndRewards_CurrentReward.FrontEndRewards_CurrentReward_C.Play Pop Animation Sound
// 0x0040 (0x0040 - 0x0000)
struct FrontEndRewards_CurrentReward_C_Play_Pop_Animation_Sound final
{
public:
	EFrontEndRewardType                           Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable2;                             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable3;                             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable4;                             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable5;                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable6;                             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             K2Node_Select_Default;                             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FrontEndRewards_CurrentReward_C_Play_Pop_Animation_Sound) == 0x000008, "Wrong alignment on FrontEndRewards_CurrentReward_C_Play_Pop_Animation_Sound");
static_assert(sizeof(FrontEndRewards_CurrentReward_C_Play_Pop_Animation_Sound) == 0x000040, "Wrong size on FrontEndRewards_CurrentReward_C_Play_Pop_Animation_Sound");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_Play_Pop_Animation_Sound, Temp_byte_Variable) == 0x000000, "Member 'FrontEndRewards_CurrentReward_C_Play_Pop_Animation_Sound::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_Play_Pop_Animation_Sound, Temp_object_Variable) == 0x000008, "Member 'FrontEndRewards_CurrentReward_C_Play_Pop_Animation_Sound::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_Play_Pop_Animation_Sound, Temp_object_Variable2) == 0x000010, "Member 'FrontEndRewards_CurrentReward_C_Play_Pop_Animation_Sound::Temp_object_Variable2' has a wrong offset!");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_Play_Pop_Animation_Sound, Temp_object_Variable3) == 0x000018, "Member 'FrontEndRewards_CurrentReward_C_Play_Pop_Animation_Sound::Temp_object_Variable3' has a wrong offset!");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_Play_Pop_Animation_Sound, Temp_object_Variable4) == 0x000020, "Member 'FrontEndRewards_CurrentReward_C_Play_Pop_Animation_Sound::Temp_object_Variable4' has a wrong offset!");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_Play_Pop_Animation_Sound, Temp_object_Variable5) == 0x000028, "Member 'FrontEndRewards_CurrentReward_C_Play_Pop_Animation_Sound::Temp_object_Variable5' has a wrong offset!");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_Play_Pop_Animation_Sound, Temp_object_Variable6) == 0x000030, "Member 'FrontEndRewards_CurrentReward_C_Play_Pop_Animation_Sound::Temp_object_Variable6' has a wrong offset!");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_Play_Pop_Animation_Sound, K2Node_Select_Default) == 0x000038, "Member 'FrontEndRewards_CurrentReward_C_Play_Pop_Animation_Sound::K2Node_Select_Default' has a wrong offset!");

// Function FrontEndRewards_CurrentReward.FrontEndRewards_CurrentReward_C.Play Open Animation Sound
// 0x0040 (0x0040 - 0x0000)
struct FrontEndRewards_CurrentReward_C_Play_Open_Animation_Sound final
{
public:
	EFrontEndRewardType                           Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable2;                             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable3;                             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable4;                             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable5;                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable6;                             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             K2Node_Select_Default;                             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FrontEndRewards_CurrentReward_C_Play_Open_Animation_Sound) == 0x000008, "Wrong alignment on FrontEndRewards_CurrentReward_C_Play_Open_Animation_Sound");
static_assert(sizeof(FrontEndRewards_CurrentReward_C_Play_Open_Animation_Sound) == 0x000040, "Wrong size on FrontEndRewards_CurrentReward_C_Play_Open_Animation_Sound");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_Play_Open_Animation_Sound, Temp_byte_Variable) == 0x000000, "Member 'FrontEndRewards_CurrentReward_C_Play_Open_Animation_Sound::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_Play_Open_Animation_Sound, Temp_object_Variable) == 0x000008, "Member 'FrontEndRewards_CurrentReward_C_Play_Open_Animation_Sound::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_Play_Open_Animation_Sound, Temp_object_Variable2) == 0x000010, "Member 'FrontEndRewards_CurrentReward_C_Play_Open_Animation_Sound::Temp_object_Variable2' has a wrong offset!");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_Play_Open_Animation_Sound, Temp_object_Variable3) == 0x000018, "Member 'FrontEndRewards_CurrentReward_C_Play_Open_Animation_Sound::Temp_object_Variable3' has a wrong offset!");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_Play_Open_Animation_Sound, Temp_object_Variable4) == 0x000020, "Member 'FrontEndRewards_CurrentReward_C_Play_Open_Animation_Sound::Temp_object_Variable4' has a wrong offset!");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_Play_Open_Animation_Sound, Temp_object_Variable5) == 0x000028, "Member 'FrontEndRewards_CurrentReward_C_Play_Open_Animation_Sound::Temp_object_Variable5' has a wrong offset!");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_Play_Open_Animation_Sound, Temp_object_Variable6) == 0x000030, "Member 'FrontEndRewards_CurrentReward_C_Play_Open_Animation_Sound::Temp_object_Variable6' has a wrong offset!");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_Play_Open_Animation_Sound, K2Node_Select_Default) == 0x000038, "Member 'FrontEndRewards_CurrentReward_C_Play_Open_Animation_Sound::K2Node_Select_Default' has a wrong offset!");

// Function FrontEndRewards_CurrentReward.FrontEndRewards_CurrentReward_C.Reset Canvas Panel Slot Alignment and Anchors
// 0x0010 (0x0010 - 0x0000)
struct FrontEndRewards_CurrentReward_C_Reset_Canvas_Panel_Slot_Alignment_and_Anchors final
{
public:
	class UCanvasPanelSlot*                       K2Node_DynamicCast_AsCanvas_Panel_Slot;            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FrontEndRewards_CurrentReward_C_Reset_Canvas_Panel_Slot_Alignment_and_Anchors) == 0x000008, "Wrong alignment on FrontEndRewards_CurrentReward_C_Reset_Canvas_Panel_Slot_Alignment_and_Anchors");
static_assert(sizeof(FrontEndRewards_CurrentReward_C_Reset_Canvas_Panel_Slot_Alignment_and_Anchors) == 0x000010, "Wrong size on FrontEndRewards_CurrentReward_C_Reset_Canvas_Panel_Slot_Alignment_and_Anchors");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_Reset_Canvas_Panel_Slot_Alignment_and_Anchors, K2Node_DynamicCast_AsCanvas_Panel_Slot) == 0x000000, "Member 'FrontEndRewards_CurrentReward_C_Reset_Canvas_Panel_Slot_Alignment_and_Anchors::K2Node_DynamicCast_AsCanvas_Panel_Slot' has a wrong offset!");
static_assert(offsetof(FrontEndRewards_CurrentReward_C_Reset_Canvas_Panel_Slot_Alignment_and_Anchors, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'FrontEndRewards_CurrentReward_C_Reset_Canvas_Panel_Slot_Alignment_and_Anchors::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

