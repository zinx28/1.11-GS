#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ItemTransform

#include "Basic.hpp"

#include "ItemTransform_classes.hpp"
#include "ItemTransform_parameters.hpp"


namespace SDK
{

// Function ItemTransform.ItemTransform_C.ExecuteUbergraph_ItemTransform
// ()
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UItemTransform_C::ExecuteUbergraph_ItemTransform(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemTransform_C", "ExecuteUbergraph_ItemTransform");

	Params::ItemTransform_C_ExecuteUbergraph_ItemTransform Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemTransform.ItemTransform_C.OnRequestCloseItemPicker
// (Event, Public, BlueprintEvent)

void UItemTransform_C::OnRequestCloseItemPicker()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemTransform_C", "OnRequestCloseItemPicker");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ItemTransform.ItemTransform_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UItemTransform_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemTransform_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ItemTransform.ItemTransform_C.BndEvt__SlotScreen_K2Node_ComponentBoundEvent_598_OnTransformButtonUpdated__DelegateSignature
// (BlueprintEvent)
// Parameters:
// bool                                    TransformActive                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UItemTransform_C::BndEvt__SlotScreen_K2Node_ComponentBoundEvent_598_OnTransformButtonUpdated__DelegateSignature(bool TransformActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemTransform_C", "BndEvt__SlotScreen_K2Node_ComponentBoundEvent_598_OnTransformButtonUpdated__DelegateSignature");

	Params::ItemTransform_C_BndEvt__SlotScreen_K2Node_ComponentBoundEvent_598_OnTransformButtonUpdated__DelegateSignature Parms{};

	Parms.TransformActive = TransformActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemTransform.ItemTransform_C.BndEvt__KeyScreen_K2Node_ComponentBoundEvent_513_OnKeyConfirmed__DelegateSignature
// (BlueprintEvent)

void UItemTransform_C::BndEvt__KeyScreen_K2Node_ComponentBoundEvent_513_OnKeyConfirmed__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemTransform_C", "BndEvt__KeyScreen_K2Node_ComponentBoundEvent_513_OnKeyConfirmed__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ItemTransform.ItemTransform_C.OnActivated
// (Event, Protected, BlueprintEvent)

void UItemTransform_C::OnActivated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemTransform_C", "OnActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ItemTransform.ItemTransform_C.BndEvt__TransformScreenSwitcher_K2Node_ComponentBoundEvent_213_OnActiveWidgetChanged__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UWidget*                          ActiveWidget                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ActiveWidgetIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UItemTransform_C::BndEvt__TransformScreenSwitcher_K2Node_ComponentBoundEvent_213_OnActiveWidgetChanged__DelegateSignature(class UWidget* ActiveWidget, int32 ActiveWidgetIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemTransform_C", "BndEvt__TransformScreenSwitcher_K2Node_ComponentBoundEvent_213_OnActiveWidgetChanged__DelegateSignature");

	Params::ItemTransform_C_BndEvt__TransformScreenSwitcher_K2Node_ComponentBoundEvent_213_OnActiveWidgetChanged__DelegateSignature Parms{};

	Parms.ActiveWidget = ActiveWidget;
	Parms.ActiveWidgetIndex = ActiveWidgetIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemTransform.ItemTransform_C.BndEvt__KeyScreen_K2Node_ComponentBoundEvent_6_OnKeySelected__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UFortItem*                        Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UItemTransform_C::BndEvt__KeyScreen_K2Node_ComponentBoundEvent_6_OnKeySelected__DelegateSignature(class UFortItem* Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemTransform_C", "BndEvt__KeyScreen_K2Node_ComponentBoundEvent_6_OnKeySelected__DelegateSignature");

	Params::ItemTransform_C_BndEvt__KeyScreen_K2Node_ComponentBoundEvent_6_OnKeySelected__DelegateSignature Parms{};

	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemTransform.ItemTransform_C.OpenItemTransform
// (Public, BlueprintCallable, BlueprintEvent)

void UItemTransform_C::OpenItemTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemTransform_C", "OpenItemTransform");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ItemTransform.ItemTransform_C.OpenKeyScreen
// (Public, BlueprintCallable, BlueprintEvent)

void UItemTransform_C::OpenKeyScreen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemTransform_C", "OpenKeyScreen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ItemTransform.ItemTransform_C.OpenSlotScreen
// (Public, BlueprintCallable, BlueprintEvent)

void UItemTransform_C::OpenSlotScreen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemTransform_C", "OpenSlotScreen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ItemTransform.ItemTransform_C.SetupActionHandlers
// (Public, BlueprintCallable, BlueprintEvent)

void UItemTransform_C::SetupActionHandlers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemTransform_C", "SetupActionHandlers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ItemTransform.ItemTransform_C.HandleBack
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Passthrough                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UItemTransform_C::HandleBack(bool* Passthrough)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemTransform_C", "HandleBack");

	Params::ItemTransform_C_HandleBack Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Passthrough != nullptr)
		*Passthrough = Parms.Passthrough;
}


// Function ItemTransform.ItemTransform_C.HandleSelect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Passthrough                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UItemTransform_C::HandleSelect(bool* Passthrough)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemTransform_C", "HandleSelect");

	Params::ItemTransform_C_HandleSelect Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Passthrough != nullptr)
		*Passthrough = Parms.Passthrough;
}


// Function ItemTransform.ItemTransform_C.OpenConfirmation
// (Public, BlueprintCallable, BlueprintEvent)

void UItemTransform_C::OpenConfirmation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemTransform_C", "OpenConfirmation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ItemTransform.ItemTransform_C.HandleTransformCancel
// (Public, BlueprintCallable, BlueprintEvent)

void UItemTransform_C::HandleTransformCancel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemTransform_C", "HandleTransformCancel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ItemTransform.ItemTransform_C.HandleTransformConfirm
// (Public, BlueprintCallable, BlueprintEvent)

void UItemTransform_C::HandleTransformConfirm()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemTransform_C", "HandleTransformConfirm");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ItemTransform.ItemTransform_C.OpenResult
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FFortItemInstanceQuantityPair>RewardItems                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<struct FFortItemInstanceQuantityPair>SacrificeItems                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UItemTransform_C::OpenResult(TArray<struct FFortItemInstanceQuantityPair>& RewardItems, TArray<struct FFortItemInstanceQuantityPair>& SacrificeItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemTransform_C", "OpenResult");

	Params::ItemTransform_C_OpenResult Parms{};

	Parms.RewardItems = std::move(RewardItems);
	Parms.SacrificeItems = std::move(SacrificeItems);

	UObject::ProcessEvent(Func, &Parms);

	RewardItems = std::move(Parms.RewardItems);
	SacrificeItems = std::move(Parms.SacrificeItems);
}


// Function ItemTransform.ItemTransform_C.HandleTransformContinue
// (Public, BlueprintCallable, BlueprintEvent)

void UItemTransform_C::HandleTransformContinue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemTransform_C", "HandleTransformContinue");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ItemTransform.ItemTransform_C.HandleTransformSucceeded
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FFortItemInstanceQuantityPair>RewardedItems                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<struct FFortItemInstanceQuantityPair>SacrificedItems                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UItemTransform_C::HandleTransformSucceeded(TArray<struct FFortItemInstanceQuantityPair>& RewardedItems, TArray<struct FFortItemInstanceQuantityPair>& SacrificedItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemTransform_C", "HandleTransformSucceeded");

	Params::ItemTransform_C_HandleTransformSucceeded Parms{};

	Parms.RewardedItems = std::move(RewardedItems);
	Parms.SacrificedItems = std::move(SacrificedItems);

	UObject::ProcessEvent(Func, &Parms);

	RewardedItems = std::move(Parms.RewardedItems);
	SacrificedItems = std::move(Parms.SacrificedItems);
}


// Function ItemTransform.ItemTransform_C.HandleTransformFailed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             ErrorMessage                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UItemTransform_C::HandleTransformFailed(class FText& ErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemTransform_C", "HandleTransformFailed");

	Params::ItemTransform_C_HandleTransformFailed Parms{};

	Parms.ErrorMessage = std::move(ErrorMessage);

	UObject::ProcessEvent(Func, &Parms);

	ErrorMessage = std::move(Parms.ErrorMessage);
}


// Function ItemTransform.ItemTransform_C.ResetItemTransform
// (Public, BlueprintCallable, BlueprintEvent)

void UItemTransform_C::ResetItemTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemTransform_C", "ResetItemTransform");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ItemTransform.ItemTransform_C.HandleTransformAction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Passthrough                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UItemTransform_C::HandleTransformAction(bool* Passthrough)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemTransform_C", "HandleTransformAction");

	Params::ItemTransform_C_HandleTransformAction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Passthrough != nullptr)
		*Passthrough = Parms.Passthrough;
}


// Function ItemTransform.ItemTransform_C.HandleSelectKeyAction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Passthrough                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UItemTransform_C::HandleSelectKeyAction(bool* Passthrough)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemTransform_C", "HandleSelectKeyAction");

	Params::ItemTransform_C_HandleSelectKeyAction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Passthrough != nullptr)
		*Passthrough = Parms.Passthrough;
}


// Function ItemTransform.ItemTransform_C.ShowSelectKeyAction
// (Public, BlueprintCallable, BlueprintEvent)

void UItemTransform_C::ShowSelectKeyAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemTransform_C", "ShowSelectKeyAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ItemTransform.ItemTransform_C.HideSelectKeyAction
// (Public, BlueprintCallable, BlueprintEvent)

void UItemTransform_C::HideSelectKeyAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemTransform_C", "HideSelectKeyAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ItemTransform.ItemTransform_C.DisableSelectKeyAction
// (Public, BlueprintCallable, BlueprintEvent)

void UItemTransform_C::DisableSelectKeyAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemTransform_C", "DisableSelectKeyAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ItemTransform.ItemTransform_C.UpdateSelectKeyAction
// (Public, BlueprintCallable, BlueprintEvent)

void UItemTransform_C::UpdateSelectKeyAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemTransform_C", "UpdateSelectKeyAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ItemTransform.ItemTransform_C.ShowTransformAction
// (Public, BlueprintCallable, BlueprintEvent)

void UItemTransform_C::ShowTransformAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemTransform_C", "ShowTransformAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ItemTransform.ItemTransform_C.HideTransformAction
// (Public, BlueprintCallable, BlueprintEvent)

void UItemTransform_C::HideTransformAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemTransform_C", "HideTransformAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ItemTransform.ItemTransform_C.DisableTransformAction
// (Public, BlueprintCallable, BlueprintEvent)

void UItemTransform_C::DisableTransformAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemTransform_C", "DisableTransformAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ItemTransform.ItemTransform_C.Handle Select Key Activated
// (Public, BlueprintCallable, BlueprintEvent)

void UItemTransform_C::Handle_Select_Key_Activated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemTransform_C", "Handle Select Key Activated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ItemTransform.ItemTransform_C.Handle Transform Activated
// (Public, BlueprintCallable, BlueprintEvent)

void UItemTransform_C::Handle_Transform_Activated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemTransform_C", "Handle Transform Activated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ItemTransform.ItemTransform_C.UpdateTransformAction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    TransformActive                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UItemTransform_C::UpdateTransformAction(bool TransformActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemTransform_C", "UpdateTransformAction");

	Params::ItemTransform_C_UpdateTransformAction Parms{};

	Parms.TransformActive = TransformActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemTransform.ItemTransform_C.OnItemPickerClosed
// (Public, BlueprintCallable, BlueprintEvent)

void UItemTransform_C::OnItemPickerClosed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemTransform_C", "OnItemPickerClosed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ItemTransform.ItemTransform_C.OnItemPickerOpened
// (Public, BlueprintCallable, BlueprintEvent)

void UItemTransform_C::OnItemPickerOpened()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemTransform_C", "OnItemPickerOpened");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ItemTransform.ItemTransform_C.HandleClosePicker
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Passthrough                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UItemTransform_C::HandleClosePicker(bool* Passthrough)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemTransform_C", "HandleClosePicker");

	Params::ItemTransform_C_HandleClosePicker Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Passthrough != nullptr)
		*Passthrough = Parms.Passthrough;
}

}

