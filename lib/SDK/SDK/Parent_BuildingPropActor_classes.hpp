#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Parent_BuildingPropActor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DayPhaseFloats_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Parent_BuildingPropActor.Parent_BuildingPropActor_C
// 0x0110 (0x0E78 - 0x0D68)
class AParent_BuildingPropActor_C : public ABuildingProp
{
public:
	uint8                                         Pad_D68[0x8];                                      // 0x0D68(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0D70(0x0008)(Transient, DuplicateTransient)
	bool                                          DebugWind;                                         // 0x0D78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D79[0x7];                                      // 0x0D79(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             IntenseWindMaterialsForPreview;                    // 0x0D80(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UMaterialInterface*>             OriginalMaterials;                                 // 0x0D90(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UStaticMeshComponent*                   Wind_Intensity_Debug_Mesh;                         // 0x0DA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Debug_TempMaterial;                                // 0x0DA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Debug_Wind_Intensity;                              // 0x0DB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DebugWindYaw;                                      // 0x0DB4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDayPhaseFloats                        Light_Intensity_Over_Time_of_Day_;                 // 0x0DB8(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash)
	struct FDayPhaseFloats                        Emissive_Intensity_Over_Time_of_Day;               // 0x0DC8(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         CodeControlled_NumberOfMaterials;                  // 0x0DD8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DDC[0x4];                                      // 0x0DDC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinearColor>                   CodeControlled_EmissiveColor;                      // 0x0DE0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class ULightComponent*>                TimeOfDayControlledLightsArray;                    // 0x0DF0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<float>                                 CodeControlled_LightConeOpacity;                   // 0x0E00(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          Animate_Emissive_and_Lights_Over_Time;             // 0x0E10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_E11[0x3];                                      // 0x0E11(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Day_Phase_Transition_Length;                       // 0x0E14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Disable_TOD_Lights_and_Material_Emissive_Values;   // 0x0E18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Disable_Static_Mesh_Shadow_Casting_When_Lights_Are_Active; // 0x0E19(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1A[0x6];                                      // 0x0E1A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            AlternateShadowStaticMesh;                         // 0x0E20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_An_Alternate_Shadow_Mesh_When_The_Light_is_Off_; // 0x0E28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E29[0x7];                                      // 0x0E29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        TimeOfDayControlledLightsPositionArray;            // 0x0E30(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         Volumetric_Light_Scattering_Intensity;             // 0x0E40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Cast_Volumetric_Shadows;                           // 0x0E44(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Animate_Lights_With_A_Curve_Minus_Disables_time_of_day_light_controls; // 0x0E45(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E46[0x2];                                      // 0x0E46(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            LightAnimationCurve;                               // 0x0E48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CodeControlled_Animation_Curve_Animation_Length;   // 0x0E50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E54[0x4];                                      // 0x0E54(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 CodeControlled_Initial_Light_Intensity_Minus_used_in_conjunction_with_curve_based_value_animations; // 0x0E58(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          Animate_Mesh_MID_Emissive_Value_with_a_Curve_Minus_Disables_time_of_day_light_controls; // 0x0E68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E69[0x3];                                      // 0x0E69(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Random_Time_Scale_Percent;                         // 0x0E6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CodeControlled_CurrentTimeLength;                  // 0x0E70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Parent_BuildingPropActor(int32 EntryPoint);
	void Loop_Animation_Curve();
	void OnBounceAnimationUpdate(const struct FFortBounceData& Data);
	void ReceiveBeginPlay();
	void OnDayPhaseChanged(EFortDayPhase CurrentDayPhase, EFortDayPhase PreviousDayPhase, bool bAtCreation);
	void UserConstructionScript();
	void Set_Light_parameters(float Previous_to_Current_Day_Phase_Alpha);
	void Set__MID_Values_For_Lights();
	void Add_to_TOD_Light_Array(class ULightComponent*& NewItem);
	void Call_Animation_Curve_Again();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Parent_BuildingPropActor_C">();
	}
	static class AParent_BuildingPropActor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AParent_BuildingPropActor_C>();
	}
};
static_assert(alignof(AParent_BuildingPropActor_C) == 0x000008, "Wrong alignment on AParent_BuildingPropActor_C");
static_assert(sizeof(AParent_BuildingPropActor_C) == 0x000E78, "Wrong size on AParent_BuildingPropActor_C");
static_assert(offsetof(AParent_BuildingPropActor_C, UberGraphFrame) == 0x000D70, "Member 'AParent_BuildingPropActor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AParent_BuildingPropActor_C, DebugWind) == 0x000D78, "Member 'AParent_BuildingPropActor_C::DebugWind' has a wrong offset!");
static_assert(offsetof(AParent_BuildingPropActor_C, IntenseWindMaterialsForPreview) == 0x000D80, "Member 'AParent_BuildingPropActor_C::IntenseWindMaterialsForPreview' has a wrong offset!");
static_assert(offsetof(AParent_BuildingPropActor_C, OriginalMaterials) == 0x000D90, "Member 'AParent_BuildingPropActor_C::OriginalMaterials' has a wrong offset!");
static_assert(offsetof(AParent_BuildingPropActor_C, Wind_Intensity_Debug_Mesh) == 0x000DA0, "Member 'AParent_BuildingPropActor_C::Wind_Intensity_Debug_Mesh' has a wrong offset!");
static_assert(offsetof(AParent_BuildingPropActor_C, Debug_TempMaterial) == 0x000DA8, "Member 'AParent_BuildingPropActor_C::Debug_TempMaterial' has a wrong offset!");
static_assert(offsetof(AParent_BuildingPropActor_C, Debug_Wind_Intensity) == 0x000DB0, "Member 'AParent_BuildingPropActor_C::Debug_Wind_Intensity' has a wrong offset!");
static_assert(offsetof(AParent_BuildingPropActor_C, DebugWindYaw) == 0x000DB4, "Member 'AParent_BuildingPropActor_C::DebugWindYaw' has a wrong offset!");
static_assert(offsetof(AParent_BuildingPropActor_C, Light_Intensity_Over_Time_of_Day_) == 0x000DB8, "Member 'AParent_BuildingPropActor_C::Light_Intensity_Over_Time_of_Day_' has a wrong offset!");
static_assert(offsetof(AParent_BuildingPropActor_C, Emissive_Intensity_Over_Time_of_Day) == 0x000DC8, "Member 'AParent_BuildingPropActor_C::Emissive_Intensity_Over_Time_of_Day' has a wrong offset!");
static_assert(offsetof(AParent_BuildingPropActor_C, CodeControlled_NumberOfMaterials) == 0x000DD8, "Member 'AParent_BuildingPropActor_C::CodeControlled_NumberOfMaterials' has a wrong offset!");
static_assert(offsetof(AParent_BuildingPropActor_C, CodeControlled_EmissiveColor) == 0x000DE0, "Member 'AParent_BuildingPropActor_C::CodeControlled_EmissiveColor' has a wrong offset!");
static_assert(offsetof(AParent_BuildingPropActor_C, TimeOfDayControlledLightsArray) == 0x000DF0, "Member 'AParent_BuildingPropActor_C::TimeOfDayControlledLightsArray' has a wrong offset!");
static_assert(offsetof(AParent_BuildingPropActor_C, CodeControlled_LightConeOpacity) == 0x000E00, "Member 'AParent_BuildingPropActor_C::CodeControlled_LightConeOpacity' has a wrong offset!");
static_assert(offsetof(AParent_BuildingPropActor_C, Animate_Emissive_and_Lights_Over_Time) == 0x000E10, "Member 'AParent_BuildingPropActor_C::Animate_Emissive_and_Lights_Over_Time' has a wrong offset!");
static_assert(offsetof(AParent_BuildingPropActor_C, Day_Phase_Transition_Length) == 0x000E14, "Member 'AParent_BuildingPropActor_C::Day_Phase_Transition_Length' has a wrong offset!");
static_assert(offsetof(AParent_BuildingPropActor_C, Disable_TOD_Lights_and_Material_Emissive_Values) == 0x000E18, "Member 'AParent_BuildingPropActor_C::Disable_TOD_Lights_and_Material_Emissive_Values' has a wrong offset!");
static_assert(offsetof(AParent_BuildingPropActor_C, Disable_Static_Mesh_Shadow_Casting_When_Lights_Are_Active) == 0x000E19, "Member 'AParent_BuildingPropActor_C::Disable_Static_Mesh_Shadow_Casting_When_Lights_Are_Active' has a wrong offset!");
static_assert(offsetof(AParent_BuildingPropActor_C, AlternateShadowStaticMesh) == 0x000E20, "Member 'AParent_BuildingPropActor_C::AlternateShadowStaticMesh' has a wrong offset!");
static_assert(offsetof(AParent_BuildingPropActor_C, Use_An_Alternate_Shadow_Mesh_When_The_Light_is_Off_) == 0x000E28, "Member 'AParent_BuildingPropActor_C::Use_An_Alternate_Shadow_Mesh_When_The_Light_is_Off_' has a wrong offset!");
static_assert(offsetof(AParent_BuildingPropActor_C, TimeOfDayControlledLightsPositionArray) == 0x000E30, "Member 'AParent_BuildingPropActor_C::TimeOfDayControlledLightsPositionArray' has a wrong offset!");
static_assert(offsetof(AParent_BuildingPropActor_C, Volumetric_Light_Scattering_Intensity) == 0x000E40, "Member 'AParent_BuildingPropActor_C::Volumetric_Light_Scattering_Intensity' has a wrong offset!");
static_assert(offsetof(AParent_BuildingPropActor_C, Cast_Volumetric_Shadows) == 0x000E44, "Member 'AParent_BuildingPropActor_C::Cast_Volumetric_Shadows' has a wrong offset!");
static_assert(offsetof(AParent_BuildingPropActor_C, Animate_Lights_With_A_Curve_Minus_Disables_time_of_day_light_controls) == 0x000E45, "Member 'AParent_BuildingPropActor_C::Animate_Lights_With_A_Curve_Minus_Disables_time_of_day_light_controls' has a wrong offset!");
static_assert(offsetof(AParent_BuildingPropActor_C, LightAnimationCurve) == 0x000E48, "Member 'AParent_BuildingPropActor_C::LightAnimationCurve' has a wrong offset!");
static_assert(offsetof(AParent_BuildingPropActor_C, CodeControlled_Animation_Curve_Animation_Length) == 0x000E50, "Member 'AParent_BuildingPropActor_C::CodeControlled_Animation_Curve_Animation_Length' has a wrong offset!");
static_assert(offsetof(AParent_BuildingPropActor_C, CodeControlled_Initial_Light_Intensity_Minus_used_in_conjunction_with_curve_based_value_animations) == 0x000E58, "Member 'AParent_BuildingPropActor_C::CodeControlled_Initial_Light_Intensity_Minus_used_in_conjunction_with_curve_based_value_animations' has a wrong offset!");
static_assert(offsetof(AParent_BuildingPropActor_C, Animate_Mesh_MID_Emissive_Value_with_a_Curve_Minus_Disables_time_of_day_light_controls) == 0x000E68, "Member 'AParent_BuildingPropActor_C::Animate_Mesh_MID_Emissive_Value_with_a_Curve_Minus_Disables_time_of_day_light_controls' has a wrong offset!");
static_assert(offsetof(AParent_BuildingPropActor_C, Random_Time_Scale_Percent) == 0x000E6C, "Member 'AParent_BuildingPropActor_C::Random_Time_Scale_Percent' has a wrong offset!");
static_assert(offsetof(AParent_BuildingPropActor_C, CodeControlled_CurrentTimeLength) == 0x000E70, "Member 'AParent_BuildingPropActor_C::CodeControlled_CurrentTimeLength' has a wrong offset!");

}

