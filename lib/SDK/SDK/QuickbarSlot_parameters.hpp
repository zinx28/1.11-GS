#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: QuickbarSlot

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "FortniteUI_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ItemDisplayStyle_structs.hpp"


namespace SDK::Params
{

// Function QuickbarSlot.QuickbarSlot_C.ExecuteUbergraph_QuickbarSlot
// 0x0100 (0x0100 - 0x0000)
struct QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable2;                             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable3;                             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable4;                             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable5;                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable6;                             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInventoryContext*                  CallFunc_GetContext_ReturnValue;                   // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0040(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate2;             // 0x0050(0x0010)(ZeroConstructor, NoDestructor)
	class UFortInventoryContext*                  CallFunc_GetContext_ReturnValue2;                  // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable7;                             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSlotHidden_ReturnValue;                 // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortWorldItem*                         K2Node_DynamicCast_AsFort_World_Item;              // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EFortItemCardSize                             CallFunc_GetCardSize_ReturnValue;                  // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortItemCardSize                             CallFunc_GetCardSize_ReturnValue2;                 // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EItemDisplayStyle                             Temp_byte_Variable;                                // 0x0083(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default;                             // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate3;             // 0x0090(0x0010)(ZeroConstructor, NoDestructor)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x00A0(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x00DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DE[0x2];                                       // 0x00DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate4;             // 0x00E0(0x0010)(ZeroConstructor, NoDestructor)
	float                                         K2Node_CustomEvent_AnimatedBoxScaleFactor;         // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItem*                              CallFunc_GetQuickBarSlottedItem_ReturnValue;       // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot) == 0x000008, "Wrong alignment on QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot");
static_assert(sizeof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot) == 0x000100, "Wrong size on QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, EntryPoint) == 0x000000, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::EntryPoint' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, Temp_object_Variable) == 0x000008, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, Temp_object_Variable2) == 0x000010, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::Temp_object_Variable2' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, Temp_object_Variable3) == 0x000018, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::Temp_object_Variable3' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, Temp_object_Variable4) == 0x000020, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::Temp_object_Variable4' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, Temp_object_Variable5) == 0x000028, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::Temp_object_Variable5' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, Temp_object_Variable6) == 0x000030, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::Temp_object_Variable6' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, CallFunc_GetContext_ReturnValue) == 0x000038, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::CallFunc_GetContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, K2Node_CreateDelegate_OutputDelegate) == 0x000040, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, K2Node_CreateDelegate_OutputDelegate2) == 0x000050, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::K2Node_CreateDelegate_OutputDelegate2' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, CallFunc_GetContext_ReturnValue2) == 0x000060, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::CallFunc_GetContext_ReturnValue2' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, Temp_object_Variable7) == 0x000068, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::Temp_object_Variable7' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, CallFunc_IsSlotHidden_ReturnValue) == 0x000070, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::CallFunc_IsSlotHidden_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, CallFunc_Not_PreBool_ReturnValue) == 0x000071, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, K2Node_DynamicCast_AsFort_World_Item) == 0x000078, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::K2Node_DynamicCast_AsFort_World_Item' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, K2Node_DynamicCast_bSuccess) == 0x000080, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, CallFunc_GetCardSize_ReturnValue) == 0x000081, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::CallFunc_GetCardSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, CallFunc_GetCardSize_ReturnValue2) == 0x000082, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::CallFunc_GetCardSize_ReturnValue2' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, Temp_byte_Variable) == 0x000083, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, K2Node_Select_Default) == 0x000088, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, K2Node_CreateDelegate_OutputDelegate3) == 0x000090, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::K2Node_CreateDelegate_OutputDelegate3' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, K2Node_Event_MyGeometry) == 0x0000A0, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, K2Node_Event_InDeltaTime) == 0x0000D8, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, K2Node_SwitchEnum_CmpSuccess) == 0x0000DC, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, K2Node_Event_IsDesignTime) == 0x0000DD, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, K2Node_CreateDelegate_OutputDelegate4) == 0x0000E0, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::K2Node_CreateDelegate_OutputDelegate4' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, K2Node_CustomEvent_AnimatedBoxScaleFactor) == 0x0000F0, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::K2Node_CustomEvent_AnimatedBoxScaleFactor' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot, CallFunc_GetQuickBarSlottedItem_ReturnValue) == 0x0000F8, "Member 'QuickbarSlot_C_ExecuteUbergraph_QuickbarSlot::CallFunc_GetQuickBarSlottedItem_ReturnValue' has a wrong offset!");

// Function QuickbarSlot.QuickbarSlot_C.SetAnimatedBoxScaleFactor
// 0x0004 (0x0004 - 0x0000)
struct QuickbarSlot_C_SetAnimatedBoxScaleFactor final
{
public:
	float                                         Param_AnimatedBoxScaleFactor;                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuickbarSlot_C_SetAnimatedBoxScaleFactor) == 0x000004, "Wrong alignment on QuickbarSlot_C_SetAnimatedBoxScaleFactor");
static_assert(sizeof(QuickbarSlot_C_SetAnimatedBoxScaleFactor) == 0x000004, "Wrong size on QuickbarSlot_C_SetAnimatedBoxScaleFactor");
static_assert(offsetof(QuickbarSlot_C_SetAnimatedBoxScaleFactor, Param_AnimatedBoxScaleFactor) == 0x000000, "Member 'QuickbarSlot_C_SetAnimatedBoxScaleFactor::Param_AnimatedBoxScaleFactor' has a wrong offset!");

// Function QuickbarSlot.QuickbarSlot_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct QuickbarSlot_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(QuickbarSlot_C_PreConstruct) == 0x000001, "Wrong alignment on QuickbarSlot_C_PreConstruct");
static_assert(sizeof(QuickbarSlot_C_PreConstruct) == 0x000001, "Wrong size on QuickbarSlot_C_PreConstruct");
static_assert(offsetof(QuickbarSlot_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'QuickbarSlot_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function QuickbarSlot.QuickbarSlot_C.Tick
// 0x003C (0x003C - 0x0000)
struct QuickbarSlot_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuickbarSlot_C_Tick) == 0x000004, "Wrong alignment on QuickbarSlot_C_Tick");
static_assert(sizeof(QuickbarSlot_C_Tick) == 0x00003C, "Wrong size on QuickbarSlot_C_Tick");
static_assert(offsetof(QuickbarSlot_C_Tick, MyGeometry) == 0x000000, "Member 'QuickbarSlot_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_Tick, InDeltaTime) == 0x000038, "Member 'QuickbarSlot_C_Tick::InDeltaTime' has a wrong offset!");

// Function QuickbarSlot.QuickbarSlot_C.SetSelected
// 0x0028 (0x0028 - 0x0000)
struct QuickbarSlot_C_SetSelected final
{
public:
	bool                                          Param_Selected;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable2;                               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonUIContext*                       CallFunc_GetContext_ReturnValue;                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUsingGamepad_ReturnValue;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable3;                               // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable4;                               // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable2;                               // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable5;                               // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable6;                               // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable3;                               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select2_Default;                            // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select3_Default;                            // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetEndTime_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuickbarSlot_C_SetSelected) == 0x000008, "Wrong alignment on QuickbarSlot_C_SetSelected");
static_assert(sizeof(QuickbarSlot_C_SetSelected) == 0x000028, "Wrong size on QuickbarSlot_C_SetSelected");
static_assert(offsetof(QuickbarSlot_C_SetSelected, Param_Selected) == 0x000000, "Member 'QuickbarSlot_C_SetSelected::Param_Selected' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_SetSelected, Temp_byte_Variable) == 0x000001, "Member 'QuickbarSlot_C_SetSelected::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_SetSelected, Temp_byte_Variable2) == 0x000002, "Member 'QuickbarSlot_C_SetSelected::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_SetSelected, CallFunc_GetContext_ReturnValue) == 0x000008, "Member 'QuickbarSlot_C_SetSelected::CallFunc_GetContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_SetSelected, CallFunc_IsUsingGamepad_ReturnValue) == 0x000010, "Member 'QuickbarSlot_C_SetSelected::CallFunc_IsUsingGamepad_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_SetSelected, Temp_bool_Variable) == 0x000011, "Member 'QuickbarSlot_C_SetSelected::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_SetSelected, Temp_byte_Variable3) == 0x000012, "Member 'QuickbarSlot_C_SetSelected::Temp_byte_Variable3' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_SetSelected, Temp_byte_Variable4) == 0x000013, "Member 'QuickbarSlot_C_SetSelected::Temp_byte_Variable4' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_SetSelected, K2Node_Select_Default) == 0x000014, "Member 'QuickbarSlot_C_SetSelected::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_SetSelected, Temp_bool_Variable2) == 0x000015, "Member 'QuickbarSlot_C_SetSelected::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_SetSelected, Temp_byte_Variable5) == 0x000016, "Member 'QuickbarSlot_C_SetSelected::Temp_byte_Variable5' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_SetSelected, Temp_byte_Variable6) == 0x000017, "Member 'QuickbarSlot_C_SetSelected::Temp_byte_Variable6' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_SetSelected, Temp_bool_Variable3) == 0x000018, "Member 'QuickbarSlot_C_SetSelected::Temp_bool_Variable3' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_SetSelected, CallFunc_BooleanAND_ReturnValue) == 0x000019, "Member 'QuickbarSlot_C_SetSelected::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_SetSelected, K2Node_Select2_Default) == 0x00001A, "Member 'QuickbarSlot_C_SetSelected::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_SetSelected, CallFunc_BooleanAND_ReturnValue2) == 0x00001B, "Member 'QuickbarSlot_C_SetSelected::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_SetSelected, K2Node_Select3_Default) == 0x00001C, "Member 'QuickbarSlot_C_SetSelected::K2Node_Select3_Default' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_SetSelected, CallFunc_GetEndTime_ReturnValue) == 0x000020, "Member 'QuickbarSlot_C_SetSelected::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");

// Function QuickbarSlot.QuickbarSlot_C.Minimize
// 0x0002 (0x0002 - 0x0000)
struct QuickbarSlot_C_Minimize final
{
public:
	bool                                          ShouldSkipAnimation;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(QuickbarSlot_C_Minimize) == 0x000001, "Wrong alignment on QuickbarSlot_C_Minimize");
static_assert(sizeof(QuickbarSlot_C_Minimize) == 0x000002, "Wrong size on QuickbarSlot_C_Minimize");
static_assert(offsetof(QuickbarSlot_C_Minimize, ShouldSkipAnimation) == 0x000000, "Member 'QuickbarSlot_C_Minimize::ShouldSkipAnimation' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_Minimize, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000001, "Member 'QuickbarSlot_C_Minimize::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");

// Function QuickbarSlot.QuickbarSlot_C.Maximize
// 0x0002 (0x0002 - 0x0000)
struct QuickbarSlot_C_Maximize final
{
public:
	bool                                          ShouldSkipAnimation;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(QuickbarSlot_C_Maximize) == 0x000001, "Wrong alignment on QuickbarSlot_C_Maximize");
static_assert(sizeof(QuickbarSlot_C_Maximize) == 0x000002, "Wrong size on QuickbarSlot_C_Maximize");
static_assert(offsetof(QuickbarSlot_C_Maximize, ShouldSkipAnimation) == 0x000000, "Member 'QuickbarSlot_C_Maximize::ShouldSkipAnimation' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_Maximize, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000001, "Member 'QuickbarSlot_C_Maximize::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");

// Function QuickbarSlot.QuickbarSlot_C.Resize
// 0x0001 (0x0001 - 0x0000)
struct QuickbarSlot_C_Resize final
{
public:
	EFortItemCardSize                             Card_Size;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuickbarSlot_C_Resize) == 0x000001, "Wrong alignment on QuickbarSlot_C_Resize");
static_assert(sizeof(QuickbarSlot_C_Resize) == 0x000001, "Wrong size on QuickbarSlot_C_Resize");
static_assert(offsetof(QuickbarSlot_C_Resize, Card_Size) == 0x000000, "Member 'QuickbarSlot_C_Resize::Card_Size' has a wrong offset!");

// Function QuickbarSlot.QuickbarSlot_C.UpdateKeyBindingText
// 0x0038 (0x0038 - 0x0000)
struct QuickbarSlot_C_UpdateKeyBindingText final
{
public:
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable2;                               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortGlobalUIContext*                   CallFunc_GetContext_ReturnValue;                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUsingGamepad_ReturnValue;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsHoldKeybind_ReturnValue;                // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetKeyBindingAction_KeyBindingAction;     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetKeyBindingAction_KeyBindingAction2;    // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(QuickbarSlot_C_UpdateKeyBindingText) == 0x000008, "Wrong alignment on QuickbarSlot_C_UpdateKeyBindingText");
static_assert(sizeof(QuickbarSlot_C_UpdateKeyBindingText) == 0x000038, "Wrong size on QuickbarSlot_C_UpdateKeyBindingText");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingText, Temp_byte_Variable) == 0x000000, "Member 'QuickbarSlot_C_UpdateKeyBindingText::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingText, Temp_byte_Variable2) == 0x000001, "Member 'QuickbarSlot_C_UpdateKeyBindingText::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingText, CallFunc_GetContext_ReturnValue) == 0x000008, "Member 'QuickbarSlot_C_UpdateKeyBindingText::CallFunc_GetContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingText, CallFunc_IsUsingGamepad_ReturnValue) == 0x000010, "Member 'QuickbarSlot_C_UpdateKeyBindingText::CallFunc_IsUsingGamepad_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingText, Temp_bool_Variable) == 0x000011, "Member 'QuickbarSlot_C_UpdateKeyBindingText::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingText, CallFunc_IsHoldKeybind_ReturnValue) == 0x000012, "Member 'QuickbarSlot_C_UpdateKeyBindingText::CallFunc_IsHoldKeybind_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingText, CallFunc_IsVisible_ReturnValue) == 0x000013, "Member 'QuickbarSlot_C_UpdateKeyBindingText::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingText, CallFunc_BooleanAND_ReturnValue) == 0x000014, "Member 'QuickbarSlot_C_UpdateKeyBindingText::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingText, K2Node_Select_Default) == 0x000015, "Member 'QuickbarSlot_C_UpdateKeyBindingText::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingText, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000016, "Member 'QuickbarSlot_C_UpdateKeyBindingText::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingText, CallFunc_GetKeyBindingAction_KeyBindingAction) == 0x000018, "Member 'QuickbarSlot_C_UpdateKeyBindingText::CallFunc_GetKeyBindingAction_KeyBindingAction' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingText, CallFunc_BooleanAND_ReturnValue2) == 0x000020, "Member 'QuickbarSlot_C_UpdateKeyBindingText::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingText, CallFunc_GetKeyBindingAction_KeyBindingAction2) == 0x000028, "Member 'QuickbarSlot_C_UpdateKeyBindingText::CallFunc_GetKeyBindingAction_KeyBindingAction2' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingText, K2Node_SwitchEnum_CmpSuccess) == 0x000030, "Member 'QuickbarSlot_C_UpdateKeyBindingText::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function QuickbarSlot.QuickbarSlot_C.UpdateKeyBindingVisibility
// 0x0060 (0x0060 - 0x0000)
struct QuickbarSlot_C_UpdateKeyBindingVisibility final
{
public:
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortInventoryContext*                  CallFunc_GetContext_ReturnValue;                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortQuickBars                                CallFunc_GetQuickbarFocus_OutQuickBar;             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetQuickbarFocus_OutSlot;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetQuickbarFocus_OutSecondarySlot;        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetQuickbarFocus_OutPreviousFocusedSlot;  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortHUDContext*                        CallFunc_GetContext_ReturnValue2;                  // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShouldOnlyShowNextPrevBuildingSlotKeybinds_ReturnValue; // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable2;                               // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable3;                               // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable2;                               // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable4;                               // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable5;                               // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortGlobalUIContext*                   CallFunc_GetContext_ReturnValue3;                  // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortGlobalUIContext*                   CallFunc_GetContext_ReturnValue4;                  // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUsingGamepad_ReturnValue;               // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUsingGamepad_ReturnValue2;              // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable6;                               // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue2;         // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0047(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable3;                               // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue3;         // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable7;                               // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue3;                  // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue4;                  // 0x004F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable8;                               // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select2_Default;                            // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select3_Default;                            // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable4;                               // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select4_Default;                            // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsHoldKeybind_ReturnValue;                // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue5;                  // 0x0057(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum2_CmpSuccess;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(QuickbarSlot_C_UpdateKeyBindingVisibility) == 0x000008, "Wrong alignment on QuickbarSlot_C_UpdateKeyBindingVisibility");
static_assert(sizeof(QuickbarSlot_C_UpdateKeyBindingVisibility) == 0x000060, "Wrong size on QuickbarSlot_C_UpdateKeyBindingVisibility");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, Temp_byte_Variable) == 0x000000, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, CallFunc_GetContext_ReturnValue) == 0x000008, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::CallFunc_GetContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, CallFunc_GetQuickbarFocus_OutQuickBar) == 0x000010, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::CallFunc_GetQuickbarFocus_OutQuickBar' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, CallFunc_GetQuickbarFocus_OutSlot) == 0x000014, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::CallFunc_GetQuickbarFocus_OutSlot' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, CallFunc_GetQuickbarFocus_OutSecondarySlot) == 0x000018, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::CallFunc_GetQuickbarFocus_OutSecondarySlot' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, CallFunc_GetQuickbarFocus_OutPreviousFocusedSlot) == 0x00001C, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::CallFunc_GetQuickbarFocus_OutPreviousFocusedSlot' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, CallFunc_GetContext_ReturnValue2) == 0x000020, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::CallFunc_GetContext_ReturnValue2' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, Temp_bool_Variable) == 0x000028, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, CallFunc_ShouldOnlyShowNextPrevBuildingSlotKeybinds_ReturnValue) == 0x000029, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::CallFunc_ShouldOnlyShowNextPrevBuildingSlotKeybinds_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, Temp_byte_Variable2) == 0x00002A, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, CallFunc_Not_PreBool_ReturnValue) == 0x00002B, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, Temp_byte_Variable3) == 0x00002C, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::Temp_byte_Variable3' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, Temp_bool_Variable2) == 0x00002D, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, Temp_byte_Variable4) == 0x00002E, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::Temp_byte_Variable4' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, Temp_byte_Variable5) == 0x00002F, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::Temp_byte_Variable5' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, CallFunc_GetContext_ReturnValue3) == 0x000030, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::CallFunc_GetContext_ReturnValue3' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, CallFunc_GetContext_ReturnValue4) == 0x000038, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::CallFunc_GetContext_ReturnValue4' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, CallFunc_IsUsingGamepad_ReturnValue) == 0x000040, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::CallFunc_IsUsingGamepad_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, CallFunc_IsUsingGamepad_ReturnValue2) == 0x000041, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::CallFunc_IsUsingGamepad_ReturnValue2' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, K2Node_SwitchEnum_CmpSuccess) == 0x000042, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, CallFunc_IsValid_ReturnValue) == 0x000043, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, Temp_byte_Variable6) == 0x000044, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::Temp_byte_Variable6' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000045, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, CallFunc_EqualEqual_ByteByte_ReturnValue2) == 0x000046, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::CallFunc_EqualEqual_ByteByte_ReturnValue2' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, CallFunc_BooleanAND_ReturnValue) == 0x000047, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, CallFunc_BooleanAND_ReturnValue2) == 0x000048, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, Temp_bool_Variable3) == 0x000049, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::Temp_bool_Variable3' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00004A, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, K2Node_Select_Default) == 0x00004B, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, CallFunc_EqualEqual_ByteByte_ReturnValue3) == 0x00004C, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::CallFunc_EqualEqual_ByteByte_ReturnValue3' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, Temp_byte_Variable7) == 0x00004D, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::Temp_byte_Variable7' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, CallFunc_BooleanAND_ReturnValue3) == 0x00004E, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::CallFunc_BooleanAND_ReturnValue3' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, CallFunc_BooleanAND_ReturnValue4) == 0x00004F, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::CallFunc_BooleanAND_ReturnValue4' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, Temp_byte_Variable8) == 0x000050, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::Temp_byte_Variable8' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, K2Node_Select2_Default) == 0x000051, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, K2Node_Select3_Default) == 0x000052, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::K2Node_Select3_Default' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, Temp_bool_Variable4) == 0x000053, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::Temp_bool_Variable4' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, K2Node_Select4_Default) == 0x000054, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::K2Node_Select4_Default' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, CallFunc_IsHoldKeybind_ReturnValue) == 0x000055, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::CallFunc_IsHoldKeybind_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, CallFunc_IsVisible_ReturnValue) == 0x000056, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, CallFunc_BooleanAND_ReturnValue5) == 0x000057, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::CallFunc_BooleanAND_ReturnValue5' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateKeyBindingVisibility, K2Node_SwitchEnum2_CmpSuccess) == 0x000058, "Member 'QuickbarSlot_C_UpdateKeyBindingVisibility::K2Node_SwitchEnum2_CmpSuccess' has a wrong offset!");

// Function QuickbarSlot.QuickbarSlot_C.InitializeCooldowns
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) QuickbarSlot_C_InitializeCooldowns final
{
public:
	TDelegate<void(EFortItemCooldownType CooldownType)> K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(EFortItemCooldownType CooldownType)> K2Node_CreateDelegate_OutputDelegate2;             // 0x0010(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(QuickbarSlot_C_InitializeCooldowns) == 0x000008, "Wrong alignment on QuickbarSlot_C_InitializeCooldowns");
static_assert(sizeof(QuickbarSlot_C_InitializeCooldowns) == 0x000020, "Wrong size on QuickbarSlot_C_InitializeCooldowns");
static_assert(offsetof(QuickbarSlot_C_InitializeCooldowns, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'QuickbarSlot_C_InitializeCooldowns::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_InitializeCooldowns, K2Node_CreateDelegate_OutputDelegate2) == 0x000010, "Member 'QuickbarSlot_C_InitializeCooldowns::K2Node_CreateDelegate_OutputDelegate2' has a wrong offset!");

// Function QuickbarSlot.QuickbarSlot_C.OnCooldownStarted
// 0x0002 (0x0002 - 0x0000)
struct QuickbarSlot_C_OnCooldownStarted final
{
public:
	EFortItemCooldownType                         CooldownType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(QuickbarSlot_C_OnCooldownStarted) == 0x000001, "Wrong alignment on QuickbarSlot_C_OnCooldownStarted");
static_assert(sizeof(QuickbarSlot_C_OnCooldownStarted) == 0x000002, "Wrong size on QuickbarSlot_C_OnCooldownStarted");
static_assert(offsetof(QuickbarSlot_C_OnCooldownStarted, CooldownType) == 0x000000, "Member 'QuickbarSlot_C_OnCooldownStarted::CooldownType' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_OnCooldownStarted, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'QuickbarSlot_C_OnCooldownStarted::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function QuickbarSlot.QuickbarSlot_C.OnCooldownStopped
// 0x0002 (0x0002 - 0x0000)
struct QuickbarSlot_C_OnCooldownStopped final
{
public:
	EFortItemCooldownType                         CooldownType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(QuickbarSlot_C_OnCooldownStopped) == 0x000001, "Wrong alignment on QuickbarSlot_C_OnCooldownStopped");
static_assert(sizeof(QuickbarSlot_C_OnCooldownStopped) == 0x000002, "Wrong size on QuickbarSlot_C_OnCooldownStopped");
static_assert(offsetof(QuickbarSlot_C_OnCooldownStopped, CooldownType) == 0x000000, "Member 'QuickbarSlot_C_OnCooldownStopped::CooldownType' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_OnCooldownStopped, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'QuickbarSlot_C_OnCooldownStopped::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function QuickbarSlot.QuickbarSlot_C.UpdateItemCardsVisibility
// 0x000D (0x000D - 0x0000)
struct QuickbarSlot_C_UpdateItemCardsVisibility final
{
public:
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable2;                               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable3;                               // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortItemCardSize                             CallFunc_GetCardSize_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable4;                               // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EFortItemCardSize                             CallFunc_GetCardSize_ReturnValue2;                 // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable2;                               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue2;         // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select2_Default;                            // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(QuickbarSlot_C_UpdateItemCardsVisibility) == 0x000001, "Wrong alignment on QuickbarSlot_C_UpdateItemCardsVisibility");
static_assert(sizeof(QuickbarSlot_C_UpdateItemCardsVisibility) == 0x00000D, "Wrong size on QuickbarSlot_C_UpdateItemCardsVisibility");
static_assert(offsetof(QuickbarSlot_C_UpdateItemCardsVisibility, Temp_byte_Variable) == 0x000000, "Member 'QuickbarSlot_C_UpdateItemCardsVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemCardsVisibility, Temp_byte_Variable2) == 0x000001, "Member 'QuickbarSlot_C_UpdateItemCardsVisibility::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemCardsVisibility, Temp_bool_Variable) == 0x000002, "Member 'QuickbarSlot_C_UpdateItemCardsVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemCardsVisibility, Temp_byte_Variable3) == 0x000003, "Member 'QuickbarSlot_C_UpdateItemCardsVisibility::Temp_byte_Variable3' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemCardsVisibility, CallFunc_GetCardSize_ReturnValue) == 0x000004, "Member 'QuickbarSlot_C_UpdateItemCardsVisibility::CallFunc_GetCardSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemCardsVisibility, Temp_byte_Variable4) == 0x000005, "Member 'QuickbarSlot_C_UpdateItemCardsVisibility::Temp_byte_Variable4' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemCardsVisibility, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000006, "Member 'QuickbarSlot_C_UpdateItemCardsVisibility::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemCardsVisibility, CallFunc_GetCardSize_ReturnValue2) == 0x000007, "Member 'QuickbarSlot_C_UpdateItemCardsVisibility::CallFunc_GetCardSize_ReturnValue2' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemCardsVisibility, Temp_bool_Variable2) == 0x000008, "Member 'QuickbarSlot_C_UpdateItemCardsVisibility::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemCardsVisibility, CallFunc_EqualEqual_ByteByte_ReturnValue2) == 0x000009, "Member 'QuickbarSlot_C_UpdateItemCardsVisibility::CallFunc_EqualEqual_ByteByte_ReturnValue2' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemCardsVisibility, K2Node_Select_Default) == 0x00000A, "Member 'QuickbarSlot_C_UpdateItemCardsVisibility::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemCardsVisibility, K2Node_Select2_Default) == 0x00000B, "Member 'QuickbarSlot_C_UpdateItemCardsVisibility::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemCardsVisibility, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'QuickbarSlot_C_UpdateItemCardsVisibility::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function QuickbarSlot.QuickbarSlot_C.UpdateItemBoxSize
// 0x0078 (0x0078 - 0x0000)
struct QuickbarSlot_C_UpdateItemBoxSize final
{
public:
	EFortItemType                                 Item_Type_To_Show;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable2;                               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShouldUseNewItemCards_ReturnValue;        // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EFortItemCardSize                             CallFunc_GetCardSize_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortItemType                                 K2Node_Select_Default;                             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue2;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetCardDimensions_ReturnValue;            // 0x0020(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector2D_X;                          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue3;              // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue4;              // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortItemType                                 CallFunc_GetType_ReturnValue;                      // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortItemCardSize                             CallFunc_GetCardSize_ReturnValue2;                 // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue2;           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortItemType                                 K2Node_Select2_Default;                            // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetCardDimensions_ReturnValue2;           // 0x004C(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue5;              // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X2;                         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y2;                         // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue6;              // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue7;              // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue8;              // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue2;                        // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuickbarSlot_C_UpdateItemBoxSize) == 0x000008, "Wrong alignment on QuickbarSlot_C_UpdateItemBoxSize");
static_assert(sizeof(QuickbarSlot_C_UpdateItemBoxSize) == 0x000078, "Wrong size on QuickbarSlot_C_UpdateItemBoxSize");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, Item_Type_To_Show) == 0x000000, "Member 'QuickbarSlot_C_UpdateItemBoxSize::Item_Type_To_Show' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, Temp_bool_Variable) == 0x000001, "Member 'QuickbarSlot_C_UpdateItemBoxSize::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, Temp_bool_Variable2) == 0x000002, "Member 'QuickbarSlot_C_UpdateItemBoxSize::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_ShouldUseNewItemCards_ReturnValue) == 0x000003, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_ShouldUseNewItemCards_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_GetCardSize_ReturnValue) == 0x000004, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_GetCardSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x000008, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_Add_FloatFloat_ReturnValue) == 0x000014, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, K2Node_Select_Default) == 0x000018, "Member 'QuickbarSlot_C_UpdateItemBoxSize::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_Add_FloatFloat_ReturnValue2) == 0x00001C, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_Add_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_GetCardDimensions_ReturnValue) == 0x000020, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_GetCardDimensions_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_IsValid_ReturnValue2) == 0x000028, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_BreakVector2D_X) == 0x00002C, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_BreakVector2D_Y) == 0x000030, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_Add_FloatFloat_ReturnValue3) == 0x000034, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_Add_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_Add_FloatFloat_ReturnValue4) == 0x000038, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_Add_FloatFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_GetType_ReturnValue) == 0x00003C, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_GetType_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_GetCardSize_ReturnValue2) == 0x00003D, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_GetCardSize_ReturnValue2' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_SlotAsOverlaySlot_ReturnValue2) == 0x000040, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_SlotAsOverlaySlot_ReturnValue2' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, K2Node_Select2_Default) == 0x000048, "Member 'QuickbarSlot_C_UpdateItemBoxSize::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_GetCardDimensions_ReturnValue2) == 0x00004C, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_GetCardDimensions_ReturnValue2' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_Add_FloatFloat_ReturnValue5) == 0x000054, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_Add_FloatFloat_ReturnValue5' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_BreakVector2D_X2) == 0x000058, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_BreakVector2D_X2' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_BreakVector2D_Y2) == 0x00005C, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_BreakVector2D_Y2' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_Add_FloatFloat_ReturnValue6) == 0x000060, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_Add_FloatFloat_ReturnValue6' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_Add_FloatFloat_ReturnValue7) == 0x000064, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_Add_FloatFloat_ReturnValue7' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_Add_FloatFloat_ReturnValue8) == 0x000068, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_Add_FloatFloat_ReturnValue8' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_Lerp_ReturnValue) == 0x00006C, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_UpdateItemBoxSize, CallFunc_Lerp_ReturnValue2) == 0x000070, "Member 'QuickbarSlot_C_UpdateItemBoxSize::CallFunc_Lerp_ReturnValue2' has a wrong offset!");

// Function QuickbarSlot.QuickbarSlot_C.GetKeyBindingAction
// 0x0028 (0x0028 - 0x0000)
struct QuickbarSlot_C_GetKeyBindingAction final
{
public:
	class FName                                   KeyBindingAction;                                  // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortGlobalUIContext*                   CallFunc_GetContext_ReturnValue;                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetKeyBindingAction_Keyboard_Key_Binding_Action; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUsingGamepad_ReturnValue;               // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetKeyBindingAction_Gamepad_KeyBindingAction; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuickbarSlot_C_GetKeyBindingAction) == 0x000008, "Wrong alignment on QuickbarSlot_C_GetKeyBindingAction");
static_assert(sizeof(QuickbarSlot_C_GetKeyBindingAction) == 0x000028, "Wrong size on QuickbarSlot_C_GetKeyBindingAction");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction, KeyBindingAction) == 0x000000, "Member 'QuickbarSlot_C_GetKeyBindingAction::KeyBindingAction' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction, CallFunc_GetContext_ReturnValue) == 0x000008, "Member 'QuickbarSlot_C_GetKeyBindingAction::CallFunc_GetContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction, CallFunc_GetKeyBindingAction_Keyboard_Key_Binding_Action) == 0x000010, "Member 'QuickbarSlot_C_GetKeyBindingAction::CallFunc_GetKeyBindingAction_Keyboard_Key_Binding_Action' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'QuickbarSlot_C_GetKeyBindingAction::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction, CallFunc_IsUsingGamepad_ReturnValue) == 0x000019, "Member 'QuickbarSlot_C_GetKeyBindingAction::CallFunc_IsUsingGamepad_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction, CallFunc_GetKeyBindingAction_Gamepad_KeyBindingAction) == 0x000020, "Member 'QuickbarSlot_C_GetKeyBindingAction::CallFunc_GetKeyBindingAction_Gamepad_KeyBindingAction' has a wrong offset!");

// Function QuickbarSlot.QuickbarSlot_C.GetKeyBindingAction_Keyboard
// 0x0070 (0x0070 - 0x0000)
struct QuickbarSlot_C_GetKeyBindingAction_Keyboard final
{
public:
	class FName                                   Key_Binding_Action;                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortQuickBars                                Temp_byte_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable;                              // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_Select_Default;                             // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue2;               // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(QuickbarSlot_C_GetKeyBindingAction_Keyboard) == 0x000008, "Wrong alignment on QuickbarSlot_C_GetKeyBindingAction_Keyboard");
static_assert(sizeof(QuickbarSlot_C_GetKeyBindingAction_Keyboard) == 0x000070, "Wrong size on QuickbarSlot_C_GetKeyBindingAction_Keyboard");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Keyboard, Key_Binding_Action) == 0x000000, "Member 'QuickbarSlot_C_GetKeyBindingAction_Keyboard::Key_Binding_Action' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Keyboard, Temp_byte_Variable) == 0x000008, "Member 'QuickbarSlot_C_GetKeyBindingAction_Keyboard::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Keyboard, Temp_string_Variable) == 0x000010, "Member 'QuickbarSlot_C_GetKeyBindingAction_Keyboard::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Keyboard, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'QuickbarSlot_C_GetKeyBindingAction_Keyboard::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Keyboard, CallFunc_Conv_IntToString_ReturnValue) == 0x000028, "Member 'QuickbarSlot_C_GetKeyBindingAction_Keyboard::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Keyboard, CallFunc_Concat_StrStr_ReturnValue) == 0x000038, "Member 'QuickbarSlot_C_GetKeyBindingAction_Keyboard::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Keyboard, K2Node_Select_Default) == 0x000048, "Member 'QuickbarSlot_C_GetKeyBindingAction_Keyboard::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Keyboard, CallFunc_Concat_StrStr_ReturnValue2) == 0x000058, "Member 'QuickbarSlot_C_GetKeyBindingAction_Keyboard::CallFunc_Concat_StrStr_ReturnValue2' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Keyboard, CallFunc_Conv_StringToName_ReturnValue) == 0x000068, "Member 'QuickbarSlot_C_GetKeyBindingAction_Keyboard::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");

// Function QuickbarSlot.QuickbarSlot_C.GetKeyBindingAction_Gamepad
// 0x0088 (0x0088 - 0x0000)
struct QuickbarSlot_C_GetKeyBindingAction_Gamepad final
{
public:
	class FName                                   KeyBindingAction;                                  // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OnlyShowBuildingPieceNextPrevKeybinds;             // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FocusedSlotIndex;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPreviousSlot;                                    // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsFocusedSlot;                                     // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetKeyBindingAction_Keyboard_Key_Binding_Action; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetKeyBindingAction_Keyboard_Key_Binding_Action2; // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetKeyBindingAction_Keyboard_Key_Binding_Action3; // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue2;                   // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue2;           // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetKeyBindingAction_Keyboard_Key_Binding_Action4; // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue3;                   // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortInventoryContext*                  CallFunc_GetContext_ReturnValue;                   // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortQuickBars                                CallFunc_GetQuickbarFocus_OutQuickBar;             // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetQuickbarFocus_OutSlot;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetQuickbarFocus_OutSecondarySlot;        // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetQuickbarFocus_OutPreviousFocusedSlot;  // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue3;           // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue4;           // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue5;           // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue4;                   // 0x0073(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortHUDContext*                        CallFunc_GetContext_ReturnValue2;                  // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldOnlyShowNextPrevBuildingSlotKeybinds_ReturnValue; // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchInteger2_CmpSuccess;                  // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchInteger3_CmpSuccess;                  // 0x0083(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(QuickbarSlot_C_GetKeyBindingAction_Gamepad) == 0x000008, "Wrong alignment on QuickbarSlot_C_GetKeyBindingAction_Gamepad");
static_assert(sizeof(QuickbarSlot_C_GetKeyBindingAction_Gamepad) == 0x000088, "Wrong size on QuickbarSlot_C_GetKeyBindingAction_Gamepad");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Gamepad, KeyBindingAction) == 0x000000, "Member 'QuickbarSlot_C_GetKeyBindingAction_Gamepad::KeyBindingAction' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Gamepad, OnlyShowBuildingPieceNextPrevKeybinds) == 0x000008, "Member 'QuickbarSlot_C_GetKeyBindingAction_Gamepad::OnlyShowBuildingPieceNextPrevKeybinds' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Gamepad, FocusedSlotIndex) == 0x00000C, "Member 'QuickbarSlot_C_GetKeyBindingAction_Gamepad::FocusedSlotIndex' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Gamepad, IsPreviousSlot) == 0x000010, "Member 'QuickbarSlot_C_GetKeyBindingAction_Gamepad::IsPreviousSlot' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Gamepad, IsFocusedSlot) == 0x000011, "Member 'QuickbarSlot_C_GetKeyBindingAction_Gamepad::IsFocusedSlot' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Gamepad, CallFunc_GetKeyBindingAction_Keyboard_Key_Binding_Action) == 0x000018, "Member 'QuickbarSlot_C_GetKeyBindingAction_Gamepad::CallFunc_GetKeyBindingAction_Keyboard_Key_Binding_Action' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Gamepad, K2Node_SwitchInteger_CmpSuccess) == 0x000020, "Member 'QuickbarSlot_C_GetKeyBindingAction_Gamepad::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Gamepad, CallFunc_GetKeyBindingAction_Keyboard_Key_Binding_Action2) == 0x000028, "Member 'QuickbarSlot_C_GetKeyBindingAction_Gamepad::CallFunc_GetKeyBindingAction_Keyboard_Key_Binding_Action2' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Gamepad, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000030, "Member 'QuickbarSlot_C_GetKeyBindingAction_Gamepad::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Gamepad, CallFunc_GetKeyBindingAction_Keyboard_Key_Binding_Action3) == 0x000038, "Member 'QuickbarSlot_C_GetKeyBindingAction_Gamepad::CallFunc_GetKeyBindingAction_Keyboard_Key_Binding_Action3' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Gamepad, CallFunc_BooleanAND_ReturnValue) == 0x000040, "Member 'QuickbarSlot_C_GetKeyBindingAction_Gamepad::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Gamepad, CallFunc_BooleanOR_ReturnValue) == 0x000041, "Member 'QuickbarSlot_C_GetKeyBindingAction_Gamepad::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Gamepad, CallFunc_Less_IntInt_ReturnValue) == 0x000042, "Member 'QuickbarSlot_C_GetKeyBindingAction_Gamepad::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Gamepad, CallFunc_BooleanOR_ReturnValue2) == 0x000043, "Member 'QuickbarSlot_C_GetKeyBindingAction_Gamepad::CallFunc_BooleanOR_ReturnValue2' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Gamepad, CallFunc_EqualEqual_IntInt_ReturnValue2) == 0x000044, "Member 'QuickbarSlot_C_GetKeyBindingAction_Gamepad::CallFunc_EqualEqual_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Gamepad, CallFunc_GetKeyBindingAction_Keyboard_Key_Binding_Action4) == 0x000048, "Member 'QuickbarSlot_C_GetKeyBindingAction_Gamepad::CallFunc_GetKeyBindingAction_Keyboard_Key_Binding_Action4' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Gamepad, CallFunc_BooleanAND_ReturnValue2) == 0x000050, "Member 'QuickbarSlot_C_GetKeyBindingAction_Gamepad::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Gamepad, CallFunc_BooleanOR_ReturnValue3) == 0x000051, "Member 'QuickbarSlot_C_GetKeyBindingAction_Gamepad::CallFunc_BooleanOR_ReturnValue3' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Gamepad, CallFunc_GetContext_ReturnValue) == 0x000058, "Member 'QuickbarSlot_C_GetKeyBindingAction_Gamepad::CallFunc_GetContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Gamepad, CallFunc_GetQuickbarFocus_OutQuickBar) == 0x000060, "Member 'QuickbarSlot_C_GetKeyBindingAction_Gamepad::CallFunc_GetQuickbarFocus_OutQuickBar' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Gamepad, CallFunc_GetQuickbarFocus_OutSlot) == 0x000064, "Member 'QuickbarSlot_C_GetKeyBindingAction_Gamepad::CallFunc_GetQuickbarFocus_OutSlot' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Gamepad, CallFunc_GetQuickbarFocus_OutSecondarySlot) == 0x000068, "Member 'QuickbarSlot_C_GetKeyBindingAction_Gamepad::CallFunc_GetQuickbarFocus_OutSecondarySlot' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Gamepad, CallFunc_GetQuickbarFocus_OutPreviousFocusedSlot) == 0x00006C, "Member 'QuickbarSlot_C_GetKeyBindingAction_Gamepad::CallFunc_GetQuickbarFocus_OutPreviousFocusedSlot' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Gamepad, CallFunc_EqualEqual_IntInt_ReturnValue3) == 0x000070, "Member 'QuickbarSlot_C_GetKeyBindingAction_Gamepad::CallFunc_EqualEqual_IntInt_ReturnValue3' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Gamepad, CallFunc_EqualEqual_IntInt_ReturnValue4) == 0x000071, "Member 'QuickbarSlot_C_GetKeyBindingAction_Gamepad::CallFunc_EqualEqual_IntInt_ReturnValue4' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Gamepad, CallFunc_EqualEqual_IntInt_ReturnValue5) == 0x000072, "Member 'QuickbarSlot_C_GetKeyBindingAction_Gamepad::CallFunc_EqualEqual_IntInt_ReturnValue5' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Gamepad, CallFunc_BooleanOR_ReturnValue4) == 0x000073, "Member 'QuickbarSlot_C_GetKeyBindingAction_Gamepad::CallFunc_BooleanOR_ReturnValue4' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Gamepad, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000074, "Member 'QuickbarSlot_C_GetKeyBindingAction_Gamepad::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Gamepad, CallFunc_GetContext_ReturnValue2) == 0x000078, "Member 'QuickbarSlot_C_GetKeyBindingAction_Gamepad::CallFunc_GetContext_ReturnValue2' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Gamepad, CallFunc_ShouldOnlyShowNextPrevBuildingSlotKeybinds_ReturnValue) == 0x000080, "Member 'QuickbarSlot_C_GetKeyBindingAction_Gamepad::CallFunc_ShouldOnlyShowNextPrevBuildingSlotKeybinds_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Gamepad, K2Node_SwitchInteger2_CmpSuccess) == 0x000081, "Member 'QuickbarSlot_C_GetKeyBindingAction_Gamepad::K2Node_SwitchInteger2_CmpSuccess' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Gamepad, K2Node_SwitchEnum_CmpSuccess) == 0x000082, "Member 'QuickbarSlot_C_GetKeyBindingAction_Gamepad::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(QuickbarSlot_C_GetKeyBindingAction_Gamepad, K2Node_SwitchInteger3_CmpSuccess) == 0x000083, "Member 'QuickbarSlot_C_GetKeyBindingAction_Gamepad::K2Node_SwitchInteger3_CmpSuccess' has a wrong offset!");

}

