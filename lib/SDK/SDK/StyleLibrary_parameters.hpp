#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: StyleLibrary

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "Engine_structs.hpp"
#include "FortUIStylesheet_structs.hpp"
#include "FortniteUI_structs.hpp"
#include "SlateCore_structs.hpp"
#include "EFortUITheme_structs.hpp"
#include "FortUITheme_structs.hpp"
#include "EFortUIThemeColor_structs.hpp"


namespace SDK::Params
{

// Function StyleLibrary.StyleLibrary_C.Get Theme Color
// 0x0A98 (0x0A98 - 0x0000)
struct StyleLibrary_C_Get_Theme_Color final
{
public:
	struct FFortUIStylesheet                      Stylesheet;                                        // 0x0000(0x0A00)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	EFortUITheme                                  Theme_Type;                                        // 0x0A00(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortUIThemeColor                             Color_Type;                                        // 0x0A01(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A02[0x6];                                      // 0x0A02(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0A08(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Theme_Color;                                       // 0x0A10(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortUIThemeColor                             Temp_byte_Variable;                                // 0x0A20(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A21[0x3];                                      // 0x0A21(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortUITheme                           CallFunc_Get_Theme_Theme;                          // 0x0A24(0x0060)(HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0A84(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(StyleLibrary_C_Get_Theme_Color) == 0x000008, "Wrong alignment on StyleLibrary_C_Get_Theme_Color");
static_assert(sizeof(StyleLibrary_C_Get_Theme_Color) == 0x000A98, "Wrong size on StyleLibrary_C_Get_Theme_Color");
static_assert(offsetof(StyleLibrary_C_Get_Theme_Color, Stylesheet) == 0x000000, "Member 'StyleLibrary_C_Get_Theme_Color::Stylesheet' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Theme_Color, Theme_Type) == 0x000A00, "Member 'StyleLibrary_C_Get_Theme_Color::Theme_Type' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Theme_Color, Color_Type) == 0x000A01, "Member 'StyleLibrary_C_Get_Theme_Color::Color_Type' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Theme_Color, __WorldContext) == 0x000A08, "Member 'StyleLibrary_C_Get_Theme_Color::__WorldContext' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Theme_Color, Theme_Color) == 0x000A10, "Member 'StyleLibrary_C_Get_Theme_Color::Theme_Color' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Theme_Color, Temp_byte_Variable) == 0x000A20, "Member 'StyleLibrary_C_Get_Theme_Color::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Theme_Color, CallFunc_Get_Theme_Theme) == 0x000A24, "Member 'StyleLibrary_C_Get_Theme_Color::CallFunc_Get_Theme_Theme' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Theme_Color, K2Node_Select_Default) == 0x000A84, "Member 'StyleLibrary_C_Get_Theme_Color::K2Node_Select_Default' has a wrong offset!");

// Function StyleLibrary.StyleLibrary_C.Get Theme
// 0x0AD8 (0x0AD8 - 0x0000)
struct StyleLibrary_C_Get_Theme final
{
public:
	struct FFortUIStylesheet                      Stylesheet;                                        // 0x0000(0x0A00)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	EFortUITheme                                  Theme_Type;                                        // 0x0A00(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A01[0x7];                                      // 0x0A01(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0A08(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFortUITheme                           Theme;                                             // 0x0A10(0x0060)(Parm, OutParm, HasGetValueTypeHash)
	EFortUITheme                                  Temp_byte_Variable;                                // 0x0A70(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A71[0x3];                                      // 0x0A71(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortUITheme                           K2Node_Select_Default;                             // 0x0A74(0x0060)(HasGetValueTypeHash)
};
static_assert(alignof(StyleLibrary_C_Get_Theme) == 0x000008, "Wrong alignment on StyleLibrary_C_Get_Theme");
static_assert(sizeof(StyleLibrary_C_Get_Theme) == 0x000AD8, "Wrong size on StyleLibrary_C_Get_Theme");
static_assert(offsetof(StyleLibrary_C_Get_Theme, Stylesheet) == 0x000000, "Member 'StyleLibrary_C_Get_Theme::Stylesheet' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Theme, Theme_Type) == 0x000A00, "Member 'StyleLibrary_C_Get_Theme::Theme_Type' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Theme, __WorldContext) == 0x000A08, "Member 'StyleLibrary_C_Get_Theme::__WorldContext' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Theme, Theme) == 0x000A10, "Member 'StyleLibrary_C_Get_Theme::Theme' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Theme, Temp_byte_Variable) == 0x000A70, "Member 'StyleLibrary_C_Get_Theme::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Theme, K2Node_Select_Default) == 0x000A74, "Member 'StyleLibrary_C_Get_Theme::K2Node_Select_Default' has a wrong offset!");

// Function StyleLibrary.StyleLibrary_C.Get Standard Icon Size
// 0x0A90 (0x0A90 - 0x0000)
struct StyleLibrary_C_Get_Standard_Icon_Size final
{
public:
	struct FFortUIStylesheet                      Stylesheet;                                        // 0x0000(0x0A00)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	EFortBrushSize                                Brush_Size;                                        // 0x0A00(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A01[0x7];                                      // 0x0A01(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0A08(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Icon_Size;                                         // 0x0A10(0x0008)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateBrush                            CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue; // 0x0A18(0x0078)()
};
static_assert(alignof(StyleLibrary_C_Get_Standard_Icon_Size) == 0x000008, "Wrong alignment on StyleLibrary_C_Get_Standard_Icon_Size");
static_assert(sizeof(StyleLibrary_C_Get_Standard_Icon_Size) == 0x000A90, "Wrong size on StyleLibrary_C_Get_Standard_Icon_Size");
static_assert(offsetof(StyleLibrary_C_Get_Standard_Icon_Size, Stylesheet) == 0x000000, "Member 'StyleLibrary_C_Get_Standard_Icon_Size::Stylesheet' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Standard_Icon_Size, Brush_Size) == 0x000A00, "Member 'StyleLibrary_C_Get_Standard_Icon_Size::Brush_Size' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Standard_Icon_Size, __WorldContext) == 0x000A08, "Member 'StyleLibrary_C_Get_Standard_Icon_Size::__WorldContext' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Standard_Icon_Size, Icon_Size) == 0x000A10, "Member 'StyleLibrary_C_Get_Standard_Icon_Size::Icon_Size' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Standard_Icon_Size, CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue) == 0x000A18, "Member 'StyleLibrary_C_Get_Standard_Icon_Size::CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue' has a wrong offset!");

// Function StyleLibrary.StyleLibrary_C.Get Item Icon Size
// 0x0A90 (0x0A90 - 0x0000)
struct StyleLibrary_C_Get_Item_Icon_Size final
{
public:
	struct FFortUIStylesheet                      Stylesheet;                                        // 0x0000(0x0A00)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	EFortBrushSize                                Brush_Size;                                        // 0x0A00(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A01[0x7];                                      // 0x0A01(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0A08(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Icon_Size;                                         // 0x0A10(0x0008)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateBrush                            CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue; // 0x0A18(0x0078)()
};
static_assert(alignof(StyleLibrary_C_Get_Item_Icon_Size) == 0x000008, "Wrong alignment on StyleLibrary_C_Get_Item_Icon_Size");
static_assert(sizeof(StyleLibrary_C_Get_Item_Icon_Size) == 0x000A90, "Wrong size on StyleLibrary_C_Get_Item_Icon_Size");
static_assert(offsetof(StyleLibrary_C_Get_Item_Icon_Size, Stylesheet) == 0x000000, "Member 'StyleLibrary_C_Get_Item_Icon_Size::Stylesheet' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Item_Icon_Size, Brush_Size) == 0x000A00, "Member 'StyleLibrary_C_Get_Item_Icon_Size::Brush_Size' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Item_Icon_Size, __WorldContext) == 0x000A08, "Member 'StyleLibrary_C_Get_Item_Icon_Size::__WorldContext' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Item_Icon_Size, Icon_Size) == 0x000A10, "Member 'StyleLibrary_C_Get_Item_Icon_Size::Icon_Size' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Item_Icon_Size, CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue) == 0x000A18, "Member 'StyleLibrary_C_Get_Item_Icon_Size::CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue' has a wrong offset!");

// Function StyleLibrary.StyleLibrary_C.Get Buff Color
// 0x0A18 (0x0A18 - 0x0000)
struct StyleLibrary_C_Get_Buff_Color final
{
public:
	struct FFortUIStylesheet                      Stylesheet;                                        // 0x0000(0x0A00)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0A00(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x0A08(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(StyleLibrary_C_Get_Buff_Color) == 0x000008, "Wrong alignment on StyleLibrary_C_Get_Buff_Color");
static_assert(sizeof(StyleLibrary_C_Get_Buff_Color) == 0x000A18, "Wrong size on StyleLibrary_C_Get_Buff_Color");
static_assert(offsetof(StyleLibrary_C_Get_Buff_Color, Stylesheet) == 0x000000, "Member 'StyleLibrary_C_Get_Buff_Color::Stylesheet' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Buff_Color, __WorldContext) == 0x000A00, "Member 'StyleLibrary_C_Get_Buff_Color::__WorldContext' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Buff_Color, Color) == 0x000A08, "Member 'StyleLibrary_C_Get_Buff_Color::Color' has a wrong offset!");

// Function StyleLibrary.StyleLibrary_C.Get Debuff Color
// 0x0A18 (0x0A18 - 0x0000)
struct StyleLibrary_C_Get_Debuff_Color final
{
public:
	struct FFortUIStylesheet                      Stylesheet;                                        // 0x0000(0x0A00)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0A00(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x0A08(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(StyleLibrary_C_Get_Debuff_Color) == 0x000008, "Wrong alignment on StyleLibrary_C_Get_Debuff_Color");
static_assert(sizeof(StyleLibrary_C_Get_Debuff_Color) == 0x000A18, "Wrong size on StyleLibrary_C_Get_Debuff_Color");
static_assert(offsetof(StyleLibrary_C_Get_Debuff_Color, Stylesheet) == 0x000000, "Member 'StyleLibrary_C_Get_Debuff_Color::Stylesheet' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Debuff_Color, __WorldContext) == 0x000A00, "Member 'StyleLibrary_C_Get_Debuff_Color::__WorldContext' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Debuff_Color, Color) == 0x000A08, "Member 'StyleLibrary_C_Get_Debuff_Color::Color' has a wrong offset!");

// Function StyleLibrary.StyleLibrary_C.Get Item Size
// 0x0A90 (0x0A90 - 0x0000)
struct StyleLibrary_C_Get_Item_Size final
{
public:
	struct FFortUIStylesheet                      Stylesheet;                                        // 0x0000(0x0A00)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	EFortBrushSize                                Brush_Size;                                        // 0x0A00(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A01[0x7];                                      // 0x0A01(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0A08(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Item_Size;                                         // 0x0A10(0x0008)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateBrush                            CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue; // 0x0A18(0x0078)()
};
static_assert(alignof(StyleLibrary_C_Get_Item_Size) == 0x000008, "Wrong alignment on StyleLibrary_C_Get_Item_Size");
static_assert(sizeof(StyleLibrary_C_Get_Item_Size) == 0x000A90, "Wrong size on StyleLibrary_C_Get_Item_Size");
static_assert(offsetof(StyleLibrary_C_Get_Item_Size, Stylesheet) == 0x000000, "Member 'StyleLibrary_C_Get_Item_Size::Stylesheet' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Item_Size, Brush_Size) == 0x000A00, "Member 'StyleLibrary_C_Get_Item_Size::Brush_Size' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Item_Size, __WorldContext) == 0x000A08, "Member 'StyleLibrary_C_Get_Item_Size::__WorldContext' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Item_Size, Item_Size) == 0x000A10, "Member 'StyleLibrary_C_Get_Item_Size::Item_Size' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Item_Size, CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue) == 0x000A18, "Member 'StyleLibrary_C_Get_Item_Size::CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue' has a wrong offset!");

// Function StyleLibrary.StyleLibrary_C.Get Unique Color
// 0x0A18 (0x0A18 - 0x0000)
struct StyleLibrary_C_Get_Unique_Color final
{
public:
	struct FFortUIStylesheet                      Stylesheet;                                        // 0x0000(0x0A00)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0A00(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x0A08(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(StyleLibrary_C_Get_Unique_Color) == 0x000008, "Wrong alignment on StyleLibrary_C_Get_Unique_Color");
static_assert(sizeof(StyleLibrary_C_Get_Unique_Color) == 0x000A18, "Wrong size on StyleLibrary_C_Get_Unique_Color");
static_assert(offsetof(StyleLibrary_C_Get_Unique_Color, Stylesheet) == 0x000000, "Member 'StyleLibrary_C_Get_Unique_Color::Stylesheet' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Unique_Color, __WorldContext) == 0x000A00, "Member 'StyleLibrary_C_Get_Unique_Color::__WorldContext' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Unique_Color, Color) == 0x000A08, "Member 'StyleLibrary_C_Get_Unique_Color::Color' has a wrong offset!");

// Function StyleLibrary.StyleLibrary_C.Get Fire Elemental Color
// 0x0A18 (0x0A18 - 0x0000)
struct StyleLibrary_C_Get_Fire_Elemental_Color final
{
public:
	struct FFortUIStylesheet                      Stylesheet;                                        // 0x0000(0x0A00)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0A00(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x0A08(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(StyleLibrary_C_Get_Fire_Elemental_Color) == 0x000008, "Wrong alignment on StyleLibrary_C_Get_Fire_Elemental_Color");
static_assert(sizeof(StyleLibrary_C_Get_Fire_Elemental_Color) == 0x000A18, "Wrong size on StyleLibrary_C_Get_Fire_Elemental_Color");
static_assert(offsetof(StyleLibrary_C_Get_Fire_Elemental_Color, Stylesheet) == 0x000000, "Member 'StyleLibrary_C_Get_Fire_Elemental_Color::Stylesheet' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Fire_Elemental_Color, __WorldContext) == 0x000A00, "Member 'StyleLibrary_C_Get_Fire_Elemental_Color::__WorldContext' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Fire_Elemental_Color, Color) == 0x000A08, "Member 'StyleLibrary_C_Get_Fire_Elemental_Color::Color' has a wrong offset!");

// Function StyleLibrary.StyleLibrary_C.Get Ice Elemental Color
// 0x0A18 (0x0A18 - 0x0000)
struct StyleLibrary_C_Get_Ice_Elemental_Color final
{
public:
	struct FFortUIStylesheet                      Stylesheet;                                        // 0x0000(0x0A00)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0A00(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x0A08(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(StyleLibrary_C_Get_Ice_Elemental_Color) == 0x000008, "Wrong alignment on StyleLibrary_C_Get_Ice_Elemental_Color");
static_assert(sizeof(StyleLibrary_C_Get_Ice_Elemental_Color) == 0x000A18, "Wrong size on StyleLibrary_C_Get_Ice_Elemental_Color");
static_assert(offsetof(StyleLibrary_C_Get_Ice_Elemental_Color, Stylesheet) == 0x000000, "Member 'StyleLibrary_C_Get_Ice_Elemental_Color::Stylesheet' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Ice_Elemental_Color, __WorldContext) == 0x000A00, "Member 'StyleLibrary_C_Get_Ice_Elemental_Color::__WorldContext' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Ice_Elemental_Color, Color) == 0x000A08, "Member 'StyleLibrary_C_Get_Ice_Elemental_Color::Color' has a wrong offset!");

// Function StyleLibrary.StyleLibrary_C.Get Bolt Elemental Color
// 0x0A18 (0x0A18 - 0x0000)
struct StyleLibrary_C_Get_Bolt_Elemental_Color final
{
public:
	struct FFortUIStylesheet                      Stylesheet;                                        // 0x0000(0x0A00)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0A00(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x0A08(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(StyleLibrary_C_Get_Bolt_Elemental_Color) == 0x000008, "Wrong alignment on StyleLibrary_C_Get_Bolt_Elemental_Color");
static_assert(sizeof(StyleLibrary_C_Get_Bolt_Elemental_Color) == 0x000A18, "Wrong size on StyleLibrary_C_Get_Bolt_Elemental_Color");
static_assert(offsetof(StyleLibrary_C_Get_Bolt_Elemental_Color, Stylesheet) == 0x000000, "Member 'StyleLibrary_C_Get_Bolt_Elemental_Color::Stylesheet' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Bolt_Elemental_Color, __WorldContext) == 0x000A00, "Member 'StyleLibrary_C_Get_Bolt_Elemental_Color::__WorldContext' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Bolt_Elemental_Color, Color) == 0x000A08, "Member 'StyleLibrary_C_Get_Bolt_Elemental_Color::Color' has a wrong offset!");

// Function StyleLibrary.StyleLibrary_C.Get Base & Buff Colors
// 0x0AE8 (0x0AE8 - 0x0000)
struct StyleLibrary_C_Get_Base___Buff_Colors final
{
public:
	EFortStatValueDisplayType                     Display_Type;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortBuffState                                Buff_State;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortUIStylesheet                      Stylesheet;                                        // 0x0008(0x0A00)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0A08(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Base;                                              // 0x0A10(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Buff;                                              // 0x0A20(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0A30(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Get_Buff_Color_Color;                     // 0x0A40(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Get_Debuff_Color_Color;                   // 0x0A50(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Get_Unique_Color_Color;                   // 0x0A60(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Get_Fire_Elemental_Color_Color;           // 0x0A70(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Get_Ice_Elemental_Color_Color;            // 0x0A80(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Get_Bolt_Elemental_Color_Color;           // 0x0A90(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortStatValueDisplayType                     Temp_byte_Variable;                                // 0x0AA0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AA1[0x3];                                      // 0x0AA1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable2;                             // 0x0AA4(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable3;                             // 0x0AB4(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortBuffState                                Temp_byte_Variable2;                               // 0x0AC4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC5[0x3];                                      // 0x0AC5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0AC8(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select2_Default;                            // 0x0AD8(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(StyleLibrary_C_Get_Base___Buff_Colors) == 0x000008, "Wrong alignment on StyleLibrary_C_Get_Base___Buff_Colors");
static_assert(sizeof(StyleLibrary_C_Get_Base___Buff_Colors) == 0x000AE8, "Wrong size on StyleLibrary_C_Get_Base___Buff_Colors");
static_assert(offsetof(StyleLibrary_C_Get_Base___Buff_Colors, Display_Type) == 0x000000, "Member 'StyleLibrary_C_Get_Base___Buff_Colors::Display_Type' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Base___Buff_Colors, Buff_State) == 0x000001, "Member 'StyleLibrary_C_Get_Base___Buff_Colors::Buff_State' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Base___Buff_Colors, Stylesheet) == 0x000008, "Member 'StyleLibrary_C_Get_Base___Buff_Colors::Stylesheet' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Base___Buff_Colors, __WorldContext) == 0x000A08, "Member 'StyleLibrary_C_Get_Base___Buff_Colors::__WorldContext' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Base___Buff_Colors, Base) == 0x000A10, "Member 'StyleLibrary_C_Get_Base___Buff_Colors::Base' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Base___Buff_Colors, Buff) == 0x000A20, "Member 'StyleLibrary_C_Get_Base___Buff_Colors::Buff' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Base___Buff_Colors, Temp_struct_Variable) == 0x000A30, "Member 'StyleLibrary_C_Get_Base___Buff_Colors::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Base___Buff_Colors, CallFunc_Get_Buff_Color_Color) == 0x000A40, "Member 'StyleLibrary_C_Get_Base___Buff_Colors::CallFunc_Get_Buff_Color_Color' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Base___Buff_Colors, CallFunc_Get_Debuff_Color_Color) == 0x000A50, "Member 'StyleLibrary_C_Get_Base___Buff_Colors::CallFunc_Get_Debuff_Color_Color' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Base___Buff_Colors, CallFunc_Get_Unique_Color_Color) == 0x000A60, "Member 'StyleLibrary_C_Get_Base___Buff_Colors::CallFunc_Get_Unique_Color_Color' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Base___Buff_Colors, CallFunc_Get_Fire_Elemental_Color_Color) == 0x000A70, "Member 'StyleLibrary_C_Get_Base___Buff_Colors::CallFunc_Get_Fire_Elemental_Color_Color' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Base___Buff_Colors, CallFunc_Get_Ice_Elemental_Color_Color) == 0x000A80, "Member 'StyleLibrary_C_Get_Base___Buff_Colors::CallFunc_Get_Ice_Elemental_Color_Color' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Base___Buff_Colors, CallFunc_Get_Bolt_Elemental_Color_Color) == 0x000A90, "Member 'StyleLibrary_C_Get_Base___Buff_Colors::CallFunc_Get_Bolt_Elemental_Color_Color' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Base___Buff_Colors, Temp_byte_Variable) == 0x000AA0, "Member 'StyleLibrary_C_Get_Base___Buff_Colors::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Base___Buff_Colors, Temp_struct_Variable2) == 0x000AA4, "Member 'StyleLibrary_C_Get_Base___Buff_Colors::Temp_struct_Variable2' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Base___Buff_Colors, Temp_struct_Variable3) == 0x000AB4, "Member 'StyleLibrary_C_Get_Base___Buff_Colors::Temp_struct_Variable3' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Base___Buff_Colors, Temp_byte_Variable2) == 0x000AC4, "Member 'StyleLibrary_C_Get_Base___Buff_Colors::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Base___Buff_Colors, K2Node_Select_Default) == 0x000AC8, "Member 'StyleLibrary_C_Get_Base___Buff_Colors::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Base___Buff_Colors, K2Node_Select2_Default) == 0x000AD8, "Member 'StyleLibrary_C_Get_Base___Buff_Colors::K2Node_Select2_Default' has a wrong offset!");

// Function StyleLibrary.StyleLibrary_C.ResizeBrush
// 0x0180 (0x0180 - 0x0000)
struct StyleLibrary_C_ResizeBrush final
{
public:
	EFortBrushSize                                BrushSize;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            BaseBrush;                                         // 0x0008(0x0078)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UObject*                                __WorldContext;                                    // 0x0080(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateBrush                            NewParam;                                          // 0x0088(0x0078)(Parm, OutParm)
	struct FVector2D                              CallFunc_Get_Standard_Icon_Size_Icon_Size;         // 0x0100(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush;                      // 0x0108(0x0078)()
};
static_assert(alignof(StyleLibrary_C_ResizeBrush) == 0x000008, "Wrong alignment on StyleLibrary_C_ResizeBrush");
static_assert(sizeof(StyleLibrary_C_ResizeBrush) == 0x000180, "Wrong size on StyleLibrary_C_ResizeBrush");
static_assert(offsetof(StyleLibrary_C_ResizeBrush, BrushSize) == 0x000000, "Member 'StyleLibrary_C_ResizeBrush::BrushSize' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_ResizeBrush, BaseBrush) == 0x000008, "Member 'StyleLibrary_C_ResizeBrush::BaseBrush' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_ResizeBrush, __WorldContext) == 0x000080, "Member 'StyleLibrary_C_ResizeBrush::__WorldContext' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_ResizeBrush, NewParam) == 0x000088, "Member 'StyleLibrary_C_ResizeBrush::NewParam' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_ResizeBrush, CallFunc_Get_Standard_Icon_Size_Icon_Size) == 0x000100, "Member 'StyleLibrary_C_ResizeBrush::CallFunc_Get_Standard_Icon_Size_Icon_Size' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_ResizeBrush, K2Node_MakeStruct_SlateBrush) == 0x000108, "Member 'StyleLibrary_C_ResizeBrush::K2Node_MakeStruct_SlateBrush' has a wrong offset!");

// Function StyleLibrary.StyleLibrary_C.Get HarvestWeakPoint Color
// 0x0A18 (0x0A18 - 0x0000)
struct StyleLibrary_C_Get_HarvestWeakPoint_Color final
{
public:
	struct FFortUIStylesheet                      Stylesheet;                                        // 0x0000(0x0A00)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0A00(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           StyleSheetOut;                                     // 0x0A08(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(StyleLibrary_C_Get_HarvestWeakPoint_Color) == 0x000008, "Wrong alignment on StyleLibrary_C_Get_HarvestWeakPoint_Color");
static_assert(sizeof(StyleLibrary_C_Get_HarvestWeakPoint_Color) == 0x000A18, "Wrong size on StyleLibrary_C_Get_HarvestWeakPoint_Color");
static_assert(offsetof(StyleLibrary_C_Get_HarvestWeakPoint_Color, Stylesheet) == 0x000000, "Member 'StyleLibrary_C_Get_HarvestWeakPoint_Color::Stylesheet' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_HarvestWeakPoint_Color, __WorldContext) == 0x000A00, "Member 'StyleLibrary_C_Get_HarvestWeakPoint_Color::__WorldContext' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_HarvestWeakPoint_Color, StyleSheetOut) == 0x000A08, "Member 'StyleLibrary_C_Get_HarvestWeakPoint_Color::StyleSheetOut' has a wrong offset!");

// Function StyleLibrary.StyleLibrary_C.Get Conning Color From Difficulty Value
// 0x0288 (0x0288 - 0x0000)
struct StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value final
{
public:
	int32                                         Player_Skill_Level;                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Content_Difficulty_Level;                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameDifficultyInfo                    Game_Difficulty_Info;                              // 0x0008(0x0080)(BlueprintVisible, BlueprintReadOnly, Parm)
	int32                                         Content_Skill_Points;                              // 0x0088(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Difficulty_Linear_Color;                           // 0x0098(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ToolTipText;                                       // 0x00B0(0x0018)(Parm, OutParm)
	int32                                         DifficultyValue;                                   // 0x00C8(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           DifficultyColorNames;                              // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TArray<class FText>                           DifficultyTooltips;                                // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TArray<int32>                                 DifficultyIndices;                                 // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FLinearColor>                   DifficultyColors;                                  // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TArray<class FName>                           RowNames;                                          // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	int32                                         DifficultyOut;                                     // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MultipleGreenHexIndexOffset;                       // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GreenBottomArrayElementIndex;                      // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Content_DL_In;                                     // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   DifficultyColorName;                               // 0x0130(0x0018)(Edit, BlueprintVisible)
	class FText                                   ConningTooltipText;                                // 0x0148(0x0018)(Edit, BlueprintVisible)
	int32                                         Content_SP;                                        // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Valid;                                             // 0x0164(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_165[0x3];                                      // 0x0165(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Player_Skill_Level_In;                             // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 SPCutoffValues;                                    // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	int32                                         Stonewood_VLT_Skill_Level;                         // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DifficultyColor;                                   // 0x0184(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BucketOffsetValue;                                 // 0x0194(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Array_Get_Item;                           // 0x0198(0x0018)()
	class FText                                   CallFunc_Array_Get_Item2;                          // 0x01B0(0x0018)()
	struct FLinearColor                           CallFunc_Array_Get_Item3;                          // 0x01C8(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<float>                                 K2Node_MakeArray_Array;                            // 0x01D8(0x0010)(ZeroConstructor, ReferenceParm)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           K2Node_MakeArray_Array2;                           // 0x01F8(0x0010)(ZeroConstructor, ReferenceParm)
	class FName                                   CallFunc_Array_Get_Item4;                          // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_211[0x3];                                      // 0x0211(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue2;                  // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FLinearColor>                   K2Node_MakeArray_Array3;                           // 0x0218(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_231[0x3];                                      // 0x0231(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Get_Item5;                          // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item6;                          // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x023C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23D[0x3];                                      // 0x023D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array4;                           // 0x0240(0x0010)(ZeroConstructor, ReferenceParm)
	EEvaluateCurveTableResult                     CallFunc_EvaluateCurveTableRow_OutResult;          // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_251[0x3];                                      // 0x0251(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_EvaluateCurveTableRow_OutXY;              // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0259(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25A[0x6];                                      // 0x025A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           K2Node_MakeArray_Array5;                           // 0x0260(0x0010)(ZeroConstructor, ReferenceParm)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0271(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_272[0x6];                                      // 0x0272(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           K2Node_MakeArray_Array6;                           // 0x0278(0x0010)(ZeroConstructor, ReferenceParm)
};
static_assert(alignof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value) == 0x000008, "Wrong alignment on StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value");
static_assert(sizeof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value) == 0x000288, "Wrong size on StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, Player_Skill_Level) == 0x000000, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::Player_Skill_Level' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, Content_Difficulty_Level) == 0x000004, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::Content_Difficulty_Level' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, Game_Difficulty_Info) == 0x000008, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::Game_Difficulty_Info' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, Content_Skill_Points) == 0x000088, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::Content_Skill_Points' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, __WorldContext) == 0x000090, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::__WorldContext' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, Difficulty_Linear_Color) == 0x000098, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::Difficulty_Linear_Color' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, Success) == 0x0000A8, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::Success' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, ToolTipText) == 0x0000B0, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::ToolTipText' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, DifficultyValue) == 0x0000C8, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::DifficultyValue' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, DifficultyColorNames) == 0x0000D0, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::DifficultyColorNames' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, DifficultyTooltips) == 0x0000E0, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::DifficultyTooltips' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, DifficultyIndices) == 0x0000F0, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::DifficultyIndices' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, DifficultyColors) == 0x000100, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::DifficultyColors' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, RowNames) == 0x000110, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::RowNames' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, DifficultyOut) == 0x000120, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::DifficultyOut' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, MultipleGreenHexIndexOffset) == 0x000124, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::MultipleGreenHexIndexOffset' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, GreenBottomArrayElementIndex) == 0x000128, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::GreenBottomArrayElementIndex' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, Content_DL_In) == 0x00012C, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::Content_DL_In' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, DifficultyColorName) == 0x000130, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::DifficultyColorName' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, ConningTooltipText) == 0x000148, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::ConningTooltipText' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, Content_SP) == 0x000160, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::Content_SP' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, Valid) == 0x000164, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::Valid' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, Player_Skill_Level_In) == 0x000168, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::Player_Skill_Level_In' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, SPCutoffValues) == 0x000170, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::SPCutoffValues' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, Stonewood_VLT_Skill_Level) == 0x000180, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::Stonewood_VLT_Skill_Level' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, DifficultyColor) == 0x000184, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::DifficultyColor' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, BucketOffsetValue) == 0x000194, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::BucketOffsetValue' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, CallFunc_Array_Get_Item) == 0x000198, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, CallFunc_Array_Get_Item2) == 0x0001B0, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::CallFunc_Array_Get_Item2' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, CallFunc_Array_Get_Item3) == 0x0001C8, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::CallFunc_Array_Get_Item3' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, K2Node_MakeArray_Array) == 0x0001D8, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, CallFunc_Conv_IntToFloat_ReturnValue) == 0x0001E8, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, Temp_int_Loop_Counter_Variable) == 0x0001EC, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, CallFunc_Add_IntInt_ReturnValue) == 0x0001F0, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, Temp_int_Variable) == 0x0001F4, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, K2Node_MakeArray_Array2) == 0x0001F8, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::K2Node_MakeArray_Array2' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, CallFunc_Array_Get_Item4) == 0x000208, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::CallFunc_Array_Get_Item4' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000210, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, CallFunc_Add_IntInt_ReturnValue2) == 0x000214, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::CallFunc_Add_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, K2Node_MakeArray_Array3) == 0x000218, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::K2Node_MakeArray_Array3' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, CallFunc_Array_Length_ReturnValue) == 0x000228, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, Temp_int_Array_Index_Variable) == 0x00022C, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, CallFunc_Less_IntInt_ReturnValue) == 0x000230, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, CallFunc_Array_Get_Item5) == 0x000234, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::CallFunc_Array_Get_Item5' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, CallFunc_Array_Get_Item6) == 0x000238, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::CallFunc_Array_Get_Item6' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00023C, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, K2Node_MakeArray_Array4) == 0x000240, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::K2Node_MakeArray_Array4' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, CallFunc_EvaluateCurveTableRow_OutResult) == 0x000250, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::CallFunc_EvaluateCurveTableRow_OutResult' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, CallFunc_EvaluateCurveTableRow_OutXY) == 0x000254, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::CallFunc_EvaluateCurveTableRow_OutXY' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, K2Node_SwitchEnum_CmpSuccess) == 0x000258, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, Temp_bool_True_if_break_was_hit_Variable) == 0x000259, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, K2Node_MakeArray_Array5) == 0x000260, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::K2Node_MakeArray_Array5' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, CallFunc_Not_PreBool_ReturnValue) == 0x000270, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, CallFunc_BooleanAND_ReturnValue) == 0x000271, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value, K2Node_MakeArray_Array6) == 0x000278, "Member 'StyleLibrary_C_Get_Conning_Color_From_Difficulty_Value::K2Node_MakeArray_Array6' has a wrong offset!");

// Function StyleLibrary.StyleLibrary_C.Get Conning Color For Specific Difficulty
// 0x0038 (0x0038 - 0x0000)
struct StyleLibrary_C_Get_Conning_Color_For_Specific_Difficulty final
{
public:
	int32                                         Difficulty_Value;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Difficulty_Linear_Color;                           // 0x0010(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Invalid;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           DifficultyColor;                                   // 0x0024(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(StyleLibrary_C_Get_Conning_Color_For_Specific_Difficulty) == 0x000008, "Wrong alignment on StyleLibrary_C_Get_Conning_Color_For_Specific_Difficulty");
static_assert(sizeof(StyleLibrary_C_Get_Conning_Color_For_Specific_Difficulty) == 0x000038, "Wrong size on StyleLibrary_C_Get_Conning_Color_For_Specific_Difficulty");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_For_Specific_Difficulty, Difficulty_Value) == 0x000000, "Member 'StyleLibrary_C_Get_Conning_Color_For_Specific_Difficulty::Difficulty_Value' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_For_Specific_Difficulty, __WorldContext) == 0x000008, "Member 'StyleLibrary_C_Get_Conning_Color_For_Specific_Difficulty::__WorldContext' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_For_Specific_Difficulty, Difficulty_Linear_Color) == 0x000010, "Member 'StyleLibrary_C_Get_Conning_Color_For_Specific_Difficulty::Difficulty_Linear_Color' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_For_Specific_Difficulty, Invalid) == 0x000020, "Member 'StyleLibrary_C_Get_Conning_Color_For_Specific_Difficulty::Invalid' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_For_Specific_Difficulty, DifficultyColor) == 0x000024, "Member 'StyleLibrary_C_Get_Conning_Color_For_Specific_Difficulty::DifficultyColor' has a wrong offset!");
static_assert(offsetof(StyleLibrary_C_Get_Conning_Color_For_Specific_Difficulty, K2Node_SwitchInteger_CmpSuccess) == 0x000034, "Member 'StyleLibrary_C_Get_Conning_Color_For_Specific_Difficulty::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");

}

