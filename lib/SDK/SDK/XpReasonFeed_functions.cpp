#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: XpReasonFeed

#include "Basic.hpp"

#include "XpReasonFeed_classes.hpp"
#include "XpReasonFeed_parameters.hpp"


namespace SDK
{

// Function XpReasonFeed.XpReasonFeed_C.ExecuteUbergraph_XpReasonFeed
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UXpReasonFeed_C::ExecuteUbergraph_XpReasonFeed(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XpReasonFeed_C", "ExecuteUbergraph_XpReasonFeed");

	Params::XpReasonFeed_C_ExecuteUbergraph_XpReasonFeed Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function XpReasonFeed.XpReasonFeed_C.Destruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UXpReasonFeed_C::Destruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XpReasonFeed_C", "Destruct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function XpReasonFeed.XpReasonFeed_C.Reset Feed
// (BlueprintCallable, BlueprintEvent)

void UXpReasonFeed_C::Reset_Feed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XpReasonFeed_C", "Reset Feed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function XpReasonFeed.XpReasonFeed_C.Play Xp Reward
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FAthenaMatchXpReward             Reward                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UXpReasonFeed_C::Play_Xp_Reward(const struct FAthenaMatchXpReward& Reward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XpReasonFeed_C", "Play Xp Reward");

	Params::XpReasonFeed_C_Play_Xp_Reward Parms{};

	Parms.Reward = std::move(Reward);

	UObject::ProcessEvent(Func, &Parms);
}


// Function XpReasonFeed.XpReasonFeed_C.IsReadyForNextXpReward
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Ready                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UXpReasonFeed_C::IsReadyForNextXpReward(bool* Ready)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XpReasonFeed_C", "IsReadyForNextXpReward");

	Params::XpReasonFeed_C_IsReadyForNextXpReward Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Ready != nullptr)
		*Ready = Parms.Ready;
}


// Function XpReasonFeed.XpReasonFeed_C.SetXpRewards
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FAthenaMatchXpReward>     XpRewards                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UXpReasonFeed_C::SetXpRewards(TArray<struct FAthenaMatchXpReward>& XpRewards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XpReasonFeed_C", "SetXpRewards");

	Params::XpReasonFeed_C_SetXpRewards Parms{};

	Parms.XpRewards = std::move(XpRewards);

	UObject::ProcessEvent(Func, &Parms);

	XpRewards = std::move(Parms.XpRewards);
}


// Function XpReasonFeed.XpReasonFeed_C.ShowAllXpRewards
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Show                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UXpReasonFeed_C::ShowAllXpRewards(bool Show)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("XpReasonFeed_C", "ShowAllXpRewards");

	Params::XpReasonFeed_C_ShowAllXpRewards Parms{};

	Parms.Show = Show;

	UObject::ProcessEvent(Func, &Parms);
}

}

